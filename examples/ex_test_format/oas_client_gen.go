// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric/instrument/syncint64"
	"go.opentelemetry.io/otel/trace"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	cfg       config
	requests  syncint64.Counter
	errors    syncint64.Counter
	duration  syncint64.Histogram
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c := &Client{
		cfg:       newConfig(opts...),
		serverURL: u,
	}
	if c.requests, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientRequestCount); err != nil {
		return nil, err
	}
	if c.errors, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientErrorsCount); err != nil {
		return nil, err
	}
	if c.duration, err = c.cfg.Meter.SyncInt64().Histogram(otelogen.ClientDuration); err != nil {
		return nil, err
	}
	return c, nil
}

// TestRequestAny invokes test_request_Any operation.
//
// POST /test_request_Any
func (c *Client) TestRequestAny(ctx context.Context, request jx.Raw) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_Any"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestAny",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestAnyRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_Any"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestAnyResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBoolean invokes test_request_boolean operation.
//
// POST /test_request_boolean
func (c *Client) TestRequestBoolean(ctx context.Context, request OptBool) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBoolean",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestBooleanRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_boolean"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestBooleanResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanArray invokes test_request_boolean_array operation.
//
// POST /test_request_boolean_array
func (c *Client) TestRequestBooleanArray(ctx context.Context, request []bool) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestBooleanArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_boolean_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestBooleanArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanArrayArray invokes test_request_boolean_array_array operation.
//
// POST /test_request_boolean_array_array
func (c *Client) TestRequestBooleanArrayArray(ctx context.Context, request [][]bool) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestBooleanArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_boolean_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestBooleanArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanNullable invokes test_request_boolean_nullable operation.
//
// POST /test_request_boolean_nullable
func (c *Client) TestRequestBooleanNullable(ctx context.Context, request OptNilBool) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestBooleanNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_boolean_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestBooleanNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanNullableArray invokes test_request_boolean_nullable_array operation.
//
// POST /test_request_boolean_nullable_array
func (c *Client) TestRequestBooleanNullableArray(ctx context.Context, request []bool) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestBooleanNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_boolean_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestBooleanNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanNullableArrayArray invokes test_request_boolean_nullable_array_array operation.
//
// POST /test_request_boolean_nullable_array_array
func (c *Client) TestRequestBooleanNullableArrayArray(ctx context.Context, request [][]bool) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestBooleanNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_boolean_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestBooleanNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestEmptyStruct invokes test_request_EmptyStruct operation.
//
// POST /test_request_EmptyStruct
func (c *Client) TestRequestEmptyStruct(ctx context.Context, request *TestRequestEmptyStructReq) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_EmptyStruct"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestEmptyStructRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_EmptyStruct"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestEmptyStructResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestFormatTest invokes test_request_FormatTest operation.
//
// POST /test_request_FormatTest
func (c *Client) TestRequestFormatTest(ctx context.Context, request OptTestRequestFormatTestReq) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := request.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_FormatTest"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestFormatTest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestFormatTestRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_FormatTest"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestFormatTestResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestInteger invokes test_request_integer operation.
//
// POST /test_request_integer
func (c *Client) TestRequestInteger(ctx context.Context, request OptInt) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestInteger",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerArray invokes test_request_integer_array operation.
//
// POST /test_request_integer_array
func (c *Client) TestRequestIntegerArray(ctx context.Context, request []int) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerArrayArray invokes test_request_integer_array_array operation.
//
// POST /test_request_integer_array_array
func (c *Client) TestRequestIntegerArrayArray(ctx context.Context, request [][]int) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32 invokes test_request_integer_int32 operation.
//
// POST /test_request_integer_int32
func (c *Client) TestRequestIntegerInt32(ctx context.Context, request OptInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32Array invokes test_request_integer_int32_array operation.
//
// POST /test_request_integer_int32_array
func (c *Client) TestRequestIntegerInt32Array(ctx context.Context, request []int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32ArrayArray invokes test_request_integer_int32_array_array operation.
//
// POST /test_request_integer_int32_array_array
func (c *Client) TestRequestIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32Nullable invokes test_request_integer_int32_nullable operation.
//
// POST /test_request_integer_int32_nullable
func (c *Client) TestRequestIntegerInt32Nullable(ctx context.Context, request OptNilInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32NullableArray invokes test_request_integer_int32_nullable_array operation.
//
// POST /test_request_integer_int32_nullable_array
func (c *Client) TestRequestIntegerInt32NullableArray(ctx context.Context, request []int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32NullableArrayArray invokes test_request_integer_int32_nullable_array_array operation.
//
// POST /test_request_integer_int32_nullable_array_array
func (c *Client) TestRequestIntegerInt32NullableArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64 invokes test_request_integer_int64 operation.
//
// POST /test_request_integer_int64
func (c *Client) TestRequestIntegerInt64(ctx context.Context, request OptInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64Array invokes test_request_integer_int64_array operation.
//
// POST /test_request_integer_int64_array
func (c *Client) TestRequestIntegerInt64Array(ctx context.Context, request []int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64ArrayArray invokes test_request_integer_int64_array_array operation.
//
// POST /test_request_integer_int64_array_array
func (c *Client) TestRequestIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64Nullable invokes test_request_integer_int64_nullable operation.
//
// POST /test_request_integer_int64_nullable
func (c *Client) TestRequestIntegerInt64Nullable(ctx context.Context, request OptNilInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64NullableArray invokes test_request_integer_int64_nullable_array operation.
//
// POST /test_request_integer_int64_nullable_array
func (c *Client) TestRequestIntegerInt64NullableArray(ctx context.Context, request []int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64NullableArrayArray invokes test_request_integer_int64_nullable_array_array operation.
//
// POST /test_request_integer_int64_nullable_array_array
func (c *Client) TestRequestIntegerInt64NullableArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerNullable invokes test_request_integer_nullable operation.
//
// POST /test_request_integer_nullable
func (c *Client) TestRequestIntegerNullable(ctx context.Context, request OptNilInt) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerNullableArray invokes test_request_integer_nullable_array operation.
//
// POST /test_request_integer_nullable_array
func (c *Client) TestRequestIntegerNullableArray(ctx context.Context, request []int) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerNullableArrayArray invokes test_request_integer_nullable_array_array operation.
//
// POST /test_request_integer_nullable_array_array
func (c *Client) TestRequestIntegerNullableArrayArray(ctx context.Context, request [][]int) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestIntegerNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_integer_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestIntegerNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNull invokes test_request_null operation.
//
// POST /test_request_null
func (c *Client) TestRequestNull(ctx context.Context, request OptNull) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNull",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNullRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_null"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNullResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullArray invokes test_request_null_array operation.
//
// POST /test_request_null_array
func (c *Client) TestRequestNullArray(ctx context.Context, request []struct{}) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNullArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_null_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNullArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullArrayArray invokes test_request_null_array_array operation.
//
// POST /test_request_null_array_array
func (c *Client) TestRequestNullArrayArray(ctx context.Context, request [][]struct{}) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNullArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_null_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNullArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullNullable invokes test_request_null_nullable operation.
//
// POST /test_request_null_nullable
func (c *Client) TestRequestNullNullable(ctx context.Context, request OptNull) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNullNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_null_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNullNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullNullableArray invokes test_request_null_nullable_array operation.
//
// POST /test_request_null_nullable_array
func (c *Client) TestRequestNullNullableArray(ctx context.Context, request []struct{}) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNullNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_null_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNullNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullNullableArrayArray invokes test_request_null_nullable_array_array operation.
//
// POST /test_request_null_nullable_array_array
func (c *Client) TestRequestNullNullableArrayArray(ctx context.Context, request [][]struct{}) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNullNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_null_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNullNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumber invokes test_request_number operation.
//
// POST /test_request_number
func (c *Client) TestRequestNumber(ctx context.Context, request OptFloat64) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumber",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberArray invokes test_request_number_array operation.
//
// POST /test_request_number_array
func (c *Client) TestRequestNumberArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberArrayArray invokes test_request_number_array_array operation.
//
// POST /test_request_number_array_array
func (c *Client) TestRequestNumberArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDouble invokes test_request_number_double operation.
//
// POST /test_request_number_double
func (c *Client) TestRequestNumberDouble(ctx context.Context, request OptFloat64) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDouble",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberDoubleRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_double"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberDoubleResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleArray invokes test_request_number_double_array operation.
//
// POST /test_request_number_double_array
func (c *Client) TestRequestNumberDoubleArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberDoubleArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_double_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberDoubleArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleArrayArray invokes test_request_number_double_array_array operation.
//
// POST /test_request_number_double_array_array
func (c *Client) TestRequestNumberDoubleArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberDoubleArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_double_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberDoubleArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleNullable invokes test_request_number_double_nullable operation.
//
// POST /test_request_number_double_nullable
func (c *Client) TestRequestNumberDoubleNullable(ctx context.Context, request OptNilFloat64) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberDoubleNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_double_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberDoubleNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleNullableArray invokes test_request_number_double_nullable_array operation.
//
// POST /test_request_number_double_nullable_array
func (c *Client) TestRequestNumberDoubleNullableArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberDoubleNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_double_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberDoubleNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleNullableArrayArray invokes test_request_number_double_nullable_array_array operation.
//
// POST /test_request_number_double_nullable_array_array
func (c *Client) TestRequestNumberDoubleNullableArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberDoubleNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_double_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberDoubleNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloat invokes test_request_number_float operation.
//
// POST /test_request_number_float
func (c *Client) TestRequestNumberFloat(ctx context.Context, request OptFloat32) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberFloatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_float"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberFloatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatArray invokes test_request_number_float_array operation.
//
// POST /test_request_number_float_array
func (c *Client) TestRequestNumberFloatArray(ctx context.Context, request []float32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberFloatArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_float_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberFloatArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatArrayArray invokes test_request_number_float_array_array operation.
//
// POST /test_request_number_float_array_array
func (c *Client) TestRequestNumberFloatArrayArray(ctx context.Context, request [][]float32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberFloatArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_float_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberFloatArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatNullable invokes test_request_number_float_nullable operation.
//
// POST /test_request_number_float_nullable
func (c *Client) TestRequestNumberFloatNullable(ctx context.Context, request OptNilFloat32) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberFloatNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_float_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberFloatNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatNullableArray invokes test_request_number_float_nullable_array operation.
//
// POST /test_request_number_float_nullable_array
func (c *Client) TestRequestNumberFloatNullableArray(ctx context.Context, request []float32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberFloatNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_float_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberFloatNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatNullableArrayArray invokes test_request_number_float_nullable_array_array operation.
//
// POST /test_request_number_float_nullable_array_array
func (c *Client) TestRequestNumberFloatNullableArrayArray(ctx context.Context, request [][]float32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberFloatNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_float_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberFloatNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32 invokes test_request_number_int32 operation.
//
// POST /test_request_number_int32
func (c *Client) TestRequestNumberInt32(ctx context.Context, request OptInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32Array invokes test_request_number_int32_array operation.
//
// POST /test_request_number_int32_array
func (c *Client) TestRequestNumberInt32Array(ctx context.Context, request []int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32ArrayArray invokes test_request_number_int32_array_array operation.
//
// POST /test_request_number_int32_array_array
func (c *Client) TestRequestNumberInt32ArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32Nullable invokes test_request_number_int32_nullable operation.
//
// POST /test_request_number_int32_nullable
func (c *Client) TestRequestNumberInt32Nullable(ctx context.Context, request OptNilInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32NullableArray invokes test_request_number_int32_nullable_array operation.
//
// POST /test_request_number_int32_nullable_array
func (c *Client) TestRequestNumberInt32NullableArray(ctx context.Context, request []int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32NullableArrayArray invokes test_request_number_int32_nullable_array_array operation.
//
// POST /test_request_number_int32_nullable_array_array
func (c *Client) TestRequestNumberInt32NullableArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64 invokes test_request_number_int64 operation.
//
// POST /test_request_number_int64
func (c *Client) TestRequestNumberInt64(ctx context.Context, request OptInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64Array invokes test_request_number_int64_array operation.
//
// POST /test_request_number_int64_array
func (c *Client) TestRequestNumberInt64Array(ctx context.Context, request []int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64ArrayArray invokes test_request_number_int64_array_array operation.
//
// POST /test_request_number_int64_array_array
func (c *Client) TestRequestNumberInt64ArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64Nullable invokes test_request_number_int64_nullable operation.
//
// POST /test_request_number_int64_nullable
func (c *Client) TestRequestNumberInt64Nullable(ctx context.Context, request OptNilInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64NullableArray invokes test_request_number_int64_nullable_array operation.
//
// POST /test_request_number_int64_nullable_array
func (c *Client) TestRequestNumberInt64NullableArray(ctx context.Context, request []int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64NullableArrayArray invokes test_request_number_int64_nullable_array_array operation.
//
// POST /test_request_number_int64_nullable_array_array
func (c *Client) TestRequestNumberInt64NullableArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberNullable invokes test_request_number_nullable operation.
//
// POST /test_request_number_nullable
func (c *Client) TestRequestNumberNullable(ctx context.Context, request OptNilFloat64) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberNullableArray invokes test_request_number_nullable_array operation.
//
// POST /test_request_number_nullable_array
func (c *Client) TestRequestNumberNullableArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberNullableArrayArray invokes test_request_number_nullable_array_array operation.
//
// POST /test_request_number_nullable_array_array
func (c *Client) TestRequestNumberNullableArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestNumberNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_number_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestNumberNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredAny invokes test_request_required_Any operation.
//
// POST /test_request_required_Any
func (c *Client) TestRequestRequiredAny(ctx context.Context, request jx.Raw) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_Any"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredAny",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredAnyRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_Any"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredAnyResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBoolean invokes test_request_required_boolean operation.
//
// POST /test_request_required_boolean
func (c *Client) TestRequestRequiredBoolean(ctx context.Context, request bool) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBoolean",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredBooleanRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_boolean"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredBooleanResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanArray invokes test_request_required_boolean_array operation.
//
// POST /test_request_required_boolean_array
func (c *Client) TestRequestRequiredBooleanArray(ctx context.Context, request []bool) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredBooleanArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_boolean_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredBooleanArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanArrayArray invokes test_request_required_boolean_array_array operation.
//
// POST /test_request_required_boolean_array_array
func (c *Client) TestRequestRequiredBooleanArrayArray(ctx context.Context, request [][]bool) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredBooleanArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_boolean_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredBooleanArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanNullable invokes test_request_required_boolean_nullable operation.
//
// POST /test_request_required_boolean_nullable
func (c *Client) TestRequestRequiredBooleanNullable(ctx context.Context, request NilBool) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredBooleanNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_boolean_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredBooleanNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanNullableArray invokes test_request_required_boolean_nullable_array operation.
//
// POST /test_request_required_boolean_nullable_array
func (c *Client) TestRequestRequiredBooleanNullableArray(ctx context.Context, request []bool) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredBooleanNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_boolean_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredBooleanNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanNullableArrayArray invokes test_request_required_boolean_nullable_array_array operation.
//
// POST /test_request_required_boolean_nullable_array_array
func (c *Client) TestRequestRequiredBooleanNullableArrayArray(ctx context.Context, request [][]bool) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredBooleanNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_boolean_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredBooleanNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredEmptyStruct invokes test_request_required_EmptyStruct operation.
//
// POST /test_request_required_EmptyStruct
func (c *Client) TestRequestRequiredEmptyStruct(ctx context.Context, request TestRequestRequiredEmptyStructReq) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_EmptyStruct"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredEmptyStructRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_EmptyStruct"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredEmptyStructResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredFormatTest invokes test_request_required_FormatTest operation.
//
// POST /test_request_required_FormatTest
func (c *Client) TestRequestRequiredFormatTest(ctx context.Context, request TestRequestRequiredFormatTestReq) (res Error, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_FormatTest"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredFormatTest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredFormatTestRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_FormatTest"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredFormatTestResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredInteger invokes test_request_required_integer operation.
//
// POST /test_request_required_integer
func (c *Client) TestRequestRequiredInteger(ctx context.Context, request int) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredInteger",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerArray invokes test_request_required_integer_array operation.
//
// POST /test_request_required_integer_array
func (c *Client) TestRequestRequiredIntegerArray(ctx context.Context, request []int) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerArrayArray invokes test_request_required_integer_array_array operation.
//
// POST /test_request_required_integer_array_array
func (c *Client) TestRequestRequiredIntegerArrayArray(ctx context.Context, request [][]int) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32 invokes test_request_required_integer_int32 operation.
//
// POST /test_request_required_integer_int32
func (c *Client) TestRequestRequiredIntegerInt32(ctx context.Context, request int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32Array invokes test_request_required_integer_int32_array operation.
//
// POST /test_request_required_integer_int32_array
func (c *Client) TestRequestRequiredIntegerInt32Array(ctx context.Context, request []int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32ArrayArray invokes test_request_required_integer_int32_array_array operation.
//
// POST /test_request_required_integer_int32_array_array
func (c *Client) TestRequestRequiredIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32Nullable invokes test_request_required_integer_int32_nullable operation.
//
// POST /test_request_required_integer_int32_nullable
func (c *Client) TestRequestRequiredIntegerInt32Nullable(ctx context.Context, request NilInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32NullableArray invokes test_request_required_integer_int32_nullable_array operation.
//
// POST /test_request_required_integer_int32_nullable_array
func (c *Client) TestRequestRequiredIntegerInt32NullableArray(ctx context.Context, request []int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32NullableArrayArray invokes test_request_required_integer_int32_nullable_array_array operation.
//
// POST /test_request_required_integer_int32_nullable_array_array
func (c *Client) TestRequestRequiredIntegerInt32NullableArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64 invokes test_request_required_integer_int64 operation.
//
// POST /test_request_required_integer_int64
func (c *Client) TestRequestRequiredIntegerInt64(ctx context.Context, request int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64Array invokes test_request_required_integer_int64_array operation.
//
// POST /test_request_required_integer_int64_array
func (c *Client) TestRequestRequiredIntegerInt64Array(ctx context.Context, request []int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64ArrayArray invokes test_request_required_integer_int64_array_array operation.
//
// POST /test_request_required_integer_int64_array_array
func (c *Client) TestRequestRequiredIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64Nullable invokes test_request_required_integer_int64_nullable operation.
//
// POST /test_request_required_integer_int64_nullable
func (c *Client) TestRequestRequiredIntegerInt64Nullable(ctx context.Context, request NilInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64NullableArray invokes test_request_required_integer_int64_nullable_array operation.
//
// POST /test_request_required_integer_int64_nullable_array
func (c *Client) TestRequestRequiredIntegerInt64NullableArray(ctx context.Context, request []int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64NullableArrayArray invokes test_request_required_integer_int64_nullable_array_array operation.
//
// POST /test_request_required_integer_int64_nullable_array_array
func (c *Client) TestRequestRequiredIntegerInt64NullableArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerNullable invokes test_request_required_integer_nullable operation.
//
// POST /test_request_required_integer_nullable
func (c *Client) TestRequestRequiredIntegerNullable(ctx context.Context, request NilInt) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerNullableArray invokes test_request_required_integer_nullable_array operation.
//
// POST /test_request_required_integer_nullable_array
func (c *Client) TestRequestRequiredIntegerNullableArray(ctx context.Context, request []int) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerNullableArrayArray invokes test_request_required_integer_nullable_array_array operation.
//
// POST /test_request_required_integer_nullable_array_array
func (c *Client) TestRequestRequiredIntegerNullableArrayArray(ctx context.Context, request [][]int) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredIntegerNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_integer_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredIntegerNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNull invokes test_request_required_null operation.
//
// POST /test_request_required_null
func (c *Client) TestRequestRequiredNull(ctx context.Context, request struct{}) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNull",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNullRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_null"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNullResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullArray invokes test_request_required_null_array operation.
//
// POST /test_request_required_null_array
func (c *Client) TestRequestRequiredNullArray(ctx context.Context, request []struct{}) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNullArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_null_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNullArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullArrayArray invokes test_request_required_null_array_array operation.
//
// POST /test_request_required_null_array_array
func (c *Client) TestRequestRequiredNullArrayArray(ctx context.Context, request [][]struct{}) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNullArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_null_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNullArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullNullable invokes test_request_required_null_nullable operation.
//
// POST /test_request_required_null_nullable
func (c *Client) TestRequestRequiredNullNullable(ctx context.Context, request struct{}) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNullNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_null_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNullNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullNullableArray invokes test_request_required_null_nullable_array operation.
//
// POST /test_request_required_null_nullable_array
func (c *Client) TestRequestRequiredNullNullableArray(ctx context.Context, request []struct{}) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNullNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_null_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNullNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullNullableArrayArray invokes test_request_required_null_nullable_array_array operation.
//
// POST /test_request_required_null_nullable_array_array
func (c *Client) TestRequestRequiredNullNullableArrayArray(ctx context.Context, request [][]struct{}) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNullNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_null_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNullNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumber invokes test_request_required_number operation.
//
// POST /test_request_required_number
func (c *Client) TestRequestRequiredNumber(ctx context.Context, request float64) (res Error, err error) {
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(request)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumber",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberArray invokes test_request_required_number_array operation.
//
// POST /test_request_required_number_array
func (c *Client) TestRequestRequiredNumberArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberArrayArray invokes test_request_required_number_array_array operation.
//
// POST /test_request_required_number_array_array
func (c *Client) TestRequestRequiredNumberArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDouble invokes test_request_required_number_double operation.
//
// POST /test_request_required_number_double
func (c *Client) TestRequestRequiredNumberDouble(ctx context.Context, request float64) (res Error, err error) {
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(request)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDouble",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberDoubleRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_double"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberDoubleResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleArray invokes test_request_required_number_double_array operation.
//
// POST /test_request_required_number_double_array
func (c *Client) TestRequestRequiredNumberDoubleArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberDoubleArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_double_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberDoubleArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleArrayArray invokes test_request_required_number_double_array_array operation.
//
// POST /test_request_required_number_double_array_array
func (c *Client) TestRequestRequiredNumberDoubleArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberDoubleArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_double_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberDoubleArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleNullable invokes test_request_required_number_double_nullable operation.
//
// POST /test_request_required_number_double_nullable
func (c *Client) TestRequestRequiredNumberDoubleNullable(ctx context.Context, request NilFloat64) (res Error, err error) {
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberDoubleNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_double_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberDoubleNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleNullableArray invokes test_request_required_number_double_nullable_array operation.
//
// POST /test_request_required_number_double_nullable_array
func (c *Client) TestRequestRequiredNumberDoubleNullableArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberDoubleNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_double_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberDoubleNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleNullableArrayArray invokes test_request_required_number_double_nullable_array_array operation.
//
// POST /test_request_required_number_double_nullable_array_array
func (c *Client) TestRequestRequiredNumberDoubleNullableArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberDoubleNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_double_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberDoubleNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloat invokes test_request_required_number_float operation.
//
// POST /test_request_required_number_float
func (c *Client) TestRequestRequiredNumberFloat(ctx context.Context, request float32) (res Error, err error) {
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(request)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberFloatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_float"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberFloatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatArray invokes test_request_required_number_float_array operation.
//
// POST /test_request_required_number_float_array
func (c *Client) TestRequestRequiredNumberFloatArray(ctx context.Context, request []float32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberFloatArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_float_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberFloatArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatArrayArray invokes test_request_required_number_float_array_array operation.
//
// POST /test_request_required_number_float_array_array
func (c *Client) TestRequestRequiredNumberFloatArrayArray(ctx context.Context, request [][]float32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberFloatArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_float_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberFloatArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatNullable invokes test_request_required_number_float_nullable operation.
//
// POST /test_request_required_number_float_nullable
func (c *Client) TestRequestRequiredNumberFloatNullable(ctx context.Context, request NilFloat32) (res Error, err error) {
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberFloatNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_float_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberFloatNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatNullableArray invokes test_request_required_number_float_nullable_array operation.
//
// POST /test_request_required_number_float_nullable_array
func (c *Client) TestRequestRequiredNumberFloatNullableArray(ctx context.Context, request []float32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberFloatNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_float_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberFloatNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatNullableArrayArray invokes test_request_required_number_float_nullable_array_array operation.
//
// POST /test_request_required_number_float_nullable_array_array
func (c *Client) TestRequestRequiredNumberFloatNullableArrayArray(ctx context.Context, request [][]float32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberFloatNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_float_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberFloatNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32 invokes test_request_required_number_int32 operation.
//
// POST /test_request_required_number_int32
func (c *Client) TestRequestRequiredNumberInt32(ctx context.Context, request int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32Array invokes test_request_required_number_int32_array operation.
//
// POST /test_request_required_number_int32_array
func (c *Client) TestRequestRequiredNumberInt32Array(ctx context.Context, request []int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32ArrayArray invokes test_request_required_number_int32_array_array operation.
//
// POST /test_request_required_number_int32_array_array
func (c *Client) TestRequestRequiredNumberInt32ArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32Nullable invokes test_request_required_number_int32_nullable operation.
//
// POST /test_request_required_number_int32_nullable
func (c *Client) TestRequestRequiredNumberInt32Nullable(ctx context.Context, request NilInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32NullableArray invokes test_request_required_number_int32_nullable_array operation.
//
// POST /test_request_required_number_int32_nullable_array
func (c *Client) TestRequestRequiredNumberInt32NullableArray(ctx context.Context, request []int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32NullableArrayArray invokes test_request_required_number_int32_nullable_array_array operation.
//
// POST /test_request_required_number_int32_nullable_array_array
func (c *Client) TestRequestRequiredNumberInt32NullableArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64 invokes test_request_required_number_int64 operation.
//
// POST /test_request_required_number_int64
func (c *Client) TestRequestRequiredNumberInt64(ctx context.Context, request int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64Array invokes test_request_required_number_int64_array operation.
//
// POST /test_request_required_number_int64_array
func (c *Client) TestRequestRequiredNumberInt64Array(ctx context.Context, request []int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64ArrayArray invokes test_request_required_number_int64_array_array operation.
//
// POST /test_request_required_number_int64_array_array
func (c *Client) TestRequestRequiredNumberInt64ArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64Nullable invokes test_request_required_number_int64_nullable operation.
//
// POST /test_request_required_number_int64_nullable
func (c *Client) TestRequestRequiredNumberInt64Nullable(ctx context.Context, request NilInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64NullableArray invokes test_request_required_number_int64_nullable_array operation.
//
// POST /test_request_required_number_int64_nullable_array
func (c *Client) TestRequestRequiredNumberInt64NullableArray(ctx context.Context, request []int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64NullableArrayArray invokes test_request_required_number_int64_nullable_array_array operation.
//
// POST /test_request_required_number_int64_nullable_array_array
func (c *Client) TestRequestRequiredNumberInt64NullableArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberNullable invokes test_request_required_number_nullable operation.
//
// POST /test_request_required_number_nullable
func (c *Client) TestRequestRequiredNumberNullable(ctx context.Context, request NilFloat64) (res Error, err error) {
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(request.Value)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberNullableArray invokes test_request_required_number_nullable_array operation.
//
// POST /test_request_required_number_nullable_array
func (c *Client) TestRequestRequiredNumberNullableArray(ctx context.Context, request []float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberNullableArrayArray invokes test_request_required_number_nullable_array_array operation.
//
// POST /test_request_required_number_nullable_array_array
func (c *Client) TestRequestRequiredNumberNullableArrayArray(ctx context.Context, request [][]float64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredNumberNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_number_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredNumberNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredString invokes test_request_required_string operation.
//
// POST /test_request_required_string
func (c *Client) TestRequestRequiredString(ctx context.Context, request string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredString",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringArray invokes test_request_required_string_array operation.
//
// POST /test_request_required_string_array
func (c *Client) TestRequestRequiredStringArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringArrayArray invokes test_request_required_string_array_array operation.
//
// POST /test_request_required_string_array_array
func (c *Client) TestRequestRequiredStringArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinary invokes test_request_required_string_binary operation.
//
// POST /test_request_required_string_binary
func (c *Client) TestRequestRequiredStringBinary(ctx context.Context, request string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinary",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringBinaryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_binary"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringBinaryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryArray invokes test_request_required_string_binary_array operation.
//
// POST /test_request_required_string_binary_array
func (c *Client) TestRequestRequiredStringBinaryArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringBinaryArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_binary_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringBinaryArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryArrayArray invokes test_request_required_string_binary_array_array operation.
//
// POST /test_request_required_string_binary_array_array
func (c *Client) TestRequestRequiredStringBinaryArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringBinaryArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_binary_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringBinaryArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryNullable invokes test_request_required_string_binary_nullable operation.
//
// POST /test_request_required_string_binary_nullable
func (c *Client) TestRequestRequiredStringBinaryNullable(ctx context.Context, request NilString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringBinaryNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_binary_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringBinaryNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryNullableArray invokes test_request_required_string_binary_nullable_array operation.
//
// POST /test_request_required_string_binary_nullable_array
func (c *Client) TestRequestRequiredStringBinaryNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringBinaryNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_binary_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringBinaryNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryNullableArrayArray invokes test_request_required_string_binary_nullable_array_array operation.
//
// POST /test_request_required_string_binary_nullable_array_array
func (c *Client) TestRequestRequiredStringBinaryNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringBinaryNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_binary_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringBinaryNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByte invokes test_request_required_string_byte operation.
//
// POST /test_request_required_string_byte
func (c *Client) TestRequestRequiredStringByte(ctx context.Context, request []byte) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByte",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringByteRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_byte"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringByteResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteArray invokes test_request_required_string_byte_array operation.
//
// POST /test_request_required_string_byte_array
func (c *Client) TestRequestRequiredStringByteArray(ctx context.Context, request [][]byte) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringByteArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_byte_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringByteArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteArrayArray invokes test_request_required_string_byte_array_array operation.
//
// POST /test_request_required_string_byte_array_array
func (c *Client) TestRequestRequiredStringByteArrayArray(ctx context.Context, request [][][]byte) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringByteArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_byte_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringByteArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteNullable invokes test_request_required_string_byte_nullable operation.
//
// POST /test_request_required_string_byte_nullable
func (c *Client) TestRequestRequiredStringByteNullable(ctx context.Context, request []byte) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringByteNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_byte_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringByteNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteNullableArray invokes test_request_required_string_byte_nullable_array operation.
//
// POST /test_request_required_string_byte_nullable_array
func (c *Client) TestRequestRequiredStringByteNullableArray(ctx context.Context, request [][]byte) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringByteNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_byte_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringByteNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteNullableArrayArray invokes test_request_required_string_byte_nullable_array_array operation.
//
// POST /test_request_required_string_byte_nullable_array_array
func (c *Client) TestRequestRequiredStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringByteNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_byte_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringByteNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDate invokes test_request_required_string_date operation.
//
// POST /test_request_required_string_date
func (c *Client) TestRequestRequiredStringDate(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDate",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateArray invokes test_request_required_string_date_array operation.
//
// POST /test_request_required_string_date_array
func (c *Client) TestRequestRequiredStringDateArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateArrayArray invokes test_request_required_string_date_array_array operation.
//
// POST /test_request_required_string_date_array_array
func (c *Client) TestRequestRequiredStringDateArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateNullable invokes test_request_required_string_date_nullable operation.
//
// POST /test_request_required_string_date_nullable
func (c *Client) TestRequestRequiredStringDateNullable(ctx context.Context, request NilDate) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateNullableArray invokes test_request_required_string_date_nullable_array operation.
//
// POST /test_request_required_string_date_nullable_array
func (c *Client) TestRequestRequiredStringDateNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateNullableArrayArray invokes test_request_required_string_date_nullable_array_array operation.
//
// POST /test_request_required_string_date_nullable_array_array
func (c *Client) TestRequestRequiredStringDateNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTime invokes test_request_required_string_date-time operation.
//
// POST /test_request_required_string_date-time
func (c *Client) TestRequestRequiredStringDateTime(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateTimeRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date-time"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateTimeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeArray invokes test_request_required_string_date-time_array operation.
//
// POST /test_request_required_string_date-time_array
func (c *Client) TestRequestRequiredStringDateTimeArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateTimeArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date-time_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateTimeArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeArrayArray invokes test_request_required_string_date-time_array_array operation.
//
// POST /test_request_required_string_date-time_array_array
func (c *Client) TestRequestRequiredStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateTimeArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date-time_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateTimeArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeNullable invokes test_request_required_string_date-time_nullable operation.
//
// POST /test_request_required_string_date-time_nullable
func (c *Client) TestRequestRequiredStringDateTimeNullable(ctx context.Context, request NilDateTime) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateTimeNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date-time_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateTimeNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeNullableArray invokes test_request_required_string_date-time_nullable_array operation.
//
// POST /test_request_required_string_date-time_nullable_array
func (c *Client) TestRequestRequiredStringDateTimeNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateTimeNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date-time_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateTimeNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeNullableArrayArray invokes test_request_required_string_date-time_nullable_array_array operation.
//
// POST /test_request_required_string_date-time_nullable_array_array
func (c *Client) TestRequestRequiredStringDateTimeNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDateTimeNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_date-time_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDateTimeNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDuration invokes test_request_required_string_duration operation.
//
// POST /test_request_required_string_duration
func (c *Client) TestRequestRequiredStringDuration(ctx context.Context, request time.Duration) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDuration",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDurationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_duration"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDurationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationArray invokes test_request_required_string_duration_array operation.
//
// POST /test_request_required_string_duration_array
func (c *Client) TestRequestRequiredStringDurationArray(ctx context.Context, request []time.Duration) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDurationArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_duration_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDurationArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationArrayArray invokes test_request_required_string_duration_array_array operation.
//
// POST /test_request_required_string_duration_array_array
func (c *Client) TestRequestRequiredStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDurationArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_duration_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDurationArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationNullable invokes test_request_required_string_duration_nullable operation.
//
// POST /test_request_required_string_duration_nullable
func (c *Client) TestRequestRequiredStringDurationNullable(ctx context.Context, request NilDuration) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDurationNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_duration_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDurationNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationNullableArray invokes test_request_required_string_duration_nullable_array operation.
//
// POST /test_request_required_string_duration_nullable_array
func (c *Client) TestRequestRequiredStringDurationNullableArray(ctx context.Context, request []time.Duration) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDurationNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_duration_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDurationNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationNullableArrayArray invokes test_request_required_string_duration_nullable_array_array operation.
//
// POST /test_request_required_string_duration_nullable_array_array
func (c *Client) TestRequestRequiredStringDurationNullableArrayArray(ctx context.Context, request [][]time.Duration) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringDurationNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_duration_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringDurationNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmail invokes test_request_required_string_email operation.
//
// POST /test_request_required_string_email
func (c *Client) TestRequestRequiredStringEmail(ctx context.Context, request string) (res Error, err error) {
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(request)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmail",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringEmailRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_email"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringEmailResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailArray invokes test_request_required_string_email_array operation.
//
// POST /test_request_required_string_email_array
func (c *Client) TestRequestRequiredStringEmailArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringEmailArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_email_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringEmailArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailArrayArray invokes test_request_required_string_email_array_array operation.
//
// POST /test_request_required_string_email_array_array
func (c *Client) TestRequestRequiredStringEmailArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringEmailArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_email_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringEmailArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailNullable invokes test_request_required_string_email_nullable operation.
//
// POST /test_request_required_string_email_nullable
func (c *Client) TestRequestRequiredStringEmailNullable(ctx context.Context, request NilString) (res Error, err error) {
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(request.Value)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringEmailNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_email_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringEmailNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailNullableArray invokes test_request_required_string_email_nullable_array operation.
//
// POST /test_request_required_string_email_nullable_array
func (c *Client) TestRequestRequiredStringEmailNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringEmailNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_email_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringEmailNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailNullableArrayArray invokes test_request_required_string_email_nullable_array_array operation.
//
// POST /test_request_required_string_email_nullable_array_array
func (c *Client) TestRequestRequiredStringEmailNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringEmailNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_email_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringEmailNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostname invokes test_request_required_string_hostname operation.
//
// POST /test_request_required_string_hostname
func (c *Client) TestRequestRequiredStringHostname(ctx context.Context, request string) (res Error, err error) {
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     true,
			Regex:        nil,
		}).Validate(string(request)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostname",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringHostnameRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_hostname"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringHostnameResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameArray invokes test_request_required_string_hostname_array operation.
//
// POST /test_request_required_string_hostname_array
func (c *Client) TestRequestRequiredStringHostnameArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringHostnameArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_hostname_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringHostnameArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameArrayArray invokes test_request_required_string_hostname_array_array operation.
//
// POST /test_request_required_string_hostname_array_array
func (c *Client) TestRequestRequiredStringHostnameArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringHostnameArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_hostname_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringHostnameArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameNullable invokes test_request_required_string_hostname_nullable operation.
//
// POST /test_request_required_string_hostname_nullable
func (c *Client) TestRequestRequiredStringHostnameNullable(ctx context.Context, request NilString) (res Error, err error) {
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     true,
			Regex:        nil,
		}).Validate(string(request.Value)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringHostnameNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_hostname_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringHostnameNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameNullableArray invokes test_request_required_string_hostname_nullable_array operation.
//
// POST /test_request_required_string_hostname_nullable_array
func (c *Client) TestRequestRequiredStringHostnameNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringHostnameNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_hostname_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringHostnameNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameNullableArrayArray invokes test_request_required_string_hostname_nullable_array_array operation.
//
// POST /test_request_required_string_hostname_nullable_array_array
func (c *Client) TestRequestRequiredStringHostnameNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringHostnameNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_hostname_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringHostnameNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIP invokes test_request_required_string_ip operation.
//
// POST /test_request_required_string_ip
func (c *Client) TestRequestRequiredStringIP(ctx context.Context, request netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIP",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIPRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ip"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIPResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPArray invokes test_request_required_string_ip_array operation.
//
// POST /test_request_required_string_ip_array
func (c *Client) TestRequestRequiredStringIPArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIPArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ip_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIPArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPArrayArray invokes test_request_required_string_ip_array_array operation.
//
// POST /test_request_required_string_ip_array_array
func (c *Client) TestRequestRequiredStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIPArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ip_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIPArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPNullable invokes test_request_required_string_ip_nullable operation.
//
// POST /test_request_required_string_ip_nullable
func (c *Client) TestRequestRequiredStringIPNullable(ctx context.Context, request NilIP) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIPNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ip_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIPNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPNullableArray invokes test_request_required_string_ip_nullable_array operation.
//
// POST /test_request_required_string_ip_nullable_array
func (c *Client) TestRequestRequiredStringIPNullableArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIPNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ip_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIPNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPNullableArrayArray invokes test_request_required_string_ip_nullable_array_array operation.
//
// POST /test_request_required_string_ip_nullable_array_array
func (c *Client) TestRequestRequiredStringIPNullableArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIPNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ip_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIPNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32 invokes test_request_required_string_int32 operation.
//
// POST /test_request_required_string_int32
func (c *Client) TestRequestRequiredStringInt32(ctx context.Context, request int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32Array invokes test_request_required_string_int32_array operation.
//
// POST /test_request_required_string_int32_array
func (c *Client) TestRequestRequiredStringInt32Array(ctx context.Context, request []int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32ArrayArray invokes test_request_required_string_int32_array_array operation.
//
// POST /test_request_required_string_int32_array_array
func (c *Client) TestRequestRequiredStringInt32ArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32Nullable invokes test_request_required_string_int32_nullable operation.
//
// POST /test_request_required_string_int32_nullable
func (c *Client) TestRequestRequiredStringInt32Nullable(ctx context.Context, request NilStringInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32NullableArray invokes test_request_required_string_int32_nullable_array operation.
//
// POST /test_request_required_string_int32_nullable_array
func (c *Client) TestRequestRequiredStringInt32NullableArray(ctx context.Context, request []int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32NullableArrayArray invokes test_request_required_string_int32_nullable_array_array operation.
//
// POST /test_request_required_string_int32_nullable_array_array
func (c *Client) TestRequestRequiredStringInt32NullableArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64 invokes test_request_required_string_int64 operation.
//
// POST /test_request_required_string_int64
func (c *Client) TestRequestRequiredStringInt64(ctx context.Context, request int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64Array invokes test_request_required_string_int64_array operation.
//
// POST /test_request_required_string_int64_array
func (c *Client) TestRequestRequiredStringInt64Array(ctx context.Context, request []int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64ArrayArray invokes test_request_required_string_int64_array_array operation.
//
// POST /test_request_required_string_int64_array_array
func (c *Client) TestRequestRequiredStringInt64ArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64Nullable invokes test_request_required_string_int64_nullable operation.
//
// POST /test_request_required_string_int64_nullable
func (c *Client) TestRequestRequiredStringInt64Nullable(ctx context.Context, request NilStringInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64NullableArray invokes test_request_required_string_int64_nullable_array operation.
//
// POST /test_request_required_string_int64_nullable_array
func (c *Client) TestRequestRequiredStringInt64NullableArray(ctx context.Context, request []int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64NullableArrayArray invokes test_request_required_string_int64_nullable_array_array operation.
//
// POST /test_request_required_string_int64_nullable_array_array
func (c *Client) TestRequestRequiredStringInt64NullableArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4 invokes test_request_required_string_ipv4 operation.
//
// POST /test_request_required_string_ipv4
func (c *Client) TestRequestRequiredStringIpv4(ctx context.Context, request netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv4RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv4"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv4Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4Array invokes test_request_required_string_ipv4_array operation.
//
// POST /test_request_required_string_ipv4_array
func (c *Client) TestRequestRequiredStringIpv4Array(ctx context.Context, request []netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv4ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv4_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv4ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4ArrayArray invokes test_request_required_string_ipv4_array_array operation.
//
// POST /test_request_required_string_ipv4_array_array
func (c *Client) TestRequestRequiredStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv4ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv4_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv4ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4Nullable invokes test_request_required_string_ipv4_nullable operation.
//
// POST /test_request_required_string_ipv4_nullable
func (c *Client) TestRequestRequiredStringIpv4Nullable(ctx context.Context, request NilIPv4) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv4NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv4_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv4NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4NullableArray invokes test_request_required_string_ipv4_nullable_array operation.
//
// POST /test_request_required_string_ipv4_nullable_array
func (c *Client) TestRequestRequiredStringIpv4NullableArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv4NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv4_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv4NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4NullableArrayArray invokes test_request_required_string_ipv4_nullable_array_array operation.
//
// POST /test_request_required_string_ipv4_nullable_array_array
func (c *Client) TestRequestRequiredStringIpv4NullableArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv4NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv4_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv4NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6 invokes test_request_required_string_ipv6 operation.
//
// POST /test_request_required_string_ipv6
func (c *Client) TestRequestRequiredStringIpv6(ctx context.Context, request netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv6RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv6"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv6Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6Array invokes test_request_required_string_ipv6_array operation.
//
// POST /test_request_required_string_ipv6_array
func (c *Client) TestRequestRequiredStringIpv6Array(ctx context.Context, request []netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv6ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv6_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv6ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6ArrayArray invokes test_request_required_string_ipv6_array_array operation.
//
// POST /test_request_required_string_ipv6_array_array
func (c *Client) TestRequestRequiredStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv6ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv6_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv6ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6Nullable invokes test_request_required_string_ipv6_nullable operation.
//
// POST /test_request_required_string_ipv6_nullable
func (c *Client) TestRequestRequiredStringIpv6Nullable(ctx context.Context, request NilIPv6) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv6NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv6_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv6NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6NullableArray invokes test_request_required_string_ipv6_nullable_array operation.
//
// POST /test_request_required_string_ipv6_nullable_array
func (c *Client) TestRequestRequiredStringIpv6NullableArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv6NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv6_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv6NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6NullableArrayArray invokes test_request_required_string_ipv6_nullable_array_array operation.
//
// POST /test_request_required_string_ipv6_nullable_array_array
func (c *Client) TestRequestRequiredStringIpv6NullableArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringIpv6NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_ipv6_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringIpv6NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringNullable invokes test_request_required_string_nullable operation.
//
// POST /test_request_required_string_nullable
func (c *Client) TestRequestRequiredStringNullable(ctx context.Context, request NilString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringNullableArray invokes test_request_required_string_nullable_array operation.
//
// POST /test_request_required_string_nullable_array
func (c *Client) TestRequestRequiredStringNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringNullableArrayArray invokes test_request_required_string_nullable_array_array operation.
//
// POST /test_request_required_string_nullable_array_array
func (c *Client) TestRequestRequiredStringNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPassword invokes test_request_required_string_password operation.
//
// POST /test_request_required_string_password
func (c *Client) TestRequestRequiredStringPassword(ctx context.Context, request string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPassword",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringPasswordRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_password"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringPasswordResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordArray invokes test_request_required_string_password_array operation.
//
// POST /test_request_required_string_password_array
func (c *Client) TestRequestRequiredStringPasswordArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringPasswordArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_password_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringPasswordArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordArrayArray invokes test_request_required_string_password_array_array operation.
//
// POST /test_request_required_string_password_array_array
func (c *Client) TestRequestRequiredStringPasswordArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringPasswordArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_password_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringPasswordArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordNullable invokes test_request_required_string_password_nullable operation.
//
// POST /test_request_required_string_password_nullable
func (c *Client) TestRequestRequiredStringPasswordNullable(ctx context.Context, request NilString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringPasswordNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_password_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringPasswordNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordNullableArray invokes test_request_required_string_password_nullable_array operation.
//
// POST /test_request_required_string_password_nullable_array
func (c *Client) TestRequestRequiredStringPasswordNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringPasswordNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_password_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringPasswordNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordNullableArrayArray invokes test_request_required_string_password_nullable_array_array operation.
//
// POST /test_request_required_string_password_nullable_array_array
func (c *Client) TestRequestRequiredStringPasswordNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringPasswordNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_password_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringPasswordNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTime invokes test_request_required_string_time operation.
//
// POST /test_request_required_string_time
func (c *Client) TestRequestRequiredStringTime(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringTimeRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_time"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringTimeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeArray invokes test_request_required_string_time_array operation.
//
// POST /test_request_required_string_time_array
func (c *Client) TestRequestRequiredStringTimeArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringTimeArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_time_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringTimeArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeArrayArray invokes test_request_required_string_time_array_array operation.
//
// POST /test_request_required_string_time_array_array
func (c *Client) TestRequestRequiredStringTimeArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringTimeArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_time_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringTimeArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeNullable invokes test_request_required_string_time_nullable operation.
//
// POST /test_request_required_string_time_nullable
func (c *Client) TestRequestRequiredStringTimeNullable(ctx context.Context, request NilTime) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringTimeNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_time_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringTimeNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeNullableArray invokes test_request_required_string_time_nullable_array operation.
//
// POST /test_request_required_string_time_nullable_array
func (c *Client) TestRequestRequiredStringTimeNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringTimeNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_time_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringTimeNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeNullableArrayArray invokes test_request_required_string_time_nullable_array_array operation.
//
// POST /test_request_required_string_time_nullable_array_array
func (c *Client) TestRequestRequiredStringTimeNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringTimeNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_time_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringTimeNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURI invokes test_request_required_string_uri operation.
//
// POST /test_request_required_string_uri
func (c *Client) TestRequestRequiredStringURI(ctx context.Context, request url.URL) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURI",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringURIRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uri"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringURIResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURIArray invokes test_request_required_string_uri_array operation.
//
// POST /test_request_required_string_uri_array
func (c *Client) TestRequestRequiredStringURIArray(ctx context.Context, request []url.URL) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURIArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringURIArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uri_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringURIArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURIArrayArray invokes test_request_required_string_uri_array_array operation.
//
// POST /test_request_required_string_uri_array_array
func (c *Client) TestRequestRequiredStringURIArrayArray(ctx context.Context, request [][]url.URL) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringURIArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uri_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringURIArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURINullable invokes test_request_required_string_uri_nullable operation.
//
// POST /test_request_required_string_uri_nullable
func (c *Client) TestRequestRequiredStringURINullable(ctx context.Context, request NilURI) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURINullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringURINullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uri_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringURINullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURINullableArray invokes test_request_required_string_uri_nullable_array operation.
//
// POST /test_request_required_string_uri_nullable_array
func (c *Client) TestRequestRequiredStringURINullableArray(ctx context.Context, request []url.URL) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringURINullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uri_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringURINullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURINullableArrayArray invokes test_request_required_string_uri_nullable_array_array operation.
//
// POST /test_request_required_string_uri_nullable_array_array
func (c *Client) TestRequestRequiredStringURINullableArrayArray(ctx context.Context, request [][]url.URL) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringURINullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uri_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringURINullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUID invokes test_request_required_string_uuid operation.
//
// POST /test_request_required_string_uuid
func (c *Client) TestRequestRequiredStringUUID(ctx context.Context, request uuid.UUID) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUID",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUUIDRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uuid"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUUIDResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDArray invokes test_request_required_string_uuid_array operation.
//
// POST /test_request_required_string_uuid_array
func (c *Client) TestRequestRequiredStringUUIDArray(ctx context.Context, request []uuid.UUID) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUUIDArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uuid_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUUIDArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDArrayArray invokes test_request_required_string_uuid_array_array operation.
//
// POST /test_request_required_string_uuid_array_array
func (c *Client) TestRequestRequiredStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUUIDArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uuid_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUUIDArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDNullable invokes test_request_required_string_uuid_nullable operation.
//
// POST /test_request_required_string_uuid_nullable
func (c *Client) TestRequestRequiredStringUUIDNullable(ctx context.Context, request NilUUID) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUUIDNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uuid_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUUIDNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDNullableArray invokes test_request_required_string_uuid_nullable_array operation.
//
// POST /test_request_required_string_uuid_nullable_array
func (c *Client) TestRequestRequiredStringUUIDNullableArray(ctx context.Context, request []uuid.UUID) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUUIDNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uuid_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUUIDNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDNullableArrayArray invokes test_request_required_string_uuid_nullable_array_array operation.
//
// POST /test_request_required_string_uuid_nullable_array_array
func (c *Client) TestRequestRequiredStringUUIDNullableArrayArray(ctx context.Context, request [][]uuid.UUID) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUUIDNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_uuid_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUUIDNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnix invokes test_request_required_string_unix operation.
//
// POST /test_request_required_string_unix
func (c *Client) TestRequestRequiredStringUnix(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnix",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixArray invokes test_request_required_string_unix_array operation.
//
// POST /test_request_required_string_unix_array
func (c *Client) TestRequestRequiredStringUnixArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixArrayArray invokes test_request_required_string_unix_array_array operation.
//
// POST /test_request_required_string_unix_array_array
func (c *Client) TestRequestRequiredStringUnixArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicro invokes test_request_required_string_unix-micro operation.
//
// POST /test_request_required_string_unix-micro
func (c *Client) TestRequestRequiredStringUnixMicro(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMicroRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-micro"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMicroResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroArray invokes test_request_required_string_unix-micro_array operation.
//
// POST /test_request_required_string_unix-micro_array
func (c *Client) TestRequestRequiredStringUnixMicroArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMicroArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-micro_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMicroArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroArrayArray invokes test_request_required_string_unix-micro_array_array operation.
//
// POST /test_request_required_string_unix-micro_array_array
func (c *Client) TestRequestRequiredStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMicroArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-micro_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMicroArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroNullable invokes test_request_required_string_unix-micro_nullable operation.
//
// POST /test_request_required_string_unix-micro_nullable
func (c *Client) TestRequestRequiredStringUnixMicroNullable(ctx context.Context, request NilUnixMicro) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMicroNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-micro_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMicroNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroNullableArray invokes test_request_required_string_unix-micro_nullable_array operation.
//
// POST /test_request_required_string_unix-micro_nullable_array
func (c *Client) TestRequestRequiredStringUnixMicroNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMicroNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-micro_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMicroNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroNullableArrayArray invokes test_request_required_string_unix-micro_nullable_array_array operation.
//
// POST /test_request_required_string_unix-micro_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixMicroNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMicroNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-micro_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMicroNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilli invokes test_request_required_string_unix-milli operation.
//
// POST /test_request_required_string_unix-milli
func (c *Client) TestRequestRequiredStringUnixMilli(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMilliRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-milli"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMilliResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliArray invokes test_request_required_string_unix-milli_array operation.
//
// POST /test_request_required_string_unix-milli_array
func (c *Client) TestRequestRequiredStringUnixMilliArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMilliArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-milli_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMilliArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliArrayArray invokes test_request_required_string_unix-milli_array_array operation.
//
// POST /test_request_required_string_unix-milli_array_array
func (c *Client) TestRequestRequiredStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMilliArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-milli_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMilliArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliNullable invokes test_request_required_string_unix-milli_nullable operation.
//
// POST /test_request_required_string_unix-milli_nullable
func (c *Client) TestRequestRequiredStringUnixMilliNullable(ctx context.Context, request NilUnixMilli) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMilliNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-milli_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMilliNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliNullableArray invokes test_request_required_string_unix-milli_nullable_array operation.
//
// POST /test_request_required_string_unix-milli_nullable_array
func (c *Client) TestRequestRequiredStringUnixMilliNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMilliNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-milli_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMilliNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliNullableArrayArray invokes test_request_required_string_unix-milli_nullable_array_array operation.
//
// POST /test_request_required_string_unix-milli_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixMilliNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixMilliNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-milli_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixMilliNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNano invokes test_request_required_string_unix-nano operation.
//
// POST /test_request_required_string_unix-nano
func (c *Client) TestRequestRequiredStringUnixNano(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNanoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-nano"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNanoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoArray invokes test_request_required_string_unix-nano_array operation.
//
// POST /test_request_required_string_unix-nano_array
func (c *Client) TestRequestRequiredStringUnixNanoArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNanoArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-nano_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNanoArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoArrayArray invokes test_request_required_string_unix-nano_array_array operation.
//
// POST /test_request_required_string_unix-nano_array_array
func (c *Client) TestRequestRequiredStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNanoArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-nano_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNanoArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoNullable invokes test_request_required_string_unix-nano_nullable operation.
//
// POST /test_request_required_string_unix-nano_nullable
func (c *Client) TestRequestRequiredStringUnixNanoNullable(ctx context.Context, request NilUnixNano) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNanoNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-nano_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNanoNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoNullableArray invokes test_request_required_string_unix-nano_nullable_array operation.
//
// POST /test_request_required_string_unix-nano_nullable_array
func (c *Client) TestRequestRequiredStringUnixNanoNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNanoNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-nano_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNanoNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoNullableArrayArray invokes test_request_required_string_unix-nano_nullable_array_array operation.
//
// POST /test_request_required_string_unix-nano_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixNanoNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNanoNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-nano_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNanoNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNullable invokes test_request_required_string_unix_nullable operation.
//
// POST /test_request_required_string_unix_nullable
func (c *Client) TestRequestRequiredStringUnixNullable(ctx context.Context, request NilUnixSeconds) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNullableArray invokes test_request_required_string_unix_nullable_array operation.
//
// POST /test_request_required_string_unix_nullable_array
func (c *Client) TestRequestRequiredStringUnixNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNullableArrayArray invokes test_request_required_string_unix_nullable_array_array operation.
//
// POST /test_request_required_string_unix_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSeconds invokes test_request_required_string_unix-seconds operation.
//
// POST /test_request_required_string_unix-seconds
func (c *Client) TestRequestRequiredStringUnixSeconds(ctx context.Context, request time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixSecondsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-seconds"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixSecondsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsArray invokes test_request_required_string_unix-seconds_array operation.
//
// POST /test_request_required_string_unix-seconds_array
func (c *Client) TestRequestRequiredStringUnixSecondsArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixSecondsArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-seconds_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixSecondsArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsArrayArray invokes test_request_required_string_unix-seconds_array_array operation.
//
// POST /test_request_required_string_unix-seconds_array_array
func (c *Client) TestRequestRequiredStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixSecondsArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-seconds_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixSecondsArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsNullable invokes test_request_required_string_unix-seconds_nullable operation.
//
// POST /test_request_required_string_unix-seconds_nullable
func (c *Client) TestRequestRequiredStringUnixSecondsNullable(ctx context.Context, request NilUnixSeconds) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixSecondsNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-seconds_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixSecondsNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsNullableArray invokes test_request_required_string_unix-seconds_nullable_array operation.
//
// POST /test_request_required_string_unix-seconds_nullable_array
func (c *Client) TestRequestRequiredStringUnixSecondsNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixSecondsNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-seconds_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixSecondsNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsNullableArrayArray invokes test_request_required_string_unix-seconds_nullable_array_array operation.
//
// POST /test_request_required_string_unix-seconds_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		if request == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestRequiredStringUnixSecondsNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_required_string_unix-seconds_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestRequiredStringUnixSecondsNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestString invokes test_request_string operation.
//
// POST /test_request_string
func (c *Client) TestRequestString(ctx context.Context, request OptString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestString",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringArray invokes test_request_string_array operation.
//
// POST /test_request_string_array
func (c *Client) TestRequestStringArray(ctx context.Context, request []string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringArrayArray invokes test_request_string_array_array operation.
//
// POST /test_request_string_array_array
func (c *Client) TestRequestStringArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinary invokes test_request_string_binary operation.
//
// POST /test_request_string_binary
func (c *Client) TestRequestStringBinary(ctx context.Context, request OptString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinary",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringBinaryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_binary"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringBinaryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryArray invokes test_request_string_binary_array operation.
//
// POST /test_request_string_binary_array
func (c *Client) TestRequestStringBinaryArray(ctx context.Context, request []string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringBinaryArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_binary_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringBinaryArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryArrayArray invokes test_request_string_binary_array_array operation.
//
// POST /test_request_string_binary_array_array
func (c *Client) TestRequestStringBinaryArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringBinaryArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_binary_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringBinaryArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryNullable invokes test_request_string_binary_nullable operation.
//
// POST /test_request_string_binary_nullable
func (c *Client) TestRequestStringBinaryNullable(ctx context.Context, request OptNilString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringBinaryNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_binary_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringBinaryNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryNullableArray invokes test_request_string_binary_nullable_array operation.
//
// POST /test_request_string_binary_nullable_array
func (c *Client) TestRequestStringBinaryNullableArray(ctx context.Context, request []string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringBinaryNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_binary_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringBinaryNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryNullableArrayArray invokes test_request_string_binary_nullable_array_array operation.
//
// POST /test_request_string_binary_nullable_array_array
func (c *Client) TestRequestStringBinaryNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringBinaryNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_binary_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringBinaryNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByte invokes test_request_string_byte operation.
//
// POST /test_request_string_byte
func (c *Client) TestRequestStringByte(ctx context.Context, request []byte) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByte",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringByteRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_byte"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringByteResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteArray invokes test_request_string_byte_array operation.
//
// POST /test_request_string_byte_array
func (c *Client) TestRequestStringByteArray(ctx context.Context, request [][]byte) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringByteArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_byte_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringByteArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteArrayArray invokes test_request_string_byte_array_array operation.
//
// POST /test_request_string_byte_array_array
func (c *Client) TestRequestStringByteArrayArray(ctx context.Context, request [][][]byte) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringByteArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_byte_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringByteArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteNullable invokes test_request_string_byte_nullable operation.
//
// POST /test_request_string_byte_nullable
func (c *Client) TestRequestStringByteNullable(ctx context.Context, request OptNilByte) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringByteNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_byte_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringByteNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteNullableArray invokes test_request_string_byte_nullable_array operation.
//
// POST /test_request_string_byte_nullable_array
func (c *Client) TestRequestStringByteNullableArray(ctx context.Context, request [][]byte) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringByteNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_byte_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringByteNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteNullableArrayArray invokes test_request_string_byte_nullable_array_array operation.
//
// POST /test_request_string_byte_nullable_array_array
func (c *Client) TestRequestStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringByteNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_byte_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringByteNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDate invokes test_request_string_date operation.
//
// POST /test_request_string_date
func (c *Client) TestRequestStringDate(ctx context.Context, request OptDate) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDate",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateArray invokes test_request_string_date_array operation.
//
// POST /test_request_string_date_array
func (c *Client) TestRequestStringDateArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateArrayArray invokes test_request_string_date_array_array operation.
//
// POST /test_request_string_date_array_array
func (c *Client) TestRequestStringDateArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateNullable invokes test_request_string_date_nullable operation.
//
// POST /test_request_string_date_nullable
func (c *Client) TestRequestStringDateNullable(ctx context.Context, request OptNilDate) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateNullableArray invokes test_request_string_date_nullable_array operation.
//
// POST /test_request_string_date_nullable_array
func (c *Client) TestRequestStringDateNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateNullableArrayArray invokes test_request_string_date_nullable_array_array operation.
//
// POST /test_request_string_date_nullable_array_array
func (c *Client) TestRequestStringDateNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTime invokes test_request_string_date-time operation.
//
// POST /test_request_string_date-time
func (c *Client) TestRequestStringDateTime(ctx context.Context, request OptDateTime) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateTimeRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date-time"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateTimeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeArray invokes test_request_string_date-time_array operation.
//
// POST /test_request_string_date-time_array
func (c *Client) TestRequestStringDateTimeArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateTimeArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date-time_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateTimeArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeArrayArray invokes test_request_string_date-time_array_array operation.
//
// POST /test_request_string_date-time_array_array
func (c *Client) TestRequestStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateTimeArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date-time_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateTimeArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeNullable invokes test_request_string_date-time_nullable operation.
//
// POST /test_request_string_date-time_nullable
func (c *Client) TestRequestStringDateTimeNullable(ctx context.Context, request OptNilDateTime) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateTimeNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date-time_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateTimeNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeNullableArray invokes test_request_string_date-time_nullable_array operation.
//
// POST /test_request_string_date-time_nullable_array
func (c *Client) TestRequestStringDateTimeNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateTimeNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date-time_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateTimeNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeNullableArrayArray invokes test_request_string_date-time_nullable_array_array operation.
//
// POST /test_request_string_date-time_nullable_array_array
func (c *Client) TestRequestStringDateTimeNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDateTimeNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_date-time_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDateTimeNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDuration invokes test_request_string_duration operation.
//
// POST /test_request_string_duration
func (c *Client) TestRequestStringDuration(ctx context.Context, request OptDuration) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDuration",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDurationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_duration"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDurationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationArray invokes test_request_string_duration_array operation.
//
// POST /test_request_string_duration_array
func (c *Client) TestRequestStringDurationArray(ctx context.Context, request []time.Duration) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDurationArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_duration_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDurationArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationArrayArray invokes test_request_string_duration_array_array operation.
//
// POST /test_request_string_duration_array_array
func (c *Client) TestRequestStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDurationArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_duration_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDurationArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationNullable invokes test_request_string_duration_nullable operation.
//
// POST /test_request_string_duration_nullable
func (c *Client) TestRequestStringDurationNullable(ctx context.Context, request OptNilDuration) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDurationNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_duration_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDurationNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationNullableArray invokes test_request_string_duration_nullable_array operation.
//
// POST /test_request_string_duration_nullable_array
func (c *Client) TestRequestStringDurationNullableArray(ctx context.Context, request []time.Duration) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDurationNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_duration_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDurationNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationNullableArrayArray invokes test_request_string_duration_nullable_array_array operation.
//
// POST /test_request_string_duration_nullable_array_array
func (c *Client) TestRequestStringDurationNullableArrayArray(ctx context.Context, request [][]time.Duration) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringDurationNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_duration_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringDurationNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmail invokes test_request_string_email operation.
//
// POST /test_request_string_email
func (c *Client) TestRequestStringEmail(ctx context.Context, request OptString) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(request.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmail",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringEmailRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_email"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringEmailResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailArray invokes test_request_string_email_array operation.
//
// POST /test_request_string_email_array
func (c *Client) TestRequestStringEmailArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringEmailArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_email_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringEmailArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailArrayArray invokes test_request_string_email_array_array operation.
//
// POST /test_request_string_email_array_array
func (c *Client) TestRequestStringEmailArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringEmailArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_email_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringEmailArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailNullable invokes test_request_string_email_nullable operation.
//
// POST /test_request_string_email_nullable
func (c *Client) TestRequestStringEmailNullable(ctx context.Context, request OptNilString) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(request.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringEmailNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_email_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringEmailNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailNullableArray invokes test_request_string_email_nullable_array operation.
//
// POST /test_request_string_email_nullable_array
func (c *Client) TestRequestStringEmailNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringEmailNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_email_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringEmailNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailNullableArrayArray invokes test_request_string_email_nullable_array_array operation.
//
// POST /test_request_string_email_nullable_array_array
func (c *Client) TestRequestStringEmailNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringEmailNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_email_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringEmailNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostname invokes test_request_string_hostname operation.
//
// POST /test_request_string_hostname
func (c *Client) TestRequestStringHostname(ctx context.Context, request OptString) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(request.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostname",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringHostnameRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_hostname"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringHostnameResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameArray invokes test_request_string_hostname_array operation.
//
// POST /test_request_string_hostname_array
func (c *Client) TestRequestStringHostnameArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringHostnameArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_hostname_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringHostnameArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameArrayArray invokes test_request_string_hostname_array_array operation.
//
// POST /test_request_string_hostname_array_array
func (c *Client) TestRequestStringHostnameArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringHostnameArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_hostname_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringHostnameArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameNullable invokes test_request_string_hostname_nullable operation.
//
// POST /test_request_string_hostname_nullable
func (c *Client) TestRequestStringHostnameNullable(ctx context.Context, request OptNilString) (res Error, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(request.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringHostnameNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_hostname_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringHostnameNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameNullableArray invokes test_request_string_hostname_nullable_array operation.
//
// POST /test_request_string_hostname_nullable_array
func (c *Client) TestRequestStringHostnameNullableArray(ctx context.Context, request []string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringHostnameNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_hostname_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringHostnameNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameNullableArrayArray invokes test_request_string_hostname_nullable_array_array operation.
//
// POST /test_request_string_hostname_nullable_array_array
func (c *Client) TestRequestStringHostnameNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringHostnameNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_hostname_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringHostnameNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIP invokes test_request_string_ip operation.
//
// POST /test_request_string_ip
func (c *Client) TestRequestStringIP(ctx context.Context, request OptIP) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIP",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIPRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ip"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIPResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPArray invokes test_request_string_ip_array operation.
//
// POST /test_request_string_ip_array
func (c *Client) TestRequestStringIPArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIPArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ip_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIPArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPArrayArray invokes test_request_string_ip_array_array operation.
//
// POST /test_request_string_ip_array_array
func (c *Client) TestRequestStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIPArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ip_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIPArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPNullable invokes test_request_string_ip_nullable operation.
//
// POST /test_request_string_ip_nullable
func (c *Client) TestRequestStringIPNullable(ctx context.Context, request OptNilIP) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIPNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ip_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIPNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPNullableArray invokes test_request_string_ip_nullable_array operation.
//
// POST /test_request_string_ip_nullable_array
func (c *Client) TestRequestStringIPNullableArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIPNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ip_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIPNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPNullableArrayArray invokes test_request_string_ip_nullable_array_array operation.
//
// POST /test_request_string_ip_nullable_array_array
func (c *Client) TestRequestStringIPNullableArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIPNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ip_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIPNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32 invokes test_request_string_int32 operation.
//
// POST /test_request_string_int32
func (c *Client) TestRequestStringInt32(ctx context.Context, request OptStringInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32Array invokes test_request_string_int32_array operation.
//
// POST /test_request_string_int32_array
func (c *Client) TestRequestStringInt32Array(ctx context.Context, request []int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32ArrayArray invokes test_request_string_int32_array_array operation.
//
// POST /test_request_string_int32_array_array
func (c *Client) TestRequestStringInt32ArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32Nullable invokes test_request_string_int32_nullable operation.
//
// POST /test_request_string_int32_nullable
func (c *Client) TestRequestStringInt32Nullable(ctx context.Context, request OptNilStringInt32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32NullableArray invokes test_request_string_int32_nullable_array operation.
//
// POST /test_request_string_int32_nullable_array
func (c *Client) TestRequestStringInt32NullableArray(ctx context.Context, request []int32) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32NullableArrayArray invokes test_request_string_int32_nullable_array_array operation.
//
// POST /test_request_string_int32_nullable_array_array
func (c *Client) TestRequestStringInt32NullableArrayArray(ctx context.Context, request [][]int32) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64 invokes test_request_string_int64 operation.
//
// POST /test_request_string_int64
func (c *Client) TestRequestStringInt64(ctx context.Context, request OptStringInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64Array invokes test_request_string_int64_array operation.
//
// POST /test_request_string_int64_array
func (c *Client) TestRequestStringInt64Array(ctx context.Context, request []int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64ArrayArray invokes test_request_string_int64_array_array operation.
//
// POST /test_request_string_int64_array_array
func (c *Client) TestRequestStringInt64ArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64Nullable invokes test_request_string_int64_nullable operation.
//
// POST /test_request_string_int64_nullable
func (c *Client) TestRequestStringInt64Nullable(ctx context.Context, request OptNilStringInt64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64NullableArray invokes test_request_string_int64_nullable_array operation.
//
// POST /test_request_string_int64_nullable_array
func (c *Client) TestRequestStringInt64NullableArray(ctx context.Context, request []int64) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64NullableArrayArray invokes test_request_string_int64_nullable_array_array operation.
//
// POST /test_request_string_int64_nullable_array_array
func (c *Client) TestRequestStringInt64NullableArrayArray(ctx context.Context, request [][]int64) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4 invokes test_request_string_ipv4 operation.
//
// POST /test_request_string_ipv4
func (c *Client) TestRequestStringIpv4(ctx context.Context, request OptIPv4) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv4RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv4"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv4Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4Array invokes test_request_string_ipv4_array operation.
//
// POST /test_request_string_ipv4_array
func (c *Client) TestRequestStringIpv4Array(ctx context.Context, request []netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv4ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv4_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv4ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4ArrayArray invokes test_request_string_ipv4_array_array operation.
//
// POST /test_request_string_ipv4_array_array
func (c *Client) TestRequestStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv4ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv4_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv4ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4Nullable invokes test_request_string_ipv4_nullable operation.
//
// POST /test_request_string_ipv4_nullable
func (c *Client) TestRequestStringIpv4Nullable(ctx context.Context, request OptNilIPv4) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv4NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv4_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv4NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4NullableArray invokes test_request_string_ipv4_nullable_array operation.
//
// POST /test_request_string_ipv4_nullable_array
func (c *Client) TestRequestStringIpv4NullableArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv4NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv4_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv4NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4NullableArrayArray invokes test_request_string_ipv4_nullable_array_array operation.
//
// POST /test_request_string_ipv4_nullable_array_array
func (c *Client) TestRequestStringIpv4NullableArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv4NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv4_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv4NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6 invokes test_request_string_ipv6 operation.
//
// POST /test_request_string_ipv6
func (c *Client) TestRequestStringIpv6(ctx context.Context, request OptIPv6) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv6RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv6"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv6Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6Array invokes test_request_string_ipv6_array operation.
//
// POST /test_request_string_ipv6_array
func (c *Client) TestRequestStringIpv6Array(ctx context.Context, request []netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv6ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv6_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv6ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6ArrayArray invokes test_request_string_ipv6_array_array operation.
//
// POST /test_request_string_ipv6_array_array
func (c *Client) TestRequestStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv6ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv6_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv6ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6Nullable invokes test_request_string_ipv6_nullable operation.
//
// POST /test_request_string_ipv6_nullable
func (c *Client) TestRequestStringIpv6Nullable(ctx context.Context, request OptNilIPv6) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv6NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv6_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv6NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6NullableArray invokes test_request_string_ipv6_nullable_array operation.
//
// POST /test_request_string_ipv6_nullable_array
func (c *Client) TestRequestStringIpv6NullableArray(ctx context.Context, request []netip.Addr) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv6NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv6_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv6NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6NullableArrayArray invokes test_request_string_ipv6_nullable_array_array operation.
//
// POST /test_request_string_ipv6_nullable_array_array
func (c *Client) TestRequestStringIpv6NullableArrayArray(ctx context.Context, request [][]netip.Addr) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringIpv6NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_ipv6_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringIpv6NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringNullable invokes test_request_string_nullable operation.
//
// POST /test_request_string_nullable
func (c *Client) TestRequestStringNullable(ctx context.Context, request OptNilString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringNullableArray invokes test_request_string_nullable_array operation.
//
// POST /test_request_string_nullable_array
func (c *Client) TestRequestStringNullableArray(ctx context.Context, request []string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringNullableArrayArray invokes test_request_string_nullable_array_array operation.
//
// POST /test_request_string_nullable_array_array
func (c *Client) TestRequestStringNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPassword invokes test_request_string_password operation.
//
// POST /test_request_string_password
func (c *Client) TestRequestStringPassword(ctx context.Context, request OptString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPassword",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringPasswordRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_password"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringPasswordResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordArray invokes test_request_string_password_array operation.
//
// POST /test_request_string_password_array
func (c *Client) TestRequestStringPasswordArray(ctx context.Context, request []string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringPasswordArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_password_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringPasswordArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordArrayArray invokes test_request_string_password_array_array operation.
//
// POST /test_request_string_password_array_array
func (c *Client) TestRequestStringPasswordArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringPasswordArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_password_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringPasswordArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordNullable invokes test_request_string_password_nullable operation.
//
// POST /test_request_string_password_nullable
func (c *Client) TestRequestStringPasswordNullable(ctx context.Context, request OptNilString) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringPasswordNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_password_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringPasswordNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordNullableArray invokes test_request_string_password_nullable_array operation.
//
// POST /test_request_string_password_nullable_array
func (c *Client) TestRequestStringPasswordNullableArray(ctx context.Context, request []string) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringPasswordNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_password_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringPasswordNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordNullableArrayArray invokes test_request_string_password_nullable_array_array operation.
//
// POST /test_request_string_password_nullable_array_array
func (c *Client) TestRequestStringPasswordNullableArrayArray(ctx context.Context, request [][]string) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringPasswordNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_password_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringPasswordNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTime invokes test_request_string_time operation.
//
// POST /test_request_string_time
func (c *Client) TestRequestStringTime(ctx context.Context, request OptTime) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringTimeRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_time"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringTimeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeArray invokes test_request_string_time_array operation.
//
// POST /test_request_string_time_array
func (c *Client) TestRequestStringTimeArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringTimeArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_time_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringTimeArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeArrayArray invokes test_request_string_time_array_array operation.
//
// POST /test_request_string_time_array_array
func (c *Client) TestRequestStringTimeArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringTimeArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_time_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringTimeArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeNullable invokes test_request_string_time_nullable operation.
//
// POST /test_request_string_time_nullable
func (c *Client) TestRequestStringTimeNullable(ctx context.Context, request OptNilTime) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringTimeNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_time_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringTimeNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeNullableArray invokes test_request_string_time_nullable_array operation.
//
// POST /test_request_string_time_nullable_array
func (c *Client) TestRequestStringTimeNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringTimeNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_time_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringTimeNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeNullableArrayArray invokes test_request_string_time_nullable_array_array operation.
//
// POST /test_request_string_time_nullable_array_array
func (c *Client) TestRequestStringTimeNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringTimeNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_time_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringTimeNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURI invokes test_request_string_uri operation.
//
// POST /test_request_string_uri
func (c *Client) TestRequestStringURI(ctx context.Context, request OptURI) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURI",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringURIRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uri"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringURIResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURIArray invokes test_request_string_uri_array operation.
//
// POST /test_request_string_uri_array
func (c *Client) TestRequestStringURIArray(ctx context.Context, request []url.URL) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURIArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringURIArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uri_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringURIArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURIArrayArray invokes test_request_string_uri_array_array operation.
//
// POST /test_request_string_uri_array_array
func (c *Client) TestRequestStringURIArrayArray(ctx context.Context, request [][]url.URL) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringURIArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uri_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringURIArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURINullable invokes test_request_string_uri_nullable operation.
//
// POST /test_request_string_uri_nullable
func (c *Client) TestRequestStringURINullable(ctx context.Context, request OptNilURI) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURINullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringURINullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uri_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringURINullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURINullableArray invokes test_request_string_uri_nullable_array operation.
//
// POST /test_request_string_uri_nullable_array
func (c *Client) TestRequestStringURINullableArray(ctx context.Context, request []url.URL) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringURINullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uri_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringURINullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURINullableArrayArray invokes test_request_string_uri_nullable_array_array operation.
//
// POST /test_request_string_uri_nullable_array_array
func (c *Client) TestRequestStringURINullableArrayArray(ctx context.Context, request [][]url.URL) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringURINullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uri_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringURINullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUID invokes test_request_string_uuid operation.
//
// POST /test_request_string_uuid
func (c *Client) TestRequestStringUUID(ctx context.Context, request OptUUID) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUID",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUUIDRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uuid"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUUIDResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDArray invokes test_request_string_uuid_array operation.
//
// POST /test_request_string_uuid_array
func (c *Client) TestRequestStringUUIDArray(ctx context.Context, request []uuid.UUID) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUUIDArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uuid_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUUIDArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDArrayArray invokes test_request_string_uuid_array_array operation.
//
// POST /test_request_string_uuid_array_array
func (c *Client) TestRequestStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUUIDArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uuid_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUUIDArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDNullable invokes test_request_string_uuid_nullable operation.
//
// POST /test_request_string_uuid_nullable
func (c *Client) TestRequestStringUUIDNullable(ctx context.Context, request OptNilUUID) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUUIDNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uuid_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUUIDNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDNullableArray invokes test_request_string_uuid_nullable_array operation.
//
// POST /test_request_string_uuid_nullable_array
func (c *Client) TestRequestStringUUIDNullableArray(ctx context.Context, request []uuid.UUID) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUUIDNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uuid_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUUIDNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDNullableArrayArray invokes test_request_string_uuid_nullable_array_array operation.
//
// POST /test_request_string_uuid_nullable_array_array
func (c *Client) TestRequestStringUUIDNullableArrayArray(ctx context.Context, request [][]uuid.UUID) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUUIDNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_uuid_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUUIDNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnix invokes test_request_string_unix operation.
//
// POST /test_request_string_unix
func (c *Client) TestRequestStringUnix(ctx context.Context, request OptUnixSeconds) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnix",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixArray invokes test_request_string_unix_array operation.
//
// POST /test_request_string_unix_array
func (c *Client) TestRequestStringUnixArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixArrayArray invokes test_request_string_unix_array_array operation.
//
// POST /test_request_string_unix_array_array
func (c *Client) TestRequestStringUnixArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicro invokes test_request_string_unix-micro operation.
//
// POST /test_request_string_unix-micro
func (c *Client) TestRequestStringUnixMicro(ctx context.Context, request OptUnixMicro) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMicroRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-micro"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMicroResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroArray invokes test_request_string_unix-micro_array operation.
//
// POST /test_request_string_unix-micro_array
func (c *Client) TestRequestStringUnixMicroArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMicroArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-micro_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMicroArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroArrayArray invokes test_request_string_unix-micro_array_array operation.
//
// POST /test_request_string_unix-micro_array_array
func (c *Client) TestRequestStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMicroArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-micro_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMicroArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroNullable invokes test_request_string_unix-micro_nullable operation.
//
// POST /test_request_string_unix-micro_nullable
func (c *Client) TestRequestStringUnixMicroNullable(ctx context.Context, request OptNilUnixMicro) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMicroNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-micro_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMicroNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroNullableArray invokes test_request_string_unix-micro_nullable_array operation.
//
// POST /test_request_string_unix-micro_nullable_array
func (c *Client) TestRequestStringUnixMicroNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMicroNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-micro_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMicroNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroNullableArrayArray invokes test_request_string_unix-micro_nullable_array_array operation.
//
// POST /test_request_string_unix-micro_nullable_array_array
func (c *Client) TestRequestStringUnixMicroNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMicroNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-micro_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMicroNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilli invokes test_request_string_unix-milli operation.
//
// POST /test_request_string_unix-milli
func (c *Client) TestRequestStringUnixMilli(ctx context.Context, request OptUnixMilli) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMilliRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-milli"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMilliResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliArray invokes test_request_string_unix-milli_array operation.
//
// POST /test_request_string_unix-milli_array
func (c *Client) TestRequestStringUnixMilliArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMilliArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-milli_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMilliArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliArrayArray invokes test_request_string_unix-milli_array_array operation.
//
// POST /test_request_string_unix-milli_array_array
func (c *Client) TestRequestStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMilliArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-milli_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMilliArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliNullable invokes test_request_string_unix-milli_nullable operation.
//
// POST /test_request_string_unix-milli_nullable
func (c *Client) TestRequestStringUnixMilliNullable(ctx context.Context, request OptNilUnixMilli) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMilliNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-milli_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMilliNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliNullableArray invokes test_request_string_unix-milli_nullable_array operation.
//
// POST /test_request_string_unix-milli_nullable_array
func (c *Client) TestRequestStringUnixMilliNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMilliNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-milli_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMilliNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliNullableArrayArray invokes test_request_string_unix-milli_nullable_array_array operation.
//
// POST /test_request_string_unix-milli_nullable_array_array
func (c *Client) TestRequestStringUnixMilliNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixMilliNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-milli_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixMilliNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNano invokes test_request_string_unix-nano operation.
//
// POST /test_request_string_unix-nano
func (c *Client) TestRequestStringUnixNano(ctx context.Context, request OptUnixNano) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNanoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-nano"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNanoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoArray invokes test_request_string_unix-nano_array operation.
//
// POST /test_request_string_unix-nano_array
func (c *Client) TestRequestStringUnixNanoArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNanoArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-nano_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNanoArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoArrayArray invokes test_request_string_unix-nano_array_array operation.
//
// POST /test_request_string_unix-nano_array_array
func (c *Client) TestRequestStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNanoArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-nano_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNanoArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoNullable invokes test_request_string_unix-nano_nullable operation.
//
// POST /test_request_string_unix-nano_nullable
func (c *Client) TestRequestStringUnixNanoNullable(ctx context.Context, request OptNilUnixNano) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNanoNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-nano_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNanoNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoNullableArray invokes test_request_string_unix-nano_nullable_array operation.
//
// POST /test_request_string_unix-nano_nullable_array
func (c *Client) TestRequestStringUnixNanoNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNanoNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-nano_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNanoNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoNullableArrayArray invokes test_request_string_unix-nano_nullable_array_array operation.
//
// POST /test_request_string_unix-nano_nullable_array_array
func (c *Client) TestRequestStringUnixNanoNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNanoNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-nano_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNanoNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNullable invokes test_request_string_unix_nullable operation.
//
// POST /test_request_string_unix_nullable
func (c *Client) TestRequestStringUnixNullable(ctx context.Context, request OptNilUnixSeconds) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNullableArray invokes test_request_string_unix_nullable_array operation.
//
// POST /test_request_string_unix_nullable_array
func (c *Client) TestRequestStringUnixNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNullableArrayArray invokes test_request_string_unix_nullable_array_array operation.
//
// POST /test_request_string_unix_nullable_array_array
func (c *Client) TestRequestStringUnixNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSeconds invokes test_request_string_unix-seconds operation.
//
// POST /test_request_string_unix-seconds
func (c *Client) TestRequestStringUnixSeconds(ctx context.Context, request OptUnixSeconds) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixSecondsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-seconds"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixSecondsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsArray invokes test_request_string_unix-seconds_array operation.
//
// POST /test_request_string_unix-seconds_array
func (c *Client) TestRequestStringUnixSecondsArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixSecondsArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-seconds_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixSecondsArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsArrayArray invokes test_request_string_unix-seconds_array_array operation.
//
// POST /test_request_string_unix-seconds_array_array
func (c *Client) TestRequestStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixSecondsArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-seconds_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixSecondsArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsNullable invokes test_request_string_unix-seconds_nullable operation.
//
// POST /test_request_string_unix-seconds_nullable
func (c *Client) TestRequestStringUnixSecondsNullable(ctx context.Context, request OptNilUnixSeconds) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixSecondsNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-seconds_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixSecondsNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsNullableArray invokes test_request_string_unix-seconds_nullable_array operation.
//
// POST /test_request_string_unix-seconds_nullable_array
func (c *Client) TestRequestStringUnixSecondsNullableArray(ctx context.Context, request []time.Time) (res Error, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixSecondsNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-seconds_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixSecondsNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsNullableArrayArray invokes test_request_string_unix-seconds_nullable_array_array operation.
//
// POST /test_request_string_unix-seconds_nullable_array_array
func (c *Client) TestRequestStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]time.Time) (res Error, err error) {
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range request {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestRequestStringUnixSecondsNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_request_string_unix-seconds_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestRequestStringUnixSecondsNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseAny invokes test_response_Any operation.
//
// POST /test_response_Any
func (c *Client) TestResponseAny(ctx context.Context, request string) (res jx.Raw, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_Any"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseAny",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseAnyRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_Any"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseAnyResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBoolean invokes test_response_boolean operation.
//
// POST /test_response_boolean
func (c *Client) TestResponseBoolean(ctx context.Context, request string) (res bool, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBoolean",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseBooleanRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_boolean"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseBooleanResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanArray invokes test_response_boolean_array operation.
//
// POST /test_response_boolean_array
func (c *Client) TestResponseBooleanArray(ctx context.Context, request string) (res []bool, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseBooleanArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_boolean_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseBooleanArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanArrayArray invokes test_response_boolean_array_array operation.
//
// POST /test_response_boolean_array_array
func (c *Client) TestResponseBooleanArrayArray(ctx context.Context, request string) (res [][]bool, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseBooleanArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_boolean_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseBooleanArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanNullable invokes test_response_boolean_nullable operation.
//
// POST /test_response_boolean_nullable
func (c *Client) TestResponseBooleanNullable(ctx context.Context, request string) (res NilBool, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseBooleanNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_boolean_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseBooleanNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanNullableArray invokes test_response_boolean_nullable_array operation.
//
// POST /test_response_boolean_nullable_array
func (c *Client) TestResponseBooleanNullableArray(ctx context.Context, request string) (res []bool, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseBooleanNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_boolean_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseBooleanNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanNullableArrayArray invokes test_response_boolean_nullable_array_array operation.
//
// POST /test_response_boolean_nullable_array_array
func (c *Client) TestResponseBooleanNullableArrayArray(ctx context.Context, request string) (res [][]bool, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseBooleanNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_boolean_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseBooleanNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseEmptyStruct invokes test_response_EmptyStruct operation.
//
// POST /test_response_EmptyStruct
func (c *Client) TestResponseEmptyStruct(ctx context.Context, request string) (res TestResponseEmptyStructOK, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_EmptyStruct"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseEmptyStructRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_EmptyStruct"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseEmptyStructResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseFormatTest invokes test_response_FormatTest operation.
//
// POST /test_response_FormatTest
func (c *Client) TestResponseFormatTest(ctx context.Context, request string) (res TestResponseFormatTestOK, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_FormatTest"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseFormatTest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseFormatTestRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_FormatTest"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseFormatTestResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseInteger invokes test_response_integer operation.
//
// POST /test_response_integer
func (c *Client) TestResponseInteger(ctx context.Context, request string) (res int, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseInteger",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerArray invokes test_response_integer_array operation.
//
// POST /test_response_integer_array
func (c *Client) TestResponseIntegerArray(ctx context.Context, request string) (res []int, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerArrayArray invokes test_response_integer_array_array operation.
//
// POST /test_response_integer_array_array
func (c *Client) TestResponseIntegerArrayArray(ctx context.Context, request string) (res [][]int, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32 invokes test_response_integer_int32 operation.
//
// POST /test_response_integer_int32
func (c *Client) TestResponseIntegerInt32(ctx context.Context, request string) (res int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32Array invokes test_response_integer_int32_array operation.
//
// POST /test_response_integer_int32_array
func (c *Client) TestResponseIntegerInt32Array(ctx context.Context, request string) (res []int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32ArrayArray invokes test_response_integer_int32_array_array operation.
//
// POST /test_response_integer_int32_array_array
func (c *Client) TestResponseIntegerInt32ArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32Nullable invokes test_response_integer_int32_nullable operation.
//
// POST /test_response_integer_int32_nullable
func (c *Client) TestResponseIntegerInt32Nullable(ctx context.Context, request string) (res NilInt32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32NullableArray invokes test_response_integer_int32_nullable_array operation.
//
// POST /test_response_integer_int32_nullable_array
func (c *Client) TestResponseIntegerInt32NullableArray(ctx context.Context, request string) (res []int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32NullableArrayArray invokes test_response_integer_int32_nullable_array_array operation.
//
// POST /test_response_integer_int32_nullable_array_array
func (c *Client) TestResponseIntegerInt32NullableArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64 invokes test_response_integer_int64 operation.
//
// POST /test_response_integer_int64
func (c *Client) TestResponseIntegerInt64(ctx context.Context, request string) (res int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64Array invokes test_response_integer_int64_array operation.
//
// POST /test_response_integer_int64_array
func (c *Client) TestResponseIntegerInt64Array(ctx context.Context, request string) (res []int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64ArrayArray invokes test_response_integer_int64_array_array operation.
//
// POST /test_response_integer_int64_array_array
func (c *Client) TestResponseIntegerInt64ArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64Nullable invokes test_response_integer_int64_nullable operation.
//
// POST /test_response_integer_int64_nullable
func (c *Client) TestResponseIntegerInt64Nullable(ctx context.Context, request string) (res NilInt64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64NullableArray invokes test_response_integer_int64_nullable_array operation.
//
// POST /test_response_integer_int64_nullable_array
func (c *Client) TestResponseIntegerInt64NullableArray(ctx context.Context, request string) (res []int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64NullableArrayArray invokes test_response_integer_int64_nullable_array_array operation.
//
// POST /test_response_integer_int64_nullable_array_array
func (c *Client) TestResponseIntegerInt64NullableArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerNullable invokes test_response_integer_nullable operation.
//
// POST /test_response_integer_nullable
func (c *Client) TestResponseIntegerNullable(ctx context.Context, request string) (res NilInt, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerNullableArray invokes test_response_integer_nullable_array operation.
//
// POST /test_response_integer_nullable_array
func (c *Client) TestResponseIntegerNullableArray(ctx context.Context, request string) (res []int, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerNullableArrayArray invokes test_response_integer_nullable_array_array operation.
//
// POST /test_response_integer_nullable_array_array
func (c *Client) TestResponseIntegerNullableArrayArray(ctx context.Context, request string) (res [][]int, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseIntegerNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_integer_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseIntegerNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNull invokes test_response_null operation.
//
// POST /test_response_null
func (c *Client) TestResponseNull(ctx context.Context, request string) (res struct{}, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNull",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNullRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_null"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNullResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullArray invokes test_response_null_array operation.
//
// POST /test_response_null_array
func (c *Client) TestResponseNullArray(ctx context.Context, request string) (res []struct{}, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNullArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_null_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNullArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullArrayArray invokes test_response_null_array_array operation.
//
// POST /test_response_null_array_array
func (c *Client) TestResponseNullArrayArray(ctx context.Context, request string) (res [][]struct{}, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNullArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_null_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNullArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullNullable invokes test_response_null_nullable operation.
//
// POST /test_response_null_nullable
func (c *Client) TestResponseNullNullable(ctx context.Context, request string) (res struct{}, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNullNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_null_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNullNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullNullableArray invokes test_response_null_nullable_array operation.
//
// POST /test_response_null_nullable_array
func (c *Client) TestResponseNullNullableArray(ctx context.Context, request string) (res []struct{}, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNullNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_null_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNullNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullNullableArrayArray invokes test_response_null_nullable_array_array operation.
//
// POST /test_response_null_nullable_array_array
func (c *Client) TestResponseNullNullableArrayArray(ctx context.Context, request string) (res [][]struct{}, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNullNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_null_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNullNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumber invokes test_response_number operation.
//
// POST /test_response_number
func (c *Client) TestResponseNumber(ctx context.Context, request string) (res float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumber",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberArray invokes test_response_number_array operation.
//
// POST /test_response_number_array
func (c *Client) TestResponseNumberArray(ctx context.Context, request string) (res []float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberArrayArray invokes test_response_number_array_array operation.
//
// POST /test_response_number_array_array
func (c *Client) TestResponseNumberArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDouble invokes test_response_number_double operation.
//
// POST /test_response_number_double
func (c *Client) TestResponseNumberDouble(ctx context.Context, request string) (res float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDouble",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberDoubleRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_double"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberDoubleResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleArray invokes test_response_number_double_array operation.
//
// POST /test_response_number_double_array
func (c *Client) TestResponseNumberDoubleArray(ctx context.Context, request string) (res []float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberDoubleArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_double_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberDoubleArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleArrayArray invokes test_response_number_double_array_array operation.
//
// POST /test_response_number_double_array_array
func (c *Client) TestResponseNumberDoubleArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberDoubleArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_double_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberDoubleArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleNullable invokes test_response_number_double_nullable operation.
//
// POST /test_response_number_double_nullable
func (c *Client) TestResponseNumberDoubleNullable(ctx context.Context, request string) (res NilFloat64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberDoubleNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_double_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberDoubleNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleNullableArray invokes test_response_number_double_nullable_array operation.
//
// POST /test_response_number_double_nullable_array
func (c *Client) TestResponseNumberDoubleNullableArray(ctx context.Context, request string) (res []float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberDoubleNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_double_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberDoubleNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleNullableArrayArray invokes test_response_number_double_nullable_array_array operation.
//
// POST /test_response_number_double_nullable_array_array
func (c *Client) TestResponseNumberDoubleNullableArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberDoubleNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_double_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberDoubleNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloat invokes test_response_number_float operation.
//
// POST /test_response_number_float
func (c *Client) TestResponseNumberFloat(ctx context.Context, request string) (res float32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberFloatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_float"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberFloatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatArray invokes test_response_number_float_array operation.
//
// POST /test_response_number_float_array
func (c *Client) TestResponseNumberFloatArray(ctx context.Context, request string) (res []float32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberFloatArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_float_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberFloatArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatArrayArray invokes test_response_number_float_array_array operation.
//
// POST /test_response_number_float_array_array
func (c *Client) TestResponseNumberFloatArrayArray(ctx context.Context, request string) (res [][]float32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberFloatArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_float_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberFloatArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatNullable invokes test_response_number_float_nullable operation.
//
// POST /test_response_number_float_nullable
func (c *Client) TestResponseNumberFloatNullable(ctx context.Context, request string) (res NilFloat32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberFloatNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_float_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberFloatNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatNullableArray invokes test_response_number_float_nullable_array operation.
//
// POST /test_response_number_float_nullable_array
func (c *Client) TestResponseNumberFloatNullableArray(ctx context.Context, request string) (res []float32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberFloatNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_float_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberFloatNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatNullableArrayArray invokes test_response_number_float_nullable_array_array operation.
//
// POST /test_response_number_float_nullable_array_array
func (c *Client) TestResponseNumberFloatNullableArrayArray(ctx context.Context, request string) (res [][]float32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberFloatNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_float_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberFloatNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32 invokes test_response_number_int32 operation.
//
// POST /test_response_number_int32
func (c *Client) TestResponseNumberInt32(ctx context.Context, request string) (res int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32Array invokes test_response_number_int32_array operation.
//
// POST /test_response_number_int32_array
func (c *Client) TestResponseNumberInt32Array(ctx context.Context, request string) (res []int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32ArrayArray invokes test_response_number_int32_array_array operation.
//
// POST /test_response_number_int32_array_array
func (c *Client) TestResponseNumberInt32ArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32Nullable invokes test_response_number_int32_nullable operation.
//
// POST /test_response_number_int32_nullable
func (c *Client) TestResponseNumberInt32Nullable(ctx context.Context, request string) (res NilInt32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32NullableArray invokes test_response_number_int32_nullable_array operation.
//
// POST /test_response_number_int32_nullable_array
func (c *Client) TestResponseNumberInt32NullableArray(ctx context.Context, request string) (res []int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32NullableArrayArray invokes test_response_number_int32_nullable_array_array operation.
//
// POST /test_response_number_int32_nullable_array_array
func (c *Client) TestResponseNumberInt32NullableArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64 invokes test_response_number_int64 operation.
//
// POST /test_response_number_int64
func (c *Client) TestResponseNumberInt64(ctx context.Context, request string) (res int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64Array invokes test_response_number_int64_array operation.
//
// POST /test_response_number_int64_array
func (c *Client) TestResponseNumberInt64Array(ctx context.Context, request string) (res []int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64ArrayArray invokes test_response_number_int64_array_array operation.
//
// POST /test_response_number_int64_array_array
func (c *Client) TestResponseNumberInt64ArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64Nullable invokes test_response_number_int64_nullable operation.
//
// POST /test_response_number_int64_nullable
func (c *Client) TestResponseNumberInt64Nullable(ctx context.Context, request string) (res NilInt64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64NullableArray invokes test_response_number_int64_nullable_array operation.
//
// POST /test_response_number_int64_nullable_array
func (c *Client) TestResponseNumberInt64NullableArray(ctx context.Context, request string) (res []int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64NullableArrayArray invokes test_response_number_int64_nullable_array_array operation.
//
// POST /test_response_number_int64_nullable_array_array
func (c *Client) TestResponseNumberInt64NullableArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberNullable invokes test_response_number_nullable operation.
//
// POST /test_response_number_nullable
func (c *Client) TestResponseNumberNullable(ctx context.Context, request string) (res NilFloat64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberNullableArray invokes test_response_number_nullable_array operation.
//
// POST /test_response_number_nullable_array
func (c *Client) TestResponseNumberNullableArray(ctx context.Context, request string) (res []float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberNullableArrayArray invokes test_response_number_nullable_array_array operation.
//
// POST /test_response_number_nullable_array_array
func (c *Client) TestResponseNumberNullableArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseNumberNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_number_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseNumberNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseString invokes test_response_string operation.
//
// POST /test_response_string
func (c *Client) TestResponseString(ctx context.Context, request string) (res string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseString",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringArray invokes test_response_string_array operation.
//
// POST /test_response_string_array
func (c *Client) TestResponseStringArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringArrayArray invokes test_response_string_array_array operation.
//
// POST /test_response_string_array_array
func (c *Client) TestResponseStringArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinary invokes test_response_string_binary operation.
//
// POST /test_response_string_binary
func (c *Client) TestResponseStringBinary(ctx context.Context, request string) (res string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinary",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringBinaryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_binary"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringBinaryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryArray invokes test_response_string_binary_array operation.
//
// POST /test_response_string_binary_array
func (c *Client) TestResponseStringBinaryArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringBinaryArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_binary_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringBinaryArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryArrayArray invokes test_response_string_binary_array_array operation.
//
// POST /test_response_string_binary_array_array
func (c *Client) TestResponseStringBinaryArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringBinaryArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_binary_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringBinaryArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryNullable invokes test_response_string_binary_nullable operation.
//
// POST /test_response_string_binary_nullable
func (c *Client) TestResponseStringBinaryNullable(ctx context.Context, request string) (res NilString, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringBinaryNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_binary_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringBinaryNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryNullableArray invokes test_response_string_binary_nullable_array operation.
//
// POST /test_response_string_binary_nullable_array
func (c *Client) TestResponseStringBinaryNullableArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringBinaryNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_binary_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringBinaryNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryNullableArrayArray invokes test_response_string_binary_nullable_array_array operation.
//
// POST /test_response_string_binary_nullable_array_array
func (c *Client) TestResponseStringBinaryNullableArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringBinaryNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_binary_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringBinaryNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByte invokes test_response_string_byte operation.
//
// POST /test_response_string_byte
func (c *Client) TestResponseStringByte(ctx context.Context, request string) (res []byte, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByte",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringByteRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_byte"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringByteResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteArray invokes test_response_string_byte_array operation.
//
// POST /test_response_string_byte_array
func (c *Client) TestResponseStringByteArray(ctx context.Context, request string) (res [][]byte, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringByteArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_byte_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringByteArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteArrayArray invokes test_response_string_byte_array_array operation.
//
// POST /test_response_string_byte_array_array
func (c *Client) TestResponseStringByteArrayArray(ctx context.Context, request string) (res [][][]byte, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringByteArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_byte_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringByteArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteNullable invokes test_response_string_byte_nullable operation.
//
// POST /test_response_string_byte_nullable
func (c *Client) TestResponseStringByteNullable(ctx context.Context, request string) (res []byte, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringByteNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_byte_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringByteNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteNullableArray invokes test_response_string_byte_nullable_array operation.
//
// POST /test_response_string_byte_nullable_array
func (c *Client) TestResponseStringByteNullableArray(ctx context.Context, request string) (res [][]byte, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringByteNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_byte_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringByteNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteNullableArrayArray invokes test_response_string_byte_nullable_array_array operation.
//
// POST /test_response_string_byte_nullable_array_array
func (c *Client) TestResponseStringByteNullableArrayArray(ctx context.Context, request string) (res [][][]byte, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringByteNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_byte_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringByteNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDate invokes test_response_string_date operation.
//
// POST /test_response_string_date
func (c *Client) TestResponseStringDate(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDate",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateArray invokes test_response_string_date_array operation.
//
// POST /test_response_string_date_array
func (c *Client) TestResponseStringDateArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateArrayArray invokes test_response_string_date_array_array operation.
//
// POST /test_response_string_date_array_array
func (c *Client) TestResponseStringDateArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateNullable invokes test_response_string_date_nullable operation.
//
// POST /test_response_string_date_nullable
func (c *Client) TestResponseStringDateNullable(ctx context.Context, request string) (res NilDate, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateNullableArray invokes test_response_string_date_nullable_array operation.
//
// POST /test_response_string_date_nullable_array
func (c *Client) TestResponseStringDateNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateNullableArrayArray invokes test_response_string_date_nullable_array_array operation.
//
// POST /test_response_string_date_nullable_array_array
func (c *Client) TestResponseStringDateNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTime invokes test_response_string_date-time operation.
//
// POST /test_response_string_date-time
func (c *Client) TestResponseStringDateTime(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateTimeRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date-time"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateTimeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeArray invokes test_response_string_date-time_array operation.
//
// POST /test_response_string_date-time_array
func (c *Client) TestResponseStringDateTimeArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateTimeArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date-time_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateTimeArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeArrayArray invokes test_response_string_date-time_array_array operation.
//
// POST /test_response_string_date-time_array_array
func (c *Client) TestResponseStringDateTimeArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateTimeArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date-time_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateTimeArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeNullable invokes test_response_string_date-time_nullable operation.
//
// POST /test_response_string_date-time_nullable
func (c *Client) TestResponseStringDateTimeNullable(ctx context.Context, request string) (res NilDateTime, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateTimeNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date-time_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateTimeNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeNullableArray invokes test_response_string_date-time_nullable_array operation.
//
// POST /test_response_string_date-time_nullable_array
func (c *Client) TestResponseStringDateTimeNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateTimeNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date-time_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateTimeNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeNullableArrayArray invokes test_response_string_date-time_nullable_array_array operation.
//
// POST /test_response_string_date-time_nullable_array_array
func (c *Client) TestResponseStringDateTimeNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDateTimeNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_date-time_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDateTimeNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDuration invokes test_response_string_duration operation.
//
// POST /test_response_string_duration
func (c *Client) TestResponseStringDuration(ctx context.Context, request string) (res time.Duration, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDuration",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDurationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_duration"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDurationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationArray invokes test_response_string_duration_array operation.
//
// POST /test_response_string_duration_array
func (c *Client) TestResponseStringDurationArray(ctx context.Context, request string) (res []time.Duration, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDurationArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_duration_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDurationArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationArrayArray invokes test_response_string_duration_array_array operation.
//
// POST /test_response_string_duration_array_array
func (c *Client) TestResponseStringDurationArrayArray(ctx context.Context, request string) (res [][]time.Duration, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDurationArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_duration_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDurationArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationNullable invokes test_response_string_duration_nullable operation.
//
// POST /test_response_string_duration_nullable
func (c *Client) TestResponseStringDurationNullable(ctx context.Context, request string) (res NilDuration, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDurationNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_duration_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDurationNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationNullableArray invokes test_response_string_duration_nullable_array operation.
//
// POST /test_response_string_duration_nullable_array
func (c *Client) TestResponseStringDurationNullableArray(ctx context.Context, request string) (res []time.Duration, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDurationNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_duration_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDurationNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationNullableArrayArray invokes test_response_string_duration_nullable_array_array operation.
//
// POST /test_response_string_duration_nullable_array_array
func (c *Client) TestResponseStringDurationNullableArrayArray(ctx context.Context, request string) (res [][]time.Duration, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringDurationNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_duration_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringDurationNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmail invokes test_response_string_email operation.
//
// POST /test_response_string_email
func (c *Client) TestResponseStringEmail(ctx context.Context, request string) (res string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmail",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringEmailRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_email"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringEmailResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailArray invokes test_response_string_email_array operation.
//
// POST /test_response_string_email_array
func (c *Client) TestResponseStringEmailArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringEmailArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_email_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringEmailArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailArrayArray invokes test_response_string_email_array_array operation.
//
// POST /test_response_string_email_array_array
func (c *Client) TestResponseStringEmailArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringEmailArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_email_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringEmailArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailNullable invokes test_response_string_email_nullable operation.
//
// POST /test_response_string_email_nullable
func (c *Client) TestResponseStringEmailNullable(ctx context.Context, request string) (res NilString, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringEmailNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_email_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringEmailNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailNullableArray invokes test_response_string_email_nullable_array operation.
//
// POST /test_response_string_email_nullable_array
func (c *Client) TestResponseStringEmailNullableArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringEmailNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_email_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringEmailNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailNullableArrayArray invokes test_response_string_email_nullable_array_array operation.
//
// POST /test_response_string_email_nullable_array_array
func (c *Client) TestResponseStringEmailNullableArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringEmailNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_email_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringEmailNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostname invokes test_response_string_hostname operation.
//
// POST /test_response_string_hostname
func (c *Client) TestResponseStringHostname(ctx context.Context, request string) (res string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostname",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringHostnameRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_hostname"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringHostnameResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameArray invokes test_response_string_hostname_array operation.
//
// POST /test_response_string_hostname_array
func (c *Client) TestResponseStringHostnameArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringHostnameArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_hostname_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringHostnameArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameArrayArray invokes test_response_string_hostname_array_array operation.
//
// POST /test_response_string_hostname_array_array
func (c *Client) TestResponseStringHostnameArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringHostnameArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_hostname_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringHostnameArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameNullable invokes test_response_string_hostname_nullable operation.
//
// POST /test_response_string_hostname_nullable
func (c *Client) TestResponseStringHostnameNullable(ctx context.Context, request string) (res NilString, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringHostnameNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_hostname_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringHostnameNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameNullableArray invokes test_response_string_hostname_nullable_array operation.
//
// POST /test_response_string_hostname_nullable_array
func (c *Client) TestResponseStringHostnameNullableArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringHostnameNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_hostname_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringHostnameNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameNullableArrayArray invokes test_response_string_hostname_nullable_array_array operation.
//
// POST /test_response_string_hostname_nullable_array_array
func (c *Client) TestResponseStringHostnameNullableArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringHostnameNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_hostname_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringHostnameNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIP invokes test_response_string_ip operation.
//
// POST /test_response_string_ip
func (c *Client) TestResponseStringIP(ctx context.Context, request string) (res netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIP",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIPRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ip"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIPResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPArray invokes test_response_string_ip_array operation.
//
// POST /test_response_string_ip_array
func (c *Client) TestResponseStringIPArray(ctx context.Context, request string) (res []netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIPArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ip_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIPArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPArrayArray invokes test_response_string_ip_array_array operation.
//
// POST /test_response_string_ip_array_array
func (c *Client) TestResponseStringIPArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIPArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ip_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIPArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPNullable invokes test_response_string_ip_nullable operation.
//
// POST /test_response_string_ip_nullable
func (c *Client) TestResponseStringIPNullable(ctx context.Context, request string) (res NilIP, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIPNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ip_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIPNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPNullableArray invokes test_response_string_ip_nullable_array operation.
//
// POST /test_response_string_ip_nullable_array
func (c *Client) TestResponseStringIPNullableArray(ctx context.Context, request string) (res []netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIPNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ip_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIPNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPNullableArrayArray invokes test_response_string_ip_nullable_array_array operation.
//
// POST /test_response_string_ip_nullable_array_array
func (c *Client) TestResponseStringIPNullableArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIPNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ip_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIPNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32 invokes test_response_string_int32 operation.
//
// POST /test_response_string_int32
func (c *Client) TestResponseStringInt32(ctx context.Context, request string) (res int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt32RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int32"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt32Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32Array invokes test_response_string_int32_array operation.
//
// POST /test_response_string_int32_array
func (c *Client) TestResponseStringInt32Array(ctx context.Context, request string) (res []int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt32ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int32_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt32ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32ArrayArray invokes test_response_string_int32_array_array operation.
//
// POST /test_response_string_int32_array_array
func (c *Client) TestResponseStringInt32ArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt32ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int32_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt32ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32Nullable invokes test_response_string_int32_nullable operation.
//
// POST /test_response_string_int32_nullable
func (c *Client) TestResponseStringInt32Nullable(ctx context.Context, request string) (res NilStringInt32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt32NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int32_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt32NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32NullableArray invokes test_response_string_int32_nullable_array operation.
//
// POST /test_response_string_int32_nullable_array
func (c *Client) TestResponseStringInt32NullableArray(ctx context.Context, request string) (res []int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt32NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int32_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt32NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32NullableArrayArray invokes test_response_string_int32_nullable_array_array operation.
//
// POST /test_response_string_int32_nullable_array_array
func (c *Client) TestResponseStringInt32NullableArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt32NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int32_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt32NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64 invokes test_response_string_int64 operation.
//
// POST /test_response_string_int64
func (c *Client) TestResponseStringInt64(ctx context.Context, request string) (res int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt64RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int64"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt64Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64Array invokes test_response_string_int64_array operation.
//
// POST /test_response_string_int64_array
func (c *Client) TestResponseStringInt64Array(ctx context.Context, request string) (res []int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt64ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int64_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt64ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64ArrayArray invokes test_response_string_int64_array_array operation.
//
// POST /test_response_string_int64_array_array
func (c *Client) TestResponseStringInt64ArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt64ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int64_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt64ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64Nullable invokes test_response_string_int64_nullable operation.
//
// POST /test_response_string_int64_nullable
func (c *Client) TestResponseStringInt64Nullable(ctx context.Context, request string) (res NilStringInt64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt64NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int64_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt64NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64NullableArray invokes test_response_string_int64_nullable_array operation.
//
// POST /test_response_string_int64_nullable_array
func (c *Client) TestResponseStringInt64NullableArray(ctx context.Context, request string) (res []int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt64NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int64_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt64NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64NullableArrayArray invokes test_response_string_int64_nullable_array_array operation.
//
// POST /test_response_string_int64_nullable_array_array
func (c *Client) TestResponseStringInt64NullableArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringInt64NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_int64_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringInt64NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4 invokes test_response_string_ipv4 operation.
//
// POST /test_response_string_ipv4
func (c *Client) TestResponseStringIpv4(ctx context.Context, request string) (res netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv4RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv4"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv4Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4Array invokes test_response_string_ipv4_array operation.
//
// POST /test_response_string_ipv4_array
func (c *Client) TestResponseStringIpv4Array(ctx context.Context, request string) (res []netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv4ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv4_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv4ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4ArrayArray invokes test_response_string_ipv4_array_array operation.
//
// POST /test_response_string_ipv4_array_array
func (c *Client) TestResponseStringIpv4ArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv4ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv4_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv4ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4Nullable invokes test_response_string_ipv4_nullable operation.
//
// POST /test_response_string_ipv4_nullable
func (c *Client) TestResponseStringIpv4Nullable(ctx context.Context, request string) (res NilIPv4, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv4NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv4_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv4NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4NullableArray invokes test_response_string_ipv4_nullable_array operation.
//
// POST /test_response_string_ipv4_nullable_array
func (c *Client) TestResponseStringIpv4NullableArray(ctx context.Context, request string) (res []netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv4NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv4_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv4NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4NullableArrayArray invokes test_response_string_ipv4_nullable_array_array operation.
//
// POST /test_response_string_ipv4_nullable_array_array
func (c *Client) TestResponseStringIpv4NullableArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv4NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv4_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv4NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6 invokes test_response_string_ipv6 operation.
//
// POST /test_response_string_ipv6
func (c *Client) TestResponseStringIpv6(ctx context.Context, request string) (res netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv6RequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv6"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv6Response(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6Array invokes test_response_string_ipv6_array operation.
//
// POST /test_response_string_ipv6_array
func (c *Client) TestResponseStringIpv6Array(ctx context.Context, request string) (res []netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv6ArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv6_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv6ArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6ArrayArray invokes test_response_string_ipv6_array_array operation.
//
// POST /test_response_string_ipv6_array_array
func (c *Client) TestResponseStringIpv6ArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv6ArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv6_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv6ArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6Nullable invokes test_response_string_ipv6_nullable operation.
//
// POST /test_response_string_ipv6_nullable
func (c *Client) TestResponseStringIpv6Nullable(ctx context.Context, request string) (res NilIPv6, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv6NullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv6_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv6NullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6NullableArray invokes test_response_string_ipv6_nullable_array operation.
//
// POST /test_response_string_ipv6_nullable_array
func (c *Client) TestResponseStringIpv6NullableArray(ctx context.Context, request string) (res []netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv6NullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv6_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv6NullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6NullableArrayArray invokes test_response_string_ipv6_nullable_array_array operation.
//
// POST /test_response_string_ipv6_nullable_array_array
func (c *Client) TestResponseStringIpv6NullableArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringIpv6NullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_ipv6_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringIpv6NullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringNullable invokes test_response_string_nullable operation.
//
// POST /test_response_string_nullable
func (c *Client) TestResponseStringNullable(ctx context.Context, request string) (res NilString, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringNullableArray invokes test_response_string_nullable_array operation.
//
// POST /test_response_string_nullable_array
func (c *Client) TestResponseStringNullableArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringNullableArrayArray invokes test_response_string_nullable_array_array operation.
//
// POST /test_response_string_nullable_array_array
func (c *Client) TestResponseStringNullableArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPassword invokes test_response_string_password operation.
//
// POST /test_response_string_password
func (c *Client) TestResponseStringPassword(ctx context.Context, request string) (res string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPassword",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringPasswordRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_password"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringPasswordResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordArray invokes test_response_string_password_array operation.
//
// POST /test_response_string_password_array
func (c *Client) TestResponseStringPasswordArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringPasswordArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_password_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringPasswordArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordArrayArray invokes test_response_string_password_array_array operation.
//
// POST /test_response_string_password_array_array
func (c *Client) TestResponseStringPasswordArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringPasswordArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_password_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringPasswordArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordNullable invokes test_response_string_password_nullable operation.
//
// POST /test_response_string_password_nullable
func (c *Client) TestResponseStringPasswordNullable(ctx context.Context, request string) (res NilString, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringPasswordNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_password_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringPasswordNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordNullableArray invokes test_response_string_password_nullable_array operation.
//
// POST /test_response_string_password_nullable_array
func (c *Client) TestResponseStringPasswordNullableArray(ctx context.Context, request string) (res []string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringPasswordNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_password_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringPasswordNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordNullableArrayArray invokes test_response_string_password_nullable_array_array operation.
//
// POST /test_response_string_password_nullable_array_array
func (c *Client) TestResponseStringPasswordNullableArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringPasswordNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_password_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringPasswordNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTime invokes test_response_string_time operation.
//
// POST /test_response_string_time
func (c *Client) TestResponseStringTime(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringTimeRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_time"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringTimeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeArray invokes test_response_string_time_array operation.
//
// POST /test_response_string_time_array
func (c *Client) TestResponseStringTimeArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringTimeArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_time_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringTimeArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeArrayArray invokes test_response_string_time_array_array operation.
//
// POST /test_response_string_time_array_array
func (c *Client) TestResponseStringTimeArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringTimeArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_time_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringTimeArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeNullable invokes test_response_string_time_nullable operation.
//
// POST /test_response_string_time_nullable
func (c *Client) TestResponseStringTimeNullable(ctx context.Context, request string) (res NilTime, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringTimeNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_time_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringTimeNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeNullableArray invokes test_response_string_time_nullable_array operation.
//
// POST /test_response_string_time_nullable_array
func (c *Client) TestResponseStringTimeNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringTimeNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_time_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringTimeNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeNullableArrayArray invokes test_response_string_time_nullable_array_array operation.
//
// POST /test_response_string_time_nullable_array_array
func (c *Client) TestResponseStringTimeNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringTimeNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_time_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringTimeNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURI invokes test_response_string_uri operation.
//
// POST /test_response_string_uri
func (c *Client) TestResponseStringURI(ctx context.Context, request string) (res url.URL, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURI",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringURIRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uri"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringURIResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURIArray invokes test_response_string_uri_array operation.
//
// POST /test_response_string_uri_array
func (c *Client) TestResponseStringURIArray(ctx context.Context, request string) (res []url.URL, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURIArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringURIArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uri_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringURIArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURIArrayArray invokes test_response_string_uri_array_array operation.
//
// POST /test_response_string_uri_array_array
func (c *Client) TestResponseStringURIArrayArray(ctx context.Context, request string) (res [][]url.URL, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringURIArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uri_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringURIArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURINullable invokes test_response_string_uri_nullable operation.
//
// POST /test_response_string_uri_nullable
func (c *Client) TestResponseStringURINullable(ctx context.Context, request string) (res NilURI, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURINullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringURINullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uri_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringURINullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURINullableArray invokes test_response_string_uri_nullable_array operation.
//
// POST /test_response_string_uri_nullable_array
func (c *Client) TestResponseStringURINullableArray(ctx context.Context, request string) (res []url.URL, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringURINullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uri_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringURINullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURINullableArrayArray invokes test_response_string_uri_nullable_array_array operation.
//
// POST /test_response_string_uri_nullable_array_array
func (c *Client) TestResponseStringURINullableArrayArray(ctx context.Context, request string) (res [][]url.URL, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringURINullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uri_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringURINullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUID invokes test_response_string_uuid operation.
//
// POST /test_response_string_uuid
func (c *Client) TestResponseStringUUID(ctx context.Context, request string) (res uuid.UUID, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUID",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUUIDRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uuid"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUUIDResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDArray invokes test_response_string_uuid_array operation.
//
// POST /test_response_string_uuid_array
func (c *Client) TestResponseStringUUIDArray(ctx context.Context, request string) (res []uuid.UUID, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUUIDArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uuid_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUUIDArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDArrayArray invokes test_response_string_uuid_array_array operation.
//
// POST /test_response_string_uuid_array_array
func (c *Client) TestResponseStringUUIDArrayArray(ctx context.Context, request string) (res [][]uuid.UUID, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUUIDArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uuid_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUUIDArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDNullable invokes test_response_string_uuid_nullable operation.
//
// POST /test_response_string_uuid_nullable
func (c *Client) TestResponseStringUUIDNullable(ctx context.Context, request string) (res NilUUID, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUUIDNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uuid_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUUIDNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDNullableArray invokes test_response_string_uuid_nullable_array operation.
//
// POST /test_response_string_uuid_nullable_array
func (c *Client) TestResponseStringUUIDNullableArray(ctx context.Context, request string) (res []uuid.UUID, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUUIDNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uuid_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUUIDNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDNullableArrayArray invokes test_response_string_uuid_nullable_array_array operation.
//
// POST /test_response_string_uuid_nullable_array_array
func (c *Client) TestResponseStringUUIDNullableArrayArray(ctx context.Context, request string) (res [][]uuid.UUID, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUUIDNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_uuid_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUUIDNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnix invokes test_response_string_unix operation.
//
// POST /test_response_string_unix
func (c *Client) TestResponseStringUnix(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnix",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixArray invokes test_response_string_unix_array operation.
//
// POST /test_response_string_unix_array
func (c *Client) TestResponseStringUnixArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixArrayArray invokes test_response_string_unix_array_array operation.
//
// POST /test_response_string_unix_array_array
func (c *Client) TestResponseStringUnixArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicro invokes test_response_string_unix-micro operation.
//
// POST /test_response_string_unix-micro
func (c *Client) TestResponseStringUnixMicro(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMicroRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-micro"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMicroResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroArray invokes test_response_string_unix-micro_array operation.
//
// POST /test_response_string_unix-micro_array
func (c *Client) TestResponseStringUnixMicroArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMicroArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-micro_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMicroArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroArrayArray invokes test_response_string_unix-micro_array_array operation.
//
// POST /test_response_string_unix-micro_array_array
func (c *Client) TestResponseStringUnixMicroArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMicroArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-micro_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMicroArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroNullable invokes test_response_string_unix-micro_nullable operation.
//
// POST /test_response_string_unix-micro_nullable
func (c *Client) TestResponseStringUnixMicroNullable(ctx context.Context, request string) (res NilUnixMicro, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMicroNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-micro_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMicroNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroNullableArray invokes test_response_string_unix-micro_nullable_array operation.
//
// POST /test_response_string_unix-micro_nullable_array
func (c *Client) TestResponseStringUnixMicroNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMicroNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-micro_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMicroNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroNullableArrayArray invokes test_response_string_unix-micro_nullable_array_array operation.
//
// POST /test_response_string_unix-micro_nullable_array_array
func (c *Client) TestResponseStringUnixMicroNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMicroNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-micro_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMicroNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilli invokes test_response_string_unix-milli operation.
//
// POST /test_response_string_unix-milli
func (c *Client) TestResponseStringUnixMilli(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMilliRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-milli"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMilliResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliArray invokes test_response_string_unix-milli_array operation.
//
// POST /test_response_string_unix-milli_array
func (c *Client) TestResponseStringUnixMilliArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMilliArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-milli_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMilliArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliArrayArray invokes test_response_string_unix-milli_array_array operation.
//
// POST /test_response_string_unix-milli_array_array
func (c *Client) TestResponseStringUnixMilliArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMilliArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-milli_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMilliArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliNullable invokes test_response_string_unix-milli_nullable operation.
//
// POST /test_response_string_unix-milli_nullable
func (c *Client) TestResponseStringUnixMilliNullable(ctx context.Context, request string) (res NilUnixMilli, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMilliNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-milli_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMilliNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliNullableArray invokes test_response_string_unix-milli_nullable_array operation.
//
// POST /test_response_string_unix-milli_nullable_array
func (c *Client) TestResponseStringUnixMilliNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMilliNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-milli_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMilliNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliNullableArrayArray invokes test_response_string_unix-milli_nullable_array_array operation.
//
// POST /test_response_string_unix-milli_nullable_array_array
func (c *Client) TestResponseStringUnixMilliNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixMilliNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-milli_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixMilliNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNano invokes test_response_string_unix-nano operation.
//
// POST /test_response_string_unix-nano
func (c *Client) TestResponseStringUnixNano(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNanoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-nano"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNanoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoArray invokes test_response_string_unix-nano_array operation.
//
// POST /test_response_string_unix-nano_array
func (c *Client) TestResponseStringUnixNanoArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNanoArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-nano_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNanoArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoArrayArray invokes test_response_string_unix-nano_array_array operation.
//
// POST /test_response_string_unix-nano_array_array
func (c *Client) TestResponseStringUnixNanoArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNanoArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-nano_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNanoArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoNullable invokes test_response_string_unix-nano_nullable operation.
//
// POST /test_response_string_unix-nano_nullable
func (c *Client) TestResponseStringUnixNanoNullable(ctx context.Context, request string) (res NilUnixNano, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNanoNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-nano_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNanoNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoNullableArray invokes test_response_string_unix-nano_nullable_array operation.
//
// POST /test_response_string_unix-nano_nullable_array
func (c *Client) TestResponseStringUnixNanoNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNanoNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-nano_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNanoNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoNullableArrayArray invokes test_response_string_unix-nano_nullable_array_array operation.
//
// POST /test_response_string_unix-nano_nullable_array_array
func (c *Client) TestResponseStringUnixNanoNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNanoNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-nano_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNanoNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNullable invokes test_response_string_unix_nullable operation.
//
// POST /test_response_string_unix_nullable
func (c *Client) TestResponseStringUnixNullable(ctx context.Context, request string) (res NilUnixSeconds, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNullableArray invokes test_response_string_unix_nullable_array operation.
//
// POST /test_response_string_unix_nullable_array
func (c *Client) TestResponseStringUnixNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNullableArrayArray invokes test_response_string_unix_nullable_array_array operation.
//
// POST /test_response_string_unix_nullable_array_array
func (c *Client) TestResponseStringUnixNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSeconds invokes test_response_string_unix-seconds operation.
//
// POST /test_response_string_unix-seconds
func (c *Client) TestResponseStringUnixSeconds(ctx context.Context, request string) (res time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixSecondsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-seconds"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixSecondsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsArray invokes test_response_string_unix-seconds_array operation.
//
// POST /test_response_string_unix-seconds_array
func (c *Client) TestResponseStringUnixSecondsArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixSecondsArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-seconds_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixSecondsArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsArrayArray invokes test_response_string_unix-seconds_array_array operation.
//
// POST /test_response_string_unix-seconds_array_array
func (c *Client) TestResponseStringUnixSecondsArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixSecondsArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-seconds_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixSecondsArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsNullable invokes test_response_string_unix-seconds_nullable operation.
//
// POST /test_response_string_unix-seconds_nullable
func (c *Client) TestResponseStringUnixSecondsNullable(ctx context.Context, request string) (res NilUnixSeconds, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixSecondsNullableRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-seconds_nullable"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixSecondsNullableResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsNullableArray invokes test_response_string_unix-seconds_nullable_array operation.
//
// POST /test_response_string_unix-seconds_nullable_array
func (c *Client) TestResponseStringUnixSecondsNullableArray(ctx context.Context, request string) (res []time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixSecondsNullableArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-seconds_nullable_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixSecondsNullableArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsNullableArrayArray invokes test_response_string_unix-seconds_nullable_array_array operation.
//
// POST /test_response_string_unix-seconds_nullable_array_array
func (c *Client) TestResponseStringUnixSecondsNullableArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable_array_array"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     io.Reader
	)
	contentType = "application/json"
	buf, err := encodeTestResponseStringUnixSecondsNullableArrayArrayRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	defer jx.PutEncoder(buf)
	reqBody = bytes.NewReader(buf.Bytes())

	u := uri.Clone(c.serverURL)
	u.Path += "/test_response_string_unix-seconds_nullable_array_array"

	r := ht.NewRequest(ctx, "POST", u, reqBody)
	defer ht.PutRequest(r)

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeTestResponseStringUnixSecondsNullableArrayArrayResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

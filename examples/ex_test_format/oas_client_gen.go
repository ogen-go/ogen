// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/netip"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// TestQueryParameter invokes test_query_parameter operation.
	//
	// POST /test_query_parameter
	TestQueryParameter(ctx context.Context, request string, params TestQueryParameterParams) (*Error, error)
	// TestRequestAny invokes test_request_Any operation.
	//
	// POST /test_request_Any
	TestRequestAny(ctx context.Context, request jx.Raw) (*Error, error)
	// TestRequestBoolean invokes test_request_boolean operation.
	//
	// POST /test_request_boolean
	TestRequestBoolean(ctx context.Context, request OptBool) (*Error, error)
	// TestRequestBooleanArray invokes test_request_boolean_array operation.
	//
	// POST /test_request_boolean_array
	TestRequestBooleanArray(ctx context.Context, request []bool) (*Error, error)
	// TestRequestBooleanArrayArray invokes test_request_boolean_array_array operation.
	//
	// POST /test_request_boolean_array_array
	TestRequestBooleanArrayArray(ctx context.Context, request [][]bool) (*Error, error)
	// TestRequestBooleanNullable invokes test_request_boolean_nullable operation.
	//
	// POST /test_request_boolean_nullable
	TestRequestBooleanNullable(ctx context.Context, request OptNilBool) (*Error, error)
	// TestRequestBooleanNullableArray invokes test_request_boolean_nullable_array operation.
	//
	// POST /test_request_boolean_nullable_array
	TestRequestBooleanNullableArray(ctx context.Context, request []NilBool) (*Error, error)
	// TestRequestBooleanNullableArrayArray invokes test_request_boolean_nullable_array_array operation.
	//
	// POST /test_request_boolean_nullable_array_array
	TestRequestBooleanNullableArrayArray(ctx context.Context, request [][]NilBool) (*Error, error)
	// TestRequestEmptyStruct invokes test_request_EmptyStruct operation.
	//
	// POST /test_request_EmptyStruct
	TestRequestEmptyStruct(ctx context.Context, request *TestRequestEmptyStructReq) (*Error, error)
	// TestRequestFormatTest invokes test_request_FormatTest operation.
	//
	// POST /test_request_FormatTest
	TestRequestFormatTest(ctx context.Context, request OptTestRequestFormatTestReq) (*Error, error)
	// TestRequestInteger invokes test_request_integer operation.
	//
	// POST /test_request_integer
	TestRequestInteger(ctx context.Context, request OptInt) (*Error, error)
	// TestRequestIntegerArray invokes test_request_integer_array operation.
	//
	// POST /test_request_integer_array
	TestRequestIntegerArray(ctx context.Context, request []int) (*Error, error)
	// TestRequestIntegerArrayArray invokes test_request_integer_array_array operation.
	//
	// POST /test_request_integer_array_array
	TestRequestIntegerArrayArray(ctx context.Context, request [][]int) (*Error, error)
	// TestRequestIntegerInt16 invokes test_request_integer_int16 operation.
	//
	// POST /test_request_integer_int16
	TestRequestIntegerInt16(ctx context.Context, request OptInt16) (*Error, error)
	// TestRequestIntegerInt16Array invokes test_request_integer_int16_array operation.
	//
	// POST /test_request_integer_int16_array
	TestRequestIntegerInt16Array(ctx context.Context, request []int16) (*Error, error)
	// TestRequestIntegerInt16ArrayArray invokes test_request_integer_int16_array_array operation.
	//
	// POST /test_request_integer_int16_array_array
	TestRequestIntegerInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error)
	// TestRequestIntegerInt16Nullable invokes test_request_integer_int16_nullable operation.
	//
	// POST /test_request_integer_int16_nullable
	TestRequestIntegerInt16Nullable(ctx context.Context, request OptNilInt16) (*Error, error)
	// TestRequestIntegerInt16NullableArray invokes test_request_integer_int16_nullable_array operation.
	//
	// POST /test_request_integer_int16_nullable_array
	TestRequestIntegerInt16NullableArray(ctx context.Context, request []NilInt16) (*Error, error)
	// TestRequestIntegerInt16NullableArrayArray invokes test_request_integer_int16_nullable_array_array operation.
	//
	// POST /test_request_integer_int16_nullable_array_array
	TestRequestIntegerInt16NullableArrayArray(ctx context.Context, request [][]NilInt16) (*Error, error)
	// TestRequestIntegerInt32 invokes test_request_integer_int32 operation.
	//
	// POST /test_request_integer_int32
	TestRequestIntegerInt32(ctx context.Context, request OptInt32) (*Error, error)
	// TestRequestIntegerInt32Array invokes test_request_integer_int32_array operation.
	//
	// POST /test_request_integer_int32_array
	TestRequestIntegerInt32Array(ctx context.Context, request []int32) (*Error, error)
	// TestRequestIntegerInt32ArrayArray invokes test_request_integer_int32_array_array operation.
	//
	// POST /test_request_integer_int32_array_array
	TestRequestIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error)
	// TestRequestIntegerInt32Nullable invokes test_request_integer_int32_nullable operation.
	//
	// POST /test_request_integer_int32_nullable
	TestRequestIntegerInt32Nullable(ctx context.Context, request OptNilInt32) (*Error, error)
	// TestRequestIntegerInt32NullableArray invokes test_request_integer_int32_nullable_array operation.
	//
	// POST /test_request_integer_int32_nullable_array
	TestRequestIntegerInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error)
	// TestRequestIntegerInt32NullableArrayArray invokes test_request_integer_int32_nullable_array_array operation.
	//
	// POST /test_request_integer_int32_nullable_array_array
	TestRequestIntegerInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error)
	// TestRequestIntegerInt64 invokes test_request_integer_int64 operation.
	//
	// POST /test_request_integer_int64
	TestRequestIntegerInt64(ctx context.Context, request OptInt64) (*Error, error)
	// TestRequestIntegerInt64Array invokes test_request_integer_int64_array operation.
	//
	// POST /test_request_integer_int64_array
	TestRequestIntegerInt64Array(ctx context.Context, request []int64) (*Error, error)
	// TestRequestIntegerInt64ArrayArray invokes test_request_integer_int64_array_array operation.
	//
	// POST /test_request_integer_int64_array_array
	TestRequestIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error)
	// TestRequestIntegerInt64Nullable invokes test_request_integer_int64_nullable operation.
	//
	// POST /test_request_integer_int64_nullable
	TestRequestIntegerInt64Nullable(ctx context.Context, request OptNilInt64) (*Error, error)
	// TestRequestIntegerInt64NullableArray invokes test_request_integer_int64_nullable_array operation.
	//
	// POST /test_request_integer_int64_nullable_array
	TestRequestIntegerInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error)
	// TestRequestIntegerInt64NullableArrayArray invokes test_request_integer_int64_nullable_array_array operation.
	//
	// POST /test_request_integer_int64_nullable_array_array
	TestRequestIntegerInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error)
	// TestRequestIntegerInt8 invokes test_request_integer_int8 operation.
	//
	// POST /test_request_integer_int8
	TestRequestIntegerInt8(ctx context.Context, request OptInt8) (*Error, error)
	// TestRequestIntegerInt8Array invokes test_request_integer_int8_array operation.
	//
	// POST /test_request_integer_int8_array
	TestRequestIntegerInt8Array(ctx context.Context, request []int8) (*Error, error)
	// TestRequestIntegerInt8ArrayArray invokes test_request_integer_int8_array_array operation.
	//
	// POST /test_request_integer_int8_array_array
	TestRequestIntegerInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error)
	// TestRequestIntegerInt8Nullable invokes test_request_integer_int8_nullable operation.
	//
	// POST /test_request_integer_int8_nullable
	TestRequestIntegerInt8Nullable(ctx context.Context, request OptNilInt8) (*Error, error)
	// TestRequestIntegerInt8NullableArray invokes test_request_integer_int8_nullable_array operation.
	//
	// POST /test_request_integer_int8_nullable_array
	TestRequestIntegerInt8NullableArray(ctx context.Context, request []NilInt8) (*Error, error)
	// TestRequestIntegerInt8NullableArrayArray invokes test_request_integer_int8_nullable_array_array operation.
	//
	// POST /test_request_integer_int8_nullable_array_array
	TestRequestIntegerInt8NullableArrayArray(ctx context.Context, request [][]NilInt8) (*Error, error)
	// TestRequestIntegerNullable invokes test_request_integer_nullable operation.
	//
	// POST /test_request_integer_nullable
	TestRequestIntegerNullable(ctx context.Context, request OptNilInt) (*Error, error)
	// TestRequestIntegerNullableArray invokes test_request_integer_nullable_array operation.
	//
	// POST /test_request_integer_nullable_array
	TestRequestIntegerNullableArray(ctx context.Context, request []NilInt) (*Error, error)
	// TestRequestIntegerNullableArrayArray invokes test_request_integer_nullable_array_array operation.
	//
	// POST /test_request_integer_nullable_array_array
	TestRequestIntegerNullableArrayArray(ctx context.Context, request [][]NilInt) (*Error, error)
	// TestRequestIntegerUint invokes test_request_integer_uint operation.
	//
	// POST /test_request_integer_uint
	TestRequestIntegerUint(ctx context.Context, request OptUint) (*Error, error)
	// TestRequestIntegerUint16 invokes test_request_integer_uint16 operation.
	//
	// POST /test_request_integer_uint16
	TestRequestIntegerUint16(ctx context.Context, request OptUint16) (*Error, error)
	// TestRequestIntegerUint16Array invokes test_request_integer_uint16_array operation.
	//
	// POST /test_request_integer_uint16_array
	TestRequestIntegerUint16Array(ctx context.Context, request []uint16) (*Error, error)
	// TestRequestIntegerUint16ArrayArray invokes test_request_integer_uint16_array_array operation.
	//
	// POST /test_request_integer_uint16_array_array
	TestRequestIntegerUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error)
	// TestRequestIntegerUint16Nullable invokes test_request_integer_uint16_nullable operation.
	//
	// POST /test_request_integer_uint16_nullable
	TestRequestIntegerUint16Nullable(ctx context.Context, request OptNilUint16) (*Error, error)
	// TestRequestIntegerUint16NullableArray invokes test_request_integer_uint16_nullable_array operation.
	//
	// POST /test_request_integer_uint16_nullable_array
	TestRequestIntegerUint16NullableArray(ctx context.Context, request []NilUint16) (*Error, error)
	// TestRequestIntegerUint16NullableArrayArray invokes test_request_integer_uint16_nullable_array_array operation.
	//
	// POST /test_request_integer_uint16_nullable_array_array
	TestRequestIntegerUint16NullableArrayArray(ctx context.Context, request [][]NilUint16) (*Error, error)
	// TestRequestIntegerUint32 invokes test_request_integer_uint32 operation.
	//
	// POST /test_request_integer_uint32
	TestRequestIntegerUint32(ctx context.Context, request OptUint32) (*Error, error)
	// TestRequestIntegerUint32Array invokes test_request_integer_uint32_array operation.
	//
	// POST /test_request_integer_uint32_array
	TestRequestIntegerUint32Array(ctx context.Context, request []uint32) (*Error, error)
	// TestRequestIntegerUint32ArrayArray invokes test_request_integer_uint32_array_array operation.
	//
	// POST /test_request_integer_uint32_array_array
	TestRequestIntegerUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error)
	// TestRequestIntegerUint32Nullable invokes test_request_integer_uint32_nullable operation.
	//
	// POST /test_request_integer_uint32_nullable
	TestRequestIntegerUint32Nullable(ctx context.Context, request OptNilUint32) (*Error, error)
	// TestRequestIntegerUint32NullableArray invokes test_request_integer_uint32_nullable_array operation.
	//
	// POST /test_request_integer_uint32_nullable_array
	TestRequestIntegerUint32NullableArray(ctx context.Context, request []NilUint32) (*Error, error)
	// TestRequestIntegerUint32NullableArrayArray invokes test_request_integer_uint32_nullable_array_array operation.
	//
	// POST /test_request_integer_uint32_nullable_array_array
	TestRequestIntegerUint32NullableArrayArray(ctx context.Context, request [][]NilUint32) (*Error, error)
	// TestRequestIntegerUint64 invokes test_request_integer_uint64 operation.
	//
	// POST /test_request_integer_uint64
	TestRequestIntegerUint64(ctx context.Context, request OptUint64) (*Error, error)
	// TestRequestIntegerUint64Array invokes test_request_integer_uint64_array operation.
	//
	// POST /test_request_integer_uint64_array
	TestRequestIntegerUint64Array(ctx context.Context, request []uint64) (*Error, error)
	// TestRequestIntegerUint64ArrayArray invokes test_request_integer_uint64_array_array operation.
	//
	// POST /test_request_integer_uint64_array_array
	TestRequestIntegerUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error)
	// TestRequestIntegerUint64Nullable invokes test_request_integer_uint64_nullable operation.
	//
	// POST /test_request_integer_uint64_nullable
	TestRequestIntegerUint64Nullable(ctx context.Context, request OptNilUint64) (*Error, error)
	// TestRequestIntegerUint64NullableArray invokes test_request_integer_uint64_nullable_array operation.
	//
	// POST /test_request_integer_uint64_nullable_array
	TestRequestIntegerUint64NullableArray(ctx context.Context, request []NilUint64) (*Error, error)
	// TestRequestIntegerUint64NullableArrayArray invokes test_request_integer_uint64_nullable_array_array operation.
	//
	// POST /test_request_integer_uint64_nullable_array_array
	TestRequestIntegerUint64NullableArrayArray(ctx context.Context, request [][]NilUint64) (*Error, error)
	// TestRequestIntegerUint8 invokes test_request_integer_uint8 operation.
	//
	// POST /test_request_integer_uint8
	TestRequestIntegerUint8(ctx context.Context, request OptUint8) (*Error, error)
	// TestRequestIntegerUint8Array invokes test_request_integer_uint8_array operation.
	//
	// POST /test_request_integer_uint8_array
	TestRequestIntegerUint8Array(ctx context.Context, request []uint8) (*Error, error)
	// TestRequestIntegerUint8ArrayArray invokes test_request_integer_uint8_array_array operation.
	//
	// POST /test_request_integer_uint8_array_array
	TestRequestIntegerUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error)
	// TestRequestIntegerUint8Nullable invokes test_request_integer_uint8_nullable operation.
	//
	// POST /test_request_integer_uint8_nullable
	TestRequestIntegerUint8Nullable(ctx context.Context, request OptNilUint8) (*Error, error)
	// TestRequestIntegerUint8NullableArray invokes test_request_integer_uint8_nullable_array operation.
	//
	// POST /test_request_integer_uint8_nullable_array
	TestRequestIntegerUint8NullableArray(ctx context.Context, request []NilUint8) (*Error, error)
	// TestRequestIntegerUint8NullableArrayArray invokes test_request_integer_uint8_nullable_array_array operation.
	//
	// POST /test_request_integer_uint8_nullable_array_array
	TestRequestIntegerUint8NullableArrayArray(ctx context.Context, request [][]NilUint8) (*Error, error)
	// TestRequestIntegerUintArray invokes test_request_integer_uint_array operation.
	//
	// POST /test_request_integer_uint_array
	TestRequestIntegerUintArray(ctx context.Context, request []uint) (*Error, error)
	// TestRequestIntegerUintArrayArray invokes test_request_integer_uint_array_array operation.
	//
	// POST /test_request_integer_uint_array_array
	TestRequestIntegerUintArrayArray(ctx context.Context, request [][]uint) (*Error, error)
	// TestRequestIntegerUintNullable invokes test_request_integer_uint_nullable operation.
	//
	// POST /test_request_integer_uint_nullable
	TestRequestIntegerUintNullable(ctx context.Context, request OptNilUint) (*Error, error)
	// TestRequestIntegerUintNullableArray invokes test_request_integer_uint_nullable_array operation.
	//
	// POST /test_request_integer_uint_nullable_array
	TestRequestIntegerUintNullableArray(ctx context.Context, request []NilUint) (*Error, error)
	// TestRequestIntegerUintNullableArrayArray invokes test_request_integer_uint_nullable_array_array operation.
	//
	// POST /test_request_integer_uint_nullable_array_array
	TestRequestIntegerUintNullableArrayArray(ctx context.Context, request [][]NilUint) (*Error, error)
	// TestRequestIntegerUnix invokes test_request_integer_unix operation.
	//
	// POST /test_request_integer_unix
	TestRequestIntegerUnix(ctx context.Context, request OptUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixArray invokes test_request_integer_unix_array operation.
	//
	// POST /test_request_integer_unix_array
	TestRequestIntegerUnixArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestIntegerUnixArrayArray invokes test_request_integer_unix_array_array operation.
	//
	// POST /test_request_integer_unix_array_array
	TestRequestIntegerUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestIntegerUnixMicro invokes test_request_integer_unix-micro operation.
	//
	// POST /test_request_integer_unix-micro
	TestRequestIntegerUnixMicro(ctx context.Context, request OptUnixMicro) (*Error, error)
	// TestRequestIntegerUnixMicroArray invokes test_request_integer_unix-micro_array operation.
	//
	// POST /test_request_integer_unix-micro_array
	TestRequestIntegerUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestIntegerUnixMicroArrayArray invokes test_request_integer_unix-micro_array_array operation.
	//
	// POST /test_request_integer_unix-micro_array_array
	TestRequestIntegerUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestIntegerUnixMicroNullable invokes test_request_integer_unix-micro_nullable operation.
	//
	// POST /test_request_integer_unix-micro_nullable
	TestRequestIntegerUnixMicroNullable(ctx context.Context, request OptNilUnixMicro) (*Error, error)
	// TestRequestIntegerUnixMicroNullableArray invokes test_request_integer_unix-micro_nullable_array operation.
	//
	// POST /test_request_integer_unix-micro_nullable_array
	TestRequestIntegerUnixMicroNullableArray(ctx context.Context, request []NilUnixMicro) (*Error, error)
	// TestRequestIntegerUnixMicroNullableArrayArray invokes test_request_integer_unix-micro_nullable_array_array operation.
	//
	// POST /test_request_integer_unix-micro_nullable_array_array
	TestRequestIntegerUnixMicroNullableArrayArray(ctx context.Context, request [][]NilUnixMicro) (*Error, error)
	// TestRequestIntegerUnixMilli invokes test_request_integer_unix-milli operation.
	//
	// POST /test_request_integer_unix-milli
	TestRequestIntegerUnixMilli(ctx context.Context, request OptUnixMilli) (*Error, error)
	// TestRequestIntegerUnixMilliArray invokes test_request_integer_unix-milli_array operation.
	//
	// POST /test_request_integer_unix-milli_array
	TestRequestIntegerUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestIntegerUnixMilliArrayArray invokes test_request_integer_unix-milli_array_array operation.
	//
	// POST /test_request_integer_unix-milli_array_array
	TestRequestIntegerUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestIntegerUnixMilliNullable invokes test_request_integer_unix-milli_nullable operation.
	//
	// POST /test_request_integer_unix-milli_nullable
	TestRequestIntegerUnixMilliNullable(ctx context.Context, request OptNilUnixMilli) (*Error, error)
	// TestRequestIntegerUnixMilliNullableArray invokes test_request_integer_unix-milli_nullable_array operation.
	//
	// POST /test_request_integer_unix-milli_nullable_array
	TestRequestIntegerUnixMilliNullableArray(ctx context.Context, request []NilUnixMilli) (*Error, error)
	// TestRequestIntegerUnixMilliNullableArrayArray invokes test_request_integer_unix-milli_nullable_array_array operation.
	//
	// POST /test_request_integer_unix-milli_nullable_array_array
	TestRequestIntegerUnixMilliNullableArrayArray(ctx context.Context, request [][]NilUnixMilli) (*Error, error)
	// TestRequestIntegerUnixNano invokes test_request_integer_unix-nano operation.
	//
	// POST /test_request_integer_unix-nano
	TestRequestIntegerUnixNano(ctx context.Context, request OptUnixNano) (*Error, error)
	// TestRequestIntegerUnixNanoArray invokes test_request_integer_unix-nano_array operation.
	//
	// POST /test_request_integer_unix-nano_array
	TestRequestIntegerUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestIntegerUnixNanoArrayArray invokes test_request_integer_unix-nano_array_array operation.
	//
	// POST /test_request_integer_unix-nano_array_array
	TestRequestIntegerUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestIntegerUnixNanoNullable invokes test_request_integer_unix-nano_nullable operation.
	//
	// POST /test_request_integer_unix-nano_nullable
	TestRequestIntegerUnixNanoNullable(ctx context.Context, request OptNilUnixNano) (*Error, error)
	// TestRequestIntegerUnixNanoNullableArray invokes test_request_integer_unix-nano_nullable_array operation.
	//
	// POST /test_request_integer_unix-nano_nullable_array
	TestRequestIntegerUnixNanoNullableArray(ctx context.Context, request []NilUnixNano) (*Error, error)
	// TestRequestIntegerUnixNanoNullableArrayArray invokes test_request_integer_unix-nano_nullable_array_array operation.
	//
	// POST /test_request_integer_unix-nano_nullable_array_array
	TestRequestIntegerUnixNanoNullableArrayArray(ctx context.Context, request [][]NilUnixNano) (*Error, error)
	// TestRequestIntegerUnixNullable invokes test_request_integer_unix_nullable operation.
	//
	// POST /test_request_integer_unix_nullable
	TestRequestIntegerUnixNullable(ctx context.Context, request OptNilUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixNullableArray invokes test_request_integer_unix_nullable_array operation.
	//
	// POST /test_request_integer_unix_nullable_array
	TestRequestIntegerUnixNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixNullableArrayArray invokes test_request_integer_unix_nullable_array_array operation.
	//
	// POST /test_request_integer_unix_nullable_array_array
	TestRequestIntegerUnixNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixSeconds invokes test_request_integer_unix-seconds operation.
	//
	// POST /test_request_integer_unix-seconds
	TestRequestIntegerUnixSeconds(ctx context.Context, request OptUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixSecondsArray invokes test_request_integer_unix-seconds_array operation.
	//
	// POST /test_request_integer_unix-seconds_array
	TestRequestIntegerUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestIntegerUnixSecondsArrayArray invokes test_request_integer_unix-seconds_array_array operation.
	//
	// POST /test_request_integer_unix-seconds_array_array
	TestRequestIntegerUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestIntegerUnixSecondsNullable invokes test_request_integer_unix-seconds_nullable operation.
	//
	// POST /test_request_integer_unix-seconds_nullable
	TestRequestIntegerUnixSecondsNullable(ctx context.Context, request OptNilUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixSecondsNullableArray invokes test_request_integer_unix-seconds_nullable_array operation.
	//
	// POST /test_request_integer_unix-seconds_nullable_array
	TestRequestIntegerUnixSecondsNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error)
	// TestRequestIntegerUnixSecondsNullableArrayArray invokes test_request_integer_unix-seconds_nullable_array_array operation.
	//
	// POST /test_request_integer_unix-seconds_nullable_array_array
	TestRequestIntegerUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error)
	// TestRequestNull invokes test_request_null operation.
	//
	// POST /test_request_null
	TestRequestNull(ctx context.Context, request OptNull) (*Error, error)
	// TestRequestNullArray invokes test_request_null_array operation.
	//
	// POST /test_request_null_array
	TestRequestNullArray(ctx context.Context, request []struct{}) (*Error, error)
	// TestRequestNullArrayArray invokes test_request_null_array_array operation.
	//
	// POST /test_request_null_array_array
	TestRequestNullArrayArray(ctx context.Context, request [][]struct{}) (*Error, error)
	// TestRequestNullNullable invokes test_request_null_nullable operation.
	//
	// POST /test_request_null_nullable
	TestRequestNullNullable(ctx context.Context, request OptNull) (*Error, error)
	// TestRequestNullNullableArray invokes test_request_null_nullable_array operation.
	//
	// POST /test_request_null_nullable_array
	TestRequestNullNullableArray(ctx context.Context, request []struct{}) (*Error, error)
	// TestRequestNullNullableArrayArray invokes test_request_null_nullable_array_array operation.
	//
	// POST /test_request_null_nullable_array_array
	TestRequestNullNullableArrayArray(ctx context.Context, request [][]struct{}) (*Error, error)
	// TestRequestNumber invokes test_request_number operation.
	//
	// POST /test_request_number
	TestRequestNumber(ctx context.Context, request OptFloat64) (*Error, error)
	// TestRequestNumberArray invokes test_request_number_array operation.
	//
	// POST /test_request_number_array
	TestRequestNumberArray(ctx context.Context, request []float64) (*Error, error)
	// TestRequestNumberArrayArray invokes test_request_number_array_array operation.
	//
	// POST /test_request_number_array_array
	TestRequestNumberArrayArray(ctx context.Context, request [][]float64) (*Error, error)
	// TestRequestNumberDouble invokes test_request_number_double operation.
	//
	// POST /test_request_number_double
	TestRequestNumberDouble(ctx context.Context, request OptFloat64) (*Error, error)
	// TestRequestNumberDoubleArray invokes test_request_number_double_array operation.
	//
	// POST /test_request_number_double_array
	TestRequestNumberDoubleArray(ctx context.Context, request []float64) (*Error, error)
	// TestRequestNumberDoubleArrayArray invokes test_request_number_double_array_array operation.
	//
	// POST /test_request_number_double_array_array
	TestRequestNumberDoubleArrayArray(ctx context.Context, request [][]float64) (*Error, error)
	// TestRequestNumberDoubleNullable invokes test_request_number_double_nullable operation.
	//
	// POST /test_request_number_double_nullable
	TestRequestNumberDoubleNullable(ctx context.Context, request OptNilFloat64) (*Error, error)
	// TestRequestNumberDoubleNullableArray invokes test_request_number_double_nullable_array operation.
	//
	// POST /test_request_number_double_nullable_array
	TestRequestNumberDoubleNullableArray(ctx context.Context, request []NilFloat64) (*Error, error)
	// TestRequestNumberDoubleNullableArrayArray invokes test_request_number_double_nullable_array_array operation.
	//
	// POST /test_request_number_double_nullable_array_array
	TestRequestNumberDoubleNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error)
	// TestRequestNumberFloat invokes test_request_number_float operation.
	//
	// POST /test_request_number_float
	TestRequestNumberFloat(ctx context.Context, request OptFloat32) (*Error, error)
	// TestRequestNumberFloatArray invokes test_request_number_float_array operation.
	//
	// POST /test_request_number_float_array
	TestRequestNumberFloatArray(ctx context.Context, request []float32) (*Error, error)
	// TestRequestNumberFloatArrayArray invokes test_request_number_float_array_array operation.
	//
	// POST /test_request_number_float_array_array
	TestRequestNumberFloatArrayArray(ctx context.Context, request [][]float32) (*Error, error)
	// TestRequestNumberFloatNullable invokes test_request_number_float_nullable operation.
	//
	// POST /test_request_number_float_nullable
	TestRequestNumberFloatNullable(ctx context.Context, request OptNilFloat32) (*Error, error)
	// TestRequestNumberFloatNullableArray invokes test_request_number_float_nullable_array operation.
	//
	// POST /test_request_number_float_nullable_array
	TestRequestNumberFloatNullableArray(ctx context.Context, request []NilFloat32) (*Error, error)
	// TestRequestNumberFloatNullableArrayArray invokes test_request_number_float_nullable_array_array operation.
	//
	// POST /test_request_number_float_nullable_array_array
	TestRequestNumberFloatNullableArrayArray(ctx context.Context, request [][]NilFloat32) (*Error, error)
	// TestRequestNumberInt32 invokes test_request_number_int32 operation.
	//
	// POST /test_request_number_int32
	TestRequestNumberInt32(ctx context.Context, request OptInt32) (*Error, error)
	// TestRequestNumberInt32Array invokes test_request_number_int32_array operation.
	//
	// POST /test_request_number_int32_array
	TestRequestNumberInt32Array(ctx context.Context, request []int32) (*Error, error)
	// TestRequestNumberInt32ArrayArray invokes test_request_number_int32_array_array operation.
	//
	// POST /test_request_number_int32_array_array
	TestRequestNumberInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error)
	// TestRequestNumberInt32Nullable invokes test_request_number_int32_nullable operation.
	//
	// POST /test_request_number_int32_nullable
	TestRequestNumberInt32Nullable(ctx context.Context, request OptNilInt32) (*Error, error)
	// TestRequestNumberInt32NullableArray invokes test_request_number_int32_nullable_array operation.
	//
	// POST /test_request_number_int32_nullable_array
	TestRequestNumberInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error)
	// TestRequestNumberInt32NullableArrayArray invokes test_request_number_int32_nullable_array_array operation.
	//
	// POST /test_request_number_int32_nullable_array_array
	TestRequestNumberInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error)
	// TestRequestNumberInt64 invokes test_request_number_int64 operation.
	//
	// POST /test_request_number_int64
	TestRequestNumberInt64(ctx context.Context, request OptInt64) (*Error, error)
	// TestRequestNumberInt64Array invokes test_request_number_int64_array operation.
	//
	// POST /test_request_number_int64_array
	TestRequestNumberInt64Array(ctx context.Context, request []int64) (*Error, error)
	// TestRequestNumberInt64ArrayArray invokes test_request_number_int64_array_array operation.
	//
	// POST /test_request_number_int64_array_array
	TestRequestNumberInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error)
	// TestRequestNumberInt64Nullable invokes test_request_number_int64_nullable operation.
	//
	// POST /test_request_number_int64_nullable
	TestRequestNumberInt64Nullable(ctx context.Context, request OptNilInt64) (*Error, error)
	// TestRequestNumberInt64NullableArray invokes test_request_number_int64_nullable_array operation.
	//
	// POST /test_request_number_int64_nullable_array
	TestRequestNumberInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error)
	// TestRequestNumberInt64NullableArrayArray invokes test_request_number_int64_nullable_array_array operation.
	//
	// POST /test_request_number_int64_nullable_array_array
	TestRequestNumberInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error)
	// TestRequestNumberNullable invokes test_request_number_nullable operation.
	//
	// POST /test_request_number_nullable
	TestRequestNumberNullable(ctx context.Context, request OptNilFloat64) (*Error, error)
	// TestRequestNumberNullableArray invokes test_request_number_nullable_array operation.
	//
	// POST /test_request_number_nullable_array
	TestRequestNumberNullableArray(ctx context.Context, request []NilFloat64) (*Error, error)
	// TestRequestNumberNullableArrayArray invokes test_request_number_nullable_array_array operation.
	//
	// POST /test_request_number_nullable_array_array
	TestRequestNumberNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error)
	// TestRequestRequiredAny invokes test_request_required_Any operation.
	//
	// POST /test_request_required_Any
	TestRequestRequiredAny(ctx context.Context, request jx.Raw) (*Error, error)
	// TestRequestRequiredBoolean invokes test_request_required_boolean operation.
	//
	// POST /test_request_required_boolean
	TestRequestRequiredBoolean(ctx context.Context, request bool) (*Error, error)
	// TestRequestRequiredBooleanArray invokes test_request_required_boolean_array operation.
	//
	// POST /test_request_required_boolean_array
	TestRequestRequiredBooleanArray(ctx context.Context, request []bool) (*Error, error)
	// TestRequestRequiredBooleanArrayArray invokes test_request_required_boolean_array_array operation.
	//
	// POST /test_request_required_boolean_array_array
	TestRequestRequiredBooleanArrayArray(ctx context.Context, request [][]bool) (*Error, error)
	// TestRequestRequiredBooleanNullable invokes test_request_required_boolean_nullable operation.
	//
	// POST /test_request_required_boolean_nullable
	TestRequestRequiredBooleanNullable(ctx context.Context, request NilBool) (*Error, error)
	// TestRequestRequiredBooleanNullableArray invokes test_request_required_boolean_nullable_array operation.
	//
	// POST /test_request_required_boolean_nullable_array
	TestRequestRequiredBooleanNullableArray(ctx context.Context, request []NilBool) (*Error, error)
	// TestRequestRequiredBooleanNullableArrayArray invokes test_request_required_boolean_nullable_array_array operation.
	//
	// POST /test_request_required_boolean_nullable_array_array
	TestRequestRequiredBooleanNullableArrayArray(ctx context.Context, request [][]NilBool) (*Error, error)
	// TestRequestRequiredEmptyStruct invokes test_request_required_EmptyStruct operation.
	//
	// POST /test_request_required_EmptyStruct
	TestRequestRequiredEmptyStruct(ctx context.Context, request *TestRequestRequiredEmptyStructReq) (*Error, error)
	// TestRequestRequiredFormatTest invokes test_request_required_FormatTest operation.
	//
	// POST /test_request_required_FormatTest
	TestRequestRequiredFormatTest(ctx context.Context, request *TestRequestRequiredFormatTestReq) (*Error, error)
	// TestRequestRequiredInteger invokes test_request_required_integer operation.
	//
	// POST /test_request_required_integer
	TestRequestRequiredInteger(ctx context.Context, request int) (*Error, error)
	// TestRequestRequiredIntegerArray invokes test_request_required_integer_array operation.
	//
	// POST /test_request_required_integer_array
	TestRequestRequiredIntegerArray(ctx context.Context, request []int) (*Error, error)
	// TestRequestRequiredIntegerArrayArray invokes test_request_required_integer_array_array operation.
	//
	// POST /test_request_required_integer_array_array
	TestRequestRequiredIntegerArrayArray(ctx context.Context, request [][]int) (*Error, error)
	// TestRequestRequiredIntegerInt16 invokes test_request_required_integer_int16 operation.
	//
	// POST /test_request_required_integer_int16
	TestRequestRequiredIntegerInt16(ctx context.Context, request int16) (*Error, error)
	// TestRequestRequiredIntegerInt16Array invokes test_request_required_integer_int16_array operation.
	//
	// POST /test_request_required_integer_int16_array
	TestRequestRequiredIntegerInt16Array(ctx context.Context, request []int16) (*Error, error)
	// TestRequestRequiredIntegerInt16ArrayArray invokes test_request_required_integer_int16_array_array operation.
	//
	// POST /test_request_required_integer_int16_array_array
	TestRequestRequiredIntegerInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error)
	// TestRequestRequiredIntegerInt16Nullable invokes test_request_required_integer_int16_nullable operation.
	//
	// POST /test_request_required_integer_int16_nullable
	TestRequestRequiredIntegerInt16Nullable(ctx context.Context, request NilInt16) (*Error, error)
	// TestRequestRequiredIntegerInt16NullableArray invokes test_request_required_integer_int16_nullable_array operation.
	//
	// POST /test_request_required_integer_int16_nullable_array
	TestRequestRequiredIntegerInt16NullableArray(ctx context.Context, request []NilInt16) (*Error, error)
	// TestRequestRequiredIntegerInt16NullableArrayArray invokes test_request_required_integer_int16_nullable_array_array operation.
	//
	// POST /test_request_required_integer_int16_nullable_array_array
	TestRequestRequiredIntegerInt16NullableArrayArray(ctx context.Context, request [][]NilInt16) (*Error, error)
	// TestRequestRequiredIntegerInt32 invokes test_request_required_integer_int32 operation.
	//
	// POST /test_request_required_integer_int32
	TestRequestRequiredIntegerInt32(ctx context.Context, request int32) (*Error, error)
	// TestRequestRequiredIntegerInt32Array invokes test_request_required_integer_int32_array operation.
	//
	// POST /test_request_required_integer_int32_array
	TestRequestRequiredIntegerInt32Array(ctx context.Context, request []int32) (*Error, error)
	// TestRequestRequiredIntegerInt32ArrayArray invokes test_request_required_integer_int32_array_array operation.
	//
	// POST /test_request_required_integer_int32_array_array
	TestRequestRequiredIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error)
	// TestRequestRequiredIntegerInt32Nullable invokes test_request_required_integer_int32_nullable operation.
	//
	// POST /test_request_required_integer_int32_nullable
	TestRequestRequiredIntegerInt32Nullable(ctx context.Context, request NilInt32) (*Error, error)
	// TestRequestRequiredIntegerInt32NullableArray invokes test_request_required_integer_int32_nullable_array operation.
	//
	// POST /test_request_required_integer_int32_nullable_array
	TestRequestRequiredIntegerInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error)
	// TestRequestRequiredIntegerInt32NullableArrayArray invokes test_request_required_integer_int32_nullable_array_array operation.
	//
	// POST /test_request_required_integer_int32_nullable_array_array
	TestRequestRequiredIntegerInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error)
	// TestRequestRequiredIntegerInt64 invokes test_request_required_integer_int64 operation.
	//
	// POST /test_request_required_integer_int64
	TestRequestRequiredIntegerInt64(ctx context.Context, request int64) (*Error, error)
	// TestRequestRequiredIntegerInt64Array invokes test_request_required_integer_int64_array operation.
	//
	// POST /test_request_required_integer_int64_array
	TestRequestRequiredIntegerInt64Array(ctx context.Context, request []int64) (*Error, error)
	// TestRequestRequiredIntegerInt64ArrayArray invokes test_request_required_integer_int64_array_array operation.
	//
	// POST /test_request_required_integer_int64_array_array
	TestRequestRequiredIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error)
	// TestRequestRequiredIntegerInt64Nullable invokes test_request_required_integer_int64_nullable operation.
	//
	// POST /test_request_required_integer_int64_nullable
	TestRequestRequiredIntegerInt64Nullable(ctx context.Context, request NilInt64) (*Error, error)
	// TestRequestRequiredIntegerInt64NullableArray invokes test_request_required_integer_int64_nullable_array operation.
	//
	// POST /test_request_required_integer_int64_nullable_array
	TestRequestRequiredIntegerInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error)
	// TestRequestRequiredIntegerInt64NullableArrayArray invokes test_request_required_integer_int64_nullable_array_array operation.
	//
	// POST /test_request_required_integer_int64_nullable_array_array
	TestRequestRequiredIntegerInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error)
	// TestRequestRequiredIntegerInt8 invokes test_request_required_integer_int8 operation.
	//
	// POST /test_request_required_integer_int8
	TestRequestRequiredIntegerInt8(ctx context.Context, request int8) (*Error, error)
	// TestRequestRequiredIntegerInt8Array invokes test_request_required_integer_int8_array operation.
	//
	// POST /test_request_required_integer_int8_array
	TestRequestRequiredIntegerInt8Array(ctx context.Context, request []int8) (*Error, error)
	// TestRequestRequiredIntegerInt8ArrayArray invokes test_request_required_integer_int8_array_array operation.
	//
	// POST /test_request_required_integer_int8_array_array
	TestRequestRequiredIntegerInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error)
	// TestRequestRequiredIntegerInt8Nullable invokes test_request_required_integer_int8_nullable operation.
	//
	// POST /test_request_required_integer_int8_nullable
	TestRequestRequiredIntegerInt8Nullable(ctx context.Context, request NilInt8) (*Error, error)
	// TestRequestRequiredIntegerInt8NullableArray invokes test_request_required_integer_int8_nullable_array operation.
	//
	// POST /test_request_required_integer_int8_nullable_array
	TestRequestRequiredIntegerInt8NullableArray(ctx context.Context, request []NilInt8) (*Error, error)
	// TestRequestRequiredIntegerInt8NullableArrayArray invokes test_request_required_integer_int8_nullable_array_array operation.
	//
	// POST /test_request_required_integer_int8_nullable_array_array
	TestRequestRequiredIntegerInt8NullableArrayArray(ctx context.Context, request [][]NilInt8) (*Error, error)
	// TestRequestRequiredIntegerNullable invokes test_request_required_integer_nullable operation.
	//
	// POST /test_request_required_integer_nullable
	TestRequestRequiredIntegerNullable(ctx context.Context, request NilInt) (*Error, error)
	// TestRequestRequiredIntegerNullableArray invokes test_request_required_integer_nullable_array operation.
	//
	// POST /test_request_required_integer_nullable_array
	TestRequestRequiredIntegerNullableArray(ctx context.Context, request []NilInt) (*Error, error)
	// TestRequestRequiredIntegerNullableArrayArray invokes test_request_required_integer_nullable_array_array operation.
	//
	// POST /test_request_required_integer_nullable_array_array
	TestRequestRequiredIntegerNullableArrayArray(ctx context.Context, request [][]NilInt) (*Error, error)
	// TestRequestRequiredIntegerUint invokes test_request_required_integer_uint operation.
	//
	// POST /test_request_required_integer_uint
	TestRequestRequiredIntegerUint(ctx context.Context, request uint) (*Error, error)
	// TestRequestRequiredIntegerUint16 invokes test_request_required_integer_uint16 operation.
	//
	// POST /test_request_required_integer_uint16
	TestRequestRequiredIntegerUint16(ctx context.Context, request uint16) (*Error, error)
	// TestRequestRequiredIntegerUint16Array invokes test_request_required_integer_uint16_array operation.
	//
	// POST /test_request_required_integer_uint16_array
	TestRequestRequiredIntegerUint16Array(ctx context.Context, request []uint16) (*Error, error)
	// TestRequestRequiredIntegerUint16ArrayArray invokes test_request_required_integer_uint16_array_array operation.
	//
	// POST /test_request_required_integer_uint16_array_array
	TestRequestRequiredIntegerUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error)
	// TestRequestRequiredIntegerUint16Nullable invokes test_request_required_integer_uint16_nullable operation.
	//
	// POST /test_request_required_integer_uint16_nullable
	TestRequestRequiredIntegerUint16Nullable(ctx context.Context, request NilUint16) (*Error, error)
	// TestRequestRequiredIntegerUint16NullableArray invokes test_request_required_integer_uint16_nullable_array operation.
	//
	// POST /test_request_required_integer_uint16_nullable_array
	TestRequestRequiredIntegerUint16NullableArray(ctx context.Context, request []NilUint16) (*Error, error)
	// TestRequestRequiredIntegerUint16NullableArrayArray invokes test_request_required_integer_uint16_nullable_array_array operation.
	//
	// POST /test_request_required_integer_uint16_nullable_array_array
	TestRequestRequiredIntegerUint16NullableArrayArray(ctx context.Context, request [][]NilUint16) (*Error, error)
	// TestRequestRequiredIntegerUint32 invokes test_request_required_integer_uint32 operation.
	//
	// POST /test_request_required_integer_uint32
	TestRequestRequiredIntegerUint32(ctx context.Context, request uint32) (*Error, error)
	// TestRequestRequiredIntegerUint32Array invokes test_request_required_integer_uint32_array operation.
	//
	// POST /test_request_required_integer_uint32_array
	TestRequestRequiredIntegerUint32Array(ctx context.Context, request []uint32) (*Error, error)
	// TestRequestRequiredIntegerUint32ArrayArray invokes test_request_required_integer_uint32_array_array operation.
	//
	// POST /test_request_required_integer_uint32_array_array
	TestRequestRequiredIntegerUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error)
	// TestRequestRequiredIntegerUint32Nullable invokes test_request_required_integer_uint32_nullable operation.
	//
	// POST /test_request_required_integer_uint32_nullable
	TestRequestRequiredIntegerUint32Nullable(ctx context.Context, request NilUint32) (*Error, error)
	// TestRequestRequiredIntegerUint32NullableArray invokes test_request_required_integer_uint32_nullable_array operation.
	//
	// POST /test_request_required_integer_uint32_nullable_array
	TestRequestRequiredIntegerUint32NullableArray(ctx context.Context, request []NilUint32) (*Error, error)
	// TestRequestRequiredIntegerUint32NullableArrayArray invokes test_request_required_integer_uint32_nullable_array_array operation.
	//
	// POST /test_request_required_integer_uint32_nullable_array_array
	TestRequestRequiredIntegerUint32NullableArrayArray(ctx context.Context, request [][]NilUint32) (*Error, error)
	// TestRequestRequiredIntegerUint64 invokes test_request_required_integer_uint64 operation.
	//
	// POST /test_request_required_integer_uint64
	TestRequestRequiredIntegerUint64(ctx context.Context, request uint64) (*Error, error)
	// TestRequestRequiredIntegerUint64Array invokes test_request_required_integer_uint64_array operation.
	//
	// POST /test_request_required_integer_uint64_array
	TestRequestRequiredIntegerUint64Array(ctx context.Context, request []uint64) (*Error, error)
	// TestRequestRequiredIntegerUint64ArrayArray invokes test_request_required_integer_uint64_array_array operation.
	//
	// POST /test_request_required_integer_uint64_array_array
	TestRequestRequiredIntegerUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error)
	// TestRequestRequiredIntegerUint64Nullable invokes test_request_required_integer_uint64_nullable operation.
	//
	// POST /test_request_required_integer_uint64_nullable
	TestRequestRequiredIntegerUint64Nullable(ctx context.Context, request NilUint64) (*Error, error)
	// TestRequestRequiredIntegerUint64NullableArray invokes test_request_required_integer_uint64_nullable_array operation.
	//
	// POST /test_request_required_integer_uint64_nullable_array
	TestRequestRequiredIntegerUint64NullableArray(ctx context.Context, request []NilUint64) (*Error, error)
	// TestRequestRequiredIntegerUint64NullableArrayArray invokes test_request_required_integer_uint64_nullable_array_array operation.
	//
	// POST /test_request_required_integer_uint64_nullable_array_array
	TestRequestRequiredIntegerUint64NullableArrayArray(ctx context.Context, request [][]NilUint64) (*Error, error)
	// TestRequestRequiredIntegerUint8 invokes test_request_required_integer_uint8 operation.
	//
	// POST /test_request_required_integer_uint8
	TestRequestRequiredIntegerUint8(ctx context.Context, request uint8) (*Error, error)
	// TestRequestRequiredIntegerUint8Array invokes test_request_required_integer_uint8_array operation.
	//
	// POST /test_request_required_integer_uint8_array
	TestRequestRequiredIntegerUint8Array(ctx context.Context, request []uint8) (*Error, error)
	// TestRequestRequiredIntegerUint8ArrayArray invokes test_request_required_integer_uint8_array_array operation.
	//
	// POST /test_request_required_integer_uint8_array_array
	TestRequestRequiredIntegerUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error)
	// TestRequestRequiredIntegerUint8Nullable invokes test_request_required_integer_uint8_nullable operation.
	//
	// POST /test_request_required_integer_uint8_nullable
	TestRequestRequiredIntegerUint8Nullable(ctx context.Context, request NilUint8) (*Error, error)
	// TestRequestRequiredIntegerUint8NullableArray invokes test_request_required_integer_uint8_nullable_array operation.
	//
	// POST /test_request_required_integer_uint8_nullable_array
	TestRequestRequiredIntegerUint8NullableArray(ctx context.Context, request []NilUint8) (*Error, error)
	// TestRequestRequiredIntegerUint8NullableArrayArray invokes test_request_required_integer_uint8_nullable_array_array operation.
	//
	// POST /test_request_required_integer_uint8_nullable_array_array
	TestRequestRequiredIntegerUint8NullableArrayArray(ctx context.Context, request [][]NilUint8) (*Error, error)
	// TestRequestRequiredIntegerUintArray invokes test_request_required_integer_uint_array operation.
	//
	// POST /test_request_required_integer_uint_array
	TestRequestRequiredIntegerUintArray(ctx context.Context, request []uint) (*Error, error)
	// TestRequestRequiredIntegerUintArrayArray invokes test_request_required_integer_uint_array_array operation.
	//
	// POST /test_request_required_integer_uint_array_array
	TestRequestRequiredIntegerUintArrayArray(ctx context.Context, request [][]uint) (*Error, error)
	// TestRequestRequiredIntegerUintNullable invokes test_request_required_integer_uint_nullable operation.
	//
	// POST /test_request_required_integer_uint_nullable
	TestRequestRequiredIntegerUintNullable(ctx context.Context, request NilUint) (*Error, error)
	// TestRequestRequiredIntegerUintNullableArray invokes test_request_required_integer_uint_nullable_array operation.
	//
	// POST /test_request_required_integer_uint_nullable_array
	TestRequestRequiredIntegerUintNullableArray(ctx context.Context, request []NilUint) (*Error, error)
	// TestRequestRequiredIntegerUintNullableArrayArray invokes test_request_required_integer_uint_nullable_array_array operation.
	//
	// POST /test_request_required_integer_uint_nullable_array_array
	TestRequestRequiredIntegerUintNullableArrayArray(ctx context.Context, request [][]NilUint) (*Error, error)
	// TestRequestRequiredIntegerUnix invokes test_request_required_integer_unix operation.
	//
	// POST /test_request_required_integer_unix
	TestRequestRequiredIntegerUnix(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixArray invokes test_request_required_integer_unix_array operation.
	//
	// POST /test_request_required_integer_unix_array
	TestRequestRequiredIntegerUnixArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixArrayArray invokes test_request_required_integer_unix_array_array operation.
	//
	// POST /test_request_required_integer_unix_array_array
	TestRequestRequiredIntegerUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMicro invokes test_request_required_integer_unix-micro operation.
	//
	// POST /test_request_required_integer_unix-micro
	TestRequestRequiredIntegerUnixMicro(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMicroArray invokes test_request_required_integer_unix-micro_array operation.
	//
	// POST /test_request_required_integer_unix-micro_array
	TestRequestRequiredIntegerUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMicroArrayArray invokes test_request_required_integer_unix-micro_array_array operation.
	//
	// POST /test_request_required_integer_unix-micro_array_array
	TestRequestRequiredIntegerUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMicroNullable invokes test_request_required_integer_unix-micro_nullable operation.
	//
	// POST /test_request_required_integer_unix-micro_nullable
	TestRequestRequiredIntegerUnixMicroNullable(ctx context.Context, request NilUnixMicro) (*Error, error)
	// TestRequestRequiredIntegerUnixMicroNullableArray invokes test_request_required_integer_unix-micro_nullable_array operation.
	//
	// POST /test_request_required_integer_unix-micro_nullable_array
	TestRequestRequiredIntegerUnixMicroNullableArray(ctx context.Context, request []NilUnixMicro) (*Error, error)
	// TestRequestRequiredIntegerUnixMicroNullableArrayArray invokes test_request_required_integer_unix-micro_nullable_array_array operation.
	//
	// POST /test_request_required_integer_unix-micro_nullable_array_array
	TestRequestRequiredIntegerUnixMicroNullableArrayArray(ctx context.Context, request [][]NilUnixMicro) (*Error, error)
	// TestRequestRequiredIntegerUnixMilli invokes test_request_required_integer_unix-milli operation.
	//
	// POST /test_request_required_integer_unix-milli
	TestRequestRequiredIntegerUnixMilli(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMilliArray invokes test_request_required_integer_unix-milli_array operation.
	//
	// POST /test_request_required_integer_unix-milli_array
	TestRequestRequiredIntegerUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMilliArrayArray invokes test_request_required_integer_unix-milli_array_array operation.
	//
	// POST /test_request_required_integer_unix-milli_array_array
	TestRequestRequiredIntegerUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixMilliNullable invokes test_request_required_integer_unix-milli_nullable operation.
	//
	// POST /test_request_required_integer_unix-milli_nullable
	TestRequestRequiredIntegerUnixMilliNullable(ctx context.Context, request NilUnixMilli) (*Error, error)
	// TestRequestRequiredIntegerUnixMilliNullableArray invokes test_request_required_integer_unix-milli_nullable_array operation.
	//
	// POST /test_request_required_integer_unix-milli_nullable_array
	TestRequestRequiredIntegerUnixMilliNullableArray(ctx context.Context, request []NilUnixMilli) (*Error, error)
	// TestRequestRequiredIntegerUnixMilliNullableArrayArray invokes test_request_required_integer_unix-milli_nullable_array_array operation.
	//
	// POST /test_request_required_integer_unix-milli_nullable_array_array
	TestRequestRequiredIntegerUnixMilliNullableArrayArray(ctx context.Context, request [][]NilUnixMilli) (*Error, error)
	// TestRequestRequiredIntegerUnixNano invokes test_request_required_integer_unix-nano operation.
	//
	// POST /test_request_required_integer_unix-nano
	TestRequestRequiredIntegerUnixNano(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixNanoArray invokes test_request_required_integer_unix-nano_array operation.
	//
	// POST /test_request_required_integer_unix-nano_array
	TestRequestRequiredIntegerUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixNanoArrayArray invokes test_request_required_integer_unix-nano_array_array operation.
	//
	// POST /test_request_required_integer_unix-nano_array_array
	TestRequestRequiredIntegerUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixNanoNullable invokes test_request_required_integer_unix-nano_nullable operation.
	//
	// POST /test_request_required_integer_unix-nano_nullable
	TestRequestRequiredIntegerUnixNanoNullable(ctx context.Context, request NilUnixNano) (*Error, error)
	// TestRequestRequiredIntegerUnixNanoNullableArray invokes test_request_required_integer_unix-nano_nullable_array operation.
	//
	// POST /test_request_required_integer_unix-nano_nullable_array
	TestRequestRequiredIntegerUnixNanoNullableArray(ctx context.Context, request []NilUnixNano) (*Error, error)
	// TestRequestRequiredIntegerUnixNanoNullableArrayArray invokes test_request_required_integer_unix-nano_nullable_array_array operation.
	//
	// POST /test_request_required_integer_unix-nano_nullable_array_array
	TestRequestRequiredIntegerUnixNanoNullableArrayArray(ctx context.Context, request [][]NilUnixNano) (*Error, error)
	// TestRequestRequiredIntegerUnixNullable invokes test_request_required_integer_unix_nullable operation.
	//
	// POST /test_request_required_integer_unix_nullable
	TestRequestRequiredIntegerUnixNullable(ctx context.Context, request NilUnixSeconds) (*Error, error)
	// TestRequestRequiredIntegerUnixNullableArray invokes test_request_required_integer_unix_nullable_array operation.
	//
	// POST /test_request_required_integer_unix_nullable_array
	TestRequestRequiredIntegerUnixNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error)
	// TestRequestRequiredIntegerUnixNullableArrayArray invokes test_request_required_integer_unix_nullable_array_array operation.
	//
	// POST /test_request_required_integer_unix_nullable_array_array
	TestRequestRequiredIntegerUnixNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error)
	// TestRequestRequiredIntegerUnixSeconds invokes test_request_required_integer_unix-seconds operation.
	//
	// POST /test_request_required_integer_unix-seconds
	TestRequestRequiredIntegerUnixSeconds(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixSecondsArray invokes test_request_required_integer_unix-seconds_array operation.
	//
	// POST /test_request_required_integer_unix-seconds_array
	TestRequestRequiredIntegerUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixSecondsArrayArray invokes test_request_required_integer_unix-seconds_array_array operation.
	//
	// POST /test_request_required_integer_unix-seconds_array_array
	TestRequestRequiredIntegerUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredIntegerUnixSecondsNullable invokes test_request_required_integer_unix-seconds_nullable operation.
	//
	// POST /test_request_required_integer_unix-seconds_nullable
	TestRequestRequiredIntegerUnixSecondsNullable(ctx context.Context, request NilUnixSeconds) (*Error, error)
	// TestRequestRequiredIntegerUnixSecondsNullableArray invokes test_request_required_integer_unix-seconds_nullable_array operation.
	//
	// POST /test_request_required_integer_unix-seconds_nullable_array
	TestRequestRequiredIntegerUnixSecondsNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error)
	// TestRequestRequiredIntegerUnixSecondsNullableArrayArray invokes test_request_required_integer_unix-seconds_nullable_array_array operation.
	//
	// POST /test_request_required_integer_unix-seconds_nullable_array_array
	TestRequestRequiredIntegerUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error)
	// TestRequestRequiredNull invokes test_request_required_null operation.
	//
	// POST /test_request_required_null
	TestRequestRequiredNull(ctx context.Context, request struct{}) (*Error, error)
	// TestRequestRequiredNullArray invokes test_request_required_null_array operation.
	//
	// POST /test_request_required_null_array
	TestRequestRequiredNullArray(ctx context.Context, request []struct{}) (*Error, error)
	// TestRequestRequiredNullArrayArray invokes test_request_required_null_array_array operation.
	//
	// POST /test_request_required_null_array_array
	TestRequestRequiredNullArrayArray(ctx context.Context, request [][]struct{}) (*Error, error)
	// TestRequestRequiredNullNullable invokes test_request_required_null_nullable operation.
	//
	// POST /test_request_required_null_nullable
	TestRequestRequiredNullNullable(ctx context.Context, request struct{}) (*Error, error)
	// TestRequestRequiredNullNullableArray invokes test_request_required_null_nullable_array operation.
	//
	// POST /test_request_required_null_nullable_array
	TestRequestRequiredNullNullableArray(ctx context.Context, request []struct{}) (*Error, error)
	// TestRequestRequiredNullNullableArrayArray invokes test_request_required_null_nullable_array_array operation.
	//
	// POST /test_request_required_null_nullable_array_array
	TestRequestRequiredNullNullableArrayArray(ctx context.Context, request [][]struct{}) (*Error, error)
	// TestRequestRequiredNumber invokes test_request_required_number operation.
	//
	// POST /test_request_required_number
	TestRequestRequiredNumber(ctx context.Context, request float64) (*Error, error)
	// TestRequestRequiredNumberArray invokes test_request_required_number_array operation.
	//
	// POST /test_request_required_number_array
	TestRequestRequiredNumberArray(ctx context.Context, request []float64) (*Error, error)
	// TestRequestRequiredNumberArrayArray invokes test_request_required_number_array_array operation.
	//
	// POST /test_request_required_number_array_array
	TestRequestRequiredNumberArrayArray(ctx context.Context, request [][]float64) (*Error, error)
	// TestRequestRequiredNumberDouble invokes test_request_required_number_double operation.
	//
	// POST /test_request_required_number_double
	TestRequestRequiredNumberDouble(ctx context.Context, request float64) (*Error, error)
	// TestRequestRequiredNumberDoubleArray invokes test_request_required_number_double_array operation.
	//
	// POST /test_request_required_number_double_array
	TestRequestRequiredNumberDoubleArray(ctx context.Context, request []float64) (*Error, error)
	// TestRequestRequiredNumberDoubleArrayArray invokes test_request_required_number_double_array_array operation.
	//
	// POST /test_request_required_number_double_array_array
	TestRequestRequiredNumberDoubleArrayArray(ctx context.Context, request [][]float64) (*Error, error)
	// TestRequestRequiredNumberDoubleNullable invokes test_request_required_number_double_nullable operation.
	//
	// POST /test_request_required_number_double_nullable
	TestRequestRequiredNumberDoubleNullable(ctx context.Context, request NilFloat64) (*Error, error)
	// TestRequestRequiredNumberDoubleNullableArray invokes test_request_required_number_double_nullable_array operation.
	//
	// POST /test_request_required_number_double_nullable_array
	TestRequestRequiredNumberDoubleNullableArray(ctx context.Context, request []NilFloat64) (*Error, error)
	// TestRequestRequiredNumberDoubleNullableArrayArray invokes test_request_required_number_double_nullable_array_array operation.
	//
	// POST /test_request_required_number_double_nullable_array_array
	TestRequestRequiredNumberDoubleNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error)
	// TestRequestRequiredNumberFloat invokes test_request_required_number_float operation.
	//
	// POST /test_request_required_number_float
	TestRequestRequiredNumberFloat(ctx context.Context, request float32) (*Error, error)
	// TestRequestRequiredNumberFloatArray invokes test_request_required_number_float_array operation.
	//
	// POST /test_request_required_number_float_array
	TestRequestRequiredNumberFloatArray(ctx context.Context, request []float32) (*Error, error)
	// TestRequestRequiredNumberFloatArrayArray invokes test_request_required_number_float_array_array operation.
	//
	// POST /test_request_required_number_float_array_array
	TestRequestRequiredNumberFloatArrayArray(ctx context.Context, request [][]float32) (*Error, error)
	// TestRequestRequiredNumberFloatNullable invokes test_request_required_number_float_nullable operation.
	//
	// POST /test_request_required_number_float_nullable
	TestRequestRequiredNumberFloatNullable(ctx context.Context, request NilFloat32) (*Error, error)
	// TestRequestRequiredNumberFloatNullableArray invokes test_request_required_number_float_nullable_array operation.
	//
	// POST /test_request_required_number_float_nullable_array
	TestRequestRequiredNumberFloatNullableArray(ctx context.Context, request []NilFloat32) (*Error, error)
	// TestRequestRequiredNumberFloatNullableArrayArray invokes test_request_required_number_float_nullable_array_array operation.
	//
	// POST /test_request_required_number_float_nullable_array_array
	TestRequestRequiredNumberFloatNullableArrayArray(ctx context.Context, request [][]NilFloat32) (*Error, error)
	// TestRequestRequiredNumberInt32 invokes test_request_required_number_int32 operation.
	//
	// POST /test_request_required_number_int32
	TestRequestRequiredNumberInt32(ctx context.Context, request int32) (*Error, error)
	// TestRequestRequiredNumberInt32Array invokes test_request_required_number_int32_array operation.
	//
	// POST /test_request_required_number_int32_array
	TestRequestRequiredNumberInt32Array(ctx context.Context, request []int32) (*Error, error)
	// TestRequestRequiredNumberInt32ArrayArray invokes test_request_required_number_int32_array_array operation.
	//
	// POST /test_request_required_number_int32_array_array
	TestRequestRequiredNumberInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error)
	// TestRequestRequiredNumberInt32Nullable invokes test_request_required_number_int32_nullable operation.
	//
	// POST /test_request_required_number_int32_nullable
	TestRequestRequiredNumberInt32Nullable(ctx context.Context, request NilInt32) (*Error, error)
	// TestRequestRequiredNumberInt32NullableArray invokes test_request_required_number_int32_nullable_array operation.
	//
	// POST /test_request_required_number_int32_nullable_array
	TestRequestRequiredNumberInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error)
	// TestRequestRequiredNumberInt32NullableArrayArray invokes test_request_required_number_int32_nullable_array_array operation.
	//
	// POST /test_request_required_number_int32_nullable_array_array
	TestRequestRequiredNumberInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error)
	// TestRequestRequiredNumberInt64 invokes test_request_required_number_int64 operation.
	//
	// POST /test_request_required_number_int64
	TestRequestRequiredNumberInt64(ctx context.Context, request int64) (*Error, error)
	// TestRequestRequiredNumberInt64Array invokes test_request_required_number_int64_array operation.
	//
	// POST /test_request_required_number_int64_array
	TestRequestRequiredNumberInt64Array(ctx context.Context, request []int64) (*Error, error)
	// TestRequestRequiredNumberInt64ArrayArray invokes test_request_required_number_int64_array_array operation.
	//
	// POST /test_request_required_number_int64_array_array
	TestRequestRequiredNumberInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error)
	// TestRequestRequiredNumberInt64Nullable invokes test_request_required_number_int64_nullable operation.
	//
	// POST /test_request_required_number_int64_nullable
	TestRequestRequiredNumberInt64Nullable(ctx context.Context, request NilInt64) (*Error, error)
	// TestRequestRequiredNumberInt64NullableArray invokes test_request_required_number_int64_nullable_array operation.
	//
	// POST /test_request_required_number_int64_nullable_array
	TestRequestRequiredNumberInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error)
	// TestRequestRequiredNumberInt64NullableArrayArray invokes test_request_required_number_int64_nullable_array_array operation.
	//
	// POST /test_request_required_number_int64_nullable_array_array
	TestRequestRequiredNumberInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error)
	// TestRequestRequiredNumberNullable invokes test_request_required_number_nullable operation.
	//
	// POST /test_request_required_number_nullable
	TestRequestRequiredNumberNullable(ctx context.Context, request NilFloat64) (*Error, error)
	// TestRequestRequiredNumberNullableArray invokes test_request_required_number_nullable_array operation.
	//
	// POST /test_request_required_number_nullable_array
	TestRequestRequiredNumberNullableArray(ctx context.Context, request []NilFloat64) (*Error, error)
	// TestRequestRequiredNumberNullableArrayArray invokes test_request_required_number_nullable_array_array operation.
	//
	// POST /test_request_required_number_nullable_array_array
	TestRequestRequiredNumberNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error)
	// TestRequestRequiredString invokes test_request_required_string operation.
	//
	// POST /test_request_required_string
	TestRequestRequiredString(ctx context.Context, request string) (*Error, error)
	// TestRequestRequiredStringArray invokes test_request_required_string_array operation.
	//
	// POST /test_request_required_string_array
	TestRequestRequiredStringArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestRequiredStringArrayArray invokes test_request_required_string_array_array operation.
	//
	// POST /test_request_required_string_array_array
	TestRequestRequiredStringArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestRequiredStringBase64 invokes test_request_required_string_base64 operation.
	//
	// POST /test_request_required_string_base64
	TestRequestRequiredStringBase64(ctx context.Context, request []byte) (*Error, error)
	// TestRequestRequiredStringBase64Array invokes test_request_required_string_base64_array operation.
	//
	// POST /test_request_required_string_base64_array
	TestRequestRequiredStringBase64Array(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestRequiredStringBase64ArrayArray invokes test_request_required_string_base64_array_array operation.
	//
	// POST /test_request_required_string_base64_array_array
	TestRequestRequiredStringBase64ArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestRequiredStringBase64Nullable invokes test_request_required_string_base64_nullable operation.
	//
	// POST /test_request_required_string_base64_nullable
	TestRequestRequiredStringBase64Nullable(ctx context.Context, request []byte) (*Error, error)
	// TestRequestRequiredStringBase64NullableArray invokes test_request_required_string_base64_nullable_array operation.
	//
	// POST /test_request_required_string_base64_nullable_array
	TestRequestRequiredStringBase64NullableArray(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestRequiredStringBase64NullableArrayArray invokes test_request_required_string_base64_nullable_array_array operation.
	//
	// POST /test_request_required_string_base64_nullable_array_array
	TestRequestRequiredStringBase64NullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestRequiredStringBinary invokes test_request_required_string_binary operation.
	//
	// POST /test_request_required_string_binary
	TestRequestRequiredStringBinary(ctx context.Context, request string) (*Error, error)
	// TestRequestRequiredStringBinaryArray invokes test_request_required_string_binary_array operation.
	//
	// POST /test_request_required_string_binary_array
	TestRequestRequiredStringBinaryArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestRequiredStringBinaryArrayArray invokes test_request_required_string_binary_array_array operation.
	//
	// POST /test_request_required_string_binary_array_array
	TestRequestRequiredStringBinaryArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestRequiredStringBinaryNullable invokes test_request_required_string_binary_nullable operation.
	//
	// POST /test_request_required_string_binary_nullable
	TestRequestRequiredStringBinaryNullable(ctx context.Context, request NilString) (*Error, error)
	// TestRequestRequiredStringBinaryNullableArray invokes test_request_required_string_binary_nullable_array operation.
	//
	// POST /test_request_required_string_binary_nullable_array
	TestRequestRequiredStringBinaryNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestRequiredStringBinaryNullableArrayArray invokes test_request_required_string_binary_nullable_array_array operation.
	//
	// POST /test_request_required_string_binary_nullable_array_array
	TestRequestRequiredStringBinaryNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestRequiredStringByte invokes test_request_required_string_byte operation.
	//
	// POST /test_request_required_string_byte
	TestRequestRequiredStringByte(ctx context.Context, request []byte) (*Error, error)
	// TestRequestRequiredStringByteArray invokes test_request_required_string_byte_array operation.
	//
	// POST /test_request_required_string_byte_array
	TestRequestRequiredStringByteArray(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestRequiredStringByteArrayArray invokes test_request_required_string_byte_array_array operation.
	//
	// POST /test_request_required_string_byte_array_array
	TestRequestRequiredStringByteArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestRequiredStringByteNullable invokes test_request_required_string_byte_nullable operation.
	//
	// POST /test_request_required_string_byte_nullable
	TestRequestRequiredStringByteNullable(ctx context.Context, request []byte) (*Error, error)
	// TestRequestRequiredStringByteNullableArray invokes test_request_required_string_byte_nullable_array operation.
	//
	// POST /test_request_required_string_byte_nullable_array
	TestRequestRequiredStringByteNullableArray(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestRequiredStringByteNullableArrayArray invokes test_request_required_string_byte_nullable_array_array operation.
	//
	// POST /test_request_required_string_byte_nullable_array_array
	TestRequestRequiredStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestRequiredStringDate invokes test_request_required_string_date operation.
	//
	// POST /test_request_required_string_date
	TestRequestRequiredStringDate(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringDateArray invokes test_request_required_string_date_array operation.
	//
	// POST /test_request_required_string_date_array
	TestRequestRequiredStringDateArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringDateArrayArray invokes test_request_required_string_date_array_array operation.
	//
	// POST /test_request_required_string_date_array_array
	TestRequestRequiredStringDateArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringDateNullable invokes test_request_required_string_date_nullable operation.
	//
	// POST /test_request_required_string_date_nullable
	TestRequestRequiredStringDateNullable(ctx context.Context, request NilDate) (*Error, error)
	// TestRequestRequiredStringDateNullableArray invokes test_request_required_string_date_nullable_array operation.
	//
	// POST /test_request_required_string_date_nullable_array
	TestRequestRequiredStringDateNullableArray(ctx context.Context, request []NilDate) (*Error, error)
	// TestRequestRequiredStringDateNullableArrayArray invokes test_request_required_string_date_nullable_array_array operation.
	//
	// POST /test_request_required_string_date_nullable_array_array
	TestRequestRequiredStringDateNullableArrayArray(ctx context.Context, request [][]NilDate) (*Error, error)
	// TestRequestRequiredStringDateTime invokes test_request_required_string_date-time operation.
	//
	// POST /test_request_required_string_date-time
	TestRequestRequiredStringDateTime(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringDateTimeArray invokes test_request_required_string_date-time_array operation.
	//
	// POST /test_request_required_string_date-time_array
	TestRequestRequiredStringDateTimeArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringDateTimeArrayArray invokes test_request_required_string_date-time_array_array operation.
	//
	// POST /test_request_required_string_date-time_array_array
	TestRequestRequiredStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringDateTimeNullable invokes test_request_required_string_date-time_nullable operation.
	//
	// POST /test_request_required_string_date-time_nullable
	TestRequestRequiredStringDateTimeNullable(ctx context.Context, request NilDateTime) (*Error, error)
	// TestRequestRequiredStringDateTimeNullableArray invokes test_request_required_string_date-time_nullable_array operation.
	//
	// POST /test_request_required_string_date-time_nullable_array
	TestRequestRequiredStringDateTimeNullableArray(ctx context.Context, request []NilDateTime) (*Error, error)
	// TestRequestRequiredStringDateTimeNullableArrayArray invokes test_request_required_string_date-time_nullable_array_array operation.
	//
	// POST /test_request_required_string_date-time_nullable_array_array
	TestRequestRequiredStringDateTimeNullableArrayArray(ctx context.Context, request [][]NilDateTime) (*Error, error)
	// TestRequestRequiredStringDuration invokes test_request_required_string_duration operation.
	//
	// POST /test_request_required_string_duration
	TestRequestRequiredStringDuration(ctx context.Context, request time.Duration) (*Error, error)
	// TestRequestRequiredStringDurationArray invokes test_request_required_string_duration_array operation.
	//
	// POST /test_request_required_string_duration_array
	TestRequestRequiredStringDurationArray(ctx context.Context, request []time.Duration) (*Error, error)
	// TestRequestRequiredStringDurationArrayArray invokes test_request_required_string_duration_array_array operation.
	//
	// POST /test_request_required_string_duration_array_array
	TestRequestRequiredStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (*Error, error)
	// TestRequestRequiredStringDurationNullable invokes test_request_required_string_duration_nullable operation.
	//
	// POST /test_request_required_string_duration_nullable
	TestRequestRequiredStringDurationNullable(ctx context.Context, request NilDuration) (*Error, error)
	// TestRequestRequiredStringDurationNullableArray invokes test_request_required_string_duration_nullable_array operation.
	//
	// POST /test_request_required_string_duration_nullable_array
	TestRequestRequiredStringDurationNullableArray(ctx context.Context, request []NilDuration) (*Error, error)
	// TestRequestRequiredStringDurationNullableArrayArray invokes test_request_required_string_duration_nullable_array_array operation.
	//
	// POST /test_request_required_string_duration_nullable_array_array
	TestRequestRequiredStringDurationNullableArrayArray(ctx context.Context, request [][]NilDuration) (*Error, error)
	// TestRequestRequiredStringEmail invokes test_request_required_string_email operation.
	//
	// POST /test_request_required_string_email
	TestRequestRequiredStringEmail(ctx context.Context, request string) (*Error, error)
	// TestRequestRequiredStringEmailArray invokes test_request_required_string_email_array operation.
	//
	// POST /test_request_required_string_email_array
	TestRequestRequiredStringEmailArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestRequiredStringEmailArrayArray invokes test_request_required_string_email_array_array operation.
	//
	// POST /test_request_required_string_email_array_array
	TestRequestRequiredStringEmailArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestRequiredStringEmailNullable invokes test_request_required_string_email_nullable operation.
	//
	// POST /test_request_required_string_email_nullable
	TestRequestRequiredStringEmailNullable(ctx context.Context, request NilString) (*Error, error)
	// TestRequestRequiredStringEmailNullableArray invokes test_request_required_string_email_nullable_array operation.
	//
	// POST /test_request_required_string_email_nullable_array
	TestRequestRequiredStringEmailNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestRequiredStringEmailNullableArrayArray invokes test_request_required_string_email_nullable_array_array operation.
	//
	// POST /test_request_required_string_email_nullable_array_array
	TestRequestRequiredStringEmailNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestRequiredStringFloat32 invokes test_request_required_string_float32 operation.
	//
	// POST /test_request_required_string_float32
	TestRequestRequiredStringFloat32(ctx context.Context, request float32) (*Error, error)
	// TestRequestRequiredStringFloat32Array invokes test_request_required_string_float32_array operation.
	//
	// POST /test_request_required_string_float32_array
	TestRequestRequiredStringFloat32Array(ctx context.Context, request []float32) (*Error, error)
	// TestRequestRequiredStringFloat32ArrayArray invokes test_request_required_string_float32_array_array operation.
	//
	// POST /test_request_required_string_float32_array_array
	TestRequestRequiredStringFloat32ArrayArray(ctx context.Context, request [][]float32) (*Error, error)
	// TestRequestRequiredStringFloat32Nullable invokes test_request_required_string_float32_nullable operation.
	//
	// POST /test_request_required_string_float32_nullable
	TestRequestRequiredStringFloat32Nullable(ctx context.Context, request NilStringFloat32) (*Error, error)
	// TestRequestRequiredStringFloat32NullableArray invokes test_request_required_string_float32_nullable_array operation.
	//
	// POST /test_request_required_string_float32_nullable_array
	TestRequestRequiredStringFloat32NullableArray(ctx context.Context, request []NilStringFloat32) (*Error, error)
	// TestRequestRequiredStringFloat32NullableArrayArray invokes test_request_required_string_float32_nullable_array_array operation.
	//
	// POST /test_request_required_string_float32_nullable_array_array
	TestRequestRequiredStringFloat32NullableArrayArray(ctx context.Context, request [][]NilStringFloat32) (*Error, error)
	// TestRequestRequiredStringFloat64 invokes test_request_required_string_float64 operation.
	//
	// POST /test_request_required_string_float64
	TestRequestRequiredStringFloat64(ctx context.Context, request float64) (*Error, error)
	// TestRequestRequiredStringFloat64Array invokes test_request_required_string_float64_array operation.
	//
	// POST /test_request_required_string_float64_array
	TestRequestRequiredStringFloat64Array(ctx context.Context, request []float64) (*Error, error)
	// TestRequestRequiredStringFloat64ArrayArray invokes test_request_required_string_float64_array_array operation.
	//
	// POST /test_request_required_string_float64_array_array
	TestRequestRequiredStringFloat64ArrayArray(ctx context.Context, request [][]float64) (*Error, error)
	// TestRequestRequiredStringFloat64Nullable invokes test_request_required_string_float64_nullable operation.
	//
	// POST /test_request_required_string_float64_nullable
	TestRequestRequiredStringFloat64Nullable(ctx context.Context, request NilStringFloat64) (*Error, error)
	// TestRequestRequiredStringFloat64NullableArray invokes test_request_required_string_float64_nullable_array operation.
	//
	// POST /test_request_required_string_float64_nullable_array
	TestRequestRequiredStringFloat64NullableArray(ctx context.Context, request []NilStringFloat64) (*Error, error)
	// TestRequestRequiredStringFloat64NullableArrayArray invokes test_request_required_string_float64_nullable_array_array operation.
	//
	// POST /test_request_required_string_float64_nullable_array_array
	TestRequestRequiredStringFloat64NullableArrayArray(ctx context.Context, request [][]NilStringFloat64) (*Error, error)
	// TestRequestRequiredStringHostname invokes test_request_required_string_hostname operation.
	//
	// POST /test_request_required_string_hostname
	TestRequestRequiredStringHostname(ctx context.Context, request string) (*Error, error)
	// TestRequestRequiredStringHostnameArray invokes test_request_required_string_hostname_array operation.
	//
	// POST /test_request_required_string_hostname_array
	TestRequestRequiredStringHostnameArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestRequiredStringHostnameArrayArray invokes test_request_required_string_hostname_array_array operation.
	//
	// POST /test_request_required_string_hostname_array_array
	TestRequestRequiredStringHostnameArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestRequiredStringHostnameNullable invokes test_request_required_string_hostname_nullable operation.
	//
	// POST /test_request_required_string_hostname_nullable
	TestRequestRequiredStringHostnameNullable(ctx context.Context, request NilString) (*Error, error)
	// TestRequestRequiredStringHostnameNullableArray invokes test_request_required_string_hostname_nullable_array operation.
	//
	// POST /test_request_required_string_hostname_nullable_array
	TestRequestRequiredStringHostnameNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestRequiredStringHostnameNullableArrayArray invokes test_request_required_string_hostname_nullable_array_array operation.
	//
	// POST /test_request_required_string_hostname_nullable_array_array
	TestRequestRequiredStringHostnameNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestRequiredStringIP invokes test_request_required_string_ip operation.
	//
	// POST /test_request_required_string_ip
	TestRequestRequiredStringIP(ctx context.Context, request netip.Addr) (*Error, error)
	// TestRequestRequiredStringIPArray invokes test_request_required_string_ip_array operation.
	//
	// POST /test_request_required_string_ip_array
	TestRequestRequiredStringIPArray(ctx context.Context, request []netip.Addr) (*Error, error)
	// TestRequestRequiredStringIPArrayArray invokes test_request_required_string_ip_array_array operation.
	//
	// POST /test_request_required_string_ip_array_array
	TestRequestRequiredStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error)
	// TestRequestRequiredStringIPNullable invokes test_request_required_string_ip_nullable operation.
	//
	// POST /test_request_required_string_ip_nullable
	TestRequestRequiredStringIPNullable(ctx context.Context, request NilIP) (*Error, error)
	// TestRequestRequiredStringIPNullableArray invokes test_request_required_string_ip_nullable_array operation.
	//
	// POST /test_request_required_string_ip_nullable_array
	TestRequestRequiredStringIPNullableArray(ctx context.Context, request []NilIP) (*Error, error)
	// TestRequestRequiredStringIPNullableArrayArray invokes test_request_required_string_ip_nullable_array_array operation.
	//
	// POST /test_request_required_string_ip_nullable_array_array
	TestRequestRequiredStringIPNullableArrayArray(ctx context.Context, request [][]NilIP) (*Error, error)
	// TestRequestRequiredStringInt invokes test_request_required_string_int operation.
	//
	// POST /test_request_required_string_int
	TestRequestRequiredStringInt(ctx context.Context, request int) (*Error, error)
	// TestRequestRequiredStringInt16 invokes test_request_required_string_int16 operation.
	//
	// POST /test_request_required_string_int16
	TestRequestRequiredStringInt16(ctx context.Context, request int16) (*Error, error)
	// TestRequestRequiredStringInt16Array invokes test_request_required_string_int16_array operation.
	//
	// POST /test_request_required_string_int16_array
	TestRequestRequiredStringInt16Array(ctx context.Context, request []int16) (*Error, error)
	// TestRequestRequiredStringInt16ArrayArray invokes test_request_required_string_int16_array_array operation.
	//
	// POST /test_request_required_string_int16_array_array
	TestRequestRequiredStringInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error)
	// TestRequestRequiredStringInt16Nullable invokes test_request_required_string_int16_nullable operation.
	//
	// POST /test_request_required_string_int16_nullable
	TestRequestRequiredStringInt16Nullable(ctx context.Context, request NilStringInt16) (*Error, error)
	// TestRequestRequiredStringInt16NullableArray invokes test_request_required_string_int16_nullable_array operation.
	//
	// POST /test_request_required_string_int16_nullable_array
	TestRequestRequiredStringInt16NullableArray(ctx context.Context, request []NilStringInt16) (*Error, error)
	// TestRequestRequiredStringInt16NullableArrayArray invokes test_request_required_string_int16_nullable_array_array operation.
	//
	// POST /test_request_required_string_int16_nullable_array_array
	TestRequestRequiredStringInt16NullableArrayArray(ctx context.Context, request [][]NilStringInt16) (*Error, error)
	// TestRequestRequiredStringInt32 invokes test_request_required_string_int32 operation.
	//
	// POST /test_request_required_string_int32
	TestRequestRequiredStringInt32(ctx context.Context, request int32) (*Error, error)
	// TestRequestRequiredStringInt32Array invokes test_request_required_string_int32_array operation.
	//
	// POST /test_request_required_string_int32_array
	TestRequestRequiredStringInt32Array(ctx context.Context, request []int32) (*Error, error)
	// TestRequestRequiredStringInt32ArrayArray invokes test_request_required_string_int32_array_array operation.
	//
	// POST /test_request_required_string_int32_array_array
	TestRequestRequiredStringInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error)
	// TestRequestRequiredStringInt32Nullable invokes test_request_required_string_int32_nullable operation.
	//
	// POST /test_request_required_string_int32_nullable
	TestRequestRequiredStringInt32Nullable(ctx context.Context, request NilStringInt32) (*Error, error)
	// TestRequestRequiredStringInt32NullableArray invokes test_request_required_string_int32_nullable_array operation.
	//
	// POST /test_request_required_string_int32_nullable_array
	TestRequestRequiredStringInt32NullableArray(ctx context.Context, request []NilStringInt32) (*Error, error)
	// TestRequestRequiredStringInt32NullableArrayArray invokes test_request_required_string_int32_nullable_array_array operation.
	//
	// POST /test_request_required_string_int32_nullable_array_array
	TestRequestRequiredStringInt32NullableArrayArray(ctx context.Context, request [][]NilStringInt32) (*Error, error)
	// TestRequestRequiredStringInt64 invokes test_request_required_string_int64 operation.
	//
	// POST /test_request_required_string_int64
	TestRequestRequiredStringInt64(ctx context.Context, request int64) (*Error, error)
	// TestRequestRequiredStringInt64Array invokes test_request_required_string_int64_array operation.
	//
	// POST /test_request_required_string_int64_array
	TestRequestRequiredStringInt64Array(ctx context.Context, request []int64) (*Error, error)
	// TestRequestRequiredStringInt64ArrayArray invokes test_request_required_string_int64_array_array operation.
	//
	// POST /test_request_required_string_int64_array_array
	TestRequestRequiredStringInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error)
	// TestRequestRequiredStringInt64Nullable invokes test_request_required_string_int64_nullable operation.
	//
	// POST /test_request_required_string_int64_nullable
	TestRequestRequiredStringInt64Nullable(ctx context.Context, request NilStringInt64) (*Error, error)
	// TestRequestRequiredStringInt64NullableArray invokes test_request_required_string_int64_nullable_array operation.
	//
	// POST /test_request_required_string_int64_nullable_array
	TestRequestRequiredStringInt64NullableArray(ctx context.Context, request []NilStringInt64) (*Error, error)
	// TestRequestRequiredStringInt64NullableArrayArray invokes test_request_required_string_int64_nullable_array_array operation.
	//
	// POST /test_request_required_string_int64_nullable_array_array
	TestRequestRequiredStringInt64NullableArrayArray(ctx context.Context, request [][]NilStringInt64) (*Error, error)
	// TestRequestRequiredStringInt8 invokes test_request_required_string_int8 operation.
	//
	// POST /test_request_required_string_int8
	TestRequestRequiredStringInt8(ctx context.Context, request int8) (*Error, error)
	// TestRequestRequiredStringInt8Array invokes test_request_required_string_int8_array operation.
	//
	// POST /test_request_required_string_int8_array
	TestRequestRequiredStringInt8Array(ctx context.Context, request []int8) (*Error, error)
	// TestRequestRequiredStringInt8ArrayArray invokes test_request_required_string_int8_array_array operation.
	//
	// POST /test_request_required_string_int8_array_array
	TestRequestRequiredStringInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error)
	// TestRequestRequiredStringInt8Nullable invokes test_request_required_string_int8_nullable operation.
	//
	// POST /test_request_required_string_int8_nullable
	TestRequestRequiredStringInt8Nullable(ctx context.Context, request NilStringInt8) (*Error, error)
	// TestRequestRequiredStringInt8NullableArray invokes test_request_required_string_int8_nullable_array operation.
	//
	// POST /test_request_required_string_int8_nullable_array
	TestRequestRequiredStringInt8NullableArray(ctx context.Context, request []NilStringInt8) (*Error, error)
	// TestRequestRequiredStringInt8NullableArrayArray invokes test_request_required_string_int8_nullable_array_array operation.
	//
	// POST /test_request_required_string_int8_nullable_array_array
	TestRequestRequiredStringInt8NullableArrayArray(ctx context.Context, request [][]NilStringInt8) (*Error, error)
	// TestRequestRequiredStringIntArray invokes test_request_required_string_int_array operation.
	//
	// POST /test_request_required_string_int_array
	TestRequestRequiredStringIntArray(ctx context.Context, request []int) (*Error, error)
	// TestRequestRequiredStringIntArrayArray invokes test_request_required_string_int_array_array operation.
	//
	// POST /test_request_required_string_int_array_array
	TestRequestRequiredStringIntArrayArray(ctx context.Context, request [][]int) (*Error, error)
	// TestRequestRequiredStringIntNullable invokes test_request_required_string_int_nullable operation.
	//
	// POST /test_request_required_string_int_nullable
	TestRequestRequiredStringIntNullable(ctx context.Context, request NilStringInt) (*Error, error)
	// TestRequestRequiredStringIntNullableArray invokes test_request_required_string_int_nullable_array operation.
	//
	// POST /test_request_required_string_int_nullable_array
	TestRequestRequiredStringIntNullableArray(ctx context.Context, request []NilStringInt) (*Error, error)
	// TestRequestRequiredStringIntNullableArrayArray invokes test_request_required_string_int_nullable_array_array operation.
	//
	// POST /test_request_required_string_int_nullable_array_array
	TestRequestRequiredStringIntNullableArrayArray(ctx context.Context, request [][]NilStringInt) (*Error, error)
	// TestRequestRequiredStringIpv4 invokes test_request_required_string_ipv4 operation.
	//
	// POST /test_request_required_string_ipv4
	TestRequestRequiredStringIpv4(ctx context.Context, request netip.Addr) (*Error, error)
	// TestRequestRequiredStringIpv4Array invokes test_request_required_string_ipv4_array operation.
	//
	// POST /test_request_required_string_ipv4_array
	TestRequestRequiredStringIpv4Array(ctx context.Context, request []netip.Addr) (*Error, error)
	// TestRequestRequiredStringIpv4ArrayArray invokes test_request_required_string_ipv4_array_array operation.
	//
	// POST /test_request_required_string_ipv4_array_array
	TestRequestRequiredStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error)
	// TestRequestRequiredStringIpv4Nullable invokes test_request_required_string_ipv4_nullable operation.
	//
	// POST /test_request_required_string_ipv4_nullable
	TestRequestRequiredStringIpv4Nullable(ctx context.Context, request NilIPv4) (*Error, error)
	// TestRequestRequiredStringIpv4NullableArray invokes test_request_required_string_ipv4_nullable_array operation.
	//
	// POST /test_request_required_string_ipv4_nullable_array
	TestRequestRequiredStringIpv4NullableArray(ctx context.Context, request []NilIPv4) (*Error, error)
	// TestRequestRequiredStringIpv4NullableArrayArray invokes test_request_required_string_ipv4_nullable_array_array operation.
	//
	// POST /test_request_required_string_ipv4_nullable_array_array
	TestRequestRequiredStringIpv4NullableArrayArray(ctx context.Context, request [][]NilIPv4) (*Error, error)
	// TestRequestRequiredStringIpv6 invokes test_request_required_string_ipv6 operation.
	//
	// POST /test_request_required_string_ipv6
	TestRequestRequiredStringIpv6(ctx context.Context, request netip.Addr) (*Error, error)
	// TestRequestRequiredStringIpv6Array invokes test_request_required_string_ipv6_array operation.
	//
	// POST /test_request_required_string_ipv6_array
	TestRequestRequiredStringIpv6Array(ctx context.Context, request []netip.Addr) (*Error, error)
	// TestRequestRequiredStringIpv6ArrayArray invokes test_request_required_string_ipv6_array_array operation.
	//
	// POST /test_request_required_string_ipv6_array_array
	TestRequestRequiredStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error)
	// TestRequestRequiredStringIpv6Nullable invokes test_request_required_string_ipv6_nullable operation.
	//
	// POST /test_request_required_string_ipv6_nullable
	TestRequestRequiredStringIpv6Nullable(ctx context.Context, request NilIPv6) (*Error, error)
	// TestRequestRequiredStringIpv6NullableArray invokes test_request_required_string_ipv6_nullable_array operation.
	//
	// POST /test_request_required_string_ipv6_nullable_array
	TestRequestRequiredStringIpv6NullableArray(ctx context.Context, request []NilIPv6) (*Error, error)
	// TestRequestRequiredStringIpv6NullableArrayArray invokes test_request_required_string_ipv6_nullable_array_array operation.
	//
	// POST /test_request_required_string_ipv6_nullable_array_array
	TestRequestRequiredStringIpv6NullableArrayArray(ctx context.Context, request [][]NilIPv6) (*Error, error)
	// TestRequestRequiredStringNullable invokes test_request_required_string_nullable operation.
	//
	// POST /test_request_required_string_nullable
	TestRequestRequiredStringNullable(ctx context.Context, request NilString) (*Error, error)
	// TestRequestRequiredStringNullableArray invokes test_request_required_string_nullable_array operation.
	//
	// POST /test_request_required_string_nullable_array
	TestRequestRequiredStringNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestRequiredStringNullableArrayArray invokes test_request_required_string_nullable_array_array operation.
	//
	// POST /test_request_required_string_nullable_array_array
	TestRequestRequiredStringNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestRequiredStringPassword invokes test_request_required_string_password operation.
	//
	// POST /test_request_required_string_password
	TestRequestRequiredStringPassword(ctx context.Context, request string) (*Error, error)
	// TestRequestRequiredStringPasswordArray invokes test_request_required_string_password_array operation.
	//
	// POST /test_request_required_string_password_array
	TestRequestRequiredStringPasswordArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestRequiredStringPasswordArrayArray invokes test_request_required_string_password_array_array operation.
	//
	// POST /test_request_required_string_password_array_array
	TestRequestRequiredStringPasswordArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestRequiredStringPasswordNullable invokes test_request_required_string_password_nullable operation.
	//
	// POST /test_request_required_string_password_nullable
	TestRequestRequiredStringPasswordNullable(ctx context.Context, request NilString) (*Error, error)
	// TestRequestRequiredStringPasswordNullableArray invokes test_request_required_string_password_nullable_array operation.
	//
	// POST /test_request_required_string_password_nullable_array
	TestRequestRequiredStringPasswordNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestRequiredStringPasswordNullableArrayArray invokes test_request_required_string_password_nullable_array_array operation.
	//
	// POST /test_request_required_string_password_nullable_array_array
	TestRequestRequiredStringPasswordNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestRequiredStringTime invokes test_request_required_string_time operation.
	//
	// POST /test_request_required_string_time
	TestRequestRequiredStringTime(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringTimeArray invokes test_request_required_string_time_array operation.
	//
	// POST /test_request_required_string_time_array
	TestRequestRequiredStringTimeArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringTimeArrayArray invokes test_request_required_string_time_array_array operation.
	//
	// POST /test_request_required_string_time_array_array
	TestRequestRequiredStringTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringTimeNullable invokes test_request_required_string_time_nullable operation.
	//
	// POST /test_request_required_string_time_nullable
	TestRequestRequiredStringTimeNullable(ctx context.Context, request NilTime) (*Error, error)
	// TestRequestRequiredStringTimeNullableArray invokes test_request_required_string_time_nullable_array operation.
	//
	// POST /test_request_required_string_time_nullable_array
	TestRequestRequiredStringTimeNullableArray(ctx context.Context, request []NilTime) (*Error, error)
	// TestRequestRequiredStringTimeNullableArrayArray invokes test_request_required_string_time_nullable_array_array operation.
	//
	// POST /test_request_required_string_time_nullable_array_array
	TestRequestRequiredStringTimeNullableArrayArray(ctx context.Context, request [][]NilTime) (*Error, error)
	// TestRequestRequiredStringURI invokes test_request_required_string_uri operation.
	//
	// POST /test_request_required_string_uri
	TestRequestRequiredStringURI(ctx context.Context, request url.URL) (*Error, error)
	// TestRequestRequiredStringURIArray invokes test_request_required_string_uri_array operation.
	//
	// POST /test_request_required_string_uri_array
	TestRequestRequiredStringURIArray(ctx context.Context, request []url.URL) (*Error, error)
	// TestRequestRequiredStringURIArrayArray invokes test_request_required_string_uri_array_array operation.
	//
	// POST /test_request_required_string_uri_array_array
	TestRequestRequiredStringURIArrayArray(ctx context.Context, request [][]url.URL) (*Error, error)
	// TestRequestRequiredStringURINullable invokes test_request_required_string_uri_nullable operation.
	//
	// POST /test_request_required_string_uri_nullable
	TestRequestRequiredStringURINullable(ctx context.Context, request NilURI) (*Error, error)
	// TestRequestRequiredStringURINullableArray invokes test_request_required_string_uri_nullable_array operation.
	//
	// POST /test_request_required_string_uri_nullable_array
	TestRequestRequiredStringURINullableArray(ctx context.Context, request []NilURI) (*Error, error)
	// TestRequestRequiredStringURINullableArrayArray invokes test_request_required_string_uri_nullable_array_array operation.
	//
	// POST /test_request_required_string_uri_nullable_array_array
	TestRequestRequiredStringURINullableArrayArray(ctx context.Context, request [][]NilURI) (*Error, error)
	// TestRequestRequiredStringUUID invokes test_request_required_string_uuid operation.
	//
	// POST /test_request_required_string_uuid
	TestRequestRequiredStringUUID(ctx context.Context, request uuid.UUID) (*Error, error)
	// TestRequestRequiredStringUUIDArray invokes test_request_required_string_uuid_array operation.
	//
	// POST /test_request_required_string_uuid_array
	TestRequestRequiredStringUUIDArray(ctx context.Context, request []uuid.UUID) (*Error, error)
	// TestRequestRequiredStringUUIDArrayArray invokes test_request_required_string_uuid_array_array operation.
	//
	// POST /test_request_required_string_uuid_array_array
	TestRequestRequiredStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (*Error, error)
	// TestRequestRequiredStringUUIDNullable invokes test_request_required_string_uuid_nullable operation.
	//
	// POST /test_request_required_string_uuid_nullable
	TestRequestRequiredStringUUIDNullable(ctx context.Context, request NilUUID) (*Error, error)
	// TestRequestRequiredStringUUIDNullableArray invokes test_request_required_string_uuid_nullable_array operation.
	//
	// POST /test_request_required_string_uuid_nullable_array
	TestRequestRequiredStringUUIDNullableArray(ctx context.Context, request []NilUUID) (*Error, error)
	// TestRequestRequiredStringUUIDNullableArrayArray invokes test_request_required_string_uuid_nullable_array_array operation.
	//
	// POST /test_request_required_string_uuid_nullable_array_array
	TestRequestRequiredStringUUIDNullableArrayArray(ctx context.Context, request [][]NilUUID) (*Error, error)
	// TestRequestRequiredStringUint invokes test_request_required_string_uint operation.
	//
	// POST /test_request_required_string_uint
	TestRequestRequiredStringUint(ctx context.Context, request uint) (*Error, error)
	// TestRequestRequiredStringUint16 invokes test_request_required_string_uint16 operation.
	//
	// POST /test_request_required_string_uint16
	TestRequestRequiredStringUint16(ctx context.Context, request uint16) (*Error, error)
	// TestRequestRequiredStringUint16Array invokes test_request_required_string_uint16_array operation.
	//
	// POST /test_request_required_string_uint16_array
	TestRequestRequiredStringUint16Array(ctx context.Context, request []uint16) (*Error, error)
	// TestRequestRequiredStringUint16ArrayArray invokes test_request_required_string_uint16_array_array operation.
	//
	// POST /test_request_required_string_uint16_array_array
	TestRequestRequiredStringUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error)
	// TestRequestRequiredStringUint16Nullable invokes test_request_required_string_uint16_nullable operation.
	//
	// POST /test_request_required_string_uint16_nullable
	TestRequestRequiredStringUint16Nullable(ctx context.Context, request NilStringUint16) (*Error, error)
	// TestRequestRequiredStringUint16NullableArray invokes test_request_required_string_uint16_nullable_array operation.
	//
	// POST /test_request_required_string_uint16_nullable_array
	TestRequestRequiredStringUint16NullableArray(ctx context.Context, request []NilStringUint16) (*Error, error)
	// TestRequestRequiredStringUint16NullableArrayArray invokes test_request_required_string_uint16_nullable_array_array operation.
	//
	// POST /test_request_required_string_uint16_nullable_array_array
	TestRequestRequiredStringUint16NullableArrayArray(ctx context.Context, request [][]NilStringUint16) (*Error, error)
	// TestRequestRequiredStringUint32 invokes test_request_required_string_uint32 operation.
	//
	// POST /test_request_required_string_uint32
	TestRequestRequiredStringUint32(ctx context.Context, request uint32) (*Error, error)
	// TestRequestRequiredStringUint32Array invokes test_request_required_string_uint32_array operation.
	//
	// POST /test_request_required_string_uint32_array
	TestRequestRequiredStringUint32Array(ctx context.Context, request []uint32) (*Error, error)
	// TestRequestRequiredStringUint32ArrayArray invokes test_request_required_string_uint32_array_array operation.
	//
	// POST /test_request_required_string_uint32_array_array
	TestRequestRequiredStringUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error)
	// TestRequestRequiredStringUint32Nullable invokes test_request_required_string_uint32_nullable operation.
	//
	// POST /test_request_required_string_uint32_nullable
	TestRequestRequiredStringUint32Nullable(ctx context.Context, request NilStringUint32) (*Error, error)
	// TestRequestRequiredStringUint32NullableArray invokes test_request_required_string_uint32_nullable_array operation.
	//
	// POST /test_request_required_string_uint32_nullable_array
	TestRequestRequiredStringUint32NullableArray(ctx context.Context, request []NilStringUint32) (*Error, error)
	// TestRequestRequiredStringUint32NullableArrayArray invokes test_request_required_string_uint32_nullable_array_array operation.
	//
	// POST /test_request_required_string_uint32_nullable_array_array
	TestRequestRequiredStringUint32NullableArrayArray(ctx context.Context, request [][]NilStringUint32) (*Error, error)
	// TestRequestRequiredStringUint64 invokes test_request_required_string_uint64 operation.
	//
	// POST /test_request_required_string_uint64
	TestRequestRequiredStringUint64(ctx context.Context, request uint64) (*Error, error)
	// TestRequestRequiredStringUint64Array invokes test_request_required_string_uint64_array operation.
	//
	// POST /test_request_required_string_uint64_array
	TestRequestRequiredStringUint64Array(ctx context.Context, request []uint64) (*Error, error)
	// TestRequestRequiredStringUint64ArrayArray invokes test_request_required_string_uint64_array_array operation.
	//
	// POST /test_request_required_string_uint64_array_array
	TestRequestRequiredStringUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error)
	// TestRequestRequiredStringUint64Nullable invokes test_request_required_string_uint64_nullable operation.
	//
	// POST /test_request_required_string_uint64_nullable
	TestRequestRequiredStringUint64Nullable(ctx context.Context, request NilStringUint64) (*Error, error)
	// TestRequestRequiredStringUint64NullableArray invokes test_request_required_string_uint64_nullable_array operation.
	//
	// POST /test_request_required_string_uint64_nullable_array
	TestRequestRequiredStringUint64NullableArray(ctx context.Context, request []NilStringUint64) (*Error, error)
	// TestRequestRequiredStringUint64NullableArrayArray invokes test_request_required_string_uint64_nullable_array_array operation.
	//
	// POST /test_request_required_string_uint64_nullable_array_array
	TestRequestRequiredStringUint64NullableArrayArray(ctx context.Context, request [][]NilStringUint64) (*Error, error)
	// TestRequestRequiredStringUint8 invokes test_request_required_string_uint8 operation.
	//
	// POST /test_request_required_string_uint8
	TestRequestRequiredStringUint8(ctx context.Context, request uint8) (*Error, error)
	// TestRequestRequiredStringUint8Array invokes test_request_required_string_uint8_array operation.
	//
	// POST /test_request_required_string_uint8_array
	TestRequestRequiredStringUint8Array(ctx context.Context, request []uint8) (*Error, error)
	// TestRequestRequiredStringUint8ArrayArray invokes test_request_required_string_uint8_array_array operation.
	//
	// POST /test_request_required_string_uint8_array_array
	TestRequestRequiredStringUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error)
	// TestRequestRequiredStringUint8Nullable invokes test_request_required_string_uint8_nullable operation.
	//
	// POST /test_request_required_string_uint8_nullable
	TestRequestRequiredStringUint8Nullable(ctx context.Context, request NilStringUint8) (*Error, error)
	// TestRequestRequiredStringUint8NullableArray invokes test_request_required_string_uint8_nullable_array operation.
	//
	// POST /test_request_required_string_uint8_nullable_array
	TestRequestRequiredStringUint8NullableArray(ctx context.Context, request []NilStringUint8) (*Error, error)
	// TestRequestRequiredStringUint8NullableArrayArray invokes test_request_required_string_uint8_nullable_array_array operation.
	//
	// POST /test_request_required_string_uint8_nullable_array_array
	TestRequestRequiredStringUint8NullableArrayArray(ctx context.Context, request [][]NilStringUint8) (*Error, error)
	// TestRequestRequiredStringUintArray invokes test_request_required_string_uint_array operation.
	//
	// POST /test_request_required_string_uint_array
	TestRequestRequiredStringUintArray(ctx context.Context, request []uint) (*Error, error)
	// TestRequestRequiredStringUintArrayArray invokes test_request_required_string_uint_array_array operation.
	//
	// POST /test_request_required_string_uint_array_array
	TestRequestRequiredStringUintArrayArray(ctx context.Context, request [][]uint) (*Error, error)
	// TestRequestRequiredStringUintNullable invokes test_request_required_string_uint_nullable operation.
	//
	// POST /test_request_required_string_uint_nullable
	TestRequestRequiredStringUintNullable(ctx context.Context, request NilStringUint) (*Error, error)
	// TestRequestRequiredStringUintNullableArray invokes test_request_required_string_uint_nullable_array operation.
	//
	// POST /test_request_required_string_uint_nullable_array
	TestRequestRequiredStringUintNullableArray(ctx context.Context, request []NilStringUint) (*Error, error)
	// TestRequestRequiredStringUintNullableArrayArray invokes test_request_required_string_uint_nullable_array_array operation.
	//
	// POST /test_request_required_string_uint_nullable_array_array
	TestRequestRequiredStringUintNullableArrayArray(ctx context.Context, request [][]NilStringUint) (*Error, error)
	// TestRequestRequiredStringUnix invokes test_request_required_string_unix operation.
	//
	// POST /test_request_required_string_unix
	TestRequestRequiredStringUnix(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringUnixArray invokes test_request_required_string_unix_array operation.
	//
	// POST /test_request_required_string_unix_array
	TestRequestRequiredStringUnixArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringUnixArrayArray invokes test_request_required_string_unix_array_array operation.
	//
	// POST /test_request_required_string_unix_array_array
	TestRequestRequiredStringUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMicro invokes test_request_required_string_unix-micro operation.
	//
	// POST /test_request_required_string_unix-micro
	TestRequestRequiredStringUnixMicro(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMicroArray invokes test_request_required_string_unix-micro_array operation.
	//
	// POST /test_request_required_string_unix-micro_array
	TestRequestRequiredStringUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMicroArrayArray invokes test_request_required_string_unix-micro_array_array operation.
	//
	// POST /test_request_required_string_unix-micro_array_array
	TestRequestRequiredStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMicroNullable invokes test_request_required_string_unix-micro_nullable operation.
	//
	// POST /test_request_required_string_unix-micro_nullable
	TestRequestRequiredStringUnixMicroNullable(ctx context.Context, request NilStringUnixMicro) (*Error, error)
	// TestRequestRequiredStringUnixMicroNullableArray invokes test_request_required_string_unix-micro_nullable_array operation.
	//
	// POST /test_request_required_string_unix-micro_nullable_array
	TestRequestRequiredStringUnixMicroNullableArray(ctx context.Context, request []NilStringUnixMicro) (*Error, error)
	// TestRequestRequiredStringUnixMicroNullableArrayArray invokes test_request_required_string_unix-micro_nullable_array_array operation.
	//
	// POST /test_request_required_string_unix-micro_nullable_array_array
	TestRequestRequiredStringUnixMicroNullableArrayArray(ctx context.Context, request [][]NilStringUnixMicro) (*Error, error)
	// TestRequestRequiredStringUnixMilli invokes test_request_required_string_unix-milli operation.
	//
	// POST /test_request_required_string_unix-milli
	TestRequestRequiredStringUnixMilli(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMilliArray invokes test_request_required_string_unix-milli_array operation.
	//
	// POST /test_request_required_string_unix-milli_array
	TestRequestRequiredStringUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMilliArrayArray invokes test_request_required_string_unix-milli_array_array operation.
	//
	// POST /test_request_required_string_unix-milli_array_array
	TestRequestRequiredStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringUnixMilliNullable invokes test_request_required_string_unix-milli_nullable operation.
	//
	// POST /test_request_required_string_unix-milli_nullable
	TestRequestRequiredStringUnixMilliNullable(ctx context.Context, request NilStringUnixMilli) (*Error, error)
	// TestRequestRequiredStringUnixMilliNullableArray invokes test_request_required_string_unix-milli_nullable_array operation.
	//
	// POST /test_request_required_string_unix-milli_nullable_array
	TestRequestRequiredStringUnixMilliNullableArray(ctx context.Context, request []NilStringUnixMilli) (*Error, error)
	// TestRequestRequiredStringUnixMilliNullableArrayArray invokes test_request_required_string_unix-milli_nullable_array_array operation.
	//
	// POST /test_request_required_string_unix-milli_nullable_array_array
	TestRequestRequiredStringUnixMilliNullableArrayArray(ctx context.Context, request [][]NilStringUnixMilli) (*Error, error)
	// TestRequestRequiredStringUnixNano invokes test_request_required_string_unix-nano operation.
	//
	// POST /test_request_required_string_unix-nano
	TestRequestRequiredStringUnixNano(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringUnixNanoArray invokes test_request_required_string_unix-nano_array operation.
	//
	// POST /test_request_required_string_unix-nano_array
	TestRequestRequiredStringUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringUnixNanoArrayArray invokes test_request_required_string_unix-nano_array_array operation.
	//
	// POST /test_request_required_string_unix-nano_array_array
	TestRequestRequiredStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringUnixNanoNullable invokes test_request_required_string_unix-nano_nullable operation.
	//
	// POST /test_request_required_string_unix-nano_nullable
	TestRequestRequiredStringUnixNanoNullable(ctx context.Context, request NilStringUnixNano) (*Error, error)
	// TestRequestRequiredStringUnixNanoNullableArray invokes test_request_required_string_unix-nano_nullable_array operation.
	//
	// POST /test_request_required_string_unix-nano_nullable_array
	TestRequestRequiredStringUnixNanoNullableArray(ctx context.Context, request []NilStringUnixNano) (*Error, error)
	// TestRequestRequiredStringUnixNanoNullableArrayArray invokes test_request_required_string_unix-nano_nullable_array_array operation.
	//
	// POST /test_request_required_string_unix-nano_nullable_array_array
	TestRequestRequiredStringUnixNanoNullableArrayArray(ctx context.Context, request [][]NilStringUnixNano) (*Error, error)
	// TestRequestRequiredStringUnixNullable invokes test_request_required_string_unix_nullable operation.
	//
	// POST /test_request_required_string_unix_nullable
	TestRequestRequiredStringUnixNullable(ctx context.Context, request NilStringUnixSeconds) (*Error, error)
	// TestRequestRequiredStringUnixNullableArray invokes test_request_required_string_unix_nullable_array operation.
	//
	// POST /test_request_required_string_unix_nullable_array
	TestRequestRequiredStringUnixNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error)
	// TestRequestRequiredStringUnixNullableArrayArray invokes test_request_required_string_unix_nullable_array_array operation.
	//
	// POST /test_request_required_string_unix_nullable_array_array
	TestRequestRequiredStringUnixNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error)
	// TestRequestRequiredStringUnixSeconds invokes test_request_required_string_unix-seconds operation.
	//
	// POST /test_request_required_string_unix-seconds
	TestRequestRequiredStringUnixSeconds(ctx context.Context, request time.Time) (*Error, error)
	// TestRequestRequiredStringUnixSecondsArray invokes test_request_required_string_unix-seconds_array operation.
	//
	// POST /test_request_required_string_unix-seconds_array
	TestRequestRequiredStringUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestRequiredStringUnixSecondsArrayArray invokes test_request_required_string_unix-seconds_array_array operation.
	//
	// POST /test_request_required_string_unix-seconds_array_array
	TestRequestRequiredStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestRequiredStringUnixSecondsNullable invokes test_request_required_string_unix-seconds_nullable operation.
	//
	// POST /test_request_required_string_unix-seconds_nullable
	TestRequestRequiredStringUnixSecondsNullable(ctx context.Context, request NilStringUnixSeconds) (*Error, error)
	// TestRequestRequiredStringUnixSecondsNullableArray invokes test_request_required_string_unix-seconds_nullable_array operation.
	//
	// POST /test_request_required_string_unix-seconds_nullable_array
	TestRequestRequiredStringUnixSecondsNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error)
	// TestRequestRequiredStringUnixSecondsNullableArrayArray invokes test_request_required_string_unix-seconds_nullable_array_array operation.
	//
	// POST /test_request_required_string_unix-seconds_nullable_array_array
	TestRequestRequiredStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error)
	// TestRequestString invokes test_request_string operation.
	//
	// POST /test_request_string
	TestRequestString(ctx context.Context, request OptString) (*Error, error)
	// TestRequestStringArray invokes test_request_string_array operation.
	//
	// POST /test_request_string_array
	TestRequestStringArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestStringArrayArray invokes test_request_string_array_array operation.
	//
	// POST /test_request_string_array_array
	TestRequestStringArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestStringBase64 invokes test_request_string_base64 operation.
	//
	// POST /test_request_string_base64
	TestRequestStringBase64(ctx context.Context, request []byte) (*Error, error)
	// TestRequestStringBase64Array invokes test_request_string_base64_array operation.
	//
	// POST /test_request_string_base64_array
	TestRequestStringBase64Array(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestStringBase64ArrayArray invokes test_request_string_base64_array_array operation.
	//
	// POST /test_request_string_base64_array_array
	TestRequestStringBase64ArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestStringBase64Nullable invokes test_request_string_base64_nullable operation.
	//
	// POST /test_request_string_base64_nullable
	TestRequestStringBase64Nullable(ctx context.Context, request OptNilByte) (*Error, error)
	// TestRequestStringBase64NullableArray invokes test_request_string_base64_nullable_array operation.
	//
	// POST /test_request_string_base64_nullable_array
	TestRequestStringBase64NullableArray(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestStringBase64NullableArrayArray invokes test_request_string_base64_nullable_array_array operation.
	//
	// POST /test_request_string_base64_nullable_array_array
	TestRequestStringBase64NullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestStringBinary invokes test_request_string_binary operation.
	//
	// POST /test_request_string_binary
	TestRequestStringBinary(ctx context.Context, request OptString) (*Error, error)
	// TestRequestStringBinaryArray invokes test_request_string_binary_array operation.
	//
	// POST /test_request_string_binary_array
	TestRequestStringBinaryArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestStringBinaryArrayArray invokes test_request_string_binary_array_array operation.
	//
	// POST /test_request_string_binary_array_array
	TestRequestStringBinaryArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestStringBinaryNullable invokes test_request_string_binary_nullable operation.
	//
	// POST /test_request_string_binary_nullable
	TestRequestStringBinaryNullable(ctx context.Context, request OptNilString) (*Error, error)
	// TestRequestStringBinaryNullableArray invokes test_request_string_binary_nullable_array operation.
	//
	// POST /test_request_string_binary_nullable_array
	TestRequestStringBinaryNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestStringBinaryNullableArrayArray invokes test_request_string_binary_nullable_array_array operation.
	//
	// POST /test_request_string_binary_nullable_array_array
	TestRequestStringBinaryNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestStringByte invokes test_request_string_byte operation.
	//
	// POST /test_request_string_byte
	TestRequestStringByte(ctx context.Context, request []byte) (*Error, error)
	// TestRequestStringByteArray invokes test_request_string_byte_array operation.
	//
	// POST /test_request_string_byte_array
	TestRequestStringByteArray(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestStringByteArrayArray invokes test_request_string_byte_array_array operation.
	//
	// POST /test_request_string_byte_array_array
	TestRequestStringByteArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestStringByteNullable invokes test_request_string_byte_nullable operation.
	//
	// POST /test_request_string_byte_nullable
	TestRequestStringByteNullable(ctx context.Context, request OptNilByte) (*Error, error)
	// TestRequestStringByteNullableArray invokes test_request_string_byte_nullable_array operation.
	//
	// POST /test_request_string_byte_nullable_array
	TestRequestStringByteNullableArray(ctx context.Context, request [][]byte) (*Error, error)
	// TestRequestStringByteNullableArrayArray invokes test_request_string_byte_nullable_array_array operation.
	//
	// POST /test_request_string_byte_nullable_array_array
	TestRequestStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error)
	// TestRequestStringDate invokes test_request_string_date operation.
	//
	// POST /test_request_string_date
	TestRequestStringDate(ctx context.Context, request OptDate) (*Error, error)
	// TestRequestStringDateArray invokes test_request_string_date_array operation.
	//
	// POST /test_request_string_date_array
	TestRequestStringDateArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringDateArrayArray invokes test_request_string_date_array_array operation.
	//
	// POST /test_request_string_date_array_array
	TestRequestStringDateArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringDateNullable invokes test_request_string_date_nullable operation.
	//
	// POST /test_request_string_date_nullable
	TestRequestStringDateNullable(ctx context.Context, request OptNilDate) (*Error, error)
	// TestRequestStringDateNullableArray invokes test_request_string_date_nullable_array operation.
	//
	// POST /test_request_string_date_nullable_array
	TestRequestStringDateNullableArray(ctx context.Context, request []NilDate) (*Error, error)
	// TestRequestStringDateNullableArrayArray invokes test_request_string_date_nullable_array_array operation.
	//
	// POST /test_request_string_date_nullable_array_array
	TestRequestStringDateNullableArrayArray(ctx context.Context, request [][]NilDate) (*Error, error)
	// TestRequestStringDateTime invokes test_request_string_date-time operation.
	//
	// POST /test_request_string_date-time
	TestRequestStringDateTime(ctx context.Context, request OptDateTime) (*Error, error)
	// TestRequestStringDateTimeArray invokes test_request_string_date-time_array operation.
	//
	// POST /test_request_string_date-time_array
	TestRequestStringDateTimeArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringDateTimeArrayArray invokes test_request_string_date-time_array_array operation.
	//
	// POST /test_request_string_date-time_array_array
	TestRequestStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringDateTimeNullable invokes test_request_string_date-time_nullable operation.
	//
	// POST /test_request_string_date-time_nullable
	TestRequestStringDateTimeNullable(ctx context.Context, request OptNilDateTime) (*Error, error)
	// TestRequestStringDateTimeNullableArray invokes test_request_string_date-time_nullable_array operation.
	//
	// POST /test_request_string_date-time_nullable_array
	TestRequestStringDateTimeNullableArray(ctx context.Context, request []NilDateTime) (*Error, error)
	// TestRequestStringDateTimeNullableArrayArray invokes test_request_string_date-time_nullable_array_array operation.
	//
	// POST /test_request_string_date-time_nullable_array_array
	TestRequestStringDateTimeNullableArrayArray(ctx context.Context, request [][]NilDateTime) (*Error, error)
	// TestRequestStringDuration invokes test_request_string_duration operation.
	//
	// POST /test_request_string_duration
	TestRequestStringDuration(ctx context.Context, request OptDuration) (*Error, error)
	// TestRequestStringDurationArray invokes test_request_string_duration_array operation.
	//
	// POST /test_request_string_duration_array
	TestRequestStringDurationArray(ctx context.Context, request []time.Duration) (*Error, error)
	// TestRequestStringDurationArrayArray invokes test_request_string_duration_array_array operation.
	//
	// POST /test_request_string_duration_array_array
	TestRequestStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (*Error, error)
	// TestRequestStringDurationNullable invokes test_request_string_duration_nullable operation.
	//
	// POST /test_request_string_duration_nullable
	TestRequestStringDurationNullable(ctx context.Context, request OptNilDuration) (*Error, error)
	// TestRequestStringDurationNullableArray invokes test_request_string_duration_nullable_array operation.
	//
	// POST /test_request_string_duration_nullable_array
	TestRequestStringDurationNullableArray(ctx context.Context, request []NilDuration) (*Error, error)
	// TestRequestStringDurationNullableArrayArray invokes test_request_string_duration_nullable_array_array operation.
	//
	// POST /test_request_string_duration_nullable_array_array
	TestRequestStringDurationNullableArrayArray(ctx context.Context, request [][]NilDuration) (*Error, error)
	// TestRequestStringEmail invokes test_request_string_email operation.
	//
	// POST /test_request_string_email
	TestRequestStringEmail(ctx context.Context, request OptString) (*Error, error)
	// TestRequestStringEmailArray invokes test_request_string_email_array operation.
	//
	// POST /test_request_string_email_array
	TestRequestStringEmailArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestStringEmailArrayArray invokes test_request_string_email_array_array operation.
	//
	// POST /test_request_string_email_array_array
	TestRequestStringEmailArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestStringEmailNullable invokes test_request_string_email_nullable operation.
	//
	// POST /test_request_string_email_nullable
	TestRequestStringEmailNullable(ctx context.Context, request OptNilString) (*Error, error)
	// TestRequestStringEmailNullableArray invokes test_request_string_email_nullable_array operation.
	//
	// POST /test_request_string_email_nullable_array
	TestRequestStringEmailNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestStringEmailNullableArrayArray invokes test_request_string_email_nullable_array_array operation.
	//
	// POST /test_request_string_email_nullable_array_array
	TestRequestStringEmailNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestStringFloat32 invokes test_request_string_float32 operation.
	//
	// POST /test_request_string_float32
	TestRequestStringFloat32(ctx context.Context, request OptStringFloat32) (*Error, error)
	// TestRequestStringFloat32Array invokes test_request_string_float32_array operation.
	//
	// POST /test_request_string_float32_array
	TestRequestStringFloat32Array(ctx context.Context, request []float32) (*Error, error)
	// TestRequestStringFloat32ArrayArray invokes test_request_string_float32_array_array operation.
	//
	// POST /test_request_string_float32_array_array
	TestRequestStringFloat32ArrayArray(ctx context.Context, request [][]float32) (*Error, error)
	// TestRequestStringFloat32Nullable invokes test_request_string_float32_nullable operation.
	//
	// POST /test_request_string_float32_nullable
	TestRequestStringFloat32Nullable(ctx context.Context, request OptNilStringFloat32) (*Error, error)
	// TestRequestStringFloat32NullableArray invokes test_request_string_float32_nullable_array operation.
	//
	// POST /test_request_string_float32_nullable_array
	TestRequestStringFloat32NullableArray(ctx context.Context, request []NilStringFloat32) (*Error, error)
	// TestRequestStringFloat32NullableArrayArray invokes test_request_string_float32_nullable_array_array operation.
	//
	// POST /test_request_string_float32_nullable_array_array
	TestRequestStringFloat32NullableArrayArray(ctx context.Context, request [][]NilStringFloat32) (*Error, error)
	// TestRequestStringFloat64 invokes test_request_string_float64 operation.
	//
	// POST /test_request_string_float64
	TestRequestStringFloat64(ctx context.Context, request OptStringFloat64) (*Error, error)
	// TestRequestStringFloat64Array invokes test_request_string_float64_array operation.
	//
	// POST /test_request_string_float64_array
	TestRequestStringFloat64Array(ctx context.Context, request []float64) (*Error, error)
	// TestRequestStringFloat64ArrayArray invokes test_request_string_float64_array_array operation.
	//
	// POST /test_request_string_float64_array_array
	TestRequestStringFloat64ArrayArray(ctx context.Context, request [][]float64) (*Error, error)
	// TestRequestStringFloat64Nullable invokes test_request_string_float64_nullable operation.
	//
	// POST /test_request_string_float64_nullable
	TestRequestStringFloat64Nullable(ctx context.Context, request OptNilStringFloat64) (*Error, error)
	// TestRequestStringFloat64NullableArray invokes test_request_string_float64_nullable_array operation.
	//
	// POST /test_request_string_float64_nullable_array
	TestRequestStringFloat64NullableArray(ctx context.Context, request []NilStringFloat64) (*Error, error)
	// TestRequestStringFloat64NullableArrayArray invokes test_request_string_float64_nullable_array_array operation.
	//
	// POST /test_request_string_float64_nullable_array_array
	TestRequestStringFloat64NullableArrayArray(ctx context.Context, request [][]NilStringFloat64) (*Error, error)
	// TestRequestStringHostname invokes test_request_string_hostname operation.
	//
	// POST /test_request_string_hostname
	TestRequestStringHostname(ctx context.Context, request OptString) (*Error, error)
	// TestRequestStringHostnameArray invokes test_request_string_hostname_array operation.
	//
	// POST /test_request_string_hostname_array
	TestRequestStringHostnameArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestStringHostnameArrayArray invokes test_request_string_hostname_array_array operation.
	//
	// POST /test_request_string_hostname_array_array
	TestRequestStringHostnameArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestStringHostnameNullable invokes test_request_string_hostname_nullable operation.
	//
	// POST /test_request_string_hostname_nullable
	TestRequestStringHostnameNullable(ctx context.Context, request OptNilString) (*Error, error)
	// TestRequestStringHostnameNullableArray invokes test_request_string_hostname_nullable_array operation.
	//
	// POST /test_request_string_hostname_nullable_array
	TestRequestStringHostnameNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestStringHostnameNullableArrayArray invokes test_request_string_hostname_nullable_array_array operation.
	//
	// POST /test_request_string_hostname_nullable_array_array
	TestRequestStringHostnameNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestStringIP invokes test_request_string_ip operation.
	//
	// POST /test_request_string_ip
	TestRequestStringIP(ctx context.Context, request OptIP) (*Error, error)
	// TestRequestStringIPArray invokes test_request_string_ip_array operation.
	//
	// POST /test_request_string_ip_array
	TestRequestStringIPArray(ctx context.Context, request []netip.Addr) (*Error, error)
	// TestRequestStringIPArrayArray invokes test_request_string_ip_array_array operation.
	//
	// POST /test_request_string_ip_array_array
	TestRequestStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error)
	// TestRequestStringIPNullable invokes test_request_string_ip_nullable operation.
	//
	// POST /test_request_string_ip_nullable
	TestRequestStringIPNullable(ctx context.Context, request OptNilIP) (*Error, error)
	// TestRequestStringIPNullableArray invokes test_request_string_ip_nullable_array operation.
	//
	// POST /test_request_string_ip_nullable_array
	TestRequestStringIPNullableArray(ctx context.Context, request []NilIP) (*Error, error)
	// TestRequestStringIPNullableArrayArray invokes test_request_string_ip_nullable_array_array operation.
	//
	// POST /test_request_string_ip_nullable_array_array
	TestRequestStringIPNullableArrayArray(ctx context.Context, request [][]NilIP) (*Error, error)
	// TestRequestStringInt invokes test_request_string_int operation.
	//
	// POST /test_request_string_int
	TestRequestStringInt(ctx context.Context, request OptStringInt) (*Error, error)
	// TestRequestStringInt16 invokes test_request_string_int16 operation.
	//
	// POST /test_request_string_int16
	TestRequestStringInt16(ctx context.Context, request OptStringInt16) (*Error, error)
	// TestRequestStringInt16Array invokes test_request_string_int16_array operation.
	//
	// POST /test_request_string_int16_array
	TestRequestStringInt16Array(ctx context.Context, request []int16) (*Error, error)
	// TestRequestStringInt16ArrayArray invokes test_request_string_int16_array_array operation.
	//
	// POST /test_request_string_int16_array_array
	TestRequestStringInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error)
	// TestRequestStringInt16Nullable invokes test_request_string_int16_nullable operation.
	//
	// POST /test_request_string_int16_nullable
	TestRequestStringInt16Nullable(ctx context.Context, request OptNilStringInt16) (*Error, error)
	// TestRequestStringInt16NullableArray invokes test_request_string_int16_nullable_array operation.
	//
	// POST /test_request_string_int16_nullable_array
	TestRequestStringInt16NullableArray(ctx context.Context, request []NilStringInt16) (*Error, error)
	// TestRequestStringInt16NullableArrayArray invokes test_request_string_int16_nullable_array_array operation.
	//
	// POST /test_request_string_int16_nullable_array_array
	TestRequestStringInt16NullableArrayArray(ctx context.Context, request [][]NilStringInt16) (*Error, error)
	// TestRequestStringInt32 invokes test_request_string_int32 operation.
	//
	// POST /test_request_string_int32
	TestRequestStringInt32(ctx context.Context, request OptStringInt32) (*Error, error)
	// TestRequestStringInt32Array invokes test_request_string_int32_array operation.
	//
	// POST /test_request_string_int32_array
	TestRequestStringInt32Array(ctx context.Context, request []int32) (*Error, error)
	// TestRequestStringInt32ArrayArray invokes test_request_string_int32_array_array operation.
	//
	// POST /test_request_string_int32_array_array
	TestRequestStringInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error)
	// TestRequestStringInt32Nullable invokes test_request_string_int32_nullable operation.
	//
	// POST /test_request_string_int32_nullable
	TestRequestStringInt32Nullable(ctx context.Context, request OptNilStringInt32) (*Error, error)
	// TestRequestStringInt32NullableArray invokes test_request_string_int32_nullable_array operation.
	//
	// POST /test_request_string_int32_nullable_array
	TestRequestStringInt32NullableArray(ctx context.Context, request []NilStringInt32) (*Error, error)
	// TestRequestStringInt32NullableArrayArray invokes test_request_string_int32_nullable_array_array operation.
	//
	// POST /test_request_string_int32_nullable_array_array
	TestRequestStringInt32NullableArrayArray(ctx context.Context, request [][]NilStringInt32) (*Error, error)
	// TestRequestStringInt64 invokes test_request_string_int64 operation.
	//
	// POST /test_request_string_int64
	TestRequestStringInt64(ctx context.Context, request OptStringInt64) (*Error, error)
	// TestRequestStringInt64Array invokes test_request_string_int64_array operation.
	//
	// POST /test_request_string_int64_array
	TestRequestStringInt64Array(ctx context.Context, request []int64) (*Error, error)
	// TestRequestStringInt64ArrayArray invokes test_request_string_int64_array_array operation.
	//
	// POST /test_request_string_int64_array_array
	TestRequestStringInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error)
	// TestRequestStringInt64Nullable invokes test_request_string_int64_nullable operation.
	//
	// POST /test_request_string_int64_nullable
	TestRequestStringInt64Nullable(ctx context.Context, request OptNilStringInt64) (*Error, error)
	// TestRequestStringInt64NullableArray invokes test_request_string_int64_nullable_array operation.
	//
	// POST /test_request_string_int64_nullable_array
	TestRequestStringInt64NullableArray(ctx context.Context, request []NilStringInt64) (*Error, error)
	// TestRequestStringInt64NullableArrayArray invokes test_request_string_int64_nullable_array_array operation.
	//
	// POST /test_request_string_int64_nullable_array_array
	TestRequestStringInt64NullableArrayArray(ctx context.Context, request [][]NilStringInt64) (*Error, error)
	// TestRequestStringInt8 invokes test_request_string_int8 operation.
	//
	// POST /test_request_string_int8
	TestRequestStringInt8(ctx context.Context, request OptStringInt8) (*Error, error)
	// TestRequestStringInt8Array invokes test_request_string_int8_array operation.
	//
	// POST /test_request_string_int8_array
	TestRequestStringInt8Array(ctx context.Context, request []int8) (*Error, error)
	// TestRequestStringInt8ArrayArray invokes test_request_string_int8_array_array operation.
	//
	// POST /test_request_string_int8_array_array
	TestRequestStringInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error)
	// TestRequestStringInt8Nullable invokes test_request_string_int8_nullable operation.
	//
	// POST /test_request_string_int8_nullable
	TestRequestStringInt8Nullable(ctx context.Context, request OptNilStringInt8) (*Error, error)
	// TestRequestStringInt8NullableArray invokes test_request_string_int8_nullable_array operation.
	//
	// POST /test_request_string_int8_nullable_array
	TestRequestStringInt8NullableArray(ctx context.Context, request []NilStringInt8) (*Error, error)
	// TestRequestStringInt8NullableArrayArray invokes test_request_string_int8_nullable_array_array operation.
	//
	// POST /test_request_string_int8_nullable_array_array
	TestRequestStringInt8NullableArrayArray(ctx context.Context, request [][]NilStringInt8) (*Error, error)
	// TestRequestStringIntArray invokes test_request_string_int_array operation.
	//
	// POST /test_request_string_int_array
	TestRequestStringIntArray(ctx context.Context, request []int) (*Error, error)
	// TestRequestStringIntArrayArray invokes test_request_string_int_array_array operation.
	//
	// POST /test_request_string_int_array_array
	TestRequestStringIntArrayArray(ctx context.Context, request [][]int) (*Error, error)
	// TestRequestStringIntNullable invokes test_request_string_int_nullable operation.
	//
	// POST /test_request_string_int_nullable
	TestRequestStringIntNullable(ctx context.Context, request OptNilStringInt) (*Error, error)
	// TestRequestStringIntNullableArray invokes test_request_string_int_nullable_array operation.
	//
	// POST /test_request_string_int_nullable_array
	TestRequestStringIntNullableArray(ctx context.Context, request []NilStringInt) (*Error, error)
	// TestRequestStringIntNullableArrayArray invokes test_request_string_int_nullable_array_array operation.
	//
	// POST /test_request_string_int_nullable_array_array
	TestRequestStringIntNullableArrayArray(ctx context.Context, request [][]NilStringInt) (*Error, error)
	// TestRequestStringIpv4 invokes test_request_string_ipv4 operation.
	//
	// POST /test_request_string_ipv4
	TestRequestStringIpv4(ctx context.Context, request OptIPv4) (*Error, error)
	// TestRequestStringIpv4Array invokes test_request_string_ipv4_array operation.
	//
	// POST /test_request_string_ipv4_array
	TestRequestStringIpv4Array(ctx context.Context, request []netip.Addr) (*Error, error)
	// TestRequestStringIpv4ArrayArray invokes test_request_string_ipv4_array_array operation.
	//
	// POST /test_request_string_ipv4_array_array
	TestRequestStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error)
	// TestRequestStringIpv4Nullable invokes test_request_string_ipv4_nullable operation.
	//
	// POST /test_request_string_ipv4_nullable
	TestRequestStringIpv4Nullable(ctx context.Context, request OptNilIPv4) (*Error, error)
	// TestRequestStringIpv4NullableArray invokes test_request_string_ipv4_nullable_array operation.
	//
	// POST /test_request_string_ipv4_nullable_array
	TestRequestStringIpv4NullableArray(ctx context.Context, request []NilIPv4) (*Error, error)
	// TestRequestStringIpv4NullableArrayArray invokes test_request_string_ipv4_nullable_array_array operation.
	//
	// POST /test_request_string_ipv4_nullable_array_array
	TestRequestStringIpv4NullableArrayArray(ctx context.Context, request [][]NilIPv4) (*Error, error)
	// TestRequestStringIpv6 invokes test_request_string_ipv6 operation.
	//
	// POST /test_request_string_ipv6
	TestRequestStringIpv6(ctx context.Context, request OptIPv6) (*Error, error)
	// TestRequestStringIpv6Array invokes test_request_string_ipv6_array operation.
	//
	// POST /test_request_string_ipv6_array
	TestRequestStringIpv6Array(ctx context.Context, request []netip.Addr) (*Error, error)
	// TestRequestStringIpv6ArrayArray invokes test_request_string_ipv6_array_array operation.
	//
	// POST /test_request_string_ipv6_array_array
	TestRequestStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error)
	// TestRequestStringIpv6Nullable invokes test_request_string_ipv6_nullable operation.
	//
	// POST /test_request_string_ipv6_nullable
	TestRequestStringIpv6Nullable(ctx context.Context, request OptNilIPv6) (*Error, error)
	// TestRequestStringIpv6NullableArray invokes test_request_string_ipv6_nullable_array operation.
	//
	// POST /test_request_string_ipv6_nullable_array
	TestRequestStringIpv6NullableArray(ctx context.Context, request []NilIPv6) (*Error, error)
	// TestRequestStringIpv6NullableArrayArray invokes test_request_string_ipv6_nullable_array_array operation.
	//
	// POST /test_request_string_ipv6_nullable_array_array
	TestRequestStringIpv6NullableArrayArray(ctx context.Context, request [][]NilIPv6) (*Error, error)
	// TestRequestStringNullable invokes test_request_string_nullable operation.
	//
	// POST /test_request_string_nullable
	TestRequestStringNullable(ctx context.Context, request OptNilString) (*Error, error)
	// TestRequestStringNullableArray invokes test_request_string_nullable_array operation.
	//
	// POST /test_request_string_nullable_array
	TestRequestStringNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestStringNullableArrayArray invokes test_request_string_nullable_array_array operation.
	//
	// POST /test_request_string_nullable_array_array
	TestRequestStringNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestStringPassword invokes test_request_string_password operation.
	//
	// POST /test_request_string_password
	TestRequestStringPassword(ctx context.Context, request OptString) (*Error, error)
	// TestRequestStringPasswordArray invokes test_request_string_password_array operation.
	//
	// POST /test_request_string_password_array
	TestRequestStringPasswordArray(ctx context.Context, request []string) (*Error, error)
	// TestRequestStringPasswordArrayArray invokes test_request_string_password_array_array operation.
	//
	// POST /test_request_string_password_array_array
	TestRequestStringPasswordArrayArray(ctx context.Context, request [][]string) (*Error, error)
	// TestRequestStringPasswordNullable invokes test_request_string_password_nullable operation.
	//
	// POST /test_request_string_password_nullable
	TestRequestStringPasswordNullable(ctx context.Context, request OptNilString) (*Error, error)
	// TestRequestStringPasswordNullableArray invokes test_request_string_password_nullable_array operation.
	//
	// POST /test_request_string_password_nullable_array
	TestRequestStringPasswordNullableArray(ctx context.Context, request []NilString) (*Error, error)
	// TestRequestStringPasswordNullableArrayArray invokes test_request_string_password_nullable_array_array operation.
	//
	// POST /test_request_string_password_nullable_array_array
	TestRequestStringPasswordNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error)
	// TestRequestStringTime invokes test_request_string_time operation.
	//
	// POST /test_request_string_time
	TestRequestStringTime(ctx context.Context, request OptTime) (*Error, error)
	// TestRequestStringTimeArray invokes test_request_string_time_array operation.
	//
	// POST /test_request_string_time_array
	TestRequestStringTimeArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringTimeArrayArray invokes test_request_string_time_array_array operation.
	//
	// POST /test_request_string_time_array_array
	TestRequestStringTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringTimeNullable invokes test_request_string_time_nullable operation.
	//
	// POST /test_request_string_time_nullable
	TestRequestStringTimeNullable(ctx context.Context, request OptNilTime) (*Error, error)
	// TestRequestStringTimeNullableArray invokes test_request_string_time_nullable_array operation.
	//
	// POST /test_request_string_time_nullable_array
	TestRequestStringTimeNullableArray(ctx context.Context, request []NilTime) (*Error, error)
	// TestRequestStringTimeNullableArrayArray invokes test_request_string_time_nullable_array_array operation.
	//
	// POST /test_request_string_time_nullable_array_array
	TestRequestStringTimeNullableArrayArray(ctx context.Context, request [][]NilTime) (*Error, error)
	// TestRequestStringURI invokes test_request_string_uri operation.
	//
	// POST /test_request_string_uri
	TestRequestStringURI(ctx context.Context, request OptURI) (*Error, error)
	// TestRequestStringURIArray invokes test_request_string_uri_array operation.
	//
	// POST /test_request_string_uri_array
	TestRequestStringURIArray(ctx context.Context, request []url.URL) (*Error, error)
	// TestRequestStringURIArrayArray invokes test_request_string_uri_array_array operation.
	//
	// POST /test_request_string_uri_array_array
	TestRequestStringURIArrayArray(ctx context.Context, request [][]url.URL) (*Error, error)
	// TestRequestStringURINullable invokes test_request_string_uri_nullable operation.
	//
	// POST /test_request_string_uri_nullable
	TestRequestStringURINullable(ctx context.Context, request OptNilURI) (*Error, error)
	// TestRequestStringURINullableArray invokes test_request_string_uri_nullable_array operation.
	//
	// POST /test_request_string_uri_nullable_array
	TestRequestStringURINullableArray(ctx context.Context, request []NilURI) (*Error, error)
	// TestRequestStringURINullableArrayArray invokes test_request_string_uri_nullable_array_array operation.
	//
	// POST /test_request_string_uri_nullable_array_array
	TestRequestStringURINullableArrayArray(ctx context.Context, request [][]NilURI) (*Error, error)
	// TestRequestStringUUID invokes test_request_string_uuid operation.
	//
	// POST /test_request_string_uuid
	TestRequestStringUUID(ctx context.Context, request OptUUID) (*Error, error)
	// TestRequestStringUUIDArray invokes test_request_string_uuid_array operation.
	//
	// POST /test_request_string_uuid_array
	TestRequestStringUUIDArray(ctx context.Context, request []uuid.UUID) (*Error, error)
	// TestRequestStringUUIDArrayArray invokes test_request_string_uuid_array_array operation.
	//
	// POST /test_request_string_uuid_array_array
	TestRequestStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (*Error, error)
	// TestRequestStringUUIDNullable invokes test_request_string_uuid_nullable operation.
	//
	// POST /test_request_string_uuid_nullable
	TestRequestStringUUIDNullable(ctx context.Context, request OptNilUUID) (*Error, error)
	// TestRequestStringUUIDNullableArray invokes test_request_string_uuid_nullable_array operation.
	//
	// POST /test_request_string_uuid_nullable_array
	TestRequestStringUUIDNullableArray(ctx context.Context, request []NilUUID) (*Error, error)
	// TestRequestStringUUIDNullableArrayArray invokes test_request_string_uuid_nullable_array_array operation.
	//
	// POST /test_request_string_uuid_nullable_array_array
	TestRequestStringUUIDNullableArrayArray(ctx context.Context, request [][]NilUUID) (*Error, error)
	// TestRequestStringUint invokes test_request_string_uint operation.
	//
	// POST /test_request_string_uint
	TestRequestStringUint(ctx context.Context, request OptStringUint) (*Error, error)
	// TestRequestStringUint16 invokes test_request_string_uint16 operation.
	//
	// POST /test_request_string_uint16
	TestRequestStringUint16(ctx context.Context, request OptStringUint16) (*Error, error)
	// TestRequestStringUint16Array invokes test_request_string_uint16_array operation.
	//
	// POST /test_request_string_uint16_array
	TestRequestStringUint16Array(ctx context.Context, request []uint16) (*Error, error)
	// TestRequestStringUint16ArrayArray invokes test_request_string_uint16_array_array operation.
	//
	// POST /test_request_string_uint16_array_array
	TestRequestStringUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error)
	// TestRequestStringUint16Nullable invokes test_request_string_uint16_nullable operation.
	//
	// POST /test_request_string_uint16_nullable
	TestRequestStringUint16Nullable(ctx context.Context, request OptNilStringUint16) (*Error, error)
	// TestRequestStringUint16NullableArray invokes test_request_string_uint16_nullable_array operation.
	//
	// POST /test_request_string_uint16_nullable_array
	TestRequestStringUint16NullableArray(ctx context.Context, request []NilStringUint16) (*Error, error)
	// TestRequestStringUint16NullableArrayArray invokes test_request_string_uint16_nullable_array_array operation.
	//
	// POST /test_request_string_uint16_nullable_array_array
	TestRequestStringUint16NullableArrayArray(ctx context.Context, request [][]NilStringUint16) (*Error, error)
	// TestRequestStringUint32 invokes test_request_string_uint32 operation.
	//
	// POST /test_request_string_uint32
	TestRequestStringUint32(ctx context.Context, request OptStringUint32) (*Error, error)
	// TestRequestStringUint32Array invokes test_request_string_uint32_array operation.
	//
	// POST /test_request_string_uint32_array
	TestRequestStringUint32Array(ctx context.Context, request []uint32) (*Error, error)
	// TestRequestStringUint32ArrayArray invokes test_request_string_uint32_array_array operation.
	//
	// POST /test_request_string_uint32_array_array
	TestRequestStringUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error)
	// TestRequestStringUint32Nullable invokes test_request_string_uint32_nullable operation.
	//
	// POST /test_request_string_uint32_nullable
	TestRequestStringUint32Nullable(ctx context.Context, request OptNilStringUint32) (*Error, error)
	// TestRequestStringUint32NullableArray invokes test_request_string_uint32_nullable_array operation.
	//
	// POST /test_request_string_uint32_nullable_array
	TestRequestStringUint32NullableArray(ctx context.Context, request []NilStringUint32) (*Error, error)
	// TestRequestStringUint32NullableArrayArray invokes test_request_string_uint32_nullable_array_array operation.
	//
	// POST /test_request_string_uint32_nullable_array_array
	TestRequestStringUint32NullableArrayArray(ctx context.Context, request [][]NilStringUint32) (*Error, error)
	// TestRequestStringUint64 invokes test_request_string_uint64 operation.
	//
	// POST /test_request_string_uint64
	TestRequestStringUint64(ctx context.Context, request OptStringUint64) (*Error, error)
	// TestRequestStringUint64Array invokes test_request_string_uint64_array operation.
	//
	// POST /test_request_string_uint64_array
	TestRequestStringUint64Array(ctx context.Context, request []uint64) (*Error, error)
	// TestRequestStringUint64ArrayArray invokes test_request_string_uint64_array_array operation.
	//
	// POST /test_request_string_uint64_array_array
	TestRequestStringUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error)
	// TestRequestStringUint64Nullable invokes test_request_string_uint64_nullable operation.
	//
	// POST /test_request_string_uint64_nullable
	TestRequestStringUint64Nullable(ctx context.Context, request OptNilStringUint64) (*Error, error)
	// TestRequestStringUint64NullableArray invokes test_request_string_uint64_nullable_array operation.
	//
	// POST /test_request_string_uint64_nullable_array
	TestRequestStringUint64NullableArray(ctx context.Context, request []NilStringUint64) (*Error, error)
	// TestRequestStringUint64NullableArrayArray invokes test_request_string_uint64_nullable_array_array operation.
	//
	// POST /test_request_string_uint64_nullable_array_array
	TestRequestStringUint64NullableArrayArray(ctx context.Context, request [][]NilStringUint64) (*Error, error)
	// TestRequestStringUint8 invokes test_request_string_uint8 operation.
	//
	// POST /test_request_string_uint8
	TestRequestStringUint8(ctx context.Context, request OptStringUint8) (*Error, error)
	// TestRequestStringUint8Array invokes test_request_string_uint8_array operation.
	//
	// POST /test_request_string_uint8_array
	TestRequestStringUint8Array(ctx context.Context, request []uint8) (*Error, error)
	// TestRequestStringUint8ArrayArray invokes test_request_string_uint8_array_array operation.
	//
	// POST /test_request_string_uint8_array_array
	TestRequestStringUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error)
	// TestRequestStringUint8Nullable invokes test_request_string_uint8_nullable operation.
	//
	// POST /test_request_string_uint8_nullable
	TestRequestStringUint8Nullable(ctx context.Context, request OptNilStringUint8) (*Error, error)
	// TestRequestStringUint8NullableArray invokes test_request_string_uint8_nullable_array operation.
	//
	// POST /test_request_string_uint8_nullable_array
	TestRequestStringUint8NullableArray(ctx context.Context, request []NilStringUint8) (*Error, error)
	// TestRequestStringUint8NullableArrayArray invokes test_request_string_uint8_nullable_array_array operation.
	//
	// POST /test_request_string_uint8_nullable_array_array
	TestRequestStringUint8NullableArrayArray(ctx context.Context, request [][]NilStringUint8) (*Error, error)
	// TestRequestStringUintArray invokes test_request_string_uint_array operation.
	//
	// POST /test_request_string_uint_array
	TestRequestStringUintArray(ctx context.Context, request []uint) (*Error, error)
	// TestRequestStringUintArrayArray invokes test_request_string_uint_array_array operation.
	//
	// POST /test_request_string_uint_array_array
	TestRequestStringUintArrayArray(ctx context.Context, request [][]uint) (*Error, error)
	// TestRequestStringUintNullable invokes test_request_string_uint_nullable operation.
	//
	// POST /test_request_string_uint_nullable
	TestRequestStringUintNullable(ctx context.Context, request OptNilStringUint) (*Error, error)
	// TestRequestStringUintNullableArray invokes test_request_string_uint_nullable_array operation.
	//
	// POST /test_request_string_uint_nullable_array
	TestRequestStringUintNullableArray(ctx context.Context, request []NilStringUint) (*Error, error)
	// TestRequestStringUintNullableArrayArray invokes test_request_string_uint_nullable_array_array operation.
	//
	// POST /test_request_string_uint_nullable_array_array
	TestRequestStringUintNullableArrayArray(ctx context.Context, request [][]NilStringUint) (*Error, error)
	// TestRequestStringUnix invokes test_request_string_unix operation.
	//
	// POST /test_request_string_unix
	TestRequestStringUnix(ctx context.Context, request OptStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixArray invokes test_request_string_unix_array operation.
	//
	// POST /test_request_string_unix_array
	TestRequestStringUnixArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringUnixArrayArray invokes test_request_string_unix_array_array operation.
	//
	// POST /test_request_string_unix_array_array
	TestRequestStringUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringUnixMicro invokes test_request_string_unix-micro operation.
	//
	// POST /test_request_string_unix-micro
	TestRequestStringUnixMicro(ctx context.Context, request OptStringUnixMicro) (*Error, error)
	// TestRequestStringUnixMicroArray invokes test_request_string_unix-micro_array operation.
	//
	// POST /test_request_string_unix-micro_array
	TestRequestStringUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringUnixMicroArrayArray invokes test_request_string_unix-micro_array_array operation.
	//
	// POST /test_request_string_unix-micro_array_array
	TestRequestStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringUnixMicroNullable invokes test_request_string_unix-micro_nullable operation.
	//
	// POST /test_request_string_unix-micro_nullable
	TestRequestStringUnixMicroNullable(ctx context.Context, request OptNilStringUnixMicro) (*Error, error)
	// TestRequestStringUnixMicroNullableArray invokes test_request_string_unix-micro_nullable_array operation.
	//
	// POST /test_request_string_unix-micro_nullable_array
	TestRequestStringUnixMicroNullableArray(ctx context.Context, request []NilStringUnixMicro) (*Error, error)
	// TestRequestStringUnixMicroNullableArrayArray invokes test_request_string_unix-micro_nullable_array_array operation.
	//
	// POST /test_request_string_unix-micro_nullable_array_array
	TestRequestStringUnixMicroNullableArrayArray(ctx context.Context, request [][]NilStringUnixMicro) (*Error, error)
	// TestRequestStringUnixMilli invokes test_request_string_unix-milli operation.
	//
	// POST /test_request_string_unix-milli
	TestRequestStringUnixMilli(ctx context.Context, request OptStringUnixMilli) (*Error, error)
	// TestRequestStringUnixMilliArray invokes test_request_string_unix-milli_array operation.
	//
	// POST /test_request_string_unix-milli_array
	TestRequestStringUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringUnixMilliArrayArray invokes test_request_string_unix-milli_array_array operation.
	//
	// POST /test_request_string_unix-milli_array_array
	TestRequestStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringUnixMilliNullable invokes test_request_string_unix-milli_nullable operation.
	//
	// POST /test_request_string_unix-milli_nullable
	TestRequestStringUnixMilliNullable(ctx context.Context, request OptNilStringUnixMilli) (*Error, error)
	// TestRequestStringUnixMilliNullableArray invokes test_request_string_unix-milli_nullable_array operation.
	//
	// POST /test_request_string_unix-milli_nullable_array
	TestRequestStringUnixMilliNullableArray(ctx context.Context, request []NilStringUnixMilli) (*Error, error)
	// TestRequestStringUnixMilliNullableArrayArray invokes test_request_string_unix-milli_nullable_array_array operation.
	//
	// POST /test_request_string_unix-milli_nullable_array_array
	TestRequestStringUnixMilliNullableArrayArray(ctx context.Context, request [][]NilStringUnixMilli) (*Error, error)
	// TestRequestStringUnixNano invokes test_request_string_unix-nano operation.
	//
	// POST /test_request_string_unix-nano
	TestRequestStringUnixNano(ctx context.Context, request OptStringUnixNano) (*Error, error)
	// TestRequestStringUnixNanoArray invokes test_request_string_unix-nano_array operation.
	//
	// POST /test_request_string_unix-nano_array
	TestRequestStringUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringUnixNanoArrayArray invokes test_request_string_unix-nano_array_array operation.
	//
	// POST /test_request_string_unix-nano_array_array
	TestRequestStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringUnixNanoNullable invokes test_request_string_unix-nano_nullable operation.
	//
	// POST /test_request_string_unix-nano_nullable
	TestRequestStringUnixNanoNullable(ctx context.Context, request OptNilStringUnixNano) (*Error, error)
	// TestRequestStringUnixNanoNullableArray invokes test_request_string_unix-nano_nullable_array operation.
	//
	// POST /test_request_string_unix-nano_nullable_array
	TestRequestStringUnixNanoNullableArray(ctx context.Context, request []NilStringUnixNano) (*Error, error)
	// TestRequestStringUnixNanoNullableArrayArray invokes test_request_string_unix-nano_nullable_array_array operation.
	//
	// POST /test_request_string_unix-nano_nullable_array_array
	TestRequestStringUnixNanoNullableArrayArray(ctx context.Context, request [][]NilStringUnixNano) (*Error, error)
	// TestRequestStringUnixNullable invokes test_request_string_unix_nullable operation.
	//
	// POST /test_request_string_unix_nullable
	TestRequestStringUnixNullable(ctx context.Context, request OptNilStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixNullableArray invokes test_request_string_unix_nullable_array operation.
	//
	// POST /test_request_string_unix_nullable_array
	TestRequestStringUnixNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixNullableArrayArray invokes test_request_string_unix_nullable_array_array operation.
	//
	// POST /test_request_string_unix_nullable_array_array
	TestRequestStringUnixNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixSeconds invokes test_request_string_unix-seconds operation.
	//
	// POST /test_request_string_unix-seconds
	TestRequestStringUnixSeconds(ctx context.Context, request OptStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixSecondsArray invokes test_request_string_unix-seconds_array operation.
	//
	// POST /test_request_string_unix-seconds_array
	TestRequestStringUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error)
	// TestRequestStringUnixSecondsArrayArray invokes test_request_string_unix-seconds_array_array operation.
	//
	// POST /test_request_string_unix-seconds_array_array
	TestRequestStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error)
	// TestRequestStringUnixSecondsNullable invokes test_request_string_unix-seconds_nullable operation.
	//
	// POST /test_request_string_unix-seconds_nullable
	TestRequestStringUnixSecondsNullable(ctx context.Context, request OptNilStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixSecondsNullableArray invokes test_request_string_unix-seconds_nullable_array operation.
	//
	// POST /test_request_string_unix-seconds_nullable_array
	TestRequestStringUnixSecondsNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error)
	// TestRequestStringUnixSecondsNullableArrayArray invokes test_request_string_unix-seconds_nullable_array_array operation.
	//
	// POST /test_request_string_unix-seconds_nullable_array_array
	TestRequestStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error)
	// TestResponseAny invokes test_response_Any operation.
	//
	// POST /test_response_Any
	TestResponseAny(ctx context.Context, request string) (jx.Raw, error)
	// TestResponseBoolean invokes test_response_boolean operation.
	//
	// POST /test_response_boolean
	TestResponseBoolean(ctx context.Context, request string) (bool, error)
	// TestResponseBooleanArray invokes test_response_boolean_array operation.
	//
	// POST /test_response_boolean_array
	TestResponseBooleanArray(ctx context.Context, request string) ([]bool, error)
	// TestResponseBooleanArrayArray invokes test_response_boolean_array_array operation.
	//
	// POST /test_response_boolean_array_array
	TestResponseBooleanArrayArray(ctx context.Context, request string) ([][]bool, error)
	// TestResponseBooleanNullable invokes test_response_boolean_nullable operation.
	//
	// POST /test_response_boolean_nullable
	TestResponseBooleanNullable(ctx context.Context, request string) (NilBool, error)
	// TestResponseBooleanNullableArray invokes test_response_boolean_nullable_array operation.
	//
	// POST /test_response_boolean_nullable_array
	TestResponseBooleanNullableArray(ctx context.Context, request string) ([]NilBool, error)
	// TestResponseBooleanNullableArrayArray invokes test_response_boolean_nullable_array_array operation.
	//
	// POST /test_response_boolean_nullable_array_array
	TestResponseBooleanNullableArrayArray(ctx context.Context, request string) ([][]NilBool, error)
	// TestResponseEmptyStruct invokes test_response_EmptyStruct operation.
	//
	// POST /test_response_EmptyStruct
	TestResponseEmptyStruct(ctx context.Context, request string) error
	// TestResponseFormatTest invokes test_response_FormatTest operation.
	//
	// POST /test_response_FormatTest
	TestResponseFormatTest(ctx context.Context, request string) (*TestResponseFormatTestOK, error)
	// TestResponseInteger invokes test_response_integer operation.
	//
	// POST /test_response_integer
	TestResponseInteger(ctx context.Context, request string) (int, error)
	// TestResponseIntegerArray invokes test_response_integer_array operation.
	//
	// POST /test_response_integer_array
	TestResponseIntegerArray(ctx context.Context, request string) ([]int, error)
	// TestResponseIntegerArrayArray invokes test_response_integer_array_array operation.
	//
	// POST /test_response_integer_array_array
	TestResponseIntegerArrayArray(ctx context.Context, request string) ([][]int, error)
	// TestResponseIntegerInt16 invokes test_response_integer_int16 operation.
	//
	// POST /test_response_integer_int16
	TestResponseIntegerInt16(ctx context.Context, request string) (int16, error)
	// TestResponseIntegerInt16Array invokes test_response_integer_int16_array operation.
	//
	// POST /test_response_integer_int16_array
	TestResponseIntegerInt16Array(ctx context.Context, request string) ([]int16, error)
	// TestResponseIntegerInt16ArrayArray invokes test_response_integer_int16_array_array operation.
	//
	// POST /test_response_integer_int16_array_array
	TestResponseIntegerInt16ArrayArray(ctx context.Context, request string) ([][]int16, error)
	// TestResponseIntegerInt16Nullable invokes test_response_integer_int16_nullable operation.
	//
	// POST /test_response_integer_int16_nullable
	TestResponseIntegerInt16Nullable(ctx context.Context, request string) (NilInt16, error)
	// TestResponseIntegerInt16NullableArray invokes test_response_integer_int16_nullable_array operation.
	//
	// POST /test_response_integer_int16_nullable_array
	TestResponseIntegerInt16NullableArray(ctx context.Context, request string) ([]NilInt16, error)
	// TestResponseIntegerInt16NullableArrayArray invokes test_response_integer_int16_nullable_array_array operation.
	//
	// POST /test_response_integer_int16_nullable_array_array
	TestResponseIntegerInt16NullableArrayArray(ctx context.Context, request string) ([][]NilInt16, error)
	// TestResponseIntegerInt32 invokes test_response_integer_int32 operation.
	//
	// POST /test_response_integer_int32
	TestResponseIntegerInt32(ctx context.Context, request string) (int32, error)
	// TestResponseIntegerInt32Array invokes test_response_integer_int32_array operation.
	//
	// POST /test_response_integer_int32_array
	TestResponseIntegerInt32Array(ctx context.Context, request string) ([]int32, error)
	// TestResponseIntegerInt32ArrayArray invokes test_response_integer_int32_array_array operation.
	//
	// POST /test_response_integer_int32_array_array
	TestResponseIntegerInt32ArrayArray(ctx context.Context, request string) ([][]int32, error)
	// TestResponseIntegerInt32Nullable invokes test_response_integer_int32_nullable operation.
	//
	// POST /test_response_integer_int32_nullable
	TestResponseIntegerInt32Nullable(ctx context.Context, request string) (NilInt32, error)
	// TestResponseIntegerInt32NullableArray invokes test_response_integer_int32_nullable_array operation.
	//
	// POST /test_response_integer_int32_nullable_array
	TestResponseIntegerInt32NullableArray(ctx context.Context, request string) ([]NilInt32, error)
	// TestResponseIntegerInt32NullableArrayArray invokes test_response_integer_int32_nullable_array_array operation.
	//
	// POST /test_response_integer_int32_nullable_array_array
	TestResponseIntegerInt32NullableArrayArray(ctx context.Context, request string) ([][]NilInt32, error)
	// TestResponseIntegerInt64 invokes test_response_integer_int64 operation.
	//
	// POST /test_response_integer_int64
	TestResponseIntegerInt64(ctx context.Context, request string) (int64, error)
	// TestResponseIntegerInt64Array invokes test_response_integer_int64_array operation.
	//
	// POST /test_response_integer_int64_array
	TestResponseIntegerInt64Array(ctx context.Context, request string) ([]int64, error)
	// TestResponseIntegerInt64ArrayArray invokes test_response_integer_int64_array_array operation.
	//
	// POST /test_response_integer_int64_array_array
	TestResponseIntegerInt64ArrayArray(ctx context.Context, request string) ([][]int64, error)
	// TestResponseIntegerInt64Nullable invokes test_response_integer_int64_nullable operation.
	//
	// POST /test_response_integer_int64_nullable
	TestResponseIntegerInt64Nullable(ctx context.Context, request string) (NilInt64, error)
	// TestResponseIntegerInt64NullableArray invokes test_response_integer_int64_nullable_array operation.
	//
	// POST /test_response_integer_int64_nullable_array
	TestResponseIntegerInt64NullableArray(ctx context.Context, request string) ([]NilInt64, error)
	// TestResponseIntegerInt64NullableArrayArray invokes test_response_integer_int64_nullable_array_array operation.
	//
	// POST /test_response_integer_int64_nullable_array_array
	TestResponseIntegerInt64NullableArrayArray(ctx context.Context, request string) ([][]NilInt64, error)
	// TestResponseIntegerInt8 invokes test_response_integer_int8 operation.
	//
	// POST /test_response_integer_int8
	TestResponseIntegerInt8(ctx context.Context, request string) (int8, error)
	// TestResponseIntegerInt8Array invokes test_response_integer_int8_array operation.
	//
	// POST /test_response_integer_int8_array
	TestResponseIntegerInt8Array(ctx context.Context, request string) ([]int8, error)
	// TestResponseIntegerInt8ArrayArray invokes test_response_integer_int8_array_array operation.
	//
	// POST /test_response_integer_int8_array_array
	TestResponseIntegerInt8ArrayArray(ctx context.Context, request string) ([][]int8, error)
	// TestResponseIntegerInt8Nullable invokes test_response_integer_int8_nullable operation.
	//
	// POST /test_response_integer_int8_nullable
	TestResponseIntegerInt8Nullable(ctx context.Context, request string) (NilInt8, error)
	// TestResponseIntegerInt8NullableArray invokes test_response_integer_int8_nullable_array operation.
	//
	// POST /test_response_integer_int8_nullable_array
	TestResponseIntegerInt8NullableArray(ctx context.Context, request string) ([]NilInt8, error)
	// TestResponseIntegerInt8NullableArrayArray invokes test_response_integer_int8_nullable_array_array operation.
	//
	// POST /test_response_integer_int8_nullable_array_array
	TestResponseIntegerInt8NullableArrayArray(ctx context.Context, request string) ([][]NilInt8, error)
	// TestResponseIntegerNullable invokes test_response_integer_nullable operation.
	//
	// POST /test_response_integer_nullable
	TestResponseIntegerNullable(ctx context.Context, request string) (NilInt, error)
	// TestResponseIntegerNullableArray invokes test_response_integer_nullable_array operation.
	//
	// POST /test_response_integer_nullable_array
	TestResponseIntegerNullableArray(ctx context.Context, request string) ([]NilInt, error)
	// TestResponseIntegerNullableArrayArray invokes test_response_integer_nullable_array_array operation.
	//
	// POST /test_response_integer_nullable_array_array
	TestResponseIntegerNullableArrayArray(ctx context.Context, request string) ([][]NilInt, error)
	// TestResponseIntegerUint invokes test_response_integer_uint operation.
	//
	// POST /test_response_integer_uint
	TestResponseIntegerUint(ctx context.Context, request string) (uint, error)
	// TestResponseIntegerUint16 invokes test_response_integer_uint16 operation.
	//
	// POST /test_response_integer_uint16
	TestResponseIntegerUint16(ctx context.Context, request string) (uint16, error)
	// TestResponseIntegerUint16Array invokes test_response_integer_uint16_array operation.
	//
	// POST /test_response_integer_uint16_array
	TestResponseIntegerUint16Array(ctx context.Context, request string) ([]uint16, error)
	// TestResponseIntegerUint16ArrayArray invokes test_response_integer_uint16_array_array operation.
	//
	// POST /test_response_integer_uint16_array_array
	TestResponseIntegerUint16ArrayArray(ctx context.Context, request string) ([][]uint16, error)
	// TestResponseIntegerUint16Nullable invokes test_response_integer_uint16_nullable operation.
	//
	// POST /test_response_integer_uint16_nullable
	TestResponseIntegerUint16Nullable(ctx context.Context, request string) (NilUint16, error)
	// TestResponseIntegerUint16NullableArray invokes test_response_integer_uint16_nullable_array operation.
	//
	// POST /test_response_integer_uint16_nullable_array
	TestResponseIntegerUint16NullableArray(ctx context.Context, request string) ([]NilUint16, error)
	// TestResponseIntegerUint16NullableArrayArray invokes test_response_integer_uint16_nullable_array_array operation.
	//
	// POST /test_response_integer_uint16_nullable_array_array
	TestResponseIntegerUint16NullableArrayArray(ctx context.Context, request string) ([][]NilUint16, error)
	// TestResponseIntegerUint32 invokes test_response_integer_uint32 operation.
	//
	// POST /test_response_integer_uint32
	TestResponseIntegerUint32(ctx context.Context, request string) (uint32, error)
	// TestResponseIntegerUint32Array invokes test_response_integer_uint32_array operation.
	//
	// POST /test_response_integer_uint32_array
	TestResponseIntegerUint32Array(ctx context.Context, request string) ([]uint32, error)
	// TestResponseIntegerUint32ArrayArray invokes test_response_integer_uint32_array_array operation.
	//
	// POST /test_response_integer_uint32_array_array
	TestResponseIntegerUint32ArrayArray(ctx context.Context, request string) ([][]uint32, error)
	// TestResponseIntegerUint32Nullable invokes test_response_integer_uint32_nullable operation.
	//
	// POST /test_response_integer_uint32_nullable
	TestResponseIntegerUint32Nullable(ctx context.Context, request string) (NilUint32, error)
	// TestResponseIntegerUint32NullableArray invokes test_response_integer_uint32_nullable_array operation.
	//
	// POST /test_response_integer_uint32_nullable_array
	TestResponseIntegerUint32NullableArray(ctx context.Context, request string) ([]NilUint32, error)
	// TestResponseIntegerUint32NullableArrayArray invokes test_response_integer_uint32_nullable_array_array operation.
	//
	// POST /test_response_integer_uint32_nullable_array_array
	TestResponseIntegerUint32NullableArrayArray(ctx context.Context, request string) ([][]NilUint32, error)
	// TestResponseIntegerUint64 invokes test_response_integer_uint64 operation.
	//
	// POST /test_response_integer_uint64
	TestResponseIntegerUint64(ctx context.Context, request string) (uint64, error)
	// TestResponseIntegerUint64Array invokes test_response_integer_uint64_array operation.
	//
	// POST /test_response_integer_uint64_array
	TestResponseIntegerUint64Array(ctx context.Context, request string) ([]uint64, error)
	// TestResponseIntegerUint64ArrayArray invokes test_response_integer_uint64_array_array operation.
	//
	// POST /test_response_integer_uint64_array_array
	TestResponseIntegerUint64ArrayArray(ctx context.Context, request string) ([][]uint64, error)
	// TestResponseIntegerUint64Nullable invokes test_response_integer_uint64_nullable operation.
	//
	// POST /test_response_integer_uint64_nullable
	TestResponseIntegerUint64Nullable(ctx context.Context, request string) (NilUint64, error)
	// TestResponseIntegerUint64NullableArray invokes test_response_integer_uint64_nullable_array operation.
	//
	// POST /test_response_integer_uint64_nullable_array
	TestResponseIntegerUint64NullableArray(ctx context.Context, request string) ([]NilUint64, error)
	// TestResponseIntegerUint64NullableArrayArray invokes test_response_integer_uint64_nullable_array_array operation.
	//
	// POST /test_response_integer_uint64_nullable_array_array
	TestResponseIntegerUint64NullableArrayArray(ctx context.Context, request string) ([][]NilUint64, error)
	// TestResponseIntegerUint8 invokes test_response_integer_uint8 operation.
	//
	// POST /test_response_integer_uint8
	TestResponseIntegerUint8(ctx context.Context, request string) (uint8, error)
	// TestResponseIntegerUint8Array invokes test_response_integer_uint8_array operation.
	//
	// POST /test_response_integer_uint8_array
	TestResponseIntegerUint8Array(ctx context.Context, request string) ([]uint8, error)
	// TestResponseIntegerUint8ArrayArray invokes test_response_integer_uint8_array_array operation.
	//
	// POST /test_response_integer_uint8_array_array
	TestResponseIntegerUint8ArrayArray(ctx context.Context, request string) ([][]uint8, error)
	// TestResponseIntegerUint8Nullable invokes test_response_integer_uint8_nullable operation.
	//
	// POST /test_response_integer_uint8_nullable
	TestResponseIntegerUint8Nullable(ctx context.Context, request string) (NilUint8, error)
	// TestResponseIntegerUint8NullableArray invokes test_response_integer_uint8_nullable_array operation.
	//
	// POST /test_response_integer_uint8_nullable_array
	TestResponseIntegerUint8NullableArray(ctx context.Context, request string) ([]NilUint8, error)
	// TestResponseIntegerUint8NullableArrayArray invokes test_response_integer_uint8_nullable_array_array operation.
	//
	// POST /test_response_integer_uint8_nullable_array_array
	TestResponseIntegerUint8NullableArrayArray(ctx context.Context, request string) ([][]NilUint8, error)
	// TestResponseIntegerUintArray invokes test_response_integer_uint_array operation.
	//
	// POST /test_response_integer_uint_array
	TestResponseIntegerUintArray(ctx context.Context, request string) ([]uint, error)
	// TestResponseIntegerUintArrayArray invokes test_response_integer_uint_array_array operation.
	//
	// POST /test_response_integer_uint_array_array
	TestResponseIntegerUintArrayArray(ctx context.Context, request string) ([][]uint, error)
	// TestResponseIntegerUintNullable invokes test_response_integer_uint_nullable operation.
	//
	// POST /test_response_integer_uint_nullable
	TestResponseIntegerUintNullable(ctx context.Context, request string) (NilUint, error)
	// TestResponseIntegerUintNullableArray invokes test_response_integer_uint_nullable_array operation.
	//
	// POST /test_response_integer_uint_nullable_array
	TestResponseIntegerUintNullableArray(ctx context.Context, request string) ([]NilUint, error)
	// TestResponseIntegerUintNullableArrayArray invokes test_response_integer_uint_nullable_array_array operation.
	//
	// POST /test_response_integer_uint_nullable_array_array
	TestResponseIntegerUintNullableArrayArray(ctx context.Context, request string) ([][]NilUint, error)
	// TestResponseIntegerUnix invokes test_response_integer_unix operation.
	//
	// POST /test_response_integer_unix
	TestResponseIntegerUnix(ctx context.Context, request string) (time.Time, error)
	// TestResponseIntegerUnixArray invokes test_response_integer_unix_array operation.
	//
	// POST /test_response_integer_unix_array
	TestResponseIntegerUnixArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseIntegerUnixArrayArray invokes test_response_integer_unix_array_array operation.
	//
	// POST /test_response_integer_unix_array_array
	TestResponseIntegerUnixArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseIntegerUnixMicro invokes test_response_integer_unix-micro operation.
	//
	// POST /test_response_integer_unix-micro
	TestResponseIntegerUnixMicro(ctx context.Context, request string) (time.Time, error)
	// TestResponseIntegerUnixMicroArray invokes test_response_integer_unix-micro_array operation.
	//
	// POST /test_response_integer_unix-micro_array
	TestResponseIntegerUnixMicroArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseIntegerUnixMicroArrayArray invokes test_response_integer_unix-micro_array_array operation.
	//
	// POST /test_response_integer_unix-micro_array_array
	TestResponseIntegerUnixMicroArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseIntegerUnixMicroNullable invokes test_response_integer_unix-micro_nullable operation.
	//
	// POST /test_response_integer_unix-micro_nullable
	TestResponseIntegerUnixMicroNullable(ctx context.Context, request string) (NilUnixMicro, error)
	// TestResponseIntegerUnixMicroNullableArray invokes test_response_integer_unix-micro_nullable_array operation.
	//
	// POST /test_response_integer_unix-micro_nullable_array
	TestResponseIntegerUnixMicroNullableArray(ctx context.Context, request string) ([]NilUnixMicro, error)
	// TestResponseIntegerUnixMicroNullableArrayArray invokes test_response_integer_unix-micro_nullable_array_array operation.
	//
	// POST /test_response_integer_unix-micro_nullable_array_array
	TestResponseIntegerUnixMicroNullableArrayArray(ctx context.Context, request string) ([][]NilUnixMicro, error)
	// TestResponseIntegerUnixMilli invokes test_response_integer_unix-milli operation.
	//
	// POST /test_response_integer_unix-milli
	TestResponseIntegerUnixMilli(ctx context.Context, request string) (time.Time, error)
	// TestResponseIntegerUnixMilliArray invokes test_response_integer_unix-milli_array operation.
	//
	// POST /test_response_integer_unix-milli_array
	TestResponseIntegerUnixMilliArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseIntegerUnixMilliArrayArray invokes test_response_integer_unix-milli_array_array operation.
	//
	// POST /test_response_integer_unix-milli_array_array
	TestResponseIntegerUnixMilliArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseIntegerUnixMilliNullable invokes test_response_integer_unix-milli_nullable operation.
	//
	// POST /test_response_integer_unix-milli_nullable
	TestResponseIntegerUnixMilliNullable(ctx context.Context, request string) (NilUnixMilli, error)
	// TestResponseIntegerUnixMilliNullableArray invokes test_response_integer_unix-milli_nullable_array operation.
	//
	// POST /test_response_integer_unix-milli_nullable_array
	TestResponseIntegerUnixMilliNullableArray(ctx context.Context, request string) ([]NilUnixMilli, error)
	// TestResponseIntegerUnixMilliNullableArrayArray invokes test_response_integer_unix-milli_nullable_array_array operation.
	//
	// POST /test_response_integer_unix-milli_nullable_array_array
	TestResponseIntegerUnixMilliNullableArrayArray(ctx context.Context, request string) ([][]NilUnixMilli, error)
	// TestResponseIntegerUnixNano invokes test_response_integer_unix-nano operation.
	//
	// POST /test_response_integer_unix-nano
	TestResponseIntegerUnixNano(ctx context.Context, request string) (time.Time, error)
	// TestResponseIntegerUnixNanoArray invokes test_response_integer_unix-nano_array operation.
	//
	// POST /test_response_integer_unix-nano_array
	TestResponseIntegerUnixNanoArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseIntegerUnixNanoArrayArray invokes test_response_integer_unix-nano_array_array operation.
	//
	// POST /test_response_integer_unix-nano_array_array
	TestResponseIntegerUnixNanoArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseIntegerUnixNanoNullable invokes test_response_integer_unix-nano_nullable operation.
	//
	// POST /test_response_integer_unix-nano_nullable
	TestResponseIntegerUnixNanoNullable(ctx context.Context, request string) (NilUnixNano, error)
	// TestResponseIntegerUnixNanoNullableArray invokes test_response_integer_unix-nano_nullable_array operation.
	//
	// POST /test_response_integer_unix-nano_nullable_array
	TestResponseIntegerUnixNanoNullableArray(ctx context.Context, request string) ([]NilUnixNano, error)
	// TestResponseIntegerUnixNanoNullableArrayArray invokes test_response_integer_unix-nano_nullable_array_array operation.
	//
	// POST /test_response_integer_unix-nano_nullable_array_array
	TestResponseIntegerUnixNanoNullableArrayArray(ctx context.Context, request string) ([][]NilUnixNano, error)
	// TestResponseIntegerUnixNullable invokes test_response_integer_unix_nullable operation.
	//
	// POST /test_response_integer_unix_nullable
	TestResponseIntegerUnixNullable(ctx context.Context, request string) (NilUnixSeconds, error)
	// TestResponseIntegerUnixNullableArray invokes test_response_integer_unix_nullable_array operation.
	//
	// POST /test_response_integer_unix_nullable_array
	TestResponseIntegerUnixNullableArray(ctx context.Context, request string) ([]NilUnixSeconds, error)
	// TestResponseIntegerUnixNullableArrayArray invokes test_response_integer_unix_nullable_array_array operation.
	//
	// POST /test_response_integer_unix_nullable_array_array
	TestResponseIntegerUnixNullableArrayArray(ctx context.Context, request string) ([][]NilUnixSeconds, error)
	// TestResponseIntegerUnixSeconds invokes test_response_integer_unix-seconds operation.
	//
	// POST /test_response_integer_unix-seconds
	TestResponseIntegerUnixSeconds(ctx context.Context, request string) (time.Time, error)
	// TestResponseIntegerUnixSecondsArray invokes test_response_integer_unix-seconds_array operation.
	//
	// POST /test_response_integer_unix-seconds_array
	TestResponseIntegerUnixSecondsArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseIntegerUnixSecondsArrayArray invokes test_response_integer_unix-seconds_array_array operation.
	//
	// POST /test_response_integer_unix-seconds_array_array
	TestResponseIntegerUnixSecondsArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseIntegerUnixSecondsNullable invokes test_response_integer_unix-seconds_nullable operation.
	//
	// POST /test_response_integer_unix-seconds_nullable
	TestResponseIntegerUnixSecondsNullable(ctx context.Context, request string) (NilUnixSeconds, error)
	// TestResponseIntegerUnixSecondsNullableArray invokes test_response_integer_unix-seconds_nullable_array operation.
	//
	// POST /test_response_integer_unix-seconds_nullable_array
	TestResponseIntegerUnixSecondsNullableArray(ctx context.Context, request string) ([]NilUnixSeconds, error)
	// TestResponseIntegerUnixSecondsNullableArrayArray invokes test_response_integer_unix-seconds_nullable_array_array operation.
	//
	// POST /test_response_integer_unix-seconds_nullable_array_array
	TestResponseIntegerUnixSecondsNullableArrayArray(ctx context.Context, request string) ([][]NilUnixSeconds, error)
	// TestResponseNull invokes test_response_null operation.
	//
	// POST /test_response_null
	TestResponseNull(ctx context.Context, request string) (struct{}, error)
	// TestResponseNullArray invokes test_response_null_array operation.
	//
	// POST /test_response_null_array
	TestResponseNullArray(ctx context.Context, request string) ([]struct{}, error)
	// TestResponseNullArrayArray invokes test_response_null_array_array operation.
	//
	// POST /test_response_null_array_array
	TestResponseNullArrayArray(ctx context.Context, request string) ([][]struct{}, error)
	// TestResponseNullNullable invokes test_response_null_nullable operation.
	//
	// POST /test_response_null_nullable
	TestResponseNullNullable(ctx context.Context, request string) (struct{}, error)
	// TestResponseNullNullableArray invokes test_response_null_nullable_array operation.
	//
	// POST /test_response_null_nullable_array
	TestResponseNullNullableArray(ctx context.Context, request string) ([]struct{}, error)
	// TestResponseNullNullableArrayArray invokes test_response_null_nullable_array_array operation.
	//
	// POST /test_response_null_nullable_array_array
	TestResponseNullNullableArrayArray(ctx context.Context, request string) ([][]struct{}, error)
	// TestResponseNumber invokes test_response_number operation.
	//
	// POST /test_response_number
	TestResponseNumber(ctx context.Context, request string) (float64, error)
	// TestResponseNumberArray invokes test_response_number_array operation.
	//
	// POST /test_response_number_array
	TestResponseNumberArray(ctx context.Context, request string) ([]float64, error)
	// TestResponseNumberArrayArray invokes test_response_number_array_array operation.
	//
	// POST /test_response_number_array_array
	TestResponseNumberArrayArray(ctx context.Context, request string) ([][]float64, error)
	// TestResponseNumberDouble invokes test_response_number_double operation.
	//
	// POST /test_response_number_double
	TestResponseNumberDouble(ctx context.Context, request string) (float64, error)
	// TestResponseNumberDoubleArray invokes test_response_number_double_array operation.
	//
	// POST /test_response_number_double_array
	TestResponseNumberDoubleArray(ctx context.Context, request string) ([]float64, error)
	// TestResponseNumberDoubleArrayArray invokes test_response_number_double_array_array operation.
	//
	// POST /test_response_number_double_array_array
	TestResponseNumberDoubleArrayArray(ctx context.Context, request string) ([][]float64, error)
	// TestResponseNumberDoubleNullable invokes test_response_number_double_nullable operation.
	//
	// POST /test_response_number_double_nullable
	TestResponseNumberDoubleNullable(ctx context.Context, request string) (NilFloat64, error)
	// TestResponseNumberDoubleNullableArray invokes test_response_number_double_nullable_array operation.
	//
	// POST /test_response_number_double_nullable_array
	TestResponseNumberDoubleNullableArray(ctx context.Context, request string) ([]NilFloat64, error)
	// TestResponseNumberDoubleNullableArrayArray invokes test_response_number_double_nullable_array_array operation.
	//
	// POST /test_response_number_double_nullable_array_array
	TestResponseNumberDoubleNullableArrayArray(ctx context.Context, request string) ([][]NilFloat64, error)
	// TestResponseNumberFloat invokes test_response_number_float operation.
	//
	// POST /test_response_number_float
	TestResponseNumberFloat(ctx context.Context, request string) (float32, error)
	// TestResponseNumberFloatArray invokes test_response_number_float_array operation.
	//
	// POST /test_response_number_float_array
	TestResponseNumberFloatArray(ctx context.Context, request string) ([]float32, error)
	// TestResponseNumberFloatArrayArray invokes test_response_number_float_array_array operation.
	//
	// POST /test_response_number_float_array_array
	TestResponseNumberFloatArrayArray(ctx context.Context, request string) ([][]float32, error)
	// TestResponseNumberFloatNullable invokes test_response_number_float_nullable operation.
	//
	// POST /test_response_number_float_nullable
	TestResponseNumberFloatNullable(ctx context.Context, request string) (NilFloat32, error)
	// TestResponseNumberFloatNullableArray invokes test_response_number_float_nullable_array operation.
	//
	// POST /test_response_number_float_nullable_array
	TestResponseNumberFloatNullableArray(ctx context.Context, request string) ([]NilFloat32, error)
	// TestResponseNumberFloatNullableArrayArray invokes test_response_number_float_nullable_array_array operation.
	//
	// POST /test_response_number_float_nullable_array_array
	TestResponseNumberFloatNullableArrayArray(ctx context.Context, request string) ([][]NilFloat32, error)
	// TestResponseNumberInt32 invokes test_response_number_int32 operation.
	//
	// POST /test_response_number_int32
	TestResponseNumberInt32(ctx context.Context, request string) (int32, error)
	// TestResponseNumberInt32Array invokes test_response_number_int32_array operation.
	//
	// POST /test_response_number_int32_array
	TestResponseNumberInt32Array(ctx context.Context, request string) ([]int32, error)
	// TestResponseNumberInt32ArrayArray invokes test_response_number_int32_array_array operation.
	//
	// POST /test_response_number_int32_array_array
	TestResponseNumberInt32ArrayArray(ctx context.Context, request string) ([][]int32, error)
	// TestResponseNumberInt32Nullable invokes test_response_number_int32_nullable operation.
	//
	// POST /test_response_number_int32_nullable
	TestResponseNumberInt32Nullable(ctx context.Context, request string) (NilInt32, error)
	// TestResponseNumberInt32NullableArray invokes test_response_number_int32_nullable_array operation.
	//
	// POST /test_response_number_int32_nullable_array
	TestResponseNumberInt32NullableArray(ctx context.Context, request string) ([]NilInt32, error)
	// TestResponseNumberInt32NullableArrayArray invokes test_response_number_int32_nullable_array_array operation.
	//
	// POST /test_response_number_int32_nullable_array_array
	TestResponseNumberInt32NullableArrayArray(ctx context.Context, request string) ([][]NilInt32, error)
	// TestResponseNumberInt64 invokes test_response_number_int64 operation.
	//
	// POST /test_response_number_int64
	TestResponseNumberInt64(ctx context.Context, request string) (int64, error)
	// TestResponseNumberInt64Array invokes test_response_number_int64_array operation.
	//
	// POST /test_response_number_int64_array
	TestResponseNumberInt64Array(ctx context.Context, request string) ([]int64, error)
	// TestResponseNumberInt64ArrayArray invokes test_response_number_int64_array_array operation.
	//
	// POST /test_response_number_int64_array_array
	TestResponseNumberInt64ArrayArray(ctx context.Context, request string) ([][]int64, error)
	// TestResponseNumberInt64Nullable invokes test_response_number_int64_nullable operation.
	//
	// POST /test_response_number_int64_nullable
	TestResponseNumberInt64Nullable(ctx context.Context, request string) (NilInt64, error)
	// TestResponseNumberInt64NullableArray invokes test_response_number_int64_nullable_array operation.
	//
	// POST /test_response_number_int64_nullable_array
	TestResponseNumberInt64NullableArray(ctx context.Context, request string) ([]NilInt64, error)
	// TestResponseNumberInt64NullableArrayArray invokes test_response_number_int64_nullable_array_array operation.
	//
	// POST /test_response_number_int64_nullable_array_array
	TestResponseNumberInt64NullableArrayArray(ctx context.Context, request string) ([][]NilInt64, error)
	// TestResponseNumberNullable invokes test_response_number_nullable operation.
	//
	// POST /test_response_number_nullable
	TestResponseNumberNullable(ctx context.Context, request string) (NilFloat64, error)
	// TestResponseNumberNullableArray invokes test_response_number_nullable_array operation.
	//
	// POST /test_response_number_nullable_array
	TestResponseNumberNullableArray(ctx context.Context, request string) ([]NilFloat64, error)
	// TestResponseNumberNullableArrayArray invokes test_response_number_nullable_array_array operation.
	//
	// POST /test_response_number_nullable_array_array
	TestResponseNumberNullableArrayArray(ctx context.Context, request string) ([][]NilFloat64, error)
	// TestResponseString invokes test_response_string operation.
	//
	// POST /test_response_string
	TestResponseString(ctx context.Context, request string) (string, error)
	// TestResponseStringArray invokes test_response_string_array operation.
	//
	// POST /test_response_string_array
	TestResponseStringArray(ctx context.Context, request string) ([]string, error)
	// TestResponseStringArrayArray invokes test_response_string_array_array operation.
	//
	// POST /test_response_string_array_array
	TestResponseStringArrayArray(ctx context.Context, request string) ([][]string, error)
	// TestResponseStringBase64 invokes test_response_string_base64 operation.
	//
	// POST /test_response_string_base64
	TestResponseStringBase64(ctx context.Context, request string) ([]byte, error)
	// TestResponseStringBase64Array invokes test_response_string_base64_array operation.
	//
	// POST /test_response_string_base64_array
	TestResponseStringBase64Array(ctx context.Context, request string) ([][]byte, error)
	// TestResponseStringBase64ArrayArray invokes test_response_string_base64_array_array operation.
	//
	// POST /test_response_string_base64_array_array
	TestResponseStringBase64ArrayArray(ctx context.Context, request string) ([][][]byte, error)
	// TestResponseStringBase64Nullable invokes test_response_string_base64_nullable operation.
	//
	// POST /test_response_string_base64_nullable
	TestResponseStringBase64Nullable(ctx context.Context, request string) ([]byte, error)
	// TestResponseStringBase64NullableArray invokes test_response_string_base64_nullable_array operation.
	//
	// POST /test_response_string_base64_nullable_array
	TestResponseStringBase64NullableArray(ctx context.Context, request string) ([][]byte, error)
	// TestResponseStringBase64NullableArrayArray invokes test_response_string_base64_nullable_array_array operation.
	//
	// POST /test_response_string_base64_nullable_array_array
	TestResponseStringBase64NullableArrayArray(ctx context.Context, request string) ([][][]byte, error)
	// TestResponseStringBinary invokes test_response_string_binary operation.
	//
	// POST /test_response_string_binary
	TestResponseStringBinary(ctx context.Context, request string) (string, error)
	// TestResponseStringBinaryArray invokes test_response_string_binary_array operation.
	//
	// POST /test_response_string_binary_array
	TestResponseStringBinaryArray(ctx context.Context, request string) ([]string, error)
	// TestResponseStringBinaryArrayArray invokes test_response_string_binary_array_array operation.
	//
	// POST /test_response_string_binary_array_array
	TestResponseStringBinaryArrayArray(ctx context.Context, request string) ([][]string, error)
	// TestResponseStringBinaryNullable invokes test_response_string_binary_nullable operation.
	//
	// POST /test_response_string_binary_nullable
	TestResponseStringBinaryNullable(ctx context.Context, request string) (NilString, error)
	// TestResponseStringBinaryNullableArray invokes test_response_string_binary_nullable_array operation.
	//
	// POST /test_response_string_binary_nullable_array
	TestResponseStringBinaryNullableArray(ctx context.Context, request string) ([]NilString, error)
	// TestResponseStringBinaryNullableArrayArray invokes test_response_string_binary_nullable_array_array operation.
	//
	// POST /test_response_string_binary_nullable_array_array
	TestResponseStringBinaryNullableArrayArray(ctx context.Context, request string) ([][]NilString, error)
	// TestResponseStringByte invokes test_response_string_byte operation.
	//
	// POST /test_response_string_byte
	TestResponseStringByte(ctx context.Context, request string) ([]byte, error)
	// TestResponseStringByteArray invokes test_response_string_byte_array operation.
	//
	// POST /test_response_string_byte_array
	TestResponseStringByteArray(ctx context.Context, request string) ([][]byte, error)
	// TestResponseStringByteArrayArray invokes test_response_string_byte_array_array operation.
	//
	// POST /test_response_string_byte_array_array
	TestResponseStringByteArrayArray(ctx context.Context, request string) ([][][]byte, error)
	// TestResponseStringByteNullable invokes test_response_string_byte_nullable operation.
	//
	// POST /test_response_string_byte_nullable
	TestResponseStringByteNullable(ctx context.Context, request string) ([]byte, error)
	// TestResponseStringByteNullableArray invokes test_response_string_byte_nullable_array operation.
	//
	// POST /test_response_string_byte_nullable_array
	TestResponseStringByteNullableArray(ctx context.Context, request string) ([][]byte, error)
	// TestResponseStringByteNullableArrayArray invokes test_response_string_byte_nullable_array_array operation.
	//
	// POST /test_response_string_byte_nullable_array_array
	TestResponseStringByteNullableArrayArray(ctx context.Context, request string) ([][][]byte, error)
	// TestResponseStringDate invokes test_response_string_date operation.
	//
	// POST /test_response_string_date
	TestResponseStringDate(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringDateArray invokes test_response_string_date_array operation.
	//
	// POST /test_response_string_date_array
	TestResponseStringDateArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringDateArrayArray invokes test_response_string_date_array_array operation.
	//
	// POST /test_response_string_date_array_array
	TestResponseStringDateArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringDateNullable invokes test_response_string_date_nullable operation.
	//
	// POST /test_response_string_date_nullable
	TestResponseStringDateNullable(ctx context.Context, request string) (NilDate, error)
	// TestResponseStringDateNullableArray invokes test_response_string_date_nullable_array operation.
	//
	// POST /test_response_string_date_nullable_array
	TestResponseStringDateNullableArray(ctx context.Context, request string) ([]NilDate, error)
	// TestResponseStringDateNullableArrayArray invokes test_response_string_date_nullable_array_array operation.
	//
	// POST /test_response_string_date_nullable_array_array
	TestResponseStringDateNullableArrayArray(ctx context.Context, request string) ([][]NilDate, error)
	// TestResponseStringDateTime invokes test_response_string_date-time operation.
	//
	// POST /test_response_string_date-time
	TestResponseStringDateTime(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringDateTimeArray invokes test_response_string_date-time_array operation.
	//
	// POST /test_response_string_date-time_array
	TestResponseStringDateTimeArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringDateTimeArrayArray invokes test_response_string_date-time_array_array operation.
	//
	// POST /test_response_string_date-time_array_array
	TestResponseStringDateTimeArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringDateTimeNullable invokes test_response_string_date-time_nullable operation.
	//
	// POST /test_response_string_date-time_nullable
	TestResponseStringDateTimeNullable(ctx context.Context, request string) (NilDateTime, error)
	// TestResponseStringDateTimeNullableArray invokes test_response_string_date-time_nullable_array operation.
	//
	// POST /test_response_string_date-time_nullable_array
	TestResponseStringDateTimeNullableArray(ctx context.Context, request string) ([]NilDateTime, error)
	// TestResponseStringDateTimeNullableArrayArray invokes test_response_string_date-time_nullable_array_array operation.
	//
	// POST /test_response_string_date-time_nullable_array_array
	TestResponseStringDateTimeNullableArrayArray(ctx context.Context, request string) ([][]NilDateTime, error)
	// TestResponseStringDuration invokes test_response_string_duration operation.
	//
	// POST /test_response_string_duration
	TestResponseStringDuration(ctx context.Context, request string) (time.Duration, error)
	// TestResponseStringDurationArray invokes test_response_string_duration_array operation.
	//
	// POST /test_response_string_duration_array
	TestResponseStringDurationArray(ctx context.Context, request string) ([]time.Duration, error)
	// TestResponseStringDurationArrayArray invokes test_response_string_duration_array_array operation.
	//
	// POST /test_response_string_duration_array_array
	TestResponseStringDurationArrayArray(ctx context.Context, request string) ([][]time.Duration, error)
	// TestResponseStringDurationNullable invokes test_response_string_duration_nullable operation.
	//
	// POST /test_response_string_duration_nullable
	TestResponseStringDurationNullable(ctx context.Context, request string) (NilDuration, error)
	// TestResponseStringDurationNullableArray invokes test_response_string_duration_nullable_array operation.
	//
	// POST /test_response_string_duration_nullable_array
	TestResponseStringDurationNullableArray(ctx context.Context, request string) ([]NilDuration, error)
	// TestResponseStringDurationNullableArrayArray invokes test_response_string_duration_nullable_array_array operation.
	//
	// POST /test_response_string_duration_nullable_array_array
	TestResponseStringDurationNullableArrayArray(ctx context.Context, request string) ([][]NilDuration, error)
	// TestResponseStringEmail invokes test_response_string_email operation.
	//
	// POST /test_response_string_email
	TestResponseStringEmail(ctx context.Context, request string) (string, error)
	// TestResponseStringEmailArray invokes test_response_string_email_array operation.
	//
	// POST /test_response_string_email_array
	TestResponseStringEmailArray(ctx context.Context, request string) ([]string, error)
	// TestResponseStringEmailArrayArray invokes test_response_string_email_array_array operation.
	//
	// POST /test_response_string_email_array_array
	TestResponseStringEmailArrayArray(ctx context.Context, request string) ([][]string, error)
	// TestResponseStringEmailNullable invokes test_response_string_email_nullable operation.
	//
	// POST /test_response_string_email_nullable
	TestResponseStringEmailNullable(ctx context.Context, request string) (NilString, error)
	// TestResponseStringEmailNullableArray invokes test_response_string_email_nullable_array operation.
	//
	// POST /test_response_string_email_nullable_array
	TestResponseStringEmailNullableArray(ctx context.Context, request string) ([]NilString, error)
	// TestResponseStringEmailNullableArrayArray invokes test_response_string_email_nullable_array_array operation.
	//
	// POST /test_response_string_email_nullable_array_array
	TestResponseStringEmailNullableArrayArray(ctx context.Context, request string) ([][]NilString, error)
	// TestResponseStringFloat32 invokes test_response_string_float32 operation.
	//
	// POST /test_response_string_float32
	TestResponseStringFloat32(ctx context.Context, request string) (float32, error)
	// TestResponseStringFloat32Array invokes test_response_string_float32_array operation.
	//
	// POST /test_response_string_float32_array
	TestResponseStringFloat32Array(ctx context.Context, request string) ([]float32, error)
	// TestResponseStringFloat32ArrayArray invokes test_response_string_float32_array_array operation.
	//
	// POST /test_response_string_float32_array_array
	TestResponseStringFloat32ArrayArray(ctx context.Context, request string) ([][]float32, error)
	// TestResponseStringFloat32Nullable invokes test_response_string_float32_nullable operation.
	//
	// POST /test_response_string_float32_nullable
	TestResponseStringFloat32Nullable(ctx context.Context, request string) (NilStringFloat32, error)
	// TestResponseStringFloat32NullableArray invokes test_response_string_float32_nullable_array operation.
	//
	// POST /test_response_string_float32_nullable_array
	TestResponseStringFloat32NullableArray(ctx context.Context, request string) ([]NilStringFloat32, error)
	// TestResponseStringFloat32NullableArrayArray invokes test_response_string_float32_nullable_array_array operation.
	//
	// POST /test_response_string_float32_nullable_array_array
	TestResponseStringFloat32NullableArrayArray(ctx context.Context, request string) ([][]NilStringFloat32, error)
	// TestResponseStringFloat64 invokes test_response_string_float64 operation.
	//
	// POST /test_response_string_float64
	TestResponseStringFloat64(ctx context.Context, request string) (float64, error)
	// TestResponseStringFloat64Array invokes test_response_string_float64_array operation.
	//
	// POST /test_response_string_float64_array
	TestResponseStringFloat64Array(ctx context.Context, request string) ([]float64, error)
	// TestResponseStringFloat64ArrayArray invokes test_response_string_float64_array_array operation.
	//
	// POST /test_response_string_float64_array_array
	TestResponseStringFloat64ArrayArray(ctx context.Context, request string) ([][]float64, error)
	// TestResponseStringFloat64Nullable invokes test_response_string_float64_nullable operation.
	//
	// POST /test_response_string_float64_nullable
	TestResponseStringFloat64Nullable(ctx context.Context, request string) (NilStringFloat64, error)
	// TestResponseStringFloat64NullableArray invokes test_response_string_float64_nullable_array operation.
	//
	// POST /test_response_string_float64_nullable_array
	TestResponseStringFloat64NullableArray(ctx context.Context, request string) ([]NilStringFloat64, error)
	// TestResponseStringFloat64NullableArrayArray invokes test_response_string_float64_nullable_array_array operation.
	//
	// POST /test_response_string_float64_nullable_array_array
	TestResponseStringFloat64NullableArrayArray(ctx context.Context, request string) ([][]NilStringFloat64, error)
	// TestResponseStringHostname invokes test_response_string_hostname operation.
	//
	// POST /test_response_string_hostname
	TestResponseStringHostname(ctx context.Context, request string) (string, error)
	// TestResponseStringHostnameArray invokes test_response_string_hostname_array operation.
	//
	// POST /test_response_string_hostname_array
	TestResponseStringHostnameArray(ctx context.Context, request string) ([]string, error)
	// TestResponseStringHostnameArrayArray invokes test_response_string_hostname_array_array operation.
	//
	// POST /test_response_string_hostname_array_array
	TestResponseStringHostnameArrayArray(ctx context.Context, request string) ([][]string, error)
	// TestResponseStringHostnameNullable invokes test_response_string_hostname_nullable operation.
	//
	// POST /test_response_string_hostname_nullable
	TestResponseStringHostnameNullable(ctx context.Context, request string) (NilString, error)
	// TestResponseStringHostnameNullableArray invokes test_response_string_hostname_nullable_array operation.
	//
	// POST /test_response_string_hostname_nullable_array
	TestResponseStringHostnameNullableArray(ctx context.Context, request string) ([]NilString, error)
	// TestResponseStringHostnameNullableArrayArray invokes test_response_string_hostname_nullable_array_array operation.
	//
	// POST /test_response_string_hostname_nullable_array_array
	TestResponseStringHostnameNullableArrayArray(ctx context.Context, request string) ([][]NilString, error)
	// TestResponseStringIP invokes test_response_string_ip operation.
	//
	// POST /test_response_string_ip
	TestResponseStringIP(ctx context.Context, request string) (netip.Addr, error)
	// TestResponseStringIPArray invokes test_response_string_ip_array operation.
	//
	// POST /test_response_string_ip_array
	TestResponseStringIPArray(ctx context.Context, request string) ([]netip.Addr, error)
	// TestResponseStringIPArrayArray invokes test_response_string_ip_array_array operation.
	//
	// POST /test_response_string_ip_array_array
	TestResponseStringIPArrayArray(ctx context.Context, request string) ([][]netip.Addr, error)
	// TestResponseStringIPNullable invokes test_response_string_ip_nullable operation.
	//
	// POST /test_response_string_ip_nullable
	TestResponseStringIPNullable(ctx context.Context, request string) (NilIP, error)
	// TestResponseStringIPNullableArray invokes test_response_string_ip_nullable_array operation.
	//
	// POST /test_response_string_ip_nullable_array
	TestResponseStringIPNullableArray(ctx context.Context, request string) ([]NilIP, error)
	// TestResponseStringIPNullableArrayArray invokes test_response_string_ip_nullable_array_array operation.
	//
	// POST /test_response_string_ip_nullable_array_array
	TestResponseStringIPNullableArrayArray(ctx context.Context, request string) ([][]NilIP, error)
	// TestResponseStringInt invokes test_response_string_int operation.
	//
	// POST /test_response_string_int
	TestResponseStringInt(ctx context.Context, request string) (int, error)
	// TestResponseStringInt16 invokes test_response_string_int16 operation.
	//
	// POST /test_response_string_int16
	TestResponseStringInt16(ctx context.Context, request string) (int16, error)
	// TestResponseStringInt16Array invokes test_response_string_int16_array operation.
	//
	// POST /test_response_string_int16_array
	TestResponseStringInt16Array(ctx context.Context, request string) ([]int16, error)
	// TestResponseStringInt16ArrayArray invokes test_response_string_int16_array_array operation.
	//
	// POST /test_response_string_int16_array_array
	TestResponseStringInt16ArrayArray(ctx context.Context, request string) ([][]int16, error)
	// TestResponseStringInt16Nullable invokes test_response_string_int16_nullable operation.
	//
	// POST /test_response_string_int16_nullable
	TestResponseStringInt16Nullable(ctx context.Context, request string) (NilStringInt16, error)
	// TestResponseStringInt16NullableArray invokes test_response_string_int16_nullable_array operation.
	//
	// POST /test_response_string_int16_nullable_array
	TestResponseStringInt16NullableArray(ctx context.Context, request string) ([]NilStringInt16, error)
	// TestResponseStringInt16NullableArrayArray invokes test_response_string_int16_nullable_array_array operation.
	//
	// POST /test_response_string_int16_nullable_array_array
	TestResponseStringInt16NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt16, error)
	// TestResponseStringInt32 invokes test_response_string_int32 operation.
	//
	// POST /test_response_string_int32
	TestResponseStringInt32(ctx context.Context, request string) (int32, error)
	// TestResponseStringInt32Array invokes test_response_string_int32_array operation.
	//
	// POST /test_response_string_int32_array
	TestResponseStringInt32Array(ctx context.Context, request string) ([]int32, error)
	// TestResponseStringInt32ArrayArray invokes test_response_string_int32_array_array operation.
	//
	// POST /test_response_string_int32_array_array
	TestResponseStringInt32ArrayArray(ctx context.Context, request string) ([][]int32, error)
	// TestResponseStringInt32Nullable invokes test_response_string_int32_nullable operation.
	//
	// POST /test_response_string_int32_nullable
	TestResponseStringInt32Nullable(ctx context.Context, request string) (NilStringInt32, error)
	// TestResponseStringInt32NullableArray invokes test_response_string_int32_nullable_array operation.
	//
	// POST /test_response_string_int32_nullable_array
	TestResponseStringInt32NullableArray(ctx context.Context, request string) ([]NilStringInt32, error)
	// TestResponseStringInt32NullableArrayArray invokes test_response_string_int32_nullable_array_array operation.
	//
	// POST /test_response_string_int32_nullable_array_array
	TestResponseStringInt32NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt32, error)
	// TestResponseStringInt64 invokes test_response_string_int64 operation.
	//
	// POST /test_response_string_int64
	TestResponseStringInt64(ctx context.Context, request string) (int64, error)
	// TestResponseStringInt64Array invokes test_response_string_int64_array operation.
	//
	// POST /test_response_string_int64_array
	TestResponseStringInt64Array(ctx context.Context, request string) ([]int64, error)
	// TestResponseStringInt64ArrayArray invokes test_response_string_int64_array_array operation.
	//
	// POST /test_response_string_int64_array_array
	TestResponseStringInt64ArrayArray(ctx context.Context, request string) ([][]int64, error)
	// TestResponseStringInt64Nullable invokes test_response_string_int64_nullable operation.
	//
	// POST /test_response_string_int64_nullable
	TestResponseStringInt64Nullable(ctx context.Context, request string) (NilStringInt64, error)
	// TestResponseStringInt64NullableArray invokes test_response_string_int64_nullable_array operation.
	//
	// POST /test_response_string_int64_nullable_array
	TestResponseStringInt64NullableArray(ctx context.Context, request string) ([]NilStringInt64, error)
	// TestResponseStringInt64NullableArrayArray invokes test_response_string_int64_nullable_array_array operation.
	//
	// POST /test_response_string_int64_nullable_array_array
	TestResponseStringInt64NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt64, error)
	// TestResponseStringInt8 invokes test_response_string_int8 operation.
	//
	// POST /test_response_string_int8
	TestResponseStringInt8(ctx context.Context, request string) (int8, error)
	// TestResponseStringInt8Array invokes test_response_string_int8_array operation.
	//
	// POST /test_response_string_int8_array
	TestResponseStringInt8Array(ctx context.Context, request string) ([]int8, error)
	// TestResponseStringInt8ArrayArray invokes test_response_string_int8_array_array operation.
	//
	// POST /test_response_string_int8_array_array
	TestResponseStringInt8ArrayArray(ctx context.Context, request string) ([][]int8, error)
	// TestResponseStringInt8Nullable invokes test_response_string_int8_nullable operation.
	//
	// POST /test_response_string_int8_nullable
	TestResponseStringInt8Nullable(ctx context.Context, request string) (NilStringInt8, error)
	// TestResponseStringInt8NullableArray invokes test_response_string_int8_nullable_array operation.
	//
	// POST /test_response_string_int8_nullable_array
	TestResponseStringInt8NullableArray(ctx context.Context, request string) ([]NilStringInt8, error)
	// TestResponseStringInt8NullableArrayArray invokes test_response_string_int8_nullable_array_array operation.
	//
	// POST /test_response_string_int8_nullable_array_array
	TestResponseStringInt8NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt8, error)
	// TestResponseStringIntArray invokes test_response_string_int_array operation.
	//
	// POST /test_response_string_int_array
	TestResponseStringIntArray(ctx context.Context, request string) ([]int, error)
	// TestResponseStringIntArrayArray invokes test_response_string_int_array_array operation.
	//
	// POST /test_response_string_int_array_array
	TestResponseStringIntArrayArray(ctx context.Context, request string) ([][]int, error)
	// TestResponseStringIntNullable invokes test_response_string_int_nullable operation.
	//
	// POST /test_response_string_int_nullable
	TestResponseStringIntNullable(ctx context.Context, request string) (NilStringInt, error)
	// TestResponseStringIntNullableArray invokes test_response_string_int_nullable_array operation.
	//
	// POST /test_response_string_int_nullable_array
	TestResponseStringIntNullableArray(ctx context.Context, request string) ([]NilStringInt, error)
	// TestResponseStringIntNullableArrayArray invokes test_response_string_int_nullable_array_array operation.
	//
	// POST /test_response_string_int_nullable_array_array
	TestResponseStringIntNullableArrayArray(ctx context.Context, request string) ([][]NilStringInt, error)
	// TestResponseStringIpv4 invokes test_response_string_ipv4 operation.
	//
	// POST /test_response_string_ipv4
	TestResponseStringIpv4(ctx context.Context, request string) (netip.Addr, error)
	// TestResponseStringIpv4Array invokes test_response_string_ipv4_array operation.
	//
	// POST /test_response_string_ipv4_array
	TestResponseStringIpv4Array(ctx context.Context, request string) ([]netip.Addr, error)
	// TestResponseStringIpv4ArrayArray invokes test_response_string_ipv4_array_array operation.
	//
	// POST /test_response_string_ipv4_array_array
	TestResponseStringIpv4ArrayArray(ctx context.Context, request string) ([][]netip.Addr, error)
	// TestResponseStringIpv4Nullable invokes test_response_string_ipv4_nullable operation.
	//
	// POST /test_response_string_ipv4_nullable
	TestResponseStringIpv4Nullable(ctx context.Context, request string) (NilIPv4, error)
	// TestResponseStringIpv4NullableArray invokes test_response_string_ipv4_nullable_array operation.
	//
	// POST /test_response_string_ipv4_nullable_array
	TestResponseStringIpv4NullableArray(ctx context.Context, request string) ([]NilIPv4, error)
	// TestResponseStringIpv4NullableArrayArray invokes test_response_string_ipv4_nullable_array_array operation.
	//
	// POST /test_response_string_ipv4_nullable_array_array
	TestResponseStringIpv4NullableArrayArray(ctx context.Context, request string) ([][]NilIPv4, error)
	// TestResponseStringIpv6 invokes test_response_string_ipv6 operation.
	//
	// POST /test_response_string_ipv6
	TestResponseStringIpv6(ctx context.Context, request string) (netip.Addr, error)
	// TestResponseStringIpv6Array invokes test_response_string_ipv6_array operation.
	//
	// POST /test_response_string_ipv6_array
	TestResponseStringIpv6Array(ctx context.Context, request string) ([]netip.Addr, error)
	// TestResponseStringIpv6ArrayArray invokes test_response_string_ipv6_array_array operation.
	//
	// POST /test_response_string_ipv6_array_array
	TestResponseStringIpv6ArrayArray(ctx context.Context, request string) ([][]netip.Addr, error)
	// TestResponseStringIpv6Nullable invokes test_response_string_ipv6_nullable operation.
	//
	// POST /test_response_string_ipv6_nullable
	TestResponseStringIpv6Nullable(ctx context.Context, request string) (NilIPv6, error)
	// TestResponseStringIpv6NullableArray invokes test_response_string_ipv6_nullable_array operation.
	//
	// POST /test_response_string_ipv6_nullable_array
	TestResponseStringIpv6NullableArray(ctx context.Context, request string) ([]NilIPv6, error)
	// TestResponseStringIpv6NullableArrayArray invokes test_response_string_ipv6_nullable_array_array operation.
	//
	// POST /test_response_string_ipv6_nullable_array_array
	TestResponseStringIpv6NullableArrayArray(ctx context.Context, request string) ([][]NilIPv6, error)
	// TestResponseStringNullable invokes test_response_string_nullable operation.
	//
	// POST /test_response_string_nullable
	TestResponseStringNullable(ctx context.Context, request string) (NilString, error)
	// TestResponseStringNullableArray invokes test_response_string_nullable_array operation.
	//
	// POST /test_response_string_nullable_array
	TestResponseStringNullableArray(ctx context.Context, request string) ([]NilString, error)
	// TestResponseStringNullableArrayArray invokes test_response_string_nullable_array_array operation.
	//
	// POST /test_response_string_nullable_array_array
	TestResponseStringNullableArrayArray(ctx context.Context, request string) ([][]NilString, error)
	// TestResponseStringPassword invokes test_response_string_password operation.
	//
	// POST /test_response_string_password
	TestResponseStringPassword(ctx context.Context, request string) (string, error)
	// TestResponseStringPasswordArray invokes test_response_string_password_array operation.
	//
	// POST /test_response_string_password_array
	TestResponseStringPasswordArray(ctx context.Context, request string) ([]string, error)
	// TestResponseStringPasswordArrayArray invokes test_response_string_password_array_array operation.
	//
	// POST /test_response_string_password_array_array
	TestResponseStringPasswordArrayArray(ctx context.Context, request string) ([][]string, error)
	// TestResponseStringPasswordNullable invokes test_response_string_password_nullable operation.
	//
	// POST /test_response_string_password_nullable
	TestResponseStringPasswordNullable(ctx context.Context, request string) (NilString, error)
	// TestResponseStringPasswordNullableArray invokes test_response_string_password_nullable_array operation.
	//
	// POST /test_response_string_password_nullable_array
	TestResponseStringPasswordNullableArray(ctx context.Context, request string) ([]NilString, error)
	// TestResponseStringPasswordNullableArrayArray invokes test_response_string_password_nullable_array_array operation.
	//
	// POST /test_response_string_password_nullable_array_array
	TestResponseStringPasswordNullableArrayArray(ctx context.Context, request string) ([][]NilString, error)
	// TestResponseStringTime invokes test_response_string_time operation.
	//
	// POST /test_response_string_time
	TestResponseStringTime(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringTimeArray invokes test_response_string_time_array operation.
	//
	// POST /test_response_string_time_array
	TestResponseStringTimeArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringTimeArrayArray invokes test_response_string_time_array_array operation.
	//
	// POST /test_response_string_time_array_array
	TestResponseStringTimeArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringTimeNullable invokes test_response_string_time_nullable operation.
	//
	// POST /test_response_string_time_nullable
	TestResponseStringTimeNullable(ctx context.Context, request string) (NilTime, error)
	// TestResponseStringTimeNullableArray invokes test_response_string_time_nullable_array operation.
	//
	// POST /test_response_string_time_nullable_array
	TestResponseStringTimeNullableArray(ctx context.Context, request string) ([]NilTime, error)
	// TestResponseStringTimeNullableArrayArray invokes test_response_string_time_nullable_array_array operation.
	//
	// POST /test_response_string_time_nullable_array_array
	TestResponseStringTimeNullableArrayArray(ctx context.Context, request string) ([][]NilTime, error)
	// TestResponseStringURI invokes test_response_string_uri operation.
	//
	// POST /test_response_string_uri
	TestResponseStringURI(ctx context.Context, request string) (url.URL, error)
	// TestResponseStringURIArray invokes test_response_string_uri_array operation.
	//
	// POST /test_response_string_uri_array
	TestResponseStringURIArray(ctx context.Context, request string) ([]url.URL, error)
	// TestResponseStringURIArrayArray invokes test_response_string_uri_array_array operation.
	//
	// POST /test_response_string_uri_array_array
	TestResponseStringURIArrayArray(ctx context.Context, request string) ([][]url.URL, error)
	// TestResponseStringURINullable invokes test_response_string_uri_nullable operation.
	//
	// POST /test_response_string_uri_nullable
	TestResponseStringURINullable(ctx context.Context, request string) (NilURI, error)
	// TestResponseStringURINullableArray invokes test_response_string_uri_nullable_array operation.
	//
	// POST /test_response_string_uri_nullable_array
	TestResponseStringURINullableArray(ctx context.Context, request string) ([]NilURI, error)
	// TestResponseStringURINullableArrayArray invokes test_response_string_uri_nullable_array_array operation.
	//
	// POST /test_response_string_uri_nullable_array_array
	TestResponseStringURINullableArrayArray(ctx context.Context, request string) ([][]NilURI, error)
	// TestResponseStringUUID invokes test_response_string_uuid operation.
	//
	// POST /test_response_string_uuid
	TestResponseStringUUID(ctx context.Context, request string) (uuid.UUID, error)
	// TestResponseStringUUIDArray invokes test_response_string_uuid_array operation.
	//
	// POST /test_response_string_uuid_array
	TestResponseStringUUIDArray(ctx context.Context, request string) ([]uuid.UUID, error)
	// TestResponseStringUUIDArrayArray invokes test_response_string_uuid_array_array operation.
	//
	// POST /test_response_string_uuid_array_array
	TestResponseStringUUIDArrayArray(ctx context.Context, request string) ([][]uuid.UUID, error)
	// TestResponseStringUUIDNullable invokes test_response_string_uuid_nullable operation.
	//
	// POST /test_response_string_uuid_nullable
	TestResponseStringUUIDNullable(ctx context.Context, request string) (NilUUID, error)
	// TestResponseStringUUIDNullableArray invokes test_response_string_uuid_nullable_array operation.
	//
	// POST /test_response_string_uuid_nullable_array
	TestResponseStringUUIDNullableArray(ctx context.Context, request string) ([]NilUUID, error)
	// TestResponseStringUUIDNullableArrayArray invokes test_response_string_uuid_nullable_array_array operation.
	//
	// POST /test_response_string_uuid_nullable_array_array
	TestResponseStringUUIDNullableArrayArray(ctx context.Context, request string) ([][]NilUUID, error)
	// TestResponseStringUint invokes test_response_string_uint operation.
	//
	// POST /test_response_string_uint
	TestResponseStringUint(ctx context.Context, request string) (uint, error)
	// TestResponseStringUint16 invokes test_response_string_uint16 operation.
	//
	// POST /test_response_string_uint16
	TestResponseStringUint16(ctx context.Context, request string) (uint16, error)
	// TestResponseStringUint16Array invokes test_response_string_uint16_array operation.
	//
	// POST /test_response_string_uint16_array
	TestResponseStringUint16Array(ctx context.Context, request string) ([]uint16, error)
	// TestResponseStringUint16ArrayArray invokes test_response_string_uint16_array_array operation.
	//
	// POST /test_response_string_uint16_array_array
	TestResponseStringUint16ArrayArray(ctx context.Context, request string) ([][]uint16, error)
	// TestResponseStringUint16Nullable invokes test_response_string_uint16_nullable operation.
	//
	// POST /test_response_string_uint16_nullable
	TestResponseStringUint16Nullable(ctx context.Context, request string) (NilStringUint16, error)
	// TestResponseStringUint16NullableArray invokes test_response_string_uint16_nullable_array operation.
	//
	// POST /test_response_string_uint16_nullable_array
	TestResponseStringUint16NullableArray(ctx context.Context, request string) ([]NilStringUint16, error)
	// TestResponseStringUint16NullableArrayArray invokes test_response_string_uint16_nullable_array_array operation.
	//
	// POST /test_response_string_uint16_nullable_array_array
	TestResponseStringUint16NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint16, error)
	// TestResponseStringUint32 invokes test_response_string_uint32 operation.
	//
	// POST /test_response_string_uint32
	TestResponseStringUint32(ctx context.Context, request string) (uint32, error)
	// TestResponseStringUint32Array invokes test_response_string_uint32_array operation.
	//
	// POST /test_response_string_uint32_array
	TestResponseStringUint32Array(ctx context.Context, request string) ([]uint32, error)
	// TestResponseStringUint32ArrayArray invokes test_response_string_uint32_array_array operation.
	//
	// POST /test_response_string_uint32_array_array
	TestResponseStringUint32ArrayArray(ctx context.Context, request string) ([][]uint32, error)
	// TestResponseStringUint32Nullable invokes test_response_string_uint32_nullable operation.
	//
	// POST /test_response_string_uint32_nullable
	TestResponseStringUint32Nullable(ctx context.Context, request string) (NilStringUint32, error)
	// TestResponseStringUint32NullableArray invokes test_response_string_uint32_nullable_array operation.
	//
	// POST /test_response_string_uint32_nullable_array
	TestResponseStringUint32NullableArray(ctx context.Context, request string) ([]NilStringUint32, error)
	// TestResponseStringUint32NullableArrayArray invokes test_response_string_uint32_nullable_array_array operation.
	//
	// POST /test_response_string_uint32_nullable_array_array
	TestResponseStringUint32NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint32, error)
	// TestResponseStringUint64 invokes test_response_string_uint64 operation.
	//
	// POST /test_response_string_uint64
	TestResponseStringUint64(ctx context.Context, request string) (uint64, error)
	// TestResponseStringUint64Array invokes test_response_string_uint64_array operation.
	//
	// POST /test_response_string_uint64_array
	TestResponseStringUint64Array(ctx context.Context, request string) ([]uint64, error)
	// TestResponseStringUint64ArrayArray invokes test_response_string_uint64_array_array operation.
	//
	// POST /test_response_string_uint64_array_array
	TestResponseStringUint64ArrayArray(ctx context.Context, request string) ([][]uint64, error)
	// TestResponseStringUint64Nullable invokes test_response_string_uint64_nullable operation.
	//
	// POST /test_response_string_uint64_nullable
	TestResponseStringUint64Nullable(ctx context.Context, request string) (NilStringUint64, error)
	// TestResponseStringUint64NullableArray invokes test_response_string_uint64_nullable_array operation.
	//
	// POST /test_response_string_uint64_nullable_array
	TestResponseStringUint64NullableArray(ctx context.Context, request string) ([]NilStringUint64, error)
	// TestResponseStringUint64NullableArrayArray invokes test_response_string_uint64_nullable_array_array operation.
	//
	// POST /test_response_string_uint64_nullable_array_array
	TestResponseStringUint64NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint64, error)
	// TestResponseStringUint8 invokes test_response_string_uint8 operation.
	//
	// POST /test_response_string_uint8
	TestResponseStringUint8(ctx context.Context, request string) (uint8, error)
	// TestResponseStringUint8Array invokes test_response_string_uint8_array operation.
	//
	// POST /test_response_string_uint8_array
	TestResponseStringUint8Array(ctx context.Context, request string) ([]uint8, error)
	// TestResponseStringUint8ArrayArray invokes test_response_string_uint8_array_array operation.
	//
	// POST /test_response_string_uint8_array_array
	TestResponseStringUint8ArrayArray(ctx context.Context, request string) ([][]uint8, error)
	// TestResponseStringUint8Nullable invokes test_response_string_uint8_nullable operation.
	//
	// POST /test_response_string_uint8_nullable
	TestResponseStringUint8Nullable(ctx context.Context, request string) (NilStringUint8, error)
	// TestResponseStringUint8NullableArray invokes test_response_string_uint8_nullable_array operation.
	//
	// POST /test_response_string_uint8_nullable_array
	TestResponseStringUint8NullableArray(ctx context.Context, request string) ([]NilStringUint8, error)
	// TestResponseStringUint8NullableArrayArray invokes test_response_string_uint8_nullable_array_array operation.
	//
	// POST /test_response_string_uint8_nullable_array_array
	TestResponseStringUint8NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint8, error)
	// TestResponseStringUintArray invokes test_response_string_uint_array operation.
	//
	// POST /test_response_string_uint_array
	TestResponseStringUintArray(ctx context.Context, request string) ([]uint, error)
	// TestResponseStringUintArrayArray invokes test_response_string_uint_array_array operation.
	//
	// POST /test_response_string_uint_array_array
	TestResponseStringUintArrayArray(ctx context.Context, request string) ([][]uint, error)
	// TestResponseStringUintNullable invokes test_response_string_uint_nullable operation.
	//
	// POST /test_response_string_uint_nullable
	TestResponseStringUintNullable(ctx context.Context, request string) (NilStringUint, error)
	// TestResponseStringUintNullableArray invokes test_response_string_uint_nullable_array operation.
	//
	// POST /test_response_string_uint_nullable_array
	TestResponseStringUintNullableArray(ctx context.Context, request string) ([]NilStringUint, error)
	// TestResponseStringUintNullableArrayArray invokes test_response_string_uint_nullable_array_array operation.
	//
	// POST /test_response_string_uint_nullable_array_array
	TestResponseStringUintNullableArrayArray(ctx context.Context, request string) ([][]NilStringUint, error)
	// TestResponseStringUnix invokes test_response_string_unix operation.
	//
	// POST /test_response_string_unix
	TestResponseStringUnix(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringUnixArray invokes test_response_string_unix_array operation.
	//
	// POST /test_response_string_unix_array
	TestResponseStringUnixArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringUnixArrayArray invokes test_response_string_unix_array_array operation.
	//
	// POST /test_response_string_unix_array_array
	TestResponseStringUnixArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringUnixMicro invokes test_response_string_unix-micro operation.
	//
	// POST /test_response_string_unix-micro
	TestResponseStringUnixMicro(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringUnixMicroArray invokes test_response_string_unix-micro_array operation.
	//
	// POST /test_response_string_unix-micro_array
	TestResponseStringUnixMicroArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringUnixMicroArrayArray invokes test_response_string_unix-micro_array_array operation.
	//
	// POST /test_response_string_unix-micro_array_array
	TestResponseStringUnixMicroArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringUnixMicroNullable invokes test_response_string_unix-micro_nullable operation.
	//
	// POST /test_response_string_unix-micro_nullable
	TestResponseStringUnixMicroNullable(ctx context.Context, request string) (NilStringUnixMicro, error)
	// TestResponseStringUnixMicroNullableArray invokes test_response_string_unix-micro_nullable_array operation.
	//
	// POST /test_response_string_unix-micro_nullable_array
	TestResponseStringUnixMicroNullableArray(ctx context.Context, request string) ([]NilStringUnixMicro, error)
	// TestResponseStringUnixMicroNullableArrayArray invokes test_response_string_unix-micro_nullable_array_array operation.
	//
	// POST /test_response_string_unix-micro_nullable_array_array
	TestResponseStringUnixMicroNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixMicro, error)
	// TestResponseStringUnixMilli invokes test_response_string_unix-milli operation.
	//
	// POST /test_response_string_unix-milli
	TestResponseStringUnixMilli(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringUnixMilliArray invokes test_response_string_unix-milli_array operation.
	//
	// POST /test_response_string_unix-milli_array
	TestResponseStringUnixMilliArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringUnixMilliArrayArray invokes test_response_string_unix-milli_array_array operation.
	//
	// POST /test_response_string_unix-milli_array_array
	TestResponseStringUnixMilliArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringUnixMilliNullable invokes test_response_string_unix-milli_nullable operation.
	//
	// POST /test_response_string_unix-milli_nullable
	TestResponseStringUnixMilliNullable(ctx context.Context, request string) (NilStringUnixMilli, error)
	// TestResponseStringUnixMilliNullableArray invokes test_response_string_unix-milli_nullable_array operation.
	//
	// POST /test_response_string_unix-milli_nullable_array
	TestResponseStringUnixMilliNullableArray(ctx context.Context, request string) ([]NilStringUnixMilli, error)
	// TestResponseStringUnixMilliNullableArrayArray invokes test_response_string_unix-milli_nullable_array_array operation.
	//
	// POST /test_response_string_unix-milli_nullable_array_array
	TestResponseStringUnixMilliNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixMilli, error)
	// TestResponseStringUnixNano invokes test_response_string_unix-nano operation.
	//
	// POST /test_response_string_unix-nano
	TestResponseStringUnixNano(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringUnixNanoArray invokes test_response_string_unix-nano_array operation.
	//
	// POST /test_response_string_unix-nano_array
	TestResponseStringUnixNanoArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringUnixNanoArrayArray invokes test_response_string_unix-nano_array_array operation.
	//
	// POST /test_response_string_unix-nano_array_array
	TestResponseStringUnixNanoArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringUnixNanoNullable invokes test_response_string_unix-nano_nullable operation.
	//
	// POST /test_response_string_unix-nano_nullable
	TestResponseStringUnixNanoNullable(ctx context.Context, request string) (NilStringUnixNano, error)
	// TestResponseStringUnixNanoNullableArray invokes test_response_string_unix-nano_nullable_array operation.
	//
	// POST /test_response_string_unix-nano_nullable_array
	TestResponseStringUnixNanoNullableArray(ctx context.Context, request string) ([]NilStringUnixNano, error)
	// TestResponseStringUnixNanoNullableArrayArray invokes test_response_string_unix-nano_nullable_array_array operation.
	//
	// POST /test_response_string_unix-nano_nullable_array_array
	TestResponseStringUnixNanoNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixNano, error)
	// TestResponseStringUnixNullable invokes test_response_string_unix_nullable operation.
	//
	// POST /test_response_string_unix_nullable
	TestResponseStringUnixNullable(ctx context.Context, request string) (NilStringUnixSeconds, error)
	// TestResponseStringUnixNullableArray invokes test_response_string_unix_nullable_array operation.
	//
	// POST /test_response_string_unix_nullable_array
	TestResponseStringUnixNullableArray(ctx context.Context, request string) ([]NilStringUnixSeconds, error)
	// TestResponseStringUnixNullableArrayArray invokes test_response_string_unix_nullable_array_array operation.
	//
	// POST /test_response_string_unix_nullable_array_array
	TestResponseStringUnixNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixSeconds, error)
	// TestResponseStringUnixSeconds invokes test_response_string_unix-seconds operation.
	//
	// POST /test_response_string_unix-seconds
	TestResponseStringUnixSeconds(ctx context.Context, request string) (time.Time, error)
	// TestResponseStringUnixSecondsArray invokes test_response_string_unix-seconds_array operation.
	//
	// POST /test_response_string_unix-seconds_array
	TestResponseStringUnixSecondsArray(ctx context.Context, request string) ([]time.Time, error)
	// TestResponseStringUnixSecondsArrayArray invokes test_response_string_unix-seconds_array_array operation.
	//
	// POST /test_response_string_unix-seconds_array_array
	TestResponseStringUnixSecondsArrayArray(ctx context.Context, request string) ([][]time.Time, error)
	// TestResponseStringUnixSecondsNullable invokes test_response_string_unix-seconds_nullable operation.
	//
	// POST /test_response_string_unix-seconds_nullable
	TestResponseStringUnixSecondsNullable(ctx context.Context, request string) (NilStringUnixSeconds, error)
	// TestResponseStringUnixSecondsNullableArray invokes test_response_string_unix-seconds_nullable_array operation.
	//
	// POST /test_response_string_unix-seconds_nullable_array
	TestResponseStringUnixSecondsNullableArray(ctx context.Context, request string) ([]NilStringUnixSeconds, error)
	// TestResponseStringUnixSecondsNullableArrayArray invokes test_response_string_unix-seconds_nullable_array_array operation.
	//
	// POST /test_response_string_unix-seconds_nullable_array_array
	TestResponseStringUnixSecondsNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixSeconds, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// TestQueryParameter invokes test_query_parameter operation.
//
// POST /test_query_parameter
func (c *Client) TestQueryParameter(ctx context.Context, request string, params TestQueryParameterParams) (*Error, error) {
	res, err := c.sendTestQueryParameter(ctx, request, params)
	return res, err
}

func (c *Client) sendTestQueryParameter(ctx context.Context, request string, params TestQueryParameterParams) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_query_parameter"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_query_parameter"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestQueryParameter",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_query_parameter"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "boolean" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "boolean",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.BoolToString(params.Boolean))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "boolean_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "boolean_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.BooleanArray {
					if err := func() error {
						return e.EncodeValue(conv.BoolToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.Integer))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerArray {
					if err := func() error {
						return e.EncodeValue(conv.IntToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int16" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int16ToString(params.IntegerInt16))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int16_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerInt16Array {
					if err := func() error {
						return e.EncodeValue(conv.Int16ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int32" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int32ToString(params.IntegerInt32))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int32_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerInt32Array {
					if err := func() error {
						return e.EncodeValue(conv.Int32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int64ToString(params.IntegerInt64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerInt64Array {
					if err := func() error {
						return e.EncodeValue(conv.Int64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int8" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int8ToString(params.IntegerInt8))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_int8_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_int8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerInt8Array {
					if err := func() error {
						return e.EncodeValue(conv.Int8ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UintToString(params.IntegerUint))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint16" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Uint16ToString(params.IntegerUint16))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint16_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUint16Array {
					if err := func() error {
						return e.EncodeValue(conv.Uint16ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint32" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Uint32ToString(params.IntegerUint32))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint32_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUint32Array {
					if err := func() error {
						return e.EncodeValue(conv.Uint32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Uint64ToString(params.IntegerUint64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUint64Array {
					if err := func() error {
						return e.EncodeValue(conv.Uint64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint8" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Uint8ToString(params.IntegerUint8))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint8_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUint8Array {
					if err := func() error {
						return e.EncodeValue(conv.Uint8ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_uint_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_uint_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUintArray {
					if err := func() error {
						return e.EncodeValue(conv.UintToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixSecondsToString(params.IntegerUnix))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-micro" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-micro",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixMicroToString(params.IntegerUnixMicro))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-micro_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-micro_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUnixMicroArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixMicroToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-milli" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-milli",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixMilliToString(params.IntegerUnixMilli))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-milli_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-milli_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUnixMilliArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixMilliToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-nano" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-nano",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixNanoToString(params.IntegerUnixNano))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-nano_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-nano_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUnixNanoArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixNanoToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-seconds" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-seconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixSecondsToString(params.IntegerUnixSeconds))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix-seconds_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix-seconds_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUnixSecondsArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixSecondsToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "integer_unix_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "integer_unix_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.IntegerUnixArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixSecondsToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Float64ToString(params.Number))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.NumberArray {
					if err := func() error {
						return e.EncodeValue(conv.Float64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_double" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_double",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Float64ToString(params.NumberDouble))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_double_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_double_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.NumberDoubleArray {
					if err := func() error {
						return e.EncodeValue(conv.Float64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_float" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_float",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Float32ToString(params.NumberFloat))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_float_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_float_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.NumberFloatArray {
					if err := func() error {
						return e.EncodeValue(conv.Float32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_int32" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int32ToString(params.NumberInt32))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_int32_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.NumberInt32Array {
					if err := func() error {
						return e.EncodeValue(conv.Int32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_int64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Int64ToString(params.NumberInt64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "number_int64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "number_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.NumberInt64Array {
					if err := func() error {
						return e.EncodeValue(conv.Int64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.String))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringArray {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_base64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_base64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.BytesToString(params.StringBase64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_base64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_base64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringBase64Array {
					if err := func() error {
						return e.EncodeValue(conv.BytesToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_binary" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_binary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.StringBinary))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_binary_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_binary_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringBinaryArray {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_byte" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_byte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.BytesToString(params.StringByte))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_byte_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_byte_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringByteArray {
					if err := func() error {
						return e.EncodeValue(conv.BytesToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_date" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.DateToString(params.StringDate))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_date-time" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_date-time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.DateTimeToString(params.StringDateTime))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_date-time_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_date-time_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringDateTimeArray {
					if err := func() error {
						return e.EncodeValue(conv.DateTimeToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_date_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_date_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringDateArray {
					if err := func() error {
						return e.EncodeValue(conv.DateToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_duration" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_duration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.DurationToString(params.StringDuration))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_duration_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_duration_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringDurationArray {
					if err := func() error {
						return e.EncodeValue(conv.DurationToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_email" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.StringEmail))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_email_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_email_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringEmailArray {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_float32" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_float32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Float32ToString(params.StringFloat32))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_float32_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_float32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringFloat32Array {
					if err := func() error {
						return e.EncodeValue(conv.Float32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_float64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_float64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.Float64ToString(params.StringFloat64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_float64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_float64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringFloat64Array {
					if err := func() error {
						return e.EncodeValue(conv.Float64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_hostname" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_hostname",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.StringHostname))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_hostname_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_hostname_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringHostnameArray {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.IntToString(params.StringInt))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int16" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringInt16ToString(params.StringInt16))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int16_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringInt16Array {
					if err := func() error {
						return e.EncodeValue(conv.StringInt16ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int32" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringInt32ToString(params.StringInt32))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int32_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringInt32Array {
					if err := func() error {
						return e.EncodeValue(conv.StringInt32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringInt64ToString(params.StringInt64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringInt64Array {
					if err := func() error {
						return e.EncodeValue(conv.StringInt64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int8" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringInt8ToString(params.StringInt8))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int8_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringInt8Array {
					if err := func() error {
						return e.EncodeValue(conv.StringInt8ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_int_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_int_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringIntArray {
					if err := func() error {
						return e.EncodeValue(conv.IntToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_ip" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_ip",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.AddrToString(params.StringIP))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_ip_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_ip_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringIPArray {
					if err := func() error {
						return e.EncodeValue(conv.AddrToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_ipv4" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_ipv4",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.AddrToString(params.StringIpv4))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_ipv4_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_ipv4_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringIpv4Array {
					if err := func() error {
						return e.EncodeValue(conv.AddrToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_ipv6" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_ipv6",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.AddrToString(params.StringIpv6))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_ipv6_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_ipv6_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringIpv6Array {
					if err := func() error {
						return e.EncodeValue(conv.AddrToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_password" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_password",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.StringPassword))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_password_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_password_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringPasswordArray {
					if err := func() error {
						return e.EncodeValue(conv.StringToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_time" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.TimeToString(params.StringTime))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_time_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_time_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringTimeArray {
					if err := func() error {
						return e.EncodeValue(conv.TimeToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringUintToString(params.StringUint))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint16" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringUint16ToString(params.StringUint16))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint16_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUint16Array {
					if err := func() error {
						return e.EncodeValue(conv.StringUint16ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint32" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringUint32ToString(params.StringUint32))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint32_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUint32Array {
					if err := func() error {
						return e.EncodeValue(conv.StringUint32ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint64" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringUint64ToString(params.StringUint64))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint64_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUint64Array {
					if err := func() error {
						return e.EncodeValue(conv.StringUint64ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint8" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringUint8ToString(params.StringUint8))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint8_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUint8Array {
					if err := func() error {
						return e.EncodeValue(conv.StringUint8ToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uint_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uint_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUintArray {
					if err := func() error {
						return e.EncodeValue(conv.StringUintToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixSecondsToString(params.StringUnix))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-micro" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-micro",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixMicroToString(params.StringUnixMicro))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-micro_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-micro_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUnixMicroArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixMicroToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-milli" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-milli",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixMilliToString(params.StringUnixMilli))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-milli_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-milli_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUnixMilliArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixMilliToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-nano" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-nano",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixNanoToString(params.StringUnixNano))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-nano_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-nano_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUnixNanoArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixNanoToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-seconds" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-seconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UnixSecondsToString(params.StringUnixSeconds))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix-seconds_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix-seconds_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUnixSecondsArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixSecondsToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_unix_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_unix_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUnixArray {
					if err := func() error {
						return e.EncodeValue(conv.UnixSecondsToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uri" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uri",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.URLToString(params.StringURI))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uri_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uri_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringURIArray {
					if err := func() error {
						return e.EncodeValue(conv.URLToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uuid" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UUIDToString(params.StringUUID))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "string_uuid_array" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "string_uuid_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeArray(func(e uri.Encoder) error {
				for i, item := range params.StringUUIDArray {
					if err := func() error {
						return e.EncodeValue(conv.UUIDToString(item))
					}(); err != nil {
						return errors.Wrapf(err, "[%d]", i)
					}
				}
				return nil
			})
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestQueryParameterRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestQueryParameterResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestAny invokes test_request_Any operation.
//
// POST /test_request_Any
func (c *Client) TestRequestAny(ctx context.Context, request jx.Raw) (*Error, error) {
	res, err := c.sendTestRequestAny(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestAny(ctx context.Context, request jx.Raw) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_Any"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_Any"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestAny",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_Any"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestAnyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestAnyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBoolean invokes test_request_boolean operation.
//
// POST /test_request_boolean
func (c *Client) TestRequestBoolean(ctx context.Context, request OptBool) (*Error, error) {
	res, err := c.sendTestRequestBoolean(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestBoolean(ctx context.Context, request OptBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_boolean"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBoolean",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_boolean"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestBooleanRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestBooleanResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanArray invokes test_request_boolean_array operation.
//
// POST /test_request_boolean_array
func (c *Client) TestRequestBooleanArray(ctx context.Context, request []bool) (*Error, error) {
	res, err := c.sendTestRequestBooleanArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestBooleanArray(ctx context.Context, request []bool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_boolean_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_boolean_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestBooleanArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestBooleanArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanArrayArray invokes test_request_boolean_array_array operation.
//
// POST /test_request_boolean_array_array
func (c *Client) TestRequestBooleanArrayArray(ctx context.Context, request [][]bool) (*Error, error) {
	res, err := c.sendTestRequestBooleanArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestBooleanArrayArray(ctx context.Context, request [][]bool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_boolean_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_boolean_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestBooleanArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestBooleanArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanNullable invokes test_request_boolean_nullable operation.
//
// POST /test_request_boolean_nullable
func (c *Client) TestRequestBooleanNullable(ctx context.Context, request OptNilBool) (*Error, error) {
	res, err := c.sendTestRequestBooleanNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestBooleanNullable(ctx context.Context, request OptNilBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_boolean_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_boolean_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestBooleanNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestBooleanNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanNullableArray invokes test_request_boolean_nullable_array operation.
//
// POST /test_request_boolean_nullable_array
func (c *Client) TestRequestBooleanNullableArray(ctx context.Context, request []NilBool) (*Error, error) {
	res, err := c.sendTestRequestBooleanNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestBooleanNullableArray(ctx context.Context, request []NilBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_boolean_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_boolean_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestBooleanNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestBooleanNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestBooleanNullableArrayArray invokes test_request_boolean_nullable_array_array operation.
//
// POST /test_request_boolean_nullable_array_array
func (c *Client) TestRequestBooleanNullableArrayArray(ctx context.Context, request [][]NilBool) (*Error, error) {
	res, err := c.sendTestRequestBooleanNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestBooleanNullableArrayArray(ctx context.Context, request [][]NilBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_boolean_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_boolean_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestBooleanNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestBooleanNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestEmptyStruct invokes test_request_EmptyStruct operation.
//
// POST /test_request_EmptyStruct
func (c *Client) TestRequestEmptyStruct(ctx context.Context, request *TestRequestEmptyStructReq) (*Error, error) {
	res, err := c.sendTestRequestEmptyStruct(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestEmptyStruct(ctx context.Context, request *TestRequestEmptyStructReq) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_EmptyStruct"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_EmptyStruct"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_EmptyStruct"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestEmptyStructRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestEmptyStructResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestFormatTest invokes test_request_FormatTest operation.
//
// POST /test_request_FormatTest
func (c *Client) TestRequestFormatTest(ctx context.Context, request OptTestRequestFormatTestReq) (*Error, error) {
	res, err := c.sendTestRequestFormatTest(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestFormatTest(ctx context.Context, request OptTestRequestFormatTestReq) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_FormatTest"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_FormatTest"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestFormatTest",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_FormatTest"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestFormatTestRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestFormatTestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestInteger invokes test_request_integer operation.
//
// POST /test_request_integer
func (c *Client) TestRequestInteger(ctx context.Context, request OptInt) (*Error, error) {
	res, err := c.sendTestRequestInteger(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestInteger(ctx context.Context, request OptInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestInteger",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerArray invokes test_request_integer_array operation.
//
// POST /test_request_integer_array
func (c *Client) TestRequestIntegerArray(ctx context.Context, request []int) (*Error, error) {
	res, err := c.sendTestRequestIntegerArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerArray(ctx context.Context, request []int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerArrayArray invokes test_request_integer_array_array operation.
//
// POST /test_request_integer_array_array
func (c *Client) TestRequestIntegerArrayArray(ctx context.Context, request [][]int) (*Error, error) {
	res, err := c.sendTestRequestIntegerArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerArrayArray(ctx context.Context, request [][]int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt16 invokes test_request_integer_int16 operation.
//
// POST /test_request_integer_int16
func (c *Client) TestRequestIntegerInt16(ctx context.Context, request OptInt16) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt16(ctx context.Context, request OptInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt16Array invokes test_request_integer_int16_array operation.
//
// POST /test_request_integer_int16_array
func (c *Client) TestRequestIntegerInt16Array(ctx context.Context, request []int16) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt16Array(ctx context.Context, request []int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt16ArrayArray invokes test_request_integer_int16_array_array operation.
//
// POST /test_request_integer_int16_array_array
func (c *Client) TestRequestIntegerInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt16ArrayArray(ctx context.Context, request [][]int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt16Nullable invokes test_request_integer_int16_nullable operation.
//
// POST /test_request_integer_int16_nullable
func (c *Client) TestRequestIntegerInt16Nullable(ctx context.Context, request OptNilInt16) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt16Nullable(ctx context.Context, request OptNilInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt16NullableArray invokes test_request_integer_int16_nullable_array operation.
//
// POST /test_request_integer_int16_nullable_array
func (c *Client) TestRequestIntegerInt16NullableArray(ctx context.Context, request []NilInt16) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt16NullableArray(ctx context.Context, request []NilInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt16NullableArrayArray invokes test_request_integer_int16_nullable_array_array operation.
//
// POST /test_request_integer_int16_nullable_array_array
func (c *Client) TestRequestIntegerInt16NullableArrayArray(ctx context.Context, request [][]NilInt16) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt16NullableArrayArray(ctx context.Context, request [][]NilInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32 invokes test_request_integer_int32 operation.
//
// POST /test_request_integer_int32
func (c *Client) TestRequestIntegerInt32(ctx context.Context, request OptInt32) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt32(ctx context.Context, request OptInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32Array invokes test_request_integer_int32_array operation.
//
// POST /test_request_integer_int32_array
func (c *Client) TestRequestIntegerInt32Array(ctx context.Context, request []int32) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt32Array(ctx context.Context, request []int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32ArrayArray invokes test_request_integer_int32_array_array operation.
//
// POST /test_request_integer_int32_array_array
func (c *Client) TestRequestIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32Nullable invokes test_request_integer_int32_nullable operation.
//
// POST /test_request_integer_int32_nullable
func (c *Client) TestRequestIntegerInt32Nullable(ctx context.Context, request OptNilInt32) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt32Nullable(ctx context.Context, request OptNilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32NullableArray invokes test_request_integer_int32_nullable_array operation.
//
// POST /test_request_integer_int32_nullable_array
func (c *Client) TestRequestIntegerInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt32NullableArray(ctx context.Context, request []NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt32NullableArrayArray invokes test_request_integer_int32_nullable_array_array operation.
//
// POST /test_request_integer_int32_nullable_array_array
func (c *Client) TestRequestIntegerInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64 invokes test_request_integer_int64 operation.
//
// POST /test_request_integer_int64
func (c *Client) TestRequestIntegerInt64(ctx context.Context, request OptInt64) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt64(ctx context.Context, request OptInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64Array invokes test_request_integer_int64_array operation.
//
// POST /test_request_integer_int64_array
func (c *Client) TestRequestIntegerInt64Array(ctx context.Context, request []int64) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt64Array(ctx context.Context, request []int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64ArrayArray invokes test_request_integer_int64_array_array operation.
//
// POST /test_request_integer_int64_array_array
func (c *Client) TestRequestIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64Nullable invokes test_request_integer_int64_nullable operation.
//
// POST /test_request_integer_int64_nullable
func (c *Client) TestRequestIntegerInt64Nullable(ctx context.Context, request OptNilInt64) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt64Nullable(ctx context.Context, request OptNilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64NullableArray invokes test_request_integer_int64_nullable_array operation.
//
// POST /test_request_integer_int64_nullable_array
func (c *Client) TestRequestIntegerInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt64NullableArray(ctx context.Context, request []NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt64NullableArrayArray invokes test_request_integer_int64_nullable_array_array operation.
//
// POST /test_request_integer_int64_nullable_array_array
func (c *Client) TestRequestIntegerInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt8 invokes test_request_integer_int8 operation.
//
// POST /test_request_integer_int8
func (c *Client) TestRequestIntegerInt8(ctx context.Context, request OptInt8) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt8(ctx context.Context, request OptInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt8Array invokes test_request_integer_int8_array operation.
//
// POST /test_request_integer_int8_array
func (c *Client) TestRequestIntegerInt8Array(ctx context.Context, request []int8) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt8Array(ctx context.Context, request []int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt8ArrayArray invokes test_request_integer_int8_array_array operation.
//
// POST /test_request_integer_int8_array_array
func (c *Client) TestRequestIntegerInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt8ArrayArray(ctx context.Context, request [][]int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt8Nullable invokes test_request_integer_int8_nullable operation.
//
// POST /test_request_integer_int8_nullable
func (c *Client) TestRequestIntegerInt8Nullable(ctx context.Context, request OptNilInt8) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt8Nullable(ctx context.Context, request OptNilInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt8NullableArray invokes test_request_integer_int8_nullable_array operation.
//
// POST /test_request_integer_int8_nullable_array
func (c *Client) TestRequestIntegerInt8NullableArray(ctx context.Context, request []NilInt8) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt8NullableArray(ctx context.Context, request []NilInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerInt8NullableArrayArray invokes test_request_integer_int8_nullable_array_array operation.
//
// POST /test_request_integer_int8_nullable_array_array
func (c *Client) TestRequestIntegerInt8NullableArrayArray(ctx context.Context, request [][]NilInt8) (*Error, error) {
	res, err := c.sendTestRequestIntegerInt8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerInt8NullableArrayArray(ctx context.Context, request [][]NilInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_int8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerInt8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_int8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerInt8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerInt8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerNullable invokes test_request_integer_nullable operation.
//
// POST /test_request_integer_nullable
func (c *Client) TestRequestIntegerNullable(ctx context.Context, request OptNilInt) (*Error, error) {
	res, err := c.sendTestRequestIntegerNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerNullable(ctx context.Context, request OptNilInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerNullableArray invokes test_request_integer_nullable_array operation.
//
// POST /test_request_integer_nullable_array
func (c *Client) TestRequestIntegerNullableArray(ctx context.Context, request []NilInt) (*Error, error) {
	res, err := c.sendTestRequestIntegerNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerNullableArray(ctx context.Context, request []NilInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerNullableArrayArray invokes test_request_integer_nullable_array_array operation.
//
// POST /test_request_integer_nullable_array_array
func (c *Client) TestRequestIntegerNullableArrayArray(ctx context.Context, request [][]NilInt) (*Error, error) {
	res, err := c.sendTestRequestIntegerNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerNullableArrayArray(ctx context.Context, request [][]NilInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint invokes test_request_integer_uint operation.
//
// POST /test_request_integer_uint
func (c *Client) TestRequestIntegerUint(ctx context.Context, request OptUint) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint(ctx context.Context, request OptUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUintRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUintResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint16 invokes test_request_integer_uint16 operation.
//
// POST /test_request_integer_uint16
func (c *Client) TestRequestIntegerUint16(ctx context.Context, request OptUint16) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint16(ctx context.Context, request OptUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint16Array invokes test_request_integer_uint16_array operation.
//
// POST /test_request_integer_uint16_array
func (c *Client) TestRequestIntegerUint16Array(ctx context.Context, request []uint16) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint16Array(ctx context.Context, request []uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint16ArrayArray invokes test_request_integer_uint16_array_array operation.
//
// POST /test_request_integer_uint16_array_array
func (c *Client) TestRequestIntegerUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint16ArrayArray(ctx context.Context, request [][]uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint16Nullable invokes test_request_integer_uint16_nullable operation.
//
// POST /test_request_integer_uint16_nullable
func (c *Client) TestRequestIntegerUint16Nullable(ctx context.Context, request OptNilUint16) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint16Nullable(ctx context.Context, request OptNilUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint16NullableArray invokes test_request_integer_uint16_nullable_array operation.
//
// POST /test_request_integer_uint16_nullable_array
func (c *Client) TestRequestIntegerUint16NullableArray(ctx context.Context, request []NilUint16) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint16NullableArray(ctx context.Context, request []NilUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint16NullableArrayArray invokes test_request_integer_uint16_nullable_array_array operation.
//
// POST /test_request_integer_uint16_nullable_array_array
func (c *Client) TestRequestIntegerUint16NullableArrayArray(ctx context.Context, request [][]NilUint16) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint16NullableArrayArray(ctx context.Context, request [][]NilUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint32 invokes test_request_integer_uint32 operation.
//
// POST /test_request_integer_uint32
func (c *Client) TestRequestIntegerUint32(ctx context.Context, request OptUint32) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint32(ctx context.Context, request OptUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint32Array invokes test_request_integer_uint32_array operation.
//
// POST /test_request_integer_uint32_array
func (c *Client) TestRequestIntegerUint32Array(ctx context.Context, request []uint32) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint32Array(ctx context.Context, request []uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint32ArrayArray invokes test_request_integer_uint32_array_array operation.
//
// POST /test_request_integer_uint32_array_array
func (c *Client) TestRequestIntegerUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint32ArrayArray(ctx context.Context, request [][]uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint32Nullable invokes test_request_integer_uint32_nullable operation.
//
// POST /test_request_integer_uint32_nullable
func (c *Client) TestRequestIntegerUint32Nullable(ctx context.Context, request OptNilUint32) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint32Nullable(ctx context.Context, request OptNilUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint32NullableArray invokes test_request_integer_uint32_nullable_array operation.
//
// POST /test_request_integer_uint32_nullable_array
func (c *Client) TestRequestIntegerUint32NullableArray(ctx context.Context, request []NilUint32) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint32NullableArray(ctx context.Context, request []NilUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint32NullableArrayArray invokes test_request_integer_uint32_nullable_array_array operation.
//
// POST /test_request_integer_uint32_nullable_array_array
func (c *Client) TestRequestIntegerUint32NullableArrayArray(ctx context.Context, request [][]NilUint32) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint32NullableArrayArray(ctx context.Context, request [][]NilUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint64 invokes test_request_integer_uint64 operation.
//
// POST /test_request_integer_uint64
func (c *Client) TestRequestIntegerUint64(ctx context.Context, request OptUint64) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint64(ctx context.Context, request OptUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint64Array invokes test_request_integer_uint64_array operation.
//
// POST /test_request_integer_uint64_array
func (c *Client) TestRequestIntegerUint64Array(ctx context.Context, request []uint64) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint64Array(ctx context.Context, request []uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint64ArrayArray invokes test_request_integer_uint64_array_array operation.
//
// POST /test_request_integer_uint64_array_array
func (c *Client) TestRequestIntegerUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint64ArrayArray(ctx context.Context, request [][]uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint64Nullable invokes test_request_integer_uint64_nullable operation.
//
// POST /test_request_integer_uint64_nullable
func (c *Client) TestRequestIntegerUint64Nullable(ctx context.Context, request OptNilUint64) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint64Nullable(ctx context.Context, request OptNilUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint64NullableArray invokes test_request_integer_uint64_nullable_array operation.
//
// POST /test_request_integer_uint64_nullable_array
func (c *Client) TestRequestIntegerUint64NullableArray(ctx context.Context, request []NilUint64) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint64NullableArray(ctx context.Context, request []NilUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint64NullableArrayArray invokes test_request_integer_uint64_nullable_array_array operation.
//
// POST /test_request_integer_uint64_nullable_array_array
func (c *Client) TestRequestIntegerUint64NullableArrayArray(ctx context.Context, request [][]NilUint64) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint64NullableArrayArray(ctx context.Context, request [][]NilUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint8 invokes test_request_integer_uint8 operation.
//
// POST /test_request_integer_uint8
func (c *Client) TestRequestIntegerUint8(ctx context.Context, request OptUint8) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint8(ctx context.Context, request OptUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint8Array invokes test_request_integer_uint8_array operation.
//
// POST /test_request_integer_uint8_array
func (c *Client) TestRequestIntegerUint8Array(ctx context.Context, request []uint8) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint8Array(ctx context.Context, request []uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint8ArrayArray invokes test_request_integer_uint8_array_array operation.
//
// POST /test_request_integer_uint8_array_array
func (c *Client) TestRequestIntegerUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint8ArrayArray(ctx context.Context, request [][]uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint8Nullable invokes test_request_integer_uint8_nullable operation.
//
// POST /test_request_integer_uint8_nullable
func (c *Client) TestRequestIntegerUint8Nullable(ctx context.Context, request OptNilUint8) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint8Nullable(ctx context.Context, request OptNilUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint8NullableArray invokes test_request_integer_uint8_nullable_array operation.
//
// POST /test_request_integer_uint8_nullable_array
func (c *Client) TestRequestIntegerUint8NullableArray(ctx context.Context, request []NilUint8) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint8NullableArray(ctx context.Context, request []NilUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUint8NullableArrayArray invokes test_request_integer_uint8_nullable_array_array operation.
//
// POST /test_request_integer_uint8_nullable_array_array
func (c *Client) TestRequestIntegerUint8NullableArrayArray(ctx context.Context, request [][]NilUint8) (*Error, error) {
	res, err := c.sendTestRequestIntegerUint8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUint8NullableArrayArray(ctx context.Context, request [][]NilUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUint8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUint8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUint8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUintArray invokes test_request_integer_uint_array operation.
//
// POST /test_request_integer_uint_array
func (c *Client) TestRequestIntegerUintArray(ctx context.Context, request []uint) (*Error, error) {
	res, err := c.sendTestRequestIntegerUintArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUintArray(ctx context.Context, request []uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUintArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUintArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUintArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUintArrayArray invokes test_request_integer_uint_array_array operation.
//
// POST /test_request_integer_uint_array_array
func (c *Client) TestRequestIntegerUintArrayArray(ctx context.Context, request [][]uint) (*Error, error) {
	res, err := c.sendTestRequestIntegerUintArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUintArrayArray(ctx context.Context, request [][]uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUintArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUintArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUintArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUintNullable invokes test_request_integer_uint_nullable operation.
//
// POST /test_request_integer_uint_nullable
func (c *Client) TestRequestIntegerUintNullable(ctx context.Context, request OptNilUint) (*Error, error) {
	res, err := c.sendTestRequestIntegerUintNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUintNullable(ctx context.Context, request OptNilUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUintNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUintNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUintNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUintNullableArray invokes test_request_integer_uint_nullable_array operation.
//
// POST /test_request_integer_uint_nullable_array
func (c *Client) TestRequestIntegerUintNullableArray(ctx context.Context, request []NilUint) (*Error, error) {
	res, err := c.sendTestRequestIntegerUintNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUintNullableArray(ctx context.Context, request []NilUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUintNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUintNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUintNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUintNullableArrayArray invokes test_request_integer_uint_nullable_array_array operation.
//
// POST /test_request_integer_uint_nullable_array_array
func (c *Client) TestRequestIntegerUintNullableArrayArray(ctx context.Context, request [][]NilUint) (*Error, error) {
	res, err := c.sendTestRequestIntegerUintNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUintNullableArrayArray(ctx context.Context, request [][]NilUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_uint_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_uint_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUintNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_uint_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUintNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUintNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnix invokes test_request_integer_unix operation.
//
// POST /test_request_integer_unix
func (c *Client) TestRequestIntegerUnix(ctx context.Context, request OptUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnix(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnix(ctx context.Context, request OptUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnix",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixArray invokes test_request_integer_unix_array operation.
//
// POST /test_request_integer_unix_array
func (c *Client) TestRequestIntegerUnixArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixArrayArray invokes test_request_integer_unix_array_array operation.
//
// POST /test_request_integer_unix_array_array
func (c *Client) TestRequestIntegerUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMicro invokes test_request_integer_unix-micro operation.
//
// POST /test_request_integer_unix-micro
func (c *Client) TestRequestIntegerUnixMicro(ctx context.Context, request OptUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMicro(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMicro(ctx context.Context, request OptUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-micro"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-micro"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMicro",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-micro"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMicroRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMicroResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMicroArray invokes test_request_integer_unix-micro_array operation.
//
// POST /test_request_integer_unix-micro_array
func (c *Client) TestRequestIntegerUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMicroArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMicroArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-micro_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-micro_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-micro_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMicroArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMicroArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMicroArrayArray invokes test_request_integer_unix-micro_array_array operation.
//
// POST /test_request_integer_unix-micro_array_array
func (c *Client) TestRequestIntegerUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMicroArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-micro_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-micro_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-micro_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMicroArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMicroArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMicroNullable invokes test_request_integer_unix-micro_nullable operation.
//
// POST /test_request_integer_unix-micro_nullable
func (c *Client) TestRequestIntegerUnixMicroNullable(ctx context.Context, request OptNilUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMicroNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMicroNullable(ctx context.Context, request OptNilUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-micro_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-micro_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-micro_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMicroNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMicroNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMicroNullableArray invokes test_request_integer_unix-micro_nullable_array operation.
//
// POST /test_request_integer_unix-micro_nullable_array
func (c *Client) TestRequestIntegerUnixMicroNullableArray(ctx context.Context, request []NilUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMicroNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMicroNullableArray(ctx context.Context, request []NilUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-micro_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-micro_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-micro_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMicroNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMicroNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMicroNullableArrayArray invokes test_request_integer_unix-micro_nullable_array_array operation.
//
// POST /test_request_integer_unix-micro_nullable_array_array
func (c *Client) TestRequestIntegerUnixMicroNullableArrayArray(ctx context.Context, request [][]NilUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMicroNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMicroNullableArrayArray(ctx context.Context, request [][]NilUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-micro_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-micro_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-micro_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMicroNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMicroNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMilli invokes test_request_integer_unix-milli operation.
//
// POST /test_request_integer_unix-milli
func (c *Client) TestRequestIntegerUnixMilli(ctx context.Context, request OptUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMilli(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMilli(ctx context.Context, request OptUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-milli"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-milli"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMilli",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-milli"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMilliRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMilliResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMilliArray invokes test_request_integer_unix-milli_array operation.
//
// POST /test_request_integer_unix-milli_array
func (c *Client) TestRequestIntegerUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMilliArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMilliArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-milli_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-milli_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-milli_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMilliArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMilliArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMilliArrayArray invokes test_request_integer_unix-milli_array_array operation.
//
// POST /test_request_integer_unix-milli_array_array
func (c *Client) TestRequestIntegerUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMilliArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-milli_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-milli_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-milli_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMilliArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMilliArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMilliNullable invokes test_request_integer_unix-milli_nullable operation.
//
// POST /test_request_integer_unix-milli_nullable
func (c *Client) TestRequestIntegerUnixMilliNullable(ctx context.Context, request OptNilUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMilliNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMilliNullable(ctx context.Context, request OptNilUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-milli_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-milli_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-milli_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMilliNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMilliNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMilliNullableArray invokes test_request_integer_unix-milli_nullable_array operation.
//
// POST /test_request_integer_unix-milli_nullable_array
func (c *Client) TestRequestIntegerUnixMilliNullableArray(ctx context.Context, request []NilUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMilliNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMilliNullableArray(ctx context.Context, request []NilUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-milli_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-milli_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-milli_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMilliNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMilliNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixMilliNullableArrayArray invokes test_request_integer_unix-milli_nullable_array_array operation.
//
// POST /test_request_integer_unix-milli_nullable_array_array
func (c *Client) TestRequestIntegerUnixMilliNullableArrayArray(ctx context.Context, request [][]NilUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixMilliNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixMilliNullableArrayArray(ctx context.Context, request [][]NilUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-milli_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-milli_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-milli_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixMilliNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixMilliNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNano invokes test_request_integer_unix-nano operation.
//
// POST /test_request_integer_unix-nano
func (c *Client) TestRequestIntegerUnixNano(ctx context.Context, request OptUnixNano) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNano(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNano(ctx context.Context, request OptUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-nano"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-nano"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNano",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-nano"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNanoRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNanoResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNanoArray invokes test_request_integer_unix-nano_array operation.
//
// POST /test_request_integer_unix-nano_array
func (c *Client) TestRequestIntegerUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNanoArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNanoArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-nano_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-nano_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-nano_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNanoArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNanoArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNanoArrayArray invokes test_request_integer_unix-nano_array_array operation.
//
// POST /test_request_integer_unix-nano_array_array
func (c *Client) TestRequestIntegerUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNanoArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-nano_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-nano_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-nano_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNanoArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNanoArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNanoNullable invokes test_request_integer_unix-nano_nullable operation.
//
// POST /test_request_integer_unix-nano_nullable
func (c *Client) TestRequestIntegerUnixNanoNullable(ctx context.Context, request OptNilUnixNano) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNanoNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNanoNullable(ctx context.Context, request OptNilUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-nano_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-nano_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-nano_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNanoNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNanoNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNanoNullableArray invokes test_request_integer_unix-nano_nullable_array operation.
//
// POST /test_request_integer_unix-nano_nullable_array
func (c *Client) TestRequestIntegerUnixNanoNullableArray(ctx context.Context, request []NilUnixNano) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNanoNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNanoNullableArray(ctx context.Context, request []NilUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-nano_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-nano_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-nano_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNanoNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNanoNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNanoNullableArrayArray invokes test_request_integer_unix-nano_nullable_array_array operation.
//
// POST /test_request_integer_unix-nano_nullable_array_array
func (c *Client) TestRequestIntegerUnixNanoNullableArrayArray(ctx context.Context, request [][]NilUnixNano) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNanoNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNanoNullableArrayArray(ctx context.Context, request [][]NilUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-nano_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-nano_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-nano_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNanoNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNanoNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNullable invokes test_request_integer_unix_nullable operation.
//
// POST /test_request_integer_unix_nullable
func (c *Client) TestRequestIntegerUnixNullable(ctx context.Context, request OptNilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNullable(ctx context.Context, request OptNilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNullableArray invokes test_request_integer_unix_nullable_array operation.
//
// POST /test_request_integer_unix_nullable_array
func (c *Client) TestRequestIntegerUnixNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNullableArray(ctx context.Context, request []NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixNullableArrayArray invokes test_request_integer_unix_nullable_array_array operation.
//
// POST /test_request_integer_unix_nullable_array_array
func (c *Client) TestRequestIntegerUnixNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixSeconds invokes test_request_integer_unix-seconds operation.
//
// POST /test_request_integer_unix-seconds
func (c *Client) TestRequestIntegerUnixSeconds(ctx context.Context, request OptUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixSeconds(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixSeconds(ctx context.Context, request OptUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-seconds"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-seconds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-seconds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixSecondsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixSecondsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixSecondsArray invokes test_request_integer_unix-seconds_array operation.
//
// POST /test_request_integer_unix-seconds_array
func (c *Client) TestRequestIntegerUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixSecondsArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixSecondsArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-seconds_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-seconds_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-seconds_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixSecondsArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixSecondsArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixSecondsArrayArray invokes test_request_integer_unix-seconds_array_array operation.
//
// POST /test_request_integer_unix-seconds_array_array
func (c *Client) TestRequestIntegerUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixSecondsArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-seconds_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-seconds_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-seconds_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixSecondsArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixSecondsArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixSecondsNullable invokes test_request_integer_unix-seconds_nullable operation.
//
// POST /test_request_integer_unix-seconds_nullable
func (c *Client) TestRequestIntegerUnixSecondsNullable(ctx context.Context, request OptNilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixSecondsNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixSecondsNullable(ctx context.Context, request OptNilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-seconds_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-seconds_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-seconds_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixSecondsNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixSecondsNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixSecondsNullableArray invokes test_request_integer_unix-seconds_nullable_array operation.
//
// POST /test_request_integer_unix-seconds_nullable_array
func (c *Client) TestRequestIntegerUnixSecondsNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixSecondsNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixSecondsNullableArray(ctx context.Context, request []NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-seconds_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-seconds_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-seconds_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixSecondsNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixSecondsNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestIntegerUnixSecondsNullableArrayArray invokes test_request_integer_unix-seconds_nullable_array_array operation.
//
// POST /test_request_integer_unix-seconds_nullable_array_array
func (c *Client) TestRequestIntegerUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestIntegerUnixSecondsNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestIntegerUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_unix-seconds_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_integer_unix-seconds_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestIntegerUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_integer_unix-seconds_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestIntegerUnixSecondsNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestIntegerUnixSecondsNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNull invokes test_request_null operation.
//
// POST /test_request_null
func (c *Client) TestRequestNull(ctx context.Context, request OptNull) (*Error, error) {
	res, err := c.sendTestRequestNull(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNull(ctx context.Context, request OptNull) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_null"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNull",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_null"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNullRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNullResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullArray invokes test_request_null_array operation.
//
// POST /test_request_null_array
func (c *Client) TestRequestNullArray(ctx context.Context, request []struct{}) (*Error, error) {
	res, err := c.sendTestRequestNullArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNullArray(ctx context.Context, request []struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_null_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_null_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNullArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNullArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullArrayArray invokes test_request_null_array_array operation.
//
// POST /test_request_null_array_array
func (c *Client) TestRequestNullArrayArray(ctx context.Context, request [][]struct{}) (*Error, error) {
	res, err := c.sendTestRequestNullArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNullArrayArray(ctx context.Context, request [][]struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_null_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_null_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNullArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNullArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullNullable invokes test_request_null_nullable operation.
//
// POST /test_request_null_nullable
func (c *Client) TestRequestNullNullable(ctx context.Context, request OptNull) (*Error, error) {
	res, err := c.sendTestRequestNullNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNullNullable(ctx context.Context, request OptNull) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_null_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_null_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNullNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNullNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullNullableArray invokes test_request_null_nullable_array operation.
//
// POST /test_request_null_nullable_array
func (c *Client) TestRequestNullNullableArray(ctx context.Context, request []struct{}) (*Error, error) {
	res, err := c.sendTestRequestNullNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNullNullableArray(ctx context.Context, request []struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_null_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_null_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNullNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNullNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNullNullableArrayArray invokes test_request_null_nullable_array_array operation.
//
// POST /test_request_null_nullable_array_array
func (c *Client) TestRequestNullNullableArrayArray(ctx context.Context, request [][]struct{}) (*Error, error) {
	res, err := c.sendTestRequestNullNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNullNullableArrayArray(ctx context.Context, request [][]struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_null_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_null_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNullNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNullNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumber invokes test_request_number operation.
//
// POST /test_request_number
func (c *Client) TestRequestNumber(ctx context.Context, request OptFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumber(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumber(ctx context.Context, request OptFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumber",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberArray invokes test_request_number_array operation.
//
// POST /test_request_number_array
func (c *Client) TestRequestNumberArray(ctx context.Context, request []float64) (*Error, error) {
	res, err := c.sendTestRequestNumberArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberArray(ctx context.Context, request []float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberArrayArray invokes test_request_number_array_array operation.
//
// POST /test_request_number_array_array
func (c *Client) TestRequestNumberArrayArray(ctx context.Context, request [][]float64) (*Error, error) {
	res, err := c.sendTestRequestNumberArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberArrayArray(ctx context.Context, request [][]float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDouble invokes test_request_number_double operation.
//
// POST /test_request_number_double
func (c *Client) TestRequestNumberDouble(ctx context.Context, request OptFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberDouble(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberDouble(ctx context.Context, request OptFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_double"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDouble",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_double"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberDoubleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberDoubleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleArray invokes test_request_number_double_array operation.
//
// POST /test_request_number_double_array
func (c *Client) TestRequestNumberDoubleArray(ctx context.Context, request []float64) (*Error, error) {
	res, err := c.sendTestRequestNumberDoubleArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberDoubleArray(ctx context.Context, request []float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_double_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_double_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberDoubleArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberDoubleArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleArrayArray invokes test_request_number_double_array_array operation.
//
// POST /test_request_number_double_array_array
func (c *Client) TestRequestNumberDoubleArrayArray(ctx context.Context, request [][]float64) (*Error, error) {
	res, err := c.sendTestRequestNumberDoubleArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberDoubleArrayArray(ctx context.Context, request [][]float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_double_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_double_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberDoubleArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberDoubleArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleNullable invokes test_request_number_double_nullable operation.
//
// POST /test_request_number_double_nullable
func (c *Client) TestRequestNumberDoubleNullable(ctx context.Context, request OptNilFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberDoubleNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberDoubleNullable(ctx context.Context, request OptNilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_double_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_double_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberDoubleNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberDoubleNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleNullableArray invokes test_request_number_double_nullable_array operation.
//
// POST /test_request_number_double_nullable_array
func (c *Client) TestRequestNumberDoubleNullableArray(ctx context.Context, request []NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberDoubleNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberDoubleNullableArray(ctx context.Context, request []NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_double_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_double_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberDoubleNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberDoubleNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberDoubleNullableArrayArray invokes test_request_number_double_nullable_array_array operation.
//
// POST /test_request_number_double_nullable_array_array
func (c *Client) TestRequestNumberDoubleNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberDoubleNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberDoubleNullableArrayArray(ctx context.Context, request [][]NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_double_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_double_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberDoubleNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberDoubleNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloat invokes test_request_number_float operation.
//
// POST /test_request_number_float
func (c *Client) TestRequestNumberFloat(ctx context.Context, request OptFloat32) (*Error, error) {
	res, err := c.sendTestRequestNumberFloat(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberFloat(ctx context.Context, request OptFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_float"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloat",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_float"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberFloatRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberFloatResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatArray invokes test_request_number_float_array operation.
//
// POST /test_request_number_float_array
func (c *Client) TestRequestNumberFloatArray(ctx context.Context, request []float32) (*Error, error) {
	res, err := c.sendTestRequestNumberFloatArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberFloatArray(ctx context.Context, request []float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_float_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_float_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberFloatArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberFloatArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatArrayArray invokes test_request_number_float_array_array operation.
//
// POST /test_request_number_float_array_array
func (c *Client) TestRequestNumberFloatArrayArray(ctx context.Context, request [][]float32) (*Error, error) {
	res, err := c.sendTestRequestNumberFloatArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberFloatArrayArray(ctx context.Context, request [][]float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_float_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_float_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberFloatArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberFloatArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatNullable invokes test_request_number_float_nullable operation.
//
// POST /test_request_number_float_nullable
func (c *Client) TestRequestNumberFloatNullable(ctx context.Context, request OptNilFloat32) (*Error, error) {
	res, err := c.sendTestRequestNumberFloatNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberFloatNullable(ctx context.Context, request OptNilFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_float_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_float_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberFloatNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberFloatNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatNullableArray invokes test_request_number_float_nullable_array operation.
//
// POST /test_request_number_float_nullable_array
func (c *Client) TestRequestNumberFloatNullableArray(ctx context.Context, request []NilFloat32) (*Error, error) {
	res, err := c.sendTestRequestNumberFloatNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberFloatNullableArray(ctx context.Context, request []NilFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_float_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_float_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberFloatNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberFloatNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberFloatNullableArrayArray invokes test_request_number_float_nullable_array_array operation.
//
// POST /test_request_number_float_nullable_array_array
func (c *Client) TestRequestNumberFloatNullableArrayArray(ctx context.Context, request [][]NilFloat32) (*Error, error) {
	res, err := c.sendTestRequestNumberFloatNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberFloatNullableArrayArray(ctx context.Context, request [][]NilFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_float_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_float_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberFloatNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberFloatNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32 invokes test_request_number_int32 operation.
//
// POST /test_request_number_int32
func (c *Client) TestRequestNumberInt32(ctx context.Context, request OptInt32) (*Error, error) {
	res, err := c.sendTestRequestNumberInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt32(ctx context.Context, request OptInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32Array invokes test_request_number_int32_array operation.
//
// POST /test_request_number_int32_array
func (c *Client) TestRequestNumberInt32Array(ctx context.Context, request []int32) (*Error, error) {
	res, err := c.sendTestRequestNumberInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt32Array(ctx context.Context, request []int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32ArrayArray invokes test_request_number_int32_array_array operation.
//
// POST /test_request_number_int32_array_array
func (c *Client) TestRequestNumberInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error) {
	res, err := c.sendTestRequestNumberInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt32ArrayArray(ctx context.Context, request [][]int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32Nullable invokes test_request_number_int32_nullable operation.
//
// POST /test_request_number_int32_nullable
func (c *Client) TestRequestNumberInt32Nullable(ctx context.Context, request OptNilInt32) (*Error, error) {
	res, err := c.sendTestRequestNumberInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt32Nullable(ctx context.Context, request OptNilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32NullableArray invokes test_request_number_int32_nullable_array operation.
//
// POST /test_request_number_int32_nullable_array
func (c *Client) TestRequestNumberInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error) {
	res, err := c.sendTestRequestNumberInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt32NullableArray(ctx context.Context, request []NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt32NullableArrayArray invokes test_request_number_int32_nullable_array_array operation.
//
// POST /test_request_number_int32_nullable_array_array
func (c *Client) TestRequestNumberInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error) {
	res, err := c.sendTestRequestNumberInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64 invokes test_request_number_int64 operation.
//
// POST /test_request_number_int64
func (c *Client) TestRequestNumberInt64(ctx context.Context, request OptInt64) (*Error, error) {
	res, err := c.sendTestRequestNumberInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt64(ctx context.Context, request OptInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64Array invokes test_request_number_int64_array operation.
//
// POST /test_request_number_int64_array
func (c *Client) TestRequestNumberInt64Array(ctx context.Context, request []int64) (*Error, error) {
	res, err := c.sendTestRequestNumberInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt64Array(ctx context.Context, request []int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64ArrayArray invokes test_request_number_int64_array_array operation.
//
// POST /test_request_number_int64_array_array
func (c *Client) TestRequestNumberInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error) {
	res, err := c.sendTestRequestNumberInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt64ArrayArray(ctx context.Context, request [][]int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64Nullable invokes test_request_number_int64_nullable operation.
//
// POST /test_request_number_int64_nullable
func (c *Client) TestRequestNumberInt64Nullable(ctx context.Context, request OptNilInt64) (*Error, error) {
	res, err := c.sendTestRequestNumberInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt64Nullable(ctx context.Context, request OptNilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64NullableArray invokes test_request_number_int64_nullable_array operation.
//
// POST /test_request_number_int64_nullable_array
func (c *Client) TestRequestNumberInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error) {
	res, err := c.sendTestRequestNumberInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt64NullableArray(ctx context.Context, request []NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberInt64NullableArrayArray invokes test_request_number_int64_nullable_array_array operation.
//
// POST /test_request_number_int64_nullable_array_array
func (c *Client) TestRequestNumberInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error) {
	res, err := c.sendTestRequestNumberInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberNullable invokes test_request_number_nullable operation.
//
// POST /test_request_number_nullable
func (c *Client) TestRequestNumberNullable(ctx context.Context, request OptNilFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberNullable(ctx context.Context, request OptNilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberNullableArray invokes test_request_number_nullable_array operation.
//
// POST /test_request_number_nullable_array
func (c *Client) TestRequestNumberNullableArray(ctx context.Context, request []NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberNullableArray(ctx context.Context, request []NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestNumberNullableArrayArray invokes test_request_number_nullable_array_array operation.
//
// POST /test_request_number_nullable_array_array
func (c *Client) TestRequestNumberNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestNumberNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestNumberNullableArrayArray(ctx context.Context, request [][]NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_number_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_number_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestNumberNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestNumberNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredAny invokes test_request_required_Any operation.
//
// POST /test_request_required_Any
func (c *Client) TestRequestRequiredAny(ctx context.Context, request jx.Raw) (*Error, error) {
	res, err := c.sendTestRequestRequiredAny(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredAny(ctx context.Context, request jx.Raw) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_Any"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_Any"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredAny",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_Any"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredAnyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredAnyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBoolean invokes test_request_required_boolean operation.
//
// POST /test_request_required_boolean
func (c *Client) TestRequestRequiredBoolean(ctx context.Context, request bool) (*Error, error) {
	res, err := c.sendTestRequestRequiredBoolean(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredBoolean(ctx context.Context, request bool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_boolean"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBoolean",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_boolean"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredBooleanRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredBooleanResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanArray invokes test_request_required_boolean_array operation.
//
// POST /test_request_required_boolean_array
func (c *Client) TestRequestRequiredBooleanArray(ctx context.Context, request []bool) (*Error, error) {
	res, err := c.sendTestRequestRequiredBooleanArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredBooleanArray(ctx context.Context, request []bool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_boolean_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_boolean_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredBooleanArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredBooleanArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanArrayArray invokes test_request_required_boolean_array_array operation.
//
// POST /test_request_required_boolean_array_array
func (c *Client) TestRequestRequiredBooleanArrayArray(ctx context.Context, request [][]bool) (*Error, error) {
	res, err := c.sendTestRequestRequiredBooleanArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredBooleanArrayArray(ctx context.Context, request [][]bool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_boolean_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_boolean_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredBooleanArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredBooleanArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanNullable invokes test_request_required_boolean_nullable operation.
//
// POST /test_request_required_boolean_nullable
func (c *Client) TestRequestRequiredBooleanNullable(ctx context.Context, request NilBool) (*Error, error) {
	res, err := c.sendTestRequestRequiredBooleanNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredBooleanNullable(ctx context.Context, request NilBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_boolean_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_boolean_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredBooleanNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredBooleanNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanNullableArray invokes test_request_required_boolean_nullable_array operation.
//
// POST /test_request_required_boolean_nullable_array
func (c *Client) TestRequestRequiredBooleanNullableArray(ctx context.Context, request []NilBool) (*Error, error) {
	res, err := c.sendTestRequestRequiredBooleanNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredBooleanNullableArray(ctx context.Context, request []NilBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_boolean_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_boolean_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredBooleanNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredBooleanNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredBooleanNullableArrayArray invokes test_request_required_boolean_nullable_array_array operation.
//
// POST /test_request_required_boolean_nullable_array_array
func (c *Client) TestRequestRequiredBooleanNullableArrayArray(ctx context.Context, request [][]NilBool) (*Error, error) {
	res, err := c.sendTestRequestRequiredBooleanNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredBooleanNullableArrayArray(ctx context.Context, request [][]NilBool) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_boolean_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_boolean_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredBooleanNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredBooleanNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredEmptyStruct invokes test_request_required_EmptyStruct operation.
//
// POST /test_request_required_EmptyStruct
func (c *Client) TestRequestRequiredEmptyStruct(ctx context.Context, request *TestRequestRequiredEmptyStructReq) (*Error, error) {
	res, err := c.sendTestRequestRequiredEmptyStruct(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredEmptyStruct(ctx context.Context, request *TestRequestRequiredEmptyStructReq) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_EmptyStruct"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_EmptyStruct"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_EmptyStruct"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredEmptyStructRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredEmptyStructResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredFormatTest invokes test_request_required_FormatTest operation.
//
// POST /test_request_required_FormatTest
func (c *Client) TestRequestRequiredFormatTest(ctx context.Context, request *TestRequestRequiredFormatTestReq) (*Error, error) {
	res, err := c.sendTestRequestRequiredFormatTest(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredFormatTest(ctx context.Context, request *TestRequestRequiredFormatTestReq) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_FormatTest"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_FormatTest"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredFormatTest",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_FormatTest"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredFormatTestRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredFormatTestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredInteger invokes test_request_required_integer operation.
//
// POST /test_request_required_integer
func (c *Client) TestRequestRequiredInteger(ctx context.Context, request int) (*Error, error) {
	res, err := c.sendTestRequestRequiredInteger(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredInteger(ctx context.Context, request int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredInteger",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerArray invokes test_request_required_integer_array operation.
//
// POST /test_request_required_integer_array
func (c *Client) TestRequestRequiredIntegerArray(ctx context.Context, request []int) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerArray(ctx context.Context, request []int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerArrayArray invokes test_request_required_integer_array_array operation.
//
// POST /test_request_required_integer_array_array
func (c *Client) TestRequestRequiredIntegerArrayArray(ctx context.Context, request [][]int) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerArrayArray(ctx context.Context, request [][]int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt16 invokes test_request_required_integer_int16 operation.
//
// POST /test_request_required_integer_int16
func (c *Client) TestRequestRequiredIntegerInt16(ctx context.Context, request int16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt16(ctx context.Context, request int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt16Array invokes test_request_required_integer_int16_array operation.
//
// POST /test_request_required_integer_int16_array
func (c *Client) TestRequestRequiredIntegerInt16Array(ctx context.Context, request []int16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt16Array(ctx context.Context, request []int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt16ArrayArray invokes test_request_required_integer_int16_array_array operation.
//
// POST /test_request_required_integer_int16_array_array
func (c *Client) TestRequestRequiredIntegerInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt16ArrayArray(ctx context.Context, request [][]int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt16Nullable invokes test_request_required_integer_int16_nullable operation.
//
// POST /test_request_required_integer_int16_nullable
func (c *Client) TestRequestRequiredIntegerInt16Nullable(ctx context.Context, request NilInt16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt16Nullable(ctx context.Context, request NilInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt16NullableArray invokes test_request_required_integer_int16_nullable_array operation.
//
// POST /test_request_required_integer_int16_nullable_array
func (c *Client) TestRequestRequiredIntegerInt16NullableArray(ctx context.Context, request []NilInt16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt16NullableArray(ctx context.Context, request []NilInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt16NullableArrayArray invokes test_request_required_integer_int16_nullable_array_array operation.
//
// POST /test_request_required_integer_int16_nullable_array_array
func (c *Client) TestRequestRequiredIntegerInt16NullableArrayArray(ctx context.Context, request [][]NilInt16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt16NullableArrayArray(ctx context.Context, request [][]NilInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32 invokes test_request_required_integer_int32 operation.
//
// POST /test_request_required_integer_int32
func (c *Client) TestRequestRequiredIntegerInt32(ctx context.Context, request int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt32(ctx context.Context, request int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32Array invokes test_request_required_integer_int32_array operation.
//
// POST /test_request_required_integer_int32_array
func (c *Client) TestRequestRequiredIntegerInt32Array(ctx context.Context, request []int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt32Array(ctx context.Context, request []int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32ArrayArray invokes test_request_required_integer_int32_array_array operation.
//
// POST /test_request_required_integer_int32_array_array
func (c *Client) TestRequestRequiredIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt32ArrayArray(ctx context.Context, request [][]int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32Nullable invokes test_request_required_integer_int32_nullable operation.
//
// POST /test_request_required_integer_int32_nullable
func (c *Client) TestRequestRequiredIntegerInt32Nullable(ctx context.Context, request NilInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt32Nullable(ctx context.Context, request NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32NullableArray invokes test_request_required_integer_int32_nullable_array operation.
//
// POST /test_request_required_integer_int32_nullable_array
func (c *Client) TestRequestRequiredIntegerInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt32NullableArray(ctx context.Context, request []NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt32NullableArrayArray invokes test_request_required_integer_int32_nullable_array_array operation.
//
// POST /test_request_required_integer_int32_nullable_array_array
func (c *Client) TestRequestRequiredIntegerInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64 invokes test_request_required_integer_int64 operation.
//
// POST /test_request_required_integer_int64
func (c *Client) TestRequestRequiredIntegerInt64(ctx context.Context, request int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt64(ctx context.Context, request int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64Array invokes test_request_required_integer_int64_array operation.
//
// POST /test_request_required_integer_int64_array
func (c *Client) TestRequestRequiredIntegerInt64Array(ctx context.Context, request []int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt64Array(ctx context.Context, request []int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64ArrayArray invokes test_request_required_integer_int64_array_array operation.
//
// POST /test_request_required_integer_int64_array_array
func (c *Client) TestRequestRequiredIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt64ArrayArray(ctx context.Context, request [][]int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64Nullable invokes test_request_required_integer_int64_nullable operation.
//
// POST /test_request_required_integer_int64_nullable
func (c *Client) TestRequestRequiredIntegerInt64Nullable(ctx context.Context, request NilInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt64Nullable(ctx context.Context, request NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64NullableArray invokes test_request_required_integer_int64_nullable_array operation.
//
// POST /test_request_required_integer_int64_nullable_array
func (c *Client) TestRequestRequiredIntegerInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt64NullableArray(ctx context.Context, request []NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt64NullableArrayArray invokes test_request_required_integer_int64_nullable_array_array operation.
//
// POST /test_request_required_integer_int64_nullable_array_array
func (c *Client) TestRequestRequiredIntegerInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt8 invokes test_request_required_integer_int8 operation.
//
// POST /test_request_required_integer_int8
func (c *Client) TestRequestRequiredIntegerInt8(ctx context.Context, request int8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt8(ctx context.Context, request int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt8Array invokes test_request_required_integer_int8_array operation.
//
// POST /test_request_required_integer_int8_array
func (c *Client) TestRequestRequiredIntegerInt8Array(ctx context.Context, request []int8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt8Array(ctx context.Context, request []int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt8ArrayArray invokes test_request_required_integer_int8_array_array operation.
//
// POST /test_request_required_integer_int8_array_array
func (c *Client) TestRequestRequiredIntegerInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt8ArrayArray(ctx context.Context, request [][]int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt8Nullable invokes test_request_required_integer_int8_nullable operation.
//
// POST /test_request_required_integer_int8_nullable
func (c *Client) TestRequestRequiredIntegerInt8Nullable(ctx context.Context, request NilInt8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt8Nullable(ctx context.Context, request NilInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt8NullableArray invokes test_request_required_integer_int8_nullable_array operation.
//
// POST /test_request_required_integer_int8_nullable_array
func (c *Client) TestRequestRequiredIntegerInt8NullableArray(ctx context.Context, request []NilInt8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt8NullableArray(ctx context.Context, request []NilInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerInt8NullableArrayArray invokes test_request_required_integer_int8_nullable_array_array operation.
//
// POST /test_request_required_integer_int8_nullable_array_array
func (c *Client) TestRequestRequiredIntegerInt8NullableArrayArray(ctx context.Context, request [][]NilInt8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerInt8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerInt8NullableArrayArray(ctx context.Context, request [][]NilInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_int8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerInt8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_int8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerInt8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerInt8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerNullable invokes test_request_required_integer_nullable operation.
//
// POST /test_request_required_integer_nullable
func (c *Client) TestRequestRequiredIntegerNullable(ctx context.Context, request NilInt) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerNullable(ctx context.Context, request NilInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerNullableArray invokes test_request_required_integer_nullable_array operation.
//
// POST /test_request_required_integer_nullable_array
func (c *Client) TestRequestRequiredIntegerNullableArray(ctx context.Context, request []NilInt) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerNullableArray(ctx context.Context, request []NilInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerNullableArrayArray invokes test_request_required_integer_nullable_array_array operation.
//
// POST /test_request_required_integer_nullable_array_array
func (c *Client) TestRequestRequiredIntegerNullableArrayArray(ctx context.Context, request [][]NilInt) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerNullableArrayArray(ctx context.Context, request [][]NilInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint invokes test_request_required_integer_uint operation.
//
// POST /test_request_required_integer_uint
func (c *Client) TestRequestRequiredIntegerUint(ctx context.Context, request uint) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint(ctx context.Context, request uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUintRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUintResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint16 invokes test_request_required_integer_uint16 operation.
//
// POST /test_request_required_integer_uint16
func (c *Client) TestRequestRequiredIntegerUint16(ctx context.Context, request uint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint16(ctx context.Context, request uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint16Array invokes test_request_required_integer_uint16_array operation.
//
// POST /test_request_required_integer_uint16_array
func (c *Client) TestRequestRequiredIntegerUint16Array(ctx context.Context, request []uint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint16Array(ctx context.Context, request []uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint16ArrayArray invokes test_request_required_integer_uint16_array_array operation.
//
// POST /test_request_required_integer_uint16_array_array
func (c *Client) TestRequestRequiredIntegerUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint16ArrayArray(ctx context.Context, request [][]uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint16Nullable invokes test_request_required_integer_uint16_nullable operation.
//
// POST /test_request_required_integer_uint16_nullable
func (c *Client) TestRequestRequiredIntegerUint16Nullable(ctx context.Context, request NilUint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint16Nullable(ctx context.Context, request NilUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint16NullableArray invokes test_request_required_integer_uint16_nullable_array operation.
//
// POST /test_request_required_integer_uint16_nullable_array
func (c *Client) TestRequestRequiredIntegerUint16NullableArray(ctx context.Context, request []NilUint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint16NullableArray(ctx context.Context, request []NilUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint16NullableArrayArray invokes test_request_required_integer_uint16_nullable_array_array operation.
//
// POST /test_request_required_integer_uint16_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUint16NullableArrayArray(ctx context.Context, request [][]NilUint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint16NullableArrayArray(ctx context.Context, request [][]NilUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint32 invokes test_request_required_integer_uint32 operation.
//
// POST /test_request_required_integer_uint32
func (c *Client) TestRequestRequiredIntegerUint32(ctx context.Context, request uint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint32(ctx context.Context, request uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint32Array invokes test_request_required_integer_uint32_array operation.
//
// POST /test_request_required_integer_uint32_array
func (c *Client) TestRequestRequiredIntegerUint32Array(ctx context.Context, request []uint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint32Array(ctx context.Context, request []uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint32ArrayArray invokes test_request_required_integer_uint32_array_array operation.
//
// POST /test_request_required_integer_uint32_array_array
func (c *Client) TestRequestRequiredIntegerUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint32ArrayArray(ctx context.Context, request [][]uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint32Nullable invokes test_request_required_integer_uint32_nullable operation.
//
// POST /test_request_required_integer_uint32_nullable
func (c *Client) TestRequestRequiredIntegerUint32Nullable(ctx context.Context, request NilUint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint32Nullable(ctx context.Context, request NilUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint32NullableArray invokes test_request_required_integer_uint32_nullable_array operation.
//
// POST /test_request_required_integer_uint32_nullable_array
func (c *Client) TestRequestRequiredIntegerUint32NullableArray(ctx context.Context, request []NilUint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint32NullableArray(ctx context.Context, request []NilUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint32NullableArrayArray invokes test_request_required_integer_uint32_nullable_array_array operation.
//
// POST /test_request_required_integer_uint32_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUint32NullableArrayArray(ctx context.Context, request [][]NilUint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint32NullableArrayArray(ctx context.Context, request [][]NilUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint64 invokes test_request_required_integer_uint64 operation.
//
// POST /test_request_required_integer_uint64
func (c *Client) TestRequestRequiredIntegerUint64(ctx context.Context, request uint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint64(ctx context.Context, request uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint64Array invokes test_request_required_integer_uint64_array operation.
//
// POST /test_request_required_integer_uint64_array
func (c *Client) TestRequestRequiredIntegerUint64Array(ctx context.Context, request []uint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint64Array(ctx context.Context, request []uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint64ArrayArray invokes test_request_required_integer_uint64_array_array operation.
//
// POST /test_request_required_integer_uint64_array_array
func (c *Client) TestRequestRequiredIntegerUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint64ArrayArray(ctx context.Context, request [][]uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint64Nullable invokes test_request_required_integer_uint64_nullable operation.
//
// POST /test_request_required_integer_uint64_nullable
func (c *Client) TestRequestRequiredIntegerUint64Nullable(ctx context.Context, request NilUint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint64Nullable(ctx context.Context, request NilUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint64NullableArray invokes test_request_required_integer_uint64_nullable_array operation.
//
// POST /test_request_required_integer_uint64_nullable_array
func (c *Client) TestRequestRequiredIntegerUint64NullableArray(ctx context.Context, request []NilUint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint64NullableArray(ctx context.Context, request []NilUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint64NullableArrayArray invokes test_request_required_integer_uint64_nullable_array_array operation.
//
// POST /test_request_required_integer_uint64_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUint64NullableArrayArray(ctx context.Context, request [][]NilUint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint64NullableArrayArray(ctx context.Context, request [][]NilUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint8 invokes test_request_required_integer_uint8 operation.
//
// POST /test_request_required_integer_uint8
func (c *Client) TestRequestRequiredIntegerUint8(ctx context.Context, request uint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint8(ctx context.Context, request uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint8Array invokes test_request_required_integer_uint8_array operation.
//
// POST /test_request_required_integer_uint8_array
func (c *Client) TestRequestRequiredIntegerUint8Array(ctx context.Context, request []uint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint8Array(ctx context.Context, request []uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint8ArrayArray invokes test_request_required_integer_uint8_array_array operation.
//
// POST /test_request_required_integer_uint8_array_array
func (c *Client) TestRequestRequiredIntegerUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint8ArrayArray(ctx context.Context, request [][]uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint8Nullable invokes test_request_required_integer_uint8_nullable operation.
//
// POST /test_request_required_integer_uint8_nullable
func (c *Client) TestRequestRequiredIntegerUint8Nullable(ctx context.Context, request NilUint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint8Nullable(ctx context.Context, request NilUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint8NullableArray invokes test_request_required_integer_uint8_nullable_array operation.
//
// POST /test_request_required_integer_uint8_nullable_array
func (c *Client) TestRequestRequiredIntegerUint8NullableArray(ctx context.Context, request []NilUint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint8NullableArray(ctx context.Context, request []NilUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUint8NullableArrayArray invokes test_request_required_integer_uint8_nullable_array_array operation.
//
// POST /test_request_required_integer_uint8_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUint8NullableArrayArray(ctx context.Context, request [][]NilUint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUint8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUint8NullableArrayArray(ctx context.Context, request [][]NilUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUint8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUint8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUint8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUintArray invokes test_request_required_integer_uint_array operation.
//
// POST /test_request_required_integer_uint_array
func (c *Client) TestRequestRequiredIntegerUintArray(ctx context.Context, request []uint) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUintArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUintArray(ctx context.Context, request []uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUintArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUintArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUintArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUintArrayArray invokes test_request_required_integer_uint_array_array operation.
//
// POST /test_request_required_integer_uint_array_array
func (c *Client) TestRequestRequiredIntegerUintArrayArray(ctx context.Context, request [][]uint) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUintArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUintArrayArray(ctx context.Context, request [][]uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUintArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUintArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUintArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUintNullable invokes test_request_required_integer_uint_nullable operation.
//
// POST /test_request_required_integer_uint_nullable
func (c *Client) TestRequestRequiredIntegerUintNullable(ctx context.Context, request NilUint) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUintNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUintNullable(ctx context.Context, request NilUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUintNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUintNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUintNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUintNullableArray invokes test_request_required_integer_uint_nullable_array operation.
//
// POST /test_request_required_integer_uint_nullable_array
func (c *Client) TestRequestRequiredIntegerUintNullableArray(ctx context.Context, request []NilUint) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUintNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUintNullableArray(ctx context.Context, request []NilUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUintNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUintNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUintNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUintNullableArrayArray invokes test_request_required_integer_uint_nullable_array_array operation.
//
// POST /test_request_required_integer_uint_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUintNullableArrayArray(ctx context.Context, request [][]NilUint) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUintNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUintNullableArrayArray(ctx context.Context, request [][]NilUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_uint_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_uint_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUintNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_uint_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUintNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUintNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnix invokes test_request_required_integer_unix operation.
//
// POST /test_request_required_integer_unix
func (c *Client) TestRequestRequiredIntegerUnix(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnix(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnix(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnix",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixArray invokes test_request_required_integer_unix_array operation.
//
// POST /test_request_required_integer_unix_array
func (c *Client) TestRequestRequiredIntegerUnixArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixArrayArray invokes test_request_required_integer_unix_array_array operation.
//
// POST /test_request_required_integer_unix_array_array
func (c *Client) TestRequestRequiredIntegerUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMicro invokes test_request_required_integer_unix-micro operation.
//
// POST /test_request_required_integer_unix-micro
func (c *Client) TestRequestRequiredIntegerUnixMicro(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMicro(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMicro(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-micro"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-micro"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMicro",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-micro"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMicroRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMicroResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMicroArray invokes test_request_required_integer_unix-micro_array operation.
//
// POST /test_request_required_integer_unix-micro_array
func (c *Client) TestRequestRequiredIntegerUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMicroArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMicroArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-micro_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-micro_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-micro_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMicroArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMicroArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMicroArrayArray invokes test_request_required_integer_unix-micro_array_array operation.
//
// POST /test_request_required_integer_unix-micro_array_array
func (c *Client) TestRequestRequiredIntegerUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMicroArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-micro_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-micro_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-micro_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMicroArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMicroArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMicroNullable invokes test_request_required_integer_unix-micro_nullable operation.
//
// POST /test_request_required_integer_unix-micro_nullable
func (c *Client) TestRequestRequiredIntegerUnixMicroNullable(ctx context.Context, request NilUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMicroNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMicroNullable(ctx context.Context, request NilUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-micro_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-micro_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-micro_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMicroNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMicroNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMicroNullableArray invokes test_request_required_integer_unix-micro_nullable_array operation.
//
// POST /test_request_required_integer_unix-micro_nullable_array
func (c *Client) TestRequestRequiredIntegerUnixMicroNullableArray(ctx context.Context, request []NilUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMicroNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMicroNullableArray(ctx context.Context, request []NilUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-micro_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-micro_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-micro_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMicroNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMicroNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMicroNullableArrayArray invokes test_request_required_integer_unix-micro_nullable_array_array operation.
//
// POST /test_request_required_integer_unix-micro_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUnixMicroNullableArrayArray(ctx context.Context, request [][]NilUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMicroNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMicroNullableArrayArray(ctx context.Context, request [][]NilUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-micro_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-micro_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-micro_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMicroNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMicroNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMilli invokes test_request_required_integer_unix-milli operation.
//
// POST /test_request_required_integer_unix-milli
func (c *Client) TestRequestRequiredIntegerUnixMilli(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMilli(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMilli(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-milli"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-milli"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMilli",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-milli"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMilliRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMilliResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMilliArray invokes test_request_required_integer_unix-milli_array operation.
//
// POST /test_request_required_integer_unix-milli_array
func (c *Client) TestRequestRequiredIntegerUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMilliArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMilliArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-milli_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-milli_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-milli_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMilliArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMilliArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMilliArrayArray invokes test_request_required_integer_unix-milli_array_array operation.
//
// POST /test_request_required_integer_unix-milli_array_array
func (c *Client) TestRequestRequiredIntegerUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMilliArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-milli_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-milli_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-milli_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMilliArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMilliArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMilliNullable invokes test_request_required_integer_unix-milli_nullable operation.
//
// POST /test_request_required_integer_unix-milli_nullable
func (c *Client) TestRequestRequiredIntegerUnixMilliNullable(ctx context.Context, request NilUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMilliNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMilliNullable(ctx context.Context, request NilUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-milli_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-milli_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-milli_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMilliNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMilliNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMilliNullableArray invokes test_request_required_integer_unix-milli_nullable_array operation.
//
// POST /test_request_required_integer_unix-milli_nullable_array
func (c *Client) TestRequestRequiredIntegerUnixMilliNullableArray(ctx context.Context, request []NilUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMilliNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMilliNullableArray(ctx context.Context, request []NilUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-milli_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-milli_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-milli_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMilliNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMilliNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixMilliNullableArrayArray invokes test_request_required_integer_unix-milli_nullable_array_array operation.
//
// POST /test_request_required_integer_unix-milli_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUnixMilliNullableArrayArray(ctx context.Context, request [][]NilUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixMilliNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixMilliNullableArrayArray(ctx context.Context, request [][]NilUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-milli_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-milli_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-milli_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixMilliNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixMilliNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNano invokes test_request_required_integer_unix-nano operation.
//
// POST /test_request_required_integer_unix-nano
func (c *Client) TestRequestRequiredIntegerUnixNano(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNano(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNano(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-nano"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-nano"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNano",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-nano"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNanoRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNanoResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNanoArray invokes test_request_required_integer_unix-nano_array operation.
//
// POST /test_request_required_integer_unix-nano_array
func (c *Client) TestRequestRequiredIntegerUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNanoArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNanoArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-nano_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-nano_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-nano_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNanoArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNanoArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNanoArrayArray invokes test_request_required_integer_unix-nano_array_array operation.
//
// POST /test_request_required_integer_unix-nano_array_array
func (c *Client) TestRequestRequiredIntegerUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNanoArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-nano_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-nano_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-nano_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNanoArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNanoArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNanoNullable invokes test_request_required_integer_unix-nano_nullable operation.
//
// POST /test_request_required_integer_unix-nano_nullable
func (c *Client) TestRequestRequiredIntegerUnixNanoNullable(ctx context.Context, request NilUnixNano) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNanoNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNanoNullable(ctx context.Context, request NilUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-nano_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-nano_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-nano_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNanoNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNanoNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNanoNullableArray invokes test_request_required_integer_unix-nano_nullable_array operation.
//
// POST /test_request_required_integer_unix-nano_nullable_array
func (c *Client) TestRequestRequiredIntegerUnixNanoNullableArray(ctx context.Context, request []NilUnixNano) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNanoNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNanoNullableArray(ctx context.Context, request []NilUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-nano_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-nano_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-nano_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNanoNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNanoNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNanoNullableArrayArray invokes test_request_required_integer_unix-nano_nullable_array_array operation.
//
// POST /test_request_required_integer_unix-nano_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUnixNanoNullableArrayArray(ctx context.Context, request [][]NilUnixNano) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNanoNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNanoNullableArrayArray(ctx context.Context, request [][]NilUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-nano_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-nano_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-nano_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNanoNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNanoNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNullable invokes test_request_required_integer_unix_nullable operation.
//
// POST /test_request_required_integer_unix_nullable
func (c *Client) TestRequestRequiredIntegerUnixNullable(ctx context.Context, request NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNullable(ctx context.Context, request NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNullableArray invokes test_request_required_integer_unix_nullable_array operation.
//
// POST /test_request_required_integer_unix_nullable_array
func (c *Client) TestRequestRequiredIntegerUnixNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNullableArray(ctx context.Context, request []NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixNullableArrayArray invokes test_request_required_integer_unix_nullable_array_array operation.
//
// POST /test_request_required_integer_unix_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUnixNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixSeconds invokes test_request_required_integer_unix-seconds operation.
//
// POST /test_request_required_integer_unix-seconds
func (c *Client) TestRequestRequiredIntegerUnixSeconds(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixSeconds(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixSeconds(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-seconds"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-seconds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-seconds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixSecondsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixSecondsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixSecondsArray invokes test_request_required_integer_unix-seconds_array operation.
//
// POST /test_request_required_integer_unix-seconds_array
func (c *Client) TestRequestRequiredIntegerUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixSecondsArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixSecondsArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-seconds_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-seconds_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-seconds_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixSecondsArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixSecondsArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixSecondsArrayArray invokes test_request_required_integer_unix-seconds_array_array operation.
//
// POST /test_request_required_integer_unix-seconds_array_array
func (c *Client) TestRequestRequiredIntegerUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixSecondsArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-seconds_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-seconds_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-seconds_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixSecondsArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixSecondsArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixSecondsNullable invokes test_request_required_integer_unix-seconds_nullable operation.
//
// POST /test_request_required_integer_unix-seconds_nullable
func (c *Client) TestRequestRequiredIntegerUnixSecondsNullable(ctx context.Context, request NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixSecondsNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixSecondsNullable(ctx context.Context, request NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-seconds_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-seconds_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-seconds_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixSecondsNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixSecondsNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixSecondsNullableArray invokes test_request_required_integer_unix-seconds_nullable_array operation.
//
// POST /test_request_required_integer_unix-seconds_nullable_array
func (c *Client) TestRequestRequiredIntegerUnixSecondsNullableArray(ctx context.Context, request []NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixSecondsNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixSecondsNullableArray(ctx context.Context, request []NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-seconds_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-seconds_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-seconds_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixSecondsNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixSecondsNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredIntegerUnixSecondsNullableArrayArray invokes test_request_required_integer_unix-seconds_nullable_array_array operation.
//
// POST /test_request_required_integer_unix-seconds_nullable_array_array
func (c *Client) TestRequestRequiredIntegerUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredIntegerUnixSecondsNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredIntegerUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_unix-seconds_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_integer_unix-seconds_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredIntegerUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_integer_unix-seconds_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredIntegerUnixSecondsNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredIntegerUnixSecondsNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNull invokes test_request_required_null operation.
//
// POST /test_request_required_null
func (c *Client) TestRequestRequiredNull(ctx context.Context, request struct{}) (*Error, error) {
	res, err := c.sendTestRequestRequiredNull(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNull(ctx context.Context, request struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_null"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNull",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_null"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNullRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNullResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullArray invokes test_request_required_null_array operation.
//
// POST /test_request_required_null_array
func (c *Client) TestRequestRequiredNullArray(ctx context.Context, request []struct{}) (*Error, error) {
	res, err := c.sendTestRequestRequiredNullArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNullArray(ctx context.Context, request []struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_null_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_null_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNullArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNullArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullArrayArray invokes test_request_required_null_array_array operation.
//
// POST /test_request_required_null_array_array
func (c *Client) TestRequestRequiredNullArrayArray(ctx context.Context, request [][]struct{}) (*Error, error) {
	res, err := c.sendTestRequestRequiredNullArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNullArrayArray(ctx context.Context, request [][]struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_null_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_null_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNullArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNullArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullNullable invokes test_request_required_null_nullable operation.
//
// POST /test_request_required_null_nullable
func (c *Client) TestRequestRequiredNullNullable(ctx context.Context, request struct{}) (*Error, error) {
	res, err := c.sendTestRequestRequiredNullNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNullNullable(ctx context.Context, request struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_null_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_null_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNullNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNullNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullNullableArray invokes test_request_required_null_nullable_array operation.
//
// POST /test_request_required_null_nullable_array
func (c *Client) TestRequestRequiredNullNullableArray(ctx context.Context, request []struct{}) (*Error, error) {
	res, err := c.sendTestRequestRequiredNullNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNullNullableArray(ctx context.Context, request []struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_null_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_null_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNullNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNullNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNullNullableArrayArray invokes test_request_required_null_nullable_array_array operation.
//
// POST /test_request_required_null_nullable_array_array
func (c *Client) TestRequestRequiredNullNullableArrayArray(ctx context.Context, request [][]struct{}) (*Error, error) {
	res, err := c.sendTestRequestRequiredNullNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNullNullableArrayArray(ctx context.Context, request [][]struct{}) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_null_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_null_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNullNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNullNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumber invokes test_request_required_number operation.
//
// POST /test_request_required_number
func (c *Client) TestRequestRequiredNumber(ctx context.Context, request float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumber(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumber(ctx context.Context, request float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumber",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberArray invokes test_request_required_number_array operation.
//
// POST /test_request_required_number_array
func (c *Client) TestRequestRequiredNumberArray(ctx context.Context, request []float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberArray(ctx context.Context, request []float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberArrayArray invokes test_request_required_number_array_array operation.
//
// POST /test_request_required_number_array_array
func (c *Client) TestRequestRequiredNumberArrayArray(ctx context.Context, request [][]float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberArrayArray(ctx context.Context, request [][]float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDouble invokes test_request_required_number_double operation.
//
// POST /test_request_required_number_double
func (c *Client) TestRequestRequiredNumberDouble(ctx context.Context, request float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberDouble(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberDouble(ctx context.Context, request float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_double"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDouble",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_double"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberDoubleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberDoubleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleArray invokes test_request_required_number_double_array operation.
//
// POST /test_request_required_number_double_array
func (c *Client) TestRequestRequiredNumberDoubleArray(ctx context.Context, request []float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberDoubleArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberDoubleArray(ctx context.Context, request []float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_double_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_double_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberDoubleArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberDoubleArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleArrayArray invokes test_request_required_number_double_array_array operation.
//
// POST /test_request_required_number_double_array_array
func (c *Client) TestRequestRequiredNumberDoubleArrayArray(ctx context.Context, request [][]float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberDoubleArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberDoubleArrayArray(ctx context.Context, request [][]float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_double_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_double_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberDoubleArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberDoubleArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleNullable invokes test_request_required_number_double_nullable operation.
//
// POST /test_request_required_number_double_nullable
func (c *Client) TestRequestRequiredNumberDoubleNullable(ctx context.Context, request NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberDoubleNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberDoubleNullable(ctx context.Context, request NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_double_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_double_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberDoubleNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberDoubleNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleNullableArray invokes test_request_required_number_double_nullable_array operation.
//
// POST /test_request_required_number_double_nullable_array
func (c *Client) TestRequestRequiredNumberDoubleNullableArray(ctx context.Context, request []NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberDoubleNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberDoubleNullableArray(ctx context.Context, request []NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_double_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_double_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberDoubleNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberDoubleNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberDoubleNullableArrayArray invokes test_request_required_number_double_nullable_array_array operation.
//
// POST /test_request_required_number_double_nullable_array_array
func (c *Client) TestRequestRequiredNumberDoubleNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberDoubleNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberDoubleNullableArrayArray(ctx context.Context, request [][]NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_double_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_double_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberDoubleNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberDoubleNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloat invokes test_request_required_number_float operation.
//
// POST /test_request_required_number_float
func (c *Client) TestRequestRequiredNumberFloat(ctx context.Context, request float32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberFloat(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberFloat(ctx context.Context, request float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_float"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloat",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_float"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberFloatRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberFloatResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatArray invokes test_request_required_number_float_array operation.
//
// POST /test_request_required_number_float_array
func (c *Client) TestRequestRequiredNumberFloatArray(ctx context.Context, request []float32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberFloatArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberFloatArray(ctx context.Context, request []float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_float_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_float_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberFloatArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberFloatArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatArrayArray invokes test_request_required_number_float_array_array operation.
//
// POST /test_request_required_number_float_array_array
func (c *Client) TestRequestRequiredNumberFloatArrayArray(ctx context.Context, request [][]float32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberFloatArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberFloatArrayArray(ctx context.Context, request [][]float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_float_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_float_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberFloatArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberFloatArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatNullable invokes test_request_required_number_float_nullable operation.
//
// POST /test_request_required_number_float_nullable
func (c *Client) TestRequestRequiredNumberFloatNullable(ctx context.Context, request NilFloat32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberFloatNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberFloatNullable(ctx context.Context, request NilFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_float_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_float_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberFloatNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberFloatNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatNullableArray invokes test_request_required_number_float_nullable_array operation.
//
// POST /test_request_required_number_float_nullable_array
func (c *Client) TestRequestRequiredNumberFloatNullableArray(ctx context.Context, request []NilFloat32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberFloatNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberFloatNullableArray(ctx context.Context, request []NilFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_float_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_float_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberFloatNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberFloatNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberFloatNullableArrayArray invokes test_request_required_number_float_nullable_array_array operation.
//
// POST /test_request_required_number_float_nullable_array_array
func (c *Client) TestRequestRequiredNumberFloatNullableArrayArray(ctx context.Context, request [][]NilFloat32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberFloatNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberFloatNullableArrayArray(ctx context.Context, request [][]NilFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_float_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_float_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberFloatNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberFloatNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32 invokes test_request_required_number_int32 operation.
//
// POST /test_request_required_number_int32
func (c *Client) TestRequestRequiredNumberInt32(ctx context.Context, request int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt32(ctx context.Context, request int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32Array invokes test_request_required_number_int32_array operation.
//
// POST /test_request_required_number_int32_array
func (c *Client) TestRequestRequiredNumberInt32Array(ctx context.Context, request []int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt32Array(ctx context.Context, request []int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32ArrayArray invokes test_request_required_number_int32_array_array operation.
//
// POST /test_request_required_number_int32_array_array
func (c *Client) TestRequestRequiredNumberInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt32ArrayArray(ctx context.Context, request [][]int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32Nullable invokes test_request_required_number_int32_nullable operation.
//
// POST /test_request_required_number_int32_nullable
func (c *Client) TestRequestRequiredNumberInt32Nullable(ctx context.Context, request NilInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt32Nullable(ctx context.Context, request NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32NullableArray invokes test_request_required_number_int32_nullable_array operation.
//
// POST /test_request_required_number_int32_nullable_array
func (c *Client) TestRequestRequiredNumberInt32NullableArray(ctx context.Context, request []NilInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt32NullableArray(ctx context.Context, request []NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt32NullableArrayArray invokes test_request_required_number_int32_nullable_array_array operation.
//
// POST /test_request_required_number_int32_nullable_array_array
func (c *Client) TestRequestRequiredNumberInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt32NullableArrayArray(ctx context.Context, request [][]NilInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64 invokes test_request_required_number_int64 operation.
//
// POST /test_request_required_number_int64
func (c *Client) TestRequestRequiredNumberInt64(ctx context.Context, request int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt64(ctx context.Context, request int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64Array invokes test_request_required_number_int64_array operation.
//
// POST /test_request_required_number_int64_array
func (c *Client) TestRequestRequiredNumberInt64Array(ctx context.Context, request []int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt64Array(ctx context.Context, request []int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64ArrayArray invokes test_request_required_number_int64_array_array operation.
//
// POST /test_request_required_number_int64_array_array
func (c *Client) TestRequestRequiredNumberInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt64ArrayArray(ctx context.Context, request [][]int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64Nullable invokes test_request_required_number_int64_nullable operation.
//
// POST /test_request_required_number_int64_nullable
func (c *Client) TestRequestRequiredNumberInt64Nullable(ctx context.Context, request NilInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt64Nullable(ctx context.Context, request NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64NullableArray invokes test_request_required_number_int64_nullable_array operation.
//
// POST /test_request_required_number_int64_nullable_array
func (c *Client) TestRequestRequiredNumberInt64NullableArray(ctx context.Context, request []NilInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt64NullableArray(ctx context.Context, request []NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberInt64NullableArrayArray invokes test_request_required_number_int64_nullable_array_array operation.
//
// POST /test_request_required_number_int64_nullable_array_array
func (c *Client) TestRequestRequiredNumberInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberInt64NullableArrayArray(ctx context.Context, request [][]NilInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberNullable invokes test_request_required_number_nullable operation.
//
// POST /test_request_required_number_nullable
func (c *Client) TestRequestRequiredNumberNullable(ctx context.Context, request NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberNullable(ctx context.Context, request NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberNullableArray invokes test_request_required_number_nullable_array operation.
//
// POST /test_request_required_number_nullable_array
func (c *Client) TestRequestRequiredNumberNullableArray(ctx context.Context, request []NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberNullableArray(ctx context.Context, request []NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredNumberNullableArrayArray invokes test_request_required_number_nullable_array_array operation.
//
// POST /test_request_required_number_nullable_array_array
func (c *Client) TestRequestRequiredNumberNullableArrayArray(ctx context.Context, request [][]NilFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredNumberNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredNumberNullableArrayArray(ctx context.Context, request [][]NilFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_number_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_number_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredNumberNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredNumberNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredString invokes test_request_required_string operation.
//
// POST /test_request_required_string
func (c *Client) TestRequestRequiredString(ctx context.Context, request string) (*Error, error) {
	res, err := c.sendTestRequestRequiredString(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredString(ctx context.Context, request string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredString",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringArray invokes test_request_required_string_array operation.
//
// POST /test_request_required_string_array
func (c *Client) TestRequestRequiredStringArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringArrayArray invokes test_request_required_string_array_array operation.
//
// POST /test_request_required_string_array_array
func (c *Client) TestRequestRequiredStringArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBase64 invokes test_request_required_string_base64 operation.
//
// POST /test_request_required_string_base64
func (c *Client) TestRequestRequiredStringBase64(ctx context.Context, request []byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBase64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBase64(ctx context.Context, request []byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_base64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_base64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBase64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_base64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBase64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBase64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBase64Array invokes test_request_required_string_base64_array operation.
//
// POST /test_request_required_string_base64_array
func (c *Client) TestRequestRequiredStringBase64Array(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBase64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBase64Array(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_base64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_base64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBase64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_base64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBase64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBase64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBase64ArrayArray invokes test_request_required_string_base64_array_array operation.
//
// POST /test_request_required_string_base64_array_array
func (c *Client) TestRequestRequiredStringBase64ArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBase64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBase64ArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_base64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_base64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBase64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_base64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBase64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBase64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBase64Nullable invokes test_request_required_string_base64_nullable operation.
//
// POST /test_request_required_string_base64_nullable
func (c *Client) TestRequestRequiredStringBase64Nullable(ctx context.Context, request []byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBase64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBase64Nullable(ctx context.Context, request []byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_base64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_base64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBase64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_base64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBase64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBase64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBase64NullableArray invokes test_request_required_string_base64_nullable_array operation.
//
// POST /test_request_required_string_base64_nullable_array
func (c *Client) TestRequestRequiredStringBase64NullableArray(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBase64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBase64NullableArray(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_base64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_base64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBase64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_base64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBase64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBase64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBase64NullableArrayArray invokes test_request_required_string_base64_nullable_array_array operation.
//
// POST /test_request_required_string_base64_nullable_array_array
func (c *Client) TestRequestRequiredStringBase64NullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBase64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBase64NullableArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_base64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_base64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBase64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_base64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBase64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBase64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinary invokes test_request_required_string_binary operation.
//
// POST /test_request_required_string_binary
func (c *Client) TestRequestRequiredStringBinary(ctx context.Context, request string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBinary(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBinary(ctx context.Context, request string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_binary"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinary",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_binary"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBinaryRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBinaryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryArray invokes test_request_required_string_binary_array operation.
//
// POST /test_request_required_string_binary_array
func (c *Client) TestRequestRequiredStringBinaryArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBinaryArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBinaryArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_binary_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_binary_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBinaryArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBinaryArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryArrayArray invokes test_request_required_string_binary_array_array operation.
//
// POST /test_request_required_string_binary_array_array
func (c *Client) TestRequestRequiredStringBinaryArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBinaryArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBinaryArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_binary_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_binary_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBinaryArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBinaryArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryNullable invokes test_request_required_string_binary_nullable operation.
//
// POST /test_request_required_string_binary_nullable
func (c *Client) TestRequestRequiredStringBinaryNullable(ctx context.Context, request NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBinaryNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBinaryNullable(ctx context.Context, request NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_binary_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_binary_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBinaryNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBinaryNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryNullableArray invokes test_request_required_string_binary_nullable_array operation.
//
// POST /test_request_required_string_binary_nullable_array
func (c *Client) TestRequestRequiredStringBinaryNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBinaryNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBinaryNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_binary_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_binary_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBinaryNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBinaryNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringBinaryNullableArrayArray invokes test_request_required_string_binary_nullable_array_array operation.
//
// POST /test_request_required_string_binary_nullable_array_array
func (c *Client) TestRequestRequiredStringBinaryNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringBinaryNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringBinaryNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_binary_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_binary_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringBinaryNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringBinaryNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByte invokes test_request_required_string_byte operation.
//
// POST /test_request_required_string_byte
func (c *Client) TestRequestRequiredStringByte(ctx context.Context, request []byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringByte(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringByte(ctx context.Context, request []byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_byte"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByte",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_byte"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringByteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringByteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteArray invokes test_request_required_string_byte_array operation.
//
// POST /test_request_required_string_byte_array
func (c *Client) TestRequestRequiredStringByteArray(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringByteArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringByteArray(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_byte_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_byte_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringByteArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringByteArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteArrayArray invokes test_request_required_string_byte_array_array operation.
//
// POST /test_request_required_string_byte_array_array
func (c *Client) TestRequestRequiredStringByteArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringByteArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringByteArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_byte_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_byte_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringByteArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringByteArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteNullable invokes test_request_required_string_byte_nullable operation.
//
// POST /test_request_required_string_byte_nullable
func (c *Client) TestRequestRequiredStringByteNullable(ctx context.Context, request []byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringByteNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringByteNullable(ctx context.Context, request []byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_byte_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_byte_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringByteNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringByteNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteNullableArray invokes test_request_required_string_byte_nullable_array operation.
//
// POST /test_request_required_string_byte_nullable_array
func (c *Client) TestRequestRequiredStringByteNullableArray(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringByteNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringByteNullableArray(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_byte_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_byte_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringByteNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringByteNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringByteNullableArrayArray invokes test_request_required_string_byte_nullable_array_array operation.
//
// POST /test_request_required_string_byte_nullable_array_array
func (c *Client) TestRequestRequiredStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringByteNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_byte_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_byte_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringByteNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringByteNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDate invokes test_request_required_string_date operation.
//
// POST /test_request_required_string_date
func (c *Client) TestRequestRequiredStringDate(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDate(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDate(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDate",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateArray invokes test_request_required_string_date_array operation.
//
// POST /test_request_required_string_date_array
func (c *Client) TestRequestRequiredStringDateArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateArrayArray invokes test_request_required_string_date_array_array operation.
//
// POST /test_request_required_string_date_array_array
func (c *Client) TestRequestRequiredStringDateArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateNullable invokes test_request_required_string_date_nullable operation.
//
// POST /test_request_required_string_date_nullable
func (c *Client) TestRequestRequiredStringDateNullable(ctx context.Context, request NilDate) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateNullable(ctx context.Context, request NilDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateNullableArray invokes test_request_required_string_date_nullable_array operation.
//
// POST /test_request_required_string_date_nullable_array
func (c *Client) TestRequestRequiredStringDateNullableArray(ctx context.Context, request []NilDate) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateNullableArray(ctx context.Context, request []NilDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateNullableArrayArray invokes test_request_required_string_date_nullable_array_array operation.
//
// POST /test_request_required_string_date_nullable_array_array
func (c *Client) TestRequestRequiredStringDateNullableArrayArray(ctx context.Context, request [][]NilDate) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateNullableArrayArray(ctx context.Context, request [][]NilDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTime invokes test_request_required_string_date-time operation.
//
// POST /test_request_required_string_date-time
func (c *Client) TestRequestRequiredStringDateTime(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateTime(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateTime(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date-time"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTime",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date-time"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateTimeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateTimeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeArray invokes test_request_required_string_date-time_array operation.
//
// POST /test_request_required_string_date-time_array
func (c *Client) TestRequestRequiredStringDateTimeArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateTimeArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateTimeArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date-time_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date-time_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateTimeArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateTimeArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeArrayArray invokes test_request_required_string_date-time_array_array operation.
//
// POST /test_request_required_string_date-time_array_array
func (c *Client) TestRequestRequiredStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateTimeArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date-time_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date-time_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateTimeArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateTimeArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeNullable invokes test_request_required_string_date-time_nullable operation.
//
// POST /test_request_required_string_date-time_nullable
func (c *Client) TestRequestRequiredStringDateTimeNullable(ctx context.Context, request NilDateTime) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateTimeNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateTimeNullable(ctx context.Context, request NilDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date-time_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date-time_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateTimeNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateTimeNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeNullableArray invokes test_request_required_string_date-time_nullable_array operation.
//
// POST /test_request_required_string_date-time_nullable_array
func (c *Client) TestRequestRequiredStringDateTimeNullableArray(ctx context.Context, request []NilDateTime) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateTimeNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateTimeNullableArray(ctx context.Context, request []NilDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date-time_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date-time_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateTimeNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateTimeNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDateTimeNullableArrayArray invokes test_request_required_string_date-time_nullable_array_array operation.
//
// POST /test_request_required_string_date-time_nullable_array_array
func (c *Client) TestRequestRequiredStringDateTimeNullableArrayArray(ctx context.Context, request [][]NilDateTime) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDateTimeNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDateTimeNullableArrayArray(ctx context.Context, request [][]NilDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_date-time_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_date-time_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDateTimeNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDateTimeNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDuration invokes test_request_required_string_duration operation.
//
// POST /test_request_required_string_duration
func (c *Client) TestRequestRequiredStringDuration(ctx context.Context, request time.Duration) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDuration(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDuration(ctx context.Context, request time.Duration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_duration"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDuration",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_duration"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDurationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDurationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationArray invokes test_request_required_string_duration_array operation.
//
// POST /test_request_required_string_duration_array
func (c *Client) TestRequestRequiredStringDurationArray(ctx context.Context, request []time.Duration) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDurationArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDurationArray(ctx context.Context, request []time.Duration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_duration_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_duration_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDurationArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDurationArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationArrayArray invokes test_request_required_string_duration_array_array operation.
//
// POST /test_request_required_string_duration_array_array
func (c *Client) TestRequestRequiredStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDurationArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_duration_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_duration_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDurationArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDurationArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationNullable invokes test_request_required_string_duration_nullable operation.
//
// POST /test_request_required_string_duration_nullable
func (c *Client) TestRequestRequiredStringDurationNullable(ctx context.Context, request NilDuration) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDurationNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDurationNullable(ctx context.Context, request NilDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_duration_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_duration_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDurationNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDurationNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationNullableArray invokes test_request_required_string_duration_nullable_array operation.
//
// POST /test_request_required_string_duration_nullable_array
func (c *Client) TestRequestRequiredStringDurationNullableArray(ctx context.Context, request []NilDuration) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDurationNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDurationNullableArray(ctx context.Context, request []NilDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_duration_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_duration_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDurationNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDurationNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringDurationNullableArrayArray invokes test_request_required_string_duration_nullable_array_array operation.
//
// POST /test_request_required_string_duration_nullable_array_array
func (c *Client) TestRequestRequiredStringDurationNullableArrayArray(ctx context.Context, request [][]NilDuration) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringDurationNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringDurationNullableArrayArray(ctx context.Context, request [][]NilDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_duration_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_duration_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringDurationNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringDurationNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmail invokes test_request_required_string_email operation.
//
// POST /test_request_required_string_email
func (c *Client) TestRequestRequiredStringEmail(ctx context.Context, request string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringEmail(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringEmail(ctx context.Context, request string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_email"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmail",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_email"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringEmailRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringEmailResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailArray invokes test_request_required_string_email_array operation.
//
// POST /test_request_required_string_email_array
func (c *Client) TestRequestRequiredStringEmailArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringEmailArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringEmailArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_email_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_email_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringEmailArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringEmailArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailArrayArray invokes test_request_required_string_email_array_array operation.
//
// POST /test_request_required_string_email_array_array
func (c *Client) TestRequestRequiredStringEmailArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringEmailArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringEmailArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_email_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_email_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringEmailArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringEmailArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailNullable invokes test_request_required_string_email_nullable operation.
//
// POST /test_request_required_string_email_nullable
func (c *Client) TestRequestRequiredStringEmailNullable(ctx context.Context, request NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringEmailNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringEmailNullable(ctx context.Context, request NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_email_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_email_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringEmailNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringEmailNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailNullableArray invokes test_request_required_string_email_nullable_array operation.
//
// POST /test_request_required_string_email_nullable_array
func (c *Client) TestRequestRequiredStringEmailNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringEmailNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringEmailNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_email_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_email_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringEmailNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringEmailNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringEmailNullableArrayArray invokes test_request_required_string_email_nullable_array_array operation.
//
// POST /test_request_required_string_email_nullable_array_array
func (c *Client) TestRequestRequiredStringEmailNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringEmailNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringEmailNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_email_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_email_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringEmailNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringEmailNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat32 invokes test_request_required_string_float32 operation.
//
// POST /test_request_required_string_float32
func (c *Client) TestRequestRequiredStringFloat32(ctx context.Context, request float32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat32(ctx context.Context, request float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat32Array invokes test_request_required_string_float32_array operation.
//
// POST /test_request_required_string_float32_array
func (c *Client) TestRequestRequiredStringFloat32Array(ctx context.Context, request []float32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat32Array(ctx context.Context, request []float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat32ArrayArray invokes test_request_required_string_float32_array_array operation.
//
// POST /test_request_required_string_float32_array_array
func (c *Client) TestRequestRequiredStringFloat32ArrayArray(ctx context.Context, request [][]float32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat32ArrayArray(ctx context.Context, request [][]float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat32Nullable invokes test_request_required_string_float32_nullable operation.
//
// POST /test_request_required_string_float32_nullable
func (c *Client) TestRequestRequiredStringFloat32Nullable(ctx context.Context, request NilStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat32Nullable(ctx context.Context, request NilStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat32NullableArray invokes test_request_required_string_float32_nullable_array operation.
//
// POST /test_request_required_string_float32_nullable_array
func (c *Client) TestRequestRequiredStringFloat32NullableArray(ctx context.Context, request []NilStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat32NullableArray(ctx context.Context, request []NilStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat32NullableArrayArray invokes test_request_required_string_float32_nullable_array_array operation.
//
// POST /test_request_required_string_float32_nullable_array_array
func (c *Client) TestRequestRequiredStringFloat32NullableArrayArray(ctx context.Context, request [][]NilStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat32NullableArrayArray(ctx context.Context, request [][]NilStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat64 invokes test_request_required_string_float64 operation.
//
// POST /test_request_required_string_float64
func (c *Client) TestRequestRequiredStringFloat64(ctx context.Context, request float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat64(ctx context.Context, request float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat64Array invokes test_request_required_string_float64_array operation.
//
// POST /test_request_required_string_float64_array
func (c *Client) TestRequestRequiredStringFloat64Array(ctx context.Context, request []float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat64Array(ctx context.Context, request []float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat64ArrayArray invokes test_request_required_string_float64_array_array operation.
//
// POST /test_request_required_string_float64_array_array
func (c *Client) TestRequestRequiredStringFloat64ArrayArray(ctx context.Context, request [][]float64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat64ArrayArray(ctx context.Context, request [][]float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat64Nullable invokes test_request_required_string_float64_nullable operation.
//
// POST /test_request_required_string_float64_nullable
func (c *Client) TestRequestRequiredStringFloat64Nullable(ctx context.Context, request NilStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat64Nullable(ctx context.Context, request NilStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat64NullableArray invokes test_request_required_string_float64_nullable_array operation.
//
// POST /test_request_required_string_float64_nullable_array
func (c *Client) TestRequestRequiredStringFloat64NullableArray(ctx context.Context, request []NilStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat64NullableArray(ctx context.Context, request []NilStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringFloat64NullableArrayArray invokes test_request_required_string_float64_nullable_array_array operation.
//
// POST /test_request_required_string_float64_nullable_array_array
func (c *Client) TestRequestRequiredStringFloat64NullableArrayArray(ctx context.Context, request [][]NilStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringFloat64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringFloat64NullableArrayArray(ctx context.Context, request [][]NilStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_float64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_float64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringFloat64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_float64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringFloat64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringFloat64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostname invokes test_request_required_string_hostname operation.
//
// POST /test_request_required_string_hostname
func (c *Client) TestRequestRequiredStringHostname(ctx context.Context, request string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringHostname(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringHostname(ctx context.Context, request string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_hostname"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostname",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_hostname"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringHostnameRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringHostnameResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameArray invokes test_request_required_string_hostname_array operation.
//
// POST /test_request_required_string_hostname_array
func (c *Client) TestRequestRequiredStringHostnameArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringHostnameArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringHostnameArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_hostname_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_hostname_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringHostnameArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringHostnameArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameArrayArray invokes test_request_required_string_hostname_array_array operation.
//
// POST /test_request_required_string_hostname_array_array
func (c *Client) TestRequestRequiredStringHostnameArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringHostnameArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringHostnameArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_hostname_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_hostname_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringHostnameArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringHostnameArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameNullable invokes test_request_required_string_hostname_nullable operation.
//
// POST /test_request_required_string_hostname_nullable
func (c *Client) TestRequestRequiredStringHostnameNullable(ctx context.Context, request NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringHostnameNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringHostnameNullable(ctx context.Context, request NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_hostname_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_hostname_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringHostnameNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringHostnameNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameNullableArray invokes test_request_required_string_hostname_nullable_array operation.
//
// POST /test_request_required_string_hostname_nullable_array
func (c *Client) TestRequestRequiredStringHostnameNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringHostnameNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringHostnameNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_hostname_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_hostname_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringHostnameNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringHostnameNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringHostnameNullableArrayArray invokes test_request_required_string_hostname_nullable_array_array operation.
//
// POST /test_request_required_string_hostname_nullable_array_array
func (c *Client) TestRequestRequiredStringHostnameNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringHostnameNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringHostnameNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_hostname_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_hostname_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringHostnameNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringHostnameNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIP invokes test_request_required_string_ip operation.
//
// POST /test_request_required_string_ip
func (c *Client) TestRequestRequiredStringIP(ctx context.Context, request netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIP(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIP(ctx context.Context, request netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ip"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIP",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ip"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIPRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIPResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPArray invokes test_request_required_string_ip_array operation.
//
// POST /test_request_required_string_ip_array
func (c *Client) TestRequestRequiredStringIPArray(ctx context.Context, request []netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIPArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIPArray(ctx context.Context, request []netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ip_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ip_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIPArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIPArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPArrayArray invokes test_request_required_string_ip_array_array operation.
//
// POST /test_request_required_string_ip_array_array
func (c *Client) TestRequestRequiredStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIPArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ip_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ip_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIPArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIPArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPNullable invokes test_request_required_string_ip_nullable operation.
//
// POST /test_request_required_string_ip_nullable
func (c *Client) TestRequestRequiredStringIPNullable(ctx context.Context, request NilIP) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIPNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIPNullable(ctx context.Context, request NilIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ip_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ip_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIPNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIPNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPNullableArray invokes test_request_required_string_ip_nullable_array operation.
//
// POST /test_request_required_string_ip_nullable_array
func (c *Client) TestRequestRequiredStringIPNullableArray(ctx context.Context, request []NilIP) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIPNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIPNullableArray(ctx context.Context, request []NilIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ip_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ip_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIPNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIPNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIPNullableArrayArray invokes test_request_required_string_ip_nullable_array_array operation.
//
// POST /test_request_required_string_ip_nullable_array_array
func (c *Client) TestRequestRequiredStringIPNullableArrayArray(ctx context.Context, request [][]NilIP) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIPNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIPNullableArrayArray(ctx context.Context, request [][]NilIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ip_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ip_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIPNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIPNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt invokes test_request_required_string_int operation.
//
// POST /test_request_required_string_int
func (c *Client) TestRequestRequiredStringInt(ctx context.Context, request int) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt(ctx context.Context, request int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIntRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIntResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt16 invokes test_request_required_string_int16 operation.
//
// POST /test_request_required_string_int16
func (c *Client) TestRequestRequiredStringInt16(ctx context.Context, request int16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt16(ctx context.Context, request int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt16Array invokes test_request_required_string_int16_array operation.
//
// POST /test_request_required_string_int16_array
func (c *Client) TestRequestRequiredStringInt16Array(ctx context.Context, request []int16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt16Array(ctx context.Context, request []int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt16ArrayArray invokes test_request_required_string_int16_array_array operation.
//
// POST /test_request_required_string_int16_array_array
func (c *Client) TestRequestRequiredStringInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt16ArrayArray(ctx context.Context, request [][]int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt16Nullable invokes test_request_required_string_int16_nullable operation.
//
// POST /test_request_required_string_int16_nullable
func (c *Client) TestRequestRequiredStringInt16Nullable(ctx context.Context, request NilStringInt16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt16Nullable(ctx context.Context, request NilStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt16NullableArray invokes test_request_required_string_int16_nullable_array operation.
//
// POST /test_request_required_string_int16_nullable_array
func (c *Client) TestRequestRequiredStringInt16NullableArray(ctx context.Context, request []NilStringInt16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt16NullableArray(ctx context.Context, request []NilStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt16NullableArrayArray invokes test_request_required_string_int16_nullable_array_array operation.
//
// POST /test_request_required_string_int16_nullable_array_array
func (c *Client) TestRequestRequiredStringInt16NullableArrayArray(ctx context.Context, request [][]NilStringInt16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt16NullableArrayArray(ctx context.Context, request [][]NilStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32 invokes test_request_required_string_int32 operation.
//
// POST /test_request_required_string_int32
func (c *Client) TestRequestRequiredStringInt32(ctx context.Context, request int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt32(ctx context.Context, request int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32Array invokes test_request_required_string_int32_array operation.
//
// POST /test_request_required_string_int32_array
func (c *Client) TestRequestRequiredStringInt32Array(ctx context.Context, request []int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt32Array(ctx context.Context, request []int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32ArrayArray invokes test_request_required_string_int32_array_array operation.
//
// POST /test_request_required_string_int32_array_array
func (c *Client) TestRequestRequiredStringInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt32ArrayArray(ctx context.Context, request [][]int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32Nullable invokes test_request_required_string_int32_nullable operation.
//
// POST /test_request_required_string_int32_nullable
func (c *Client) TestRequestRequiredStringInt32Nullable(ctx context.Context, request NilStringInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt32Nullable(ctx context.Context, request NilStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32NullableArray invokes test_request_required_string_int32_nullable_array operation.
//
// POST /test_request_required_string_int32_nullable_array
func (c *Client) TestRequestRequiredStringInt32NullableArray(ctx context.Context, request []NilStringInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt32NullableArray(ctx context.Context, request []NilStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt32NullableArrayArray invokes test_request_required_string_int32_nullable_array_array operation.
//
// POST /test_request_required_string_int32_nullable_array_array
func (c *Client) TestRequestRequiredStringInt32NullableArrayArray(ctx context.Context, request [][]NilStringInt32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt32NullableArrayArray(ctx context.Context, request [][]NilStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64 invokes test_request_required_string_int64 operation.
//
// POST /test_request_required_string_int64
func (c *Client) TestRequestRequiredStringInt64(ctx context.Context, request int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt64(ctx context.Context, request int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64Array invokes test_request_required_string_int64_array operation.
//
// POST /test_request_required_string_int64_array
func (c *Client) TestRequestRequiredStringInt64Array(ctx context.Context, request []int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt64Array(ctx context.Context, request []int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64ArrayArray invokes test_request_required_string_int64_array_array operation.
//
// POST /test_request_required_string_int64_array_array
func (c *Client) TestRequestRequiredStringInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt64ArrayArray(ctx context.Context, request [][]int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64Nullable invokes test_request_required_string_int64_nullable operation.
//
// POST /test_request_required_string_int64_nullable
func (c *Client) TestRequestRequiredStringInt64Nullable(ctx context.Context, request NilStringInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt64Nullable(ctx context.Context, request NilStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64NullableArray invokes test_request_required_string_int64_nullable_array operation.
//
// POST /test_request_required_string_int64_nullable_array
func (c *Client) TestRequestRequiredStringInt64NullableArray(ctx context.Context, request []NilStringInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt64NullableArray(ctx context.Context, request []NilStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt64NullableArrayArray invokes test_request_required_string_int64_nullable_array_array operation.
//
// POST /test_request_required_string_int64_nullable_array_array
func (c *Client) TestRequestRequiredStringInt64NullableArrayArray(ctx context.Context, request [][]NilStringInt64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt64NullableArrayArray(ctx context.Context, request [][]NilStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt8 invokes test_request_required_string_int8 operation.
//
// POST /test_request_required_string_int8
func (c *Client) TestRequestRequiredStringInt8(ctx context.Context, request int8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt8(ctx context.Context, request int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt8Array invokes test_request_required_string_int8_array operation.
//
// POST /test_request_required_string_int8_array
func (c *Client) TestRequestRequiredStringInt8Array(ctx context.Context, request []int8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt8Array(ctx context.Context, request []int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt8ArrayArray invokes test_request_required_string_int8_array_array operation.
//
// POST /test_request_required_string_int8_array_array
func (c *Client) TestRequestRequiredStringInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt8ArrayArray(ctx context.Context, request [][]int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt8Nullable invokes test_request_required_string_int8_nullable operation.
//
// POST /test_request_required_string_int8_nullable
func (c *Client) TestRequestRequiredStringInt8Nullable(ctx context.Context, request NilStringInt8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt8Nullable(ctx context.Context, request NilStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt8NullableArray invokes test_request_required_string_int8_nullable_array operation.
//
// POST /test_request_required_string_int8_nullable_array
func (c *Client) TestRequestRequiredStringInt8NullableArray(ctx context.Context, request []NilStringInt8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt8NullableArray(ctx context.Context, request []NilStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringInt8NullableArrayArray invokes test_request_required_string_int8_nullable_array_array operation.
//
// POST /test_request_required_string_int8_nullable_array_array
func (c *Client) TestRequestRequiredStringInt8NullableArrayArray(ctx context.Context, request [][]NilStringInt8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringInt8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringInt8NullableArrayArray(ctx context.Context, request [][]NilStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringInt8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringInt8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringInt8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIntArray invokes test_request_required_string_int_array operation.
//
// POST /test_request_required_string_int_array
func (c *Client) TestRequestRequiredStringIntArray(ctx context.Context, request []int) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIntArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIntArray(ctx context.Context, request []int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIntArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIntArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIntArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIntArrayArray invokes test_request_required_string_int_array_array operation.
//
// POST /test_request_required_string_int_array_array
func (c *Client) TestRequestRequiredStringIntArrayArray(ctx context.Context, request [][]int) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIntArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIntArrayArray(ctx context.Context, request [][]int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIntArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIntArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIntArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIntNullable invokes test_request_required_string_int_nullable operation.
//
// POST /test_request_required_string_int_nullable
func (c *Client) TestRequestRequiredStringIntNullable(ctx context.Context, request NilStringInt) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIntNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIntNullable(ctx context.Context, request NilStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIntNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIntNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIntNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIntNullableArray invokes test_request_required_string_int_nullable_array operation.
//
// POST /test_request_required_string_int_nullable_array
func (c *Client) TestRequestRequiredStringIntNullableArray(ctx context.Context, request []NilStringInt) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIntNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIntNullableArray(ctx context.Context, request []NilStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIntNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIntNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIntNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIntNullableArrayArray invokes test_request_required_string_int_nullable_array_array operation.
//
// POST /test_request_required_string_int_nullable_array_array
func (c *Client) TestRequestRequiredStringIntNullableArrayArray(ctx context.Context, request [][]NilStringInt) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIntNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIntNullableArrayArray(ctx context.Context, request [][]NilStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_int_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIntNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_int_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIntNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIntNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4 invokes test_request_required_string_ipv4 operation.
//
// POST /test_request_required_string_ipv4
func (c *Client) TestRequestRequiredStringIpv4(ctx context.Context, request netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv4(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv4(ctx context.Context, request netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv4"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv4"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv4Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv4Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4Array invokes test_request_required_string_ipv4_array operation.
//
// POST /test_request_required_string_ipv4_array
func (c *Client) TestRequestRequiredStringIpv4Array(ctx context.Context, request []netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv4Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv4Array(ctx context.Context, request []netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv4_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv4_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv4ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv4ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4ArrayArray invokes test_request_required_string_ipv4_array_array operation.
//
// POST /test_request_required_string_ipv4_array_array
func (c *Client) TestRequestRequiredStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv4ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv4_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv4_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv4ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv4ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4Nullable invokes test_request_required_string_ipv4_nullable operation.
//
// POST /test_request_required_string_ipv4_nullable
func (c *Client) TestRequestRequiredStringIpv4Nullable(ctx context.Context, request NilIPv4) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv4Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv4Nullable(ctx context.Context, request NilIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv4_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv4_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv4NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv4NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4NullableArray invokes test_request_required_string_ipv4_nullable_array operation.
//
// POST /test_request_required_string_ipv4_nullable_array
func (c *Client) TestRequestRequiredStringIpv4NullableArray(ctx context.Context, request []NilIPv4) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv4NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv4NullableArray(ctx context.Context, request []NilIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv4_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv4_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv4NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv4NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv4NullableArrayArray invokes test_request_required_string_ipv4_nullable_array_array operation.
//
// POST /test_request_required_string_ipv4_nullable_array_array
func (c *Client) TestRequestRequiredStringIpv4NullableArrayArray(ctx context.Context, request [][]NilIPv4) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv4NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv4NullableArrayArray(ctx context.Context, request [][]NilIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv4_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv4_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv4NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv4NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6 invokes test_request_required_string_ipv6 operation.
//
// POST /test_request_required_string_ipv6
func (c *Client) TestRequestRequiredStringIpv6(ctx context.Context, request netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv6(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv6(ctx context.Context, request netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv6"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv6"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv6Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv6Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6Array invokes test_request_required_string_ipv6_array operation.
//
// POST /test_request_required_string_ipv6_array
func (c *Client) TestRequestRequiredStringIpv6Array(ctx context.Context, request []netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv6Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv6Array(ctx context.Context, request []netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv6_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv6_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv6ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv6ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6ArrayArray invokes test_request_required_string_ipv6_array_array operation.
//
// POST /test_request_required_string_ipv6_array_array
func (c *Client) TestRequestRequiredStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv6ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv6_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv6_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv6ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv6ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6Nullable invokes test_request_required_string_ipv6_nullable operation.
//
// POST /test_request_required_string_ipv6_nullable
func (c *Client) TestRequestRequiredStringIpv6Nullable(ctx context.Context, request NilIPv6) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv6Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv6Nullable(ctx context.Context, request NilIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv6_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv6_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv6NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv6NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6NullableArray invokes test_request_required_string_ipv6_nullable_array operation.
//
// POST /test_request_required_string_ipv6_nullable_array
func (c *Client) TestRequestRequiredStringIpv6NullableArray(ctx context.Context, request []NilIPv6) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv6NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv6NullableArray(ctx context.Context, request []NilIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv6_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv6_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv6NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv6NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringIpv6NullableArrayArray invokes test_request_required_string_ipv6_nullable_array_array operation.
//
// POST /test_request_required_string_ipv6_nullable_array_array
func (c *Client) TestRequestRequiredStringIpv6NullableArrayArray(ctx context.Context, request [][]NilIPv6) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringIpv6NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringIpv6NullableArrayArray(ctx context.Context, request [][]NilIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_ipv6_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_ipv6_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringIpv6NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringIpv6NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringNullable invokes test_request_required_string_nullable operation.
//
// POST /test_request_required_string_nullable
func (c *Client) TestRequestRequiredStringNullable(ctx context.Context, request NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringNullable(ctx context.Context, request NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringNullableArray invokes test_request_required_string_nullable_array operation.
//
// POST /test_request_required_string_nullable_array
func (c *Client) TestRequestRequiredStringNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringNullableArrayArray invokes test_request_required_string_nullable_array_array operation.
//
// POST /test_request_required_string_nullable_array_array
func (c *Client) TestRequestRequiredStringNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPassword invokes test_request_required_string_password operation.
//
// POST /test_request_required_string_password
func (c *Client) TestRequestRequiredStringPassword(ctx context.Context, request string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringPassword(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringPassword(ctx context.Context, request string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_password"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPassword",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_password"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringPasswordRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringPasswordResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordArray invokes test_request_required_string_password_array operation.
//
// POST /test_request_required_string_password_array
func (c *Client) TestRequestRequiredStringPasswordArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringPasswordArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringPasswordArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_password_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_password_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringPasswordArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringPasswordArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordArrayArray invokes test_request_required_string_password_array_array operation.
//
// POST /test_request_required_string_password_array_array
func (c *Client) TestRequestRequiredStringPasswordArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringPasswordArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringPasswordArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_password_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_password_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringPasswordArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringPasswordArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordNullable invokes test_request_required_string_password_nullable operation.
//
// POST /test_request_required_string_password_nullable
func (c *Client) TestRequestRequiredStringPasswordNullable(ctx context.Context, request NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringPasswordNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringPasswordNullable(ctx context.Context, request NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_password_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_password_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringPasswordNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringPasswordNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordNullableArray invokes test_request_required_string_password_nullable_array operation.
//
// POST /test_request_required_string_password_nullable_array
func (c *Client) TestRequestRequiredStringPasswordNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringPasswordNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringPasswordNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_password_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_password_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringPasswordNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringPasswordNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringPasswordNullableArrayArray invokes test_request_required_string_password_nullable_array_array operation.
//
// POST /test_request_required_string_password_nullable_array_array
func (c *Client) TestRequestRequiredStringPasswordNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringPasswordNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringPasswordNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_password_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_password_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringPasswordNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringPasswordNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTime invokes test_request_required_string_time operation.
//
// POST /test_request_required_string_time
func (c *Client) TestRequestRequiredStringTime(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringTime(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringTime(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_time"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTime",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_time"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringTimeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringTimeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeArray invokes test_request_required_string_time_array operation.
//
// POST /test_request_required_string_time_array
func (c *Client) TestRequestRequiredStringTimeArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringTimeArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringTimeArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_time_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_time_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringTimeArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringTimeArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeArrayArray invokes test_request_required_string_time_array_array operation.
//
// POST /test_request_required_string_time_array_array
func (c *Client) TestRequestRequiredStringTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringTimeArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringTimeArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_time_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_time_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringTimeArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringTimeArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeNullable invokes test_request_required_string_time_nullable operation.
//
// POST /test_request_required_string_time_nullable
func (c *Client) TestRequestRequiredStringTimeNullable(ctx context.Context, request NilTime) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringTimeNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringTimeNullable(ctx context.Context, request NilTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_time_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_time_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringTimeNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringTimeNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeNullableArray invokes test_request_required_string_time_nullable_array operation.
//
// POST /test_request_required_string_time_nullable_array
func (c *Client) TestRequestRequiredStringTimeNullableArray(ctx context.Context, request []NilTime) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringTimeNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringTimeNullableArray(ctx context.Context, request []NilTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_time_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_time_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringTimeNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringTimeNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringTimeNullableArrayArray invokes test_request_required_string_time_nullable_array_array operation.
//
// POST /test_request_required_string_time_nullable_array_array
func (c *Client) TestRequestRequiredStringTimeNullableArrayArray(ctx context.Context, request [][]NilTime) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringTimeNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringTimeNullableArrayArray(ctx context.Context, request [][]NilTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_time_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_time_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringTimeNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringTimeNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURI invokes test_request_required_string_uri operation.
//
// POST /test_request_required_string_uri
func (c *Client) TestRequestRequiredStringURI(ctx context.Context, request url.URL) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringURI(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringURI(ctx context.Context, request url.URL) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uri"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURI",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uri"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringURIRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringURIResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURIArray invokes test_request_required_string_uri_array operation.
//
// POST /test_request_required_string_uri_array
func (c *Client) TestRequestRequiredStringURIArray(ctx context.Context, request []url.URL) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringURIArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringURIArray(ctx context.Context, request []url.URL) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uri_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURIArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uri_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringURIArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringURIArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURIArrayArray invokes test_request_required_string_uri_array_array operation.
//
// POST /test_request_required_string_uri_array_array
func (c *Client) TestRequestRequiredStringURIArrayArray(ctx context.Context, request [][]url.URL) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringURIArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringURIArrayArray(ctx context.Context, request [][]url.URL) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uri_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uri_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringURIArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringURIArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURINullable invokes test_request_required_string_uri_nullable operation.
//
// POST /test_request_required_string_uri_nullable
func (c *Client) TestRequestRequiredStringURINullable(ctx context.Context, request NilURI) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringURINullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringURINullable(ctx context.Context, request NilURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uri_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURINullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uri_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringURINullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringURINullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURINullableArray invokes test_request_required_string_uri_nullable_array operation.
//
// POST /test_request_required_string_uri_nullable_array
func (c *Client) TestRequestRequiredStringURINullableArray(ctx context.Context, request []NilURI) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringURINullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringURINullableArray(ctx context.Context, request []NilURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uri_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uri_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringURINullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringURINullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringURINullableArrayArray invokes test_request_required_string_uri_nullable_array_array operation.
//
// POST /test_request_required_string_uri_nullable_array_array
func (c *Client) TestRequestRequiredStringURINullableArrayArray(ctx context.Context, request [][]NilURI) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringURINullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringURINullableArrayArray(ctx context.Context, request [][]NilURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uri_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uri_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringURINullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringURINullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUID invokes test_request_required_string_uuid operation.
//
// POST /test_request_required_string_uuid
func (c *Client) TestRequestRequiredStringUUID(ctx context.Context, request uuid.UUID) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUUID(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUUID(ctx context.Context, request uuid.UUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uuid"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uuid"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUUIDRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUUIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDArray invokes test_request_required_string_uuid_array operation.
//
// POST /test_request_required_string_uuid_array
func (c *Client) TestRequestRequiredStringUUIDArray(ctx context.Context, request []uuid.UUID) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUUIDArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUUIDArray(ctx context.Context, request []uuid.UUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uuid_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uuid_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUUIDArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUUIDArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDArrayArray invokes test_request_required_string_uuid_array_array operation.
//
// POST /test_request_required_string_uuid_array_array
func (c *Client) TestRequestRequiredStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUUIDArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uuid_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uuid_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUUIDArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUUIDArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDNullable invokes test_request_required_string_uuid_nullable operation.
//
// POST /test_request_required_string_uuid_nullable
func (c *Client) TestRequestRequiredStringUUIDNullable(ctx context.Context, request NilUUID) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUUIDNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUUIDNullable(ctx context.Context, request NilUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uuid_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uuid_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUUIDNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUUIDNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDNullableArray invokes test_request_required_string_uuid_nullable_array operation.
//
// POST /test_request_required_string_uuid_nullable_array
func (c *Client) TestRequestRequiredStringUUIDNullableArray(ctx context.Context, request []NilUUID) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUUIDNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUUIDNullableArray(ctx context.Context, request []NilUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uuid_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uuid_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUUIDNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUUIDNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUUIDNullableArrayArray invokes test_request_required_string_uuid_nullable_array_array operation.
//
// POST /test_request_required_string_uuid_nullable_array_array
func (c *Client) TestRequestRequiredStringUUIDNullableArrayArray(ctx context.Context, request [][]NilUUID) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUUIDNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUUIDNullableArrayArray(ctx context.Context, request [][]NilUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uuid_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uuid_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUUIDNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUUIDNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint invokes test_request_required_string_uint operation.
//
// POST /test_request_required_string_uint
func (c *Client) TestRequestRequiredStringUint(ctx context.Context, request uint) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint(ctx context.Context, request uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUintRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUintResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint16 invokes test_request_required_string_uint16 operation.
//
// POST /test_request_required_string_uint16
func (c *Client) TestRequestRequiredStringUint16(ctx context.Context, request uint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint16(ctx context.Context, request uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint16Array invokes test_request_required_string_uint16_array operation.
//
// POST /test_request_required_string_uint16_array
func (c *Client) TestRequestRequiredStringUint16Array(ctx context.Context, request []uint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint16Array(ctx context.Context, request []uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint16ArrayArray invokes test_request_required_string_uint16_array_array operation.
//
// POST /test_request_required_string_uint16_array_array
func (c *Client) TestRequestRequiredStringUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint16ArrayArray(ctx context.Context, request [][]uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint16Nullable invokes test_request_required_string_uint16_nullable operation.
//
// POST /test_request_required_string_uint16_nullable
func (c *Client) TestRequestRequiredStringUint16Nullable(ctx context.Context, request NilStringUint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint16Nullable(ctx context.Context, request NilStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint16NullableArray invokes test_request_required_string_uint16_nullable_array operation.
//
// POST /test_request_required_string_uint16_nullable_array
func (c *Client) TestRequestRequiredStringUint16NullableArray(ctx context.Context, request []NilStringUint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint16NullableArray(ctx context.Context, request []NilStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint16NullableArrayArray invokes test_request_required_string_uint16_nullable_array_array operation.
//
// POST /test_request_required_string_uint16_nullable_array_array
func (c *Client) TestRequestRequiredStringUint16NullableArrayArray(ctx context.Context, request [][]NilStringUint16) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint16NullableArrayArray(ctx context.Context, request [][]NilStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint32 invokes test_request_required_string_uint32 operation.
//
// POST /test_request_required_string_uint32
func (c *Client) TestRequestRequiredStringUint32(ctx context.Context, request uint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint32(ctx context.Context, request uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint32Array invokes test_request_required_string_uint32_array operation.
//
// POST /test_request_required_string_uint32_array
func (c *Client) TestRequestRequiredStringUint32Array(ctx context.Context, request []uint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint32Array(ctx context.Context, request []uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint32ArrayArray invokes test_request_required_string_uint32_array_array operation.
//
// POST /test_request_required_string_uint32_array_array
func (c *Client) TestRequestRequiredStringUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint32ArrayArray(ctx context.Context, request [][]uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint32Nullable invokes test_request_required_string_uint32_nullable operation.
//
// POST /test_request_required_string_uint32_nullable
func (c *Client) TestRequestRequiredStringUint32Nullable(ctx context.Context, request NilStringUint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint32Nullable(ctx context.Context, request NilStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint32NullableArray invokes test_request_required_string_uint32_nullable_array operation.
//
// POST /test_request_required_string_uint32_nullable_array
func (c *Client) TestRequestRequiredStringUint32NullableArray(ctx context.Context, request []NilStringUint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint32NullableArray(ctx context.Context, request []NilStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint32NullableArrayArray invokes test_request_required_string_uint32_nullable_array_array operation.
//
// POST /test_request_required_string_uint32_nullable_array_array
func (c *Client) TestRequestRequiredStringUint32NullableArrayArray(ctx context.Context, request [][]NilStringUint32) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint32NullableArrayArray(ctx context.Context, request [][]NilStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint64 invokes test_request_required_string_uint64 operation.
//
// POST /test_request_required_string_uint64
func (c *Client) TestRequestRequiredStringUint64(ctx context.Context, request uint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint64(ctx context.Context, request uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint64Array invokes test_request_required_string_uint64_array operation.
//
// POST /test_request_required_string_uint64_array
func (c *Client) TestRequestRequiredStringUint64Array(ctx context.Context, request []uint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint64Array(ctx context.Context, request []uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint64ArrayArray invokes test_request_required_string_uint64_array_array operation.
//
// POST /test_request_required_string_uint64_array_array
func (c *Client) TestRequestRequiredStringUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint64ArrayArray(ctx context.Context, request [][]uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint64Nullable invokes test_request_required_string_uint64_nullable operation.
//
// POST /test_request_required_string_uint64_nullable
func (c *Client) TestRequestRequiredStringUint64Nullable(ctx context.Context, request NilStringUint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint64Nullable(ctx context.Context, request NilStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint64NullableArray invokes test_request_required_string_uint64_nullable_array operation.
//
// POST /test_request_required_string_uint64_nullable_array
func (c *Client) TestRequestRequiredStringUint64NullableArray(ctx context.Context, request []NilStringUint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint64NullableArray(ctx context.Context, request []NilStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint64NullableArrayArray invokes test_request_required_string_uint64_nullable_array_array operation.
//
// POST /test_request_required_string_uint64_nullable_array_array
func (c *Client) TestRequestRequiredStringUint64NullableArrayArray(ctx context.Context, request [][]NilStringUint64) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint64NullableArrayArray(ctx context.Context, request [][]NilStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint8 invokes test_request_required_string_uint8 operation.
//
// POST /test_request_required_string_uint8
func (c *Client) TestRequestRequiredStringUint8(ctx context.Context, request uint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint8(ctx context.Context, request uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint8Array invokes test_request_required_string_uint8_array operation.
//
// POST /test_request_required_string_uint8_array
func (c *Client) TestRequestRequiredStringUint8Array(ctx context.Context, request []uint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint8Array(ctx context.Context, request []uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint8ArrayArray invokes test_request_required_string_uint8_array_array operation.
//
// POST /test_request_required_string_uint8_array_array
func (c *Client) TestRequestRequiredStringUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint8ArrayArray(ctx context.Context, request [][]uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint8Nullable invokes test_request_required_string_uint8_nullable operation.
//
// POST /test_request_required_string_uint8_nullable
func (c *Client) TestRequestRequiredStringUint8Nullable(ctx context.Context, request NilStringUint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint8Nullable(ctx context.Context, request NilStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint8NullableArray invokes test_request_required_string_uint8_nullable_array operation.
//
// POST /test_request_required_string_uint8_nullable_array
func (c *Client) TestRequestRequiredStringUint8NullableArray(ctx context.Context, request []NilStringUint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint8NullableArray(ctx context.Context, request []NilStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUint8NullableArrayArray invokes test_request_required_string_uint8_nullable_array_array operation.
//
// POST /test_request_required_string_uint8_nullable_array_array
func (c *Client) TestRequestRequiredStringUint8NullableArrayArray(ctx context.Context, request [][]NilStringUint8) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUint8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUint8NullableArrayArray(ctx context.Context, request [][]NilStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUint8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUint8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUint8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUintArray invokes test_request_required_string_uint_array operation.
//
// POST /test_request_required_string_uint_array
func (c *Client) TestRequestRequiredStringUintArray(ctx context.Context, request []uint) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUintArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUintArray(ctx context.Context, request []uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUintArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUintArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUintArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUintArrayArray invokes test_request_required_string_uint_array_array operation.
//
// POST /test_request_required_string_uint_array_array
func (c *Client) TestRequestRequiredStringUintArrayArray(ctx context.Context, request [][]uint) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUintArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUintArrayArray(ctx context.Context, request [][]uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUintArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUintArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUintArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUintNullable invokes test_request_required_string_uint_nullable operation.
//
// POST /test_request_required_string_uint_nullable
func (c *Client) TestRequestRequiredStringUintNullable(ctx context.Context, request NilStringUint) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUintNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUintNullable(ctx context.Context, request NilStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUintNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUintNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUintNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUintNullableArray invokes test_request_required_string_uint_nullable_array operation.
//
// POST /test_request_required_string_uint_nullable_array
func (c *Client) TestRequestRequiredStringUintNullableArray(ctx context.Context, request []NilStringUint) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUintNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUintNullableArray(ctx context.Context, request []NilStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUintNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUintNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUintNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUintNullableArrayArray invokes test_request_required_string_uint_nullable_array_array operation.
//
// POST /test_request_required_string_uint_nullable_array_array
func (c *Client) TestRequestRequiredStringUintNullableArrayArray(ctx context.Context, request [][]NilStringUint) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUintNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUintNullableArrayArray(ctx context.Context, request [][]NilStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uint_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_uint_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUintNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_uint_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUintNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUintNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnix invokes test_request_required_string_unix operation.
//
// POST /test_request_required_string_unix
func (c *Client) TestRequestRequiredStringUnix(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnix(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnix(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnix",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixArray invokes test_request_required_string_unix_array operation.
//
// POST /test_request_required_string_unix_array
func (c *Client) TestRequestRequiredStringUnixArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixArrayArray invokes test_request_required_string_unix_array_array operation.
//
// POST /test_request_required_string_unix_array_array
func (c *Client) TestRequestRequiredStringUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicro invokes test_request_required_string_unix-micro operation.
//
// POST /test_request_required_string_unix-micro
func (c *Client) TestRequestRequiredStringUnixMicro(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMicro(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMicro(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-micro"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-micro"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMicroRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMicroResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroArray invokes test_request_required_string_unix-micro_array operation.
//
// POST /test_request_required_string_unix-micro_array
func (c *Client) TestRequestRequiredStringUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMicroArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMicroArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-micro_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-micro_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMicroArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMicroArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroArrayArray invokes test_request_required_string_unix-micro_array_array operation.
//
// POST /test_request_required_string_unix-micro_array_array
func (c *Client) TestRequestRequiredStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMicroArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-micro_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-micro_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMicroArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMicroArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroNullable invokes test_request_required_string_unix-micro_nullable operation.
//
// POST /test_request_required_string_unix-micro_nullable
func (c *Client) TestRequestRequiredStringUnixMicroNullable(ctx context.Context, request NilStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMicroNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMicroNullable(ctx context.Context, request NilStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-micro_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-micro_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMicroNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMicroNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroNullableArray invokes test_request_required_string_unix-micro_nullable_array operation.
//
// POST /test_request_required_string_unix-micro_nullable_array
func (c *Client) TestRequestRequiredStringUnixMicroNullableArray(ctx context.Context, request []NilStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMicroNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMicroNullableArray(ctx context.Context, request []NilStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-micro_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-micro_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMicroNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMicroNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMicroNullableArrayArray invokes test_request_required_string_unix-micro_nullable_array_array operation.
//
// POST /test_request_required_string_unix-micro_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixMicroNullableArrayArray(ctx context.Context, request [][]NilStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMicroNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMicroNullableArrayArray(ctx context.Context, request [][]NilStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-micro_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-micro_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMicroNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMicroNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilli invokes test_request_required_string_unix-milli operation.
//
// POST /test_request_required_string_unix-milli
func (c *Client) TestRequestRequiredStringUnixMilli(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMilli(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMilli(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-milli"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-milli"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMilliRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMilliResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliArray invokes test_request_required_string_unix-milli_array operation.
//
// POST /test_request_required_string_unix-milli_array
func (c *Client) TestRequestRequiredStringUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMilliArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMilliArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-milli_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-milli_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMilliArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMilliArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliArrayArray invokes test_request_required_string_unix-milli_array_array operation.
//
// POST /test_request_required_string_unix-milli_array_array
func (c *Client) TestRequestRequiredStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMilliArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-milli_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-milli_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMilliArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMilliArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliNullable invokes test_request_required_string_unix-milli_nullable operation.
//
// POST /test_request_required_string_unix-milli_nullable
func (c *Client) TestRequestRequiredStringUnixMilliNullable(ctx context.Context, request NilStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMilliNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMilliNullable(ctx context.Context, request NilStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-milli_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-milli_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMilliNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMilliNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliNullableArray invokes test_request_required_string_unix-milli_nullable_array operation.
//
// POST /test_request_required_string_unix-milli_nullable_array
func (c *Client) TestRequestRequiredStringUnixMilliNullableArray(ctx context.Context, request []NilStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMilliNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMilliNullableArray(ctx context.Context, request []NilStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-milli_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-milli_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMilliNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMilliNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixMilliNullableArrayArray invokes test_request_required_string_unix-milli_nullable_array_array operation.
//
// POST /test_request_required_string_unix-milli_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixMilliNullableArrayArray(ctx context.Context, request [][]NilStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixMilliNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixMilliNullableArrayArray(ctx context.Context, request [][]NilStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-milli_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-milli_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixMilliNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixMilliNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNano invokes test_request_required_string_unix-nano operation.
//
// POST /test_request_required_string_unix-nano
func (c *Client) TestRequestRequiredStringUnixNano(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNano(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNano(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-nano"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-nano"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNanoRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNanoResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoArray invokes test_request_required_string_unix-nano_array operation.
//
// POST /test_request_required_string_unix-nano_array
func (c *Client) TestRequestRequiredStringUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNanoArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNanoArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-nano_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-nano_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNanoArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNanoArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoArrayArray invokes test_request_required_string_unix-nano_array_array operation.
//
// POST /test_request_required_string_unix-nano_array_array
func (c *Client) TestRequestRequiredStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNanoArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-nano_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-nano_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNanoArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNanoArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoNullable invokes test_request_required_string_unix-nano_nullable operation.
//
// POST /test_request_required_string_unix-nano_nullable
func (c *Client) TestRequestRequiredStringUnixNanoNullable(ctx context.Context, request NilStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNanoNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNanoNullable(ctx context.Context, request NilStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-nano_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-nano_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNanoNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNanoNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoNullableArray invokes test_request_required_string_unix-nano_nullable_array operation.
//
// POST /test_request_required_string_unix-nano_nullable_array
func (c *Client) TestRequestRequiredStringUnixNanoNullableArray(ctx context.Context, request []NilStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNanoNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNanoNullableArray(ctx context.Context, request []NilStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-nano_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-nano_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNanoNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNanoNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNanoNullableArrayArray invokes test_request_required_string_unix-nano_nullable_array_array operation.
//
// POST /test_request_required_string_unix-nano_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixNanoNullableArrayArray(ctx context.Context, request [][]NilStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNanoNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNanoNullableArrayArray(ctx context.Context, request [][]NilStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-nano_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-nano_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNanoNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNanoNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNullable invokes test_request_required_string_unix_nullable operation.
//
// POST /test_request_required_string_unix_nullable
func (c *Client) TestRequestRequiredStringUnixNullable(ctx context.Context, request NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNullable(ctx context.Context, request NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNullableArray invokes test_request_required_string_unix_nullable_array operation.
//
// POST /test_request_required_string_unix_nullable_array
func (c *Client) TestRequestRequiredStringUnixNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNullableArray(ctx context.Context, request []NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixNullableArrayArray invokes test_request_required_string_unix_nullable_array_array operation.
//
// POST /test_request_required_string_unix_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSeconds invokes test_request_required_string_unix-seconds operation.
//
// POST /test_request_required_string_unix-seconds
func (c *Client) TestRequestRequiredStringUnixSeconds(ctx context.Context, request time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixSeconds(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixSeconds(ctx context.Context, request time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-seconds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-seconds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixSecondsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixSecondsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsArray invokes test_request_required_string_unix-seconds_array operation.
//
// POST /test_request_required_string_unix-seconds_array
func (c *Client) TestRequestRequiredStringUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixSecondsArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixSecondsArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-seconds_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-seconds_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixSecondsArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixSecondsArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsArrayArray invokes test_request_required_string_unix-seconds_array_array operation.
//
// POST /test_request_required_string_unix-seconds_array_array
func (c *Client) TestRequestRequiredStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixSecondsArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-seconds_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-seconds_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixSecondsArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixSecondsArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsNullable invokes test_request_required_string_unix-seconds_nullable operation.
//
// POST /test_request_required_string_unix-seconds_nullable
func (c *Client) TestRequestRequiredStringUnixSecondsNullable(ctx context.Context, request NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixSecondsNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixSecondsNullable(ctx context.Context, request NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-seconds_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-seconds_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixSecondsNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixSecondsNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsNullableArray invokes test_request_required_string_unix-seconds_nullable_array operation.
//
// POST /test_request_required_string_unix-seconds_nullable_array
func (c *Client) TestRequestRequiredStringUnixSecondsNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixSecondsNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixSecondsNullableArray(ctx context.Context, request []NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-seconds_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-seconds_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixSecondsNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixSecondsNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestRequiredStringUnixSecondsNullableArrayArray invokes test_request_required_string_unix-seconds_nullable_array_array operation.
//
// POST /test_request_required_string_unix-seconds_nullable_array_array
func (c *Client) TestRequestRequiredStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestRequiredStringUnixSecondsNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestRequiredStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_required_string_unix-seconds_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestRequiredStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_required_string_unix-seconds_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestRequiredStringUnixSecondsNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestString invokes test_request_string operation.
//
// POST /test_request_string
func (c *Client) TestRequestString(ctx context.Context, request OptString) (*Error, error) {
	res, err := c.sendTestRequestString(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestString(ctx context.Context, request OptString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestString",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringArray invokes test_request_string_array operation.
//
// POST /test_request_string_array
func (c *Client) TestRequestStringArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestStringArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringArrayArray invokes test_request_string_array_array operation.
//
// POST /test_request_string_array_array
func (c *Client) TestRequestStringArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestStringArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBase64 invokes test_request_string_base64 operation.
//
// POST /test_request_string_base64
func (c *Client) TestRequestStringBase64(ctx context.Context, request []byte) (*Error, error) {
	res, err := c.sendTestRequestStringBase64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBase64(ctx context.Context, request []byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_base64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_base64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBase64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_base64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBase64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBase64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBase64Array invokes test_request_string_base64_array operation.
//
// POST /test_request_string_base64_array
func (c *Client) TestRequestStringBase64Array(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringBase64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBase64Array(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_base64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_base64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBase64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_base64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBase64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBase64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBase64ArrayArray invokes test_request_string_base64_array_array operation.
//
// POST /test_request_string_base64_array_array
func (c *Client) TestRequestStringBase64ArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringBase64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBase64ArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_base64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_base64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBase64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_base64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBase64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBase64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBase64Nullable invokes test_request_string_base64_nullable operation.
//
// POST /test_request_string_base64_nullable
func (c *Client) TestRequestStringBase64Nullable(ctx context.Context, request OptNilByte) (*Error, error) {
	res, err := c.sendTestRequestStringBase64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBase64Nullable(ctx context.Context, request OptNilByte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_base64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_base64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBase64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_base64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBase64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBase64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBase64NullableArray invokes test_request_string_base64_nullable_array operation.
//
// POST /test_request_string_base64_nullable_array
func (c *Client) TestRequestStringBase64NullableArray(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringBase64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBase64NullableArray(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_base64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_base64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBase64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_base64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBase64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBase64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBase64NullableArrayArray invokes test_request_string_base64_nullable_array_array operation.
//
// POST /test_request_string_base64_nullable_array_array
func (c *Client) TestRequestStringBase64NullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringBase64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBase64NullableArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_base64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_base64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBase64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_base64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBase64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBase64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinary invokes test_request_string_binary operation.
//
// POST /test_request_string_binary
func (c *Client) TestRequestStringBinary(ctx context.Context, request OptString) (*Error, error) {
	res, err := c.sendTestRequestStringBinary(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBinary(ctx context.Context, request OptString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_binary"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinary",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_binary"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBinaryRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBinaryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryArray invokes test_request_string_binary_array operation.
//
// POST /test_request_string_binary_array
func (c *Client) TestRequestStringBinaryArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestStringBinaryArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBinaryArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_binary_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_binary_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBinaryArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBinaryArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryArrayArray invokes test_request_string_binary_array_array operation.
//
// POST /test_request_string_binary_array_array
func (c *Client) TestRequestStringBinaryArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestStringBinaryArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBinaryArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_binary_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_binary_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBinaryArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBinaryArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryNullable invokes test_request_string_binary_nullable operation.
//
// POST /test_request_string_binary_nullable
func (c *Client) TestRequestStringBinaryNullable(ctx context.Context, request OptNilString) (*Error, error) {
	res, err := c.sendTestRequestStringBinaryNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBinaryNullable(ctx context.Context, request OptNilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_binary_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_binary_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBinaryNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBinaryNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryNullableArray invokes test_request_string_binary_nullable_array operation.
//
// POST /test_request_string_binary_nullable_array
func (c *Client) TestRequestStringBinaryNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestStringBinaryNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBinaryNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_binary_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_binary_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBinaryNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBinaryNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringBinaryNullableArrayArray invokes test_request_string_binary_nullable_array_array operation.
//
// POST /test_request_string_binary_nullable_array_array
func (c *Client) TestRequestStringBinaryNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestStringBinaryNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringBinaryNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_binary_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_binary_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringBinaryNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringBinaryNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByte invokes test_request_string_byte operation.
//
// POST /test_request_string_byte
func (c *Client) TestRequestStringByte(ctx context.Context, request []byte) (*Error, error) {
	res, err := c.sendTestRequestStringByte(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringByte(ctx context.Context, request []byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_byte"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByte",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_byte"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringByteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringByteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteArray invokes test_request_string_byte_array operation.
//
// POST /test_request_string_byte_array
func (c *Client) TestRequestStringByteArray(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringByteArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringByteArray(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_byte_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_byte_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringByteArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringByteArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteArrayArray invokes test_request_string_byte_array_array operation.
//
// POST /test_request_string_byte_array_array
func (c *Client) TestRequestStringByteArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringByteArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringByteArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_byte_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_byte_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringByteArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringByteArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteNullable invokes test_request_string_byte_nullable operation.
//
// POST /test_request_string_byte_nullable
func (c *Client) TestRequestStringByteNullable(ctx context.Context, request OptNilByte) (*Error, error) {
	res, err := c.sendTestRequestStringByteNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringByteNullable(ctx context.Context, request OptNilByte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_byte_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_byte_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringByteNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringByteNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteNullableArray invokes test_request_string_byte_nullable_array operation.
//
// POST /test_request_string_byte_nullable_array
func (c *Client) TestRequestStringByteNullableArray(ctx context.Context, request [][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringByteNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringByteNullableArray(ctx context.Context, request [][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_byte_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_byte_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringByteNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringByteNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringByteNullableArrayArray invokes test_request_string_byte_nullable_array_array operation.
//
// POST /test_request_string_byte_nullable_array_array
func (c *Client) TestRequestStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (*Error, error) {
	res, err := c.sendTestRequestStringByteNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringByteNullableArrayArray(ctx context.Context, request [][][]byte) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_byte_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_byte_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringByteNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringByteNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDate invokes test_request_string_date operation.
//
// POST /test_request_string_date
func (c *Client) TestRequestStringDate(ctx context.Context, request OptDate) (*Error, error) {
	res, err := c.sendTestRequestStringDate(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDate(ctx context.Context, request OptDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDate",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateArray invokes test_request_string_date_array operation.
//
// POST /test_request_string_date_array
func (c *Client) TestRequestStringDateArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringDateArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateArrayArray invokes test_request_string_date_array_array operation.
//
// POST /test_request_string_date_array_array
func (c *Client) TestRequestStringDateArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringDateArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateNullable invokes test_request_string_date_nullable operation.
//
// POST /test_request_string_date_nullable
func (c *Client) TestRequestStringDateNullable(ctx context.Context, request OptNilDate) (*Error, error) {
	res, err := c.sendTestRequestStringDateNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateNullable(ctx context.Context, request OptNilDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateNullableArray invokes test_request_string_date_nullable_array operation.
//
// POST /test_request_string_date_nullable_array
func (c *Client) TestRequestStringDateNullableArray(ctx context.Context, request []NilDate) (*Error, error) {
	res, err := c.sendTestRequestStringDateNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateNullableArray(ctx context.Context, request []NilDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateNullableArrayArray invokes test_request_string_date_nullable_array_array operation.
//
// POST /test_request_string_date_nullable_array_array
func (c *Client) TestRequestStringDateNullableArrayArray(ctx context.Context, request [][]NilDate) (*Error, error) {
	res, err := c.sendTestRequestStringDateNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateNullableArrayArray(ctx context.Context, request [][]NilDate) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTime invokes test_request_string_date-time operation.
//
// POST /test_request_string_date-time
func (c *Client) TestRequestStringDateTime(ctx context.Context, request OptDateTime) (*Error, error) {
	res, err := c.sendTestRequestStringDateTime(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateTime(ctx context.Context, request OptDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date-time"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTime",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date-time"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateTimeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateTimeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeArray invokes test_request_string_date-time_array operation.
//
// POST /test_request_string_date-time_array
func (c *Client) TestRequestStringDateTimeArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringDateTimeArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateTimeArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date-time_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date-time_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateTimeArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateTimeArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeArrayArray invokes test_request_string_date-time_array_array operation.
//
// POST /test_request_string_date-time_array_array
func (c *Client) TestRequestStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringDateTimeArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateTimeArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date-time_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date-time_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateTimeArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateTimeArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeNullable invokes test_request_string_date-time_nullable operation.
//
// POST /test_request_string_date-time_nullable
func (c *Client) TestRequestStringDateTimeNullable(ctx context.Context, request OptNilDateTime) (*Error, error) {
	res, err := c.sendTestRequestStringDateTimeNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateTimeNullable(ctx context.Context, request OptNilDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date-time_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date-time_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateTimeNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateTimeNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeNullableArray invokes test_request_string_date-time_nullable_array operation.
//
// POST /test_request_string_date-time_nullable_array
func (c *Client) TestRequestStringDateTimeNullableArray(ctx context.Context, request []NilDateTime) (*Error, error) {
	res, err := c.sendTestRequestStringDateTimeNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateTimeNullableArray(ctx context.Context, request []NilDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date-time_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date-time_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateTimeNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateTimeNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDateTimeNullableArrayArray invokes test_request_string_date-time_nullable_array_array operation.
//
// POST /test_request_string_date-time_nullable_array_array
func (c *Client) TestRequestStringDateTimeNullableArrayArray(ctx context.Context, request [][]NilDateTime) (*Error, error) {
	res, err := c.sendTestRequestStringDateTimeNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDateTimeNullableArrayArray(ctx context.Context, request [][]NilDateTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_date-time_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_date-time_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDateTimeNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDateTimeNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDuration invokes test_request_string_duration operation.
//
// POST /test_request_string_duration
func (c *Client) TestRequestStringDuration(ctx context.Context, request OptDuration) (*Error, error) {
	res, err := c.sendTestRequestStringDuration(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDuration(ctx context.Context, request OptDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_duration"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDuration",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_duration"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDurationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDurationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationArray invokes test_request_string_duration_array operation.
//
// POST /test_request_string_duration_array
func (c *Client) TestRequestStringDurationArray(ctx context.Context, request []time.Duration) (*Error, error) {
	res, err := c.sendTestRequestStringDurationArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDurationArray(ctx context.Context, request []time.Duration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_duration_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_duration_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDurationArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDurationArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationArrayArray invokes test_request_string_duration_array_array operation.
//
// POST /test_request_string_duration_array_array
func (c *Client) TestRequestStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (*Error, error) {
	res, err := c.sendTestRequestStringDurationArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDurationArrayArray(ctx context.Context, request [][]time.Duration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_duration_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_duration_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDurationArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDurationArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationNullable invokes test_request_string_duration_nullable operation.
//
// POST /test_request_string_duration_nullable
func (c *Client) TestRequestStringDurationNullable(ctx context.Context, request OptNilDuration) (*Error, error) {
	res, err := c.sendTestRequestStringDurationNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDurationNullable(ctx context.Context, request OptNilDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_duration_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_duration_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDurationNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDurationNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationNullableArray invokes test_request_string_duration_nullable_array operation.
//
// POST /test_request_string_duration_nullable_array
func (c *Client) TestRequestStringDurationNullableArray(ctx context.Context, request []NilDuration) (*Error, error) {
	res, err := c.sendTestRequestStringDurationNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDurationNullableArray(ctx context.Context, request []NilDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_duration_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_duration_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDurationNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDurationNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringDurationNullableArrayArray invokes test_request_string_duration_nullable_array_array operation.
//
// POST /test_request_string_duration_nullable_array_array
func (c *Client) TestRequestStringDurationNullableArrayArray(ctx context.Context, request [][]NilDuration) (*Error, error) {
	res, err := c.sendTestRequestStringDurationNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringDurationNullableArrayArray(ctx context.Context, request [][]NilDuration) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_duration_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_duration_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringDurationNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringDurationNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmail invokes test_request_string_email operation.
//
// POST /test_request_string_email
func (c *Client) TestRequestStringEmail(ctx context.Context, request OptString) (*Error, error) {
	res, err := c.sendTestRequestStringEmail(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringEmail(ctx context.Context, request OptString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_email"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmail",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_email"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringEmailRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringEmailResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailArray invokes test_request_string_email_array operation.
//
// POST /test_request_string_email_array
func (c *Client) TestRequestStringEmailArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestStringEmailArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringEmailArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_email_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_email_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringEmailArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringEmailArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailArrayArray invokes test_request_string_email_array_array operation.
//
// POST /test_request_string_email_array_array
func (c *Client) TestRequestStringEmailArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestStringEmailArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringEmailArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_email_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_email_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringEmailArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringEmailArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailNullable invokes test_request_string_email_nullable operation.
//
// POST /test_request_string_email_nullable
func (c *Client) TestRequestStringEmailNullable(ctx context.Context, request OptNilString) (*Error, error) {
	res, err := c.sendTestRequestStringEmailNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringEmailNullable(ctx context.Context, request OptNilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_email_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_email_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringEmailNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringEmailNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailNullableArray invokes test_request_string_email_nullable_array operation.
//
// POST /test_request_string_email_nullable_array
func (c *Client) TestRequestStringEmailNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestStringEmailNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringEmailNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_email_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_email_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringEmailNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringEmailNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringEmailNullableArrayArray invokes test_request_string_email_nullable_array_array operation.
//
// POST /test_request_string_email_nullable_array_array
func (c *Client) TestRequestStringEmailNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestStringEmailNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringEmailNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_email_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_email_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringEmailNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringEmailNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat32 invokes test_request_string_float32 operation.
//
// POST /test_request_string_float32
func (c *Client) TestRequestStringFloat32(ctx context.Context, request OptStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestStringFloat32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat32(ctx context.Context, request OptStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat32Array invokes test_request_string_float32_array operation.
//
// POST /test_request_string_float32_array
func (c *Client) TestRequestStringFloat32Array(ctx context.Context, request []float32) (*Error, error) {
	res, err := c.sendTestRequestStringFloat32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat32Array(ctx context.Context, request []float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat32ArrayArray invokes test_request_string_float32_array_array operation.
//
// POST /test_request_string_float32_array_array
func (c *Client) TestRequestStringFloat32ArrayArray(ctx context.Context, request [][]float32) (*Error, error) {
	res, err := c.sendTestRequestStringFloat32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat32ArrayArray(ctx context.Context, request [][]float32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat32Nullable invokes test_request_string_float32_nullable operation.
//
// POST /test_request_string_float32_nullable
func (c *Client) TestRequestStringFloat32Nullable(ctx context.Context, request OptNilStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestStringFloat32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat32Nullable(ctx context.Context, request OptNilStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat32NullableArray invokes test_request_string_float32_nullable_array operation.
//
// POST /test_request_string_float32_nullable_array
func (c *Client) TestRequestStringFloat32NullableArray(ctx context.Context, request []NilStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestStringFloat32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat32NullableArray(ctx context.Context, request []NilStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat32NullableArrayArray invokes test_request_string_float32_nullable_array_array operation.
//
// POST /test_request_string_float32_nullable_array_array
func (c *Client) TestRequestStringFloat32NullableArrayArray(ctx context.Context, request [][]NilStringFloat32) (*Error, error) {
	res, err := c.sendTestRequestStringFloat32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat32NullableArrayArray(ctx context.Context, request [][]NilStringFloat32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat64 invokes test_request_string_float64 operation.
//
// POST /test_request_string_float64
func (c *Client) TestRequestStringFloat64(ctx context.Context, request OptStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestStringFloat64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat64(ctx context.Context, request OptStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat64Array invokes test_request_string_float64_array operation.
//
// POST /test_request_string_float64_array
func (c *Client) TestRequestStringFloat64Array(ctx context.Context, request []float64) (*Error, error) {
	res, err := c.sendTestRequestStringFloat64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat64Array(ctx context.Context, request []float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat64ArrayArray invokes test_request_string_float64_array_array operation.
//
// POST /test_request_string_float64_array_array
func (c *Client) TestRequestStringFloat64ArrayArray(ctx context.Context, request [][]float64) (*Error, error) {
	res, err := c.sendTestRequestStringFloat64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat64ArrayArray(ctx context.Context, request [][]float64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat64Nullable invokes test_request_string_float64_nullable operation.
//
// POST /test_request_string_float64_nullable
func (c *Client) TestRequestStringFloat64Nullable(ctx context.Context, request OptNilStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestStringFloat64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat64Nullable(ctx context.Context, request OptNilStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat64NullableArray invokes test_request_string_float64_nullable_array operation.
//
// POST /test_request_string_float64_nullable_array
func (c *Client) TestRequestStringFloat64NullableArray(ctx context.Context, request []NilStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestStringFloat64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat64NullableArray(ctx context.Context, request []NilStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringFloat64NullableArrayArray invokes test_request_string_float64_nullable_array_array operation.
//
// POST /test_request_string_float64_nullable_array_array
func (c *Client) TestRequestStringFloat64NullableArrayArray(ctx context.Context, request [][]NilStringFloat64) (*Error, error) {
	res, err := c.sendTestRequestStringFloat64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringFloat64NullableArrayArray(ctx context.Context, request [][]NilStringFloat64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_float64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_float64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringFloat64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_float64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringFloat64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringFloat64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostname invokes test_request_string_hostname operation.
//
// POST /test_request_string_hostname
func (c *Client) TestRequestStringHostname(ctx context.Context, request OptString) (*Error, error) {
	res, err := c.sendTestRequestStringHostname(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringHostname(ctx context.Context, request OptString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_hostname"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostname",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_hostname"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringHostnameRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringHostnameResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameArray invokes test_request_string_hostname_array operation.
//
// POST /test_request_string_hostname_array
func (c *Client) TestRequestStringHostnameArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestStringHostnameArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringHostnameArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_hostname_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_hostname_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringHostnameArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringHostnameArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameArrayArray invokes test_request_string_hostname_array_array operation.
//
// POST /test_request_string_hostname_array_array
func (c *Client) TestRequestStringHostnameArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestStringHostnameArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringHostnameArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_hostname_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_hostname_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringHostnameArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringHostnameArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameNullable invokes test_request_string_hostname_nullable operation.
//
// POST /test_request_string_hostname_nullable
func (c *Client) TestRequestStringHostnameNullable(ctx context.Context, request OptNilString) (*Error, error) {
	res, err := c.sendTestRequestStringHostnameNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringHostnameNullable(ctx context.Context, request OptNilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_hostname_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_hostname_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringHostnameNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringHostnameNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameNullableArray invokes test_request_string_hostname_nullable_array operation.
//
// POST /test_request_string_hostname_nullable_array
func (c *Client) TestRequestStringHostnameNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestStringHostnameNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringHostnameNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_hostname_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_hostname_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringHostnameNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringHostnameNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringHostnameNullableArrayArray invokes test_request_string_hostname_nullable_array_array operation.
//
// POST /test_request_string_hostname_nullable_array_array
func (c *Client) TestRequestStringHostnameNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestStringHostnameNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringHostnameNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_hostname_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_hostname_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringHostnameNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringHostnameNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIP invokes test_request_string_ip operation.
//
// POST /test_request_string_ip
func (c *Client) TestRequestStringIP(ctx context.Context, request OptIP) (*Error, error) {
	res, err := c.sendTestRequestStringIP(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIP(ctx context.Context, request OptIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ip"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIP",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ip"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIPRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIPResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPArray invokes test_request_string_ip_array operation.
//
// POST /test_request_string_ip_array
func (c *Client) TestRequestStringIPArray(ctx context.Context, request []netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestStringIPArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIPArray(ctx context.Context, request []netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ip_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ip_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIPArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIPArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPArrayArray invokes test_request_string_ip_array_array operation.
//
// POST /test_request_string_ip_array_array
func (c *Client) TestRequestStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestStringIPArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIPArrayArray(ctx context.Context, request [][]netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ip_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ip_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIPArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIPArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPNullable invokes test_request_string_ip_nullable operation.
//
// POST /test_request_string_ip_nullable
func (c *Client) TestRequestStringIPNullable(ctx context.Context, request OptNilIP) (*Error, error) {
	res, err := c.sendTestRequestStringIPNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIPNullable(ctx context.Context, request OptNilIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ip_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ip_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIPNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIPNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPNullableArray invokes test_request_string_ip_nullable_array operation.
//
// POST /test_request_string_ip_nullable_array
func (c *Client) TestRequestStringIPNullableArray(ctx context.Context, request []NilIP) (*Error, error) {
	res, err := c.sendTestRequestStringIPNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIPNullableArray(ctx context.Context, request []NilIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ip_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ip_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIPNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIPNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIPNullableArrayArray invokes test_request_string_ip_nullable_array_array operation.
//
// POST /test_request_string_ip_nullable_array_array
func (c *Client) TestRequestStringIPNullableArrayArray(ctx context.Context, request [][]NilIP) (*Error, error) {
	res, err := c.sendTestRequestStringIPNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIPNullableArrayArray(ctx context.Context, request [][]NilIP) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ip_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ip_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIPNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIPNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt invokes test_request_string_int operation.
//
// POST /test_request_string_int
func (c *Client) TestRequestStringInt(ctx context.Context, request OptStringInt) (*Error, error) {
	res, err := c.sendTestRequestStringInt(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt(ctx context.Context, request OptStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIntRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIntResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt16 invokes test_request_string_int16 operation.
//
// POST /test_request_string_int16
func (c *Client) TestRequestStringInt16(ctx context.Context, request OptStringInt16) (*Error, error) {
	res, err := c.sendTestRequestStringInt16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt16(ctx context.Context, request OptStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt16Array invokes test_request_string_int16_array operation.
//
// POST /test_request_string_int16_array
func (c *Client) TestRequestStringInt16Array(ctx context.Context, request []int16) (*Error, error) {
	res, err := c.sendTestRequestStringInt16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt16Array(ctx context.Context, request []int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt16ArrayArray invokes test_request_string_int16_array_array operation.
//
// POST /test_request_string_int16_array_array
func (c *Client) TestRequestStringInt16ArrayArray(ctx context.Context, request [][]int16) (*Error, error) {
	res, err := c.sendTestRequestStringInt16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt16ArrayArray(ctx context.Context, request [][]int16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt16Nullable invokes test_request_string_int16_nullable operation.
//
// POST /test_request_string_int16_nullable
func (c *Client) TestRequestStringInt16Nullable(ctx context.Context, request OptNilStringInt16) (*Error, error) {
	res, err := c.sendTestRequestStringInt16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt16Nullable(ctx context.Context, request OptNilStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt16NullableArray invokes test_request_string_int16_nullable_array operation.
//
// POST /test_request_string_int16_nullable_array
func (c *Client) TestRequestStringInt16NullableArray(ctx context.Context, request []NilStringInt16) (*Error, error) {
	res, err := c.sendTestRequestStringInt16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt16NullableArray(ctx context.Context, request []NilStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt16NullableArrayArray invokes test_request_string_int16_nullable_array_array operation.
//
// POST /test_request_string_int16_nullable_array_array
func (c *Client) TestRequestStringInt16NullableArrayArray(ctx context.Context, request [][]NilStringInt16) (*Error, error) {
	res, err := c.sendTestRequestStringInt16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt16NullableArrayArray(ctx context.Context, request [][]NilStringInt16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32 invokes test_request_string_int32 operation.
//
// POST /test_request_string_int32
func (c *Client) TestRequestStringInt32(ctx context.Context, request OptStringInt32) (*Error, error) {
	res, err := c.sendTestRequestStringInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt32(ctx context.Context, request OptStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32Array invokes test_request_string_int32_array operation.
//
// POST /test_request_string_int32_array
func (c *Client) TestRequestStringInt32Array(ctx context.Context, request []int32) (*Error, error) {
	res, err := c.sendTestRequestStringInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt32Array(ctx context.Context, request []int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32ArrayArray invokes test_request_string_int32_array_array operation.
//
// POST /test_request_string_int32_array_array
func (c *Client) TestRequestStringInt32ArrayArray(ctx context.Context, request [][]int32) (*Error, error) {
	res, err := c.sendTestRequestStringInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt32ArrayArray(ctx context.Context, request [][]int32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32Nullable invokes test_request_string_int32_nullable operation.
//
// POST /test_request_string_int32_nullable
func (c *Client) TestRequestStringInt32Nullable(ctx context.Context, request OptNilStringInt32) (*Error, error) {
	res, err := c.sendTestRequestStringInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt32Nullable(ctx context.Context, request OptNilStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32NullableArray invokes test_request_string_int32_nullable_array operation.
//
// POST /test_request_string_int32_nullable_array
func (c *Client) TestRequestStringInt32NullableArray(ctx context.Context, request []NilStringInt32) (*Error, error) {
	res, err := c.sendTestRequestStringInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt32NullableArray(ctx context.Context, request []NilStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt32NullableArrayArray invokes test_request_string_int32_nullable_array_array operation.
//
// POST /test_request_string_int32_nullable_array_array
func (c *Client) TestRequestStringInt32NullableArrayArray(ctx context.Context, request [][]NilStringInt32) (*Error, error) {
	res, err := c.sendTestRequestStringInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt32NullableArrayArray(ctx context.Context, request [][]NilStringInt32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64 invokes test_request_string_int64 operation.
//
// POST /test_request_string_int64
func (c *Client) TestRequestStringInt64(ctx context.Context, request OptStringInt64) (*Error, error) {
	res, err := c.sendTestRequestStringInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt64(ctx context.Context, request OptStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64Array invokes test_request_string_int64_array operation.
//
// POST /test_request_string_int64_array
func (c *Client) TestRequestStringInt64Array(ctx context.Context, request []int64) (*Error, error) {
	res, err := c.sendTestRequestStringInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt64Array(ctx context.Context, request []int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64ArrayArray invokes test_request_string_int64_array_array operation.
//
// POST /test_request_string_int64_array_array
func (c *Client) TestRequestStringInt64ArrayArray(ctx context.Context, request [][]int64) (*Error, error) {
	res, err := c.sendTestRequestStringInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt64ArrayArray(ctx context.Context, request [][]int64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64Nullable invokes test_request_string_int64_nullable operation.
//
// POST /test_request_string_int64_nullable
func (c *Client) TestRequestStringInt64Nullable(ctx context.Context, request OptNilStringInt64) (*Error, error) {
	res, err := c.sendTestRequestStringInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt64Nullable(ctx context.Context, request OptNilStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64NullableArray invokes test_request_string_int64_nullable_array operation.
//
// POST /test_request_string_int64_nullable_array
func (c *Client) TestRequestStringInt64NullableArray(ctx context.Context, request []NilStringInt64) (*Error, error) {
	res, err := c.sendTestRequestStringInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt64NullableArray(ctx context.Context, request []NilStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt64NullableArrayArray invokes test_request_string_int64_nullable_array_array operation.
//
// POST /test_request_string_int64_nullable_array_array
func (c *Client) TestRequestStringInt64NullableArrayArray(ctx context.Context, request [][]NilStringInt64) (*Error, error) {
	res, err := c.sendTestRequestStringInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt64NullableArrayArray(ctx context.Context, request [][]NilStringInt64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt8 invokes test_request_string_int8 operation.
//
// POST /test_request_string_int8
func (c *Client) TestRequestStringInt8(ctx context.Context, request OptStringInt8) (*Error, error) {
	res, err := c.sendTestRequestStringInt8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt8(ctx context.Context, request OptStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt8Array invokes test_request_string_int8_array operation.
//
// POST /test_request_string_int8_array
func (c *Client) TestRequestStringInt8Array(ctx context.Context, request []int8) (*Error, error) {
	res, err := c.sendTestRequestStringInt8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt8Array(ctx context.Context, request []int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt8ArrayArray invokes test_request_string_int8_array_array operation.
//
// POST /test_request_string_int8_array_array
func (c *Client) TestRequestStringInt8ArrayArray(ctx context.Context, request [][]int8) (*Error, error) {
	res, err := c.sendTestRequestStringInt8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt8ArrayArray(ctx context.Context, request [][]int8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt8Nullable invokes test_request_string_int8_nullable operation.
//
// POST /test_request_string_int8_nullable
func (c *Client) TestRequestStringInt8Nullable(ctx context.Context, request OptNilStringInt8) (*Error, error) {
	res, err := c.sendTestRequestStringInt8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt8Nullable(ctx context.Context, request OptNilStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt8NullableArray invokes test_request_string_int8_nullable_array operation.
//
// POST /test_request_string_int8_nullable_array
func (c *Client) TestRequestStringInt8NullableArray(ctx context.Context, request []NilStringInt8) (*Error, error) {
	res, err := c.sendTestRequestStringInt8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt8NullableArray(ctx context.Context, request []NilStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringInt8NullableArrayArray invokes test_request_string_int8_nullable_array_array operation.
//
// POST /test_request_string_int8_nullable_array_array
func (c *Client) TestRequestStringInt8NullableArrayArray(ctx context.Context, request [][]NilStringInt8) (*Error, error) {
	res, err := c.sendTestRequestStringInt8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringInt8NullableArrayArray(ctx context.Context, request [][]NilStringInt8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringInt8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringInt8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringInt8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIntArray invokes test_request_string_int_array operation.
//
// POST /test_request_string_int_array
func (c *Client) TestRequestStringIntArray(ctx context.Context, request []int) (*Error, error) {
	res, err := c.sendTestRequestStringIntArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIntArray(ctx context.Context, request []int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIntArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIntArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIntArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIntArrayArray invokes test_request_string_int_array_array operation.
//
// POST /test_request_string_int_array_array
func (c *Client) TestRequestStringIntArrayArray(ctx context.Context, request [][]int) (*Error, error) {
	res, err := c.sendTestRequestStringIntArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIntArrayArray(ctx context.Context, request [][]int) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIntArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIntArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIntArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIntNullable invokes test_request_string_int_nullable operation.
//
// POST /test_request_string_int_nullable
func (c *Client) TestRequestStringIntNullable(ctx context.Context, request OptNilStringInt) (*Error, error) {
	res, err := c.sendTestRequestStringIntNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIntNullable(ctx context.Context, request OptNilStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIntNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIntNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIntNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIntNullableArray invokes test_request_string_int_nullable_array operation.
//
// POST /test_request_string_int_nullable_array
func (c *Client) TestRequestStringIntNullableArray(ctx context.Context, request []NilStringInt) (*Error, error) {
	res, err := c.sendTestRequestStringIntNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIntNullableArray(ctx context.Context, request []NilStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIntNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIntNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIntNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIntNullableArrayArray invokes test_request_string_int_nullable_array_array operation.
//
// POST /test_request_string_int_nullable_array_array
func (c *Client) TestRequestStringIntNullableArrayArray(ctx context.Context, request [][]NilStringInt) (*Error, error) {
	res, err := c.sendTestRequestStringIntNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIntNullableArrayArray(ctx context.Context, request [][]NilStringInt) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_int_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIntNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_int_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIntNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIntNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4 invokes test_request_string_ipv4 operation.
//
// POST /test_request_string_ipv4
func (c *Client) TestRequestStringIpv4(ctx context.Context, request OptIPv4) (*Error, error) {
	res, err := c.sendTestRequestStringIpv4(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv4(ctx context.Context, request OptIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv4"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv4"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv4Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv4Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4Array invokes test_request_string_ipv4_array operation.
//
// POST /test_request_string_ipv4_array
func (c *Client) TestRequestStringIpv4Array(ctx context.Context, request []netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestStringIpv4Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv4Array(ctx context.Context, request []netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv4_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv4_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv4ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv4ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4ArrayArray invokes test_request_string_ipv4_array_array operation.
//
// POST /test_request_string_ipv4_array_array
func (c *Client) TestRequestStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestStringIpv4ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv4ArrayArray(ctx context.Context, request [][]netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv4_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv4_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv4ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv4ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4Nullable invokes test_request_string_ipv4_nullable operation.
//
// POST /test_request_string_ipv4_nullable
func (c *Client) TestRequestStringIpv4Nullable(ctx context.Context, request OptNilIPv4) (*Error, error) {
	res, err := c.sendTestRequestStringIpv4Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv4Nullable(ctx context.Context, request OptNilIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv4_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv4_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv4NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv4NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4NullableArray invokes test_request_string_ipv4_nullable_array operation.
//
// POST /test_request_string_ipv4_nullable_array
func (c *Client) TestRequestStringIpv4NullableArray(ctx context.Context, request []NilIPv4) (*Error, error) {
	res, err := c.sendTestRequestStringIpv4NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv4NullableArray(ctx context.Context, request []NilIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv4_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv4_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv4NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv4NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv4NullableArrayArray invokes test_request_string_ipv4_nullable_array_array operation.
//
// POST /test_request_string_ipv4_nullable_array_array
func (c *Client) TestRequestStringIpv4NullableArrayArray(ctx context.Context, request [][]NilIPv4) (*Error, error) {
	res, err := c.sendTestRequestStringIpv4NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv4NullableArrayArray(ctx context.Context, request [][]NilIPv4) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv4_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv4_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv4NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv4NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6 invokes test_request_string_ipv6 operation.
//
// POST /test_request_string_ipv6
func (c *Client) TestRequestStringIpv6(ctx context.Context, request OptIPv6) (*Error, error) {
	res, err := c.sendTestRequestStringIpv6(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv6(ctx context.Context, request OptIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv6"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv6"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv6Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv6Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6Array invokes test_request_string_ipv6_array operation.
//
// POST /test_request_string_ipv6_array
func (c *Client) TestRequestStringIpv6Array(ctx context.Context, request []netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestStringIpv6Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv6Array(ctx context.Context, request []netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv6_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv6_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv6ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv6ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6ArrayArray invokes test_request_string_ipv6_array_array operation.
//
// POST /test_request_string_ipv6_array_array
func (c *Client) TestRequestStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (*Error, error) {
	res, err := c.sendTestRequestStringIpv6ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv6ArrayArray(ctx context.Context, request [][]netip.Addr) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv6_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv6_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv6ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv6ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6Nullable invokes test_request_string_ipv6_nullable operation.
//
// POST /test_request_string_ipv6_nullable
func (c *Client) TestRequestStringIpv6Nullable(ctx context.Context, request OptNilIPv6) (*Error, error) {
	res, err := c.sendTestRequestStringIpv6Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv6Nullable(ctx context.Context, request OptNilIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv6_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv6_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv6NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv6NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6NullableArray invokes test_request_string_ipv6_nullable_array operation.
//
// POST /test_request_string_ipv6_nullable_array
func (c *Client) TestRequestStringIpv6NullableArray(ctx context.Context, request []NilIPv6) (*Error, error) {
	res, err := c.sendTestRequestStringIpv6NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv6NullableArray(ctx context.Context, request []NilIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv6_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv6_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv6NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv6NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringIpv6NullableArrayArray invokes test_request_string_ipv6_nullable_array_array operation.
//
// POST /test_request_string_ipv6_nullable_array_array
func (c *Client) TestRequestStringIpv6NullableArrayArray(ctx context.Context, request [][]NilIPv6) (*Error, error) {
	res, err := c.sendTestRequestStringIpv6NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringIpv6NullableArrayArray(ctx context.Context, request [][]NilIPv6) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_ipv6_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_ipv6_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringIpv6NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringIpv6NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringNullable invokes test_request_string_nullable operation.
//
// POST /test_request_string_nullable
func (c *Client) TestRequestStringNullable(ctx context.Context, request OptNilString) (*Error, error) {
	res, err := c.sendTestRequestStringNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringNullable(ctx context.Context, request OptNilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringNullableArray invokes test_request_string_nullable_array operation.
//
// POST /test_request_string_nullable_array
func (c *Client) TestRequestStringNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestStringNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringNullableArrayArray invokes test_request_string_nullable_array_array operation.
//
// POST /test_request_string_nullable_array_array
func (c *Client) TestRequestStringNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestStringNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPassword invokes test_request_string_password operation.
//
// POST /test_request_string_password
func (c *Client) TestRequestStringPassword(ctx context.Context, request OptString) (*Error, error) {
	res, err := c.sendTestRequestStringPassword(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringPassword(ctx context.Context, request OptString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_password"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPassword",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_password"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringPasswordRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringPasswordResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordArray invokes test_request_string_password_array operation.
//
// POST /test_request_string_password_array
func (c *Client) TestRequestStringPasswordArray(ctx context.Context, request []string) (*Error, error) {
	res, err := c.sendTestRequestStringPasswordArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringPasswordArray(ctx context.Context, request []string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_password_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_password_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringPasswordArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringPasswordArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordArrayArray invokes test_request_string_password_array_array operation.
//
// POST /test_request_string_password_array_array
func (c *Client) TestRequestStringPasswordArrayArray(ctx context.Context, request [][]string) (*Error, error) {
	res, err := c.sendTestRequestStringPasswordArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringPasswordArrayArray(ctx context.Context, request [][]string) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_password_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_password_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringPasswordArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringPasswordArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordNullable invokes test_request_string_password_nullable operation.
//
// POST /test_request_string_password_nullable
func (c *Client) TestRequestStringPasswordNullable(ctx context.Context, request OptNilString) (*Error, error) {
	res, err := c.sendTestRequestStringPasswordNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringPasswordNullable(ctx context.Context, request OptNilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_password_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_password_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringPasswordNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringPasswordNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordNullableArray invokes test_request_string_password_nullable_array operation.
//
// POST /test_request_string_password_nullable_array
func (c *Client) TestRequestStringPasswordNullableArray(ctx context.Context, request []NilString) (*Error, error) {
	res, err := c.sendTestRequestStringPasswordNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringPasswordNullableArray(ctx context.Context, request []NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_password_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_password_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringPasswordNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringPasswordNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringPasswordNullableArrayArray invokes test_request_string_password_nullable_array_array operation.
//
// POST /test_request_string_password_nullable_array_array
func (c *Client) TestRequestStringPasswordNullableArrayArray(ctx context.Context, request [][]NilString) (*Error, error) {
	res, err := c.sendTestRequestStringPasswordNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringPasswordNullableArrayArray(ctx context.Context, request [][]NilString) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_password_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_password_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringPasswordNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringPasswordNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTime invokes test_request_string_time operation.
//
// POST /test_request_string_time
func (c *Client) TestRequestStringTime(ctx context.Context, request OptTime) (*Error, error) {
	res, err := c.sendTestRequestStringTime(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringTime(ctx context.Context, request OptTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_time"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTime",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_time"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringTimeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringTimeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeArray invokes test_request_string_time_array operation.
//
// POST /test_request_string_time_array
func (c *Client) TestRequestStringTimeArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringTimeArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringTimeArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_time_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_time_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringTimeArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringTimeArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeArrayArray invokes test_request_string_time_array_array operation.
//
// POST /test_request_string_time_array_array
func (c *Client) TestRequestStringTimeArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringTimeArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringTimeArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_time_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_time_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringTimeArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringTimeArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeNullable invokes test_request_string_time_nullable operation.
//
// POST /test_request_string_time_nullable
func (c *Client) TestRequestStringTimeNullable(ctx context.Context, request OptNilTime) (*Error, error) {
	res, err := c.sendTestRequestStringTimeNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringTimeNullable(ctx context.Context, request OptNilTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_time_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_time_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringTimeNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringTimeNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeNullableArray invokes test_request_string_time_nullable_array operation.
//
// POST /test_request_string_time_nullable_array
func (c *Client) TestRequestStringTimeNullableArray(ctx context.Context, request []NilTime) (*Error, error) {
	res, err := c.sendTestRequestStringTimeNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringTimeNullableArray(ctx context.Context, request []NilTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_time_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_time_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringTimeNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringTimeNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringTimeNullableArrayArray invokes test_request_string_time_nullable_array_array operation.
//
// POST /test_request_string_time_nullable_array_array
func (c *Client) TestRequestStringTimeNullableArrayArray(ctx context.Context, request [][]NilTime) (*Error, error) {
	res, err := c.sendTestRequestStringTimeNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringTimeNullableArrayArray(ctx context.Context, request [][]NilTime) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_time_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_time_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringTimeNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringTimeNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURI invokes test_request_string_uri operation.
//
// POST /test_request_string_uri
func (c *Client) TestRequestStringURI(ctx context.Context, request OptURI) (*Error, error) {
	res, err := c.sendTestRequestStringURI(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringURI(ctx context.Context, request OptURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uri"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURI",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uri"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringURIRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringURIResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURIArray invokes test_request_string_uri_array operation.
//
// POST /test_request_string_uri_array
func (c *Client) TestRequestStringURIArray(ctx context.Context, request []url.URL) (*Error, error) {
	res, err := c.sendTestRequestStringURIArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringURIArray(ctx context.Context, request []url.URL) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uri_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURIArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uri_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringURIArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringURIArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURIArrayArray invokes test_request_string_uri_array_array operation.
//
// POST /test_request_string_uri_array_array
func (c *Client) TestRequestStringURIArrayArray(ctx context.Context, request [][]url.URL) (*Error, error) {
	res, err := c.sendTestRequestStringURIArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringURIArrayArray(ctx context.Context, request [][]url.URL) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uri_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uri_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringURIArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringURIArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURINullable invokes test_request_string_uri_nullable operation.
//
// POST /test_request_string_uri_nullable
func (c *Client) TestRequestStringURINullable(ctx context.Context, request OptNilURI) (*Error, error) {
	res, err := c.sendTestRequestStringURINullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringURINullable(ctx context.Context, request OptNilURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uri_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURINullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uri_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringURINullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringURINullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURINullableArray invokes test_request_string_uri_nullable_array operation.
//
// POST /test_request_string_uri_nullable_array
func (c *Client) TestRequestStringURINullableArray(ctx context.Context, request []NilURI) (*Error, error) {
	res, err := c.sendTestRequestStringURINullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringURINullableArray(ctx context.Context, request []NilURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uri_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uri_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringURINullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringURINullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringURINullableArrayArray invokes test_request_string_uri_nullable_array_array operation.
//
// POST /test_request_string_uri_nullable_array_array
func (c *Client) TestRequestStringURINullableArrayArray(ctx context.Context, request [][]NilURI) (*Error, error) {
	res, err := c.sendTestRequestStringURINullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringURINullableArrayArray(ctx context.Context, request [][]NilURI) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uri_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uri_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringURINullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringURINullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUID invokes test_request_string_uuid operation.
//
// POST /test_request_string_uuid
func (c *Client) TestRequestStringUUID(ctx context.Context, request OptUUID) (*Error, error) {
	res, err := c.sendTestRequestStringUUID(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUUID(ctx context.Context, request OptUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uuid"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uuid"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUUIDRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUUIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDArray invokes test_request_string_uuid_array operation.
//
// POST /test_request_string_uuid_array
func (c *Client) TestRequestStringUUIDArray(ctx context.Context, request []uuid.UUID) (*Error, error) {
	res, err := c.sendTestRequestStringUUIDArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUUIDArray(ctx context.Context, request []uuid.UUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uuid_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uuid_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUUIDArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUUIDArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDArrayArray invokes test_request_string_uuid_array_array operation.
//
// POST /test_request_string_uuid_array_array
func (c *Client) TestRequestStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (*Error, error) {
	res, err := c.sendTestRequestStringUUIDArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUUIDArrayArray(ctx context.Context, request [][]uuid.UUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uuid_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uuid_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUUIDArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUUIDArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDNullable invokes test_request_string_uuid_nullable operation.
//
// POST /test_request_string_uuid_nullable
func (c *Client) TestRequestStringUUIDNullable(ctx context.Context, request OptNilUUID) (*Error, error) {
	res, err := c.sendTestRequestStringUUIDNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUUIDNullable(ctx context.Context, request OptNilUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uuid_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uuid_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUUIDNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUUIDNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDNullableArray invokes test_request_string_uuid_nullable_array operation.
//
// POST /test_request_string_uuid_nullable_array
func (c *Client) TestRequestStringUUIDNullableArray(ctx context.Context, request []NilUUID) (*Error, error) {
	res, err := c.sendTestRequestStringUUIDNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUUIDNullableArray(ctx context.Context, request []NilUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uuid_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uuid_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUUIDNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUUIDNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUUIDNullableArrayArray invokes test_request_string_uuid_nullable_array_array operation.
//
// POST /test_request_string_uuid_nullable_array_array
func (c *Client) TestRequestStringUUIDNullableArrayArray(ctx context.Context, request [][]NilUUID) (*Error, error) {
	res, err := c.sendTestRequestStringUUIDNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUUIDNullableArrayArray(ctx context.Context, request [][]NilUUID) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uuid_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uuid_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUUIDNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUUIDNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint invokes test_request_string_uint operation.
//
// POST /test_request_string_uint
func (c *Client) TestRequestStringUint(ctx context.Context, request OptStringUint) (*Error, error) {
	res, err := c.sendTestRequestStringUint(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint(ctx context.Context, request OptStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUintRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUintResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint16 invokes test_request_string_uint16 operation.
//
// POST /test_request_string_uint16
func (c *Client) TestRequestStringUint16(ctx context.Context, request OptStringUint16) (*Error, error) {
	res, err := c.sendTestRequestStringUint16(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint16(ctx context.Context, request OptStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint16Array invokes test_request_string_uint16_array operation.
//
// POST /test_request_string_uint16_array
func (c *Client) TestRequestStringUint16Array(ctx context.Context, request []uint16) (*Error, error) {
	res, err := c.sendTestRequestStringUint16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint16Array(ctx context.Context, request []uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint16ArrayArray invokes test_request_string_uint16_array_array operation.
//
// POST /test_request_string_uint16_array_array
func (c *Client) TestRequestStringUint16ArrayArray(ctx context.Context, request [][]uint16) (*Error, error) {
	res, err := c.sendTestRequestStringUint16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint16ArrayArray(ctx context.Context, request [][]uint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint16Nullable invokes test_request_string_uint16_nullable operation.
//
// POST /test_request_string_uint16_nullable
func (c *Client) TestRequestStringUint16Nullable(ctx context.Context, request OptNilStringUint16) (*Error, error) {
	res, err := c.sendTestRequestStringUint16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint16Nullable(ctx context.Context, request OptNilStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint16NullableArray invokes test_request_string_uint16_nullable_array operation.
//
// POST /test_request_string_uint16_nullable_array
func (c *Client) TestRequestStringUint16NullableArray(ctx context.Context, request []NilStringUint16) (*Error, error) {
	res, err := c.sendTestRequestStringUint16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint16NullableArray(ctx context.Context, request []NilStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint16NullableArrayArray invokes test_request_string_uint16_nullable_array_array operation.
//
// POST /test_request_string_uint16_nullable_array_array
func (c *Client) TestRequestStringUint16NullableArrayArray(ctx context.Context, request [][]NilStringUint16) (*Error, error) {
	res, err := c.sendTestRequestStringUint16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint16NullableArrayArray(ctx context.Context, request [][]NilStringUint16) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint32 invokes test_request_string_uint32 operation.
//
// POST /test_request_string_uint32
func (c *Client) TestRequestStringUint32(ctx context.Context, request OptStringUint32) (*Error, error) {
	res, err := c.sendTestRequestStringUint32(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint32(ctx context.Context, request OptStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint32Array invokes test_request_string_uint32_array operation.
//
// POST /test_request_string_uint32_array
func (c *Client) TestRequestStringUint32Array(ctx context.Context, request []uint32) (*Error, error) {
	res, err := c.sendTestRequestStringUint32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint32Array(ctx context.Context, request []uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint32ArrayArray invokes test_request_string_uint32_array_array operation.
//
// POST /test_request_string_uint32_array_array
func (c *Client) TestRequestStringUint32ArrayArray(ctx context.Context, request [][]uint32) (*Error, error) {
	res, err := c.sendTestRequestStringUint32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint32ArrayArray(ctx context.Context, request [][]uint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint32Nullable invokes test_request_string_uint32_nullable operation.
//
// POST /test_request_string_uint32_nullable
func (c *Client) TestRequestStringUint32Nullable(ctx context.Context, request OptNilStringUint32) (*Error, error) {
	res, err := c.sendTestRequestStringUint32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint32Nullable(ctx context.Context, request OptNilStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint32NullableArray invokes test_request_string_uint32_nullable_array operation.
//
// POST /test_request_string_uint32_nullable_array
func (c *Client) TestRequestStringUint32NullableArray(ctx context.Context, request []NilStringUint32) (*Error, error) {
	res, err := c.sendTestRequestStringUint32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint32NullableArray(ctx context.Context, request []NilStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint32NullableArrayArray invokes test_request_string_uint32_nullable_array_array operation.
//
// POST /test_request_string_uint32_nullable_array_array
func (c *Client) TestRequestStringUint32NullableArrayArray(ctx context.Context, request [][]NilStringUint32) (*Error, error) {
	res, err := c.sendTestRequestStringUint32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint32NullableArrayArray(ctx context.Context, request [][]NilStringUint32) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint64 invokes test_request_string_uint64 operation.
//
// POST /test_request_string_uint64
func (c *Client) TestRequestStringUint64(ctx context.Context, request OptStringUint64) (*Error, error) {
	res, err := c.sendTestRequestStringUint64(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint64(ctx context.Context, request OptStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint64Array invokes test_request_string_uint64_array operation.
//
// POST /test_request_string_uint64_array
func (c *Client) TestRequestStringUint64Array(ctx context.Context, request []uint64) (*Error, error) {
	res, err := c.sendTestRequestStringUint64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint64Array(ctx context.Context, request []uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint64ArrayArray invokes test_request_string_uint64_array_array operation.
//
// POST /test_request_string_uint64_array_array
func (c *Client) TestRequestStringUint64ArrayArray(ctx context.Context, request [][]uint64) (*Error, error) {
	res, err := c.sendTestRequestStringUint64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint64ArrayArray(ctx context.Context, request [][]uint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint64Nullable invokes test_request_string_uint64_nullable operation.
//
// POST /test_request_string_uint64_nullable
func (c *Client) TestRequestStringUint64Nullable(ctx context.Context, request OptNilStringUint64) (*Error, error) {
	res, err := c.sendTestRequestStringUint64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint64Nullable(ctx context.Context, request OptNilStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint64NullableArray invokes test_request_string_uint64_nullable_array operation.
//
// POST /test_request_string_uint64_nullable_array
func (c *Client) TestRequestStringUint64NullableArray(ctx context.Context, request []NilStringUint64) (*Error, error) {
	res, err := c.sendTestRequestStringUint64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint64NullableArray(ctx context.Context, request []NilStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint64NullableArrayArray invokes test_request_string_uint64_nullable_array_array operation.
//
// POST /test_request_string_uint64_nullable_array_array
func (c *Client) TestRequestStringUint64NullableArrayArray(ctx context.Context, request [][]NilStringUint64) (*Error, error) {
	res, err := c.sendTestRequestStringUint64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint64NullableArrayArray(ctx context.Context, request [][]NilStringUint64) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint8 invokes test_request_string_uint8 operation.
//
// POST /test_request_string_uint8
func (c *Client) TestRequestStringUint8(ctx context.Context, request OptStringUint8) (*Error, error) {
	res, err := c.sendTestRequestStringUint8(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint8(ctx context.Context, request OptStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint8Array invokes test_request_string_uint8_array operation.
//
// POST /test_request_string_uint8_array
func (c *Client) TestRequestStringUint8Array(ctx context.Context, request []uint8) (*Error, error) {
	res, err := c.sendTestRequestStringUint8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint8Array(ctx context.Context, request []uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint8ArrayArray invokes test_request_string_uint8_array_array operation.
//
// POST /test_request_string_uint8_array_array
func (c *Client) TestRequestStringUint8ArrayArray(ctx context.Context, request [][]uint8) (*Error, error) {
	res, err := c.sendTestRequestStringUint8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint8ArrayArray(ctx context.Context, request [][]uint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint8Nullable invokes test_request_string_uint8_nullable operation.
//
// POST /test_request_string_uint8_nullable
func (c *Client) TestRequestStringUint8Nullable(ctx context.Context, request OptNilStringUint8) (*Error, error) {
	res, err := c.sendTestRequestStringUint8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint8Nullable(ctx context.Context, request OptNilStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint8NullableArray invokes test_request_string_uint8_nullable_array operation.
//
// POST /test_request_string_uint8_nullable_array
func (c *Client) TestRequestStringUint8NullableArray(ctx context.Context, request []NilStringUint8) (*Error, error) {
	res, err := c.sendTestRequestStringUint8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint8NullableArray(ctx context.Context, request []NilStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUint8NullableArrayArray invokes test_request_string_uint8_nullable_array_array operation.
//
// POST /test_request_string_uint8_nullable_array_array
func (c *Client) TestRequestStringUint8NullableArrayArray(ctx context.Context, request [][]NilStringUint8) (*Error, error) {
	res, err := c.sendTestRequestStringUint8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUint8NullableArrayArray(ctx context.Context, request [][]NilStringUint8) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUint8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUint8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUint8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUintArray invokes test_request_string_uint_array operation.
//
// POST /test_request_string_uint_array
func (c *Client) TestRequestStringUintArray(ctx context.Context, request []uint) (*Error, error) {
	res, err := c.sendTestRequestStringUintArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUintArray(ctx context.Context, request []uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUintArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUintArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUintArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUintArrayArray invokes test_request_string_uint_array_array operation.
//
// POST /test_request_string_uint_array_array
func (c *Client) TestRequestStringUintArrayArray(ctx context.Context, request [][]uint) (*Error, error) {
	res, err := c.sendTestRequestStringUintArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUintArrayArray(ctx context.Context, request [][]uint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUintArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUintArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUintArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUintNullable invokes test_request_string_uint_nullable operation.
//
// POST /test_request_string_uint_nullable
func (c *Client) TestRequestStringUintNullable(ctx context.Context, request OptNilStringUint) (*Error, error) {
	res, err := c.sendTestRequestStringUintNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUintNullable(ctx context.Context, request OptNilStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUintNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUintNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUintNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUintNullableArray invokes test_request_string_uint_nullable_array operation.
//
// POST /test_request_string_uint_nullable_array
func (c *Client) TestRequestStringUintNullableArray(ctx context.Context, request []NilStringUint) (*Error, error) {
	res, err := c.sendTestRequestStringUintNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUintNullableArray(ctx context.Context, request []NilStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUintNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUintNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUintNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUintNullableArrayArray invokes test_request_string_uint_nullable_array_array operation.
//
// POST /test_request_string_uint_nullable_array_array
func (c *Client) TestRequestStringUintNullableArrayArray(ctx context.Context, request [][]NilStringUint) (*Error, error) {
	res, err := c.sendTestRequestStringUintNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUintNullableArrayArray(ctx context.Context, request [][]NilStringUint) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uint_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_uint_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUintNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_uint_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUintNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUintNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnix invokes test_request_string_unix operation.
//
// POST /test_request_string_unix
func (c *Client) TestRequestStringUnix(ctx context.Context, request OptStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnix(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnix(ctx context.Context, request OptStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnix",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixArray invokes test_request_string_unix_array operation.
//
// POST /test_request_string_unix_array
func (c *Client) TestRequestStringUnixArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixArrayArray invokes test_request_string_unix_array_array operation.
//
// POST /test_request_string_unix_array_array
func (c *Client) TestRequestStringUnixArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicro invokes test_request_string_unix-micro operation.
//
// POST /test_request_string_unix-micro
func (c *Client) TestRequestStringUnixMicro(ctx context.Context, request OptStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMicro(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMicro(ctx context.Context, request OptStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-micro"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-micro"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMicroRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMicroResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroArray invokes test_request_string_unix-micro_array operation.
//
// POST /test_request_string_unix-micro_array
func (c *Client) TestRequestStringUnixMicroArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMicroArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMicroArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-micro_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-micro_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMicroArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMicroArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroArrayArray invokes test_request_string_unix-micro_array_array operation.
//
// POST /test_request_string_unix-micro_array_array
func (c *Client) TestRequestStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMicroArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMicroArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-micro_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-micro_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMicroArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMicroArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroNullable invokes test_request_string_unix-micro_nullable operation.
//
// POST /test_request_string_unix-micro_nullable
func (c *Client) TestRequestStringUnixMicroNullable(ctx context.Context, request OptNilStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMicroNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMicroNullable(ctx context.Context, request OptNilStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-micro_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-micro_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMicroNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMicroNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroNullableArray invokes test_request_string_unix-micro_nullable_array operation.
//
// POST /test_request_string_unix-micro_nullable_array
func (c *Client) TestRequestStringUnixMicroNullableArray(ctx context.Context, request []NilStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMicroNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMicroNullableArray(ctx context.Context, request []NilStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-micro_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-micro_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMicroNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMicroNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMicroNullableArrayArray invokes test_request_string_unix-micro_nullable_array_array operation.
//
// POST /test_request_string_unix-micro_nullable_array_array
func (c *Client) TestRequestStringUnixMicroNullableArrayArray(ctx context.Context, request [][]NilStringUnixMicro) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMicroNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMicroNullableArrayArray(ctx context.Context, request [][]NilStringUnixMicro) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-micro_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-micro_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMicroNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMicroNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilli invokes test_request_string_unix-milli operation.
//
// POST /test_request_string_unix-milli
func (c *Client) TestRequestStringUnixMilli(ctx context.Context, request OptStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMilli(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMilli(ctx context.Context, request OptStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-milli"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-milli"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMilliRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMilliResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliArray invokes test_request_string_unix-milli_array operation.
//
// POST /test_request_string_unix-milli_array
func (c *Client) TestRequestStringUnixMilliArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMilliArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMilliArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-milli_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-milli_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMilliArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMilliArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliArrayArray invokes test_request_string_unix-milli_array_array operation.
//
// POST /test_request_string_unix-milli_array_array
func (c *Client) TestRequestStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMilliArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMilliArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-milli_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-milli_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMilliArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMilliArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliNullable invokes test_request_string_unix-milli_nullable operation.
//
// POST /test_request_string_unix-milli_nullable
func (c *Client) TestRequestStringUnixMilliNullable(ctx context.Context, request OptNilStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMilliNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMilliNullable(ctx context.Context, request OptNilStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-milli_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-milli_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMilliNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMilliNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliNullableArray invokes test_request_string_unix-milli_nullable_array operation.
//
// POST /test_request_string_unix-milli_nullable_array
func (c *Client) TestRequestStringUnixMilliNullableArray(ctx context.Context, request []NilStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMilliNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMilliNullableArray(ctx context.Context, request []NilStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-milli_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-milli_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMilliNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMilliNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixMilliNullableArrayArray invokes test_request_string_unix-milli_nullable_array_array operation.
//
// POST /test_request_string_unix-milli_nullable_array_array
func (c *Client) TestRequestStringUnixMilliNullableArrayArray(ctx context.Context, request [][]NilStringUnixMilli) (*Error, error) {
	res, err := c.sendTestRequestStringUnixMilliNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixMilliNullableArrayArray(ctx context.Context, request [][]NilStringUnixMilli) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-milli_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-milli_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixMilliNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixMilliNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNano invokes test_request_string_unix-nano operation.
//
// POST /test_request_string_unix-nano
func (c *Client) TestRequestStringUnixNano(ctx context.Context, request OptStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNano(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNano(ctx context.Context, request OptStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-nano"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-nano"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNanoRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNanoResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoArray invokes test_request_string_unix-nano_array operation.
//
// POST /test_request_string_unix-nano_array
func (c *Client) TestRequestStringUnixNanoArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNanoArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNanoArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-nano_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-nano_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNanoArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNanoArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoArrayArray invokes test_request_string_unix-nano_array_array operation.
//
// POST /test_request_string_unix-nano_array_array
func (c *Client) TestRequestStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNanoArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNanoArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-nano_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-nano_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNanoArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNanoArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoNullable invokes test_request_string_unix-nano_nullable operation.
//
// POST /test_request_string_unix-nano_nullable
func (c *Client) TestRequestStringUnixNanoNullable(ctx context.Context, request OptNilStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNanoNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNanoNullable(ctx context.Context, request OptNilStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-nano_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-nano_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNanoNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNanoNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoNullableArray invokes test_request_string_unix-nano_nullable_array operation.
//
// POST /test_request_string_unix-nano_nullable_array
func (c *Client) TestRequestStringUnixNanoNullableArray(ctx context.Context, request []NilStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNanoNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNanoNullableArray(ctx context.Context, request []NilStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-nano_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-nano_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNanoNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNanoNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNanoNullableArrayArray invokes test_request_string_unix-nano_nullable_array_array operation.
//
// POST /test_request_string_unix-nano_nullable_array_array
func (c *Client) TestRequestStringUnixNanoNullableArrayArray(ctx context.Context, request [][]NilStringUnixNano) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNanoNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNanoNullableArrayArray(ctx context.Context, request [][]NilStringUnixNano) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-nano_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-nano_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNanoNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNanoNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNullable invokes test_request_string_unix_nullable operation.
//
// POST /test_request_string_unix_nullable
func (c *Client) TestRequestStringUnixNullable(ctx context.Context, request OptNilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNullable(ctx context.Context, request OptNilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNullableArray invokes test_request_string_unix_nullable_array operation.
//
// POST /test_request_string_unix_nullable_array
func (c *Client) TestRequestStringUnixNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNullableArray(ctx context.Context, request []NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixNullableArrayArray invokes test_request_string_unix_nullable_array_array operation.
//
// POST /test_request_string_unix_nullable_array_array
func (c *Client) TestRequestStringUnixNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSeconds invokes test_request_string_unix-seconds operation.
//
// POST /test_request_string_unix-seconds
func (c *Client) TestRequestStringUnixSeconds(ctx context.Context, request OptStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixSeconds(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixSeconds(ctx context.Context, request OptStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-seconds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-seconds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixSecondsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixSecondsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsArray invokes test_request_string_unix-seconds_array operation.
//
// POST /test_request_string_unix-seconds_array
func (c *Client) TestRequestStringUnixSecondsArray(ctx context.Context, request []time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixSecondsArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixSecondsArray(ctx context.Context, request []time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-seconds_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-seconds_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixSecondsArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixSecondsArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsArrayArray invokes test_request_string_unix-seconds_array_array operation.
//
// POST /test_request_string_unix-seconds_array_array
func (c *Client) TestRequestStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (*Error, error) {
	res, err := c.sendTestRequestStringUnixSecondsArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixSecondsArrayArray(ctx context.Context, request [][]time.Time) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-seconds_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-seconds_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixSecondsArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixSecondsArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsNullable invokes test_request_string_unix-seconds_nullable operation.
//
// POST /test_request_string_unix-seconds_nullable
func (c *Client) TestRequestStringUnixSecondsNullable(ctx context.Context, request OptNilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixSecondsNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixSecondsNullable(ctx context.Context, request OptNilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-seconds_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-seconds_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixSecondsNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixSecondsNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsNullableArray invokes test_request_string_unix-seconds_nullable_array operation.
//
// POST /test_request_string_unix-seconds_nullable_array
func (c *Client) TestRequestStringUnixSecondsNullableArray(ctx context.Context, request []NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixSecondsNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixSecondsNullableArray(ctx context.Context, request []NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-seconds_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-seconds_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixSecondsNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixSecondsNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestRequestStringUnixSecondsNullableArrayArray invokes test_request_string_unix-seconds_nullable_array_array operation.
//
// POST /test_request_string_unix-seconds_nullable_array_array
func (c *Client) TestRequestStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (*Error, error) {
	res, err := c.sendTestRequestStringUnixSecondsNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestRequestStringUnixSecondsNullableArrayArray(ctx context.Context, request [][]NilStringUnixSeconds) (res *Error, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_request_string_unix-seconds_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestRequestStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_request_string_unix-seconds_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestRequestStringUnixSecondsNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestRequestStringUnixSecondsNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseAny invokes test_response_Any operation.
//
// POST /test_response_Any
func (c *Client) TestResponseAny(ctx context.Context, request string) (jx.Raw, error) {
	res, err := c.sendTestResponseAny(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseAny(ctx context.Context, request string) (res jx.Raw, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_Any"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_Any"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseAny",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_Any"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseAnyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseAnyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBoolean invokes test_response_boolean operation.
//
// POST /test_response_boolean
func (c *Client) TestResponseBoolean(ctx context.Context, request string) (bool, error) {
	res, err := c.sendTestResponseBoolean(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseBoolean(ctx context.Context, request string) (res bool, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_boolean"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBoolean",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_boolean"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseBooleanRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseBooleanResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanArray invokes test_response_boolean_array operation.
//
// POST /test_response_boolean_array
func (c *Client) TestResponseBooleanArray(ctx context.Context, request string) ([]bool, error) {
	res, err := c.sendTestResponseBooleanArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseBooleanArray(ctx context.Context, request string) (res []bool, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_boolean_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_boolean_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseBooleanArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseBooleanArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanArrayArray invokes test_response_boolean_array_array operation.
//
// POST /test_response_boolean_array_array
func (c *Client) TestResponseBooleanArrayArray(ctx context.Context, request string) ([][]bool, error) {
	res, err := c.sendTestResponseBooleanArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseBooleanArrayArray(ctx context.Context, request string) (res [][]bool, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_boolean_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_boolean_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseBooleanArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseBooleanArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanNullable invokes test_response_boolean_nullable operation.
//
// POST /test_response_boolean_nullable
func (c *Client) TestResponseBooleanNullable(ctx context.Context, request string) (NilBool, error) {
	res, err := c.sendTestResponseBooleanNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseBooleanNullable(ctx context.Context, request string) (res NilBool, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_boolean_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_boolean_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseBooleanNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseBooleanNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanNullableArray invokes test_response_boolean_nullable_array operation.
//
// POST /test_response_boolean_nullable_array
func (c *Client) TestResponseBooleanNullableArray(ctx context.Context, request string) ([]NilBool, error) {
	res, err := c.sendTestResponseBooleanNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseBooleanNullableArray(ctx context.Context, request string) (res []NilBool, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_boolean_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_boolean_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseBooleanNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseBooleanNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseBooleanNullableArrayArray invokes test_response_boolean_nullable_array_array operation.
//
// POST /test_response_boolean_nullable_array_array
func (c *Client) TestResponseBooleanNullableArrayArray(ctx context.Context, request string) ([][]NilBool, error) {
	res, err := c.sendTestResponseBooleanNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseBooleanNullableArrayArray(ctx context.Context, request string) (res [][]NilBool, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_boolean_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_boolean_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseBooleanNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseBooleanNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseEmptyStruct invokes test_response_EmptyStruct operation.
//
// POST /test_response_EmptyStruct
func (c *Client) TestResponseEmptyStruct(ctx context.Context, request string) error {
	_, err := c.sendTestResponseEmptyStruct(ctx, request)
	return err
}

func (c *Client) sendTestResponseEmptyStruct(ctx context.Context, request string) (res *TestResponseEmptyStructOK, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_EmptyStruct"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_EmptyStruct"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_EmptyStruct"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseEmptyStructRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseEmptyStructResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseFormatTest invokes test_response_FormatTest operation.
//
// POST /test_response_FormatTest
func (c *Client) TestResponseFormatTest(ctx context.Context, request string) (*TestResponseFormatTestOK, error) {
	res, err := c.sendTestResponseFormatTest(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseFormatTest(ctx context.Context, request string) (res *TestResponseFormatTestOK, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_FormatTest"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_FormatTest"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseFormatTest",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_FormatTest"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseFormatTestRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseFormatTestResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseInteger invokes test_response_integer operation.
//
// POST /test_response_integer
func (c *Client) TestResponseInteger(ctx context.Context, request string) (int, error) {
	res, err := c.sendTestResponseInteger(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseInteger(ctx context.Context, request string) (res int, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseInteger",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerArray invokes test_response_integer_array operation.
//
// POST /test_response_integer_array
func (c *Client) TestResponseIntegerArray(ctx context.Context, request string) ([]int, error) {
	res, err := c.sendTestResponseIntegerArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerArray(ctx context.Context, request string) (res []int, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerArrayArray invokes test_response_integer_array_array operation.
//
// POST /test_response_integer_array_array
func (c *Client) TestResponseIntegerArrayArray(ctx context.Context, request string) ([][]int, error) {
	res, err := c.sendTestResponseIntegerArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerArrayArray(ctx context.Context, request string) (res [][]int, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt16 invokes test_response_integer_int16 operation.
//
// POST /test_response_integer_int16
func (c *Client) TestResponseIntegerInt16(ctx context.Context, request string) (int16, error) {
	res, err := c.sendTestResponseIntegerInt16(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt16(ctx context.Context, request string) (res int16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt16Array invokes test_response_integer_int16_array operation.
//
// POST /test_response_integer_int16_array
func (c *Client) TestResponseIntegerInt16Array(ctx context.Context, request string) ([]int16, error) {
	res, err := c.sendTestResponseIntegerInt16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt16Array(ctx context.Context, request string) (res []int16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt16ArrayArray invokes test_response_integer_int16_array_array operation.
//
// POST /test_response_integer_int16_array_array
func (c *Client) TestResponseIntegerInt16ArrayArray(ctx context.Context, request string) ([][]int16, error) {
	res, err := c.sendTestResponseIntegerInt16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt16ArrayArray(ctx context.Context, request string) (res [][]int16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt16Nullable invokes test_response_integer_int16_nullable operation.
//
// POST /test_response_integer_int16_nullable
func (c *Client) TestResponseIntegerInt16Nullable(ctx context.Context, request string) (NilInt16, error) {
	res, err := c.sendTestResponseIntegerInt16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt16Nullable(ctx context.Context, request string) (res NilInt16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt16NullableArray invokes test_response_integer_int16_nullable_array operation.
//
// POST /test_response_integer_int16_nullable_array
func (c *Client) TestResponseIntegerInt16NullableArray(ctx context.Context, request string) ([]NilInt16, error) {
	res, err := c.sendTestResponseIntegerInt16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt16NullableArray(ctx context.Context, request string) (res []NilInt16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt16NullableArrayArray invokes test_response_integer_int16_nullable_array_array operation.
//
// POST /test_response_integer_int16_nullable_array_array
func (c *Client) TestResponseIntegerInt16NullableArrayArray(ctx context.Context, request string) ([][]NilInt16, error) {
	res, err := c.sendTestResponseIntegerInt16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt16NullableArrayArray(ctx context.Context, request string) (res [][]NilInt16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32 invokes test_response_integer_int32 operation.
//
// POST /test_response_integer_int32
func (c *Client) TestResponseIntegerInt32(ctx context.Context, request string) (int32, error) {
	res, err := c.sendTestResponseIntegerInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt32(ctx context.Context, request string) (res int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32Array invokes test_response_integer_int32_array operation.
//
// POST /test_response_integer_int32_array
func (c *Client) TestResponseIntegerInt32Array(ctx context.Context, request string) ([]int32, error) {
	res, err := c.sendTestResponseIntegerInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt32Array(ctx context.Context, request string) (res []int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32ArrayArray invokes test_response_integer_int32_array_array operation.
//
// POST /test_response_integer_int32_array_array
func (c *Client) TestResponseIntegerInt32ArrayArray(ctx context.Context, request string) ([][]int32, error) {
	res, err := c.sendTestResponseIntegerInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt32ArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32Nullable invokes test_response_integer_int32_nullable operation.
//
// POST /test_response_integer_int32_nullable
func (c *Client) TestResponseIntegerInt32Nullable(ctx context.Context, request string) (NilInt32, error) {
	res, err := c.sendTestResponseIntegerInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt32Nullable(ctx context.Context, request string) (res NilInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32NullableArray invokes test_response_integer_int32_nullable_array operation.
//
// POST /test_response_integer_int32_nullable_array
func (c *Client) TestResponseIntegerInt32NullableArray(ctx context.Context, request string) ([]NilInt32, error) {
	res, err := c.sendTestResponseIntegerInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt32NullableArray(ctx context.Context, request string) (res []NilInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt32NullableArrayArray invokes test_response_integer_int32_nullable_array_array operation.
//
// POST /test_response_integer_int32_nullable_array_array
func (c *Client) TestResponseIntegerInt32NullableArrayArray(ctx context.Context, request string) ([][]NilInt32, error) {
	res, err := c.sendTestResponseIntegerInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt32NullableArrayArray(ctx context.Context, request string) (res [][]NilInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64 invokes test_response_integer_int64 operation.
//
// POST /test_response_integer_int64
func (c *Client) TestResponseIntegerInt64(ctx context.Context, request string) (int64, error) {
	res, err := c.sendTestResponseIntegerInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt64(ctx context.Context, request string) (res int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64Array invokes test_response_integer_int64_array operation.
//
// POST /test_response_integer_int64_array
func (c *Client) TestResponseIntegerInt64Array(ctx context.Context, request string) ([]int64, error) {
	res, err := c.sendTestResponseIntegerInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt64Array(ctx context.Context, request string) (res []int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64ArrayArray invokes test_response_integer_int64_array_array operation.
//
// POST /test_response_integer_int64_array_array
func (c *Client) TestResponseIntegerInt64ArrayArray(ctx context.Context, request string) ([][]int64, error) {
	res, err := c.sendTestResponseIntegerInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt64ArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64Nullable invokes test_response_integer_int64_nullable operation.
//
// POST /test_response_integer_int64_nullable
func (c *Client) TestResponseIntegerInt64Nullable(ctx context.Context, request string) (NilInt64, error) {
	res, err := c.sendTestResponseIntegerInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt64Nullable(ctx context.Context, request string) (res NilInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64NullableArray invokes test_response_integer_int64_nullable_array operation.
//
// POST /test_response_integer_int64_nullable_array
func (c *Client) TestResponseIntegerInt64NullableArray(ctx context.Context, request string) ([]NilInt64, error) {
	res, err := c.sendTestResponseIntegerInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt64NullableArray(ctx context.Context, request string) (res []NilInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt64NullableArrayArray invokes test_response_integer_int64_nullable_array_array operation.
//
// POST /test_response_integer_int64_nullable_array_array
func (c *Client) TestResponseIntegerInt64NullableArrayArray(ctx context.Context, request string) ([][]NilInt64, error) {
	res, err := c.sendTestResponseIntegerInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt64NullableArrayArray(ctx context.Context, request string) (res [][]NilInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt8 invokes test_response_integer_int8 operation.
//
// POST /test_response_integer_int8
func (c *Client) TestResponseIntegerInt8(ctx context.Context, request string) (int8, error) {
	res, err := c.sendTestResponseIntegerInt8(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt8(ctx context.Context, request string) (res int8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt8Array invokes test_response_integer_int8_array operation.
//
// POST /test_response_integer_int8_array
func (c *Client) TestResponseIntegerInt8Array(ctx context.Context, request string) ([]int8, error) {
	res, err := c.sendTestResponseIntegerInt8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt8Array(ctx context.Context, request string) (res []int8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt8ArrayArray invokes test_response_integer_int8_array_array operation.
//
// POST /test_response_integer_int8_array_array
func (c *Client) TestResponseIntegerInt8ArrayArray(ctx context.Context, request string) ([][]int8, error) {
	res, err := c.sendTestResponseIntegerInt8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt8ArrayArray(ctx context.Context, request string) (res [][]int8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt8Nullable invokes test_response_integer_int8_nullable operation.
//
// POST /test_response_integer_int8_nullable
func (c *Client) TestResponseIntegerInt8Nullable(ctx context.Context, request string) (NilInt8, error) {
	res, err := c.sendTestResponseIntegerInt8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt8Nullable(ctx context.Context, request string) (res NilInt8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt8NullableArray invokes test_response_integer_int8_nullable_array operation.
//
// POST /test_response_integer_int8_nullable_array
func (c *Client) TestResponseIntegerInt8NullableArray(ctx context.Context, request string) ([]NilInt8, error) {
	res, err := c.sendTestResponseIntegerInt8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt8NullableArray(ctx context.Context, request string) (res []NilInt8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerInt8NullableArrayArray invokes test_response_integer_int8_nullable_array_array operation.
//
// POST /test_response_integer_int8_nullable_array_array
func (c *Client) TestResponseIntegerInt8NullableArrayArray(ctx context.Context, request string) ([][]NilInt8, error) {
	res, err := c.sendTestResponseIntegerInt8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerInt8NullableArrayArray(ctx context.Context, request string) (res [][]NilInt8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_int8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerInt8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_int8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerInt8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerInt8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerNullable invokes test_response_integer_nullable operation.
//
// POST /test_response_integer_nullable
func (c *Client) TestResponseIntegerNullable(ctx context.Context, request string) (NilInt, error) {
	res, err := c.sendTestResponseIntegerNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerNullable(ctx context.Context, request string) (res NilInt, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerNullableArray invokes test_response_integer_nullable_array operation.
//
// POST /test_response_integer_nullable_array
func (c *Client) TestResponseIntegerNullableArray(ctx context.Context, request string) ([]NilInt, error) {
	res, err := c.sendTestResponseIntegerNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerNullableArray(ctx context.Context, request string) (res []NilInt, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerNullableArrayArray invokes test_response_integer_nullable_array_array operation.
//
// POST /test_response_integer_nullable_array_array
func (c *Client) TestResponseIntegerNullableArrayArray(ctx context.Context, request string) ([][]NilInt, error) {
	res, err := c.sendTestResponseIntegerNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerNullableArrayArray(ctx context.Context, request string) (res [][]NilInt, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint invokes test_response_integer_uint operation.
//
// POST /test_response_integer_uint
func (c *Client) TestResponseIntegerUint(ctx context.Context, request string) (uint, error) {
	res, err := c.sendTestResponseIntegerUint(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint(ctx context.Context, request string) (res uint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUintRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUintResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint16 invokes test_response_integer_uint16 operation.
//
// POST /test_response_integer_uint16
func (c *Client) TestResponseIntegerUint16(ctx context.Context, request string) (uint16, error) {
	res, err := c.sendTestResponseIntegerUint16(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint16(ctx context.Context, request string) (res uint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint16Array invokes test_response_integer_uint16_array operation.
//
// POST /test_response_integer_uint16_array
func (c *Client) TestResponseIntegerUint16Array(ctx context.Context, request string) ([]uint16, error) {
	res, err := c.sendTestResponseIntegerUint16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint16Array(ctx context.Context, request string) (res []uint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint16ArrayArray invokes test_response_integer_uint16_array_array operation.
//
// POST /test_response_integer_uint16_array_array
func (c *Client) TestResponseIntegerUint16ArrayArray(ctx context.Context, request string) ([][]uint16, error) {
	res, err := c.sendTestResponseIntegerUint16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint16ArrayArray(ctx context.Context, request string) (res [][]uint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint16Nullable invokes test_response_integer_uint16_nullable operation.
//
// POST /test_response_integer_uint16_nullable
func (c *Client) TestResponseIntegerUint16Nullable(ctx context.Context, request string) (NilUint16, error) {
	res, err := c.sendTestResponseIntegerUint16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint16Nullable(ctx context.Context, request string) (res NilUint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint16NullableArray invokes test_response_integer_uint16_nullable_array operation.
//
// POST /test_response_integer_uint16_nullable_array
func (c *Client) TestResponseIntegerUint16NullableArray(ctx context.Context, request string) ([]NilUint16, error) {
	res, err := c.sendTestResponseIntegerUint16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint16NullableArray(ctx context.Context, request string) (res []NilUint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint16NullableArrayArray invokes test_response_integer_uint16_nullable_array_array operation.
//
// POST /test_response_integer_uint16_nullable_array_array
func (c *Client) TestResponseIntegerUint16NullableArrayArray(ctx context.Context, request string) ([][]NilUint16, error) {
	res, err := c.sendTestResponseIntegerUint16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint16NullableArrayArray(ctx context.Context, request string) (res [][]NilUint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint32 invokes test_response_integer_uint32 operation.
//
// POST /test_response_integer_uint32
func (c *Client) TestResponseIntegerUint32(ctx context.Context, request string) (uint32, error) {
	res, err := c.sendTestResponseIntegerUint32(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint32(ctx context.Context, request string) (res uint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint32Array invokes test_response_integer_uint32_array operation.
//
// POST /test_response_integer_uint32_array
func (c *Client) TestResponseIntegerUint32Array(ctx context.Context, request string) ([]uint32, error) {
	res, err := c.sendTestResponseIntegerUint32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint32Array(ctx context.Context, request string) (res []uint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint32ArrayArray invokes test_response_integer_uint32_array_array operation.
//
// POST /test_response_integer_uint32_array_array
func (c *Client) TestResponseIntegerUint32ArrayArray(ctx context.Context, request string) ([][]uint32, error) {
	res, err := c.sendTestResponseIntegerUint32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint32ArrayArray(ctx context.Context, request string) (res [][]uint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint32Nullable invokes test_response_integer_uint32_nullable operation.
//
// POST /test_response_integer_uint32_nullable
func (c *Client) TestResponseIntegerUint32Nullable(ctx context.Context, request string) (NilUint32, error) {
	res, err := c.sendTestResponseIntegerUint32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint32Nullable(ctx context.Context, request string) (res NilUint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint32NullableArray invokes test_response_integer_uint32_nullable_array operation.
//
// POST /test_response_integer_uint32_nullable_array
func (c *Client) TestResponseIntegerUint32NullableArray(ctx context.Context, request string) ([]NilUint32, error) {
	res, err := c.sendTestResponseIntegerUint32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint32NullableArray(ctx context.Context, request string) (res []NilUint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint32NullableArrayArray invokes test_response_integer_uint32_nullable_array_array operation.
//
// POST /test_response_integer_uint32_nullable_array_array
func (c *Client) TestResponseIntegerUint32NullableArrayArray(ctx context.Context, request string) ([][]NilUint32, error) {
	res, err := c.sendTestResponseIntegerUint32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint32NullableArrayArray(ctx context.Context, request string) (res [][]NilUint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint64 invokes test_response_integer_uint64 operation.
//
// POST /test_response_integer_uint64
func (c *Client) TestResponseIntegerUint64(ctx context.Context, request string) (uint64, error) {
	res, err := c.sendTestResponseIntegerUint64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint64(ctx context.Context, request string) (res uint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint64Array invokes test_response_integer_uint64_array operation.
//
// POST /test_response_integer_uint64_array
func (c *Client) TestResponseIntegerUint64Array(ctx context.Context, request string) ([]uint64, error) {
	res, err := c.sendTestResponseIntegerUint64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint64Array(ctx context.Context, request string) (res []uint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint64ArrayArray invokes test_response_integer_uint64_array_array operation.
//
// POST /test_response_integer_uint64_array_array
func (c *Client) TestResponseIntegerUint64ArrayArray(ctx context.Context, request string) ([][]uint64, error) {
	res, err := c.sendTestResponseIntegerUint64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint64ArrayArray(ctx context.Context, request string) (res [][]uint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint64Nullable invokes test_response_integer_uint64_nullable operation.
//
// POST /test_response_integer_uint64_nullable
func (c *Client) TestResponseIntegerUint64Nullable(ctx context.Context, request string) (NilUint64, error) {
	res, err := c.sendTestResponseIntegerUint64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint64Nullable(ctx context.Context, request string) (res NilUint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint64NullableArray invokes test_response_integer_uint64_nullable_array operation.
//
// POST /test_response_integer_uint64_nullable_array
func (c *Client) TestResponseIntegerUint64NullableArray(ctx context.Context, request string) ([]NilUint64, error) {
	res, err := c.sendTestResponseIntegerUint64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint64NullableArray(ctx context.Context, request string) (res []NilUint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint64NullableArrayArray invokes test_response_integer_uint64_nullable_array_array operation.
//
// POST /test_response_integer_uint64_nullable_array_array
func (c *Client) TestResponseIntegerUint64NullableArrayArray(ctx context.Context, request string) ([][]NilUint64, error) {
	res, err := c.sendTestResponseIntegerUint64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint64NullableArrayArray(ctx context.Context, request string) (res [][]NilUint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint8 invokes test_response_integer_uint8 operation.
//
// POST /test_response_integer_uint8
func (c *Client) TestResponseIntegerUint8(ctx context.Context, request string) (uint8, error) {
	res, err := c.sendTestResponseIntegerUint8(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint8(ctx context.Context, request string) (res uint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint8Array invokes test_response_integer_uint8_array operation.
//
// POST /test_response_integer_uint8_array
func (c *Client) TestResponseIntegerUint8Array(ctx context.Context, request string) ([]uint8, error) {
	res, err := c.sendTestResponseIntegerUint8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint8Array(ctx context.Context, request string) (res []uint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint8ArrayArray invokes test_response_integer_uint8_array_array operation.
//
// POST /test_response_integer_uint8_array_array
func (c *Client) TestResponseIntegerUint8ArrayArray(ctx context.Context, request string) ([][]uint8, error) {
	res, err := c.sendTestResponseIntegerUint8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint8ArrayArray(ctx context.Context, request string) (res [][]uint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint8Nullable invokes test_response_integer_uint8_nullable operation.
//
// POST /test_response_integer_uint8_nullable
func (c *Client) TestResponseIntegerUint8Nullable(ctx context.Context, request string) (NilUint8, error) {
	res, err := c.sendTestResponseIntegerUint8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint8Nullable(ctx context.Context, request string) (res NilUint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint8NullableArray invokes test_response_integer_uint8_nullable_array operation.
//
// POST /test_response_integer_uint8_nullable_array
func (c *Client) TestResponseIntegerUint8NullableArray(ctx context.Context, request string) ([]NilUint8, error) {
	res, err := c.sendTestResponseIntegerUint8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint8NullableArray(ctx context.Context, request string) (res []NilUint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUint8NullableArrayArray invokes test_response_integer_uint8_nullable_array_array operation.
//
// POST /test_response_integer_uint8_nullable_array_array
func (c *Client) TestResponseIntegerUint8NullableArrayArray(ctx context.Context, request string) ([][]NilUint8, error) {
	res, err := c.sendTestResponseIntegerUint8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUint8NullableArrayArray(ctx context.Context, request string) (res [][]NilUint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUint8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUint8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUint8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUintArray invokes test_response_integer_uint_array operation.
//
// POST /test_response_integer_uint_array
func (c *Client) TestResponseIntegerUintArray(ctx context.Context, request string) ([]uint, error) {
	res, err := c.sendTestResponseIntegerUintArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUintArray(ctx context.Context, request string) (res []uint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUintArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUintArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUintArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUintArrayArray invokes test_response_integer_uint_array_array operation.
//
// POST /test_response_integer_uint_array_array
func (c *Client) TestResponseIntegerUintArrayArray(ctx context.Context, request string) ([][]uint, error) {
	res, err := c.sendTestResponseIntegerUintArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUintArrayArray(ctx context.Context, request string) (res [][]uint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUintArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUintArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUintArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUintNullable invokes test_response_integer_uint_nullable operation.
//
// POST /test_response_integer_uint_nullable
func (c *Client) TestResponseIntegerUintNullable(ctx context.Context, request string) (NilUint, error) {
	res, err := c.sendTestResponseIntegerUintNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUintNullable(ctx context.Context, request string) (res NilUint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUintNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUintNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUintNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUintNullableArray invokes test_response_integer_uint_nullable_array operation.
//
// POST /test_response_integer_uint_nullable_array
func (c *Client) TestResponseIntegerUintNullableArray(ctx context.Context, request string) ([]NilUint, error) {
	res, err := c.sendTestResponseIntegerUintNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUintNullableArray(ctx context.Context, request string) (res []NilUint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUintNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUintNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUintNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUintNullableArrayArray invokes test_response_integer_uint_nullable_array_array operation.
//
// POST /test_response_integer_uint_nullable_array_array
func (c *Client) TestResponseIntegerUintNullableArrayArray(ctx context.Context, request string) ([][]NilUint, error) {
	res, err := c.sendTestResponseIntegerUintNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUintNullableArrayArray(ctx context.Context, request string) (res [][]NilUint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_uint_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_uint_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUintNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_uint_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUintNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUintNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnix invokes test_response_integer_unix operation.
//
// POST /test_response_integer_unix
func (c *Client) TestResponseIntegerUnix(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseIntegerUnix(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnix(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnix",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixArray invokes test_response_integer_unix_array operation.
//
// POST /test_response_integer_unix_array
func (c *Client) TestResponseIntegerUnixArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixArrayArray invokes test_response_integer_unix_array_array operation.
//
// POST /test_response_integer_unix_array_array
func (c *Client) TestResponseIntegerUnixArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMicro invokes test_response_integer_unix-micro operation.
//
// POST /test_response_integer_unix-micro
func (c *Client) TestResponseIntegerUnixMicro(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixMicro(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMicro(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-micro"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-micro"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMicro",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-micro"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMicroRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMicroResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMicroArray invokes test_response_integer_unix-micro_array operation.
//
// POST /test_response_integer_unix-micro_array
func (c *Client) TestResponseIntegerUnixMicroArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixMicroArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMicroArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-micro_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-micro_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-micro_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMicroArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMicroArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMicroArrayArray invokes test_response_integer_unix-micro_array_array operation.
//
// POST /test_response_integer_unix-micro_array_array
func (c *Client) TestResponseIntegerUnixMicroArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixMicroArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMicroArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-micro_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-micro_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-micro_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMicroArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMicroArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMicroNullable invokes test_response_integer_unix-micro_nullable operation.
//
// POST /test_response_integer_unix-micro_nullable
func (c *Client) TestResponseIntegerUnixMicroNullable(ctx context.Context, request string) (NilUnixMicro, error) {
	res, err := c.sendTestResponseIntegerUnixMicroNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMicroNullable(ctx context.Context, request string) (res NilUnixMicro, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-micro_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-micro_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-micro_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMicroNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMicroNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMicroNullableArray invokes test_response_integer_unix-micro_nullable_array operation.
//
// POST /test_response_integer_unix-micro_nullable_array
func (c *Client) TestResponseIntegerUnixMicroNullableArray(ctx context.Context, request string) ([]NilUnixMicro, error) {
	res, err := c.sendTestResponseIntegerUnixMicroNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMicroNullableArray(ctx context.Context, request string) (res []NilUnixMicro, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-micro_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-micro_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-micro_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMicroNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMicroNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMicroNullableArrayArray invokes test_response_integer_unix-micro_nullable_array_array operation.
//
// POST /test_response_integer_unix-micro_nullable_array_array
func (c *Client) TestResponseIntegerUnixMicroNullableArrayArray(ctx context.Context, request string) ([][]NilUnixMicro, error) {
	res, err := c.sendTestResponseIntegerUnixMicroNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMicroNullableArrayArray(ctx context.Context, request string) (res [][]NilUnixMicro, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-micro_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-micro_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-micro_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMicroNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMicroNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMilli invokes test_response_integer_unix-milli operation.
//
// POST /test_response_integer_unix-milli
func (c *Client) TestResponseIntegerUnixMilli(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixMilli(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMilli(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-milli"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-milli"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMilli",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-milli"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMilliRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMilliResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMilliArray invokes test_response_integer_unix-milli_array operation.
//
// POST /test_response_integer_unix-milli_array
func (c *Client) TestResponseIntegerUnixMilliArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixMilliArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMilliArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-milli_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-milli_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-milli_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMilliArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMilliArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMilliArrayArray invokes test_response_integer_unix-milli_array_array operation.
//
// POST /test_response_integer_unix-milli_array_array
func (c *Client) TestResponseIntegerUnixMilliArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixMilliArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMilliArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-milli_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-milli_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-milli_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMilliArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMilliArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMilliNullable invokes test_response_integer_unix-milli_nullable operation.
//
// POST /test_response_integer_unix-milli_nullable
func (c *Client) TestResponseIntegerUnixMilliNullable(ctx context.Context, request string) (NilUnixMilli, error) {
	res, err := c.sendTestResponseIntegerUnixMilliNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMilliNullable(ctx context.Context, request string) (res NilUnixMilli, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-milli_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-milli_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-milli_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMilliNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMilliNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMilliNullableArray invokes test_response_integer_unix-milli_nullable_array operation.
//
// POST /test_response_integer_unix-milli_nullable_array
func (c *Client) TestResponseIntegerUnixMilliNullableArray(ctx context.Context, request string) ([]NilUnixMilli, error) {
	res, err := c.sendTestResponseIntegerUnixMilliNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMilliNullableArray(ctx context.Context, request string) (res []NilUnixMilli, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-milli_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-milli_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-milli_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMilliNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMilliNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixMilliNullableArrayArray invokes test_response_integer_unix-milli_nullable_array_array operation.
//
// POST /test_response_integer_unix-milli_nullable_array_array
func (c *Client) TestResponseIntegerUnixMilliNullableArrayArray(ctx context.Context, request string) ([][]NilUnixMilli, error) {
	res, err := c.sendTestResponseIntegerUnixMilliNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixMilliNullableArrayArray(ctx context.Context, request string) (res [][]NilUnixMilli, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-milli_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-milli_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-milli_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixMilliNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixMilliNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNano invokes test_response_integer_unix-nano operation.
//
// POST /test_response_integer_unix-nano
func (c *Client) TestResponseIntegerUnixNano(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixNano(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNano(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-nano"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-nano"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNano",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-nano"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNanoRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNanoResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNanoArray invokes test_response_integer_unix-nano_array operation.
//
// POST /test_response_integer_unix-nano_array
func (c *Client) TestResponseIntegerUnixNanoArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixNanoArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNanoArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-nano_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-nano_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-nano_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNanoArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNanoArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNanoArrayArray invokes test_response_integer_unix-nano_array_array operation.
//
// POST /test_response_integer_unix-nano_array_array
func (c *Client) TestResponseIntegerUnixNanoArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixNanoArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNanoArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-nano_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-nano_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-nano_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNanoArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNanoArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNanoNullable invokes test_response_integer_unix-nano_nullable operation.
//
// POST /test_response_integer_unix-nano_nullable
func (c *Client) TestResponseIntegerUnixNanoNullable(ctx context.Context, request string) (NilUnixNano, error) {
	res, err := c.sendTestResponseIntegerUnixNanoNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNanoNullable(ctx context.Context, request string) (res NilUnixNano, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-nano_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-nano_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-nano_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNanoNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNanoNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNanoNullableArray invokes test_response_integer_unix-nano_nullable_array operation.
//
// POST /test_response_integer_unix-nano_nullable_array
func (c *Client) TestResponseIntegerUnixNanoNullableArray(ctx context.Context, request string) ([]NilUnixNano, error) {
	res, err := c.sendTestResponseIntegerUnixNanoNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNanoNullableArray(ctx context.Context, request string) (res []NilUnixNano, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-nano_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-nano_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-nano_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNanoNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNanoNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNanoNullableArrayArray invokes test_response_integer_unix-nano_nullable_array_array operation.
//
// POST /test_response_integer_unix-nano_nullable_array_array
func (c *Client) TestResponseIntegerUnixNanoNullableArrayArray(ctx context.Context, request string) ([][]NilUnixNano, error) {
	res, err := c.sendTestResponseIntegerUnixNanoNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNanoNullableArrayArray(ctx context.Context, request string) (res [][]NilUnixNano, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-nano_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-nano_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-nano_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNanoNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNanoNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNullable invokes test_response_integer_unix_nullable operation.
//
// POST /test_response_integer_unix_nullable
func (c *Client) TestResponseIntegerUnixNullable(ctx context.Context, request string) (NilUnixSeconds, error) {
	res, err := c.sendTestResponseIntegerUnixNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNullable(ctx context.Context, request string) (res NilUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNullableArray invokes test_response_integer_unix_nullable_array operation.
//
// POST /test_response_integer_unix_nullable_array
func (c *Client) TestResponseIntegerUnixNullableArray(ctx context.Context, request string) ([]NilUnixSeconds, error) {
	res, err := c.sendTestResponseIntegerUnixNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNullableArray(ctx context.Context, request string) (res []NilUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixNullableArrayArray invokes test_response_integer_unix_nullable_array_array operation.
//
// POST /test_response_integer_unix_nullable_array_array
func (c *Client) TestResponseIntegerUnixNullableArrayArray(ctx context.Context, request string) ([][]NilUnixSeconds, error) {
	res, err := c.sendTestResponseIntegerUnixNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixNullableArrayArray(ctx context.Context, request string) (res [][]NilUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixSeconds invokes test_response_integer_unix-seconds operation.
//
// POST /test_response_integer_unix-seconds
func (c *Client) TestResponseIntegerUnixSeconds(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixSeconds(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixSeconds(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-seconds"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-seconds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-seconds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixSecondsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixSecondsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixSecondsArray invokes test_response_integer_unix-seconds_array operation.
//
// POST /test_response_integer_unix-seconds_array
func (c *Client) TestResponseIntegerUnixSecondsArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixSecondsArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixSecondsArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-seconds_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-seconds_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-seconds_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixSecondsArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixSecondsArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixSecondsArrayArray invokes test_response_integer_unix-seconds_array_array operation.
//
// POST /test_response_integer_unix-seconds_array_array
func (c *Client) TestResponseIntegerUnixSecondsArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseIntegerUnixSecondsArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixSecondsArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-seconds_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-seconds_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-seconds_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixSecondsArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixSecondsArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixSecondsNullable invokes test_response_integer_unix-seconds_nullable operation.
//
// POST /test_response_integer_unix-seconds_nullable
func (c *Client) TestResponseIntegerUnixSecondsNullable(ctx context.Context, request string) (NilUnixSeconds, error) {
	res, err := c.sendTestResponseIntegerUnixSecondsNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixSecondsNullable(ctx context.Context, request string) (res NilUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-seconds_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-seconds_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-seconds_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixSecondsNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixSecondsNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixSecondsNullableArray invokes test_response_integer_unix-seconds_nullable_array operation.
//
// POST /test_response_integer_unix-seconds_nullable_array
func (c *Client) TestResponseIntegerUnixSecondsNullableArray(ctx context.Context, request string) ([]NilUnixSeconds, error) {
	res, err := c.sendTestResponseIntegerUnixSecondsNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixSecondsNullableArray(ctx context.Context, request string) (res []NilUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-seconds_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-seconds_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-seconds_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixSecondsNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixSecondsNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseIntegerUnixSecondsNullableArrayArray invokes test_response_integer_unix-seconds_nullable_array_array operation.
//
// POST /test_response_integer_unix-seconds_nullable_array_array
func (c *Client) TestResponseIntegerUnixSecondsNullableArrayArray(ctx context.Context, request string) ([][]NilUnixSeconds, error) {
	res, err := c.sendTestResponseIntegerUnixSecondsNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseIntegerUnixSecondsNullableArrayArray(ctx context.Context, request string) (res [][]NilUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_unix-seconds_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_integer_unix-seconds_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseIntegerUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_integer_unix-seconds_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseIntegerUnixSecondsNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseIntegerUnixSecondsNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNull invokes test_response_null operation.
//
// POST /test_response_null
func (c *Client) TestResponseNull(ctx context.Context, request string) (struct{}, error) {
	res, err := c.sendTestResponseNull(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNull(ctx context.Context, request string) (res struct{}, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_null"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNull",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_null"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNullRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNullResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullArray invokes test_response_null_array operation.
//
// POST /test_response_null_array
func (c *Client) TestResponseNullArray(ctx context.Context, request string) ([]struct{}, error) {
	res, err := c.sendTestResponseNullArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNullArray(ctx context.Context, request string) (res []struct{}, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_null_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_null_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNullArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNullArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullArrayArray invokes test_response_null_array_array operation.
//
// POST /test_response_null_array_array
func (c *Client) TestResponseNullArrayArray(ctx context.Context, request string) ([][]struct{}, error) {
	res, err := c.sendTestResponseNullArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNullArrayArray(ctx context.Context, request string) (res [][]struct{}, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_null_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_null_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNullArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNullArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullNullable invokes test_response_null_nullable operation.
//
// POST /test_response_null_nullable
func (c *Client) TestResponseNullNullable(ctx context.Context, request string) (struct{}, error) {
	res, err := c.sendTestResponseNullNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNullNullable(ctx context.Context, request string) (res struct{}, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_null_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_null_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNullNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNullNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullNullableArray invokes test_response_null_nullable_array operation.
//
// POST /test_response_null_nullable_array
func (c *Client) TestResponseNullNullableArray(ctx context.Context, request string) ([]struct{}, error) {
	res, err := c.sendTestResponseNullNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNullNullableArray(ctx context.Context, request string) (res []struct{}, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_null_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_null_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNullNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNullNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNullNullableArrayArray invokes test_response_null_nullable_array_array operation.
//
// POST /test_response_null_nullable_array_array
func (c *Client) TestResponseNullNullableArrayArray(ctx context.Context, request string) ([][]struct{}, error) {
	res, err := c.sendTestResponseNullNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNullNullableArrayArray(ctx context.Context, request string) (res [][]struct{}, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_null_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_null_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNullNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNullNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumber invokes test_response_number operation.
//
// POST /test_response_number
func (c *Client) TestResponseNumber(ctx context.Context, request string) (float64, error) {
	res, err := c.sendTestResponseNumber(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumber(ctx context.Context, request string) (res float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumber",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberArray invokes test_response_number_array operation.
//
// POST /test_response_number_array
func (c *Client) TestResponseNumberArray(ctx context.Context, request string) ([]float64, error) {
	res, err := c.sendTestResponseNumberArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberArray(ctx context.Context, request string) (res []float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberArrayArray invokes test_response_number_array_array operation.
//
// POST /test_response_number_array_array
func (c *Client) TestResponseNumberArrayArray(ctx context.Context, request string) ([][]float64, error) {
	res, err := c.sendTestResponseNumberArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDouble invokes test_response_number_double operation.
//
// POST /test_response_number_double
func (c *Client) TestResponseNumberDouble(ctx context.Context, request string) (float64, error) {
	res, err := c.sendTestResponseNumberDouble(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberDouble(ctx context.Context, request string) (res float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_double"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDouble",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_double"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberDoubleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberDoubleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleArray invokes test_response_number_double_array operation.
//
// POST /test_response_number_double_array
func (c *Client) TestResponseNumberDoubleArray(ctx context.Context, request string) ([]float64, error) {
	res, err := c.sendTestResponseNumberDoubleArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberDoubleArray(ctx context.Context, request string) (res []float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_double_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_double_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberDoubleArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberDoubleArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleArrayArray invokes test_response_number_double_array_array operation.
//
// POST /test_response_number_double_array_array
func (c *Client) TestResponseNumberDoubleArrayArray(ctx context.Context, request string) ([][]float64, error) {
	res, err := c.sendTestResponseNumberDoubleArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberDoubleArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_double_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_double_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberDoubleArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberDoubleArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleNullable invokes test_response_number_double_nullable operation.
//
// POST /test_response_number_double_nullable
func (c *Client) TestResponseNumberDoubleNullable(ctx context.Context, request string) (NilFloat64, error) {
	res, err := c.sendTestResponseNumberDoubleNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberDoubleNullable(ctx context.Context, request string) (res NilFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_double_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_double_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberDoubleNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberDoubleNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleNullableArray invokes test_response_number_double_nullable_array operation.
//
// POST /test_response_number_double_nullable_array
func (c *Client) TestResponseNumberDoubleNullableArray(ctx context.Context, request string) ([]NilFloat64, error) {
	res, err := c.sendTestResponseNumberDoubleNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberDoubleNullableArray(ctx context.Context, request string) (res []NilFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_double_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_double_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberDoubleNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberDoubleNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberDoubleNullableArrayArray invokes test_response_number_double_nullable_array_array operation.
//
// POST /test_response_number_double_nullable_array_array
func (c *Client) TestResponseNumberDoubleNullableArrayArray(ctx context.Context, request string) ([][]NilFloat64, error) {
	res, err := c.sendTestResponseNumberDoubleNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberDoubleNullableArrayArray(ctx context.Context, request string) (res [][]NilFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_double_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_double_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberDoubleNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberDoubleNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloat invokes test_response_number_float operation.
//
// POST /test_response_number_float
func (c *Client) TestResponseNumberFloat(ctx context.Context, request string) (float32, error) {
	res, err := c.sendTestResponseNumberFloat(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberFloat(ctx context.Context, request string) (res float32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_float"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloat",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_float"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberFloatRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberFloatResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatArray invokes test_response_number_float_array operation.
//
// POST /test_response_number_float_array
func (c *Client) TestResponseNumberFloatArray(ctx context.Context, request string) ([]float32, error) {
	res, err := c.sendTestResponseNumberFloatArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberFloatArray(ctx context.Context, request string) (res []float32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_float_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_float_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberFloatArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberFloatArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatArrayArray invokes test_response_number_float_array_array operation.
//
// POST /test_response_number_float_array_array
func (c *Client) TestResponseNumberFloatArrayArray(ctx context.Context, request string) ([][]float32, error) {
	res, err := c.sendTestResponseNumberFloatArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberFloatArrayArray(ctx context.Context, request string) (res [][]float32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_float_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_float_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberFloatArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberFloatArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatNullable invokes test_response_number_float_nullable operation.
//
// POST /test_response_number_float_nullable
func (c *Client) TestResponseNumberFloatNullable(ctx context.Context, request string) (NilFloat32, error) {
	res, err := c.sendTestResponseNumberFloatNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberFloatNullable(ctx context.Context, request string) (res NilFloat32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_float_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_float_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberFloatNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberFloatNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatNullableArray invokes test_response_number_float_nullable_array operation.
//
// POST /test_response_number_float_nullable_array
func (c *Client) TestResponseNumberFloatNullableArray(ctx context.Context, request string) ([]NilFloat32, error) {
	res, err := c.sendTestResponseNumberFloatNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberFloatNullableArray(ctx context.Context, request string) (res []NilFloat32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_float_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_float_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberFloatNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberFloatNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberFloatNullableArrayArray invokes test_response_number_float_nullable_array_array operation.
//
// POST /test_response_number_float_nullable_array_array
func (c *Client) TestResponseNumberFloatNullableArrayArray(ctx context.Context, request string) ([][]NilFloat32, error) {
	res, err := c.sendTestResponseNumberFloatNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberFloatNullableArrayArray(ctx context.Context, request string) (res [][]NilFloat32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_float_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_float_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberFloatNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberFloatNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32 invokes test_response_number_int32 operation.
//
// POST /test_response_number_int32
func (c *Client) TestResponseNumberInt32(ctx context.Context, request string) (int32, error) {
	res, err := c.sendTestResponseNumberInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt32(ctx context.Context, request string) (res int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32Array invokes test_response_number_int32_array operation.
//
// POST /test_response_number_int32_array
func (c *Client) TestResponseNumberInt32Array(ctx context.Context, request string) ([]int32, error) {
	res, err := c.sendTestResponseNumberInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt32Array(ctx context.Context, request string) (res []int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32ArrayArray invokes test_response_number_int32_array_array operation.
//
// POST /test_response_number_int32_array_array
func (c *Client) TestResponseNumberInt32ArrayArray(ctx context.Context, request string) ([][]int32, error) {
	res, err := c.sendTestResponseNumberInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt32ArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32Nullable invokes test_response_number_int32_nullable operation.
//
// POST /test_response_number_int32_nullable
func (c *Client) TestResponseNumberInt32Nullable(ctx context.Context, request string) (NilInt32, error) {
	res, err := c.sendTestResponseNumberInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt32Nullable(ctx context.Context, request string) (res NilInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32NullableArray invokes test_response_number_int32_nullable_array operation.
//
// POST /test_response_number_int32_nullable_array
func (c *Client) TestResponseNumberInt32NullableArray(ctx context.Context, request string) ([]NilInt32, error) {
	res, err := c.sendTestResponseNumberInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt32NullableArray(ctx context.Context, request string) (res []NilInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt32NullableArrayArray invokes test_response_number_int32_nullable_array_array operation.
//
// POST /test_response_number_int32_nullable_array_array
func (c *Client) TestResponseNumberInt32NullableArrayArray(ctx context.Context, request string) ([][]NilInt32, error) {
	res, err := c.sendTestResponseNumberInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt32NullableArrayArray(ctx context.Context, request string) (res [][]NilInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64 invokes test_response_number_int64 operation.
//
// POST /test_response_number_int64
func (c *Client) TestResponseNumberInt64(ctx context.Context, request string) (int64, error) {
	res, err := c.sendTestResponseNumberInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt64(ctx context.Context, request string) (res int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64Array invokes test_response_number_int64_array operation.
//
// POST /test_response_number_int64_array
func (c *Client) TestResponseNumberInt64Array(ctx context.Context, request string) ([]int64, error) {
	res, err := c.sendTestResponseNumberInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt64Array(ctx context.Context, request string) (res []int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64ArrayArray invokes test_response_number_int64_array_array operation.
//
// POST /test_response_number_int64_array_array
func (c *Client) TestResponseNumberInt64ArrayArray(ctx context.Context, request string) ([][]int64, error) {
	res, err := c.sendTestResponseNumberInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt64ArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64Nullable invokes test_response_number_int64_nullable operation.
//
// POST /test_response_number_int64_nullable
func (c *Client) TestResponseNumberInt64Nullable(ctx context.Context, request string) (NilInt64, error) {
	res, err := c.sendTestResponseNumberInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt64Nullable(ctx context.Context, request string) (res NilInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64NullableArray invokes test_response_number_int64_nullable_array operation.
//
// POST /test_response_number_int64_nullable_array
func (c *Client) TestResponseNumberInt64NullableArray(ctx context.Context, request string) ([]NilInt64, error) {
	res, err := c.sendTestResponseNumberInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt64NullableArray(ctx context.Context, request string) (res []NilInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberInt64NullableArrayArray invokes test_response_number_int64_nullable_array_array operation.
//
// POST /test_response_number_int64_nullable_array_array
func (c *Client) TestResponseNumberInt64NullableArrayArray(ctx context.Context, request string) ([][]NilInt64, error) {
	res, err := c.sendTestResponseNumberInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberInt64NullableArrayArray(ctx context.Context, request string) (res [][]NilInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberNullable invokes test_response_number_nullable operation.
//
// POST /test_response_number_nullable
func (c *Client) TestResponseNumberNullable(ctx context.Context, request string) (NilFloat64, error) {
	res, err := c.sendTestResponseNumberNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberNullable(ctx context.Context, request string) (res NilFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberNullableArray invokes test_response_number_nullable_array operation.
//
// POST /test_response_number_nullable_array
func (c *Client) TestResponseNumberNullableArray(ctx context.Context, request string) ([]NilFloat64, error) {
	res, err := c.sendTestResponseNumberNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberNullableArray(ctx context.Context, request string) (res []NilFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseNumberNullableArrayArray invokes test_response_number_nullable_array_array operation.
//
// POST /test_response_number_nullable_array_array
func (c *Client) TestResponseNumberNullableArrayArray(ctx context.Context, request string) ([][]NilFloat64, error) {
	res, err := c.sendTestResponseNumberNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseNumberNullableArrayArray(ctx context.Context, request string) (res [][]NilFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_number_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_number_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseNumberNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseNumberNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseString invokes test_response_string operation.
//
// POST /test_response_string
func (c *Client) TestResponseString(ctx context.Context, request string) (string, error) {
	res, err := c.sendTestResponseString(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseString(ctx context.Context, request string) (res string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseString",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringArray invokes test_response_string_array operation.
//
// POST /test_response_string_array
func (c *Client) TestResponseStringArray(ctx context.Context, request string) ([]string, error) {
	res, err := c.sendTestResponseStringArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringArray(ctx context.Context, request string) (res []string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringArrayArray invokes test_response_string_array_array operation.
//
// POST /test_response_string_array_array
func (c *Client) TestResponseStringArrayArray(ctx context.Context, request string) ([][]string, error) {
	res, err := c.sendTestResponseStringArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBase64 invokes test_response_string_base64 operation.
//
// POST /test_response_string_base64
func (c *Client) TestResponseStringBase64(ctx context.Context, request string) ([]byte, error) {
	res, err := c.sendTestResponseStringBase64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBase64(ctx context.Context, request string) (res []byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_base64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_base64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBase64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_base64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBase64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBase64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBase64Array invokes test_response_string_base64_array operation.
//
// POST /test_response_string_base64_array
func (c *Client) TestResponseStringBase64Array(ctx context.Context, request string) ([][]byte, error) {
	res, err := c.sendTestResponseStringBase64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBase64Array(ctx context.Context, request string) (res [][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_base64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_base64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBase64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_base64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBase64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBase64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBase64ArrayArray invokes test_response_string_base64_array_array operation.
//
// POST /test_response_string_base64_array_array
func (c *Client) TestResponseStringBase64ArrayArray(ctx context.Context, request string) ([][][]byte, error) {
	res, err := c.sendTestResponseStringBase64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBase64ArrayArray(ctx context.Context, request string) (res [][][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_base64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_base64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBase64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_base64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBase64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBase64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBase64Nullable invokes test_response_string_base64_nullable operation.
//
// POST /test_response_string_base64_nullable
func (c *Client) TestResponseStringBase64Nullable(ctx context.Context, request string) ([]byte, error) {
	res, err := c.sendTestResponseStringBase64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBase64Nullable(ctx context.Context, request string) (res []byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_base64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_base64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBase64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_base64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBase64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBase64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBase64NullableArray invokes test_response_string_base64_nullable_array operation.
//
// POST /test_response_string_base64_nullable_array
func (c *Client) TestResponseStringBase64NullableArray(ctx context.Context, request string) ([][]byte, error) {
	res, err := c.sendTestResponseStringBase64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBase64NullableArray(ctx context.Context, request string) (res [][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_base64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_base64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBase64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_base64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBase64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBase64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBase64NullableArrayArray invokes test_response_string_base64_nullable_array_array operation.
//
// POST /test_response_string_base64_nullable_array_array
func (c *Client) TestResponseStringBase64NullableArrayArray(ctx context.Context, request string) ([][][]byte, error) {
	res, err := c.sendTestResponseStringBase64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBase64NullableArrayArray(ctx context.Context, request string) (res [][][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_base64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_base64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBase64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_base64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBase64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBase64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinary invokes test_response_string_binary operation.
//
// POST /test_response_string_binary
func (c *Client) TestResponseStringBinary(ctx context.Context, request string) (string, error) {
	res, err := c.sendTestResponseStringBinary(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBinary(ctx context.Context, request string) (res string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_binary"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinary",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_binary"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBinaryRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBinaryResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryArray invokes test_response_string_binary_array operation.
//
// POST /test_response_string_binary_array
func (c *Client) TestResponseStringBinaryArray(ctx context.Context, request string) ([]string, error) {
	res, err := c.sendTestResponseStringBinaryArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBinaryArray(ctx context.Context, request string) (res []string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_binary_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_binary_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBinaryArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBinaryArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryArrayArray invokes test_response_string_binary_array_array operation.
//
// POST /test_response_string_binary_array_array
func (c *Client) TestResponseStringBinaryArrayArray(ctx context.Context, request string) ([][]string, error) {
	res, err := c.sendTestResponseStringBinaryArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBinaryArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_binary_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_binary_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBinaryArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBinaryArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryNullable invokes test_response_string_binary_nullable operation.
//
// POST /test_response_string_binary_nullable
func (c *Client) TestResponseStringBinaryNullable(ctx context.Context, request string) (NilString, error) {
	res, err := c.sendTestResponseStringBinaryNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBinaryNullable(ctx context.Context, request string) (res NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_binary_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_binary_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBinaryNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBinaryNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryNullableArray invokes test_response_string_binary_nullable_array operation.
//
// POST /test_response_string_binary_nullable_array
func (c *Client) TestResponseStringBinaryNullableArray(ctx context.Context, request string) ([]NilString, error) {
	res, err := c.sendTestResponseStringBinaryNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBinaryNullableArray(ctx context.Context, request string) (res []NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_binary_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_binary_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBinaryNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBinaryNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringBinaryNullableArrayArray invokes test_response_string_binary_nullable_array_array operation.
//
// POST /test_response_string_binary_nullable_array_array
func (c *Client) TestResponseStringBinaryNullableArrayArray(ctx context.Context, request string) ([][]NilString, error) {
	res, err := c.sendTestResponseStringBinaryNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringBinaryNullableArrayArray(ctx context.Context, request string) (res [][]NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_binary_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_binary_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringBinaryNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringBinaryNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByte invokes test_response_string_byte operation.
//
// POST /test_response_string_byte
func (c *Client) TestResponseStringByte(ctx context.Context, request string) ([]byte, error) {
	res, err := c.sendTestResponseStringByte(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringByte(ctx context.Context, request string) (res []byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_byte"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByte",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_byte"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringByteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringByteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteArray invokes test_response_string_byte_array operation.
//
// POST /test_response_string_byte_array
func (c *Client) TestResponseStringByteArray(ctx context.Context, request string) ([][]byte, error) {
	res, err := c.sendTestResponseStringByteArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringByteArray(ctx context.Context, request string) (res [][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_byte_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_byte_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringByteArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringByteArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteArrayArray invokes test_response_string_byte_array_array operation.
//
// POST /test_response_string_byte_array_array
func (c *Client) TestResponseStringByteArrayArray(ctx context.Context, request string) ([][][]byte, error) {
	res, err := c.sendTestResponseStringByteArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringByteArrayArray(ctx context.Context, request string) (res [][][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_byte_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_byte_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringByteArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringByteArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteNullable invokes test_response_string_byte_nullable operation.
//
// POST /test_response_string_byte_nullable
func (c *Client) TestResponseStringByteNullable(ctx context.Context, request string) ([]byte, error) {
	res, err := c.sendTestResponseStringByteNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringByteNullable(ctx context.Context, request string) (res []byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_byte_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_byte_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringByteNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringByteNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteNullableArray invokes test_response_string_byte_nullable_array operation.
//
// POST /test_response_string_byte_nullable_array
func (c *Client) TestResponseStringByteNullableArray(ctx context.Context, request string) ([][]byte, error) {
	res, err := c.sendTestResponseStringByteNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringByteNullableArray(ctx context.Context, request string) (res [][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_byte_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_byte_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringByteNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringByteNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringByteNullableArrayArray invokes test_response_string_byte_nullable_array_array operation.
//
// POST /test_response_string_byte_nullable_array_array
func (c *Client) TestResponseStringByteNullableArrayArray(ctx context.Context, request string) ([][][]byte, error) {
	res, err := c.sendTestResponseStringByteNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringByteNullableArrayArray(ctx context.Context, request string) (res [][][]byte, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_byte_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_byte_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringByteNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringByteNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDate invokes test_response_string_date operation.
//
// POST /test_response_string_date
func (c *Client) TestResponseStringDate(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringDate(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDate(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDate",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateArray invokes test_response_string_date_array operation.
//
// POST /test_response_string_date_array
func (c *Client) TestResponseStringDateArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringDateArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateArrayArray invokes test_response_string_date_array_array operation.
//
// POST /test_response_string_date_array_array
func (c *Client) TestResponseStringDateArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringDateArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateNullable invokes test_response_string_date_nullable operation.
//
// POST /test_response_string_date_nullable
func (c *Client) TestResponseStringDateNullable(ctx context.Context, request string) (NilDate, error) {
	res, err := c.sendTestResponseStringDateNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateNullable(ctx context.Context, request string) (res NilDate, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateNullableArray invokes test_response_string_date_nullable_array operation.
//
// POST /test_response_string_date_nullable_array
func (c *Client) TestResponseStringDateNullableArray(ctx context.Context, request string) ([]NilDate, error) {
	res, err := c.sendTestResponseStringDateNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateNullableArray(ctx context.Context, request string) (res []NilDate, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateNullableArrayArray invokes test_response_string_date_nullable_array_array operation.
//
// POST /test_response_string_date_nullable_array_array
func (c *Client) TestResponseStringDateNullableArrayArray(ctx context.Context, request string) ([][]NilDate, error) {
	res, err := c.sendTestResponseStringDateNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateNullableArrayArray(ctx context.Context, request string) (res [][]NilDate, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTime invokes test_response_string_date-time operation.
//
// POST /test_response_string_date-time
func (c *Client) TestResponseStringDateTime(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringDateTime(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateTime(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date-time"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTime",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date-time"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateTimeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateTimeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeArray invokes test_response_string_date-time_array operation.
//
// POST /test_response_string_date-time_array
func (c *Client) TestResponseStringDateTimeArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringDateTimeArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateTimeArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date-time_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date-time_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateTimeArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateTimeArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeArrayArray invokes test_response_string_date-time_array_array operation.
//
// POST /test_response_string_date-time_array_array
func (c *Client) TestResponseStringDateTimeArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringDateTimeArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateTimeArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date-time_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date-time_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateTimeArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateTimeArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeNullable invokes test_response_string_date-time_nullable operation.
//
// POST /test_response_string_date-time_nullable
func (c *Client) TestResponseStringDateTimeNullable(ctx context.Context, request string) (NilDateTime, error) {
	res, err := c.sendTestResponseStringDateTimeNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateTimeNullable(ctx context.Context, request string) (res NilDateTime, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date-time_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date-time_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateTimeNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateTimeNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeNullableArray invokes test_response_string_date-time_nullable_array operation.
//
// POST /test_response_string_date-time_nullable_array
func (c *Client) TestResponseStringDateTimeNullableArray(ctx context.Context, request string) ([]NilDateTime, error) {
	res, err := c.sendTestResponseStringDateTimeNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateTimeNullableArray(ctx context.Context, request string) (res []NilDateTime, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date-time_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date-time_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateTimeNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateTimeNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDateTimeNullableArrayArray invokes test_response_string_date-time_nullable_array_array operation.
//
// POST /test_response_string_date-time_nullable_array_array
func (c *Client) TestResponseStringDateTimeNullableArrayArray(ctx context.Context, request string) ([][]NilDateTime, error) {
	res, err := c.sendTestResponseStringDateTimeNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDateTimeNullableArrayArray(ctx context.Context, request string) (res [][]NilDateTime, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_date-time_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_date-time_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDateTimeNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDateTimeNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDuration invokes test_response_string_duration operation.
//
// POST /test_response_string_duration
func (c *Client) TestResponseStringDuration(ctx context.Context, request string) (time.Duration, error) {
	res, err := c.sendTestResponseStringDuration(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDuration(ctx context.Context, request string) (res time.Duration, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_duration"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDuration",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_duration"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDurationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDurationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationArray invokes test_response_string_duration_array operation.
//
// POST /test_response_string_duration_array
func (c *Client) TestResponseStringDurationArray(ctx context.Context, request string) ([]time.Duration, error) {
	res, err := c.sendTestResponseStringDurationArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDurationArray(ctx context.Context, request string) (res []time.Duration, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_duration_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_duration_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDurationArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDurationArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationArrayArray invokes test_response_string_duration_array_array operation.
//
// POST /test_response_string_duration_array_array
func (c *Client) TestResponseStringDurationArrayArray(ctx context.Context, request string) ([][]time.Duration, error) {
	res, err := c.sendTestResponseStringDurationArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDurationArrayArray(ctx context.Context, request string) (res [][]time.Duration, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_duration_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_duration_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDurationArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDurationArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationNullable invokes test_response_string_duration_nullable operation.
//
// POST /test_response_string_duration_nullable
func (c *Client) TestResponseStringDurationNullable(ctx context.Context, request string) (NilDuration, error) {
	res, err := c.sendTestResponseStringDurationNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDurationNullable(ctx context.Context, request string) (res NilDuration, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_duration_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_duration_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDurationNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDurationNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationNullableArray invokes test_response_string_duration_nullable_array operation.
//
// POST /test_response_string_duration_nullable_array
func (c *Client) TestResponseStringDurationNullableArray(ctx context.Context, request string) ([]NilDuration, error) {
	res, err := c.sendTestResponseStringDurationNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDurationNullableArray(ctx context.Context, request string) (res []NilDuration, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_duration_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_duration_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDurationNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDurationNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringDurationNullableArrayArray invokes test_response_string_duration_nullable_array_array operation.
//
// POST /test_response_string_duration_nullable_array_array
func (c *Client) TestResponseStringDurationNullableArrayArray(ctx context.Context, request string) ([][]NilDuration, error) {
	res, err := c.sendTestResponseStringDurationNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringDurationNullableArrayArray(ctx context.Context, request string) (res [][]NilDuration, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_duration_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_duration_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringDurationNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringDurationNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmail invokes test_response_string_email operation.
//
// POST /test_response_string_email
func (c *Client) TestResponseStringEmail(ctx context.Context, request string) (string, error) {
	res, err := c.sendTestResponseStringEmail(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringEmail(ctx context.Context, request string) (res string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_email"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmail",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_email"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringEmailRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringEmailResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailArray invokes test_response_string_email_array operation.
//
// POST /test_response_string_email_array
func (c *Client) TestResponseStringEmailArray(ctx context.Context, request string) ([]string, error) {
	res, err := c.sendTestResponseStringEmailArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringEmailArray(ctx context.Context, request string) (res []string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_email_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_email_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringEmailArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringEmailArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailArrayArray invokes test_response_string_email_array_array operation.
//
// POST /test_response_string_email_array_array
func (c *Client) TestResponseStringEmailArrayArray(ctx context.Context, request string) ([][]string, error) {
	res, err := c.sendTestResponseStringEmailArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringEmailArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_email_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_email_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringEmailArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringEmailArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailNullable invokes test_response_string_email_nullable operation.
//
// POST /test_response_string_email_nullable
func (c *Client) TestResponseStringEmailNullable(ctx context.Context, request string) (NilString, error) {
	res, err := c.sendTestResponseStringEmailNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringEmailNullable(ctx context.Context, request string) (res NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_email_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_email_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringEmailNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringEmailNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailNullableArray invokes test_response_string_email_nullable_array operation.
//
// POST /test_response_string_email_nullable_array
func (c *Client) TestResponseStringEmailNullableArray(ctx context.Context, request string) ([]NilString, error) {
	res, err := c.sendTestResponseStringEmailNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringEmailNullableArray(ctx context.Context, request string) (res []NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_email_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_email_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringEmailNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringEmailNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringEmailNullableArrayArray invokes test_response_string_email_nullable_array_array operation.
//
// POST /test_response_string_email_nullable_array_array
func (c *Client) TestResponseStringEmailNullableArrayArray(ctx context.Context, request string) ([][]NilString, error) {
	res, err := c.sendTestResponseStringEmailNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringEmailNullableArrayArray(ctx context.Context, request string) (res [][]NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_email_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_email_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringEmailNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringEmailNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat32 invokes test_response_string_float32 operation.
//
// POST /test_response_string_float32
func (c *Client) TestResponseStringFloat32(ctx context.Context, request string) (float32, error) {
	res, err := c.sendTestResponseStringFloat32(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat32(ctx context.Context, request string) (res float32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat32Array invokes test_response_string_float32_array operation.
//
// POST /test_response_string_float32_array
func (c *Client) TestResponseStringFloat32Array(ctx context.Context, request string) ([]float32, error) {
	res, err := c.sendTestResponseStringFloat32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat32Array(ctx context.Context, request string) (res []float32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat32ArrayArray invokes test_response_string_float32_array_array operation.
//
// POST /test_response_string_float32_array_array
func (c *Client) TestResponseStringFloat32ArrayArray(ctx context.Context, request string) ([][]float32, error) {
	res, err := c.sendTestResponseStringFloat32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat32ArrayArray(ctx context.Context, request string) (res [][]float32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat32Nullable invokes test_response_string_float32_nullable operation.
//
// POST /test_response_string_float32_nullable
func (c *Client) TestResponseStringFloat32Nullable(ctx context.Context, request string) (NilStringFloat32, error) {
	res, err := c.sendTestResponseStringFloat32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat32Nullable(ctx context.Context, request string) (res NilStringFloat32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat32NullableArray invokes test_response_string_float32_nullable_array operation.
//
// POST /test_response_string_float32_nullable_array
func (c *Client) TestResponseStringFloat32NullableArray(ctx context.Context, request string) ([]NilStringFloat32, error) {
	res, err := c.sendTestResponseStringFloat32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat32NullableArray(ctx context.Context, request string) (res []NilStringFloat32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat32NullableArrayArray invokes test_response_string_float32_nullable_array_array operation.
//
// POST /test_response_string_float32_nullable_array_array
func (c *Client) TestResponseStringFloat32NullableArrayArray(ctx context.Context, request string) ([][]NilStringFloat32, error) {
	res, err := c.sendTestResponseStringFloat32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat32NullableArrayArray(ctx context.Context, request string) (res [][]NilStringFloat32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat64 invokes test_response_string_float64 operation.
//
// POST /test_response_string_float64
func (c *Client) TestResponseStringFloat64(ctx context.Context, request string) (float64, error) {
	res, err := c.sendTestResponseStringFloat64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat64(ctx context.Context, request string) (res float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat64Array invokes test_response_string_float64_array operation.
//
// POST /test_response_string_float64_array
func (c *Client) TestResponseStringFloat64Array(ctx context.Context, request string) ([]float64, error) {
	res, err := c.sendTestResponseStringFloat64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat64Array(ctx context.Context, request string) (res []float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat64ArrayArray invokes test_response_string_float64_array_array operation.
//
// POST /test_response_string_float64_array_array
func (c *Client) TestResponseStringFloat64ArrayArray(ctx context.Context, request string) ([][]float64, error) {
	res, err := c.sendTestResponseStringFloat64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat64ArrayArray(ctx context.Context, request string) (res [][]float64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat64Nullable invokes test_response_string_float64_nullable operation.
//
// POST /test_response_string_float64_nullable
func (c *Client) TestResponseStringFloat64Nullable(ctx context.Context, request string) (NilStringFloat64, error) {
	res, err := c.sendTestResponseStringFloat64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat64Nullable(ctx context.Context, request string) (res NilStringFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat64NullableArray invokes test_response_string_float64_nullable_array operation.
//
// POST /test_response_string_float64_nullable_array
func (c *Client) TestResponseStringFloat64NullableArray(ctx context.Context, request string) ([]NilStringFloat64, error) {
	res, err := c.sendTestResponseStringFloat64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat64NullableArray(ctx context.Context, request string) (res []NilStringFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringFloat64NullableArrayArray invokes test_response_string_float64_nullable_array_array operation.
//
// POST /test_response_string_float64_nullable_array_array
func (c *Client) TestResponseStringFloat64NullableArrayArray(ctx context.Context, request string) ([][]NilStringFloat64, error) {
	res, err := c.sendTestResponseStringFloat64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringFloat64NullableArrayArray(ctx context.Context, request string) (res [][]NilStringFloat64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_float64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_float64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringFloat64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_float64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringFloat64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringFloat64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostname invokes test_response_string_hostname operation.
//
// POST /test_response_string_hostname
func (c *Client) TestResponseStringHostname(ctx context.Context, request string) (string, error) {
	res, err := c.sendTestResponseStringHostname(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringHostname(ctx context.Context, request string) (res string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_hostname"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostname",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_hostname"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringHostnameRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringHostnameResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameArray invokes test_response_string_hostname_array operation.
//
// POST /test_response_string_hostname_array
func (c *Client) TestResponseStringHostnameArray(ctx context.Context, request string) ([]string, error) {
	res, err := c.sendTestResponseStringHostnameArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringHostnameArray(ctx context.Context, request string) (res []string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_hostname_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_hostname_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringHostnameArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringHostnameArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameArrayArray invokes test_response_string_hostname_array_array operation.
//
// POST /test_response_string_hostname_array_array
func (c *Client) TestResponseStringHostnameArrayArray(ctx context.Context, request string) ([][]string, error) {
	res, err := c.sendTestResponseStringHostnameArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringHostnameArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_hostname_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_hostname_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringHostnameArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringHostnameArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameNullable invokes test_response_string_hostname_nullable operation.
//
// POST /test_response_string_hostname_nullable
func (c *Client) TestResponseStringHostnameNullable(ctx context.Context, request string) (NilString, error) {
	res, err := c.sendTestResponseStringHostnameNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringHostnameNullable(ctx context.Context, request string) (res NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_hostname_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_hostname_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringHostnameNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringHostnameNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameNullableArray invokes test_response_string_hostname_nullable_array operation.
//
// POST /test_response_string_hostname_nullable_array
func (c *Client) TestResponseStringHostnameNullableArray(ctx context.Context, request string) ([]NilString, error) {
	res, err := c.sendTestResponseStringHostnameNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringHostnameNullableArray(ctx context.Context, request string) (res []NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_hostname_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_hostname_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringHostnameNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringHostnameNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringHostnameNullableArrayArray invokes test_response_string_hostname_nullable_array_array operation.
//
// POST /test_response_string_hostname_nullable_array_array
func (c *Client) TestResponseStringHostnameNullableArrayArray(ctx context.Context, request string) ([][]NilString, error) {
	res, err := c.sendTestResponseStringHostnameNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringHostnameNullableArrayArray(ctx context.Context, request string) (res [][]NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_hostname_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_hostname_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringHostnameNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringHostnameNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIP invokes test_response_string_ip operation.
//
// POST /test_response_string_ip
func (c *Client) TestResponseStringIP(ctx context.Context, request string) (netip.Addr, error) {
	res, err := c.sendTestResponseStringIP(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIP(ctx context.Context, request string) (res netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ip"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIP",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ip"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIPRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIPResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPArray invokes test_response_string_ip_array operation.
//
// POST /test_response_string_ip_array
func (c *Client) TestResponseStringIPArray(ctx context.Context, request string) ([]netip.Addr, error) {
	res, err := c.sendTestResponseStringIPArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIPArray(ctx context.Context, request string) (res []netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ip_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ip_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIPArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIPArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPArrayArray invokes test_response_string_ip_array_array operation.
//
// POST /test_response_string_ip_array_array
func (c *Client) TestResponseStringIPArrayArray(ctx context.Context, request string) ([][]netip.Addr, error) {
	res, err := c.sendTestResponseStringIPArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIPArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ip_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ip_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIPArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIPArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPNullable invokes test_response_string_ip_nullable operation.
//
// POST /test_response_string_ip_nullable
func (c *Client) TestResponseStringIPNullable(ctx context.Context, request string) (NilIP, error) {
	res, err := c.sendTestResponseStringIPNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIPNullable(ctx context.Context, request string) (res NilIP, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ip_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ip_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIPNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIPNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPNullableArray invokes test_response_string_ip_nullable_array operation.
//
// POST /test_response_string_ip_nullable_array
func (c *Client) TestResponseStringIPNullableArray(ctx context.Context, request string) ([]NilIP, error) {
	res, err := c.sendTestResponseStringIPNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIPNullableArray(ctx context.Context, request string) (res []NilIP, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ip_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ip_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIPNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIPNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIPNullableArrayArray invokes test_response_string_ip_nullable_array_array operation.
//
// POST /test_response_string_ip_nullable_array_array
func (c *Client) TestResponseStringIPNullableArrayArray(ctx context.Context, request string) ([][]NilIP, error) {
	res, err := c.sendTestResponseStringIPNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIPNullableArrayArray(ctx context.Context, request string) (res [][]NilIP, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ip_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ip_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIPNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIPNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt invokes test_response_string_int operation.
//
// POST /test_response_string_int
func (c *Client) TestResponseStringInt(ctx context.Context, request string) (int, error) {
	res, err := c.sendTestResponseStringInt(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt(ctx context.Context, request string) (res int, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIntRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIntResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt16 invokes test_response_string_int16 operation.
//
// POST /test_response_string_int16
func (c *Client) TestResponseStringInt16(ctx context.Context, request string) (int16, error) {
	res, err := c.sendTestResponseStringInt16(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt16(ctx context.Context, request string) (res int16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt16Array invokes test_response_string_int16_array operation.
//
// POST /test_response_string_int16_array
func (c *Client) TestResponseStringInt16Array(ctx context.Context, request string) ([]int16, error) {
	res, err := c.sendTestResponseStringInt16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt16Array(ctx context.Context, request string) (res []int16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt16ArrayArray invokes test_response_string_int16_array_array operation.
//
// POST /test_response_string_int16_array_array
func (c *Client) TestResponseStringInt16ArrayArray(ctx context.Context, request string) ([][]int16, error) {
	res, err := c.sendTestResponseStringInt16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt16ArrayArray(ctx context.Context, request string) (res [][]int16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt16Nullable invokes test_response_string_int16_nullable operation.
//
// POST /test_response_string_int16_nullable
func (c *Client) TestResponseStringInt16Nullable(ctx context.Context, request string) (NilStringInt16, error) {
	res, err := c.sendTestResponseStringInt16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt16Nullable(ctx context.Context, request string) (res NilStringInt16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt16NullableArray invokes test_response_string_int16_nullable_array operation.
//
// POST /test_response_string_int16_nullable_array
func (c *Client) TestResponseStringInt16NullableArray(ctx context.Context, request string) ([]NilStringInt16, error) {
	res, err := c.sendTestResponseStringInt16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt16NullableArray(ctx context.Context, request string) (res []NilStringInt16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt16NullableArrayArray invokes test_response_string_int16_nullable_array_array operation.
//
// POST /test_response_string_int16_nullable_array_array
func (c *Client) TestResponseStringInt16NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt16, error) {
	res, err := c.sendTestResponseStringInt16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt16NullableArrayArray(ctx context.Context, request string) (res [][]NilStringInt16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32 invokes test_response_string_int32 operation.
//
// POST /test_response_string_int32
func (c *Client) TestResponseStringInt32(ctx context.Context, request string) (int32, error) {
	res, err := c.sendTestResponseStringInt32(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt32(ctx context.Context, request string) (res int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32Array invokes test_response_string_int32_array operation.
//
// POST /test_response_string_int32_array
func (c *Client) TestResponseStringInt32Array(ctx context.Context, request string) ([]int32, error) {
	res, err := c.sendTestResponseStringInt32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt32Array(ctx context.Context, request string) (res []int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32ArrayArray invokes test_response_string_int32_array_array operation.
//
// POST /test_response_string_int32_array_array
func (c *Client) TestResponseStringInt32ArrayArray(ctx context.Context, request string) ([][]int32, error) {
	res, err := c.sendTestResponseStringInt32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt32ArrayArray(ctx context.Context, request string) (res [][]int32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32Nullable invokes test_response_string_int32_nullable operation.
//
// POST /test_response_string_int32_nullable
func (c *Client) TestResponseStringInt32Nullable(ctx context.Context, request string) (NilStringInt32, error) {
	res, err := c.sendTestResponseStringInt32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt32Nullable(ctx context.Context, request string) (res NilStringInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32NullableArray invokes test_response_string_int32_nullable_array operation.
//
// POST /test_response_string_int32_nullable_array
func (c *Client) TestResponseStringInt32NullableArray(ctx context.Context, request string) ([]NilStringInt32, error) {
	res, err := c.sendTestResponseStringInt32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt32NullableArray(ctx context.Context, request string) (res []NilStringInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt32NullableArrayArray invokes test_response_string_int32_nullable_array_array operation.
//
// POST /test_response_string_int32_nullable_array_array
func (c *Client) TestResponseStringInt32NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt32, error) {
	res, err := c.sendTestResponseStringInt32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt32NullableArrayArray(ctx context.Context, request string) (res [][]NilStringInt32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64 invokes test_response_string_int64 operation.
//
// POST /test_response_string_int64
func (c *Client) TestResponseStringInt64(ctx context.Context, request string) (int64, error) {
	res, err := c.sendTestResponseStringInt64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt64(ctx context.Context, request string) (res int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64Array invokes test_response_string_int64_array operation.
//
// POST /test_response_string_int64_array
func (c *Client) TestResponseStringInt64Array(ctx context.Context, request string) ([]int64, error) {
	res, err := c.sendTestResponseStringInt64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt64Array(ctx context.Context, request string) (res []int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64ArrayArray invokes test_response_string_int64_array_array operation.
//
// POST /test_response_string_int64_array_array
func (c *Client) TestResponseStringInt64ArrayArray(ctx context.Context, request string) ([][]int64, error) {
	res, err := c.sendTestResponseStringInt64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt64ArrayArray(ctx context.Context, request string) (res [][]int64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64Nullable invokes test_response_string_int64_nullable operation.
//
// POST /test_response_string_int64_nullable
func (c *Client) TestResponseStringInt64Nullable(ctx context.Context, request string) (NilStringInt64, error) {
	res, err := c.sendTestResponseStringInt64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt64Nullable(ctx context.Context, request string) (res NilStringInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64NullableArray invokes test_response_string_int64_nullable_array operation.
//
// POST /test_response_string_int64_nullable_array
func (c *Client) TestResponseStringInt64NullableArray(ctx context.Context, request string) ([]NilStringInt64, error) {
	res, err := c.sendTestResponseStringInt64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt64NullableArray(ctx context.Context, request string) (res []NilStringInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt64NullableArrayArray invokes test_response_string_int64_nullable_array_array operation.
//
// POST /test_response_string_int64_nullable_array_array
func (c *Client) TestResponseStringInt64NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt64, error) {
	res, err := c.sendTestResponseStringInt64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt64NullableArrayArray(ctx context.Context, request string) (res [][]NilStringInt64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt8 invokes test_response_string_int8 operation.
//
// POST /test_response_string_int8
func (c *Client) TestResponseStringInt8(ctx context.Context, request string) (int8, error) {
	res, err := c.sendTestResponseStringInt8(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt8(ctx context.Context, request string) (res int8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt8Array invokes test_response_string_int8_array operation.
//
// POST /test_response_string_int8_array
func (c *Client) TestResponseStringInt8Array(ctx context.Context, request string) ([]int8, error) {
	res, err := c.sendTestResponseStringInt8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt8Array(ctx context.Context, request string) (res []int8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt8ArrayArray invokes test_response_string_int8_array_array operation.
//
// POST /test_response_string_int8_array_array
func (c *Client) TestResponseStringInt8ArrayArray(ctx context.Context, request string) ([][]int8, error) {
	res, err := c.sendTestResponseStringInt8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt8ArrayArray(ctx context.Context, request string) (res [][]int8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt8Nullable invokes test_response_string_int8_nullable operation.
//
// POST /test_response_string_int8_nullable
func (c *Client) TestResponseStringInt8Nullable(ctx context.Context, request string) (NilStringInt8, error) {
	res, err := c.sendTestResponseStringInt8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt8Nullable(ctx context.Context, request string) (res NilStringInt8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt8NullableArray invokes test_response_string_int8_nullable_array operation.
//
// POST /test_response_string_int8_nullable_array
func (c *Client) TestResponseStringInt8NullableArray(ctx context.Context, request string) ([]NilStringInt8, error) {
	res, err := c.sendTestResponseStringInt8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt8NullableArray(ctx context.Context, request string) (res []NilStringInt8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringInt8NullableArrayArray invokes test_response_string_int8_nullable_array_array operation.
//
// POST /test_response_string_int8_nullable_array_array
func (c *Client) TestResponseStringInt8NullableArrayArray(ctx context.Context, request string) ([][]NilStringInt8, error) {
	res, err := c.sendTestResponseStringInt8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringInt8NullableArrayArray(ctx context.Context, request string) (res [][]NilStringInt8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringInt8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringInt8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringInt8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIntArray invokes test_response_string_int_array operation.
//
// POST /test_response_string_int_array
func (c *Client) TestResponseStringIntArray(ctx context.Context, request string) ([]int, error) {
	res, err := c.sendTestResponseStringIntArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIntArray(ctx context.Context, request string) (res []int, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIntArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIntArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIntArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIntArrayArray invokes test_response_string_int_array_array operation.
//
// POST /test_response_string_int_array_array
func (c *Client) TestResponseStringIntArrayArray(ctx context.Context, request string) ([][]int, error) {
	res, err := c.sendTestResponseStringIntArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIntArrayArray(ctx context.Context, request string) (res [][]int, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIntArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIntArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIntArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIntNullable invokes test_response_string_int_nullable operation.
//
// POST /test_response_string_int_nullable
func (c *Client) TestResponseStringIntNullable(ctx context.Context, request string) (NilStringInt, error) {
	res, err := c.sendTestResponseStringIntNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIntNullable(ctx context.Context, request string) (res NilStringInt, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIntNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIntNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIntNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIntNullableArray invokes test_response_string_int_nullable_array operation.
//
// POST /test_response_string_int_nullable_array
func (c *Client) TestResponseStringIntNullableArray(ctx context.Context, request string) ([]NilStringInt, error) {
	res, err := c.sendTestResponseStringIntNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIntNullableArray(ctx context.Context, request string) (res []NilStringInt, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIntNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIntNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIntNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIntNullableArrayArray invokes test_response_string_int_nullable_array_array operation.
//
// POST /test_response_string_int_nullable_array_array
func (c *Client) TestResponseStringIntNullableArrayArray(ctx context.Context, request string) ([][]NilStringInt, error) {
	res, err := c.sendTestResponseStringIntNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIntNullableArrayArray(ctx context.Context, request string) (res [][]NilStringInt, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_int_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIntNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_int_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIntNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIntNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4 invokes test_response_string_ipv4 operation.
//
// POST /test_response_string_ipv4
func (c *Client) TestResponseStringIpv4(ctx context.Context, request string) (netip.Addr, error) {
	res, err := c.sendTestResponseStringIpv4(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv4(ctx context.Context, request string) (res netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv4"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv4"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv4Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv4Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4Array invokes test_response_string_ipv4_array operation.
//
// POST /test_response_string_ipv4_array
func (c *Client) TestResponseStringIpv4Array(ctx context.Context, request string) ([]netip.Addr, error) {
	res, err := c.sendTestResponseStringIpv4Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv4Array(ctx context.Context, request string) (res []netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv4_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv4_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv4ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv4ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4ArrayArray invokes test_response_string_ipv4_array_array operation.
//
// POST /test_response_string_ipv4_array_array
func (c *Client) TestResponseStringIpv4ArrayArray(ctx context.Context, request string) ([][]netip.Addr, error) {
	res, err := c.sendTestResponseStringIpv4ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv4ArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv4_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv4_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv4ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv4ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4Nullable invokes test_response_string_ipv4_nullable operation.
//
// POST /test_response_string_ipv4_nullable
func (c *Client) TestResponseStringIpv4Nullable(ctx context.Context, request string) (NilIPv4, error) {
	res, err := c.sendTestResponseStringIpv4Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv4Nullable(ctx context.Context, request string) (res NilIPv4, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv4_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv4_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv4NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv4NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4NullableArray invokes test_response_string_ipv4_nullable_array operation.
//
// POST /test_response_string_ipv4_nullable_array
func (c *Client) TestResponseStringIpv4NullableArray(ctx context.Context, request string) ([]NilIPv4, error) {
	res, err := c.sendTestResponseStringIpv4NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv4NullableArray(ctx context.Context, request string) (res []NilIPv4, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv4_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv4_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv4NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv4NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv4NullableArrayArray invokes test_response_string_ipv4_nullable_array_array operation.
//
// POST /test_response_string_ipv4_nullable_array_array
func (c *Client) TestResponseStringIpv4NullableArrayArray(ctx context.Context, request string) ([][]NilIPv4, error) {
	res, err := c.sendTestResponseStringIpv4NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv4NullableArrayArray(ctx context.Context, request string) (res [][]NilIPv4, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv4_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv4_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv4NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv4NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6 invokes test_response_string_ipv6 operation.
//
// POST /test_response_string_ipv6
func (c *Client) TestResponseStringIpv6(ctx context.Context, request string) (netip.Addr, error) {
	res, err := c.sendTestResponseStringIpv6(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv6(ctx context.Context, request string) (res netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv6"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv6"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv6Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv6Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6Array invokes test_response_string_ipv6_array operation.
//
// POST /test_response_string_ipv6_array
func (c *Client) TestResponseStringIpv6Array(ctx context.Context, request string) ([]netip.Addr, error) {
	res, err := c.sendTestResponseStringIpv6Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv6Array(ctx context.Context, request string) (res []netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv6_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv6_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv6ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv6ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6ArrayArray invokes test_response_string_ipv6_array_array operation.
//
// POST /test_response_string_ipv6_array_array
func (c *Client) TestResponseStringIpv6ArrayArray(ctx context.Context, request string) ([][]netip.Addr, error) {
	res, err := c.sendTestResponseStringIpv6ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv6ArrayArray(ctx context.Context, request string) (res [][]netip.Addr, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv6_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv6_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv6ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv6ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6Nullable invokes test_response_string_ipv6_nullable operation.
//
// POST /test_response_string_ipv6_nullable
func (c *Client) TestResponseStringIpv6Nullable(ctx context.Context, request string) (NilIPv6, error) {
	res, err := c.sendTestResponseStringIpv6Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv6Nullable(ctx context.Context, request string) (res NilIPv6, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv6_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv6_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv6NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv6NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6NullableArray invokes test_response_string_ipv6_nullable_array operation.
//
// POST /test_response_string_ipv6_nullable_array
func (c *Client) TestResponseStringIpv6NullableArray(ctx context.Context, request string) ([]NilIPv6, error) {
	res, err := c.sendTestResponseStringIpv6NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv6NullableArray(ctx context.Context, request string) (res []NilIPv6, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv6_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv6_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv6NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv6NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringIpv6NullableArrayArray invokes test_response_string_ipv6_nullable_array_array operation.
//
// POST /test_response_string_ipv6_nullable_array_array
func (c *Client) TestResponseStringIpv6NullableArrayArray(ctx context.Context, request string) ([][]NilIPv6, error) {
	res, err := c.sendTestResponseStringIpv6NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringIpv6NullableArrayArray(ctx context.Context, request string) (res [][]NilIPv6, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_ipv6_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_ipv6_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringIpv6NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringIpv6NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringNullable invokes test_response_string_nullable operation.
//
// POST /test_response_string_nullable
func (c *Client) TestResponseStringNullable(ctx context.Context, request string) (NilString, error) {
	res, err := c.sendTestResponseStringNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringNullable(ctx context.Context, request string) (res NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringNullableArray invokes test_response_string_nullable_array operation.
//
// POST /test_response_string_nullable_array
func (c *Client) TestResponseStringNullableArray(ctx context.Context, request string) ([]NilString, error) {
	res, err := c.sendTestResponseStringNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringNullableArray(ctx context.Context, request string) (res []NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringNullableArrayArray invokes test_response_string_nullable_array_array operation.
//
// POST /test_response_string_nullable_array_array
func (c *Client) TestResponseStringNullableArrayArray(ctx context.Context, request string) ([][]NilString, error) {
	res, err := c.sendTestResponseStringNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringNullableArrayArray(ctx context.Context, request string) (res [][]NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPassword invokes test_response_string_password operation.
//
// POST /test_response_string_password
func (c *Client) TestResponseStringPassword(ctx context.Context, request string) (string, error) {
	res, err := c.sendTestResponseStringPassword(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringPassword(ctx context.Context, request string) (res string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_password"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPassword",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_password"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringPasswordRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringPasswordResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordArray invokes test_response_string_password_array operation.
//
// POST /test_response_string_password_array
func (c *Client) TestResponseStringPasswordArray(ctx context.Context, request string) ([]string, error) {
	res, err := c.sendTestResponseStringPasswordArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringPasswordArray(ctx context.Context, request string) (res []string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_password_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_password_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringPasswordArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringPasswordArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordArrayArray invokes test_response_string_password_array_array operation.
//
// POST /test_response_string_password_array_array
func (c *Client) TestResponseStringPasswordArrayArray(ctx context.Context, request string) ([][]string, error) {
	res, err := c.sendTestResponseStringPasswordArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringPasswordArrayArray(ctx context.Context, request string) (res [][]string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_password_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_password_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringPasswordArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringPasswordArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordNullable invokes test_response_string_password_nullable operation.
//
// POST /test_response_string_password_nullable
func (c *Client) TestResponseStringPasswordNullable(ctx context.Context, request string) (NilString, error) {
	res, err := c.sendTestResponseStringPasswordNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringPasswordNullable(ctx context.Context, request string) (res NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_password_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_password_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringPasswordNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringPasswordNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordNullableArray invokes test_response_string_password_nullable_array operation.
//
// POST /test_response_string_password_nullable_array
func (c *Client) TestResponseStringPasswordNullableArray(ctx context.Context, request string) ([]NilString, error) {
	res, err := c.sendTestResponseStringPasswordNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringPasswordNullableArray(ctx context.Context, request string) (res []NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_password_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_password_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringPasswordNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringPasswordNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringPasswordNullableArrayArray invokes test_response_string_password_nullable_array_array operation.
//
// POST /test_response_string_password_nullable_array_array
func (c *Client) TestResponseStringPasswordNullableArrayArray(ctx context.Context, request string) ([][]NilString, error) {
	res, err := c.sendTestResponseStringPasswordNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringPasswordNullableArrayArray(ctx context.Context, request string) (res [][]NilString, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_password_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_password_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringPasswordNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringPasswordNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTime invokes test_response_string_time operation.
//
// POST /test_response_string_time
func (c *Client) TestResponseStringTime(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringTime(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringTime(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_time"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTime",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_time"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringTimeRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringTimeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeArray invokes test_response_string_time_array operation.
//
// POST /test_response_string_time_array
func (c *Client) TestResponseStringTimeArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringTimeArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringTimeArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_time_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_time_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringTimeArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringTimeArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeArrayArray invokes test_response_string_time_array_array operation.
//
// POST /test_response_string_time_array_array
func (c *Client) TestResponseStringTimeArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringTimeArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringTimeArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_time_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_time_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringTimeArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringTimeArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeNullable invokes test_response_string_time_nullable operation.
//
// POST /test_response_string_time_nullable
func (c *Client) TestResponseStringTimeNullable(ctx context.Context, request string) (NilTime, error) {
	res, err := c.sendTestResponseStringTimeNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringTimeNullable(ctx context.Context, request string) (res NilTime, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_time_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_time_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringTimeNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringTimeNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeNullableArray invokes test_response_string_time_nullable_array operation.
//
// POST /test_response_string_time_nullable_array
func (c *Client) TestResponseStringTimeNullableArray(ctx context.Context, request string) ([]NilTime, error) {
	res, err := c.sendTestResponseStringTimeNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringTimeNullableArray(ctx context.Context, request string) (res []NilTime, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_time_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_time_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringTimeNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringTimeNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringTimeNullableArrayArray invokes test_response_string_time_nullable_array_array operation.
//
// POST /test_response_string_time_nullable_array_array
func (c *Client) TestResponseStringTimeNullableArrayArray(ctx context.Context, request string) ([][]NilTime, error) {
	res, err := c.sendTestResponseStringTimeNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringTimeNullableArrayArray(ctx context.Context, request string) (res [][]NilTime, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_time_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_time_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringTimeNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringTimeNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURI invokes test_response_string_uri operation.
//
// POST /test_response_string_uri
func (c *Client) TestResponseStringURI(ctx context.Context, request string) (url.URL, error) {
	res, err := c.sendTestResponseStringURI(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringURI(ctx context.Context, request string) (res url.URL, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uri"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURI",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uri"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringURIRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringURIResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURIArray invokes test_response_string_uri_array operation.
//
// POST /test_response_string_uri_array
func (c *Client) TestResponseStringURIArray(ctx context.Context, request string) ([]url.URL, error) {
	res, err := c.sendTestResponseStringURIArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringURIArray(ctx context.Context, request string) (res []url.URL, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uri_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURIArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uri_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringURIArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringURIArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURIArrayArray invokes test_response_string_uri_array_array operation.
//
// POST /test_response_string_uri_array_array
func (c *Client) TestResponseStringURIArrayArray(ctx context.Context, request string) ([][]url.URL, error) {
	res, err := c.sendTestResponseStringURIArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringURIArrayArray(ctx context.Context, request string) (res [][]url.URL, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uri_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uri_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringURIArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringURIArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURINullable invokes test_response_string_uri_nullable operation.
//
// POST /test_response_string_uri_nullable
func (c *Client) TestResponseStringURINullable(ctx context.Context, request string) (NilURI, error) {
	res, err := c.sendTestResponseStringURINullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringURINullable(ctx context.Context, request string) (res NilURI, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uri_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURINullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uri_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringURINullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringURINullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURINullableArray invokes test_response_string_uri_nullable_array operation.
//
// POST /test_response_string_uri_nullable_array
func (c *Client) TestResponseStringURINullableArray(ctx context.Context, request string) ([]NilURI, error) {
	res, err := c.sendTestResponseStringURINullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringURINullableArray(ctx context.Context, request string) (res []NilURI, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uri_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uri_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringURINullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringURINullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringURINullableArrayArray invokes test_response_string_uri_nullable_array_array operation.
//
// POST /test_response_string_uri_nullable_array_array
func (c *Client) TestResponseStringURINullableArrayArray(ctx context.Context, request string) ([][]NilURI, error) {
	res, err := c.sendTestResponseStringURINullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringURINullableArrayArray(ctx context.Context, request string) (res [][]NilURI, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uri_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uri_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringURINullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringURINullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUID invokes test_response_string_uuid operation.
//
// POST /test_response_string_uuid
func (c *Client) TestResponseStringUUID(ctx context.Context, request string) (uuid.UUID, error) {
	res, err := c.sendTestResponseStringUUID(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUUID(ctx context.Context, request string) (res uuid.UUID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uuid"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uuid"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUUIDRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUUIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDArray invokes test_response_string_uuid_array operation.
//
// POST /test_response_string_uuid_array
func (c *Client) TestResponseStringUUIDArray(ctx context.Context, request string) ([]uuid.UUID, error) {
	res, err := c.sendTestResponseStringUUIDArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUUIDArray(ctx context.Context, request string) (res []uuid.UUID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uuid_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uuid_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUUIDArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUUIDArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDArrayArray invokes test_response_string_uuid_array_array operation.
//
// POST /test_response_string_uuid_array_array
func (c *Client) TestResponseStringUUIDArrayArray(ctx context.Context, request string) ([][]uuid.UUID, error) {
	res, err := c.sendTestResponseStringUUIDArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUUIDArrayArray(ctx context.Context, request string) (res [][]uuid.UUID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uuid_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uuid_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUUIDArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUUIDArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDNullable invokes test_response_string_uuid_nullable operation.
//
// POST /test_response_string_uuid_nullable
func (c *Client) TestResponseStringUUIDNullable(ctx context.Context, request string) (NilUUID, error) {
	res, err := c.sendTestResponseStringUUIDNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUUIDNullable(ctx context.Context, request string) (res NilUUID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uuid_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uuid_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUUIDNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUUIDNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDNullableArray invokes test_response_string_uuid_nullable_array operation.
//
// POST /test_response_string_uuid_nullable_array
func (c *Client) TestResponseStringUUIDNullableArray(ctx context.Context, request string) ([]NilUUID, error) {
	res, err := c.sendTestResponseStringUUIDNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUUIDNullableArray(ctx context.Context, request string) (res []NilUUID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uuid_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uuid_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUUIDNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUUIDNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUUIDNullableArrayArray invokes test_response_string_uuid_nullable_array_array operation.
//
// POST /test_response_string_uuid_nullable_array_array
func (c *Client) TestResponseStringUUIDNullableArrayArray(ctx context.Context, request string) ([][]NilUUID, error) {
	res, err := c.sendTestResponseStringUUIDNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUUIDNullableArrayArray(ctx context.Context, request string) (res [][]NilUUID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uuid_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uuid_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUUIDNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUUIDNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint invokes test_response_string_uint operation.
//
// POST /test_response_string_uint
func (c *Client) TestResponseStringUint(ctx context.Context, request string) (uint, error) {
	res, err := c.sendTestResponseStringUint(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint(ctx context.Context, request string) (res uint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUintRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUintResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint16 invokes test_response_string_uint16 operation.
//
// POST /test_response_string_uint16
func (c *Client) TestResponseStringUint16(ctx context.Context, request string) (uint16, error) {
	res, err := c.sendTestResponseStringUint16(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint16(ctx context.Context, request string) (res uint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint16"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint16"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint16",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint16"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint16Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint16Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint16Array invokes test_response_string_uint16_array operation.
//
// POST /test_response_string_uint16_array
func (c *Client) TestResponseStringUint16Array(ctx context.Context, request string) ([]uint16, error) {
	res, err := c.sendTestResponseStringUint16Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint16Array(ctx context.Context, request string) (res []uint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint16_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint16_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint16Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint16_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint16ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint16ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint16ArrayArray invokes test_response_string_uint16_array_array operation.
//
// POST /test_response_string_uint16_array_array
func (c *Client) TestResponseStringUint16ArrayArray(ctx context.Context, request string) ([][]uint16, error) {
	res, err := c.sendTestResponseStringUint16ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint16ArrayArray(ctx context.Context, request string) (res [][]uint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint16_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint16_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint16ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint16_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint16ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint16ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint16Nullable invokes test_response_string_uint16_nullable operation.
//
// POST /test_response_string_uint16_nullable
func (c *Client) TestResponseStringUint16Nullable(ctx context.Context, request string) (NilStringUint16, error) {
	res, err := c.sendTestResponseStringUint16Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint16Nullable(ctx context.Context, request string) (res NilStringUint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint16_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint16_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint16Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint16_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint16NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint16NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint16NullableArray invokes test_response_string_uint16_nullable_array operation.
//
// POST /test_response_string_uint16_nullable_array
func (c *Client) TestResponseStringUint16NullableArray(ctx context.Context, request string) ([]NilStringUint16, error) {
	res, err := c.sendTestResponseStringUint16NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint16NullableArray(ctx context.Context, request string) (res []NilStringUint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint16_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint16_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint16NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint16_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint16NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint16NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint16NullableArrayArray invokes test_response_string_uint16_nullable_array_array operation.
//
// POST /test_response_string_uint16_nullable_array_array
func (c *Client) TestResponseStringUint16NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint16, error) {
	res, err := c.sendTestResponseStringUint16NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint16NullableArrayArray(ctx context.Context, request string) (res [][]NilStringUint16, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint16_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint16_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint16NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint16_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint16NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint16NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint32 invokes test_response_string_uint32 operation.
//
// POST /test_response_string_uint32
func (c *Client) TestResponseStringUint32(ctx context.Context, request string) (uint32, error) {
	res, err := c.sendTestResponseStringUint32(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint32(ctx context.Context, request string) (res uint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint32"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint32"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint32",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint32"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint32Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint32Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint32Array invokes test_response_string_uint32_array operation.
//
// POST /test_response_string_uint32_array
func (c *Client) TestResponseStringUint32Array(ctx context.Context, request string) ([]uint32, error) {
	res, err := c.sendTestResponseStringUint32Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint32Array(ctx context.Context, request string) (res []uint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint32_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint32_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint32Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint32_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint32ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint32ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint32ArrayArray invokes test_response_string_uint32_array_array operation.
//
// POST /test_response_string_uint32_array_array
func (c *Client) TestResponseStringUint32ArrayArray(ctx context.Context, request string) ([][]uint32, error) {
	res, err := c.sendTestResponseStringUint32ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint32ArrayArray(ctx context.Context, request string) (res [][]uint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint32_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint32_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint32_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint32ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint32ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint32Nullable invokes test_response_string_uint32_nullable operation.
//
// POST /test_response_string_uint32_nullable
func (c *Client) TestResponseStringUint32Nullable(ctx context.Context, request string) (NilStringUint32, error) {
	res, err := c.sendTestResponseStringUint32Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint32Nullable(ctx context.Context, request string) (res NilStringUint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint32_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint32_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint32Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint32_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint32NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint32NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint32NullableArray invokes test_response_string_uint32_nullable_array operation.
//
// POST /test_response_string_uint32_nullable_array
func (c *Client) TestResponseStringUint32NullableArray(ctx context.Context, request string) ([]NilStringUint32, error) {
	res, err := c.sendTestResponseStringUint32NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint32NullableArray(ctx context.Context, request string) (res []NilStringUint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint32_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint32_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint32NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint32_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint32NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint32NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint32NullableArrayArray invokes test_response_string_uint32_nullable_array_array operation.
//
// POST /test_response_string_uint32_nullable_array_array
func (c *Client) TestResponseStringUint32NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint32, error) {
	res, err := c.sendTestResponseStringUint32NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint32NullableArrayArray(ctx context.Context, request string) (res [][]NilStringUint32, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint32_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint32_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint32_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint32NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint32NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint64 invokes test_response_string_uint64 operation.
//
// POST /test_response_string_uint64
func (c *Client) TestResponseStringUint64(ctx context.Context, request string) (uint64, error) {
	res, err := c.sendTestResponseStringUint64(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint64(ctx context.Context, request string) (res uint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint64"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint64"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint64",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint64"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint64Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint64Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint64Array invokes test_response_string_uint64_array operation.
//
// POST /test_response_string_uint64_array
func (c *Client) TestResponseStringUint64Array(ctx context.Context, request string) ([]uint64, error) {
	res, err := c.sendTestResponseStringUint64Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint64Array(ctx context.Context, request string) (res []uint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint64_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint64_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint64Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint64_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint64ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint64ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint64ArrayArray invokes test_response_string_uint64_array_array operation.
//
// POST /test_response_string_uint64_array_array
func (c *Client) TestResponseStringUint64ArrayArray(ctx context.Context, request string) ([][]uint64, error) {
	res, err := c.sendTestResponseStringUint64ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint64ArrayArray(ctx context.Context, request string) (res [][]uint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint64_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint64_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint64_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint64ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint64ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint64Nullable invokes test_response_string_uint64_nullable operation.
//
// POST /test_response_string_uint64_nullable
func (c *Client) TestResponseStringUint64Nullable(ctx context.Context, request string) (NilStringUint64, error) {
	res, err := c.sendTestResponseStringUint64Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint64Nullable(ctx context.Context, request string) (res NilStringUint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint64_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint64_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint64Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint64_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint64NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint64NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint64NullableArray invokes test_response_string_uint64_nullable_array operation.
//
// POST /test_response_string_uint64_nullable_array
func (c *Client) TestResponseStringUint64NullableArray(ctx context.Context, request string) ([]NilStringUint64, error) {
	res, err := c.sendTestResponseStringUint64NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint64NullableArray(ctx context.Context, request string) (res []NilStringUint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint64_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint64_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint64NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint64_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint64NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint64NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint64NullableArrayArray invokes test_response_string_uint64_nullable_array_array operation.
//
// POST /test_response_string_uint64_nullable_array_array
func (c *Client) TestResponseStringUint64NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint64, error) {
	res, err := c.sendTestResponseStringUint64NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint64NullableArrayArray(ctx context.Context, request string) (res [][]NilStringUint64, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint64_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint64_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint64_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint64NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint64NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint8 invokes test_response_string_uint8 operation.
//
// POST /test_response_string_uint8
func (c *Client) TestResponseStringUint8(ctx context.Context, request string) (uint8, error) {
	res, err := c.sendTestResponseStringUint8(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint8(ctx context.Context, request string) (res uint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint8"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint8"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint8",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint8"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint8Request(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint8Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint8Array invokes test_response_string_uint8_array operation.
//
// POST /test_response_string_uint8_array
func (c *Client) TestResponseStringUint8Array(ctx context.Context, request string) ([]uint8, error) {
	res, err := c.sendTestResponseStringUint8Array(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint8Array(ctx context.Context, request string) (res []uint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint8_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint8_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint8Array",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint8_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint8ArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint8ArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint8ArrayArray invokes test_response_string_uint8_array_array operation.
//
// POST /test_response_string_uint8_array_array
func (c *Client) TestResponseStringUint8ArrayArray(ctx context.Context, request string) ([][]uint8, error) {
	res, err := c.sendTestResponseStringUint8ArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint8ArrayArray(ctx context.Context, request string) (res [][]uint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint8_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint8_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint8ArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint8_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint8ArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint8ArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint8Nullable invokes test_response_string_uint8_nullable operation.
//
// POST /test_response_string_uint8_nullable
func (c *Client) TestResponseStringUint8Nullable(ctx context.Context, request string) (NilStringUint8, error) {
	res, err := c.sendTestResponseStringUint8Nullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint8Nullable(ctx context.Context, request string) (res NilStringUint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint8_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint8_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint8Nullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint8_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint8NullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint8NullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint8NullableArray invokes test_response_string_uint8_nullable_array operation.
//
// POST /test_response_string_uint8_nullable_array
func (c *Client) TestResponseStringUint8NullableArray(ctx context.Context, request string) ([]NilStringUint8, error) {
	res, err := c.sendTestResponseStringUint8NullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint8NullableArray(ctx context.Context, request string) (res []NilStringUint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint8_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint8_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint8NullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint8_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint8NullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint8NullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUint8NullableArrayArray invokes test_response_string_uint8_nullable_array_array operation.
//
// POST /test_response_string_uint8_nullable_array_array
func (c *Client) TestResponseStringUint8NullableArrayArray(ctx context.Context, request string) ([][]NilStringUint8, error) {
	res, err := c.sendTestResponseStringUint8NullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUint8NullableArrayArray(ctx context.Context, request string) (res [][]NilStringUint8, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint8_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint8_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUint8NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint8_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUint8NullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUint8NullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUintArray invokes test_response_string_uint_array operation.
//
// POST /test_response_string_uint_array
func (c *Client) TestResponseStringUintArray(ctx context.Context, request string) ([]uint, error) {
	res, err := c.sendTestResponseStringUintArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUintArray(ctx context.Context, request string) (res []uint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUintArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUintArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUintArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUintArrayArray invokes test_response_string_uint_array_array operation.
//
// POST /test_response_string_uint_array_array
func (c *Client) TestResponseStringUintArrayArray(ctx context.Context, request string) ([][]uint, error) {
	res, err := c.sendTestResponseStringUintArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUintArrayArray(ctx context.Context, request string) (res [][]uint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUintArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUintArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUintArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUintNullable invokes test_response_string_uint_nullable operation.
//
// POST /test_response_string_uint_nullable
func (c *Client) TestResponseStringUintNullable(ctx context.Context, request string) (NilStringUint, error) {
	res, err := c.sendTestResponseStringUintNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUintNullable(ctx context.Context, request string) (res NilStringUint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUintNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUintNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUintNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUintNullableArray invokes test_response_string_uint_nullable_array operation.
//
// POST /test_response_string_uint_nullable_array
func (c *Client) TestResponseStringUintNullableArray(ctx context.Context, request string) ([]NilStringUint, error) {
	res, err := c.sendTestResponseStringUintNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUintNullableArray(ctx context.Context, request string) (res []NilStringUint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUintNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUintNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUintNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUintNullableArrayArray invokes test_response_string_uint_nullable_array_array operation.
//
// POST /test_response_string_uint_nullable_array_array
func (c *Client) TestResponseStringUintNullableArrayArray(ctx context.Context, request string) ([][]NilStringUint, error) {
	res, err := c.sendTestResponseStringUintNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUintNullableArrayArray(ctx context.Context, request string) (res [][]NilStringUint, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uint_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_uint_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUintNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_uint_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUintNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUintNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnix invokes test_response_string_unix operation.
//
// POST /test_response_string_unix
func (c *Client) TestResponseStringUnix(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringUnix(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnix(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnix",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixArray invokes test_response_string_unix_array operation.
//
// POST /test_response_string_unix_array
func (c *Client) TestResponseStringUnixArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringUnixArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixArrayArray invokes test_response_string_unix_array_array operation.
//
// POST /test_response_string_unix_array_array
func (c *Client) TestResponseStringUnixArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringUnixArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicro invokes test_response_string_unix-micro operation.
//
// POST /test_response_string_unix-micro
func (c *Client) TestResponseStringUnixMicro(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringUnixMicro(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMicro(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-micro"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-micro"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMicroRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMicroResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroArray invokes test_response_string_unix-micro_array operation.
//
// POST /test_response_string_unix-micro_array
func (c *Client) TestResponseStringUnixMicroArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringUnixMicroArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMicroArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-micro_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-micro_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMicroArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMicroArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroArrayArray invokes test_response_string_unix-micro_array_array operation.
//
// POST /test_response_string_unix-micro_array_array
func (c *Client) TestResponseStringUnixMicroArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringUnixMicroArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMicroArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-micro_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-micro_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMicroArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMicroArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroNullable invokes test_response_string_unix-micro_nullable operation.
//
// POST /test_response_string_unix-micro_nullable
func (c *Client) TestResponseStringUnixMicroNullable(ctx context.Context, request string) (NilStringUnixMicro, error) {
	res, err := c.sendTestResponseStringUnixMicroNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMicroNullable(ctx context.Context, request string) (res NilStringUnixMicro, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-micro_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-micro_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMicroNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMicroNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroNullableArray invokes test_response_string_unix-micro_nullable_array operation.
//
// POST /test_response_string_unix-micro_nullable_array
func (c *Client) TestResponseStringUnixMicroNullableArray(ctx context.Context, request string) ([]NilStringUnixMicro, error) {
	res, err := c.sendTestResponseStringUnixMicroNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMicroNullableArray(ctx context.Context, request string) (res []NilStringUnixMicro, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-micro_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-micro_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMicroNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMicroNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMicroNullableArrayArray invokes test_response_string_unix-micro_nullable_array_array operation.
//
// POST /test_response_string_unix-micro_nullable_array_array
func (c *Client) TestResponseStringUnixMicroNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixMicro, error) {
	res, err := c.sendTestResponseStringUnixMicroNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMicroNullableArrayArray(ctx context.Context, request string) (res [][]NilStringUnixMicro, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-micro_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-micro_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMicroNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMicroNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilli invokes test_response_string_unix-milli operation.
//
// POST /test_response_string_unix-milli
func (c *Client) TestResponseStringUnixMilli(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringUnixMilli(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMilli(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-milli"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-milli"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMilliRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMilliResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliArray invokes test_response_string_unix-milli_array operation.
//
// POST /test_response_string_unix-milli_array
func (c *Client) TestResponseStringUnixMilliArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringUnixMilliArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMilliArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-milli_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-milli_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMilliArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMilliArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliArrayArray invokes test_response_string_unix-milli_array_array operation.
//
// POST /test_response_string_unix-milli_array_array
func (c *Client) TestResponseStringUnixMilliArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringUnixMilliArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMilliArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-milli_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-milli_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMilliArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMilliArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliNullable invokes test_response_string_unix-milli_nullable operation.
//
// POST /test_response_string_unix-milli_nullable
func (c *Client) TestResponseStringUnixMilliNullable(ctx context.Context, request string) (NilStringUnixMilli, error) {
	res, err := c.sendTestResponseStringUnixMilliNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMilliNullable(ctx context.Context, request string) (res NilStringUnixMilli, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-milli_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-milli_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMilliNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMilliNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliNullableArray invokes test_response_string_unix-milli_nullable_array operation.
//
// POST /test_response_string_unix-milli_nullable_array
func (c *Client) TestResponseStringUnixMilliNullableArray(ctx context.Context, request string) ([]NilStringUnixMilli, error) {
	res, err := c.sendTestResponseStringUnixMilliNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMilliNullableArray(ctx context.Context, request string) (res []NilStringUnixMilli, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-milli_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-milli_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMilliNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMilliNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixMilliNullableArrayArray invokes test_response_string_unix-milli_nullable_array_array operation.
//
// POST /test_response_string_unix-milli_nullable_array_array
func (c *Client) TestResponseStringUnixMilliNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixMilli, error) {
	res, err := c.sendTestResponseStringUnixMilliNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixMilliNullableArrayArray(ctx context.Context, request string) (res [][]NilStringUnixMilli, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-milli_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-milli_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixMilliNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixMilliNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNano invokes test_response_string_unix-nano operation.
//
// POST /test_response_string_unix-nano
func (c *Client) TestResponseStringUnixNano(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringUnixNano(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNano(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-nano"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-nano"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNanoRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNanoResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoArray invokes test_response_string_unix-nano_array operation.
//
// POST /test_response_string_unix-nano_array
func (c *Client) TestResponseStringUnixNanoArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringUnixNanoArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNanoArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-nano_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-nano_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNanoArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNanoArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoArrayArray invokes test_response_string_unix-nano_array_array operation.
//
// POST /test_response_string_unix-nano_array_array
func (c *Client) TestResponseStringUnixNanoArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringUnixNanoArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNanoArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-nano_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-nano_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNanoArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNanoArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoNullable invokes test_response_string_unix-nano_nullable operation.
//
// POST /test_response_string_unix-nano_nullable
func (c *Client) TestResponseStringUnixNanoNullable(ctx context.Context, request string) (NilStringUnixNano, error) {
	res, err := c.sendTestResponseStringUnixNanoNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNanoNullable(ctx context.Context, request string) (res NilStringUnixNano, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-nano_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-nano_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNanoNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNanoNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoNullableArray invokes test_response_string_unix-nano_nullable_array operation.
//
// POST /test_response_string_unix-nano_nullable_array
func (c *Client) TestResponseStringUnixNanoNullableArray(ctx context.Context, request string) ([]NilStringUnixNano, error) {
	res, err := c.sendTestResponseStringUnixNanoNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNanoNullableArray(ctx context.Context, request string) (res []NilStringUnixNano, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-nano_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-nano_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNanoNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNanoNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNanoNullableArrayArray invokes test_response_string_unix-nano_nullable_array_array operation.
//
// POST /test_response_string_unix-nano_nullable_array_array
func (c *Client) TestResponseStringUnixNanoNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixNano, error) {
	res, err := c.sendTestResponseStringUnixNanoNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNanoNullableArrayArray(ctx context.Context, request string) (res [][]NilStringUnixNano, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-nano_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-nano_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNanoNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNanoNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNullable invokes test_response_string_unix_nullable operation.
//
// POST /test_response_string_unix_nullable
func (c *Client) TestResponseStringUnixNullable(ctx context.Context, request string) (NilStringUnixSeconds, error) {
	res, err := c.sendTestResponseStringUnixNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNullable(ctx context.Context, request string) (res NilStringUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNullableArray invokes test_response_string_unix_nullable_array operation.
//
// POST /test_response_string_unix_nullable_array
func (c *Client) TestResponseStringUnixNullableArray(ctx context.Context, request string) ([]NilStringUnixSeconds, error) {
	res, err := c.sendTestResponseStringUnixNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNullableArray(ctx context.Context, request string) (res []NilStringUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixNullableArrayArray invokes test_response_string_unix_nullable_array_array operation.
//
// POST /test_response_string_unix_nullable_array_array
func (c *Client) TestResponseStringUnixNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixSeconds, error) {
	res, err := c.sendTestResponseStringUnixNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixNullableArrayArray(ctx context.Context, request string) (res [][]NilStringUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSeconds invokes test_response_string_unix-seconds operation.
//
// POST /test_response_string_unix-seconds
func (c *Client) TestResponseStringUnixSeconds(ctx context.Context, request string) (time.Time, error) {
	res, err := c.sendTestResponseStringUnixSeconds(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixSeconds(ctx context.Context, request string) (res time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-seconds"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-seconds"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixSecondsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixSecondsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsArray invokes test_response_string_unix-seconds_array operation.
//
// POST /test_response_string_unix-seconds_array
func (c *Client) TestResponseStringUnixSecondsArray(ctx context.Context, request string) ([]time.Time, error) {
	res, err := c.sendTestResponseStringUnixSecondsArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixSecondsArray(ctx context.Context, request string) (res []time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-seconds_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-seconds_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixSecondsArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixSecondsArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsArrayArray invokes test_response_string_unix-seconds_array_array operation.
//
// POST /test_response_string_unix-seconds_array_array
func (c *Client) TestResponseStringUnixSecondsArrayArray(ctx context.Context, request string) ([][]time.Time, error) {
	res, err := c.sendTestResponseStringUnixSecondsArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixSecondsArrayArray(ctx context.Context, request string) (res [][]time.Time, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-seconds_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-seconds_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixSecondsArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixSecondsArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsNullable invokes test_response_string_unix-seconds_nullable operation.
//
// POST /test_response_string_unix-seconds_nullable
func (c *Client) TestResponseStringUnixSecondsNullable(ctx context.Context, request string) (NilStringUnixSeconds, error) {
	res, err := c.sendTestResponseStringUnixSecondsNullable(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixSecondsNullable(ctx context.Context, request string) (res NilStringUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-seconds_nullable"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-seconds_nullable"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixSecondsNullableRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixSecondsNullableResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsNullableArray invokes test_response_string_unix-seconds_nullable_array operation.
//
// POST /test_response_string_unix-seconds_nullable_array
func (c *Client) TestResponseStringUnixSecondsNullableArray(ctx context.Context, request string) ([]NilStringUnixSeconds, error) {
	res, err := c.sendTestResponseStringUnixSecondsNullableArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixSecondsNullableArray(ctx context.Context, request string) (res []NilStringUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-seconds_nullable_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-seconds_nullable_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixSecondsNullableArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixSecondsNullableArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TestResponseStringUnixSecondsNullableArrayArray invokes test_response_string_unix-seconds_nullable_array_array operation.
//
// POST /test_response_string_unix-seconds_nullable_array_array
func (c *Client) TestResponseStringUnixSecondsNullableArrayArray(ctx context.Context, request string) ([][]NilStringUnixSeconds, error) {
	res, err := c.sendTestResponseStringUnixSecondsNullableArrayArray(ctx, request)
	return res, err
}

func (c *Client) sendTestResponseStringUnixSecondsNullableArrayArray(ctx context.Context, request string) (res [][]NilStringUnixSeconds, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable_array_array"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/test_response_string_unix-seconds_nullable_array_array"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TestResponseStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/test_response_string_unix-seconds_nullable_array_array"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeTestResponseStringUnixSecondsNullableArrayArrayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTestResponseStringUnixSecondsNullableArrayArrayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

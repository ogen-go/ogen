// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		DataGet: ogenreflect.RuntimeOperation{
			Name: "DataGet",
			ID:   "dataGet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DataGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "key",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "key",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
		DataGetAny: ogenreflect.RuntimeOperation{
			Name: "DataGetAny",
			ID:   "dataGetAny",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
		DataGetID: ogenreflect.RuntimeOperation{
			Name: "DataGetID",
			ID:   "dataGetID",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DataGetIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(string)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(string)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	DataGet    ogenreflect.RuntimeOperation
	DataGetAny ogenreflect.RuntimeOperation
	DataGetID  ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "DataGet":
		return p.DataGet, true
	case "DataGetAny":
		return p.DataGetAny, true
	case "DataGetID":
		return p.DataGetID, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "dataGet":
		return p.DataGet, true
	case "dataGetAny":
		return p.DataGetAny, true
	case "dataGetID":
		return p.DataGetID, true
	default:
		return op, false
	}
}

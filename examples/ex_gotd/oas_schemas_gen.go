// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Input for addStickerToSet.
// Ref: #/components/schemas/addStickerToSet
type AddStickerToSet struct {
	// User identifier of sticker set owner.
	UserID int64 `json:"user_id"`
	// Sticker set name.
	Name string `json:"name"`
	// PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px,
	// and either width or height must be exactly 512px. Pass a file_id as a String to send a file that
	// already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file
	// from the Internet, or upload a new one using multipart/form-data.
	PNGSticker OptString `json:"png_sticker,omitempty"`
	// TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.
	// org/stickers#animated-sticker-requirements for technical requirements.
	TgsSticker OptString `json:"tgs_sticker,omitempty"`
	// WEBM video with the sticker, uploaded using multipart/form-data. See https://core.telegram.
	// org/stickers#video-sticker-requirements for technical requirements.
	WebmSticker OptString `json:"webm_sticker,omitempty"`
	// One or more emoji corresponding to the sticker.
	Emojis       string          `json:"emojis"`
	MaskPosition OptMaskPosition `json:"mask_position,omitempty"`
}

// GetUserID returns the value of UserID.
func (s AddStickerToSet) GetUserID() int64 {
	return s.UserID
}

// GetName returns the value of Name.
func (s AddStickerToSet) GetName() string {
	return s.Name
}

// GetPNGSticker returns the value of PNGSticker.
func (s AddStickerToSet) GetPNGSticker() OptString {
	return s.PNGSticker
}

// GetTgsSticker returns the value of TgsSticker.
func (s AddStickerToSet) GetTgsSticker() OptString {
	return s.TgsSticker
}

// GetWebmSticker returns the value of WebmSticker.
func (s AddStickerToSet) GetWebmSticker() OptString {
	return s.WebmSticker
}

// GetEmojis returns the value of Emojis.
func (s AddStickerToSet) GetEmojis() string {
	return s.Emojis
}

// GetMaskPosition returns the value of MaskPosition.
func (s AddStickerToSet) GetMaskPosition() OptMaskPosition {
	return s.MaskPosition
}

// SetUserID sets the value of UserID.
func (s *AddStickerToSet) SetUserID(val int64) {
	s.UserID = val
}

// SetName sets the value of Name.
func (s *AddStickerToSet) SetName(val string) {
	s.Name = val
}

// SetPNGSticker sets the value of PNGSticker.
func (s *AddStickerToSet) SetPNGSticker(val OptString) {
	s.PNGSticker = val
}

// SetTgsSticker sets the value of TgsSticker.
func (s *AddStickerToSet) SetTgsSticker(val OptString) {
	s.TgsSticker = val
}

// SetWebmSticker sets the value of WebmSticker.
func (s *AddStickerToSet) SetWebmSticker(val OptString) {
	s.WebmSticker = val
}

// SetEmojis sets the value of Emojis.
func (s *AddStickerToSet) SetEmojis(val string) {
	s.Emojis = val
}

// SetMaskPosition sets the value of MaskPosition.
func (s *AddStickerToSet) SetMaskPosition(val OptMaskPosition) {
	s.MaskPosition = val
}

// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
// Ref: #/components/schemas/Animation
type Animation struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Video width as defined by sender.
	Width int `json:"width"`
	// Video height as defined by sender.
	Height int `json:"height"`
	// Duration of the video in seconds as defined by sender.
	Duration int          `json:"duration"`
	Thumb    OptPhotoSize `json:"thumb,omitempty"`
	// Original animation filename as defined by sender.
	FileName OptString `json:"file_name,omitempty"`
	// MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type,omitempty"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s Animation) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s Animation) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s Animation) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s Animation) GetHeight() int {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s Animation) GetDuration() int {
	return s.Duration
}

// GetThumb returns the value of Thumb.
func (s Animation) GetThumb() OptPhotoSize {
	return s.Thumb
}

// GetFileName returns the value of FileName.
func (s Animation) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s Animation) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s Animation) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Animation) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Animation) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *Animation) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Animation) SetHeight(val int) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *Animation) SetDuration(val int) {
	s.Duration = val
}

// SetThumb sets the value of Thumb.
func (s *Animation) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// SetFileName sets the value of FileName.
func (s *Animation) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Animation) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Animation) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Input for answerCallbackQuery.
// Ref: #/components/schemas/answerCallbackQuery
type AnswerCallbackQuery struct {
	// Unique identifier for the query to be answered.
	CallbackQueryID string `json:"callback_query_id"`
	// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters.
	Text OptString `json:"text,omitempty"`
	// If True, an alert will be shown by the client instead of a notification at the top of the chat
	// screen. Defaults to false.
	ShowAlert OptBool `json:"show_alert,omitempty"`
	// URL that will be opened by the user's client. If you have created a Game and accepted the
	// conditions via @Botfather, specify the URL that opens your game â€” note that this will only work
	// if the query comes from a callback_game button.Otherwise, you may use links like t.
	// me/your_bot?start=XXXX that open your bot with a parameter.
	URL OptString `json:"url,omitempty"`
	// The maximum amount of time in seconds that the result of the callback query may be cached
	// client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
	CacheTime OptInt `json:"cache_time,omitempty"`
}

// GetCallbackQueryID returns the value of CallbackQueryID.
func (s AnswerCallbackQuery) GetCallbackQueryID() string {
	return s.CallbackQueryID
}

// GetText returns the value of Text.
func (s AnswerCallbackQuery) GetText() OptString {
	return s.Text
}

// GetShowAlert returns the value of ShowAlert.
func (s AnswerCallbackQuery) GetShowAlert() OptBool {
	return s.ShowAlert
}

// GetURL returns the value of URL.
func (s AnswerCallbackQuery) GetURL() OptString {
	return s.URL
}

// GetCacheTime returns the value of CacheTime.
func (s AnswerCallbackQuery) GetCacheTime() OptInt {
	return s.CacheTime
}

// SetCallbackQueryID sets the value of CallbackQueryID.
func (s *AnswerCallbackQuery) SetCallbackQueryID(val string) {
	s.CallbackQueryID = val
}

// SetText sets the value of Text.
func (s *AnswerCallbackQuery) SetText(val OptString) {
	s.Text = val
}

// SetShowAlert sets the value of ShowAlert.
func (s *AnswerCallbackQuery) SetShowAlert(val OptBool) {
	s.ShowAlert = val
}

// SetURL sets the value of URL.
func (s *AnswerCallbackQuery) SetURL(val OptString) {
	s.URL = val
}

// SetCacheTime sets the value of CacheTime.
func (s *AnswerCallbackQuery) SetCacheTime(val OptInt) {
	s.CacheTime = val
}

// Input for answerInlineQuery.
// Ref: #/components/schemas/answerInlineQuery
type AnswerInlineQuery struct {
	// Unique identifier for the answered query.
	InlineQueryID string `json:"inline_query_id"`
	// A JSON-serialized array of results for the inline query.
	Results []InlineQueryResult `json:"results"`
	// The maximum amount of time in seconds that the result of the inline query may be cached on the
	// server. Defaults to 300.
	CacheTime OptInt `json:"cache_time,omitempty"`
	// Pass True, if results may be cached on the server side only for the user that sent the query. By
	// default, results may be returned to any user who sends the same query.
	IsPersonal OptBool `json:"is_personal,omitempty"`
	// Pass the offset that a client should send in the next query with the same text to receive more
	// results. Pass an empty string if there are no more results or if you don't support pagination.
	// Offset length can't exceed 64 bytes.
	NextOffset OptString `json:"next_offset,omitempty"`
	// If passed, clients will display a button with specified text that switches the user to a private
	// chat with the bot and sends the bot a start message with the parameter switch_pm_parameter.
	SwitchPmText OptString `json:"switch_pm_text,omitempty"`
	// Deep-linking parameter for the /start message sent to the bot when user presses the switch button.
	// 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that sends YouTube
	// videos can ask the user to connect the bot to their YouTube account to adapt search results
	// accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or
	// even before showing any. The user presses the button, switches to a private chat with the bot and,
	// in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done,
	// the bot can offer a switch_inline button so that the user can easily return to the chat where they
	// wanted to use the bot's inline capabilities.
	SwitchPmParameter OptString `json:"switch_pm_parameter,omitempty"`
}

// GetInlineQueryID returns the value of InlineQueryID.
func (s AnswerInlineQuery) GetInlineQueryID() string {
	return s.InlineQueryID
}

// GetResults returns the value of Results.
func (s AnswerInlineQuery) GetResults() []InlineQueryResult {
	return s.Results
}

// GetCacheTime returns the value of CacheTime.
func (s AnswerInlineQuery) GetCacheTime() OptInt {
	return s.CacheTime
}

// GetIsPersonal returns the value of IsPersonal.
func (s AnswerInlineQuery) GetIsPersonal() OptBool {
	return s.IsPersonal
}

// GetNextOffset returns the value of NextOffset.
func (s AnswerInlineQuery) GetNextOffset() OptString {
	return s.NextOffset
}

// GetSwitchPmText returns the value of SwitchPmText.
func (s AnswerInlineQuery) GetSwitchPmText() OptString {
	return s.SwitchPmText
}

// GetSwitchPmParameter returns the value of SwitchPmParameter.
func (s AnswerInlineQuery) GetSwitchPmParameter() OptString {
	return s.SwitchPmParameter
}

// SetInlineQueryID sets the value of InlineQueryID.
func (s *AnswerInlineQuery) SetInlineQueryID(val string) {
	s.InlineQueryID = val
}

// SetResults sets the value of Results.
func (s *AnswerInlineQuery) SetResults(val []InlineQueryResult) {
	s.Results = val
}

// SetCacheTime sets the value of CacheTime.
func (s *AnswerInlineQuery) SetCacheTime(val OptInt) {
	s.CacheTime = val
}

// SetIsPersonal sets the value of IsPersonal.
func (s *AnswerInlineQuery) SetIsPersonal(val OptBool) {
	s.IsPersonal = val
}

// SetNextOffset sets the value of NextOffset.
func (s *AnswerInlineQuery) SetNextOffset(val OptString) {
	s.NextOffset = val
}

// SetSwitchPmText sets the value of SwitchPmText.
func (s *AnswerInlineQuery) SetSwitchPmText(val OptString) {
	s.SwitchPmText = val
}

// SetSwitchPmParameter sets the value of SwitchPmParameter.
func (s *AnswerInlineQuery) SetSwitchPmParameter(val OptString) {
	s.SwitchPmParameter = val
}

// Input for answerPreCheckoutQuery.
// Ref: #/components/schemas/answerPreCheckoutQuery
type AnswerPreCheckoutQuery struct {
	// Unique identifier for the query to be answered.
	PreCheckoutQueryID string `json:"pre_checkout_query_id"`
	// Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed
	// with the order. Use False if there are any problems.
	Ok bool `json:"ok"`
	// Required if ok is False. Error message in human readable form that explains the reason for failure
	// to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black
	// T-shirts while you were busy filling out your payment details. Please choose a different color or
	// garment!"). Telegram will display this message to the user.
	ErrorMessage OptString `json:"error_message,omitempty"`
}

// GetPreCheckoutQueryID returns the value of PreCheckoutQueryID.
func (s AnswerPreCheckoutQuery) GetPreCheckoutQueryID() string {
	return s.PreCheckoutQueryID
}

// GetOk returns the value of Ok.
func (s AnswerPreCheckoutQuery) GetOk() bool {
	return s.Ok
}

// GetErrorMessage returns the value of ErrorMessage.
func (s AnswerPreCheckoutQuery) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetPreCheckoutQueryID sets the value of PreCheckoutQueryID.
func (s *AnswerPreCheckoutQuery) SetPreCheckoutQueryID(val string) {
	s.PreCheckoutQueryID = val
}

// SetOk sets the value of Ok.
func (s *AnswerPreCheckoutQuery) SetOk(val bool) {
	s.Ok = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *AnswerPreCheckoutQuery) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// Input for answerShippingQuery.
// Ref: #/components/schemas/answerShippingQuery
type AnswerShippingQuery struct {
	// Unique identifier for the query to be answered.
	ShippingQueryID string `json:"shipping_query_id"`
	// Specify True if delivery to the specified address is possible and False if there are any problems
	// (for example, if delivery to the specified address is not possible).
	Ok bool `json:"ok"`
	// Required if ok is True. A JSON-serialized array of available shipping options.
	ShippingOptions []ShippingOption `json:"shipping_options,omitempty"`
	// Required if ok is False. Error message in human readable form that explains why it is impossible
	// to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram
	// will display this message to the user.
	ErrorMessage OptString `json:"error_message,omitempty"`
}

// GetShippingQueryID returns the value of ShippingQueryID.
func (s AnswerShippingQuery) GetShippingQueryID() string {
	return s.ShippingQueryID
}

// GetOk returns the value of Ok.
func (s AnswerShippingQuery) GetOk() bool {
	return s.Ok
}

// GetShippingOptions returns the value of ShippingOptions.
func (s AnswerShippingQuery) GetShippingOptions() []ShippingOption {
	return s.ShippingOptions
}

// GetErrorMessage returns the value of ErrorMessage.
func (s AnswerShippingQuery) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetShippingQueryID sets the value of ShippingQueryID.
func (s *AnswerShippingQuery) SetShippingQueryID(val string) {
	s.ShippingQueryID = val
}

// SetOk sets the value of Ok.
func (s *AnswerShippingQuery) SetOk(val bool) {
	s.Ok = val
}

// SetShippingOptions sets the value of ShippingOptions.
func (s *AnswerShippingQuery) SetShippingOptions(val []ShippingOption) {
	s.ShippingOptions = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *AnswerShippingQuery) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// Input for answerWebAppQuery.
// Ref: #/components/schemas/answerWebAppQuery
type AnswerWebAppQuery struct {
	// Unique identifier for the query to be answered.
	WebAppQueryID string            `json:"web_app_query_id"`
	Result        InlineQueryResult `json:"result"`
}

// GetWebAppQueryID returns the value of WebAppQueryID.
func (s AnswerWebAppQuery) GetWebAppQueryID() string {
	return s.WebAppQueryID
}

// GetResult returns the value of Result.
func (s AnswerWebAppQuery) GetResult() InlineQueryResult {
	return s.Result
}

// SetWebAppQueryID sets the value of WebAppQueryID.
func (s *AnswerWebAppQuery) SetWebAppQueryID(val string) {
	s.WebAppQueryID = val
}

// SetResult sets the value of Result.
func (s *AnswerWebAppQuery) SetResult(val InlineQueryResult) {
	s.Result = val
}

// Input for approveChatJoinRequest.
// Ref: #/components/schemas/approveChatJoinRequest
type ApproveChatJoinRequest struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s ApproveChatJoinRequest) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s ApproveChatJoinRequest) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *ApproveChatJoinRequest) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *ApproveChatJoinRequest) SetUserID(val int64) {
	s.UserID = val
}

// This object represents an audio file to be treated as music by the Telegram clients.
// Ref: #/components/schemas/Audio
type Audio struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Duration of the audio in seconds as defined by sender.
	Duration int `json:"duration"`
	// Performer of the audio as defined by sender or by audio tags.
	Performer OptString `json:"performer,omitempty"`
	// Title of the audio as defined by sender or by audio tags.
	Title OptString `json:"title,omitempty"`
	// Original filename as defined by sender.
	FileName OptString `json:"file_name,omitempty"`
	// MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type,omitempty"`
	// File size in bytes.
	FileSize OptInt       `json:"file_size,omitempty"`
	Thumb    OptPhotoSize `json:"thumb,omitempty"`
}

// GetFileID returns the value of FileID.
func (s Audio) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s Audio) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetDuration returns the value of Duration.
func (s Audio) GetDuration() int {
	return s.Duration
}

// GetPerformer returns the value of Performer.
func (s Audio) GetPerformer() OptString {
	return s.Performer
}

// GetTitle returns the value of Title.
func (s Audio) GetTitle() OptString {
	return s.Title
}

// GetFileName returns the value of FileName.
func (s Audio) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s Audio) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s Audio) GetFileSize() OptInt {
	return s.FileSize
}

// GetThumb returns the value of Thumb.
func (s Audio) GetThumb() OptPhotoSize {
	return s.Thumb
}

// SetFileID sets the value of FileID.
func (s *Audio) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Audio) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetDuration sets the value of Duration.
func (s *Audio) SetDuration(val int) {
	s.Duration = val
}

// SetPerformer sets the value of Performer.
func (s *Audio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetTitle sets the value of Title.
func (s *Audio) SetTitle(val OptString) {
	s.Title = val
}

// SetFileName sets the value of FileName.
func (s *Audio) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Audio) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Audio) SetFileSize(val OptInt) {
	s.FileSize = val
}

// SetThumb sets the value of Thumb.
func (s *Audio) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// Input for banChatMember.
// Ref: #/components/schemas/banChatMember
type BanChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less
	// than 30 seconds from the current time they are considered to be banned forever. Applied for
	// supergroups and channels only.
	UntilDate OptInt `json:"until_date,omitempty"`
	// Pass True to delete all messages from the chat for the user that is being removed. If False, the
	// user will be able to see messages in the group that were sent before the user was removed. Always
	// True for supergroups and channels.
	RevokeMessages OptBool `json:"revoke_messages,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s BanChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s BanChatMember) GetUserID() int64 {
	return s.UserID
}

// GetUntilDate returns the value of UntilDate.
func (s BanChatMember) GetUntilDate() OptInt {
	return s.UntilDate
}

// GetRevokeMessages returns the value of RevokeMessages.
func (s BanChatMember) GetRevokeMessages() OptBool {
	return s.RevokeMessages
}

// SetChatID sets the value of ChatID.
func (s *BanChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *BanChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetUntilDate sets the value of UntilDate.
func (s *BanChatMember) SetUntilDate(val OptInt) {
	s.UntilDate = val
}

// SetRevokeMessages sets the value of RevokeMessages.
func (s *BanChatMember) SetRevokeMessages(val OptBool) {
	s.RevokeMessages = val
}

// Input for banChatSenderChat.
// Ref: #/components/schemas/banChatSenderChat
type BanChatSenderChat struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target sender chat.
	SenderChatID int64 `json:"sender_chat_id"`
}

// GetChatID returns the value of ChatID.
func (s BanChatSenderChat) GetChatID() ID {
	return s.ChatID
}

// GetSenderChatID returns the value of SenderChatID.
func (s BanChatSenderChat) GetSenderChatID() int64 {
	return s.SenderChatID
}

// SetChatID sets the value of ChatID.
func (s *BanChatSenderChat) SetChatID(val ID) {
	s.ChatID = val
}

// SetSenderChatID sets the value of SenderChatID.
func (s *BanChatSenderChat) SetSenderChatID(val int64) {
	s.SenderChatID = val
}

// This object represents a bot command.
// Ref: #/components/schemas/BotCommand
type BotCommand struct {
	// Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and
	// underscores.
	Command string `json:"command"`
	// Description of the command; 1-256 characters.
	Description string `json:"description"`
}

// GetCommand returns the value of Command.
func (s BotCommand) GetCommand() string {
	return s.Command
}

// GetDescription returns the value of Description.
func (s BotCommand) GetDescription() string {
	return s.Description
}

// SetCommand sets the value of Command.
func (s *BotCommand) SetCommand(val string) {
	s.Command = val
}

// SetDescription sets the value of Description.
func (s *BotCommand) SetDescription(val string) {
	s.Description = val
}

// This object represents the scope to which bot commands are applied.  7 scopes are supported:.
// Ref: #/components/schemas/BotCommandScope
// BotCommandScope represents sum type.
type BotCommandScope struct {
	Type                                 BotCommandScopeType // switch on this field
	BotCommandScopeDefault               BotCommandScopeDefault
	BotCommandScopeAllPrivateChats       BotCommandScopeAllPrivateChats
	BotCommandScopeAllGroupChats         BotCommandScopeAllGroupChats
	BotCommandScopeAllChatAdministrators BotCommandScopeAllChatAdministrators
	BotCommandScopeChat                  BotCommandScopeChat
	BotCommandScopeChatAdministrators    BotCommandScopeChatAdministrators
	BotCommandScopeChatMember            BotCommandScopeChatMember
}

// BotCommandScopeType is oneOf type of BotCommandScope.
type BotCommandScopeType string

// Possible values for BotCommandScopeType.
const (
	BotCommandScopeDefaultBotCommandScope               BotCommandScopeType = "BotCommandScopeDefault"
	BotCommandScopeAllPrivateChatsBotCommandScope       BotCommandScopeType = "BotCommandScopeAllPrivateChats"
	BotCommandScopeAllGroupChatsBotCommandScope         BotCommandScopeType = "BotCommandScopeAllGroupChats"
	BotCommandScopeAllChatAdministratorsBotCommandScope BotCommandScopeType = "BotCommandScopeAllChatAdministrators"
	BotCommandScopeChatBotCommandScope                  BotCommandScopeType = "BotCommandScopeChat"
	BotCommandScopeChatAdministratorsBotCommandScope    BotCommandScopeType = "BotCommandScopeChatAdministrators"
	BotCommandScopeChatMemberBotCommandScope            BotCommandScopeType = "BotCommandScopeChatMember"
)

// IsBotCommandScopeDefault reports whether BotCommandScope is BotCommandScopeDefault.
func (s BotCommandScope) IsBotCommandScopeDefault() bool {
	return s.Type == BotCommandScopeDefaultBotCommandScope
}

// IsBotCommandScopeAllPrivateChats reports whether BotCommandScope is BotCommandScopeAllPrivateChats.
func (s BotCommandScope) IsBotCommandScopeAllPrivateChats() bool {
	return s.Type == BotCommandScopeAllPrivateChatsBotCommandScope
}

// IsBotCommandScopeAllGroupChats reports whether BotCommandScope is BotCommandScopeAllGroupChats.
func (s BotCommandScope) IsBotCommandScopeAllGroupChats() bool {
	return s.Type == BotCommandScopeAllGroupChatsBotCommandScope
}

// IsBotCommandScopeAllChatAdministrators reports whether BotCommandScope is BotCommandScopeAllChatAdministrators.
func (s BotCommandScope) IsBotCommandScopeAllChatAdministrators() bool {
	return s.Type == BotCommandScopeAllChatAdministratorsBotCommandScope
}

// IsBotCommandScopeChat reports whether BotCommandScope is BotCommandScopeChat.
func (s BotCommandScope) IsBotCommandScopeChat() bool {
	return s.Type == BotCommandScopeChatBotCommandScope
}

// IsBotCommandScopeChatAdministrators reports whether BotCommandScope is BotCommandScopeChatAdministrators.
func (s BotCommandScope) IsBotCommandScopeChatAdministrators() bool {
	return s.Type == BotCommandScopeChatAdministratorsBotCommandScope
}

// IsBotCommandScopeChatMember reports whether BotCommandScope is BotCommandScopeChatMember.
func (s BotCommandScope) IsBotCommandScopeChatMember() bool {
	return s.Type == BotCommandScopeChatMemberBotCommandScope
}

// SetBotCommandScopeDefault sets BotCommandScope to BotCommandScopeDefault.
func (s *BotCommandScope) SetBotCommandScopeDefault(v BotCommandScopeDefault) {
	s.Type = BotCommandScopeDefaultBotCommandScope
	s.BotCommandScopeDefault = v
}

// GetBotCommandScopeDefault returns BotCommandScopeDefault and true boolean if BotCommandScope is BotCommandScopeDefault.
func (s BotCommandScope) GetBotCommandScopeDefault() (v BotCommandScopeDefault, ok bool) {
	if !s.IsBotCommandScopeDefault() {
		return v, false
	}
	return s.BotCommandScopeDefault, true
}

// NewBotCommandScopeDefaultBotCommandScope returns new BotCommandScope from BotCommandScopeDefault.
func NewBotCommandScopeDefaultBotCommandScope(v BotCommandScopeDefault) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeDefault(v)
	return s
}

// SetBotCommandScopeAllPrivateChats sets BotCommandScope to BotCommandScopeAllPrivateChats.
func (s *BotCommandScope) SetBotCommandScopeAllPrivateChats(v BotCommandScopeAllPrivateChats) {
	s.Type = BotCommandScopeAllPrivateChatsBotCommandScope
	s.BotCommandScopeAllPrivateChats = v
}

// GetBotCommandScopeAllPrivateChats returns BotCommandScopeAllPrivateChats and true boolean if BotCommandScope is BotCommandScopeAllPrivateChats.
func (s BotCommandScope) GetBotCommandScopeAllPrivateChats() (v BotCommandScopeAllPrivateChats, ok bool) {
	if !s.IsBotCommandScopeAllPrivateChats() {
		return v, false
	}
	return s.BotCommandScopeAllPrivateChats, true
}

// NewBotCommandScopeAllPrivateChatsBotCommandScope returns new BotCommandScope from BotCommandScopeAllPrivateChats.
func NewBotCommandScopeAllPrivateChatsBotCommandScope(v BotCommandScopeAllPrivateChats) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllPrivateChats(v)
	return s
}

// SetBotCommandScopeAllGroupChats sets BotCommandScope to BotCommandScopeAllGroupChats.
func (s *BotCommandScope) SetBotCommandScopeAllGroupChats(v BotCommandScopeAllGroupChats) {
	s.Type = BotCommandScopeAllGroupChatsBotCommandScope
	s.BotCommandScopeAllGroupChats = v
}

// GetBotCommandScopeAllGroupChats returns BotCommandScopeAllGroupChats and true boolean if BotCommandScope is BotCommandScopeAllGroupChats.
func (s BotCommandScope) GetBotCommandScopeAllGroupChats() (v BotCommandScopeAllGroupChats, ok bool) {
	if !s.IsBotCommandScopeAllGroupChats() {
		return v, false
	}
	return s.BotCommandScopeAllGroupChats, true
}

// NewBotCommandScopeAllGroupChatsBotCommandScope returns new BotCommandScope from BotCommandScopeAllGroupChats.
func NewBotCommandScopeAllGroupChatsBotCommandScope(v BotCommandScopeAllGroupChats) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllGroupChats(v)
	return s
}

// SetBotCommandScopeAllChatAdministrators sets BotCommandScope to BotCommandScopeAllChatAdministrators.
func (s *BotCommandScope) SetBotCommandScopeAllChatAdministrators(v BotCommandScopeAllChatAdministrators) {
	s.Type = BotCommandScopeAllChatAdministratorsBotCommandScope
	s.BotCommandScopeAllChatAdministrators = v
}

// GetBotCommandScopeAllChatAdministrators returns BotCommandScopeAllChatAdministrators and true boolean if BotCommandScope is BotCommandScopeAllChatAdministrators.
func (s BotCommandScope) GetBotCommandScopeAllChatAdministrators() (v BotCommandScopeAllChatAdministrators, ok bool) {
	if !s.IsBotCommandScopeAllChatAdministrators() {
		return v, false
	}
	return s.BotCommandScopeAllChatAdministrators, true
}

// NewBotCommandScopeAllChatAdministratorsBotCommandScope returns new BotCommandScope from BotCommandScopeAllChatAdministrators.
func NewBotCommandScopeAllChatAdministratorsBotCommandScope(v BotCommandScopeAllChatAdministrators) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllChatAdministrators(v)
	return s
}

// SetBotCommandScopeChat sets BotCommandScope to BotCommandScopeChat.
func (s *BotCommandScope) SetBotCommandScopeChat(v BotCommandScopeChat) {
	s.Type = BotCommandScopeChatBotCommandScope
	s.BotCommandScopeChat = v
}

// GetBotCommandScopeChat returns BotCommandScopeChat and true boolean if BotCommandScope is BotCommandScopeChat.
func (s BotCommandScope) GetBotCommandScopeChat() (v BotCommandScopeChat, ok bool) {
	if !s.IsBotCommandScopeChat() {
		return v, false
	}
	return s.BotCommandScopeChat, true
}

// NewBotCommandScopeChatBotCommandScope returns new BotCommandScope from BotCommandScopeChat.
func NewBotCommandScopeChatBotCommandScope(v BotCommandScopeChat) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChat(v)
	return s
}

// SetBotCommandScopeChatAdministrators sets BotCommandScope to BotCommandScopeChatAdministrators.
func (s *BotCommandScope) SetBotCommandScopeChatAdministrators(v BotCommandScopeChatAdministrators) {
	s.Type = BotCommandScopeChatAdministratorsBotCommandScope
	s.BotCommandScopeChatAdministrators = v
}

// GetBotCommandScopeChatAdministrators returns BotCommandScopeChatAdministrators and true boolean if BotCommandScope is BotCommandScopeChatAdministrators.
func (s BotCommandScope) GetBotCommandScopeChatAdministrators() (v BotCommandScopeChatAdministrators, ok bool) {
	if !s.IsBotCommandScopeChatAdministrators() {
		return v, false
	}
	return s.BotCommandScopeChatAdministrators, true
}

// NewBotCommandScopeChatAdministratorsBotCommandScope returns new BotCommandScope from BotCommandScopeChatAdministrators.
func NewBotCommandScopeChatAdministratorsBotCommandScope(v BotCommandScopeChatAdministrators) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChatAdministrators(v)
	return s
}

// SetBotCommandScopeChatMember sets BotCommandScope to BotCommandScopeChatMember.
func (s *BotCommandScope) SetBotCommandScopeChatMember(v BotCommandScopeChatMember) {
	s.Type = BotCommandScopeChatMemberBotCommandScope
	s.BotCommandScopeChatMember = v
}

// GetBotCommandScopeChatMember returns BotCommandScopeChatMember and true boolean if BotCommandScope is BotCommandScopeChatMember.
func (s BotCommandScope) GetBotCommandScopeChatMember() (v BotCommandScopeChatMember, ok bool) {
	if !s.IsBotCommandScopeChatMember() {
		return v, false
	}
	return s.BotCommandScopeChatMember, true
}

// NewBotCommandScopeChatMemberBotCommandScope returns new BotCommandScope from BotCommandScopeChatMember.
func NewBotCommandScopeChatMemberBotCommandScope(v BotCommandScopeChatMember) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChatMember(v)
	return s
}

// Represents the scope of bot commands, covering all group and supergroup chat administrators.
// Ref: #/components/schemas/BotCommandScopeAllChatAdministrators
type BotCommandScopeAllChatAdministrators struct{}

// Represents the scope of bot commands, covering all group and supergroup chats.
// Ref: #/components/schemas/BotCommandScopeAllGroupChats
type BotCommandScopeAllGroupChats struct{}

// Represents the scope of bot commands, covering all private chats.
// Ref: #/components/schemas/BotCommandScopeAllPrivateChats
type BotCommandScopeAllPrivateChats struct{}

// Represents the scope of bot commands, covering a specific chat.
// Ref: #/components/schemas/BotCommandScopeChat
type BotCommandScopeChat struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s BotCommandScopeChat) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *BotCommandScopeChat) SetChatID(val ID) {
	s.ChatID = val
}

// Represents the scope of bot commands, covering all administrators of a specific group or
// supergroup chat.
// Ref: #/components/schemas/BotCommandScopeChatAdministrators
type BotCommandScopeChatAdministrators struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s BotCommandScopeChatAdministrators) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *BotCommandScopeChatAdministrators) SetChatID(val ID) {
	s.ChatID = val
}

// Represents the scope of bot commands, covering a specific member of a group or supergroup chat.
// Ref: #/components/schemas/BotCommandScopeChatMember
type BotCommandScopeChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s BotCommandScopeChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s BotCommandScopeChatMember) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *BotCommandScopeChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *BotCommandScopeChatMember) SetUserID(val int64) {
	s.UserID = val
}

// Represents the default scope of bot commands. Default commands are used if no commands with a
// narrower scope are specified for the user.
// Ref: #/components/schemas/BotCommandScopeDefault
type BotCommandScopeDefault struct{}

// A placeholder, currently holds no information. Use BotFather to set up your game.
// Ref: #/components/schemas/CallbackGame
type CallbackGame struct{}

// This object represents an incoming callback query from a callback button in an inline keyboard. If
// the button that originated the query was attached to a message sent by the bot, the field message
// will be present. If the button was attached to a message sent via the bot (in inline mode), the
// field inline_message_id will be present. Exactly one of the fields data or game_short_name will be
// present.
// Ref: #/components/schemas/CallbackQuery
type CallbackQuery struct {
	// Unique identifier for this query.
	ID      string     `json:"id"`
	From    User       `json:"from"`
	Message OptMessage `json:"message,omitempty"`
	// Identifier of the message sent via the bot in inline mode, that originated the query.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
	// Global identifier, uniquely corresponding to the chat to which the message with the callback
	// button was sent. Useful for high scores in games.
	ChatInstance string `json:"chat_instance"`
	// Data associated with the callback button. Be aware that a bad client can send arbitrary data in
	// this field.
	Data OptString `json:"data,omitempty"`
	// Short name of a Game to be returned, serves as the unique identifier for the game.
	GameShortName OptString `json:"game_short_name,omitempty"`
}

// GetID returns the value of ID.
func (s CallbackQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s CallbackQuery) GetFrom() User {
	return s.From
}

// GetMessage returns the value of Message.
func (s CallbackQuery) GetMessage() OptMessage {
	return s.Message
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s CallbackQuery) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetChatInstance returns the value of ChatInstance.
func (s CallbackQuery) GetChatInstance() string {
	return s.ChatInstance
}

// GetData returns the value of Data.
func (s CallbackQuery) GetData() OptString {
	return s.Data
}

// GetGameShortName returns the value of GameShortName.
func (s CallbackQuery) GetGameShortName() OptString {
	return s.GameShortName
}

// SetID sets the value of ID.
func (s *CallbackQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *CallbackQuery) SetFrom(val User) {
	s.From = val
}

// SetMessage sets the value of Message.
func (s *CallbackQuery) SetMessage(val OptMessage) {
	s.Message = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *CallbackQuery) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetChatInstance sets the value of ChatInstance.
func (s *CallbackQuery) SetChatInstance(val string) {
	s.ChatInstance = val
}

// SetData sets the value of Data.
func (s *CallbackQuery) SetData(val OptString) {
	s.Data = val
}

// SetGameShortName sets the value of GameShortName.
func (s *CallbackQuery) SetGameShortName(val OptString) {
	s.GameShortName = val
}

// This object represents a chat.
// Ref: #/components/schemas/Chat
type Chat struct {
	// Unique identifier for this chat. This number may have more than 32 significant bits and some
	// programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
	// significant bits, so a signed 64-bit integer or double-precision float type are safe for storing
	// this identifier.
	ID int64 `json:"id"`
	// Type of chat, can be either "private", "group", "supergroup" or "channel".
	Type ChatType `json:"type"`
	// Title, for supergroups, channels and group chats.
	Title OptString `json:"title,omitempty"`
	// Username, for private chats, supergroups and channels if available.
	Username OptString `json:"username,omitempty"`
	// First name of the other party in a private chat.
	FirstName OptString `json:"first_name,omitempty"`
	// Last name of the other party in a private chat.
	LastName OptString    `json:"last_name,omitempty"`
	Photo    OptChatPhoto `json:"photo,omitempty"`
	// Bio of the other party in a private chat. Returned only in getChat.
	Bio OptString `json:"bio,omitempty"`
	// True, if privacy settings of the other party in the private chat allows to use
	// tg://user?id=<user_id> links only in chats with the user. Returned only in getChat.
	HasPrivateForwards OptBool `json:"has_private_forwards,omitempty"`
	// Description, for groups, supergroups and channel chats. Returned only in getChat.
	Description OptString `json:"description,omitempty"`
	// Primary invite link, for groups, supergroups and channel chats. Returned only in getChat.
	InviteLink    OptString          `json:"invite_link,omitempty"`
	PinnedMessage *Message           `json:"pinned_message,omitempty"`
	Permissions   OptChatPermissions `json:"permissions,omitempty"`
	// For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged
	// user; in seconds. Returned only in getChat.
	SlowModeDelay OptInt `json:"slow_mode_delay,omitempty"`
	// The time after which all messages sent to the chat will be automatically deleted; in seconds.
	// Returned only in getChat.
	MessageAutoDeleteTime OptInt `json:"message_auto_delete_time,omitempty"`
	// True, if messages from the chat can't be forwarded to other chats. Returned only in getChat.
	HasProtectedContent OptBool `json:"has_protected_content,omitempty"`
	// For supergroups, name of group sticker set. Returned only in getChat.
	StickerSetName OptString `json:"sticker_set_name,omitempty"`
	// True, if the bot can change the group sticker set. Returned only in getChat.
	CanSetStickerSet OptBool `json:"can_set_sticker_set,omitempty"`
	// Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice
	// versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some
	// programming languages may have difficulty/silent defects in interpreting it. But it is smaller
	// than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this
	// identifier. Returned only in getChat.
	LinkedChatID                OptInt64        `json:"linked_chat_id,omitempty"`
	Location                    OptChatLocation `json:"location,omitempty"`
	AllMembersAreAdministrators OptBool         `json:"all_members_are_administrators,omitempty"`
}

// GetID returns the value of ID.
func (s Chat) GetID() int64 {
	return s.ID
}

// GetType returns the value of Type.
func (s Chat) GetType() ChatType {
	return s.Type
}

// GetTitle returns the value of Title.
func (s Chat) GetTitle() OptString {
	return s.Title
}

// GetUsername returns the value of Username.
func (s Chat) GetUsername() OptString {
	return s.Username
}

// GetFirstName returns the value of FirstName.
func (s Chat) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s Chat) GetLastName() OptString {
	return s.LastName
}

// GetPhoto returns the value of Photo.
func (s Chat) GetPhoto() OptChatPhoto {
	return s.Photo
}

// GetBio returns the value of Bio.
func (s Chat) GetBio() OptString {
	return s.Bio
}

// GetHasPrivateForwards returns the value of HasPrivateForwards.
func (s Chat) GetHasPrivateForwards() OptBool {
	return s.HasPrivateForwards
}

// GetDescription returns the value of Description.
func (s Chat) GetDescription() OptString {
	return s.Description
}

// GetInviteLink returns the value of InviteLink.
func (s Chat) GetInviteLink() OptString {
	return s.InviteLink
}

// GetPinnedMessage returns the value of PinnedMessage.
func (s Chat) GetPinnedMessage() *Message {
	return s.PinnedMessage
}

// GetPermissions returns the value of Permissions.
func (s Chat) GetPermissions() OptChatPermissions {
	return s.Permissions
}

// GetSlowModeDelay returns the value of SlowModeDelay.
func (s Chat) GetSlowModeDelay() OptInt {
	return s.SlowModeDelay
}

// GetMessageAutoDeleteTime returns the value of MessageAutoDeleteTime.
func (s Chat) GetMessageAutoDeleteTime() OptInt {
	return s.MessageAutoDeleteTime
}

// GetHasProtectedContent returns the value of HasProtectedContent.
func (s Chat) GetHasProtectedContent() OptBool {
	return s.HasProtectedContent
}

// GetStickerSetName returns the value of StickerSetName.
func (s Chat) GetStickerSetName() OptString {
	return s.StickerSetName
}

// GetCanSetStickerSet returns the value of CanSetStickerSet.
func (s Chat) GetCanSetStickerSet() OptBool {
	return s.CanSetStickerSet
}

// GetLinkedChatID returns the value of LinkedChatID.
func (s Chat) GetLinkedChatID() OptInt64 {
	return s.LinkedChatID
}

// GetLocation returns the value of Location.
func (s Chat) GetLocation() OptChatLocation {
	return s.Location
}

// GetAllMembersAreAdministrators returns the value of AllMembersAreAdministrators.
func (s Chat) GetAllMembersAreAdministrators() OptBool {
	return s.AllMembersAreAdministrators
}

// SetID sets the value of ID.
func (s *Chat) SetID(val int64) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Chat) SetType(val ChatType) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Chat) SetTitle(val OptString) {
	s.Title = val
}

// SetUsername sets the value of Username.
func (s *Chat) SetUsername(val OptString) {
	s.Username = val
}

// SetFirstName sets the value of FirstName.
func (s *Chat) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *Chat) SetLastName(val OptString) {
	s.LastName = val
}

// SetPhoto sets the value of Photo.
func (s *Chat) SetPhoto(val OptChatPhoto) {
	s.Photo = val
}

// SetBio sets the value of Bio.
func (s *Chat) SetBio(val OptString) {
	s.Bio = val
}

// SetHasPrivateForwards sets the value of HasPrivateForwards.
func (s *Chat) SetHasPrivateForwards(val OptBool) {
	s.HasPrivateForwards = val
}

// SetDescription sets the value of Description.
func (s *Chat) SetDescription(val OptString) {
	s.Description = val
}

// SetInviteLink sets the value of InviteLink.
func (s *Chat) SetInviteLink(val OptString) {
	s.InviteLink = val
}

// SetPinnedMessage sets the value of PinnedMessage.
func (s *Chat) SetPinnedMessage(val *Message) {
	s.PinnedMessage = val
}

// SetPermissions sets the value of Permissions.
func (s *Chat) SetPermissions(val OptChatPermissions) {
	s.Permissions = val
}

// SetSlowModeDelay sets the value of SlowModeDelay.
func (s *Chat) SetSlowModeDelay(val OptInt) {
	s.SlowModeDelay = val
}

// SetMessageAutoDeleteTime sets the value of MessageAutoDeleteTime.
func (s *Chat) SetMessageAutoDeleteTime(val OptInt) {
	s.MessageAutoDeleteTime = val
}

// SetHasProtectedContent sets the value of HasProtectedContent.
func (s *Chat) SetHasProtectedContent(val OptBool) {
	s.HasProtectedContent = val
}

// SetStickerSetName sets the value of StickerSetName.
func (s *Chat) SetStickerSetName(val OptString) {
	s.StickerSetName = val
}

// SetCanSetStickerSet sets the value of CanSetStickerSet.
func (s *Chat) SetCanSetStickerSet(val OptBool) {
	s.CanSetStickerSet = val
}

// SetLinkedChatID sets the value of LinkedChatID.
func (s *Chat) SetLinkedChatID(val OptInt64) {
	s.LinkedChatID = val
}

// SetLocation sets the value of Location.
func (s *Chat) SetLocation(val OptChatLocation) {
	s.Location = val
}

// SetAllMembersAreAdministrators sets the value of AllMembersAreAdministrators.
func (s *Chat) SetAllMembersAreAdministrators(val OptBool) {
	s.AllMembersAreAdministrators = val
}

// Represents the rights of an administrator in a chat.
// Ref: #/components/schemas/ChatAdministratorRights
type ChatAdministratorRights struct {
	// True, if the user's presence in the chat is hidden.
	IsAnonymous bool `json:"is_anonymous"`
	// True, if the administrator can access the chat event log, chat statistics, message statistics in
	// channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
	// Implied by any other administrator privilege.
	CanManageChat bool `json:"can_manage_chat"`
	// True, if the administrator can delete messages of other users.
	CanDeleteMessages bool `json:"can_delete_messages"`
	// True, if the administrator can manage video chats.
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// True, if the administrator can restrict, ban or unban chat members.
	CanRestrictMembers bool `json:"can_restrict_members"`
	// True, if the administrator can add new administrators with a subset of their own privileges or
	// demote administrators that he has promoted, directly or indirectly (promoted by administrators
	// that were appointed by the user).
	CanPromoteMembers bool `json:"can_promote_members"`
	// True, if the user is allowed to change the chat title, photo and other settings.
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user is allowed to invite new users to the chat.
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the administrator can post in the channel; channels only.
	CanPostMessages OptBool `json:"can_post_messages,omitempty"`
	// True, if the administrator can edit messages of other users and can pin messages; channels only.
	CanEditMessages OptBool `json:"can_edit_messages,omitempty"`
	// True, if the user is allowed to pin messages; groups and supergroups only.
	CanPinMessages OptBool `json:"can_pin_messages,omitempty"`
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s ChatAdministratorRights) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetCanManageChat returns the value of CanManageChat.
func (s ChatAdministratorRights) GetCanManageChat() bool {
	return s.CanManageChat
}

// GetCanDeleteMessages returns the value of CanDeleteMessages.
func (s ChatAdministratorRights) GetCanDeleteMessages() bool {
	return s.CanDeleteMessages
}

// GetCanManageVideoChats returns the value of CanManageVideoChats.
func (s ChatAdministratorRights) GetCanManageVideoChats() bool {
	return s.CanManageVideoChats
}

// GetCanRestrictMembers returns the value of CanRestrictMembers.
func (s ChatAdministratorRights) GetCanRestrictMembers() bool {
	return s.CanRestrictMembers
}

// GetCanPromoteMembers returns the value of CanPromoteMembers.
func (s ChatAdministratorRights) GetCanPromoteMembers() bool {
	return s.CanPromoteMembers
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s ChatAdministratorRights) GetCanChangeInfo() bool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s ChatAdministratorRights) GetCanInviteUsers() bool {
	return s.CanInviteUsers
}

// GetCanPostMessages returns the value of CanPostMessages.
func (s ChatAdministratorRights) GetCanPostMessages() OptBool {
	return s.CanPostMessages
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s ChatAdministratorRights) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s ChatAdministratorRights) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *ChatAdministratorRights) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetCanManageChat sets the value of CanManageChat.
func (s *ChatAdministratorRights) SetCanManageChat(val bool) {
	s.CanManageChat = val
}

// SetCanDeleteMessages sets the value of CanDeleteMessages.
func (s *ChatAdministratorRights) SetCanDeleteMessages(val bool) {
	s.CanDeleteMessages = val
}

// SetCanManageVideoChats sets the value of CanManageVideoChats.
func (s *ChatAdministratorRights) SetCanManageVideoChats(val bool) {
	s.CanManageVideoChats = val
}

// SetCanRestrictMembers sets the value of CanRestrictMembers.
func (s *ChatAdministratorRights) SetCanRestrictMembers(val bool) {
	s.CanRestrictMembers = val
}

// SetCanPromoteMembers sets the value of CanPromoteMembers.
func (s *ChatAdministratorRights) SetCanPromoteMembers(val bool) {
	s.CanPromoteMembers = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatAdministratorRights) SetCanChangeInfo(val bool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatAdministratorRights) SetCanInviteUsers(val bool) {
	s.CanInviteUsers = val
}

// SetCanPostMessages sets the value of CanPostMessages.
func (s *ChatAdministratorRights) SetCanPostMessages(val OptBool) {
	s.CanPostMessages = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *ChatAdministratorRights) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatAdministratorRights) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// Represents an invite link for a chat.
// Ref: #/components/schemas/ChatInviteLink
type ChatInviteLink struct {
	// The invite link. If the link was created by another chat administrator, then the second part of
	// the link will be replaced with "â€¦".
	InviteLink string `json:"invite_link"`
	Creator    User   `json:"creator"`
	// True, if users joining the chat via the link need to be approved by chat administrators.
	CreatesJoinRequest bool `json:"creates_join_request"`
	// True, if the link is primary.
	IsPrimary bool `json:"is_primary"`
	// True, if the link is revoked.
	IsRevoked bool `json:"is_revoked"`
	// Invite link name.
	Name OptString `json:"name,omitempty"`
	// Point in time (Unix timestamp) when the link will expire or has been expired.
	ExpireDate OptInt `json:"expire_date,omitempty"`
	// Maximum number of users that can be members of the chat simultaneously after joining the chat via
	// this invite link; 1-99999.
	MemberLimit OptInt `json:"member_limit,omitempty"`
	// Number of pending join requests created using this link.
	PendingJoinRequestCount OptInt `json:"pending_join_request_count,omitempty"`
}

// GetInviteLink returns the value of InviteLink.
func (s ChatInviteLink) GetInviteLink() string {
	return s.InviteLink
}

// GetCreator returns the value of Creator.
func (s ChatInviteLink) GetCreator() User {
	return s.Creator
}

// GetCreatesJoinRequest returns the value of CreatesJoinRequest.
func (s ChatInviteLink) GetCreatesJoinRequest() bool {
	return s.CreatesJoinRequest
}

// GetIsPrimary returns the value of IsPrimary.
func (s ChatInviteLink) GetIsPrimary() bool {
	return s.IsPrimary
}

// GetIsRevoked returns the value of IsRevoked.
func (s ChatInviteLink) GetIsRevoked() bool {
	return s.IsRevoked
}

// GetName returns the value of Name.
func (s ChatInviteLink) GetName() OptString {
	return s.Name
}

// GetExpireDate returns the value of ExpireDate.
func (s ChatInviteLink) GetExpireDate() OptInt {
	return s.ExpireDate
}

// GetMemberLimit returns the value of MemberLimit.
func (s ChatInviteLink) GetMemberLimit() OptInt {
	return s.MemberLimit
}

// GetPendingJoinRequestCount returns the value of PendingJoinRequestCount.
func (s ChatInviteLink) GetPendingJoinRequestCount() OptInt {
	return s.PendingJoinRequestCount
}

// SetInviteLink sets the value of InviteLink.
func (s *ChatInviteLink) SetInviteLink(val string) {
	s.InviteLink = val
}

// SetCreator sets the value of Creator.
func (s *ChatInviteLink) SetCreator(val User) {
	s.Creator = val
}

// SetCreatesJoinRequest sets the value of CreatesJoinRequest.
func (s *ChatInviteLink) SetCreatesJoinRequest(val bool) {
	s.CreatesJoinRequest = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *ChatInviteLink) SetIsPrimary(val bool) {
	s.IsPrimary = val
}

// SetIsRevoked sets the value of IsRevoked.
func (s *ChatInviteLink) SetIsRevoked(val bool) {
	s.IsRevoked = val
}

// SetName sets the value of Name.
func (s *ChatInviteLink) SetName(val OptString) {
	s.Name = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *ChatInviteLink) SetExpireDate(val OptInt) {
	s.ExpireDate = val
}

// SetMemberLimit sets the value of MemberLimit.
func (s *ChatInviteLink) SetMemberLimit(val OptInt) {
	s.MemberLimit = val
}

// SetPendingJoinRequestCount sets the value of PendingJoinRequestCount.
func (s *ChatInviteLink) SetPendingJoinRequestCount(val OptInt) {
	s.PendingJoinRequestCount = val
}

// Represents a join request sent to a chat.
// Ref: #/components/schemas/ChatJoinRequest
type ChatJoinRequest struct {
	Chat Chat `json:"chat"`
	From User `json:"from"`
	// Date the request was sent in Unix time.
	Date int `json:"date"`
	// Bio of the user.
	Bio        OptString         `json:"bio,omitempty"`
	InviteLink OptChatInviteLink `json:"invite_link,omitempty"`
}

// GetChat returns the value of Chat.
func (s ChatJoinRequest) GetChat() Chat {
	return s.Chat
}

// GetFrom returns the value of From.
func (s ChatJoinRequest) GetFrom() User {
	return s.From
}

// GetDate returns the value of Date.
func (s ChatJoinRequest) GetDate() int {
	return s.Date
}

// GetBio returns the value of Bio.
func (s ChatJoinRequest) GetBio() OptString {
	return s.Bio
}

// GetInviteLink returns the value of InviteLink.
func (s ChatJoinRequest) GetInviteLink() OptChatInviteLink {
	return s.InviteLink
}

// SetChat sets the value of Chat.
func (s *ChatJoinRequest) SetChat(val Chat) {
	s.Chat = val
}

// SetFrom sets the value of From.
func (s *ChatJoinRequest) SetFrom(val User) {
	s.From = val
}

// SetDate sets the value of Date.
func (s *ChatJoinRequest) SetDate(val int) {
	s.Date = val
}

// SetBio sets the value of Bio.
func (s *ChatJoinRequest) SetBio(val OptString) {
	s.Bio = val
}

// SetInviteLink sets the value of InviteLink.
func (s *ChatJoinRequest) SetInviteLink(val OptChatInviteLink) {
	s.InviteLink = val
}

// Represents a location to which a chat is connected.
// Ref: #/components/schemas/ChatLocation
type ChatLocation struct {
	Location Location `json:"location"`
	// Location address; 1-64 characters, as defined by the chat owner.
	Address string `json:"address"`
}

// GetLocation returns the value of Location.
func (s ChatLocation) GetLocation() Location {
	return s.Location
}

// GetAddress returns the value of Address.
func (s ChatLocation) GetAddress() string {
	return s.Address
}

// SetLocation sets the value of Location.
func (s *ChatLocation) SetLocation(val Location) {
	s.Location = val
}

// SetAddress sets the value of Address.
func (s *ChatLocation) SetAddress(val string) {
	s.Address = val
}

// This object contains information about one member of a chat.  6 types of chat members are
// supported:.
// Ref: #/components/schemas/ChatMember
// ChatMember represents sum type.
type ChatMember struct {
	Type                    ChatMemberType // switch on this field
	ChatMemberOwner         ChatMemberOwner
	ChatMemberAdministrator ChatMemberAdministrator
	ChatMemberMember        ChatMemberMember
	ChatMemberRestricted    ChatMemberRestricted
	ChatMemberLeft          ChatMemberLeft
	ChatMemberBanned        ChatMemberBanned
}

// ChatMemberType is oneOf type of ChatMember.
type ChatMemberType string

// Possible values for ChatMemberType.
const (
	ChatMemberOwnerChatMember         ChatMemberType = "ChatMemberOwner"
	ChatMemberAdministratorChatMember ChatMemberType = "ChatMemberAdministrator"
	ChatMemberMemberChatMember        ChatMemberType = "ChatMemberMember"
	ChatMemberRestrictedChatMember    ChatMemberType = "ChatMemberRestricted"
	ChatMemberLeftChatMember          ChatMemberType = "ChatMemberLeft"
	ChatMemberBannedChatMember        ChatMemberType = "ChatMemberBanned"
)

// IsChatMemberOwner reports whether ChatMember is ChatMemberOwner.
func (s ChatMember) IsChatMemberOwner() bool { return s.Type == ChatMemberOwnerChatMember }

// IsChatMemberAdministrator reports whether ChatMember is ChatMemberAdministrator.
func (s ChatMember) IsChatMemberAdministrator() bool {
	return s.Type == ChatMemberAdministratorChatMember
}

// IsChatMemberMember reports whether ChatMember is ChatMemberMember.
func (s ChatMember) IsChatMemberMember() bool { return s.Type == ChatMemberMemberChatMember }

// IsChatMemberRestricted reports whether ChatMember is ChatMemberRestricted.
func (s ChatMember) IsChatMemberRestricted() bool { return s.Type == ChatMemberRestrictedChatMember }

// IsChatMemberLeft reports whether ChatMember is ChatMemberLeft.
func (s ChatMember) IsChatMemberLeft() bool { return s.Type == ChatMemberLeftChatMember }

// IsChatMemberBanned reports whether ChatMember is ChatMemberBanned.
func (s ChatMember) IsChatMemberBanned() bool { return s.Type == ChatMemberBannedChatMember }

// SetChatMemberOwner sets ChatMember to ChatMemberOwner.
func (s *ChatMember) SetChatMemberOwner(v ChatMemberOwner) {
	s.Type = ChatMemberOwnerChatMember
	s.ChatMemberOwner = v
}

// GetChatMemberOwner returns ChatMemberOwner and true boolean if ChatMember is ChatMemberOwner.
func (s ChatMember) GetChatMemberOwner() (v ChatMemberOwner, ok bool) {
	if !s.IsChatMemberOwner() {
		return v, false
	}
	return s.ChatMemberOwner, true
}

// NewChatMemberOwnerChatMember returns new ChatMember from ChatMemberOwner.
func NewChatMemberOwnerChatMember(v ChatMemberOwner) ChatMember {
	var s ChatMember
	s.SetChatMemberOwner(v)
	return s
}

// SetChatMemberAdministrator sets ChatMember to ChatMemberAdministrator.
func (s *ChatMember) SetChatMemberAdministrator(v ChatMemberAdministrator) {
	s.Type = ChatMemberAdministratorChatMember
	s.ChatMemberAdministrator = v
}

// GetChatMemberAdministrator returns ChatMemberAdministrator and true boolean if ChatMember is ChatMemberAdministrator.
func (s ChatMember) GetChatMemberAdministrator() (v ChatMemberAdministrator, ok bool) {
	if !s.IsChatMemberAdministrator() {
		return v, false
	}
	return s.ChatMemberAdministrator, true
}

// NewChatMemberAdministratorChatMember returns new ChatMember from ChatMemberAdministrator.
func NewChatMemberAdministratorChatMember(v ChatMemberAdministrator) ChatMember {
	var s ChatMember
	s.SetChatMemberAdministrator(v)
	return s
}

// SetChatMemberMember sets ChatMember to ChatMemberMember.
func (s *ChatMember) SetChatMemberMember(v ChatMemberMember) {
	s.Type = ChatMemberMemberChatMember
	s.ChatMemberMember = v
}

// GetChatMemberMember returns ChatMemberMember and true boolean if ChatMember is ChatMemberMember.
func (s ChatMember) GetChatMemberMember() (v ChatMemberMember, ok bool) {
	if !s.IsChatMemberMember() {
		return v, false
	}
	return s.ChatMemberMember, true
}

// NewChatMemberMemberChatMember returns new ChatMember from ChatMemberMember.
func NewChatMemberMemberChatMember(v ChatMemberMember) ChatMember {
	var s ChatMember
	s.SetChatMemberMember(v)
	return s
}

// SetChatMemberRestricted sets ChatMember to ChatMemberRestricted.
func (s *ChatMember) SetChatMemberRestricted(v ChatMemberRestricted) {
	s.Type = ChatMemberRestrictedChatMember
	s.ChatMemberRestricted = v
}

// GetChatMemberRestricted returns ChatMemberRestricted and true boolean if ChatMember is ChatMemberRestricted.
func (s ChatMember) GetChatMemberRestricted() (v ChatMemberRestricted, ok bool) {
	if !s.IsChatMemberRestricted() {
		return v, false
	}
	return s.ChatMemberRestricted, true
}

// NewChatMemberRestrictedChatMember returns new ChatMember from ChatMemberRestricted.
func NewChatMemberRestrictedChatMember(v ChatMemberRestricted) ChatMember {
	var s ChatMember
	s.SetChatMemberRestricted(v)
	return s
}

// SetChatMemberLeft sets ChatMember to ChatMemberLeft.
func (s *ChatMember) SetChatMemberLeft(v ChatMemberLeft) {
	s.Type = ChatMemberLeftChatMember
	s.ChatMemberLeft = v
}

// GetChatMemberLeft returns ChatMemberLeft and true boolean if ChatMember is ChatMemberLeft.
func (s ChatMember) GetChatMemberLeft() (v ChatMemberLeft, ok bool) {
	if !s.IsChatMemberLeft() {
		return v, false
	}
	return s.ChatMemberLeft, true
}

// NewChatMemberLeftChatMember returns new ChatMember from ChatMemberLeft.
func NewChatMemberLeftChatMember(v ChatMemberLeft) ChatMember {
	var s ChatMember
	s.SetChatMemberLeft(v)
	return s
}

// SetChatMemberBanned sets ChatMember to ChatMemberBanned.
func (s *ChatMember) SetChatMemberBanned(v ChatMemberBanned) {
	s.Type = ChatMemberBannedChatMember
	s.ChatMemberBanned = v
}

// GetChatMemberBanned returns ChatMemberBanned and true boolean if ChatMember is ChatMemberBanned.
func (s ChatMember) GetChatMemberBanned() (v ChatMemberBanned, ok bool) {
	if !s.IsChatMemberBanned() {
		return v, false
	}
	return s.ChatMemberBanned, true
}

// NewChatMemberBannedChatMember returns new ChatMember from ChatMemberBanned.
func NewChatMemberBannedChatMember(v ChatMemberBanned) ChatMember {
	var s ChatMember
	s.SetChatMemberBanned(v)
	return s
}

// Represents a chat member that has some additional privileges.
// Ref: #/components/schemas/ChatMemberAdministrator
type ChatMemberAdministrator struct {
	// The member's status in the chat, always "administrator".
	Status string `json:"status"`
	User   User   `json:"user"`
	// True, if the bot is allowed to edit administrator privileges of that user.
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the user's presence in the chat is hidden.
	IsAnonymous bool `json:"is_anonymous"`
	// True, if the administrator can access the chat event log, chat statistics, message statistics in
	// channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
	// Implied by any other administrator privilege.
	CanManageChat bool `json:"can_manage_chat"`
	// True, if the administrator can delete messages of other users.
	CanDeleteMessages bool `json:"can_delete_messages"`
	// True, if the administrator can manage video chats.
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// True, if the administrator can restrict, ban or unban chat members.
	CanRestrictMembers bool `json:"can_restrict_members"`
	// True, if the administrator can add new administrators with a subset of their own privileges or
	// demote administrators that he has promoted, directly or indirectly (promoted by administrators
	// that were appointed by the user).
	CanPromoteMembers bool `json:"can_promote_members"`
	// True, if the user is allowed to change the chat title, photo and other settings.
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user is allowed to invite new users to the chat.
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the administrator can post in the channel; channels only.
	CanPostMessages OptBool `json:"can_post_messages,omitempty"`
	// True, if the administrator can edit messages of other users and can pin messages; channels only.
	CanEditMessages OptBool `json:"can_edit_messages,omitempty"`
	// True, if the user is allowed to pin messages; groups and supergroups only.
	CanPinMessages OptBool `json:"can_pin_messages,omitempty"`
	// Custom title for this user.
	CustomTitle OptString `json:"custom_title,omitempty"`
}

// GetStatus returns the value of Status.
func (s ChatMemberAdministrator) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s ChatMemberAdministrator) GetUser() User {
	return s.User
}

// GetCanBeEdited returns the value of CanBeEdited.
func (s ChatMemberAdministrator) GetCanBeEdited() bool {
	return s.CanBeEdited
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s ChatMemberAdministrator) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetCanManageChat returns the value of CanManageChat.
func (s ChatMemberAdministrator) GetCanManageChat() bool {
	return s.CanManageChat
}

// GetCanDeleteMessages returns the value of CanDeleteMessages.
func (s ChatMemberAdministrator) GetCanDeleteMessages() bool {
	return s.CanDeleteMessages
}

// GetCanManageVideoChats returns the value of CanManageVideoChats.
func (s ChatMemberAdministrator) GetCanManageVideoChats() bool {
	return s.CanManageVideoChats
}

// GetCanRestrictMembers returns the value of CanRestrictMembers.
func (s ChatMemberAdministrator) GetCanRestrictMembers() bool {
	return s.CanRestrictMembers
}

// GetCanPromoteMembers returns the value of CanPromoteMembers.
func (s ChatMemberAdministrator) GetCanPromoteMembers() bool {
	return s.CanPromoteMembers
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s ChatMemberAdministrator) GetCanChangeInfo() bool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s ChatMemberAdministrator) GetCanInviteUsers() bool {
	return s.CanInviteUsers
}

// GetCanPostMessages returns the value of CanPostMessages.
func (s ChatMemberAdministrator) GetCanPostMessages() OptBool {
	return s.CanPostMessages
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s ChatMemberAdministrator) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s ChatMemberAdministrator) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// GetCustomTitle returns the value of CustomTitle.
func (s ChatMemberAdministrator) GetCustomTitle() OptString {
	return s.CustomTitle
}

// SetStatus sets the value of Status.
func (s *ChatMemberAdministrator) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberAdministrator) SetUser(val User) {
	s.User = val
}

// SetCanBeEdited sets the value of CanBeEdited.
func (s *ChatMemberAdministrator) SetCanBeEdited(val bool) {
	s.CanBeEdited = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *ChatMemberAdministrator) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetCanManageChat sets the value of CanManageChat.
func (s *ChatMemberAdministrator) SetCanManageChat(val bool) {
	s.CanManageChat = val
}

// SetCanDeleteMessages sets the value of CanDeleteMessages.
func (s *ChatMemberAdministrator) SetCanDeleteMessages(val bool) {
	s.CanDeleteMessages = val
}

// SetCanManageVideoChats sets the value of CanManageVideoChats.
func (s *ChatMemberAdministrator) SetCanManageVideoChats(val bool) {
	s.CanManageVideoChats = val
}

// SetCanRestrictMembers sets the value of CanRestrictMembers.
func (s *ChatMemberAdministrator) SetCanRestrictMembers(val bool) {
	s.CanRestrictMembers = val
}

// SetCanPromoteMembers sets the value of CanPromoteMembers.
func (s *ChatMemberAdministrator) SetCanPromoteMembers(val bool) {
	s.CanPromoteMembers = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatMemberAdministrator) SetCanChangeInfo(val bool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatMemberAdministrator) SetCanInviteUsers(val bool) {
	s.CanInviteUsers = val
}

// SetCanPostMessages sets the value of CanPostMessages.
func (s *ChatMemberAdministrator) SetCanPostMessages(val OptBool) {
	s.CanPostMessages = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *ChatMemberAdministrator) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatMemberAdministrator) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// SetCustomTitle sets the value of CustomTitle.
func (s *ChatMemberAdministrator) SetCustomTitle(val OptString) {
	s.CustomTitle = val
}

// Represents a chat member that was banned in the chat and can't return to the chat or view chat
// messages.
// Ref: #/components/schemas/ChatMemberBanned
type ChatMemberBanned struct {
	// The member's status in the chat, always "kicked".
	Status string `json:"status"`
	User   User   `json:"user"`
	// Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned
	// forever.
	UntilDate int `json:"until_date"`
}

// GetStatus returns the value of Status.
func (s ChatMemberBanned) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s ChatMemberBanned) GetUser() User {
	return s.User
}

// GetUntilDate returns the value of UntilDate.
func (s ChatMemberBanned) GetUntilDate() int {
	return s.UntilDate
}

// SetStatus sets the value of Status.
func (s *ChatMemberBanned) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberBanned) SetUser(val User) {
	s.User = val
}

// SetUntilDate sets the value of UntilDate.
func (s *ChatMemberBanned) SetUntilDate(val int) {
	s.UntilDate = val
}

// Represents a chat member that isn't currently a member of the chat, but may join it themselves.
// Ref: #/components/schemas/ChatMemberLeft
type ChatMemberLeft struct {
	// The member's status in the chat, always "left".
	Status string `json:"status"`
	User   User   `json:"user"`
}

// GetStatus returns the value of Status.
func (s ChatMemberLeft) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s ChatMemberLeft) GetUser() User {
	return s.User
}

// SetStatus sets the value of Status.
func (s *ChatMemberLeft) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberLeft) SetUser(val User) {
	s.User = val
}

// Represents a chat member that has no additional privileges or restrictions.
// Ref: #/components/schemas/ChatMemberMember
type ChatMemberMember struct {
	// The member's status in the chat, always "member".
	Status string `json:"status"`
	User   User   `json:"user"`
}

// GetStatus returns the value of Status.
func (s ChatMemberMember) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s ChatMemberMember) GetUser() User {
	return s.User
}

// SetStatus sets the value of Status.
func (s *ChatMemberMember) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberMember) SetUser(val User) {
	s.User = val
}

// Represents a chat member that owns the chat and has all administrator privileges.
// Ref: #/components/schemas/ChatMemberOwner
type ChatMemberOwner struct {
	// The member's status in the chat, always "creator".
	Status string `json:"status"`
	User   User   `json:"user"`
	// True, if the user's presence in the chat is hidden.
	IsAnonymous bool `json:"is_anonymous"`
	// Custom title for this user.
	CustomTitle OptString `json:"custom_title,omitempty"`
}

// GetStatus returns the value of Status.
func (s ChatMemberOwner) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s ChatMemberOwner) GetUser() User {
	return s.User
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s ChatMemberOwner) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetCustomTitle returns the value of CustomTitle.
func (s ChatMemberOwner) GetCustomTitle() OptString {
	return s.CustomTitle
}

// SetStatus sets the value of Status.
func (s *ChatMemberOwner) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberOwner) SetUser(val User) {
	s.User = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *ChatMemberOwner) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetCustomTitle sets the value of CustomTitle.
func (s *ChatMemberOwner) SetCustomTitle(val OptString) {
	s.CustomTitle = val
}

// Represents a chat member that is under certain restrictions in the chat. Supergroups only.
// Ref: #/components/schemas/ChatMemberRestricted
type ChatMemberRestricted struct {
	// The member's status in the chat, always "restricted".
	Status string `json:"status"`
	User   User   `json:"user"`
	// True, if the user is a member of the chat at the moment of the request.
	IsMember bool `json:"is_member"`
	// True, if the user is allowed to change the chat title, photo and other settings.
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user is allowed to invite new users to the chat.
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the user is allowed to pin messages.
	CanPinMessages bool `json:"can_pin_messages"`
	// True, if the user is allowed to send text messages, contacts, locations and venues.
	CanSendMessages bool `json:"can_send_messages"`
	// True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes.
	CanSendMediaMessages bool `json:"can_send_media_messages"`
	// True, if the user is allowed to send polls.
	CanSendPolls bool `json:"can_send_polls"`
	// True, if the user is allowed to send animations, games, stickers and use inline bots.
	CanSendOtherMessages bool `json:"can_send_other_messages"`
	// True, if the user is allowed to add web page previews to their messages.
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews"`
	// Date when restrictions will be lifted for this user; unix time. If 0, then the user is restricted
	// forever.
	UntilDate int `json:"until_date"`
}

// GetStatus returns the value of Status.
func (s ChatMemberRestricted) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s ChatMemberRestricted) GetUser() User {
	return s.User
}

// GetIsMember returns the value of IsMember.
func (s ChatMemberRestricted) GetIsMember() bool {
	return s.IsMember
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s ChatMemberRestricted) GetCanChangeInfo() bool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s ChatMemberRestricted) GetCanInviteUsers() bool {
	return s.CanInviteUsers
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s ChatMemberRestricted) GetCanPinMessages() bool {
	return s.CanPinMessages
}

// GetCanSendMessages returns the value of CanSendMessages.
func (s ChatMemberRestricted) GetCanSendMessages() bool {
	return s.CanSendMessages
}

// GetCanSendMediaMessages returns the value of CanSendMediaMessages.
func (s ChatMemberRestricted) GetCanSendMediaMessages() bool {
	return s.CanSendMediaMessages
}

// GetCanSendPolls returns the value of CanSendPolls.
func (s ChatMemberRestricted) GetCanSendPolls() bool {
	return s.CanSendPolls
}

// GetCanSendOtherMessages returns the value of CanSendOtherMessages.
func (s ChatMemberRestricted) GetCanSendOtherMessages() bool {
	return s.CanSendOtherMessages
}

// GetCanAddWebPagePreviews returns the value of CanAddWebPagePreviews.
func (s ChatMemberRestricted) GetCanAddWebPagePreviews() bool {
	return s.CanAddWebPagePreviews
}

// GetUntilDate returns the value of UntilDate.
func (s ChatMemberRestricted) GetUntilDate() int {
	return s.UntilDate
}

// SetStatus sets the value of Status.
func (s *ChatMemberRestricted) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberRestricted) SetUser(val User) {
	s.User = val
}

// SetIsMember sets the value of IsMember.
func (s *ChatMemberRestricted) SetIsMember(val bool) {
	s.IsMember = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatMemberRestricted) SetCanChangeInfo(val bool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatMemberRestricted) SetCanInviteUsers(val bool) {
	s.CanInviteUsers = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatMemberRestricted) SetCanPinMessages(val bool) {
	s.CanPinMessages = val
}

// SetCanSendMessages sets the value of CanSendMessages.
func (s *ChatMemberRestricted) SetCanSendMessages(val bool) {
	s.CanSendMessages = val
}

// SetCanSendMediaMessages sets the value of CanSendMediaMessages.
func (s *ChatMemberRestricted) SetCanSendMediaMessages(val bool) {
	s.CanSendMediaMessages = val
}

// SetCanSendPolls sets the value of CanSendPolls.
func (s *ChatMemberRestricted) SetCanSendPolls(val bool) {
	s.CanSendPolls = val
}

// SetCanSendOtherMessages sets the value of CanSendOtherMessages.
func (s *ChatMemberRestricted) SetCanSendOtherMessages(val bool) {
	s.CanSendOtherMessages = val
}

// SetCanAddWebPagePreviews sets the value of CanAddWebPagePreviews.
func (s *ChatMemberRestricted) SetCanAddWebPagePreviews(val bool) {
	s.CanAddWebPagePreviews = val
}

// SetUntilDate sets the value of UntilDate.
func (s *ChatMemberRestricted) SetUntilDate(val int) {
	s.UntilDate = val
}

// This object represents changes in the status of a chat member.
// Ref: #/components/schemas/ChatMemberUpdated
type ChatMemberUpdated struct {
	Chat Chat `json:"chat"`
	From User `json:"from"`
	// Date the change was done in Unix time.
	Date          int               `json:"date"`
	OldChatMember ChatMember        `json:"old_chat_member"`
	NewChatMember ChatMember        `json:"new_chat_member"`
	InviteLink    OptChatInviteLink `json:"invite_link,omitempty"`
}

// GetChat returns the value of Chat.
func (s ChatMemberUpdated) GetChat() Chat {
	return s.Chat
}

// GetFrom returns the value of From.
func (s ChatMemberUpdated) GetFrom() User {
	return s.From
}

// GetDate returns the value of Date.
func (s ChatMemberUpdated) GetDate() int {
	return s.Date
}

// GetOldChatMember returns the value of OldChatMember.
func (s ChatMemberUpdated) GetOldChatMember() ChatMember {
	return s.OldChatMember
}

// GetNewChatMember returns the value of NewChatMember.
func (s ChatMemberUpdated) GetNewChatMember() ChatMember {
	return s.NewChatMember
}

// GetInviteLink returns the value of InviteLink.
func (s ChatMemberUpdated) GetInviteLink() OptChatInviteLink {
	return s.InviteLink
}

// SetChat sets the value of Chat.
func (s *ChatMemberUpdated) SetChat(val Chat) {
	s.Chat = val
}

// SetFrom sets the value of From.
func (s *ChatMemberUpdated) SetFrom(val User) {
	s.From = val
}

// SetDate sets the value of Date.
func (s *ChatMemberUpdated) SetDate(val int) {
	s.Date = val
}

// SetOldChatMember sets the value of OldChatMember.
func (s *ChatMemberUpdated) SetOldChatMember(val ChatMember) {
	s.OldChatMember = val
}

// SetNewChatMember sets the value of NewChatMember.
func (s *ChatMemberUpdated) SetNewChatMember(val ChatMember) {
	s.NewChatMember = val
}

// SetInviteLink sets the value of InviteLink.
func (s *ChatMemberUpdated) SetInviteLink(val OptChatInviteLink) {
	s.InviteLink = val
}

// Describes actions that a non-administrator user is allowed to take in a chat.
// Ref: #/components/schemas/ChatPermissions
type ChatPermissions struct {
	// True, if the user is allowed to send text messages, contacts, locations and venues.
	CanSendMessages OptBool `json:"can_send_messages,omitempty"`
	// True, if the user is allowed to send audios, documents, photos, videos, video notes and voice
	// notes, implies can_send_messages.
	CanSendMediaMessages OptBool `json:"can_send_media_messages,omitempty"`
	// True, if the user is allowed to send polls, implies can_send_messages.
	CanSendPolls OptBool `json:"can_send_polls,omitempty"`
	// True, if the user is allowed to send animations, games, stickers and use inline bots, implies
	// can_send_media_messages.
	CanSendOtherMessages OptBool `json:"can_send_other_messages,omitempty"`
	// True, if the user is allowed to add web page previews to their messages, implies
	// can_send_media_messages.
	CanAddWebPagePreviews OptBool `json:"can_add_web_page_previews,omitempty"`
	// True, if the user is allowed to change the chat title, photo and other settings. Ignored in public
	// supergroups.
	CanChangeInfo OptBool `json:"can_change_info,omitempty"`
	// True, if the user is allowed to invite new users to the chat.
	CanInviteUsers OptBool `json:"can_invite_users,omitempty"`
	// True, if the user is allowed to pin messages. Ignored in public supergroups.
	CanPinMessages OptBool `json:"can_pin_messages,omitempty"`
}

// GetCanSendMessages returns the value of CanSendMessages.
func (s ChatPermissions) GetCanSendMessages() OptBool {
	return s.CanSendMessages
}

// GetCanSendMediaMessages returns the value of CanSendMediaMessages.
func (s ChatPermissions) GetCanSendMediaMessages() OptBool {
	return s.CanSendMediaMessages
}

// GetCanSendPolls returns the value of CanSendPolls.
func (s ChatPermissions) GetCanSendPolls() OptBool {
	return s.CanSendPolls
}

// GetCanSendOtherMessages returns the value of CanSendOtherMessages.
func (s ChatPermissions) GetCanSendOtherMessages() OptBool {
	return s.CanSendOtherMessages
}

// GetCanAddWebPagePreviews returns the value of CanAddWebPagePreviews.
func (s ChatPermissions) GetCanAddWebPagePreviews() OptBool {
	return s.CanAddWebPagePreviews
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s ChatPermissions) GetCanChangeInfo() OptBool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s ChatPermissions) GetCanInviteUsers() OptBool {
	return s.CanInviteUsers
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s ChatPermissions) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// SetCanSendMessages sets the value of CanSendMessages.
func (s *ChatPermissions) SetCanSendMessages(val OptBool) {
	s.CanSendMessages = val
}

// SetCanSendMediaMessages sets the value of CanSendMediaMessages.
func (s *ChatPermissions) SetCanSendMediaMessages(val OptBool) {
	s.CanSendMediaMessages = val
}

// SetCanSendPolls sets the value of CanSendPolls.
func (s *ChatPermissions) SetCanSendPolls(val OptBool) {
	s.CanSendPolls = val
}

// SetCanSendOtherMessages sets the value of CanSendOtherMessages.
func (s *ChatPermissions) SetCanSendOtherMessages(val OptBool) {
	s.CanSendOtherMessages = val
}

// SetCanAddWebPagePreviews sets the value of CanAddWebPagePreviews.
func (s *ChatPermissions) SetCanAddWebPagePreviews(val OptBool) {
	s.CanAddWebPagePreviews = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatPermissions) SetCanChangeInfo(val OptBool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatPermissions) SetCanInviteUsers(val OptBool) {
	s.CanInviteUsers = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatPermissions) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// This object represents a chat photo.
// Ref: #/components/schemas/ChatPhoto
type ChatPhoto struct {
	// File identifier of small (160x160) chat photo. This file_id can be used only for photo download
	// and only for as long as the photo is not changed.
	SmallFileID string `json:"small_file_id"`
	// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time
	// and for different bots. Can't be used to download or reuse the file.
	SmallFileUniqueID string `json:"small_file_unique_id"`
	// File identifier of big (640x640) chat photo. This file_id can be used only for photo download and
	// only for as long as the photo is not changed.
	BigFileID string `json:"big_file_id"`
	// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and
	// for different bots. Can't be used to download or reuse the file.
	BigFileUniqueID string `json:"big_file_unique_id"`
}

// GetSmallFileID returns the value of SmallFileID.
func (s ChatPhoto) GetSmallFileID() string {
	return s.SmallFileID
}

// GetSmallFileUniqueID returns the value of SmallFileUniqueID.
func (s ChatPhoto) GetSmallFileUniqueID() string {
	return s.SmallFileUniqueID
}

// GetBigFileID returns the value of BigFileID.
func (s ChatPhoto) GetBigFileID() string {
	return s.BigFileID
}

// GetBigFileUniqueID returns the value of BigFileUniqueID.
func (s ChatPhoto) GetBigFileUniqueID() string {
	return s.BigFileUniqueID
}

// SetSmallFileID sets the value of SmallFileID.
func (s *ChatPhoto) SetSmallFileID(val string) {
	s.SmallFileID = val
}

// SetSmallFileUniqueID sets the value of SmallFileUniqueID.
func (s *ChatPhoto) SetSmallFileUniqueID(val string) {
	s.SmallFileUniqueID = val
}

// SetBigFileID sets the value of BigFileID.
func (s *ChatPhoto) SetBigFileID(val string) {
	s.BigFileID = val
}

// SetBigFileUniqueID sets the value of BigFileUniqueID.
func (s *ChatPhoto) SetBigFileUniqueID(val string) {
	s.BigFileUniqueID = val
}

// Type of chat, can be either "private", "group", "supergroup" or "channel".
type ChatType string

const (
	ChatTypePrivate    ChatType = "private"
	ChatTypeGroup      ChatType = "group"
	ChatTypeSupergroup ChatType = "supergroup"
	ChatTypeChannel    ChatType = "channel"
)

// Represents a result of an inline query that was chosen by the user and sent to their chat partner.
// Ref: #/components/schemas/ChosenInlineResult
type ChosenInlineResult struct {
	// The unique identifier for the result that was chosen.
	ResultID string      `json:"result_id"`
	From     User        `json:"from"`
	Location OptLocation `json:"location,omitempty"`
	// Identifier of the sent inline message. Available only if there is an inline keyboard attached to
	// the message. Will be also received in callback queries and can be used to edit the message.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
	// The query that was used to obtain the result.
	Query string `json:"query"`
}

// GetResultID returns the value of ResultID.
func (s ChosenInlineResult) GetResultID() string {
	return s.ResultID
}

// GetFrom returns the value of From.
func (s ChosenInlineResult) GetFrom() User {
	return s.From
}

// GetLocation returns the value of Location.
func (s ChosenInlineResult) GetLocation() OptLocation {
	return s.Location
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s ChosenInlineResult) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetQuery returns the value of Query.
func (s ChosenInlineResult) GetQuery() string {
	return s.Query
}

// SetResultID sets the value of ResultID.
func (s *ChosenInlineResult) SetResultID(val string) {
	s.ResultID = val
}

// SetFrom sets the value of From.
func (s *ChosenInlineResult) SetFrom(val User) {
	s.From = val
}

// SetLocation sets the value of Location.
func (s *ChosenInlineResult) SetLocation(val OptLocation) {
	s.Location = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *ChosenInlineResult) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetQuery sets the value of Query.
func (s *ChosenInlineResult) SetQuery(val string) {
	s.Query = val
}

// This object represents a phone contact.
// Ref: #/components/schemas/Contact
type Contact struct {
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// Contact's last name.
	LastName OptString `json:"last_name,omitempty"`
	// Contact's user identifier in Telegram. This number may have more than 32 significant bits and some
	// programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
	// significant bits, so a 64-bit integer or double-precision float type are safe for storing this
	// identifier.
	UserID OptInt64 `json:"user_id,omitempty"`
	// Additional data about the contact in the form of a vCard.
	Vcard OptString `json:"vcard,omitempty"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s Contact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s Contact) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s Contact) GetLastName() OptString {
	return s.LastName
}

// GetUserID returns the value of UserID.
func (s Contact) GetUserID() OptInt64 {
	return s.UserID
}

// GetVcard returns the value of Vcard.
func (s Contact) GetVcard() OptString {
	return s.Vcard
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *Contact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *Contact) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *Contact) SetLastName(val OptString) {
	s.LastName = val
}

// SetUserID sets the value of UserID.
func (s *Contact) SetUserID(val OptInt64) {
	s.UserID = val
}

// SetVcard sets the value of Vcard.
func (s *Contact) SetVcard(val OptString) {
	s.Vcard = val
}

// Input for copyMessage.
// Ref: #/components/schemas/copyMessage
type CopyMessage struct {
	ChatID     ID `json:"chat_id"`
	FromChatID ID `json:"from_chat_id"`
	// Message identifier in the chat specified in from_chat_id.
	MessageID int `json:"message_id"`
	// New caption for media, 0-1024 characters after entities parsing. If not specified, the original
	// caption is kept.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the new caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the new caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s CopyMessage) GetChatID() ID {
	return s.ChatID
}

// GetFromChatID returns the value of FromChatID.
func (s CopyMessage) GetFromChatID() ID {
	return s.FromChatID
}

// GetMessageID returns the value of MessageID.
func (s CopyMessage) GetMessageID() int {
	return s.MessageID
}

// GetCaption returns the value of Caption.
func (s CopyMessage) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s CopyMessage) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s CopyMessage) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableNotification returns the value of DisableNotification.
func (s CopyMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s CopyMessage) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s CopyMessage) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s CopyMessage) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s CopyMessage) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *CopyMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetFromChatID sets the value of FromChatID.
func (s *CopyMessage) SetFromChatID(val ID) {
	s.FromChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *CopyMessage) SetMessageID(val int) {
	s.MessageID = val
}

// SetCaption sets the value of Caption.
func (s *CopyMessage) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *CopyMessage) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *CopyMessage) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *CopyMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *CopyMessage) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *CopyMessage) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *CopyMessage) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *CopyMessage) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for createChatInviteLink.
// Ref: #/components/schemas/createChatInviteLink
type CreateChatInviteLink struct {
	ChatID ID `json:"chat_id"`
	// Invite link name; 0-32 characters.
	Name OptString `json:"name,omitempty"`
	// Point in time (Unix timestamp) when the link will expire.
	ExpireDate OptInt `json:"expire_date,omitempty"`
	// Maximum number of users that can be members of the chat simultaneously after joining the chat via
	// this invite link; 1-99999.
	MemberLimit OptInt `json:"member_limit,omitempty"`
	// True, if users joining the chat via the link need to be approved by chat administrators. If True,
	// member_limit can't be specified.
	CreatesJoinRequest OptBool `json:"creates_join_request,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s CreateChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// GetName returns the value of Name.
func (s CreateChatInviteLink) GetName() OptString {
	return s.Name
}

// GetExpireDate returns the value of ExpireDate.
func (s CreateChatInviteLink) GetExpireDate() OptInt {
	return s.ExpireDate
}

// GetMemberLimit returns the value of MemberLimit.
func (s CreateChatInviteLink) GetMemberLimit() OptInt {
	return s.MemberLimit
}

// GetCreatesJoinRequest returns the value of CreatesJoinRequest.
func (s CreateChatInviteLink) GetCreatesJoinRequest() OptBool {
	return s.CreatesJoinRequest
}

// SetChatID sets the value of ChatID.
func (s *CreateChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// SetName sets the value of Name.
func (s *CreateChatInviteLink) SetName(val OptString) {
	s.Name = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *CreateChatInviteLink) SetExpireDate(val OptInt) {
	s.ExpireDate = val
}

// SetMemberLimit sets the value of MemberLimit.
func (s *CreateChatInviteLink) SetMemberLimit(val OptInt) {
	s.MemberLimit = val
}

// SetCreatesJoinRequest sets the value of CreatesJoinRequest.
func (s *CreateChatInviteLink) SetCreatesJoinRequest(val OptBool) {
	s.CreatesJoinRequest = val
}

// Input for createNewStickerSet.
// Ref: #/components/schemas/createNewStickerSet
type CreateNewStickerSet struct {
	// User identifier of created sticker set owner.
	UserID int64 `json:"user_id"`
	// Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only
	// english letters, digits and underscores. Must begin with a letter, can't contain consecutive
	// underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64
	// characters.
	Name string `json:"name"`
	// Sticker set title, 1-64 characters.
	Title string `json:"title"`
	// PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px,
	// and either width or height must be exactly 512px. Pass a file_id as a String to send a file that
	// already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file
	// from the Internet, or upload a new one using multipart/form-data.
	PNGSticker OptString `json:"png_sticker,omitempty"`
	// TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.
	// org/stickers#animated-sticker-requirements for technical requirements.
	TgsSticker OptString `json:"tgs_sticker,omitempty"`
	// WEBM video with the sticker, uploaded using multipart/form-data. See https://core.telegram.
	// org/stickers#video-sticker-requirements for technical requirements.
	WebmSticker OptString `json:"webm_sticker,omitempty"`
	// One or more emoji corresponding to the sticker.
	Emojis string `json:"emojis"`
	// Pass True, if a set of mask stickers should be created.
	ContainsMasks OptBool         `json:"contains_masks,omitempty"`
	MaskPosition  OptMaskPosition `json:"mask_position,omitempty"`
}

// GetUserID returns the value of UserID.
func (s CreateNewStickerSet) GetUserID() int64 {
	return s.UserID
}

// GetName returns the value of Name.
func (s CreateNewStickerSet) GetName() string {
	return s.Name
}

// GetTitle returns the value of Title.
func (s CreateNewStickerSet) GetTitle() string {
	return s.Title
}

// GetPNGSticker returns the value of PNGSticker.
func (s CreateNewStickerSet) GetPNGSticker() OptString {
	return s.PNGSticker
}

// GetTgsSticker returns the value of TgsSticker.
func (s CreateNewStickerSet) GetTgsSticker() OptString {
	return s.TgsSticker
}

// GetWebmSticker returns the value of WebmSticker.
func (s CreateNewStickerSet) GetWebmSticker() OptString {
	return s.WebmSticker
}

// GetEmojis returns the value of Emojis.
func (s CreateNewStickerSet) GetEmojis() string {
	return s.Emojis
}

// GetContainsMasks returns the value of ContainsMasks.
func (s CreateNewStickerSet) GetContainsMasks() OptBool {
	return s.ContainsMasks
}

// GetMaskPosition returns the value of MaskPosition.
func (s CreateNewStickerSet) GetMaskPosition() OptMaskPosition {
	return s.MaskPosition
}

// SetUserID sets the value of UserID.
func (s *CreateNewStickerSet) SetUserID(val int64) {
	s.UserID = val
}

// SetName sets the value of Name.
func (s *CreateNewStickerSet) SetName(val string) {
	s.Name = val
}

// SetTitle sets the value of Title.
func (s *CreateNewStickerSet) SetTitle(val string) {
	s.Title = val
}

// SetPNGSticker sets the value of PNGSticker.
func (s *CreateNewStickerSet) SetPNGSticker(val OptString) {
	s.PNGSticker = val
}

// SetTgsSticker sets the value of TgsSticker.
func (s *CreateNewStickerSet) SetTgsSticker(val OptString) {
	s.TgsSticker = val
}

// SetWebmSticker sets the value of WebmSticker.
func (s *CreateNewStickerSet) SetWebmSticker(val OptString) {
	s.WebmSticker = val
}

// SetEmojis sets the value of Emojis.
func (s *CreateNewStickerSet) SetEmojis(val string) {
	s.Emojis = val
}

// SetContainsMasks sets the value of ContainsMasks.
func (s *CreateNewStickerSet) SetContainsMasks(val OptBool) {
	s.ContainsMasks = val
}

// SetMaskPosition sets the value of MaskPosition.
func (s *CreateNewStickerSet) SetMaskPosition(val OptMaskPosition) {
	s.MaskPosition = val
}

// Input for declineChatJoinRequest.
// Ref: #/components/schemas/declineChatJoinRequest
type DeclineChatJoinRequest struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s DeclineChatJoinRequest) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s DeclineChatJoinRequest) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *DeclineChatJoinRequest) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *DeclineChatJoinRequest) SetUserID(val int64) {
	s.UserID = val
}

// Input for deleteChatPhoto.
// Ref: #/components/schemas/deleteChatPhoto
type DeleteChatPhoto struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s DeleteChatPhoto) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *DeleteChatPhoto) SetChatID(val ID) {
	s.ChatID = val
}

// Input for deleteChatStickerSet.
// Ref: #/components/schemas/deleteChatStickerSet
type DeleteChatStickerSet struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s DeleteChatStickerSet) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *DeleteChatStickerSet) SetChatID(val ID) {
	s.ChatID = val
}

// Input for deleteMessage.
// Ref: #/components/schemas/deleteMessage
type DeleteMessage struct {
	ChatID ID `json:"chat_id"`
	// Identifier of the message to delete.
	MessageID int `json:"message_id"`
}

// GetChatID returns the value of ChatID.
func (s DeleteMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s DeleteMessage) GetMessageID() int {
	return s.MessageID
}

// SetChatID sets the value of ChatID.
func (s *DeleteMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *DeleteMessage) SetMessageID(val int) {
	s.MessageID = val
}

// Input for deleteMyCommands.
// Ref: #/components/schemas/deleteMyCommands
type DeleteMyCommands struct {
	Scope OptBotCommandScope `json:"scope,omitempty"`
	// A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the
	// given scope, for whose language there are no dedicated commands.
	LanguageCode OptString `json:"language_code,omitempty"`
}

// GetScope returns the value of Scope.
func (s DeleteMyCommands) GetScope() OptBotCommandScope {
	return s.Scope
}

// GetLanguageCode returns the value of LanguageCode.
func (s DeleteMyCommands) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetScope sets the value of Scope.
func (s *DeleteMyCommands) SetScope(val OptBotCommandScope) {
	s.Scope = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *DeleteMyCommands) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for deleteStickerFromSet.
// Ref: #/components/schemas/deleteStickerFromSet
type DeleteStickerFromSet struct {
	// File identifier of the sticker.
	Sticker string `json:"sticker"`
}

// GetSticker returns the value of Sticker.
func (s DeleteStickerFromSet) GetSticker() string {
	return s.Sticker
}

// SetSticker sets the value of Sticker.
func (s *DeleteStickerFromSet) SetSticker(val string) {
	s.Sticker = val
}

// Input for deleteWebhook.
// Ref: #/components/schemas/deleteWebhook
type DeleteWebhook struct {
	// Pass True to drop all pending updates.
	DropPendingUpdates OptBool `json:"drop_pending_updates,omitempty"`
}

// GetDropPendingUpdates returns the value of DropPendingUpdates.
func (s DeleteWebhook) GetDropPendingUpdates() OptBool {
	return s.DropPendingUpdates
}

// SetDropPendingUpdates sets the value of DropPendingUpdates.
func (s *DeleteWebhook) SetDropPendingUpdates(val OptBool) {
	s.DropPendingUpdates = val
}

// This object represents an animated emoji that displays a random value.
// Ref: #/components/schemas/Dice
type Dice struct {
	// Emoji on which the dice throw animation is based.
	Emoji string `json:"emoji"`
	// Value of the dice, 1-6 for "", "" and "" base emoji, 1-5 for "" and "" base emoji, 1-64 for ""
	// base emoji.
	Value int `json:"value"`
}

// GetEmoji returns the value of Emoji.
func (s Dice) GetEmoji() string {
	return s.Emoji
}

// GetValue returns the value of Value.
func (s Dice) GetValue() int {
	return s.Value
}

// SetEmoji sets the value of Emoji.
func (s *Dice) SetEmoji(val string) {
	s.Emoji = val
}

// SetValue sets the value of Value.
func (s *Dice) SetValue(val int) {
	s.Value = val
}

// This object represents a general file (as opposed to photos, voice messages and audio files).
// Ref: #/components/schemas/Document
type Document struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string       `json:"file_unique_id"`
	Thumb        OptPhotoSize `json:"thumb,omitempty"`
	// Original filename as defined by sender.
	FileName OptString `json:"file_name,omitempty"`
	// MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type,omitempty"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s Document) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s Document) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetThumb returns the value of Thumb.
func (s Document) GetThumb() OptPhotoSize {
	return s.Thumb
}

// GetFileName returns the value of FileName.
func (s Document) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s Document) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s Document) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Document) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Document) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetThumb sets the value of Thumb.
func (s *Document) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// SetFileName sets the value of FileName.
func (s *Document) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Document) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Document) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Input for editChatInviteLink.
// Ref: #/components/schemas/editChatInviteLink
type EditChatInviteLink struct {
	ChatID ID `json:"chat_id"`
	// The invite link to edit.
	InviteLink string `json:"invite_link"`
	// Invite link name; 0-32 characters.
	Name OptString `json:"name,omitempty"`
	// Point in time (Unix timestamp) when the link will expire.
	ExpireDate OptInt `json:"expire_date,omitempty"`
	// Maximum number of users that can be members of the chat simultaneously after joining the chat via
	// this invite link; 1-99999.
	MemberLimit OptInt `json:"member_limit,omitempty"`
	// True, if users joining the chat via the link need to be approved by chat administrators. If True,
	// member_limit can't be specified.
	CreatesJoinRequest OptBool `json:"creates_join_request,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s EditChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// GetInviteLink returns the value of InviteLink.
func (s EditChatInviteLink) GetInviteLink() string {
	return s.InviteLink
}

// GetName returns the value of Name.
func (s EditChatInviteLink) GetName() OptString {
	return s.Name
}

// GetExpireDate returns the value of ExpireDate.
func (s EditChatInviteLink) GetExpireDate() OptInt {
	return s.ExpireDate
}

// GetMemberLimit returns the value of MemberLimit.
func (s EditChatInviteLink) GetMemberLimit() OptInt {
	return s.MemberLimit
}

// GetCreatesJoinRequest returns the value of CreatesJoinRequest.
func (s EditChatInviteLink) GetCreatesJoinRequest() OptBool {
	return s.CreatesJoinRequest
}

// SetChatID sets the value of ChatID.
func (s *EditChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// SetInviteLink sets the value of InviteLink.
func (s *EditChatInviteLink) SetInviteLink(val string) {
	s.InviteLink = val
}

// SetName sets the value of Name.
func (s *EditChatInviteLink) SetName(val OptString) {
	s.Name = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *EditChatInviteLink) SetExpireDate(val OptInt) {
	s.ExpireDate = val
}

// SetMemberLimit sets the value of MemberLimit.
func (s *EditChatInviteLink) SetMemberLimit(val OptInt) {
	s.MemberLimit = val
}

// SetCreatesJoinRequest sets the value of CreatesJoinRequest.
func (s *EditChatInviteLink) SetCreatesJoinRequest(val OptBool) {
	s.CreatesJoinRequest = val
}

// Input for editMessageCaption.
// Ref: #/components/schemas/editMessageCaption
type EditMessageCaption struct {
	ChatID OptID `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
	// New caption of the message, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the message caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s EditMessageCaption) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s EditMessageCaption) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s EditMessageCaption) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetCaption returns the value of Caption.
func (s EditMessageCaption) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s EditMessageCaption) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s EditMessageCaption) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s EditMessageCaption) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *EditMessageCaption) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageCaption) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageCaption) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetCaption sets the value of Caption.
func (s *EditMessageCaption) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *EditMessageCaption) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *EditMessageCaption) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageCaption) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageLiveLocation.
// Ref: #/components/schemas/editMessageLiveLocation
type EditMessageLiveLocation struct {
	ChatID OptID `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
	// Latitude of new location.
	Latitude float64 `json:"latitude"`
	// Longitude of new location.
	Longitude float64 `json:"longitude"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy,omitempty"`
	// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading OptInt `json:"heading,omitempty"`
	// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be
	// between 1 and 100000 if specified.
	ProximityAlertRadius OptInt                  `json:"proximity_alert_radius,omitempty"`
	ReplyMarkup          OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s EditMessageLiveLocation) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s EditMessageLiveLocation) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s EditMessageLiveLocation) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetLatitude returns the value of Latitude.
func (s EditMessageLiveLocation) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s EditMessageLiveLocation) GetLongitude() float64 {
	return s.Longitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s EditMessageLiveLocation) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetHeading returns the value of Heading.
func (s EditMessageLiveLocation) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s EditMessageLiveLocation) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s EditMessageLiveLocation) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *EditMessageLiveLocation) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageLiveLocation) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageLiveLocation) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetLatitude sets the value of Latitude.
func (s *EditMessageLiveLocation) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *EditMessageLiveLocation) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *EditMessageLiveLocation) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetHeading sets the value of Heading.
func (s *EditMessageLiveLocation) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *EditMessageLiveLocation) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageLiveLocation) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageMedia.
// Ref: #/components/schemas/editMessageMedia
type EditMessageMedia struct {
	ChatID OptID `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString               `json:"inline_message_id,omitempty"`
	Media           InputMedia              `json:"media"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s EditMessageMedia) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s EditMessageMedia) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s EditMessageMedia) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetMedia returns the value of Media.
func (s EditMessageMedia) GetMedia() InputMedia {
	return s.Media
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s EditMessageMedia) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *EditMessageMedia) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageMedia) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageMedia) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetMedia sets the value of Media.
func (s *EditMessageMedia) SetMedia(val InputMedia) {
	s.Media = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageMedia) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageReplyMarkup.
// Ref: #/components/schemas/editMessageReplyMarkup
type EditMessageReplyMarkup struct {
	ChatID OptID `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString               `json:"inline_message_id,omitempty"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s EditMessageReplyMarkup) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s EditMessageReplyMarkup) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s EditMessageReplyMarkup) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s EditMessageReplyMarkup) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *EditMessageReplyMarkup) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageReplyMarkup) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageReplyMarkup) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageReplyMarkup) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageText.
// Ref: #/components/schemas/editMessageText
type EditMessageText struct {
	ChatID OptID `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
	// New text of the message, 1-4096 characters after entities parsing.
	Text string `json:"text"`
	// Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in message text, which can be specified
	// instead of parse_mode.
	Entities []MessageEntity `json:"entities,omitempty"`
	// Disables link previews for links in this message.
	DisableWebPagePreview OptBool                 `json:"disable_web_page_preview,omitempty"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s EditMessageText) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s EditMessageText) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s EditMessageText) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetText returns the value of Text.
func (s EditMessageText) GetText() string {
	return s.Text
}

// GetParseMode returns the value of ParseMode.
func (s EditMessageText) GetParseMode() OptString {
	return s.ParseMode
}

// GetEntities returns the value of Entities.
func (s EditMessageText) GetEntities() []MessageEntity {
	return s.Entities
}

// GetDisableWebPagePreview returns the value of DisableWebPagePreview.
func (s EditMessageText) GetDisableWebPagePreview() OptBool {
	return s.DisableWebPagePreview
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s EditMessageText) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *EditMessageText) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageText) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageText) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetText sets the value of Text.
func (s *EditMessageText) SetText(val string) {
	s.Text = val
}

// SetParseMode sets the value of ParseMode.
func (s *EditMessageText) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetEntities sets the value of Entities.
func (s *EditMessageText) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetDisableWebPagePreview sets the value of DisableWebPagePreview.
func (s *EditMessageText) SetDisableWebPagePreview(val OptBool) {
	s.DisableWebPagePreview = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageText) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Contains data required for decrypting and authenticating EncryptedPassportElement. See the
// Telegram Passport Documentation for a complete description of the data decryption and
// authentication processes.
// Ref: #/components/schemas/EncryptedCredentials
type EncryptedCredentials struct {
	// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets
	// required for EncryptedPassportElement decryption and authentication.
	Data string `json:"data"`
	// Base64-encoded data hash for data authentication.
	Hash string `json:"hash"`
	// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.
	Secret string `json:"secret"`
}

// GetData returns the value of Data.
func (s EncryptedCredentials) GetData() string {
	return s.Data
}

// GetHash returns the value of Hash.
func (s EncryptedCredentials) GetHash() string {
	return s.Hash
}

// GetSecret returns the value of Secret.
func (s EncryptedCredentials) GetSecret() string {
	return s.Secret
}

// SetData sets the value of Data.
func (s *EncryptedCredentials) SetData(val string) {
	s.Data = val
}

// SetHash sets the value of Hash.
func (s *EncryptedCredentials) SetHash(val string) {
	s.Hash = val
}

// SetSecret sets the value of Secret.
func (s *EncryptedCredentials) SetSecret(val string) {
	s.Secret = val
}

// Contains information about documents or other Telegram Passport elements shared with the bot by
// the user.
// Ref: #/components/schemas/EncryptedPassportElement
type EncryptedPassportElement struct {
	// Element type. One of "personal_details", "passport", "driver_license", "identity_card",
	// "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement",
	// "passport_registration", "temporary_registration", "phone_number", "email".
	Type EncryptedPassportElementType `json:"type"`
	// Base64-encoded encrypted Telegram Passport element data provided by the user, available for
	// "personal_details", "passport", "driver_license", "identity_card", "internal_passport" and
	// "address" types. Can be decrypted and verified using the accompanying EncryptedCredentials.
	Data OptString `json:"data,omitempty"`
	// User's verified phone number, available only for "phone_number" type.
	PhoneNumber OptString `json:"phone_number,omitempty"`
	// User's verified email address, available only for "email" type.
	Email OptString `json:"email,omitempty"`
	// Array of encrypted files with documents provided by the user, available for "utility_bill",
	// "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types.
	// Files can be decrypted and verified using the accompanying EncryptedCredentials.
	Files       []PassportFile  `json:"files,omitempty"`
	FrontSide   OptPassportFile `json:"front_side,omitempty"`
	ReverseSide OptPassportFile `json:"reverse_side,omitempty"`
	Selfie      OptPassportFile `json:"selfie,omitempty"`
	// Array of encrypted files with translated versions of documents provided by the user. Available if
	// requested for "passport", "driver_license", "identity_card", "internal_passport", "utility_bill",
	// "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types.
	// Files can be decrypted and verified using the accompanying EncryptedCredentials.
	Translation []PassportFile `json:"translation,omitempty"`
	// Base64-encoded element hash for using in PassportElementErrorUnspecified.
	Hash string `json:"hash"`
}

// GetType returns the value of Type.
func (s EncryptedPassportElement) GetType() EncryptedPassportElementType {
	return s.Type
}

// GetData returns the value of Data.
func (s EncryptedPassportElement) GetData() OptString {
	return s.Data
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s EncryptedPassportElement) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetEmail returns the value of Email.
func (s EncryptedPassportElement) GetEmail() OptString {
	return s.Email
}

// GetFiles returns the value of Files.
func (s EncryptedPassportElement) GetFiles() []PassportFile {
	return s.Files
}

// GetFrontSide returns the value of FrontSide.
func (s EncryptedPassportElement) GetFrontSide() OptPassportFile {
	return s.FrontSide
}

// GetReverseSide returns the value of ReverseSide.
func (s EncryptedPassportElement) GetReverseSide() OptPassportFile {
	return s.ReverseSide
}

// GetSelfie returns the value of Selfie.
func (s EncryptedPassportElement) GetSelfie() OptPassportFile {
	return s.Selfie
}

// GetTranslation returns the value of Translation.
func (s EncryptedPassportElement) GetTranslation() []PassportFile {
	return s.Translation
}

// GetHash returns the value of Hash.
func (s EncryptedPassportElement) GetHash() string {
	return s.Hash
}

// SetType sets the value of Type.
func (s *EncryptedPassportElement) SetType(val EncryptedPassportElementType) {
	s.Type = val
}

// SetData sets the value of Data.
func (s *EncryptedPassportElement) SetData(val OptString) {
	s.Data = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *EncryptedPassportElement) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetEmail sets the value of Email.
func (s *EncryptedPassportElement) SetEmail(val OptString) {
	s.Email = val
}

// SetFiles sets the value of Files.
func (s *EncryptedPassportElement) SetFiles(val []PassportFile) {
	s.Files = val
}

// SetFrontSide sets the value of FrontSide.
func (s *EncryptedPassportElement) SetFrontSide(val OptPassportFile) {
	s.FrontSide = val
}

// SetReverseSide sets the value of ReverseSide.
func (s *EncryptedPassportElement) SetReverseSide(val OptPassportFile) {
	s.ReverseSide = val
}

// SetSelfie sets the value of Selfie.
func (s *EncryptedPassportElement) SetSelfie(val OptPassportFile) {
	s.Selfie = val
}

// SetTranslation sets the value of Translation.
func (s *EncryptedPassportElement) SetTranslation(val []PassportFile) {
	s.Translation = val
}

// SetHash sets the value of Hash.
func (s *EncryptedPassportElement) SetHash(val string) {
	s.Hash = val
}

// Element type. One of "personal_details", "passport", "driver_license", "identity_card",
// "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement",
// "passport_registration", "temporary_registration", "phone_number", "email".
type EncryptedPassportElementType string

const (
	EncryptedPassportElementTypePersonalDetails       EncryptedPassportElementType = "personal_details"
	EncryptedPassportElementTypePassport              EncryptedPassportElementType = "passport"
	EncryptedPassportElementTypeDriverLicense         EncryptedPassportElementType = "driver_license"
	EncryptedPassportElementTypeIdentityCard          EncryptedPassportElementType = "identity_card"
	EncryptedPassportElementTypeInternalPassport      EncryptedPassportElementType = "internal_passport"
	EncryptedPassportElementTypeAddress               EncryptedPassportElementType = "address"
	EncryptedPassportElementTypeUtilityBill           EncryptedPassportElementType = "utility_bill"
	EncryptedPassportElementTypeBankStatement         EncryptedPassportElementType = "bank_statement"
	EncryptedPassportElementTypeRentalAgreement       EncryptedPassportElementType = "rental_agreement"
	EncryptedPassportElementTypePassportRegistration  EncryptedPassportElementType = "passport_registration"
	EncryptedPassportElementTypeTemporaryRegistration EncryptedPassportElementType = "temporary_registration"
	EncryptedPassportElementTypePhoneNumber           EncryptedPassportElementType = "phone_number"
	EncryptedPassportElementTypeEmail                 EncryptedPassportElementType = "email"
)

// Ref: #/components/schemas/Error
type Error struct {
	Ok          bool        `json:"ok"`
	ErrorCode   int         `json:"error_code"`
	Description string      `json:"description"`
	Parameters  OptResponse `json:"parameters,omitempty"`
}

// GetOk returns the value of Ok.
func (s Error) GetOk() bool {
	return s.Ok
}

// GetErrorCode returns the value of ErrorCode.
func (s Error) GetErrorCode() int {
	return s.ErrorCode
}

// GetDescription returns the value of Description.
func (s Error) GetDescription() string {
	return s.Description
}

// GetParameters returns the value of Parameters.
func (s Error) GetParameters() OptResponse {
	return s.Parameters
}

// SetOk sets the value of Ok.
func (s *Error) SetOk(val bool) {
	s.Ok = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val int) {
	s.ErrorCode = val
}

// SetDescription sets the value of Description.
func (s *Error) SetDescription(val string) {
	s.Description = val
}

// SetParameters sets the value of Parameters.
func (s *Error) SetParameters(val OptResponse) {
	s.Parameters = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Input for exportChatInviteLink.
// Ref: #/components/schemas/exportChatInviteLink
type ExportChatInviteLink struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s ExportChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *ExportChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// This object represents a file ready to be downloaded. The file can be downloaded via the link
// https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid
// for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
// Ref: #/components/schemas/File
type File struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// File size in bytes, if known.
	FileSize OptInt `json:"file_size,omitempty"`
	// File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
	FilePath OptString `json:"file_path,omitempty"`
}

// GetFileID returns the value of FileID.
func (s File) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s File) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetFileSize returns the value of FileSize.
func (s File) GetFileSize() OptInt {
	return s.FileSize
}

// GetFilePath returns the value of FilePath.
func (s File) GetFilePath() OptString {
	return s.FilePath
}

// SetFileID sets the value of FileID.
func (s *File) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *File) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetFileSize sets the value of FileSize.
func (s *File) SetFileSize(val OptInt) {
	s.FileSize = val
}

// SetFilePath sets the value of FilePath.
func (s *File) SetFilePath(val OptString) {
	s.FilePath = val
}

// Upon receiving a message with this object, Telegram clients will display a reply interface to the
// user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely
// useful if you want to create user-friendly step-by-step interfaces without having to sacrifice
// privacy mode.
// Ref: #/components/schemas/ForceReply
type ForceReply struct {
	// Shows reply interface to the user, as if they manually selected the bot's message and tapped
	// 'Reply'.
	ForceReply bool `json:"force_reply"`
	// The placeholder to be shown in the input field when the reply is active; 1-64 characters.
	InputFieldPlaceholder OptString `json:"input_field_placeholder,omitempty"`
	// Use this parameter if you want to force reply from specific users only. Targets: 1) users that are
	// @mentioned in the text of the Message object; 2) if the bot's message is a reply (has
	// reply_to_message_id), sender of the original message.
	Selective OptBool `json:"selective,omitempty"`
}

// GetForceReply returns the value of ForceReply.
func (s ForceReply) GetForceReply() bool {
	return s.ForceReply
}

// GetInputFieldPlaceholder returns the value of InputFieldPlaceholder.
func (s ForceReply) GetInputFieldPlaceholder() OptString {
	return s.InputFieldPlaceholder
}

// GetSelective returns the value of Selective.
func (s ForceReply) GetSelective() OptBool {
	return s.Selective
}

// SetForceReply sets the value of ForceReply.
func (s *ForceReply) SetForceReply(val bool) {
	s.ForceReply = val
}

// SetInputFieldPlaceholder sets the value of InputFieldPlaceholder.
func (s *ForceReply) SetInputFieldPlaceholder(val OptString) {
	s.InputFieldPlaceholder = val
}

// SetSelective sets the value of Selective.
func (s *ForceReply) SetSelective(val OptBool) {
	s.Selective = val
}

// Input for forwardMessage.
// Ref: #/components/schemas/forwardMessage
type ForwardMessage struct {
	ChatID     ID `json:"chat_id"`
	FromChatID ID `json:"from_chat_id"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the forwarded message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// Message identifier in the chat specified in from_chat_id.
	MessageID int `json:"message_id"`
}

// GetChatID returns the value of ChatID.
func (s ForwardMessage) GetChatID() ID {
	return s.ChatID
}

// GetFromChatID returns the value of FromChatID.
func (s ForwardMessage) GetFromChatID() ID {
	return s.FromChatID
}

// GetDisableNotification returns the value of DisableNotification.
func (s ForwardMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s ForwardMessage) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageID returns the value of MessageID.
func (s ForwardMessage) GetMessageID() int {
	return s.MessageID
}

// SetChatID sets the value of ChatID.
func (s *ForwardMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetFromChatID sets the value of FromChatID.
func (s *ForwardMessage) SetFromChatID(val ID) {
	s.FromChatID = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *ForwardMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *ForwardMessage) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageID sets the value of MessageID.
func (s *ForwardMessage) SetMessageID(val int) {
	s.MessageID = val
}

// This object represents a game. Use BotFather to create and edit games, their short names will act
// as unique identifiers.
// Ref: #/components/schemas/Game
type Game struct {
	// Title of the game.
	Title string `json:"title"`
	// Description of the game.
	Description string `json:"description"`
	// Photo that will be displayed in the game message in chats.
	Photo []PhotoSize `json:"photo"`
	// Brief description of the game or high scores included in the game message. Can be automatically
	// edited to include current high scores for the game when the bot calls setGameScore, or manually
	// edited using editMessageText. 0-4096 characters.
	Text OptString `json:"text,omitempty"`
	// Special entities that appear in text, such as usernames, URLs, bot commands, etc.
	TextEntities []MessageEntity `json:"text_entities,omitempty"`
	Animation    OptAnimation    `json:"animation,omitempty"`
}

// GetTitle returns the value of Title.
func (s Game) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s Game) GetDescription() string {
	return s.Description
}

// GetPhoto returns the value of Photo.
func (s Game) GetPhoto() []PhotoSize {
	return s.Photo
}

// GetText returns the value of Text.
func (s Game) GetText() OptString {
	return s.Text
}

// GetTextEntities returns the value of TextEntities.
func (s Game) GetTextEntities() []MessageEntity {
	return s.TextEntities
}

// GetAnimation returns the value of Animation.
func (s Game) GetAnimation() OptAnimation {
	return s.Animation
}

// SetTitle sets the value of Title.
func (s *Game) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Game) SetDescription(val string) {
	s.Description = val
}

// SetPhoto sets the value of Photo.
func (s *Game) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// SetText sets the value of Text.
func (s *Game) SetText(val OptString) {
	s.Text = val
}

// SetTextEntities sets the value of TextEntities.
func (s *Game) SetTextEntities(val []MessageEntity) {
	s.TextEntities = val
}

// SetAnimation sets the value of Animation.
func (s *Game) SetAnimation(val OptAnimation) {
	s.Animation = val
}

// This object represents one row of the high scores table for a game.
// Ref: #/components/schemas/GameHighScore
type GameHighScore struct {
	// Position in high score table for the game.
	Position int  `json:"position"`
	User     User `json:"user"`
	// Score.
	Score int `json:"score"`
}

// GetPosition returns the value of Position.
func (s GameHighScore) GetPosition() int {
	return s.Position
}

// GetUser returns the value of User.
func (s GameHighScore) GetUser() User {
	return s.User
}

// GetScore returns the value of Score.
func (s GameHighScore) GetScore() int {
	return s.Score
}

// SetPosition sets the value of Position.
func (s *GameHighScore) SetPosition(val int) {
	s.Position = val
}

// SetUser sets the value of User.
func (s *GameHighScore) SetUser(val User) {
	s.User = val
}

// SetScore sets the value of Score.
func (s *GameHighScore) SetScore(val int) {
	s.Score = val
}

// Input for getChat.
// Ref: #/components/schemas/getChat
type GetChat struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s GetChat) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChat) SetChatID(val ID) {
	s.ChatID = val
}

// Input for getChatAdministrators.
// Ref: #/components/schemas/getChatAdministrators
type GetChatAdministrators struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s GetChatAdministrators) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChatAdministrators) SetChatID(val ID) {
	s.ChatID = val
}

// Input for getChatMember.
// Ref: #/components/schemas/getChatMember
type GetChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s GetChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s GetChatMember) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *GetChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *GetChatMember) SetUserID(val int64) {
	s.UserID = val
}

// Input for getChatMemberCount.
// Ref: #/components/schemas/getChatMemberCount
type GetChatMemberCount struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s GetChatMemberCount) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChatMemberCount) SetChatID(val ID) {
	s.ChatID = val
}

// Input for getChatMenuButton.
// Ref: #/components/schemas/getChatMenuButton
type GetChatMenuButton struct {
	// Unique identifier for the target private chat. If not specified, default bot's menu button will be
	// returned.
	ChatID OptInt64 `json:"chat_id,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s GetChatMenuButton) GetChatID() OptInt64 {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChatMenuButton) SetChatID(val OptInt64) {
	s.ChatID = val
}

// Input for getFile.
// Ref: #/components/schemas/getFile
type GetFile struct {
	// File identifier to get info about.
	FileID string `json:"file_id"`
}

// GetFileID returns the value of FileID.
func (s GetFile) GetFileID() string {
	return s.FileID
}

// SetFileID sets the value of FileID.
func (s *GetFile) SetFileID(val string) {
	s.FileID = val
}

// Input for getGameHighScores.
// Ref: #/components/schemas/getGameHighScores
type GetGameHighScores struct {
	// Target user id.
	UserID int64 `json:"user_id"`
	// Required if inline_message_id is not specified. Unique identifier for the target chat.
	ChatID OptInt64 `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the sent message.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
}

// GetUserID returns the value of UserID.
func (s GetGameHighScores) GetUserID() int64 {
	return s.UserID
}

// GetChatID returns the value of ChatID.
func (s GetGameHighScores) GetChatID() OptInt64 {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s GetGameHighScores) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s GetGameHighScores) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// SetUserID sets the value of UserID.
func (s *GetGameHighScores) SetUserID(val int64) {
	s.UserID = val
}

// SetChatID sets the value of ChatID.
func (s *GetGameHighScores) SetChatID(val OptInt64) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *GetGameHighScores) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *GetGameHighScores) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// Input for getMyCommands.
// Ref: #/components/schemas/getMyCommands
type GetMyCommands struct {
	Scope OptBotCommandScope `json:"scope,omitempty"`
	// A two-letter ISO 639-1 language code or an empty string.
	LanguageCode OptString `json:"language_code,omitempty"`
}

// GetScope returns the value of Scope.
func (s GetMyCommands) GetScope() OptBotCommandScope {
	return s.Scope
}

// GetLanguageCode returns the value of LanguageCode.
func (s GetMyCommands) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetScope sets the value of Scope.
func (s *GetMyCommands) SetScope(val OptBotCommandScope) {
	s.Scope = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *GetMyCommands) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for getMyDefaultAdministratorRights.
// Ref: #/components/schemas/getMyDefaultAdministratorRights
type GetMyDefaultAdministratorRights struct {
	// Pass True to get default administrator rights of the bot in channels. Otherwise, default
	// administrator rights of the bot for groups and supergroups will be returned.
	ForChannels OptBool `json:"for_channels,omitempty"`
}

// GetForChannels returns the value of ForChannels.
func (s GetMyDefaultAdministratorRights) GetForChannels() OptBool {
	return s.ForChannels
}

// SetForChannels sets the value of ForChannels.
func (s *GetMyDefaultAdministratorRights) SetForChannels(val OptBool) {
	s.ForChannels = val
}

// Input for getStickerSet.
// Ref: #/components/schemas/getStickerSet
type GetStickerSet struct {
	// Name of the sticker set.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s GetStickerSet) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *GetStickerSet) SetName(val string) {
	s.Name = val
}

// Input for getUpdates.
// Ref: #/components/schemas/getUpdates
type GetUpdates struct {
	// Identifier of the first update to be returned. Must be greater by one than the highest among the
	// identifiers of previously received updates. By default, updates starting with the earliest
	// unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called
	// with an offset higher than its update_id. The negative offset can be specified to retrieve updates
	// starting from -offset update from the end of the updates queue. All previous updates will forgotten.
	Offset OptInt `json:"offset,omitempty"`
	// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit OptInt `json:"limit,omitempty"`
	// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive,
	// short polling should be used for testing purposes only.
	Timeout OptInt `json:"timeout,omitempty"`
	// A JSON-serialized list of the update types you want your bot to receive. For example, specify
	// ["message", "edited_channel_post", "callback_query"] to only receive updates of these types. See
	// Update for a complete list of available update types. Specify an empty list to receive all update
	// types except chat_member (default). If not specified, the previous setting will be used.Please
	// note that this parameter doesn't affect updates created before the call to the getUpdates, so
	// unwanted updates may be received for a short period of time.
	AllowedUpdates []string `json:"allowed_updates,omitempty"`
}

// GetOffset returns the value of Offset.
func (s GetUpdates) GetOffset() OptInt {
	return s.Offset
}

// GetLimit returns the value of Limit.
func (s GetUpdates) GetLimit() OptInt {
	return s.Limit
}

// GetTimeout returns the value of Timeout.
func (s GetUpdates) GetTimeout() OptInt {
	return s.Timeout
}

// GetAllowedUpdates returns the value of AllowedUpdates.
func (s GetUpdates) GetAllowedUpdates() []string {
	return s.AllowedUpdates
}

// SetOffset sets the value of Offset.
func (s *GetUpdates) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLimit sets the value of Limit.
func (s *GetUpdates) SetLimit(val OptInt) {
	s.Limit = val
}

// SetTimeout sets the value of Timeout.
func (s *GetUpdates) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetAllowedUpdates sets the value of AllowedUpdates.
func (s *GetUpdates) SetAllowedUpdates(val []string) {
	s.AllowedUpdates = val
}

// Input for getUserProfilePhotos.
// Ref: #/components/schemas/getUserProfilePhotos
type GetUserProfilePhotos struct {
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Sequential number of the first photo to be returned. By default, all photos are returned.
	Offset OptInt `json:"offset,omitempty"`
	// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit OptInt `json:"limit,omitempty"`
}

// GetUserID returns the value of UserID.
func (s GetUserProfilePhotos) GetUserID() int64 {
	return s.UserID
}

// GetOffset returns the value of Offset.
func (s GetUserProfilePhotos) GetOffset() OptInt {
	return s.Offset
}

// GetLimit returns the value of Limit.
func (s GetUserProfilePhotos) GetLimit() OptInt {
	return s.Limit
}

// SetUserID sets the value of UserID.
func (s *GetUserProfilePhotos) SetUserID(val int64) {
	s.UserID = val
}

// SetOffset sets the value of Offset.
func (s *GetUserProfilePhotos) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLimit sets the value of Limit.
func (s *GetUserProfilePhotos) SetLimit(val OptInt) {
	s.Limit = val
}

// Ref: #/components/schemas/ID
// ID represents sum type.
type ID struct {
	Type   IDType // switch on this field
	String string
	Int64  int64
}

// IDType is oneOf type of ID.
type IDType string

// Possible values for IDType.
const (
	StringID IDType = "string"
	Int64ID  IDType = "int64"
)

// IsString reports whether ID is string.
func (s ID) IsString() bool { return s.Type == StringID }

// IsInt64 reports whether ID is int64.
func (s ID) IsInt64() bool { return s.Type == Int64ID }

// SetString sets ID to string.
func (s *ID) SetString(v string) {
	s.Type = StringID
	s.String = v
}

// GetString returns string and true boolean if ID is string.
func (s ID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringID returns new ID from string.
func NewStringID(v string) ID {
	var s ID
	s.SetString(v)
	return s
}

// SetInt64 sets ID to int64.
func (s *ID) SetInt64(v int64) {
	s.Type = Int64ID
	s.Int64 = v
}

// GetInt64 returns int64 and true boolean if ID is int64.
func (s ID) GetInt64() (v int64, ok bool) {
	if !s.IsInt64() {
		return v, false
	}
	return s.Int64, true
}

// NewInt64ID returns new ID from int64.
func NewInt64ID(v int64) ID {
	var s ID
	s.SetInt64(v)
	return s
}

// This object represents one button of an inline keyboard. You must use exactly one of the optional
// fields.
// Ref: #/components/schemas/InlineKeyboardButton
type InlineKeyboardButton struct {
	// Label text on the button.
	Text string `json:"text"`
	// HTTP or tg:// url to be opened when the button is pressed. Links tg://user?id=<user_id> can be
	// used to mention a user by their ID without using a username, if this is allowed by their privacy
	// settings.
	URL OptString `json:"url,omitempty"`
	// Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes.
	CallbackData OptString     `json:"callback_data,omitempty"`
	WebApp       OptWebAppInfo `json:"web_app,omitempty"`
	LoginURL     OptLoginUrl   `json:"login_url,omitempty"`
	// If set, pressing the button will prompt the user to select one of their chats, open that chat and
	// insert the bot's username and the specified inline query in the input field. Can be empty, in
	// which case just the bot's username will be inserted.Note: This offers an easy way for users to
	// start using your bot in inline mode when they are currently in a private chat with it. Especially
	// useful when combined with switch_pmâ€¦ actions â€“ in this case the user will be automatically
	// returned to the chat they switched from, skipping the chat selection screen.
	SwitchInlineQuery OptString `json:"switch_inline_query,omitempty"`
	// If set, pressing the button will insert the bot's username and the specified inline query in the
	// current chat's input field. Can be empty, in which case only the bot's username will be inserted.
	// This offers a quick way for the user to open your bot in inline mode in the same chat â€“ good for
	// selecting something from multiple options.
	SwitchInlineQueryCurrentChat OptString     `json:"switch_inline_query_current_chat,omitempty"`
	CallbackGame                 *CallbackGame `json:"callback_game,omitempty"`
	// Specify True, to send a Pay button.NOTE: This type of button must always be the first button in
	// the first row and can only be used in invoice messages.
	Pay OptBool `json:"pay,omitempty"`
}

// GetText returns the value of Text.
func (s InlineKeyboardButton) GetText() string {
	return s.Text
}

// GetURL returns the value of URL.
func (s InlineKeyboardButton) GetURL() OptString {
	return s.URL
}

// GetCallbackData returns the value of CallbackData.
func (s InlineKeyboardButton) GetCallbackData() OptString {
	return s.CallbackData
}

// GetWebApp returns the value of WebApp.
func (s InlineKeyboardButton) GetWebApp() OptWebAppInfo {
	return s.WebApp
}

// GetLoginURL returns the value of LoginURL.
func (s InlineKeyboardButton) GetLoginURL() OptLoginUrl {
	return s.LoginURL
}

// GetSwitchInlineQuery returns the value of SwitchInlineQuery.
func (s InlineKeyboardButton) GetSwitchInlineQuery() OptString {
	return s.SwitchInlineQuery
}

// GetSwitchInlineQueryCurrentChat returns the value of SwitchInlineQueryCurrentChat.
func (s InlineKeyboardButton) GetSwitchInlineQueryCurrentChat() OptString {
	return s.SwitchInlineQueryCurrentChat
}

// GetCallbackGame returns the value of CallbackGame.
func (s InlineKeyboardButton) GetCallbackGame() *CallbackGame {
	return s.CallbackGame
}

// GetPay returns the value of Pay.
func (s InlineKeyboardButton) GetPay() OptBool {
	return s.Pay
}

// SetText sets the value of Text.
func (s *InlineKeyboardButton) SetText(val string) {
	s.Text = val
}

// SetURL sets the value of URL.
func (s *InlineKeyboardButton) SetURL(val OptString) {
	s.URL = val
}

// SetCallbackData sets the value of CallbackData.
func (s *InlineKeyboardButton) SetCallbackData(val OptString) {
	s.CallbackData = val
}

// SetWebApp sets the value of WebApp.
func (s *InlineKeyboardButton) SetWebApp(val OptWebAppInfo) {
	s.WebApp = val
}

// SetLoginURL sets the value of LoginURL.
func (s *InlineKeyboardButton) SetLoginURL(val OptLoginUrl) {
	s.LoginURL = val
}

// SetSwitchInlineQuery sets the value of SwitchInlineQuery.
func (s *InlineKeyboardButton) SetSwitchInlineQuery(val OptString) {
	s.SwitchInlineQuery = val
}

// SetSwitchInlineQueryCurrentChat sets the value of SwitchInlineQueryCurrentChat.
func (s *InlineKeyboardButton) SetSwitchInlineQueryCurrentChat(val OptString) {
	s.SwitchInlineQueryCurrentChat = val
}

// SetCallbackGame sets the value of CallbackGame.
func (s *InlineKeyboardButton) SetCallbackGame(val *CallbackGame) {
	s.CallbackGame = val
}

// SetPay sets the value of Pay.
func (s *InlineKeyboardButton) SetPay(val OptBool) {
	s.Pay = val
}

// This object represents an inline keyboard that appears right next to the message it belongs to.
// Ref: #/components/schemas/InlineKeyboardMarkup
type InlineKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of InlineKeyboardButton objects.
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard"`
}

// GetInlineKeyboard returns the value of InlineKeyboard.
func (s InlineKeyboardMarkup) GetInlineKeyboard() [][]InlineKeyboardButton {
	return s.InlineKeyboard
}

// SetInlineKeyboard sets the value of InlineKeyboard.
func (s *InlineKeyboardMarkup) SetInlineKeyboard(val [][]InlineKeyboardButton) {
	s.InlineKeyboard = val
}

// This object represents an incoming inline query. When the user sends an empty query, your bot
// could return some default or trending results.
// Ref: #/components/schemas/InlineQuery
type InlineQuery struct {
	// Unique identifier for this query.
	ID   string `json:"id"`
	From User   `json:"from"`
	// Text of the query (up to 256 characters).
	Query string `json:"query"`
	// Offset of the results to be returned, can be controlled by the bot.
	Offset string `json:"offset"`
	// Type of the chat, from which the inline query was sent. Can be either "sender" for a private chat
	// with the inline query sender, "private", "group", "supergroup", or "channel". The chat type should
	// be always known for requests sent from official clients and most third-party clients, unless the
	// request was sent from a secret chat.
	ChatType OptInlineQueryChatType `json:"chat_type,omitempty"`
	Location OptLocation            `json:"location,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s InlineQuery) GetFrom() User {
	return s.From
}

// GetQuery returns the value of Query.
func (s InlineQuery) GetQuery() string {
	return s.Query
}

// GetOffset returns the value of Offset.
func (s InlineQuery) GetOffset() string {
	return s.Offset
}

// GetChatType returns the value of ChatType.
func (s InlineQuery) GetChatType() OptInlineQueryChatType {
	return s.ChatType
}

// GetLocation returns the value of Location.
func (s InlineQuery) GetLocation() OptLocation {
	return s.Location
}

// SetID sets the value of ID.
func (s *InlineQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *InlineQuery) SetFrom(val User) {
	s.From = val
}

// SetQuery sets the value of Query.
func (s *InlineQuery) SetQuery(val string) {
	s.Query = val
}

// SetOffset sets the value of Offset.
func (s *InlineQuery) SetOffset(val string) {
	s.Offset = val
}

// SetChatType sets the value of ChatType.
func (s *InlineQuery) SetChatType(val OptInlineQueryChatType) {
	s.ChatType = val
}

// SetLocation sets the value of Location.
func (s *InlineQuery) SetLocation(val OptLocation) {
	s.Location = val
}

// Type of the chat, from which the inline query was sent. Can be either "sender" for a private chat
// with the inline query sender, "private", "group", "supergroup", or "channel". The chat type should
// be always known for requests sent from official clients and most third-party clients, unless the
// request was sent from a secret chat.
type InlineQueryChatType string

const (
	InlineQueryChatTypeSender     InlineQueryChatType = "sender"
	InlineQueryChatTypePrivate    InlineQueryChatType = "private"
	InlineQueryChatTypeGroup      InlineQueryChatType = "group"
	InlineQueryChatTypeSupergroup InlineQueryChatType = "supergroup"
	InlineQueryChatTypeChannel    InlineQueryChatType = "channel"
)

// An inline query. Telegram clients currently support results of the following 20 types:.
// Ref: #/components/schemas/InlineQueryResult
// InlineQueryResult represents sum type.
type InlineQueryResult struct {
	Type                            InlineQueryResultType // switch on this field
	InlineQueryResultCachedAudio    InlineQueryResultCachedAudio
	InlineQueryResultCachedDocument InlineQueryResultCachedDocument
	InlineQueryResultCachedGif      InlineQueryResultCachedGif
	InlineQueryResultCachedMpeg4Gif InlineQueryResultCachedMpeg4Gif
	InlineQueryResultCachedPhoto    InlineQueryResultCachedPhoto
	InlineQueryResultCachedSticker  InlineQueryResultCachedSticker
	InlineQueryResultCachedVideo    InlineQueryResultCachedVideo
	InlineQueryResultCachedVoice    InlineQueryResultCachedVoice
	InlineQueryResultArticle        InlineQueryResultArticle
	InlineQueryResultAudio          InlineQueryResultAudio
	InlineQueryResultContact        InlineQueryResultContact
	InlineQueryResultGame           InlineQueryResultGame
	InlineQueryResultDocument       InlineQueryResultDocument
	InlineQueryResultGif            InlineQueryResultGif
	InlineQueryResultLocation       InlineQueryResultLocation
	InlineQueryResultMpeg4Gif       InlineQueryResultMpeg4Gif
	InlineQueryResultPhoto          InlineQueryResultPhoto
	InlineQueryResultVenue          InlineQueryResultVenue
	InlineQueryResultVideo          InlineQueryResultVideo
	InlineQueryResultVoice          InlineQueryResultVoice
}

// InlineQueryResultType is oneOf type of InlineQueryResult.
type InlineQueryResultType string

// Possible values for InlineQueryResultType.
const (
	InlineQueryResultCachedAudioInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedAudio"
	InlineQueryResultCachedDocumentInlineQueryResult InlineQueryResultType = "InlineQueryResultCachedDocument"
	InlineQueryResultCachedGifInlineQueryResult      InlineQueryResultType = "InlineQueryResultCachedGif"
	InlineQueryResultCachedMpeg4GifInlineQueryResult InlineQueryResultType = "InlineQueryResultCachedMpeg4Gif"
	InlineQueryResultCachedPhotoInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedPhoto"
	InlineQueryResultCachedStickerInlineQueryResult  InlineQueryResultType = "InlineQueryResultCachedSticker"
	InlineQueryResultCachedVideoInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedVideo"
	InlineQueryResultCachedVoiceInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedVoice"
	InlineQueryResultArticleInlineQueryResult        InlineQueryResultType = "InlineQueryResultArticle"
	InlineQueryResultAudioInlineQueryResult          InlineQueryResultType = "InlineQueryResultAudio"
	InlineQueryResultContactInlineQueryResult        InlineQueryResultType = "InlineQueryResultContact"
	InlineQueryResultGameInlineQueryResult           InlineQueryResultType = "InlineQueryResultGame"
	InlineQueryResultDocumentInlineQueryResult       InlineQueryResultType = "InlineQueryResultDocument"
	InlineQueryResultGifInlineQueryResult            InlineQueryResultType = "InlineQueryResultGif"
	InlineQueryResultLocationInlineQueryResult       InlineQueryResultType = "InlineQueryResultLocation"
	InlineQueryResultMpeg4GifInlineQueryResult       InlineQueryResultType = "InlineQueryResultMpeg4Gif"
	InlineQueryResultPhotoInlineQueryResult          InlineQueryResultType = "InlineQueryResultPhoto"
	InlineQueryResultVenueInlineQueryResult          InlineQueryResultType = "InlineQueryResultVenue"
	InlineQueryResultVideoInlineQueryResult          InlineQueryResultType = "InlineQueryResultVideo"
	InlineQueryResultVoiceInlineQueryResult          InlineQueryResultType = "InlineQueryResultVoice"
)

// IsInlineQueryResultCachedAudio reports whether InlineQueryResult is InlineQueryResultCachedAudio.
func (s InlineQueryResult) IsInlineQueryResultCachedAudio() bool {
	return s.Type == InlineQueryResultCachedAudioInlineQueryResult
}

// IsInlineQueryResultCachedDocument reports whether InlineQueryResult is InlineQueryResultCachedDocument.
func (s InlineQueryResult) IsInlineQueryResultCachedDocument() bool {
	return s.Type == InlineQueryResultCachedDocumentInlineQueryResult
}

// IsInlineQueryResultCachedGif reports whether InlineQueryResult is InlineQueryResultCachedGif.
func (s InlineQueryResult) IsInlineQueryResultCachedGif() bool {
	return s.Type == InlineQueryResultCachedGifInlineQueryResult
}

// IsInlineQueryResultCachedMpeg4Gif reports whether InlineQueryResult is InlineQueryResultCachedMpeg4Gif.
func (s InlineQueryResult) IsInlineQueryResultCachedMpeg4Gif() bool {
	return s.Type == InlineQueryResultCachedMpeg4GifInlineQueryResult
}

// IsInlineQueryResultCachedPhoto reports whether InlineQueryResult is InlineQueryResultCachedPhoto.
func (s InlineQueryResult) IsInlineQueryResultCachedPhoto() bool {
	return s.Type == InlineQueryResultCachedPhotoInlineQueryResult
}

// IsInlineQueryResultCachedSticker reports whether InlineQueryResult is InlineQueryResultCachedSticker.
func (s InlineQueryResult) IsInlineQueryResultCachedSticker() bool {
	return s.Type == InlineQueryResultCachedStickerInlineQueryResult
}

// IsInlineQueryResultCachedVideo reports whether InlineQueryResult is InlineQueryResultCachedVideo.
func (s InlineQueryResult) IsInlineQueryResultCachedVideo() bool {
	return s.Type == InlineQueryResultCachedVideoInlineQueryResult
}

// IsInlineQueryResultCachedVoice reports whether InlineQueryResult is InlineQueryResultCachedVoice.
func (s InlineQueryResult) IsInlineQueryResultCachedVoice() bool {
	return s.Type == InlineQueryResultCachedVoiceInlineQueryResult
}

// IsInlineQueryResultArticle reports whether InlineQueryResult is InlineQueryResultArticle.
func (s InlineQueryResult) IsInlineQueryResultArticle() bool {
	return s.Type == InlineQueryResultArticleInlineQueryResult
}

// IsInlineQueryResultAudio reports whether InlineQueryResult is InlineQueryResultAudio.
func (s InlineQueryResult) IsInlineQueryResultAudio() bool {
	return s.Type == InlineQueryResultAudioInlineQueryResult
}

// IsInlineQueryResultContact reports whether InlineQueryResult is InlineQueryResultContact.
func (s InlineQueryResult) IsInlineQueryResultContact() bool {
	return s.Type == InlineQueryResultContactInlineQueryResult
}

// IsInlineQueryResultGame reports whether InlineQueryResult is InlineQueryResultGame.
func (s InlineQueryResult) IsInlineQueryResultGame() bool {
	return s.Type == InlineQueryResultGameInlineQueryResult
}

// IsInlineQueryResultDocument reports whether InlineQueryResult is InlineQueryResultDocument.
func (s InlineQueryResult) IsInlineQueryResultDocument() bool {
	return s.Type == InlineQueryResultDocumentInlineQueryResult
}

// IsInlineQueryResultGif reports whether InlineQueryResult is InlineQueryResultGif.
func (s InlineQueryResult) IsInlineQueryResultGif() bool {
	return s.Type == InlineQueryResultGifInlineQueryResult
}

// IsInlineQueryResultLocation reports whether InlineQueryResult is InlineQueryResultLocation.
func (s InlineQueryResult) IsInlineQueryResultLocation() bool {
	return s.Type == InlineQueryResultLocationInlineQueryResult
}

// IsInlineQueryResultMpeg4Gif reports whether InlineQueryResult is InlineQueryResultMpeg4Gif.
func (s InlineQueryResult) IsInlineQueryResultMpeg4Gif() bool {
	return s.Type == InlineQueryResultMpeg4GifInlineQueryResult
}

// IsInlineQueryResultPhoto reports whether InlineQueryResult is InlineQueryResultPhoto.
func (s InlineQueryResult) IsInlineQueryResultPhoto() bool {
	return s.Type == InlineQueryResultPhotoInlineQueryResult
}

// IsInlineQueryResultVenue reports whether InlineQueryResult is InlineQueryResultVenue.
func (s InlineQueryResult) IsInlineQueryResultVenue() bool {
	return s.Type == InlineQueryResultVenueInlineQueryResult
}

// IsInlineQueryResultVideo reports whether InlineQueryResult is InlineQueryResultVideo.
func (s InlineQueryResult) IsInlineQueryResultVideo() bool {
	return s.Type == InlineQueryResultVideoInlineQueryResult
}

// IsInlineQueryResultVoice reports whether InlineQueryResult is InlineQueryResultVoice.
func (s InlineQueryResult) IsInlineQueryResultVoice() bool {
	return s.Type == InlineQueryResultVoiceInlineQueryResult
}

// SetInlineQueryResultCachedAudio sets InlineQueryResult to InlineQueryResultCachedAudio.
func (s *InlineQueryResult) SetInlineQueryResultCachedAudio(v InlineQueryResultCachedAudio) {
	s.Type = InlineQueryResultCachedAudioInlineQueryResult
	s.InlineQueryResultCachedAudio = v
}

// GetInlineQueryResultCachedAudio returns InlineQueryResultCachedAudio and true boolean if InlineQueryResult is InlineQueryResultCachedAudio.
func (s InlineQueryResult) GetInlineQueryResultCachedAudio() (v InlineQueryResultCachedAudio, ok bool) {
	if !s.IsInlineQueryResultCachedAudio() {
		return v, false
	}
	return s.InlineQueryResultCachedAudio, true
}

// NewInlineQueryResultCachedAudioInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedAudio.
func NewInlineQueryResultCachedAudioInlineQueryResult(v InlineQueryResultCachedAudio) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedAudio(v)
	return s
}

// SetInlineQueryResultCachedDocument sets InlineQueryResult to InlineQueryResultCachedDocument.
func (s *InlineQueryResult) SetInlineQueryResultCachedDocument(v InlineQueryResultCachedDocument) {
	s.Type = InlineQueryResultCachedDocumentInlineQueryResult
	s.InlineQueryResultCachedDocument = v
}

// GetInlineQueryResultCachedDocument returns InlineQueryResultCachedDocument and true boolean if InlineQueryResult is InlineQueryResultCachedDocument.
func (s InlineQueryResult) GetInlineQueryResultCachedDocument() (v InlineQueryResultCachedDocument, ok bool) {
	if !s.IsInlineQueryResultCachedDocument() {
		return v, false
	}
	return s.InlineQueryResultCachedDocument, true
}

// NewInlineQueryResultCachedDocumentInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedDocument.
func NewInlineQueryResultCachedDocumentInlineQueryResult(v InlineQueryResultCachedDocument) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedDocument(v)
	return s
}

// SetInlineQueryResultCachedGif sets InlineQueryResult to InlineQueryResultCachedGif.
func (s *InlineQueryResult) SetInlineQueryResultCachedGif(v InlineQueryResultCachedGif) {
	s.Type = InlineQueryResultCachedGifInlineQueryResult
	s.InlineQueryResultCachedGif = v
}

// GetInlineQueryResultCachedGif returns InlineQueryResultCachedGif and true boolean if InlineQueryResult is InlineQueryResultCachedGif.
func (s InlineQueryResult) GetInlineQueryResultCachedGif() (v InlineQueryResultCachedGif, ok bool) {
	if !s.IsInlineQueryResultCachedGif() {
		return v, false
	}
	return s.InlineQueryResultCachedGif, true
}

// NewInlineQueryResultCachedGifInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedGif.
func NewInlineQueryResultCachedGifInlineQueryResult(v InlineQueryResultCachedGif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedGif(v)
	return s
}

// SetInlineQueryResultCachedMpeg4Gif sets InlineQueryResult to InlineQueryResultCachedMpeg4Gif.
func (s *InlineQueryResult) SetInlineQueryResultCachedMpeg4Gif(v InlineQueryResultCachedMpeg4Gif) {
	s.Type = InlineQueryResultCachedMpeg4GifInlineQueryResult
	s.InlineQueryResultCachedMpeg4Gif = v
}

// GetInlineQueryResultCachedMpeg4Gif returns InlineQueryResultCachedMpeg4Gif and true boolean if InlineQueryResult is InlineQueryResultCachedMpeg4Gif.
func (s InlineQueryResult) GetInlineQueryResultCachedMpeg4Gif() (v InlineQueryResultCachedMpeg4Gif, ok bool) {
	if !s.IsInlineQueryResultCachedMpeg4Gif() {
		return v, false
	}
	return s.InlineQueryResultCachedMpeg4Gif, true
}

// NewInlineQueryResultCachedMpeg4GifInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedMpeg4Gif.
func NewInlineQueryResultCachedMpeg4GifInlineQueryResult(v InlineQueryResultCachedMpeg4Gif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedMpeg4Gif(v)
	return s
}

// SetInlineQueryResultCachedPhoto sets InlineQueryResult to InlineQueryResultCachedPhoto.
func (s *InlineQueryResult) SetInlineQueryResultCachedPhoto(v InlineQueryResultCachedPhoto) {
	s.Type = InlineQueryResultCachedPhotoInlineQueryResult
	s.InlineQueryResultCachedPhoto = v
}

// GetInlineQueryResultCachedPhoto returns InlineQueryResultCachedPhoto and true boolean if InlineQueryResult is InlineQueryResultCachedPhoto.
func (s InlineQueryResult) GetInlineQueryResultCachedPhoto() (v InlineQueryResultCachedPhoto, ok bool) {
	if !s.IsInlineQueryResultCachedPhoto() {
		return v, false
	}
	return s.InlineQueryResultCachedPhoto, true
}

// NewInlineQueryResultCachedPhotoInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedPhoto.
func NewInlineQueryResultCachedPhotoInlineQueryResult(v InlineQueryResultCachedPhoto) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedPhoto(v)
	return s
}

// SetInlineQueryResultCachedSticker sets InlineQueryResult to InlineQueryResultCachedSticker.
func (s *InlineQueryResult) SetInlineQueryResultCachedSticker(v InlineQueryResultCachedSticker) {
	s.Type = InlineQueryResultCachedStickerInlineQueryResult
	s.InlineQueryResultCachedSticker = v
}

// GetInlineQueryResultCachedSticker returns InlineQueryResultCachedSticker and true boolean if InlineQueryResult is InlineQueryResultCachedSticker.
func (s InlineQueryResult) GetInlineQueryResultCachedSticker() (v InlineQueryResultCachedSticker, ok bool) {
	if !s.IsInlineQueryResultCachedSticker() {
		return v, false
	}
	return s.InlineQueryResultCachedSticker, true
}

// NewInlineQueryResultCachedStickerInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedSticker.
func NewInlineQueryResultCachedStickerInlineQueryResult(v InlineQueryResultCachedSticker) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedSticker(v)
	return s
}

// SetInlineQueryResultCachedVideo sets InlineQueryResult to InlineQueryResultCachedVideo.
func (s *InlineQueryResult) SetInlineQueryResultCachedVideo(v InlineQueryResultCachedVideo) {
	s.Type = InlineQueryResultCachedVideoInlineQueryResult
	s.InlineQueryResultCachedVideo = v
}

// GetInlineQueryResultCachedVideo returns InlineQueryResultCachedVideo and true boolean if InlineQueryResult is InlineQueryResultCachedVideo.
func (s InlineQueryResult) GetInlineQueryResultCachedVideo() (v InlineQueryResultCachedVideo, ok bool) {
	if !s.IsInlineQueryResultCachedVideo() {
		return v, false
	}
	return s.InlineQueryResultCachedVideo, true
}

// NewInlineQueryResultCachedVideoInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedVideo.
func NewInlineQueryResultCachedVideoInlineQueryResult(v InlineQueryResultCachedVideo) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedVideo(v)
	return s
}

// SetInlineQueryResultCachedVoice sets InlineQueryResult to InlineQueryResultCachedVoice.
func (s *InlineQueryResult) SetInlineQueryResultCachedVoice(v InlineQueryResultCachedVoice) {
	s.Type = InlineQueryResultCachedVoiceInlineQueryResult
	s.InlineQueryResultCachedVoice = v
}

// GetInlineQueryResultCachedVoice returns InlineQueryResultCachedVoice and true boolean if InlineQueryResult is InlineQueryResultCachedVoice.
func (s InlineQueryResult) GetInlineQueryResultCachedVoice() (v InlineQueryResultCachedVoice, ok bool) {
	if !s.IsInlineQueryResultCachedVoice() {
		return v, false
	}
	return s.InlineQueryResultCachedVoice, true
}

// NewInlineQueryResultCachedVoiceInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedVoice.
func NewInlineQueryResultCachedVoiceInlineQueryResult(v InlineQueryResultCachedVoice) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedVoice(v)
	return s
}

// SetInlineQueryResultArticle sets InlineQueryResult to InlineQueryResultArticle.
func (s *InlineQueryResult) SetInlineQueryResultArticle(v InlineQueryResultArticle) {
	s.Type = InlineQueryResultArticleInlineQueryResult
	s.InlineQueryResultArticle = v
}

// GetInlineQueryResultArticle returns InlineQueryResultArticle and true boolean if InlineQueryResult is InlineQueryResultArticle.
func (s InlineQueryResult) GetInlineQueryResultArticle() (v InlineQueryResultArticle, ok bool) {
	if !s.IsInlineQueryResultArticle() {
		return v, false
	}
	return s.InlineQueryResultArticle, true
}

// NewInlineQueryResultArticleInlineQueryResult returns new InlineQueryResult from InlineQueryResultArticle.
func NewInlineQueryResultArticleInlineQueryResult(v InlineQueryResultArticle) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultArticle(v)
	return s
}

// SetInlineQueryResultAudio sets InlineQueryResult to InlineQueryResultAudio.
func (s *InlineQueryResult) SetInlineQueryResultAudio(v InlineQueryResultAudio) {
	s.Type = InlineQueryResultAudioInlineQueryResult
	s.InlineQueryResultAudio = v
}

// GetInlineQueryResultAudio returns InlineQueryResultAudio and true boolean if InlineQueryResult is InlineQueryResultAudio.
func (s InlineQueryResult) GetInlineQueryResultAudio() (v InlineQueryResultAudio, ok bool) {
	if !s.IsInlineQueryResultAudio() {
		return v, false
	}
	return s.InlineQueryResultAudio, true
}

// NewInlineQueryResultAudioInlineQueryResult returns new InlineQueryResult from InlineQueryResultAudio.
func NewInlineQueryResultAudioInlineQueryResult(v InlineQueryResultAudio) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultAudio(v)
	return s
}

// SetInlineQueryResultContact sets InlineQueryResult to InlineQueryResultContact.
func (s *InlineQueryResult) SetInlineQueryResultContact(v InlineQueryResultContact) {
	s.Type = InlineQueryResultContactInlineQueryResult
	s.InlineQueryResultContact = v
}

// GetInlineQueryResultContact returns InlineQueryResultContact and true boolean if InlineQueryResult is InlineQueryResultContact.
func (s InlineQueryResult) GetInlineQueryResultContact() (v InlineQueryResultContact, ok bool) {
	if !s.IsInlineQueryResultContact() {
		return v, false
	}
	return s.InlineQueryResultContact, true
}

// NewInlineQueryResultContactInlineQueryResult returns new InlineQueryResult from InlineQueryResultContact.
func NewInlineQueryResultContactInlineQueryResult(v InlineQueryResultContact) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultContact(v)
	return s
}

// SetInlineQueryResultGame sets InlineQueryResult to InlineQueryResultGame.
func (s *InlineQueryResult) SetInlineQueryResultGame(v InlineQueryResultGame) {
	s.Type = InlineQueryResultGameInlineQueryResult
	s.InlineQueryResultGame = v
}

// GetInlineQueryResultGame returns InlineQueryResultGame and true boolean if InlineQueryResult is InlineQueryResultGame.
func (s InlineQueryResult) GetInlineQueryResultGame() (v InlineQueryResultGame, ok bool) {
	if !s.IsInlineQueryResultGame() {
		return v, false
	}
	return s.InlineQueryResultGame, true
}

// NewInlineQueryResultGameInlineQueryResult returns new InlineQueryResult from InlineQueryResultGame.
func NewInlineQueryResultGameInlineQueryResult(v InlineQueryResultGame) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultGame(v)
	return s
}

// SetInlineQueryResultDocument sets InlineQueryResult to InlineQueryResultDocument.
func (s *InlineQueryResult) SetInlineQueryResultDocument(v InlineQueryResultDocument) {
	s.Type = InlineQueryResultDocumentInlineQueryResult
	s.InlineQueryResultDocument = v
}

// GetInlineQueryResultDocument returns InlineQueryResultDocument and true boolean if InlineQueryResult is InlineQueryResultDocument.
func (s InlineQueryResult) GetInlineQueryResultDocument() (v InlineQueryResultDocument, ok bool) {
	if !s.IsInlineQueryResultDocument() {
		return v, false
	}
	return s.InlineQueryResultDocument, true
}

// NewInlineQueryResultDocumentInlineQueryResult returns new InlineQueryResult from InlineQueryResultDocument.
func NewInlineQueryResultDocumentInlineQueryResult(v InlineQueryResultDocument) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultDocument(v)
	return s
}

// SetInlineQueryResultGif sets InlineQueryResult to InlineQueryResultGif.
func (s *InlineQueryResult) SetInlineQueryResultGif(v InlineQueryResultGif) {
	s.Type = InlineQueryResultGifInlineQueryResult
	s.InlineQueryResultGif = v
}

// GetInlineQueryResultGif returns InlineQueryResultGif and true boolean if InlineQueryResult is InlineQueryResultGif.
func (s InlineQueryResult) GetInlineQueryResultGif() (v InlineQueryResultGif, ok bool) {
	if !s.IsInlineQueryResultGif() {
		return v, false
	}
	return s.InlineQueryResultGif, true
}

// NewInlineQueryResultGifInlineQueryResult returns new InlineQueryResult from InlineQueryResultGif.
func NewInlineQueryResultGifInlineQueryResult(v InlineQueryResultGif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultGif(v)
	return s
}

// SetInlineQueryResultLocation sets InlineQueryResult to InlineQueryResultLocation.
func (s *InlineQueryResult) SetInlineQueryResultLocation(v InlineQueryResultLocation) {
	s.Type = InlineQueryResultLocationInlineQueryResult
	s.InlineQueryResultLocation = v
}

// GetInlineQueryResultLocation returns InlineQueryResultLocation and true boolean if InlineQueryResult is InlineQueryResultLocation.
func (s InlineQueryResult) GetInlineQueryResultLocation() (v InlineQueryResultLocation, ok bool) {
	if !s.IsInlineQueryResultLocation() {
		return v, false
	}
	return s.InlineQueryResultLocation, true
}

// NewInlineQueryResultLocationInlineQueryResult returns new InlineQueryResult from InlineQueryResultLocation.
func NewInlineQueryResultLocationInlineQueryResult(v InlineQueryResultLocation) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultLocation(v)
	return s
}

// SetInlineQueryResultMpeg4Gif sets InlineQueryResult to InlineQueryResultMpeg4Gif.
func (s *InlineQueryResult) SetInlineQueryResultMpeg4Gif(v InlineQueryResultMpeg4Gif) {
	s.Type = InlineQueryResultMpeg4GifInlineQueryResult
	s.InlineQueryResultMpeg4Gif = v
}

// GetInlineQueryResultMpeg4Gif returns InlineQueryResultMpeg4Gif and true boolean if InlineQueryResult is InlineQueryResultMpeg4Gif.
func (s InlineQueryResult) GetInlineQueryResultMpeg4Gif() (v InlineQueryResultMpeg4Gif, ok bool) {
	if !s.IsInlineQueryResultMpeg4Gif() {
		return v, false
	}
	return s.InlineQueryResultMpeg4Gif, true
}

// NewInlineQueryResultMpeg4GifInlineQueryResult returns new InlineQueryResult from InlineQueryResultMpeg4Gif.
func NewInlineQueryResultMpeg4GifInlineQueryResult(v InlineQueryResultMpeg4Gif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultMpeg4Gif(v)
	return s
}

// SetInlineQueryResultPhoto sets InlineQueryResult to InlineQueryResultPhoto.
func (s *InlineQueryResult) SetInlineQueryResultPhoto(v InlineQueryResultPhoto) {
	s.Type = InlineQueryResultPhotoInlineQueryResult
	s.InlineQueryResultPhoto = v
}

// GetInlineQueryResultPhoto returns InlineQueryResultPhoto and true boolean if InlineQueryResult is InlineQueryResultPhoto.
func (s InlineQueryResult) GetInlineQueryResultPhoto() (v InlineQueryResultPhoto, ok bool) {
	if !s.IsInlineQueryResultPhoto() {
		return v, false
	}
	return s.InlineQueryResultPhoto, true
}

// NewInlineQueryResultPhotoInlineQueryResult returns new InlineQueryResult from InlineQueryResultPhoto.
func NewInlineQueryResultPhotoInlineQueryResult(v InlineQueryResultPhoto) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultPhoto(v)
	return s
}

// SetInlineQueryResultVenue sets InlineQueryResult to InlineQueryResultVenue.
func (s *InlineQueryResult) SetInlineQueryResultVenue(v InlineQueryResultVenue) {
	s.Type = InlineQueryResultVenueInlineQueryResult
	s.InlineQueryResultVenue = v
}

// GetInlineQueryResultVenue returns InlineQueryResultVenue and true boolean if InlineQueryResult is InlineQueryResultVenue.
func (s InlineQueryResult) GetInlineQueryResultVenue() (v InlineQueryResultVenue, ok bool) {
	if !s.IsInlineQueryResultVenue() {
		return v, false
	}
	return s.InlineQueryResultVenue, true
}

// NewInlineQueryResultVenueInlineQueryResult returns new InlineQueryResult from InlineQueryResultVenue.
func NewInlineQueryResultVenueInlineQueryResult(v InlineQueryResultVenue) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultVenue(v)
	return s
}

// SetInlineQueryResultVideo sets InlineQueryResult to InlineQueryResultVideo.
func (s *InlineQueryResult) SetInlineQueryResultVideo(v InlineQueryResultVideo) {
	s.Type = InlineQueryResultVideoInlineQueryResult
	s.InlineQueryResultVideo = v
}

// GetInlineQueryResultVideo returns InlineQueryResultVideo and true boolean if InlineQueryResult is InlineQueryResultVideo.
func (s InlineQueryResult) GetInlineQueryResultVideo() (v InlineQueryResultVideo, ok bool) {
	if !s.IsInlineQueryResultVideo() {
		return v, false
	}
	return s.InlineQueryResultVideo, true
}

// NewInlineQueryResultVideoInlineQueryResult returns new InlineQueryResult from InlineQueryResultVideo.
func NewInlineQueryResultVideoInlineQueryResult(v InlineQueryResultVideo) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultVideo(v)
	return s
}

// SetInlineQueryResultVoice sets InlineQueryResult to InlineQueryResultVoice.
func (s *InlineQueryResult) SetInlineQueryResultVoice(v InlineQueryResultVoice) {
	s.Type = InlineQueryResultVoiceInlineQueryResult
	s.InlineQueryResultVoice = v
}

// GetInlineQueryResultVoice returns InlineQueryResultVoice and true boolean if InlineQueryResult is InlineQueryResultVoice.
func (s InlineQueryResult) GetInlineQueryResultVoice() (v InlineQueryResultVoice, ok bool) {
	if !s.IsInlineQueryResultVoice() {
		return v, false
	}
	return s.InlineQueryResultVoice, true
}

// NewInlineQueryResultVoiceInlineQueryResult returns new InlineQueryResult from InlineQueryResultVoice.
func NewInlineQueryResultVoiceInlineQueryResult(v InlineQueryResultVoice) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultVoice(v)
	return s
}

// Represents a link to an article or web page.
// Ref: #/components/schemas/InlineQueryResultArticle
type InlineQueryResultArticle struct {
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Title of the result.
	Title               string                  `json:"title"`
	InputMessageContent InputMessageContent     `json:"input_message_content"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// URL of the result.
	URL OptString `json:"url,omitempty"`
	// Pass True, if you don't want the URL to be shown in the message.
	HideURL OptBool `json:"hide_url,omitempty"`
	// Short description of the result.
	Description OptString `json:"description,omitempty"`
	// URL of the thumbnail for the result.
	ThumbURL OptString `json:"thumb_url,omitempty"`
	// Thumbnail width.
	ThumbWidth OptInt `json:"thumb_width,omitempty"`
	// Thumbnail height.
	ThumbHeight OptInt `json:"thumb_height,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultArticle) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultArticle) GetTitle() string {
	return s.Title
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultArticle) GetInputMessageContent() InputMessageContent {
	return s.InputMessageContent
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultArticle) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetURL returns the value of URL.
func (s InlineQueryResultArticle) GetURL() OptString {
	return s.URL
}

// GetHideURL returns the value of HideURL.
func (s InlineQueryResultArticle) GetHideURL() OptBool {
	return s.HideURL
}

// GetDescription returns the value of Description.
func (s InlineQueryResultArticle) GetDescription() OptString {
	return s.Description
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultArticle) GetThumbURL() OptString {
	return s.ThumbURL
}

// GetThumbWidth returns the value of ThumbWidth.
func (s InlineQueryResultArticle) GetThumbWidth() OptInt {
	return s.ThumbWidth
}

// GetThumbHeight returns the value of ThumbHeight.
func (s InlineQueryResultArticle) GetThumbHeight() OptInt {
	return s.ThumbHeight
}

// SetID sets the value of ID.
func (s *InlineQueryResultArticle) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultArticle) SetTitle(val string) {
	s.Title = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultArticle) SetInputMessageContent(val InputMessageContent) {
	s.InputMessageContent = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultArticle) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetURL sets the value of URL.
func (s *InlineQueryResultArticle) SetURL(val OptString) {
	s.URL = val
}

// SetHideURL sets the value of HideURL.
func (s *InlineQueryResultArticle) SetHideURL(val OptBool) {
	s.HideURL = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultArticle) SetDescription(val OptString) {
	s.Description = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultArticle) SetThumbURL(val OptString) {
	s.ThumbURL = val
}

// SetThumbWidth sets the value of ThumbWidth.
func (s *InlineQueryResultArticle) SetThumbWidth(val OptInt) {
	s.ThumbWidth = val
}

// SetThumbHeight sets the value of ThumbHeight.
func (s *InlineQueryResultArticle) SetThumbHeight(val OptInt) {
	s.ThumbHeight = val
}

// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user.
// Alternatively, you can use input_message_content to send a message with the specified content
// instead of the audio.
// Ref: #/components/schemas/InlineQueryResultAudio
type InlineQueryResultAudio struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the audio file.
	AudioURL string `json:"audio_url"`
	// Title.
	Title string `json:"title"`
	// Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Performer.
	Performer OptString `json:"performer,omitempty"`
	// Audio duration in seconds.
	AudioDuration       OptInt                  `json:"audio_duration,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultAudio) GetID() string {
	return s.ID
}

// GetAudioURL returns the value of AudioURL.
func (s InlineQueryResultAudio) GetAudioURL() string {
	return s.AudioURL
}

// GetTitle returns the value of Title.
func (s InlineQueryResultAudio) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetPerformer returns the value of Performer.
func (s InlineQueryResultAudio) GetPerformer() OptString {
	return s.Performer
}

// GetAudioDuration returns the value of AudioDuration.
func (s InlineQueryResultAudio) GetAudioDuration() OptInt {
	return s.AudioDuration
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultAudio) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultAudio) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultAudio) SetID(val string) {
	s.ID = val
}

// SetAudioURL sets the value of AudioURL.
func (s *InlineQueryResultAudio) SetAudioURL(val string) {
	s.AudioURL = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultAudio) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetPerformer sets the value of Performer.
func (s *InlineQueryResultAudio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetAudioDuration sets the value of AudioDuration.
func (s *InlineQueryResultAudio) SetAudioDuration(val OptInt) {
	s.AudioDuration = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultAudio) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultAudio) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file
// will be sent by the user. Alternatively, you can use input_message_content to send a message with
// the specified content instead of the audio.
// Ref: #/components/schemas/InlineQueryResultCachedAudio
type InlineQueryResultCachedAudio struct {
	// Type of the result, must be audio.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the audio file.
	AudioFileID string `json:"audio_file_id"`
	// Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedAudio) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedAudio) GetID() string {
	return s.ID
}

// GetAudioFileID returns the value of AudioFileID.
func (s InlineQueryResultCachedAudio) GetAudioFileID() string {
	return s.AudioFileID
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedAudio) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedAudio) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedAudio) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedAudio) SetID(val string) {
	s.ID = val
}

// SetAudioFileID sets the value of AudioFileID.
func (s *InlineQueryResultCachedAudio) SetAudioFileID(val string) {
	s.AudioFileID = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedAudio) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedAudio) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by
// the user with an optional caption. Alternatively, you can use input_message_content to send a
// message with the specified content instead of the file.
// Ref: #/components/schemas/InlineQueryResultCachedDocument
type InlineQueryResultCachedDocument struct {
	// Type of the result, must be document.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// Title for the result.
	Title string `json:"title"`
	// A valid file identifier for the file.
	DocumentFileID string `json:"document_file_id"`
	// Short description of the result.
	Description OptString `json:"description,omitempty"`
	// Caption of the document to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedDocument) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedDocument) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultCachedDocument) GetTitle() string {
	return s.Title
}

// GetDocumentFileID returns the value of DocumentFileID.
func (s InlineQueryResultCachedDocument) GetDocumentFileID() string {
	return s.DocumentFileID
}

// GetDescription returns the value of Description.
func (s InlineQueryResultCachedDocument) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedDocument) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedDocument) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedDocument) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedDocument) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedDocument) SetTitle(val string) {
	s.Title = val
}

// SetDocumentFileID sets the value of DocumentFileID.
func (s *InlineQueryResultCachedDocument) SetDocumentFileID(val string) {
	s.DocumentFileID = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultCachedDocument) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedDocument) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedDocument) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to an animated GIF file stored on the Telegram servers. By default, this
// animated GIF file will be sent by the user with an optional caption. Alternatively, you can use
// input_message_content to send a message with specified content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultCachedGif
type InlineQueryResultCachedGif struct {
	// Type of the result, must be gif.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the GIF file.
	GIFFileID string `json:"gif_file_id"`
	// Title for the result.
	Title OptString `json:"title,omitempty"`
	// Caption of the GIF file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedGif) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedGif) GetID() string {
	return s.ID
}

// GetGIFFileID returns the value of GIFFileID.
func (s InlineQueryResultCachedGif) GetGIFFileID() string {
	return s.GIFFileID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultCachedGif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedGif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedGif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedGif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedGif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedGif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedGif) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedGif) SetID(val string) {
	s.ID = val
}

// SetGIFFileID sets the value of GIFFileID.
func (s *InlineQueryResultCachedGif) SetGIFFileID(val string) {
	s.GIFFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedGif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedGif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedGif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedGif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedGif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedGif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the
// Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional
// caption. Alternatively, you can use input_message_content to send a message with the specified
// content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultCachedMpeg4Gif
type InlineQueryResultCachedMpeg4Gif struct {
	// Type of the result, must be mpeg4_gif.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the MP4 file.
	Mpeg4FileID string `json:"mpeg4_file_id"`
	// Title for the result.
	Title OptString `json:"title,omitempty"`
	// Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedMpeg4Gif) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedMpeg4Gif) GetID() string {
	return s.ID
}

// GetMpeg4FileID returns the value of Mpeg4FileID.
func (s InlineQueryResultCachedMpeg4Gif) GetMpeg4FileID() string {
	return s.Mpeg4FileID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultCachedMpeg4Gif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedMpeg4Gif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedMpeg4Gif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedMpeg4Gif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedMpeg4Gif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedMpeg4Gif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedMpeg4Gif) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedMpeg4Gif) SetID(val string) {
	s.ID = val
}

// SetMpeg4FileID sets the value of Mpeg4FileID.
func (s *InlineQueryResultCachedMpeg4Gif) SetMpeg4FileID(val string) {
	s.Mpeg4FileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedMpeg4Gif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedMpeg4Gif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedMpeg4Gif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedMpeg4Gif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedMpeg4Gif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedMpeg4Gif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent
// by the user with an optional caption. Alternatively, you can use input_message_content to send a
// message with the specified content instead of the photo.
// Ref: #/components/schemas/InlineQueryResultCachedPhoto
type InlineQueryResultCachedPhoto struct {
	// Type of the result, must be photo.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier of the photo.
	PhotoFileID string `json:"photo_file_id"`
	// Title for the result.
	Title OptString `json:"title,omitempty"`
	// Short description of the result.
	Description OptString `json:"description,omitempty"`
	// Caption of the photo to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedPhoto) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedPhoto) GetID() string {
	return s.ID
}

// GetPhotoFileID returns the value of PhotoFileID.
func (s InlineQueryResultCachedPhoto) GetPhotoFileID() string {
	return s.PhotoFileID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultCachedPhoto) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s InlineQueryResultCachedPhoto) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedPhoto) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedPhoto) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedPhoto) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedPhoto) SetID(val string) {
	s.ID = val
}

// SetPhotoFileID sets the value of PhotoFileID.
func (s *InlineQueryResultCachedPhoto) SetPhotoFileID(val string) {
	s.PhotoFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedPhoto) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultCachedPhoto) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedPhoto) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedPhoto) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be
// sent by the user. Alternatively, you can use input_message_content to send a message with the
// specified content instead of the sticker.
// Ref: #/components/schemas/InlineQueryResultCachedSticker
type InlineQueryResultCachedSticker struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier of the sticker.
	StickerFileID       string                  `json:"sticker_file_id"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedSticker) GetID() string {
	return s.ID
}

// GetStickerFileID returns the value of StickerFileID.
func (s InlineQueryResultCachedSticker) GetStickerFileID() string {
	return s.StickerFileID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedSticker) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedSticker) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedSticker) SetID(val string) {
	s.ID = val
}

// SetStickerFileID sets the value of StickerFileID.
func (s *InlineQueryResultCachedSticker) SetStickerFileID(val string) {
	s.StickerFileID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedSticker) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedSticker) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a video file stored on the Telegram servers. By default, this video file will
// be sent by the user with an optional caption. Alternatively, you can use input_message_content to
// send a message with the specified content instead of the video.
// Ref: #/components/schemas/InlineQueryResultCachedVideo
type InlineQueryResultCachedVideo struct {
	// Type of the result, must be video.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the video file.
	VideoFileID string `json:"video_file_id"`
	// Title for the result.
	Title string `json:"title"`
	// Short description of the result.
	Description OptString `json:"description,omitempty"`
	// Caption of the video to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedVideo) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedVideo) GetID() string {
	return s.ID
}

// GetVideoFileID returns the value of VideoFileID.
func (s InlineQueryResultCachedVideo) GetVideoFileID() string {
	return s.VideoFileID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultCachedVideo) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s InlineQueryResultCachedVideo) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedVideo) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedVideo) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedVideo) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedVideo) SetID(val string) {
	s.ID = val
}

// SetVideoFileID sets the value of VideoFileID.
func (s *InlineQueryResultCachedVideo) SetVideoFileID(val string) {
	s.VideoFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedVideo) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultCachedVideo) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedVideo) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedVideo) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a voice message stored on the Telegram servers. By default, this voice
// message will be sent by the user. Alternatively, you can use input_message_content to send a
// message with the specified content instead of the voice message.
// Ref: #/components/schemas/InlineQueryResultCachedVoice
type InlineQueryResultCachedVoice struct {
	// Type of the result, must be voice.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the voice message.
	VoiceFileID string `json:"voice_file_id"`
	// Voice message title.
	Title string `json:"title"`
	// Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetType returns the value of Type.
func (s InlineQueryResultCachedVoice) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s InlineQueryResultCachedVoice) GetID() string {
	return s.ID
}

// GetVoiceFileID returns the value of VoiceFileID.
func (s InlineQueryResultCachedVoice) GetVoiceFileID() string {
	return s.VoiceFileID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultCachedVoice) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultCachedVoice) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultCachedVoice) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultCachedVoice) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultCachedVoice) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultCachedVoice) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedVoice) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedVoice) SetID(val string) {
	s.ID = val
}

// SetVoiceFileID sets the value of VoiceFileID.
func (s *InlineQueryResultCachedVoice) SetVoiceFileID(val string) {
	s.VoiceFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedVoice) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedVoice) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedVoice) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedVoice) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedVoice) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedVoice) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a contact with a phone number. By default, this contact will be sent by the user.
// Alternatively, you can use input_message_content to send a message with the specified content
// instead of the contact.
// Ref: #/components/schemas/InlineQueryResultContact
type InlineQueryResultContact struct {
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// Contact's last name.
	LastName OptString `json:"last_name,omitempty"`
	// Additional data about the contact in the form of a vCard, 0-2048 bytes.
	Vcard               OptString               `json:"vcard,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
	// URL of the thumbnail for the result.
	ThumbURL OptString `json:"thumb_url,omitempty"`
	// Thumbnail width.
	ThumbWidth OptInt `json:"thumb_width,omitempty"`
	// Thumbnail height.
	ThumbHeight OptInt `json:"thumb_height,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultContact) GetID() string {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s InlineQueryResultContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s InlineQueryResultContact) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s InlineQueryResultContact) GetLastName() OptString {
	return s.LastName
}

// GetVcard returns the value of Vcard.
func (s InlineQueryResultContact) GetVcard() OptString {
	return s.Vcard
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultContact) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultContact) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultContact) GetThumbURL() OptString {
	return s.ThumbURL
}

// GetThumbWidth returns the value of ThumbWidth.
func (s InlineQueryResultContact) GetThumbWidth() OptInt {
	return s.ThumbWidth
}

// GetThumbHeight returns the value of ThumbHeight.
func (s InlineQueryResultContact) GetThumbHeight() OptInt {
	return s.ThumbHeight
}

// SetID sets the value of ID.
func (s *InlineQueryResultContact) SetID(val string) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *InlineQueryResultContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *InlineQueryResultContact) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *InlineQueryResultContact) SetLastName(val OptString) {
	s.LastName = val
}

// SetVcard sets the value of Vcard.
func (s *InlineQueryResultContact) SetVcard(val OptString) {
	s.Vcard = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultContact) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultContact) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultContact) SetThumbURL(val OptString) {
	s.ThumbURL = val
}

// SetThumbWidth sets the value of ThumbWidth.
func (s *InlineQueryResultContact) SetThumbWidth(val OptInt) {
	s.ThumbWidth = val
}

// SetThumbHeight sets the value of ThumbHeight.
func (s *InlineQueryResultContact) SetThumbHeight(val OptInt) {
	s.ThumbHeight = val
}

// Represents a link to a file. By default, this file will be sent by the user with an optional
// caption. Alternatively, you can use input_message_content to send a message with the specified
// content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
// Ref: #/components/schemas/InlineQueryResultDocument
type InlineQueryResultDocument struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// Title for the result.
	Title string `json:"title"`
	// Caption of the document to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// A valid URL for the file.
	DocumentURL string `json:"document_url"`
	// Mime type of the content of the file, either "application/pdf" or "application/zip".
	MimeType string `json:"mime_type"`
	// Short description of the result.
	Description         OptString               `json:"description,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
	// URL of the thumbnail (JPEG only) for the file.
	ThumbURL OptString `json:"thumb_url,omitempty"`
	// Thumbnail width.
	ThumbWidth OptInt `json:"thumb_width,omitempty"`
	// Thumbnail height.
	ThumbHeight OptInt `json:"thumb_height,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultDocument) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s InlineQueryResultDocument) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDocumentURL returns the value of DocumentURL.
func (s InlineQueryResultDocument) GetDocumentURL() string {
	return s.DocumentURL
}

// GetMimeType returns the value of MimeType.
func (s InlineQueryResultDocument) GetMimeType() string {
	return s.MimeType
}

// GetDescription returns the value of Description.
func (s InlineQueryResultDocument) GetDescription() OptString {
	return s.Description
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultDocument) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultDocument) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultDocument) GetThumbURL() OptString {
	return s.ThumbURL
}

// GetThumbWidth returns the value of ThumbWidth.
func (s InlineQueryResultDocument) GetThumbWidth() OptInt {
	return s.ThumbWidth
}

// GetThumbHeight returns the value of ThumbHeight.
func (s InlineQueryResultDocument) GetThumbHeight() OptInt {
	return s.ThumbHeight
}

// SetID sets the value of ID.
func (s *InlineQueryResultDocument) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultDocument) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDocumentURL sets the value of DocumentURL.
func (s *InlineQueryResultDocument) SetDocumentURL(val string) {
	s.DocumentURL = val
}

// SetMimeType sets the value of MimeType.
func (s *InlineQueryResultDocument) SetMimeType(val string) {
	s.MimeType = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultDocument) SetDescription(val OptString) {
	s.Description = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultDocument) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultDocument) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultDocument) SetThumbURL(val OptString) {
	s.ThumbURL = val
}

// SetThumbWidth sets the value of ThumbWidth.
func (s *InlineQueryResultDocument) SetThumbWidth(val OptInt) {
	s.ThumbWidth = val
}

// SetThumbHeight sets the value of ThumbHeight.
func (s *InlineQueryResultDocument) SetThumbHeight(val OptInt) {
	s.ThumbHeight = val
}

// Represents a Game.
// Ref: #/components/schemas/InlineQueryResultGame
type InlineQueryResultGame struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// Short name of the game.
	GameShortName string                  `json:"game_short_name"`
	ReplyMarkup   OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultGame) GetID() string {
	return s.ID
}

// GetGameShortName returns the value of GameShortName.
func (s InlineQueryResultGame) GetGameShortName() string {
	return s.GameShortName
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultGame) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetID sets the value of ID.
func (s *InlineQueryResultGame) SetID(val string) {
	s.ID = val
}

// SetGameShortName sets the value of GameShortName.
func (s *InlineQueryResultGame) SetGameShortName(val string) {
	s.GameShortName = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultGame) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the
// user with optional caption. Alternatively, you can use input_message_content to send a message
// with the specified content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultGif
type InlineQueryResultGif struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the GIF file. File size must not exceed 1MB.
	GIFURL string `json:"gif_url"`
	// Width of the GIF.
	GIFWidth OptInt `json:"gif_width,omitempty"`
	// Height of the GIF.
	GIFHeight OptInt `json:"gif_height,omitempty"`
	// Duration of the GIF in seconds.
	GIFDuration OptInt `json:"gif_duration,omitempty"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.
	ThumbURL string `json:"thumb_url"`
	// MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to
	// "image/jpeg".
	ThumbMimeType OptString `json:"thumb_mime_type,omitempty"`
	// Title for the result.
	Title OptString `json:"title,omitempty"`
	// Caption of the GIF file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultGif) GetID() string {
	return s.ID
}

// GetGIFURL returns the value of GIFURL.
func (s InlineQueryResultGif) GetGIFURL() string {
	return s.GIFURL
}

// GetGIFWidth returns the value of GIFWidth.
func (s InlineQueryResultGif) GetGIFWidth() OptInt {
	return s.GIFWidth
}

// GetGIFHeight returns the value of GIFHeight.
func (s InlineQueryResultGif) GetGIFHeight() OptInt {
	return s.GIFHeight
}

// GetGIFDuration returns the value of GIFDuration.
func (s InlineQueryResultGif) GetGIFDuration() OptInt {
	return s.GIFDuration
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultGif) GetThumbURL() string {
	return s.ThumbURL
}

// GetThumbMimeType returns the value of ThumbMimeType.
func (s InlineQueryResultGif) GetThumbMimeType() OptString {
	return s.ThumbMimeType
}

// GetTitle returns the value of Title.
func (s InlineQueryResultGif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultGif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultGif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultGif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultGif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultGif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultGif) SetID(val string) {
	s.ID = val
}

// SetGIFURL sets the value of GIFURL.
func (s *InlineQueryResultGif) SetGIFURL(val string) {
	s.GIFURL = val
}

// SetGIFWidth sets the value of GIFWidth.
func (s *InlineQueryResultGif) SetGIFWidth(val OptInt) {
	s.GIFWidth = val
}

// SetGIFHeight sets the value of GIFHeight.
func (s *InlineQueryResultGif) SetGIFHeight(val OptInt) {
	s.GIFHeight = val
}

// SetGIFDuration sets the value of GIFDuration.
func (s *InlineQueryResultGif) SetGIFDuration(val OptInt) {
	s.GIFDuration = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultGif) SetThumbURL(val string) {
	s.ThumbURL = val
}

// SetThumbMimeType sets the value of ThumbMimeType.
func (s *InlineQueryResultGif) SetThumbMimeType(val OptString) {
	s.ThumbMimeType = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultGif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultGif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultGif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultGif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultGif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultGif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a location on a map. By default, the location will be sent by the user. Alternatively,
// you can use input_message_content to send a message with the specified content instead of the
// location.
// Ref: #/components/schemas/InlineQueryResultLocation
type InlineQueryResultLocation struct {
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Location latitude in degrees.
	Latitude float64 `json:"latitude"`
	// Location longitude in degrees.
	Longitude float64 `json:"longitude"`
	// Location title.
	Title string `json:"title"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy,omitempty"`
	// Period in seconds for which the location can be updated, should be between 60 and 86400.
	LivePeriod OptInt `json:"live_period,omitempty"`
	// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
	// if specified.
	Heading OptInt `json:"heading,omitempty"`
	// For live locations, a maximum distance for proximity alerts about approaching another chat member,
	// in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt                  `json:"proximity_alert_radius,omitempty"`
	ReplyMarkup          OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent  OptInputMessageContent  `json:"input_message_content,omitempty"`
	// URL of the thumbnail for the result.
	ThumbURL OptString `json:"thumb_url,omitempty"`
	// Thumbnail width.
	ThumbWidth OptInt `json:"thumb_width,omitempty"`
	// Thumbnail height.
	ThumbHeight OptInt `json:"thumb_height,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultLocation) GetID() string {
	return s.ID
}

// GetLatitude returns the value of Latitude.
func (s InlineQueryResultLocation) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s InlineQueryResultLocation) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s InlineQueryResultLocation) GetTitle() string {
	return s.Title
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s InlineQueryResultLocation) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s InlineQueryResultLocation) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s InlineQueryResultLocation) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s InlineQueryResultLocation) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultLocation) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultLocation) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultLocation) GetThumbURL() OptString {
	return s.ThumbURL
}

// GetThumbWidth returns the value of ThumbWidth.
func (s InlineQueryResultLocation) GetThumbWidth() OptInt {
	return s.ThumbWidth
}

// GetThumbHeight returns the value of ThumbHeight.
func (s InlineQueryResultLocation) GetThumbHeight() OptInt {
	return s.ThumbHeight
}

// SetID sets the value of ID.
func (s *InlineQueryResultLocation) SetID(val string) {
	s.ID = val
}

// SetLatitude sets the value of Latitude.
func (s *InlineQueryResultLocation) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InlineQueryResultLocation) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultLocation) SetTitle(val string) {
	s.Title = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *InlineQueryResultLocation) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *InlineQueryResultLocation) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *InlineQueryResultLocation) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *InlineQueryResultLocation) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultLocation) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultLocation) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultLocation) SetThumbURL(val OptString) {
	s.ThumbURL = val
}

// SetThumbWidth sets the value of ThumbWidth.
func (s *InlineQueryResultLocation) SetThumbWidth(val OptInt) {
	s.ThumbWidth = val
}

// SetThumbHeight sets the value of ThumbHeight.
func (s *InlineQueryResultLocation) SetThumbHeight(val OptInt) {
	s.ThumbHeight = val
}

// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this
// animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use
// input_message_content to send a message with the specified content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultMpeg4Gif
type InlineQueryResultMpeg4Gif struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the MP4 file. File size must not exceed 1MB.
	Mpeg4URL string `json:"mpeg4_url"`
	// Video width.
	Mpeg4Width OptInt `json:"mpeg4_width,omitempty"`
	// Video height.
	Mpeg4Height OptInt `json:"mpeg4_height,omitempty"`
	// Video duration in seconds.
	Mpeg4Duration OptInt `json:"mpeg4_duration,omitempty"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.
	ThumbURL string `json:"thumb_url"`
	// MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to
	// "image/jpeg".
	ThumbMimeType OptString `json:"thumb_mime_type,omitempty"`
	// Title for the result.
	Title OptString `json:"title,omitempty"`
	// Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultMpeg4Gif) GetID() string {
	return s.ID
}

// GetMpeg4URL returns the value of Mpeg4URL.
func (s InlineQueryResultMpeg4Gif) GetMpeg4URL() string {
	return s.Mpeg4URL
}

// GetMpeg4Width returns the value of Mpeg4Width.
func (s InlineQueryResultMpeg4Gif) GetMpeg4Width() OptInt {
	return s.Mpeg4Width
}

// GetMpeg4Height returns the value of Mpeg4Height.
func (s InlineQueryResultMpeg4Gif) GetMpeg4Height() OptInt {
	return s.Mpeg4Height
}

// GetMpeg4Duration returns the value of Mpeg4Duration.
func (s InlineQueryResultMpeg4Gif) GetMpeg4Duration() OptInt {
	return s.Mpeg4Duration
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultMpeg4Gif) GetThumbURL() string {
	return s.ThumbURL
}

// GetThumbMimeType returns the value of ThumbMimeType.
func (s InlineQueryResultMpeg4Gif) GetThumbMimeType() OptString {
	return s.ThumbMimeType
}

// GetTitle returns the value of Title.
func (s InlineQueryResultMpeg4Gif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultMpeg4Gif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultMpeg4Gif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultMpeg4Gif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultMpeg4Gif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultMpeg4Gif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultMpeg4Gif) SetID(val string) {
	s.ID = val
}

// SetMpeg4URL sets the value of Mpeg4URL.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4URL(val string) {
	s.Mpeg4URL = val
}

// SetMpeg4Width sets the value of Mpeg4Width.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4Width(val OptInt) {
	s.Mpeg4Width = val
}

// SetMpeg4Height sets the value of Mpeg4Height.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4Height(val OptInt) {
	s.Mpeg4Height = val
}

// SetMpeg4Duration sets the value of Mpeg4Duration.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4Duration(val OptInt) {
	s.Mpeg4Duration = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultMpeg4Gif) SetThumbURL(val string) {
	s.ThumbURL = val
}

// SetThumbMimeType sets the value of ThumbMimeType.
func (s *InlineQueryResultMpeg4Gif) SetThumbMimeType(val OptString) {
	s.ThumbMimeType = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultMpeg4Gif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultMpeg4Gif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultMpeg4Gif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultMpeg4Gif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultMpeg4Gif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultMpeg4Gif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a photo. By default, this photo will be sent by the user with optional
// caption. Alternatively, you can use input_message_content to send a message with the specified
// content instead of the photo.
// Ref: #/components/schemas/InlineQueryResultPhoto
type InlineQueryResultPhoto struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB.
	PhotoURL string `json:"photo_url"`
	// URL of the thumbnail for the photo.
	ThumbURL string `json:"thumb_url"`
	// Width of the photo.
	PhotoWidth OptInt `json:"photo_width,omitempty"`
	// Height of the photo.
	PhotoHeight OptInt `json:"photo_height,omitempty"`
	// Title for the result.
	Title OptString `json:"title,omitempty"`
	// Short description of the result.
	Description OptString `json:"description,omitempty"`
	// Caption of the photo to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities     []MessageEntity         `json:"caption_entities,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultPhoto) GetID() string {
	return s.ID
}

// GetPhotoURL returns the value of PhotoURL.
func (s InlineQueryResultPhoto) GetPhotoURL() string {
	return s.PhotoURL
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultPhoto) GetThumbURL() string {
	return s.ThumbURL
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s InlineQueryResultPhoto) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s InlineQueryResultPhoto) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetTitle returns the value of Title.
func (s InlineQueryResultPhoto) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s InlineQueryResultPhoto) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultPhoto) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultPhoto) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultPhoto) SetID(val string) {
	s.ID = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *InlineQueryResultPhoto) SetPhotoURL(val string) {
	s.PhotoURL = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultPhoto) SetThumbURL(val string) {
	s.ThumbURL = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *InlineQueryResultPhoto) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *InlineQueryResultPhoto) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultPhoto) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultPhoto) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultPhoto) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultPhoto) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use
// input_message_content to send a message with the specified content instead of the venue.
// Ref: #/components/schemas/InlineQueryResultVenue
type InlineQueryResultVenue struct {
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Latitude of the venue location in degrees.
	Latitude float64 `json:"latitude"`
	// Longitude of the venue location in degrees.
	Longitude float64 `json:"longitude"`
	// Title of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// Foursquare identifier of the venue if known.
	FoursquareID OptString `json:"foursquare_id,omitempty"`
	// Foursquare type of the venue, if known. (For example, "arts_entertainment/default",
	// "arts_entertainment/aquarium" or "food/icecream".).
	FoursquareType OptString `json:"foursquare_type,omitempty"`
	// Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id,omitempty"`
	// Google Places type of the venue. (See supported types.).
	GooglePlaceType     OptString               `json:"google_place_type,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
	// URL of the thumbnail for the result.
	ThumbURL OptString `json:"thumb_url,omitempty"`
	// Thumbnail width.
	ThumbWidth OptInt `json:"thumb_width,omitempty"`
	// Thumbnail height.
	ThumbHeight OptInt `json:"thumb_height,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultVenue) GetID() string {
	return s.ID
}

// GetLatitude returns the value of Latitude.
func (s InlineQueryResultVenue) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s InlineQueryResultVenue) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s InlineQueryResultVenue) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s InlineQueryResultVenue) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s InlineQueryResultVenue) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s InlineQueryResultVenue) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s InlineQueryResultVenue) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s InlineQueryResultVenue) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultVenue) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultVenue) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultVenue) GetThumbURL() OptString {
	return s.ThumbURL
}

// GetThumbWidth returns the value of ThumbWidth.
func (s InlineQueryResultVenue) GetThumbWidth() OptInt {
	return s.ThumbWidth
}

// GetThumbHeight returns the value of ThumbHeight.
func (s InlineQueryResultVenue) GetThumbHeight() OptInt {
	return s.ThumbHeight
}

// SetID sets the value of ID.
func (s *InlineQueryResultVenue) SetID(val string) {
	s.ID = val
}

// SetLatitude sets the value of Latitude.
func (s *InlineQueryResultVenue) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InlineQueryResultVenue) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultVenue) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *InlineQueryResultVenue) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *InlineQueryResultVenue) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *InlineQueryResultVenue) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *InlineQueryResultVenue) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *InlineQueryResultVenue) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultVenue) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultVenue) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultVenue) SetThumbURL(val OptString) {
	s.ThumbURL = val
}

// SetThumbWidth sets the value of ThumbWidth.
func (s *InlineQueryResultVenue) SetThumbWidth(val OptInt) {
	s.ThumbWidth = val
}

// SetThumbHeight sets the value of ThumbHeight.
func (s *InlineQueryResultVenue) SetThumbHeight(val OptInt) {
	s.ThumbHeight = val
}

// Represents a link to a page containing an embedded video player or a video file. By default, this
// video file will be sent by the user with an optional caption. Alternatively, you can use
// input_message_content to send a message with the specified content instead of the video.
// Ref: #/components/schemas/InlineQueryResultVideo
type InlineQueryResultVideo struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the embedded video player or video file.
	VideoURL string `json:"video_url"`
	// Mime type of the content of video url, "text/html" or "video/mp4".
	MimeType string `json:"mime_type"`
	// URL of the thumbnail (JPEG only) for the video.
	ThumbURL string `json:"thumb_url"`
	// Title for the result.
	Title string `json:"title"`
	// Caption of the video to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Video width.
	VideoWidth OptInt `json:"video_width,omitempty"`
	// Video height.
	VideoHeight OptInt `json:"video_height,omitempty"`
	// Video duration in seconds.
	VideoDuration OptInt `json:"video_duration,omitempty"`
	// Short description of the result.
	Description         OptString               `json:"description,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultVideo) GetID() string {
	return s.ID
}

// GetVideoURL returns the value of VideoURL.
func (s InlineQueryResultVideo) GetVideoURL() string {
	return s.VideoURL
}

// GetMimeType returns the value of MimeType.
func (s InlineQueryResultVideo) GetMimeType() string {
	return s.MimeType
}

// GetThumbURL returns the value of ThumbURL.
func (s InlineQueryResultVideo) GetThumbURL() string {
	return s.ThumbURL
}

// GetTitle returns the value of Title.
func (s InlineQueryResultVideo) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetVideoWidth returns the value of VideoWidth.
func (s InlineQueryResultVideo) GetVideoWidth() OptInt {
	return s.VideoWidth
}

// GetVideoHeight returns the value of VideoHeight.
func (s InlineQueryResultVideo) GetVideoHeight() OptInt {
	return s.VideoHeight
}

// GetVideoDuration returns the value of VideoDuration.
func (s InlineQueryResultVideo) GetVideoDuration() OptInt {
	return s.VideoDuration
}

// GetDescription returns the value of Description.
func (s InlineQueryResultVideo) GetDescription() OptString {
	return s.Description
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultVideo) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultVideo) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultVideo) SetID(val string) {
	s.ID = val
}

// SetVideoURL sets the value of VideoURL.
func (s *InlineQueryResultVideo) SetVideoURL(val string) {
	s.VideoURL = val
}

// SetMimeType sets the value of MimeType.
func (s *InlineQueryResultVideo) SetMimeType(val string) {
	s.MimeType = val
}

// SetThumbURL sets the value of ThumbURL.
func (s *InlineQueryResultVideo) SetThumbURL(val string) {
	s.ThumbURL = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultVideo) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetVideoWidth sets the value of VideoWidth.
func (s *InlineQueryResultVideo) SetVideoWidth(val OptInt) {
	s.VideoWidth = val
}

// SetVideoHeight sets the value of VideoHeight.
func (s *InlineQueryResultVideo) SetVideoHeight(val OptInt) {
	s.VideoHeight = val
}

// SetVideoDuration sets the value of VideoDuration.
func (s *InlineQueryResultVideo) SetVideoDuration(val OptInt) {
	s.VideoDuration = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultVideo) SetDescription(val OptString) {
	s.Description = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultVideo) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultVideo) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this
// voice recording will be sent by the user. Alternatively, you can use input_message_content to send
// a message with the specified content instead of the the voice message.
// Ref: #/components/schemas/InlineQueryResultVoice
type InlineQueryResultVoice struct {
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the voice recording.
	VoiceURL string `json:"voice_url"`
	// Recording title.
	Title string `json:"title"`
	// Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Recording duration in seconds.
	VoiceDuration       OptInt                  `json:"voice_duration,omitempty"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content,omitempty"`
}

// GetID returns the value of ID.
func (s InlineQueryResultVoice) GetID() string {
	return s.ID
}

// GetVoiceURL returns the value of VoiceURL.
func (s InlineQueryResultVoice) GetVoiceURL() string {
	return s.VoiceURL
}

// GetTitle returns the value of Title.
func (s InlineQueryResultVoice) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s InlineQueryResultVoice) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InlineQueryResultVoice) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InlineQueryResultVoice) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetVoiceDuration returns the value of VoiceDuration.
func (s InlineQueryResultVoice) GetVoiceDuration() OptInt {
	return s.VoiceDuration
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s InlineQueryResultVoice) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s InlineQueryResultVoice) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetID sets the value of ID.
func (s *InlineQueryResultVoice) SetID(val string) {
	s.ID = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *InlineQueryResultVoice) SetVoiceURL(val string) {
	s.VoiceURL = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultVoice) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultVoice) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultVoice) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultVoice) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetVoiceDuration sets the value of VoiceDuration.
func (s *InlineQueryResultVoice) SetVoiceDuration(val OptInt) {
	s.VoiceDuration = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultVoice) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultVoice) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents the content of a contact message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputContactMessageContent
type InputContactMessageContent struct {
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// Contact's last name.
	LastName OptString `json:"last_name,omitempty"`
	// Additional data about the contact in the form of a vCard, 0-2048 bytes.
	Vcard OptString `json:"vcard,omitempty"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s InputContactMessageContent) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s InputContactMessageContent) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s InputContactMessageContent) GetLastName() OptString {
	return s.LastName
}

// GetVcard returns the value of Vcard.
func (s InputContactMessageContent) GetVcard() OptString {
	return s.Vcard
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *InputContactMessageContent) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *InputContactMessageContent) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *InputContactMessageContent) SetLastName(val OptString) {
	s.LastName = val
}

// SetVcard sets the value of Vcard.
func (s *InputContactMessageContent) SetVcard(val OptString) {
	s.Vcard = val
}

// Represents the content of an invoice message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputInvoiceMessageContent
type InputInvoiceMessageContent struct {
	// Product name, 1-32 characters.
	Title string `json:"title"`
	// Product description, 1-255 characters.
	Description string `json:"description"`
	// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
	// internal processes.
	Payload string `json:"payload"`
	// Payment provider token, obtained via Botfather.
	ProviderToken string `json:"provider_token"`
	// Three-letter ISO 4217 currency code, see more on currencies.
	Currency string `json:"currency"`
	// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery
	// cost, delivery tax, bonus, etc.).
	Prices []LabeledPrice `json:"prices"`
	// The maximum accepted amount for tips in the smallest units of the currency (integer, not
	// float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp
	// parameter in currencies.json, it shows the number of digits past the decimal point for each
	// currency (2 for the majority of currencies). Defaults to 0.
	MaxTipAmount OptInt `json:"max_tip_amount,omitempty"`
	// A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer,
	//  not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts
	// must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
	SuggestedTipAmounts []int64 `json:"suggested_tip_amounts,omitempty"`
	// A JSON-serialized object for data about the invoice, which will be shared with the payment
	// provider. A detailed description of the required fields should be provided by the payment provider.
	ProviderData OptString `json:"provider_data,omitempty"`
	// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a
	// service. People like it better when they see what they are paying for.
	PhotoURL OptString `json:"photo_url,omitempty"`
	// Photo size.
	PhotoSize OptInt `json:"photo_size,omitempty"`
	// Photo width.
	PhotoWidth OptInt `json:"photo_width,omitempty"`
	// Photo height.
	PhotoHeight OptInt `json:"photo_height,omitempty"`
	// Pass True, if you require the user's full name to complete the order.
	NeedName OptBool `json:"need_name,omitempty"`
	// Pass True, if you require the user's phone number to complete the order.
	NeedPhoneNumber OptBool `json:"need_phone_number,omitempty"`
	// Pass True, if you require the user's email address to complete the order.
	NeedEmail OptBool `json:"need_email,omitempty"`
	// Pass True, if you require the user's shipping address to complete the order.
	NeedShippingAddress OptBool `json:"need_shipping_address,omitempty"`
	// Pass True, if user's phone number should be sent to provider.
	SendPhoneNumberToProvider OptBool `json:"send_phone_number_to_provider,omitempty"`
	// Pass True, if user's email address should be sent to provider.
	SendEmailToProvider OptBool `json:"send_email_to_provider,omitempty"`
	// Pass True, if the final price depends on the shipping method.
	IsFlexible OptBool `json:"is_flexible,omitempty"`
}

// GetTitle returns the value of Title.
func (s InputInvoiceMessageContent) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s InputInvoiceMessageContent) GetDescription() string {
	return s.Description
}

// GetPayload returns the value of Payload.
func (s InputInvoiceMessageContent) GetPayload() string {
	return s.Payload
}

// GetProviderToken returns the value of ProviderToken.
func (s InputInvoiceMessageContent) GetProviderToken() string {
	return s.ProviderToken
}

// GetCurrency returns the value of Currency.
func (s InputInvoiceMessageContent) GetCurrency() string {
	return s.Currency
}

// GetPrices returns the value of Prices.
func (s InputInvoiceMessageContent) GetPrices() []LabeledPrice {
	return s.Prices
}

// GetMaxTipAmount returns the value of MaxTipAmount.
func (s InputInvoiceMessageContent) GetMaxTipAmount() OptInt {
	return s.MaxTipAmount
}

// GetSuggestedTipAmounts returns the value of SuggestedTipAmounts.
func (s InputInvoiceMessageContent) GetSuggestedTipAmounts() []int64 {
	return s.SuggestedTipAmounts
}

// GetProviderData returns the value of ProviderData.
func (s InputInvoiceMessageContent) GetProviderData() OptString {
	return s.ProviderData
}

// GetPhotoURL returns the value of PhotoURL.
func (s InputInvoiceMessageContent) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetPhotoSize returns the value of PhotoSize.
func (s InputInvoiceMessageContent) GetPhotoSize() OptInt {
	return s.PhotoSize
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s InputInvoiceMessageContent) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s InputInvoiceMessageContent) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetNeedName returns the value of NeedName.
func (s InputInvoiceMessageContent) GetNeedName() OptBool {
	return s.NeedName
}

// GetNeedPhoneNumber returns the value of NeedPhoneNumber.
func (s InputInvoiceMessageContent) GetNeedPhoneNumber() OptBool {
	return s.NeedPhoneNumber
}

// GetNeedEmail returns the value of NeedEmail.
func (s InputInvoiceMessageContent) GetNeedEmail() OptBool {
	return s.NeedEmail
}

// GetNeedShippingAddress returns the value of NeedShippingAddress.
func (s InputInvoiceMessageContent) GetNeedShippingAddress() OptBool {
	return s.NeedShippingAddress
}

// GetSendPhoneNumberToProvider returns the value of SendPhoneNumberToProvider.
func (s InputInvoiceMessageContent) GetSendPhoneNumberToProvider() OptBool {
	return s.SendPhoneNumberToProvider
}

// GetSendEmailToProvider returns the value of SendEmailToProvider.
func (s InputInvoiceMessageContent) GetSendEmailToProvider() OptBool {
	return s.SendEmailToProvider
}

// GetIsFlexible returns the value of IsFlexible.
func (s InputInvoiceMessageContent) GetIsFlexible() OptBool {
	return s.IsFlexible
}

// SetTitle sets the value of Title.
func (s *InputInvoiceMessageContent) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InputInvoiceMessageContent) SetDescription(val string) {
	s.Description = val
}

// SetPayload sets the value of Payload.
func (s *InputInvoiceMessageContent) SetPayload(val string) {
	s.Payload = val
}

// SetProviderToken sets the value of ProviderToken.
func (s *InputInvoiceMessageContent) SetProviderToken(val string) {
	s.ProviderToken = val
}

// SetCurrency sets the value of Currency.
func (s *InputInvoiceMessageContent) SetCurrency(val string) {
	s.Currency = val
}

// SetPrices sets the value of Prices.
func (s *InputInvoiceMessageContent) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// SetMaxTipAmount sets the value of MaxTipAmount.
func (s *InputInvoiceMessageContent) SetMaxTipAmount(val OptInt) {
	s.MaxTipAmount = val
}

// SetSuggestedTipAmounts sets the value of SuggestedTipAmounts.
func (s *InputInvoiceMessageContent) SetSuggestedTipAmounts(val []int64) {
	s.SuggestedTipAmounts = val
}

// SetProviderData sets the value of ProviderData.
func (s *InputInvoiceMessageContent) SetProviderData(val OptString) {
	s.ProviderData = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *InputInvoiceMessageContent) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetPhotoSize sets the value of PhotoSize.
func (s *InputInvoiceMessageContent) SetPhotoSize(val OptInt) {
	s.PhotoSize = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *InputInvoiceMessageContent) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *InputInvoiceMessageContent) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetNeedName sets the value of NeedName.
func (s *InputInvoiceMessageContent) SetNeedName(val OptBool) {
	s.NeedName = val
}

// SetNeedPhoneNumber sets the value of NeedPhoneNumber.
func (s *InputInvoiceMessageContent) SetNeedPhoneNumber(val OptBool) {
	s.NeedPhoneNumber = val
}

// SetNeedEmail sets the value of NeedEmail.
func (s *InputInvoiceMessageContent) SetNeedEmail(val OptBool) {
	s.NeedEmail = val
}

// SetNeedShippingAddress sets the value of NeedShippingAddress.
func (s *InputInvoiceMessageContent) SetNeedShippingAddress(val OptBool) {
	s.NeedShippingAddress = val
}

// SetSendPhoneNumberToProvider sets the value of SendPhoneNumberToProvider.
func (s *InputInvoiceMessageContent) SetSendPhoneNumberToProvider(val OptBool) {
	s.SendPhoneNumberToProvider = val
}

// SetSendEmailToProvider sets the value of SendEmailToProvider.
func (s *InputInvoiceMessageContent) SetSendEmailToProvider(val OptBool) {
	s.SendEmailToProvider = val
}

// SetIsFlexible sets the value of IsFlexible.
func (s *InputInvoiceMessageContent) SetIsFlexible(val OptBool) {
	s.IsFlexible = val
}

// Represents the content of a location message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputLocationMessageContent
type InputLocationMessageContent struct {
	// Latitude of the location in degrees.
	Latitude float64 `json:"latitude"`
	// Longitude of the location in degrees.
	Longitude float64 `json:"longitude"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy,omitempty"`
	// Period in seconds for which the location can be updated, should be between 60 and 86400.
	LivePeriod OptInt `json:"live_period,omitempty"`
	// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
	// if specified.
	Heading OptInt `json:"heading,omitempty"`
	// For live locations, a maximum distance for proximity alerts about approaching another chat member,
	// in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt `json:"proximity_alert_radius,omitempty"`
}

// GetLatitude returns the value of Latitude.
func (s InputLocationMessageContent) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s InputLocationMessageContent) GetLongitude() float64 {
	return s.Longitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s InputLocationMessageContent) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s InputLocationMessageContent) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s InputLocationMessageContent) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s InputLocationMessageContent) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// SetLatitude sets the value of Latitude.
func (s *InputLocationMessageContent) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InputLocationMessageContent) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *InputLocationMessageContent) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *InputLocationMessageContent) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *InputLocationMessageContent) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *InputLocationMessageContent) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// This object represents the content of a media message to be sent.
// Ref: #/components/schemas/InputMedia
// InputMedia represents sum type.
type InputMedia struct {
	Type                InputMediaType // switch on this field
	InputMediaAnimation InputMediaAnimation
	InputMediaDocument  InputMediaDocument
	InputMediaAudio     InputMediaAudio
	InputMediaPhoto     InputMediaPhoto
	InputMediaVideo     InputMediaVideo
}

// InputMediaType is oneOf type of InputMedia.
type InputMediaType string

// Possible values for InputMediaType.
const (
	InputMediaAnimationInputMedia InputMediaType = "InputMediaAnimation"
	InputMediaDocumentInputMedia  InputMediaType = "InputMediaDocument"
	InputMediaAudioInputMedia     InputMediaType = "InputMediaAudio"
	InputMediaPhotoInputMedia     InputMediaType = "InputMediaPhoto"
	InputMediaVideoInputMedia     InputMediaType = "InputMediaVideo"
)

// IsInputMediaAnimation reports whether InputMedia is InputMediaAnimation.
func (s InputMedia) IsInputMediaAnimation() bool { return s.Type == InputMediaAnimationInputMedia }

// IsInputMediaDocument reports whether InputMedia is InputMediaDocument.
func (s InputMedia) IsInputMediaDocument() bool { return s.Type == InputMediaDocumentInputMedia }

// IsInputMediaAudio reports whether InputMedia is InputMediaAudio.
func (s InputMedia) IsInputMediaAudio() bool { return s.Type == InputMediaAudioInputMedia }

// IsInputMediaPhoto reports whether InputMedia is InputMediaPhoto.
func (s InputMedia) IsInputMediaPhoto() bool { return s.Type == InputMediaPhotoInputMedia }

// IsInputMediaVideo reports whether InputMedia is InputMediaVideo.
func (s InputMedia) IsInputMediaVideo() bool { return s.Type == InputMediaVideoInputMedia }

// SetInputMediaAnimation sets InputMedia to InputMediaAnimation.
func (s *InputMedia) SetInputMediaAnimation(v InputMediaAnimation) {
	s.Type = InputMediaAnimationInputMedia
	s.InputMediaAnimation = v
}

// GetInputMediaAnimation returns InputMediaAnimation and true boolean if InputMedia is InputMediaAnimation.
func (s InputMedia) GetInputMediaAnimation() (v InputMediaAnimation, ok bool) {
	if !s.IsInputMediaAnimation() {
		return v, false
	}
	return s.InputMediaAnimation, true
}

// NewInputMediaAnimationInputMedia returns new InputMedia from InputMediaAnimation.
func NewInputMediaAnimationInputMedia(v InputMediaAnimation) InputMedia {
	var s InputMedia
	s.SetInputMediaAnimation(v)
	return s
}

// SetInputMediaDocument sets InputMedia to InputMediaDocument.
func (s *InputMedia) SetInputMediaDocument(v InputMediaDocument) {
	s.Type = InputMediaDocumentInputMedia
	s.InputMediaDocument = v
}

// GetInputMediaDocument returns InputMediaDocument and true boolean if InputMedia is InputMediaDocument.
func (s InputMedia) GetInputMediaDocument() (v InputMediaDocument, ok bool) {
	if !s.IsInputMediaDocument() {
		return v, false
	}
	return s.InputMediaDocument, true
}

// NewInputMediaDocumentInputMedia returns new InputMedia from InputMediaDocument.
func NewInputMediaDocumentInputMedia(v InputMediaDocument) InputMedia {
	var s InputMedia
	s.SetInputMediaDocument(v)
	return s
}

// SetInputMediaAudio sets InputMedia to InputMediaAudio.
func (s *InputMedia) SetInputMediaAudio(v InputMediaAudio) {
	s.Type = InputMediaAudioInputMedia
	s.InputMediaAudio = v
}

// GetInputMediaAudio returns InputMediaAudio and true boolean if InputMedia is InputMediaAudio.
func (s InputMedia) GetInputMediaAudio() (v InputMediaAudio, ok bool) {
	if !s.IsInputMediaAudio() {
		return v, false
	}
	return s.InputMediaAudio, true
}

// NewInputMediaAudioInputMedia returns new InputMedia from InputMediaAudio.
func NewInputMediaAudioInputMedia(v InputMediaAudio) InputMedia {
	var s InputMedia
	s.SetInputMediaAudio(v)
	return s
}

// SetInputMediaPhoto sets InputMedia to InputMediaPhoto.
func (s *InputMedia) SetInputMediaPhoto(v InputMediaPhoto) {
	s.Type = InputMediaPhotoInputMedia
	s.InputMediaPhoto = v
}

// GetInputMediaPhoto returns InputMediaPhoto and true boolean if InputMedia is InputMediaPhoto.
func (s InputMedia) GetInputMediaPhoto() (v InputMediaPhoto, ok bool) {
	if !s.IsInputMediaPhoto() {
		return v, false
	}
	return s.InputMediaPhoto, true
}

// NewInputMediaPhotoInputMedia returns new InputMedia from InputMediaPhoto.
func NewInputMediaPhotoInputMedia(v InputMediaPhoto) InputMedia {
	var s InputMedia
	s.SetInputMediaPhoto(v)
	return s
}

// SetInputMediaVideo sets InputMedia to InputMediaVideo.
func (s *InputMedia) SetInputMediaVideo(v InputMediaVideo) {
	s.Type = InputMediaVideoInputMedia
	s.InputMediaVideo = v
}

// GetInputMediaVideo returns InputMediaVideo and true boolean if InputMedia is InputMediaVideo.
func (s InputMedia) GetInputMediaVideo() (v InputMediaVideo, ok bool) {
	if !s.IsInputMediaVideo() {
		return v, false
	}
	return s.InputMediaVideo, true
}

// NewInputMediaVideoInputMedia returns new InputMedia from InputMediaVideo.
func NewInputMediaVideoInputMedia(v InputMediaVideo) InputMedia {
	var s InputMedia
	s.SetInputMediaVideo(v)
	return s
}

// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
// Ref: #/components/schemas/InputMediaAnimation
type InputMediaAnimation struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// "attach://<file_attach_name>" to upload a new one using multipart/form-data under
	// <file_attach_name> name.
	Media string `json:"media"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Caption of the animation to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the animation caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Animation width.
	Width OptInt `json:"width,omitempty"`
	// Animation height.
	Height OptInt `json:"height,omitempty"`
	// Animation duration in seconds.
	Duration OptInt `json:"duration,omitempty"`
}

// GetMedia returns the value of Media.
func (s InputMediaAnimation) GetMedia() string {
	return s.Media
}

// GetThumb returns the value of Thumb.
func (s InputMediaAnimation) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s InputMediaAnimation) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InputMediaAnimation) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InputMediaAnimation) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetWidth returns the value of Width.
func (s InputMediaAnimation) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s InputMediaAnimation) GetHeight() OptInt {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s InputMediaAnimation) GetDuration() OptInt {
	return s.Duration
}

// SetMedia sets the value of Media.
func (s *InputMediaAnimation) SetMedia(val string) {
	s.Media = val
}

// SetThumb sets the value of Thumb.
func (s *InputMediaAnimation) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaAnimation) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaAnimation) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaAnimation) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetWidth sets the value of Width.
func (s *InputMediaAnimation) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *InputMediaAnimation) SetHeight(val OptInt) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *InputMediaAnimation) SetDuration(val OptInt) {
	s.Duration = val
}

// Represents an audio file to be treated as music to be sent.
// Ref: #/components/schemas/InputMediaAudio
type InputMediaAudio struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// "attach://<file_attach_name>" to upload a new one using multipart/form-data under
	// <file_attach_name> name.
	Media string `json:"media"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Caption of the audio to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Duration of the audio in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Performer of the audio.
	Performer OptString `json:"performer,omitempty"`
	// Title of the audio.
	Title OptString `json:"title,omitempty"`
}

// GetMedia returns the value of Media.
func (s InputMediaAudio) GetMedia() string {
	return s.Media
}

// GetThumb returns the value of Thumb.
func (s InputMediaAudio) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s InputMediaAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InputMediaAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InputMediaAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDuration returns the value of Duration.
func (s InputMediaAudio) GetDuration() OptInt {
	return s.Duration
}

// GetPerformer returns the value of Performer.
func (s InputMediaAudio) GetPerformer() OptString {
	return s.Performer
}

// GetTitle returns the value of Title.
func (s InputMediaAudio) GetTitle() OptString {
	return s.Title
}

// SetMedia sets the value of Media.
func (s *InputMediaAudio) SetMedia(val string) {
	s.Media = val
}

// SetThumb sets the value of Thumb.
func (s *InputMediaAudio) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDuration sets the value of Duration.
func (s *InputMediaAudio) SetDuration(val OptInt) {
	s.Duration = val
}

// SetPerformer sets the value of Performer.
func (s *InputMediaAudio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetTitle sets the value of Title.
func (s *InputMediaAudio) SetTitle(val OptString) {
	s.Title = val
}

// Represents a general file to be sent.
// Ref: #/components/schemas/InputMediaDocument
type InputMediaDocument struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// "attach://<file_attach_name>" to upload a new one using multipart/form-data under
	// <file_attach_name> name.
	Media string `json:"media"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Caption of the document to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Disables automatic server-side content type detection for files uploaded using multipart/form-data.
	//  Always True, if the document is sent as part of an album.
	DisableContentTypeDetection OptBool `json:"disable_content_type_detection,omitempty"`
}

// GetMedia returns the value of Media.
func (s InputMediaDocument) GetMedia() string {
	return s.Media
}

// GetThumb returns the value of Thumb.
func (s InputMediaDocument) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s InputMediaDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InputMediaDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InputMediaDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableContentTypeDetection returns the value of DisableContentTypeDetection.
func (s InputMediaDocument) GetDisableContentTypeDetection() OptBool {
	return s.DisableContentTypeDetection
}

// SetMedia sets the value of Media.
func (s *InputMediaDocument) SetMedia(val string) {
	s.Media = val
}

// SetThumb sets the value of Thumb.
func (s *InputMediaDocument) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableContentTypeDetection sets the value of DisableContentTypeDetection.
func (s *InputMediaDocument) SetDisableContentTypeDetection(val OptBool) {
	s.DisableContentTypeDetection = val
}

// Represents a photo to be sent.
// Ref: #/components/schemas/InputMediaPhoto
type InputMediaPhoto struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// "attach://<file_attach_name>" to upload a new one using multipart/form-data under
	// <file_attach_name> name.
	Media string `json:"media"`
	// Caption of the photo to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
}

// GetMedia returns the value of Media.
func (s InputMediaPhoto) GetMedia() string {
	return s.Media
}

// GetCaption returns the value of Caption.
func (s InputMediaPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InputMediaPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InputMediaPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// SetMedia sets the value of Media.
func (s *InputMediaPhoto) SetMedia(val string) {
	s.Media = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// Represents a video to be sent.
// Ref: #/components/schemas/InputMediaVideo
type InputMediaVideo struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// "attach://<file_attach_name>" to upload a new one using multipart/form-data under
	// <file_attach_name> name.
	Media string `json:"media"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Caption of the video to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in the caption, which can be specified instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Video width.
	Width OptInt `json:"width,omitempty"`
	// Video height.
	Height OptInt `json:"height,omitempty"`
	// Video duration in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Pass True, if the uploaded video is suitable for streaming.
	SupportsStreaming OptBool `json:"supports_streaming,omitempty"`
}

// GetMedia returns the value of Media.
func (s InputMediaVideo) GetMedia() string {
	return s.Media
}

// GetThumb returns the value of Thumb.
func (s InputMediaVideo) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s InputMediaVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s InputMediaVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s InputMediaVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetWidth returns the value of Width.
func (s InputMediaVideo) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s InputMediaVideo) GetHeight() OptInt {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s InputMediaVideo) GetDuration() OptInt {
	return s.Duration
}

// GetSupportsStreaming returns the value of SupportsStreaming.
func (s InputMediaVideo) GetSupportsStreaming() OptBool {
	return s.SupportsStreaming
}

// SetMedia sets the value of Media.
func (s *InputMediaVideo) SetMedia(val string) {
	s.Media = val
}

// SetThumb sets the value of Thumb.
func (s *InputMediaVideo) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetWidth sets the value of Width.
func (s *InputMediaVideo) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *InputMediaVideo) SetHeight(val OptInt) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *InputMediaVideo) SetDuration(val OptInt) {
	s.Duration = val
}

// SetSupportsStreaming sets the value of SupportsStreaming.
func (s *InputMediaVideo) SetSupportsStreaming(val OptBool) {
	s.SupportsStreaming = val
}

// This object represents the content of a message to be sent as a result of an inline query.  5
// types:.
// Ref: #/components/schemas/InputMessageContent
// InputMessageContent represents sum type.
type InputMessageContent struct {
	Type                        InputMessageContentType // switch on this field
	InputTextMessageContent     InputTextMessageContent
	InputLocationMessageContent InputLocationMessageContent
	InputVenueMessageContent    InputVenueMessageContent
	InputContactMessageContent  InputContactMessageContent
	InputInvoiceMessageContent  InputInvoiceMessageContent
}

// InputMessageContentType is oneOf type of InputMessageContent.
type InputMessageContentType string

// Possible values for InputMessageContentType.
const (
	InputTextMessageContentInputMessageContent     InputMessageContentType = "InputTextMessageContent"
	InputLocationMessageContentInputMessageContent InputMessageContentType = "InputLocationMessageContent"
	InputVenueMessageContentInputMessageContent    InputMessageContentType = "InputVenueMessageContent"
	InputContactMessageContentInputMessageContent  InputMessageContentType = "InputContactMessageContent"
	InputInvoiceMessageContentInputMessageContent  InputMessageContentType = "InputInvoiceMessageContent"
)

// IsInputTextMessageContent reports whether InputMessageContent is InputTextMessageContent.
func (s InputMessageContent) IsInputTextMessageContent() bool {
	return s.Type == InputTextMessageContentInputMessageContent
}

// IsInputLocationMessageContent reports whether InputMessageContent is InputLocationMessageContent.
func (s InputMessageContent) IsInputLocationMessageContent() bool {
	return s.Type == InputLocationMessageContentInputMessageContent
}

// IsInputVenueMessageContent reports whether InputMessageContent is InputVenueMessageContent.
func (s InputMessageContent) IsInputVenueMessageContent() bool {
	return s.Type == InputVenueMessageContentInputMessageContent
}

// IsInputContactMessageContent reports whether InputMessageContent is InputContactMessageContent.
func (s InputMessageContent) IsInputContactMessageContent() bool {
	return s.Type == InputContactMessageContentInputMessageContent
}

// IsInputInvoiceMessageContent reports whether InputMessageContent is InputInvoiceMessageContent.
func (s InputMessageContent) IsInputInvoiceMessageContent() bool {
	return s.Type == InputInvoiceMessageContentInputMessageContent
}

// SetInputTextMessageContent sets InputMessageContent to InputTextMessageContent.
func (s *InputMessageContent) SetInputTextMessageContent(v InputTextMessageContent) {
	s.Type = InputTextMessageContentInputMessageContent
	s.InputTextMessageContent = v
}

// GetInputTextMessageContent returns InputTextMessageContent and true boolean if InputMessageContent is InputTextMessageContent.
func (s InputMessageContent) GetInputTextMessageContent() (v InputTextMessageContent, ok bool) {
	if !s.IsInputTextMessageContent() {
		return v, false
	}
	return s.InputTextMessageContent, true
}

// NewInputTextMessageContentInputMessageContent returns new InputMessageContent from InputTextMessageContent.
func NewInputTextMessageContentInputMessageContent(v InputTextMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputTextMessageContent(v)
	return s
}

// SetInputLocationMessageContent sets InputMessageContent to InputLocationMessageContent.
func (s *InputMessageContent) SetInputLocationMessageContent(v InputLocationMessageContent) {
	s.Type = InputLocationMessageContentInputMessageContent
	s.InputLocationMessageContent = v
}

// GetInputLocationMessageContent returns InputLocationMessageContent and true boolean if InputMessageContent is InputLocationMessageContent.
func (s InputMessageContent) GetInputLocationMessageContent() (v InputLocationMessageContent, ok bool) {
	if !s.IsInputLocationMessageContent() {
		return v, false
	}
	return s.InputLocationMessageContent, true
}

// NewInputLocationMessageContentInputMessageContent returns new InputMessageContent from InputLocationMessageContent.
func NewInputLocationMessageContentInputMessageContent(v InputLocationMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputLocationMessageContent(v)
	return s
}

// SetInputVenueMessageContent sets InputMessageContent to InputVenueMessageContent.
func (s *InputMessageContent) SetInputVenueMessageContent(v InputVenueMessageContent) {
	s.Type = InputVenueMessageContentInputMessageContent
	s.InputVenueMessageContent = v
}

// GetInputVenueMessageContent returns InputVenueMessageContent and true boolean if InputMessageContent is InputVenueMessageContent.
func (s InputMessageContent) GetInputVenueMessageContent() (v InputVenueMessageContent, ok bool) {
	if !s.IsInputVenueMessageContent() {
		return v, false
	}
	return s.InputVenueMessageContent, true
}

// NewInputVenueMessageContentInputMessageContent returns new InputMessageContent from InputVenueMessageContent.
func NewInputVenueMessageContentInputMessageContent(v InputVenueMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputVenueMessageContent(v)
	return s
}

// SetInputContactMessageContent sets InputMessageContent to InputContactMessageContent.
func (s *InputMessageContent) SetInputContactMessageContent(v InputContactMessageContent) {
	s.Type = InputContactMessageContentInputMessageContent
	s.InputContactMessageContent = v
}

// GetInputContactMessageContent returns InputContactMessageContent and true boolean if InputMessageContent is InputContactMessageContent.
func (s InputMessageContent) GetInputContactMessageContent() (v InputContactMessageContent, ok bool) {
	if !s.IsInputContactMessageContent() {
		return v, false
	}
	return s.InputContactMessageContent, true
}

// NewInputContactMessageContentInputMessageContent returns new InputMessageContent from InputContactMessageContent.
func NewInputContactMessageContentInputMessageContent(v InputContactMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputContactMessageContent(v)
	return s
}

// SetInputInvoiceMessageContent sets InputMessageContent to InputInvoiceMessageContent.
func (s *InputMessageContent) SetInputInvoiceMessageContent(v InputInvoiceMessageContent) {
	s.Type = InputInvoiceMessageContentInputMessageContent
	s.InputInvoiceMessageContent = v
}

// GetInputInvoiceMessageContent returns InputInvoiceMessageContent and true boolean if InputMessageContent is InputInvoiceMessageContent.
func (s InputMessageContent) GetInputInvoiceMessageContent() (v InputInvoiceMessageContent, ok bool) {
	if !s.IsInputInvoiceMessageContent() {
		return v, false
	}
	return s.InputInvoiceMessageContent, true
}

// NewInputInvoiceMessageContentInputMessageContent returns new InputMessageContent from InputInvoiceMessageContent.
func NewInputInvoiceMessageContentInputMessageContent(v InputInvoiceMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputInvoiceMessageContent(v)
	return s
}

// Represents the content of a text message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputTextMessageContent
type InputTextMessageContent struct {
	// Text of the message to be sent, 1-4096 characters.
	MessageText string `json:"message_text"`
	// Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// List of special entities that appear in message text, which can be specified instead of parse_mode.
	Entities []MessageEntity `json:"entities,omitempty"`
	// Disables link previews for links in the sent message.
	DisableWebPagePreview OptBool `json:"disable_web_page_preview,omitempty"`
}

// GetMessageText returns the value of MessageText.
func (s InputTextMessageContent) GetMessageText() string {
	return s.MessageText
}

// GetParseMode returns the value of ParseMode.
func (s InputTextMessageContent) GetParseMode() OptString {
	return s.ParseMode
}

// GetEntities returns the value of Entities.
func (s InputTextMessageContent) GetEntities() []MessageEntity {
	return s.Entities
}

// GetDisableWebPagePreview returns the value of DisableWebPagePreview.
func (s InputTextMessageContent) GetDisableWebPagePreview() OptBool {
	return s.DisableWebPagePreview
}

// SetMessageText sets the value of MessageText.
func (s *InputTextMessageContent) SetMessageText(val string) {
	s.MessageText = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputTextMessageContent) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetEntities sets the value of Entities.
func (s *InputTextMessageContent) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetDisableWebPagePreview sets the value of DisableWebPagePreview.
func (s *InputTextMessageContent) SetDisableWebPagePreview(val OptBool) {
	s.DisableWebPagePreview = val
}

// Represents the content of a venue message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputVenueMessageContent
type InputVenueMessageContent struct {
	// Latitude of the venue in degrees.
	Latitude float64 `json:"latitude"`
	// Longitude of the venue in degrees.
	Longitude float64 `json:"longitude"`
	// Name of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// Foursquare identifier of the venue, if known.
	FoursquareID OptString `json:"foursquare_id,omitempty"`
	// Foursquare type of the venue, if known. (For example, "arts_entertainment/default",
	// "arts_entertainment/aquarium" or "food/icecream".).
	FoursquareType OptString `json:"foursquare_type,omitempty"`
	// Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id,omitempty"`
	// Google Places type of the venue. (See supported types.).
	GooglePlaceType OptString `json:"google_place_type,omitempty"`
}

// GetLatitude returns the value of Latitude.
func (s InputVenueMessageContent) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s InputVenueMessageContent) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s InputVenueMessageContent) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s InputVenueMessageContent) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s InputVenueMessageContent) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s InputVenueMessageContent) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s InputVenueMessageContent) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s InputVenueMessageContent) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// SetLatitude sets the value of Latitude.
func (s *InputVenueMessageContent) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InputVenueMessageContent) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *InputVenueMessageContent) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *InputVenueMessageContent) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *InputVenueMessageContent) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *InputVenueMessageContent) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *InputVenueMessageContent) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *InputVenueMessageContent) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// This object contains basic information about an invoice.
// Ref: #/components/schemas/Invoice
type Invoice struct {
	// Product name.
	Title string `json:"title"`
	// Product description.
	Description string `json:"description"`
	// Unique bot deep-linking parameter that can be used to generate this invoice.
	StartParameter string `json:"start_parameter"`
	// Three-letter ISO 4217 currency code.
	Currency string `json:"currency"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a
	// price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number
	// of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
}

// GetTitle returns the value of Title.
func (s Invoice) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s Invoice) GetDescription() string {
	return s.Description
}

// GetStartParameter returns the value of StartParameter.
func (s Invoice) GetStartParameter() string {
	return s.StartParameter
}

// GetCurrency returns the value of Currency.
func (s Invoice) GetCurrency() string {
	return s.Currency
}

// GetTotalAmount returns the value of TotalAmount.
func (s Invoice) GetTotalAmount() int {
	return s.TotalAmount
}

// SetTitle sets the value of Title.
func (s *Invoice) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Invoice) SetDescription(val string) {
	s.Description = val
}

// SetStartParameter sets the value of StartParameter.
func (s *Invoice) SetStartParameter(val string) {
	s.StartParameter = val
}

// SetCurrency sets the value of Currency.
func (s *Invoice) SetCurrency(val string) {
	s.Currency = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *Invoice) SetTotalAmount(val int) {
	s.TotalAmount = val
}

// This object represents one button of the reply keyboard. For simple text buttons String can be
// used instead of this object to specify text of the button. Optional fields web_app,
// request_contact, request_location, and request_poll are mutually exclusive.
// Ref: #/components/schemas/KeyboardButton
// KeyboardButton represents sum type.
type KeyboardButton struct {
	Type                 KeyboardButtonType // switch on this field
	String               string
	KeyboardButtonObject KeyboardButtonObject
}

// KeyboardButtonType is oneOf type of KeyboardButton.
type KeyboardButtonType string

// Possible values for KeyboardButtonType.
const (
	StringKeyboardButton               KeyboardButtonType = "string"
	KeyboardButtonObjectKeyboardButton KeyboardButtonType = "KeyboardButtonObject"
)

// IsString reports whether KeyboardButton is string.
func (s KeyboardButton) IsString() bool { return s.Type == StringKeyboardButton }

// IsKeyboardButtonObject reports whether KeyboardButton is KeyboardButtonObject.
func (s KeyboardButton) IsKeyboardButtonObject() bool {
	return s.Type == KeyboardButtonObjectKeyboardButton
}

// SetString sets KeyboardButton to string.
func (s *KeyboardButton) SetString(v string) {
	s.Type = StringKeyboardButton
	s.String = v
}

// GetString returns string and true boolean if KeyboardButton is string.
func (s KeyboardButton) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringKeyboardButton returns new KeyboardButton from string.
func NewStringKeyboardButton(v string) KeyboardButton {
	var s KeyboardButton
	s.SetString(v)
	return s
}

// SetKeyboardButtonObject sets KeyboardButton to KeyboardButtonObject.
func (s *KeyboardButton) SetKeyboardButtonObject(v KeyboardButtonObject) {
	s.Type = KeyboardButtonObjectKeyboardButton
	s.KeyboardButtonObject = v
}

// GetKeyboardButtonObject returns KeyboardButtonObject and true boolean if KeyboardButton is KeyboardButtonObject.
func (s KeyboardButton) GetKeyboardButtonObject() (v KeyboardButtonObject, ok bool) {
	if !s.IsKeyboardButtonObject() {
		return v, false
	}
	return s.KeyboardButtonObject, true
}

// NewKeyboardButtonObjectKeyboardButton returns new KeyboardButton from KeyboardButtonObject.
func NewKeyboardButtonObjectKeyboardButton(v KeyboardButtonObject) KeyboardButton {
	var s KeyboardButton
	s.SetKeyboardButtonObject(v)
	return s
}

// This object represents one button of the reply keyboard. For simple text buttons String can be
// used instead of this object to specify text of the button. Optional fields web_app,
// request_contact, request_location, and request_poll are mutually exclusive.
// Ref: #/components/schemas/KeyboardButtonObject
type KeyboardButtonObject struct {
	// Text of the button. If none of the optional fields are used, it will be sent as a message when the
	// button is pressed.
	Text string `json:"text"`
	// If True, the user's phone number will be sent as a contact when the button is pressed. Available
	// in private chats only.
	RequestContact OptBool `json:"request_contact,omitempty"`
	// If True, the user's current location will be sent when the button is pressed. Available in private
	// chats only.
	RequestLocation OptBool                   `json:"request_location,omitempty"`
	RequestPoll     OptKeyboardButtonPollType `json:"request_poll,omitempty"`
	WebApp          OptWebAppInfo             `json:"web_app,omitempty"`
}

// GetText returns the value of Text.
func (s KeyboardButtonObject) GetText() string {
	return s.Text
}

// GetRequestContact returns the value of RequestContact.
func (s KeyboardButtonObject) GetRequestContact() OptBool {
	return s.RequestContact
}

// GetRequestLocation returns the value of RequestLocation.
func (s KeyboardButtonObject) GetRequestLocation() OptBool {
	return s.RequestLocation
}

// GetRequestPoll returns the value of RequestPoll.
func (s KeyboardButtonObject) GetRequestPoll() OptKeyboardButtonPollType {
	return s.RequestPoll
}

// GetWebApp returns the value of WebApp.
func (s KeyboardButtonObject) GetWebApp() OptWebAppInfo {
	return s.WebApp
}

// SetText sets the value of Text.
func (s *KeyboardButtonObject) SetText(val string) {
	s.Text = val
}

// SetRequestContact sets the value of RequestContact.
func (s *KeyboardButtonObject) SetRequestContact(val OptBool) {
	s.RequestContact = val
}

// SetRequestLocation sets the value of RequestLocation.
func (s *KeyboardButtonObject) SetRequestLocation(val OptBool) {
	s.RequestLocation = val
}

// SetRequestPoll sets the value of RequestPoll.
func (s *KeyboardButtonObject) SetRequestPoll(val OptKeyboardButtonPollType) {
	s.RequestPoll = val
}

// SetWebApp sets the value of WebApp.
func (s *KeyboardButtonObject) SetWebApp(val OptWebAppInfo) {
	s.WebApp = val
}

// This object represents type of a poll, which is allowed to be created and sent when the
// corresponding button is pressed.
// Ref: #/components/schemas/KeyboardButtonPollType
type KeyboardButtonPollType struct {
	// If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is
	// passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll
	// of any type.
	Type OptString `json:"type,omitempty"`
}

// GetType returns the value of Type.
func (s KeyboardButtonPollType) GetType() OptString {
	return s.Type
}

// SetType sets the value of Type.
func (s *KeyboardButtonPollType) SetType(val OptString) {
	s.Type = val
}

// This object represents a portion of the price for goods or services.
// Ref: #/components/schemas/LabeledPrice
type LabeledPrice struct {
	// Portion label.
	Label string `json:"label"`
	// Price of the product in the smallest units of the currency (integer, not float/double). For
	// example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it
	// shows the number of digits past the decimal point for each currency (2 for the majority of
	// currencies).
	Amount int `json:"amount"`
}

// GetLabel returns the value of Label.
func (s LabeledPrice) GetLabel() string {
	return s.Label
}

// GetAmount returns the value of Amount.
func (s LabeledPrice) GetAmount() int {
	return s.Amount
}

// SetLabel sets the value of Label.
func (s *LabeledPrice) SetLabel(val string) {
	s.Label = val
}

// SetAmount sets the value of Amount.
func (s *LabeledPrice) SetAmount(val int) {
	s.Amount = val
}

// Input for leaveChat.
// Ref: #/components/schemas/leaveChat
type LeaveChat struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s LeaveChat) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *LeaveChat) SetChatID(val ID) {
	s.ChatID = val
}

// This object represents a point on the map.
// Ref: #/components/schemas/Location
type Location struct {
	// Longitude as defined by sender.
	Longitude float64 `json:"longitude"`
	// Latitude as defined by sender.
	Latitude float64 `json:"latitude"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy,omitempty"`
	// Time relative to the message sending date, during which the location can be updated; in seconds.
	// For active live locations only.
	LivePeriod OptInt `json:"live_period,omitempty"`
	// The direction in which user is moving, in degrees; 1-360. For active live locations only.
	Heading OptInt `json:"heading,omitempty"`
	// Maximum distance for proximity alerts about approaching another chat member, in meters. For sent
	// live locations only.
	ProximityAlertRadius OptInt `json:"proximity_alert_radius,omitempty"`
}

// GetLongitude returns the value of Longitude.
func (s Location) GetLongitude() float64 {
	return s.Longitude
}

// GetLatitude returns the value of Latitude.
func (s Location) GetLatitude() float64 {
	return s.Latitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s Location) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s Location) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s Location) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s Location) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// SetLongitude sets the value of Longitude.
func (s *Location) SetLongitude(val float64) {
	s.Longitude = val
}

// SetLatitude sets the value of Latitude.
func (s *Location) SetLatitude(val float64) {
	s.Latitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *Location) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *Location) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *Location) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *Location) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// Telegram apps support these buttons as of version 5.7.
// Ref: #/components/schemas/LoginUrl
type LoginUrl struct {
	// An HTTP URL to be opened with user authorization data added to the query string when the button is
	// pressed. If the user refuses to provide authorization data, the original URL without information
	// about the user will be opened. The data added is the same as described in Receiving authorization
	// data.NOTE: You must always check the hash of the received data to verify the authentication and
	// the integrity of the data as described in Checking authorization.
	URL string `json:"url"`
	// New text of the button in forwarded messages.
	ForwardText OptString `json:"forward_text,omitempty"`
	// Username of a bot, which will be used for user authorization. See Setting up a bot for more
	// details. If not specified, the current bot's username will be assumed. The url's domain must be
	// the same as the domain linked with the bot. See Linking your domain to the bot for more details.
	BotUsername OptString `json:"bot_username,omitempty"`
	// Pass True to request the permission for your bot to send messages to the user.
	RequestWriteAccess OptBool `json:"request_write_access,omitempty"`
}

// GetURL returns the value of URL.
func (s LoginUrl) GetURL() string {
	return s.URL
}

// GetForwardText returns the value of ForwardText.
func (s LoginUrl) GetForwardText() OptString {
	return s.ForwardText
}

// GetBotUsername returns the value of BotUsername.
func (s LoginUrl) GetBotUsername() OptString {
	return s.BotUsername
}

// GetRequestWriteAccess returns the value of RequestWriteAccess.
func (s LoginUrl) GetRequestWriteAccess() OptBool {
	return s.RequestWriteAccess
}

// SetURL sets the value of URL.
func (s *LoginUrl) SetURL(val string) {
	s.URL = val
}

// SetForwardText sets the value of ForwardText.
func (s *LoginUrl) SetForwardText(val OptString) {
	s.ForwardText = val
}

// SetBotUsername sets the value of BotUsername.
func (s *LoginUrl) SetBotUsername(val OptString) {
	s.BotUsername = val
}

// SetRequestWriteAccess sets the value of RequestWriteAccess.
func (s *LoginUrl) SetRequestWriteAccess(val OptBool) {
	s.RequestWriteAccess = val
}

// This object describes the position on faces where a mask should be placed by default.
// Ref: #/components/schemas/MaskPosition
type MaskPosition struct {
	// The part of the face relative to which the mask should be placed. One of "forehead", "eyes",
	// "mouth", or "chin".
	Point string `json:"point"`
	// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For
	// example, choosing -1.0 will place mask just to the left of the default mask position.
	XShift float64 `json:"x_shift"`
	// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For
	// example, 1.0 will place the mask just below the default mask position.
	YShift float64 `json:"y_shift"`
	// Mask scaling coefficient. For example, 2.0 means double size.
	Scale float64 `json:"scale"`
}

// GetPoint returns the value of Point.
func (s MaskPosition) GetPoint() string {
	return s.Point
}

// GetXShift returns the value of XShift.
func (s MaskPosition) GetXShift() float64 {
	return s.XShift
}

// GetYShift returns the value of YShift.
func (s MaskPosition) GetYShift() float64 {
	return s.YShift
}

// GetScale returns the value of Scale.
func (s MaskPosition) GetScale() float64 {
	return s.Scale
}

// SetPoint sets the value of Point.
func (s *MaskPosition) SetPoint(val string) {
	s.Point = val
}

// SetXShift sets the value of XShift.
func (s *MaskPosition) SetXShift(val float64) {
	s.XShift = val
}

// SetYShift sets the value of YShift.
func (s *MaskPosition) SetYShift(val float64) {
	s.YShift = val
}

// SetScale sets the value of Scale.
func (s *MaskPosition) SetScale(val float64) {
	s.Scale = val
}

// This object describes the bot's menu button in a private chat.
// Ref: #/components/schemas/MenuButton
// MenuButton represents sum type.
type MenuButton struct {
	Type               MenuButtonType // switch on this field
	MenuButtonCommands MenuButtonCommands
	MenuButtonWebApp   MenuButtonWebApp
	MenuButtonDefault  MenuButtonDefault
}

// MenuButtonType is oneOf type of MenuButton.
type MenuButtonType string

// Possible values for MenuButtonType.
const (
	MenuButtonCommandsMenuButton MenuButtonType = "MenuButtonCommands"
	MenuButtonWebAppMenuButton   MenuButtonType = "MenuButtonWebApp"
	MenuButtonDefaultMenuButton  MenuButtonType = "MenuButtonDefault"
)

// IsMenuButtonCommands reports whether MenuButton is MenuButtonCommands.
func (s MenuButton) IsMenuButtonCommands() bool { return s.Type == MenuButtonCommandsMenuButton }

// IsMenuButtonWebApp reports whether MenuButton is MenuButtonWebApp.
func (s MenuButton) IsMenuButtonWebApp() bool { return s.Type == MenuButtonWebAppMenuButton }

// IsMenuButtonDefault reports whether MenuButton is MenuButtonDefault.
func (s MenuButton) IsMenuButtonDefault() bool { return s.Type == MenuButtonDefaultMenuButton }

// SetMenuButtonCommands sets MenuButton to MenuButtonCommands.
func (s *MenuButton) SetMenuButtonCommands(v MenuButtonCommands) {
	s.Type = MenuButtonCommandsMenuButton
	s.MenuButtonCommands = v
}

// GetMenuButtonCommands returns MenuButtonCommands and true boolean if MenuButton is MenuButtonCommands.
func (s MenuButton) GetMenuButtonCommands() (v MenuButtonCommands, ok bool) {
	if !s.IsMenuButtonCommands() {
		return v, false
	}
	return s.MenuButtonCommands, true
}

// NewMenuButtonCommandsMenuButton returns new MenuButton from MenuButtonCommands.
func NewMenuButtonCommandsMenuButton(v MenuButtonCommands) MenuButton {
	var s MenuButton
	s.SetMenuButtonCommands(v)
	return s
}

// SetMenuButtonWebApp sets MenuButton to MenuButtonWebApp.
func (s *MenuButton) SetMenuButtonWebApp(v MenuButtonWebApp) {
	s.Type = MenuButtonWebAppMenuButton
	s.MenuButtonWebApp = v
}

// GetMenuButtonWebApp returns MenuButtonWebApp and true boolean if MenuButton is MenuButtonWebApp.
func (s MenuButton) GetMenuButtonWebApp() (v MenuButtonWebApp, ok bool) {
	if !s.IsMenuButtonWebApp() {
		return v, false
	}
	return s.MenuButtonWebApp, true
}

// NewMenuButtonWebAppMenuButton returns new MenuButton from MenuButtonWebApp.
func NewMenuButtonWebAppMenuButton(v MenuButtonWebApp) MenuButton {
	var s MenuButton
	s.SetMenuButtonWebApp(v)
	return s
}

// SetMenuButtonDefault sets MenuButton to MenuButtonDefault.
func (s *MenuButton) SetMenuButtonDefault(v MenuButtonDefault) {
	s.Type = MenuButtonDefaultMenuButton
	s.MenuButtonDefault = v
}

// GetMenuButtonDefault returns MenuButtonDefault and true boolean if MenuButton is MenuButtonDefault.
func (s MenuButton) GetMenuButtonDefault() (v MenuButtonDefault, ok bool) {
	if !s.IsMenuButtonDefault() {
		return v, false
	}
	return s.MenuButtonDefault, true
}

// NewMenuButtonDefaultMenuButton returns new MenuButton from MenuButtonDefault.
func NewMenuButtonDefaultMenuButton(v MenuButtonDefault) MenuButton {
	var s MenuButton
	s.SetMenuButtonDefault(v)
	return s
}

// Represents a menu button, which opens the bot's list of commands.
// Ref: #/components/schemas/MenuButtonCommands
type MenuButtonCommands struct{}

// Describes that no specific value for the menu button was set.
// Ref: #/components/schemas/MenuButtonDefault
type MenuButtonDefault struct{}

// Represents a menu button, which launches a Web App.
// Ref: #/components/schemas/MenuButtonWebApp
type MenuButtonWebApp struct {
	// Text on the button.
	Text   string     `json:"text"`
	WebApp WebAppInfo `json:"web_app"`
}

// GetText returns the value of Text.
func (s MenuButtonWebApp) GetText() string {
	return s.Text
}

// GetWebApp returns the value of WebApp.
func (s MenuButtonWebApp) GetWebApp() WebAppInfo {
	return s.WebApp
}

// SetText sets the value of Text.
func (s *MenuButtonWebApp) SetText(val string) {
	s.Text = val
}

// SetWebApp sets the value of WebApp.
func (s *MenuButtonWebApp) SetWebApp(val WebAppInfo) {
	s.WebApp = val
}

// This object represents a message.
// Ref: #/components/schemas/Message
type Message struct {
	// Unique message identifier inside this chat.
	MessageID  int     `json:"message_id"`
	From       OptUser `json:"from,omitempty"`
	SenderChat OptChat `json:"sender_chat,omitempty"`
	// Date the message was sent in Unix time.
	Date            int     `json:"date"`
	Chat            Chat    `json:"chat"`
	ForwardFrom     OptUser `json:"forward_from,omitempty"`
	ForwardFromChat OptChat `json:"forward_from_chat,omitempty"`
	// For messages forwarded from channels, identifier of the original message in the channel.
	ForwardFromMessageID OptInt `json:"forward_from_message_id,omitempty"`
	// For forwarded messages that were originally sent in channels or by an anonymous chat administrator,
	//  signature of the message sender if present.
	ForwardSignature OptString `json:"forward_signature,omitempty"`
	// Sender's name for messages forwarded from users who disallow adding a link to their account in
	// forwarded messages.
	ForwardSenderName OptString `json:"forward_sender_name,omitempty"`
	// For forwarded messages, date the original message was sent in Unix time.
	ForwardDate OptInt `json:"forward_date,omitempty"`
	// True, if the message is a channel post that was automatically forwarded to the connected
	// discussion group.
	IsAutomaticForward OptBool  `json:"is_automatic_forward,omitempty"`
	ReplyToMessage     *Message `json:"reply_to_message,omitempty"`
	ViaBot             OptUser  `json:"via_bot,omitempty"`
	// Date the message was last edited in Unix time.
	EditDate OptInt `json:"edit_date,omitempty"`
	// True, if the message can't be forwarded.
	HasProtectedContent OptBool `json:"has_protected_content,omitempty"`
	// The unique identifier of a media message group this message belongs to.
	MediaGroupID OptString `json:"media_group_id,omitempty"`
	// Signature of the post author for messages in channels, or the custom title of an anonymous group
	// administrator.
	AuthorSignature OptString `json:"author_signature,omitempty"`
	// For text messages, the actual UTF-8 text of the message, 0-4096 characters.
	Text OptString `json:"text,omitempty"`
	// For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the
	// text.
	Entities  []MessageEntity `json:"entities,omitempty"`
	Animation OptAnimation    `json:"animation,omitempty"`
	Audio     OptAudio        `json:"audio,omitempty"`
	Document  OptDocument     `json:"document,omitempty"`
	// Message is a photo, available sizes of the photo.
	Photo     []PhotoSize  `json:"photo,omitempty"`
	Sticker   OptSticker   `json:"sticker,omitempty"`
	Video     OptVideo     `json:"video,omitempty"`
	VideoNote OptVideoNote `json:"video_note,omitempty"`
	Voice     OptVoice     `json:"voice,omitempty"`
	// Caption for the animation, audio, document, photo, video or voice, 0-1024 characters.
	Caption OptString `json:"caption,omitempty"`
	// For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear
	// in the caption.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	Contact         OptContact      `json:"contact,omitempty"`
	Dice            OptDice         `json:"dice,omitempty"`
	Game            OptGame         `json:"game,omitempty"`
	Poll            OptPoll         `json:"poll,omitempty"`
	Venue           OptVenue        `json:"venue,omitempty"`
	Location        OptLocation     `json:"location,omitempty"`
	// New members that were added to the group or supergroup and information about them (the bot itself
	// may be one of these members).
	NewChatMembers []User  `json:"new_chat_members,omitempty"`
	LeftChatMember OptUser `json:"left_chat_member,omitempty"`
	// A chat title was changed to this value.
	NewChatTitle OptString `json:"new_chat_title,omitempty"`
	// A chat photo was change to this value.
	NewChatPhoto []PhotoSize `json:"new_chat_photo,omitempty"`
	// Service message: the chat photo was deleted.
	DeleteChatPhoto OptBool `json:"delete_chat_photo,omitempty"`
	// Service message: the group has been created.
	GroupChatCreated OptBool `json:"group_chat_created,omitempty"`
	// Service message: the supergroup has been created. This field can't be received in a message coming
	// through updates, because bot can't be a member of a supergroup when it is created. It can only be
	// found in reply_to_message if someone replies to a very first message in a directly created
	// supergroup.
	SupergroupChatCreated OptBool `json:"supergroup_chat_created,omitempty"`
	// Service message: the channel has been created. This field can't be received in a message coming
	// through updates, because bot can't be a member of a channel when it is created. It can only be
	// found in reply_to_message if someone replies to a very first message in a channel.
	ChannelChatCreated            OptBool                          `json:"channel_chat_created,omitempty"`
	MessageAutoDeleteTimerChanged OptMessageAutoDeleteTimerChanged `json:"message_auto_delete_timer_changed,omitempty"`
	// The group has been migrated to a supergroup with the specified identifier. This number may have
	// more than 32 significant bits and some programming languages may have difficulty/silent defects in
	// interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or
	// double-precision float type are safe for storing this identifier.
	MigrateToChatID OptInt64 `json:"migrate_to_chat_id,omitempty"`
	// The supergroup has been migrated from a group with the specified identifier. This number may have
	// more than 32 significant bits and some programming languages may have difficulty/silent defects in
	// interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or
	// double-precision float type are safe for storing this identifier.
	MigrateFromChatID OptInt64             `json:"migrate_from_chat_id,omitempty"`
	PinnedMessage     *Message             `json:"pinned_message,omitempty"`
	Invoice           OptInvoice           `json:"invoice,omitempty"`
	SuccessfulPayment OptSuccessfulPayment `json:"successful_payment,omitempty"`
	// The domain name of the website on which the user has logged in. More about Telegram Login Â».
	ConnectedWebsite             OptString                       `json:"connected_website,omitempty"`
	PassportData                 OptPassportData                 `json:"passport_data,omitempty"`
	ProximityAlertTriggered      OptProximityAlertTriggered      `json:"proximity_alert_triggered,omitempty"`
	VideoChatScheduled           OptVideoChatScheduled           `json:"video_chat_scheduled,omitempty"`
	VideoChatStarted             *VideoChatStarted               `json:"video_chat_started,omitempty"`
	VideoChatEnded               OptVideoChatEnded               `json:"video_chat_ended,omitempty"`
	VideoChatParticipantsInvited OptVideoChatParticipantsInvited `json:"video_chat_participants_invited,omitempty"`
	WebAppData                   OptWebAppData                   `json:"web_app_data,omitempty"`
	ReplyMarkup                  OptInlineKeyboardMarkup         `json:"reply_markup,omitempty"`
	NewChatMember                OptUser                         `json:"new_chat_member,omitempty"`
	NewChatParticipant           OptUser                         `json:"new_chat_participant,omitempty"`
	LeftChatParticipant          OptUser                         `json:"left_chat_participant,omitempty"`
}

// GetMessageID returns the value of MessageID.
func (s Message) GetMessageID() int {
	return s.MessageID
}

// GetFrom returns the value of From.
func (s Message) GetFrom() OptUser {
	return s.From
}

// GetSenderChat returns the value of SenderChat.
func (s Message) GetSenderChat() OptChat {
	return s.SenderChat
}

// GetDate returns the value of Date.
func (s Message) GetDate() int {
	return s.Date
}

// GetChat returns the value of Chat.
func (s Message) GetChat() Chat {
	return s.Chat
}

// GetForwardFrom returns the value of ForwardFrom.
func (s Message) GetForwardFrom() OptUser {
	return s.ForwardFrom
}

// GetForwardFromChat returns the value of ForwardFromChat.
func (s Message) GetForwardFromChat() OptChat {
	return s.ForwardFromChat
}

// GetForwardFromMessageID returns the value of ForwardFromMessageID.
func (s Message) GetForwardFromMessageID() OptInt {
	return s.ForwardFromMessageID
}

// GetForwardSignature returns the value of ForwardSignature.
func (s Message) GetForwardSignature() OptString {
	return s.ForwardSignature
}

// GetForwardSenderName returns the value of ForwardSenderName.
func (s Message) GetForwardSenderName() OptString {
	return s.ForwardSenderName
}

// GetForwardDate returns the value of ForwardDate.
func (s Message) GetForwardDate() OptInt {
	return s.ForwardDate
}

// GetIsAutomaticForward returns the value of IsAutomaticForward.
func (s Message) GetIsAutomaticForward() OptBool {
	return s.IsAutomaticForward
}

// GetReplyToMessage returns the value of ReplyToMessage.
func (s Message) GetReplyToMessage() *Message {
	return s.ReplyToMessage
}

// GetViaBot returns the value of ViaBot.
func (s Message) GetViaBot() OptUser {
	return s.ViaBot
}

// GetEditDate returns the value of EditDate.
func (s Message) GetEditDate() OptInt {
	return s.EditDate
}

// GetHasProtectedContent returns the value of HasProtectedContent.
func (s Message) GetHasProtectedContent() OptBool {
	return s.HasProtectedContent
}

// GetMediaGroupID returns the value of MediaGroupID.
func (s Message) GetMediaGroupID() OptString {
	return s.MediaGroupID
}

// GetAuthorSignature returns the value of AuthorSignature.
func (s Message) GetAuthorSignature() OptString {
	return s.AuthorSignature
}

// GetText returns the value of Text.
func (s Message) GetText() OptString {
	return s.Text
}

// GetEntities returns the value of Entities.
func (s Message) GetEntities() []MessageEntity {
	return s.Entities
}

// GetAnimation returns the value of Animation.
func (s Message) GetAnimation() OptAnimation {
	return s.Animation
}

// GetAudio returns the value of Audio.
func (s Message) GetAudio() OptAudio {
	return s.Audio
}

// GetDocument returns the value of Document.
func (s Message) GetDocument() OptDocument {
	return s.Document
}

// GetPhoto returns the value of Photo.
func (s Message) GetPhoto() []PhotoSize {
	return s.Photo
}

// GetSticker returns the value of Sticker.
func (s Message) GetSticker() OptSticker {
	return s.Sticker
}

// GetVideo returns the value of Video.
func (s Message) GetVideo() OptVideo {
	return s.Video
}

// GetVideoNote returns the value of VideoNote.
func (s Message) GetVideoNote() OptVideoNote {
	return s.VideoNote
}

// GetVoice returns the value of Voice.
func (s Message) GetVoice() OptVoice {
	return s.Voice
}

// GetCaption returns the value of Caption.
func (s Message) GetCaption() OptString {
	return s.Caption
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s Message) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetContact returns the value of Contact.
func (s Message) GetContact() OptContact {
	return s.Contact
}

// GetDice returns the value of Dice.
func (s Message) GetDice() OptDice {
	return s.Dice
}

// GetGame returns the value of Game.
func (s Message) GetGame() OptGame {
	return s.Game
}

// GetPoll returns the value of Poll.
func (s Message) GetPoll() OptPoll {
	return s.Poll
}

// GetVenue returns the value of Venue.
func (s Message) GetVenue() OptVenue {
	return s.Venue
}

// GetLocation returns the value of Location.
func (s Message) GetLocation() OptLocation {
	return s.Location
}

// GetNewChatMembers returns the value of NewChatMembers.
func (s Message) GetNewChatMembers() []User {
	return s.NewChatMembers
}

// GetLeftChatMember returns the value of LeftChatMember.
func (s Message) GetLeftChatMember() OptUser {
	return s.LeftChatMember
}

// GetNewChatTitle returns the value of NewChatTitle.
func (s Message) GetNewChatTitle() OptString {
	return s.NewChatTitle
}

// GetNewChatPhoto returns the value of NewChatPhoto.
func (s Message) GetNewChatPhoto() []PhotoSize {
	return s.NewChatPhoto
}

// GetDeleteChatPhoto returns the value of DeleteChatPhoto.
func (s Message) GetDeleteChatPhoto() OptBool {
	return s.DeleteChatPhoto
}

// GetGroupChatCreated returns the value of GroupChatCreated.
func (s Message) GetGroupChatCreated() OptBool {
	return s.GroupChatCreated
}

// GetSupergroupChatCreated returns the value of SupergroupChatCreated.
func (s Message) GetSupergroupChatCreated() OptBool {
	return s.SupergroupChatCreated
}

// GetChannelChatCreated returns the value of ChannelChatCreated.
func (s Message) GetChannelChatCreated() OptBool {
	return s.ChannelChatCreated
}

// GetMessageAutoDeleteTimerChanged returns the value of MessageAutoDeleteTimerChanged.
func (s Message) GetMessageAutoDeleteTimerChanged() OptMessageAutoDeleteTimerChanged {
	return s.MessageAutoDeleteTimerChanged
}

// GetMigrateToChatID returns the value of MigrateToChatID.
func (s Message) GetMigrateToChatID() OptInt64 {
	return s.MigrateToChatID
}

// GetMigrateFromChatID returns the value of MigrateFromChatID.
func (s Message) GetMigrateFromChatID() OptInt64 {
	return s.MigrateFromChatID
}

// GetPinnedMessage returns the value of PinnedMessage.
func (s Message) GetPinnedMessage() *Message {
	return s.PinnedMessage
}

// GetInvoice returns the value of Invoice.
func (s Message) GetInvoice() OptInvoice {
	return s.Invoice
}

// GetSuccessfulPayment returns the value of SuccessfulPayment.
func (s Message) GetSuccessfulPayment() OptSuccessfulPayment {
	return s.SuccessfulPayment
}

// GetConnectedWebsite returns the value of ConnectedWebsite.
func (s Message) GetConnectedWebsite() OptString {
	return s.ConnectedWebsite
}

// GetPassportData returns the value of PassportData.
func (s Message) GetPassportData() OptPassportData {
	return s.PassportData
}

// GetProximityAlertTriggered returns the value of ProximityAlertTriggered.
func (s Message) GetProximityAlertTriggered() OptProximityAlertTriggered {
	return s.ProximityAlertTriggered
}

// GetVideoChatScheduled returns the value of VideoChatScheduled.
func (s Message) GetVideoChatScheduled() OptVideoChatScheduled {
	return s.VideoChatScheduled
}

// GetVideoChatStarted returns the value of VideoChatStarted.
func (s Message) GetVideoChatStarted() *VideoChatStarted {
	return s.VideoChatStarted
}

// GetVideoChatEnded returns the value of VideoChatEnded.
func (s Message) GetVideoChatEnded() OptVideoChatEnded {
	return s.VideoChatEnded
}

// GetVideoChatParticipantsInvited returns the value of VideoChatParticipantsInvited.
func (s Message) GetVideoChatParticipantsInvited() OptVideoChatParticipantsInvited {
	return s.VideoChatParticipantsInvited
}

// GetWebAppData returns the value of WebAppData.
func (s Message) GetWebAppData() OptWebAppData {
	return s.WebAppData
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s Message) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetNewChatMember returns the value of NewChatMember.
func (s Message) GetNewChatMember() OptUser {
	return s.NewChatMember
}

// GetNewChatParticipant returns the value of NewChatParticipant.
func (s Message) GetNewChatParticipant() OptUser {
	return s.NewChatParticipant
}

// GetLeftChatParticipant returns the value of LeftChatParticipant.
func (s Message) GetLeftChatParticipant() OptUser {
	return s.LeftChatParticipant
}

// SetMessageID sets the value of MessageID.
func (s *Message) SetMessageID(val int) {
	s.MessageID = val
}

// SetFrom sets the value of From.
func (s *Message) SetFrom(val OptUser) {
	s.From = val
}

// SetSenderChat sets the value of SenderChat.
func (s *Message) SetSenderChat(val OptChat) {
	s.SenderChat = val
}

// SetDate sets the value of Date.
func (s *Message) SetDate(val int) {
	s.Date = val
}

// SetChat sets the value of Chat.
func (s *Message) SetChat(val Chat) {
	s.Chat = val
}

// SetForwardFrom sets the value of ForwardFrom.
func (s *Message) SetForwardFrom(val OptUser) {
	s.ForwardFrom = val
}

// SetForwardFromChat sets the value of ForwardFromChat.
func (s *Message) SetForwardFromChat(val OptChat) {
	s.ForwardFromChat = val
}

// SetForwardFromMessageID sets the value of ForwardFromMessageID.
func (s *Message) SetForwardFromMessageID(val OptInt) {
	s.ForwardFromMessageID = val
}

// SetForwardSignature sets the value of ForwardSignature.
func (s *Message) SetForwardSignature(val OptString) {
	s.ForwardSignature = val
}

// SetForwardSenderName sets the value of ForwardSenderName.
func (s *Message) SetForwardSenderName(val OptString) {
	s.ForwardSenderName = val
}

// SetForwardDate sets the value of ForwardDate.
func (s *Message) SetForwardDate(val OptInt) {
	s.ForwardDate = val
}

// SetIsAutomaticForward sets the value of IsAutomaticForward.
func (s *Message) SetIsAutomaticForward(val OptBool) {
	s.IsAutomaticForward = val
}

// SetReplyToMessage sets the value of ReplyToMessage.
func (s *Message) SetReplyToMessage(val *Message) {
	s.ReplyToMessage = val
}

// SetViaBot sets the value of ViaBot.
func (s *Message) SetViaBot(val OptUser) {
	s.ViaBot = val
}

// SetEditDate sets the value of EditDate.
func (s *Message) SetEditDate(val OptInt) {
	s.EditDate = val
}

// SetHasProtectedContent sets the value of HasProtectedContent.
func (s *Message) SetHasProtectedContent(val OptBool) {
	s.HasProtectedContent = val
}

// SetMediaGroupID sets the value of MediaGroupID.
func (s *Message) SetMediaGroupID(val OptString) {
	s.MediaGroupID = val
}

// SetAuthorSignature sets the value of AuthorSignature.
func (s *Message) SetAuthorSignature(val OptString) {
	s.AuthorSignature = val
}

// SetText sets the value of Text.
func (s *Message) SetText(val OptString) {
	s.Text = val
}

// SetEntities sets the value of Entities.
func (s *Message) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetAnimation sets the value of Animation.
func (s *Message) SetAnimation(val OptAnimation) {
	s.Animation = val
}

// SetAudio sets the value of Audio.
func (s *Message) SetAudio(val OptAudio) {
	s.Audio = val
}

// SetDocument sets the value of Document.
func (s *Message) SetDocument(val OptDocument) {
	s.Document = val
}

// SetPhoto sets the value of Photo.
func (s *Message) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// SetSticker sets the value of Sticker.
func (s *Message) SetSticker(val OptSticker) {
	s.Sticker = val
}

// SetVideo sets the value of Video.
func (s *Message) SetVideo(val OptVideo) {
	s.Video = val
}

// SetVideoNote sets the value of VideoNote.
func (s *Message) SetVideoNote(val OptVideoNote) {
	s.VideoNote = val
}

// SetVoice sets the value of Voice.
func (s *Message) SetVoice(val OptVoice) {
	s.Voice = val
}

// SetCaption sets the value of Caption.
func (s *Message) SetCaption(val OptString) {
	s.Caption = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *Message) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetContact sets the value of Contact.
func (s *Message) SetContact(val OptContact) {
	s.Contact = val
}

// SetDice sets the value of Dice.
func (s *Message) SetDice(val OptDice) {
	s.Dice = val
}

// SetGame sets the value of Game.
func (s *Message) SetGame(val OptGame) {
	s.Game = val
}

// SetPoll sets the value of Poll.
func (s *Message) SetPoll(val OptPoll) {
	s.Poll = val
}

// SetVenue sets the value of Venue.
func (s *Message) SetVenue(val OptVenue) {
	s.Venue = val
}

// SetLocation sets the value of Location.
func (s *Message) SetLocation(val OptLocation) {
	s.Location = val
}

// SetNewChatMembers sets the value of NewChatMembers.
func (s *Message) SetNewChatMembers(val []User) {
	s.NewChatMembers = val
}

// SetLeftChatMember sets the value of LeftChatMember.
func (s *Message) SetLeftChatMember(val OptUser) {
	s.LeftChatMember = val
}

// SetNewChatTitle sets the value of NewChatTitle.
func (s *Message) SetNewChatTitle(val OptString) {
	s.NewChatTitle = val
}

// SetNewChatPhoto sets the value of NewChatPhoto.
func (s *Message) SetNewChatPhoto(val []PhotoSize) {
	s.NewChatPhoto = val
}

// SetDeleteChatPhoto sets the value of DeleteChatPhoto.
func (s *Message) SetDeleteChatPhoto(val OptBool) {
	s.DeleteChatPhoto = val
}

// SetGroupChatCreated sets the value of GroupChatCreated.
func (s *Message) SetGroupChatCreated(val OptBool) {
	s.GroupChatCreated = val
}

// SetSupergroupChatCreated sets the value of SupergroupChatCreated.
func (s *Message) SetSupergroupChatCreated(val OptBool) {
	s.SupergroupChatCreated = val
}

// SetChannelChatCreated sets the value of ChannelChatCreated.
func (s *Message) SetChannelChatCreated(val OptBool) {
	s.ChannelChatCreated = val
}

// SetMessageAutoDeleteTimerChanged sets the value of MessageAutoDeleteTimerChanged.
func (s *Message) SetMessageAutoDeleteTimerChanged(val OptMessageAutoDeleteTimerChanged) {
	s.MessageAutoDeleteTimerChanged = val
}

// SetMigrateToChatID sets the value of MigrateToChatID.
func (s *Message) SetMigrateToChatID(val OptInt64) {
	s.MigrateToChatID = val
}

// SetMigrateFromChatID sets the value of MigrateFromChatID.
func (s *Message) SetMigrateFromChatID(val OptInt64) {
	s.MigrateFromChatID = val
}

// SetPinnedMessage sets the value of PinnedMessage.
func (s *Message) SetPinnedMessage(val *Message) {
	s.PinnedMessage = val
}

// SetInvoice sets the value of Invoice.
func (s *Message) SetInvoice(val OptInvoice) {
	s.Invoice = val
}

// SetSuccessfulPayment sets the value of SuccessfulPayment.
func (s *Message) SetSuccessfulPayment(val OptSuccessfulPayment) {
	s.SuccessfulPayment = val
}

// SetConnectedWebsite sets the value of ConnectedWebsite.
func (s *Message) SetConnectedWebsite(val OptString) {
	s.ConnectedWebsite = val
}

// SetPassportData sets the value of PassportData.
func (s *Message) SetPassportData(val OptPassportData) {
	s.PassportData = val
}

// SetProximityAlertTriggered sets the value of ProximityAlertTriggered.
func (s *Message) SetProximityAlertTriggered(val OptProximityAlertTriggered) {
	s.ProximityAlertTriggered = val
}

// SetVideoChatScheduled sets the value of VideoChatScheduled.
func (s *Message) SetVideoChatScheduled(val OptVideoChatScheduled) {
	s.VideoChatScheduled = val
}

// SetVideoChatStarted sets the value of VideoChatStarted.
func (s *Message) SetVideoChatStarted(val *VideoChatStarted) {
	s.VideoChatStarted = val
}

// SetVideoChatEnded sets the value of VideoChatEnded.
func (s *Message) SetVideoChatEnded(val OptVideoChatEnded) {
	s.VideoChatEnded = val
}

// SetVideoChatParticipantsInvited sets the value of VideoChatParticipantsInvited.
func (s *Message) SetVideoChatParticipantsInvited(val OptVideoChatParticipantsInvited) {
	s.VideoChatParticipantsInvited = val
}

// SetWebAppData sets the value of WebAppData.
func (s *Message) SetWebAppData(val OptWebAppData) {
	s.WebAppData = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *Message) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetNewChatMember sets the value of NewChatMember.
func (s *Message) SetNewChatMember(val OptUser) {
	s.NewChatMember = val
}

// SetNewChatParticipant sets the value of NewChatParticipant.
func (s *Message) SetNewChatParticipant(val OptUser) {
	s.NewChatParticipant = val
}

// SetLeftChatParticipant sets the value of LeftChatParticipant.
func (s *Message) SetLeftChatParticipant(val OptUser) {
	s.LeftChatParticipant = val
}

// This object represents a service message about a change in auto-delete timer settings.
// Ref: #/components/schemas/MessageAutoDeleteTimerChanged
type MessageAutoDeleteTimerChanged struct {
	// New auto-delete time for messages in the chat; in seconds.
	MessageAutoDeleteTime int `json:"message_auto_delete_time"`
}

// GetMessageAutoDeleteTime returns the value of MessageAutoDeleteTime.
func (s MessageAutoDeleteTimerChanged) GetMessageAutoDeleteTime() int {
	return s.MessageAutoDeleteTime
}

// SetMessageAutoDeleteTime sets the value of MessageAutoDeleteTime.
func (s *MessageAutoDeleteTimerChanged) SetMessageAutoDeleteTime(val int) {
	s.MessageAutoDeleteTime = val
}

// This object represents one special entity in a text message. For example, hashtags, usernames,
// URLs, etc.
// Ref: #/components/schemas/MessageEntity
type MessageEntity struct {
	// Type of the entity. Currently, can be "mention" (@username), "hashtag" (#hashtag), "cashtag"
	// ($USD), "bot_command" (/start@jobs_bot), "url" (https://telegram.org), "email"
	// (do-not-reply@telegram.org), "phone_number" (+1-212-555-0123), "bold" (bold text), "italic"
	// (italic text), "underline" (underlined text), "strikethrough" (strikethrough text), "spoiler"
	// (spoiler message), "code" (monowidth string), "pre" (monowidth block), "text_link" (for clickable
	// text URLs), "text_mention" (for users without usernames).
	Type MessageEntityType `json:"type"`
	// Offset in UTF-16 code units to the start of the entity.
	Offset int `json:"offset"`
	// Length of the entity in UTF-16 code units.
	Length int `json:"length"`
	// For "text_link" only, url that will be opened after user taps on the text.
	URL  OptString `json:"url,omitempty"`
	User OptUser   `json:"user,omitempty"`
	// For "pre" only, the programming language of the entity text.
	Language OptString `json:"language,omitempty"`
}

// GetType returns the value of Type.
func (s MessageEntity) GetType() MessageEntityType {
	return s.Type
}

// GetOffset returns the value of Offset.
func (s MessageEntity) GetOffset() int {
	return s.Offset
}

// GetLength returns the value of Length.
func (s MessageEntity) GetLength() int {
	return s.Length
}

// GetURL returns the value of URL.
func (s MessageEntity) GetURL() OptString {
	return s.URL
}

// GetUser returns the value of User.
func (s MessageEntity) GetUser() OptUser {
	return s.User
}

// GetLanguage returns the value of Language.
func (s MessageEntity) GetLanguage() OptString {
	return s.Language
}

// SetType sets the value of Type.
func (s *MessageEntity) SetType(val MessageEntityType) {
	s.Type = val
}

// SetOffset sets the value of Offset.
func (s *MessageEntity) SetOffset(val int) {
	s.Offset = val
}

// SetLength sets the value of Length.
func (s *MessageEntity) SetLength(val int) {
	s.Length = val
}

// SetURL sets the value of URL.
func (s *MessageEntity) SetURL(val OptString) {
	s.URL = val
}

// SetUser sets the value of User.
func (s *MessageEntity) SetUser(val OptUser) {
	s.User = val
}

// SetLanguage sets the value of Language.
func (s *MessageEntity) SetLanguage(val OptString) {
	s.Language = val
}

// Type of the entity. Currently, can be "mention" (@username), "hashtag" (#hashtag), "cashtag"
// ($USD), "bot_command" (/start@jobs_bot), "url" (https://telegram.org), "email"
// (do-not-reply@telegram.org), "phone_number" (+1-212-555-0123), "bold" (bold text), "italic"
// (italic text), "underline" (underlined text), "strikethrough" (strikethrough text), "spoiler"
// (spoiler message), "code" (monowidth string), "pre" (monowidth block), "text_link" (for clickable
// text URLs), "text_mention" (for users without usernames).
type MessageEntityType string

const (
	MessageEntityTypeMention       MessageEntityType = "mention"
	MessageEntityTypeHashtag       MessageEntityType = "hashtag"
	MessageEntityTypeCashtag       MessageEntityType = "cashtag"
	MessageEntityTypeBotCommand    MessageEntityType = "bot_command"
	MessageEntityTypeURL           MessageEntityType = "url"
	MessageEntityTypeEmail         MessageEntityType = "email"
	MessageEntityTypePhoneNumber   MessageEntityType = "phone_number"
	MessageEntityTypeBold          MessageEntityType = "bold"
	MessageEntityTypeItalic        MessageEntityType = "italic"
	MessageEntityTypeUnderline     MessageEntityType = "underline"
	MessageEntityTypeStrikethrough MessageEntityType = "strikethrough"
	MessageEntityTypeSpoiler       MessageEntityType = "spoiler"
	MessageEntityTypeCode          MessageEntityType = "code"
	MessageEntityTypePre           MessageEntityType = "pre"
	MessageEntityTypeTextLink      MessageEntityType = "text_link"
	MessageEntityTypeTextMention   MessageEntityType = "text_mention"
)

// This object represents a unique message identifier.
// Ref: #/components/schemas/MessageId
type MessageId struct {
	// Unique message identifier.
	MessageID int `json:"message_id"`
}

// GetMessageID returns the value of MessageID.
func (s MessageId) GetMessageID() int {
	return s.MessageID
}

// SetMessageID sets the value of MessageID.
func (s *MessageId) SetMessageID(val int) {
	s.MessageID = val
}

// NewOptAnimation returns new OptAnimation with value set to v.
func NewOptAnimation(v Animation) OptAnimation {
	return OptAnimation{
		Value: v,
		Set:   true,
	}
}

// OptAnimation is optional Animation.
type OptAnimation struct {
	Value Animation
	Set   bool
}

// IsSet returns true if OptAnimation was set.
func (o OptAnimation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnimation) Reset() {
	var v Animation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnimation) SetTo(v Animation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnimation) Get() (v Animation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnimation) Or(d Animation) Animation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAudio returns new OptAudio with value set to v.
func NewOptAudio(v Audio) OptAudio {
	return OptAudio{
		Value: v,
		Set:   true,
	}
}

// OptAudio is optional Audio.
type OptAudio struct {
	Value Audio
	Set   bool
}

// IsSet returns true if OptAudio was set.
func (o OptAudio) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudio) Reset() {
	var v Audio
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudio) SetTo(v Audio) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudio) Get() (v Audio, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudio) Or(d Audio) Audio {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBotCommandScope returns new OptBotCommandScope with value set to v.
func NewOptBotCommandScope(v BotCommandScope) OptBotCommandScope {
	return OptBotCommandScope{
		Value: v,
		Set:   true,
	}
}

// OptBotCommandScope is optional BotCommandScope.
type OptBotCommandScope struct {
	Value BotCommandScope
	Set   bool
}

// IsSet returns true if OptBotCommandScope was set.
func (o OptBotCommandScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBotCommandScope) Reset() {
	var v BotCommandScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBotCommandScope) SetTo(v BotCommandScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBotCommandScope) Get() (v BotCommandScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBotCommandScope) Or(d BotCommandScope) BotCommandScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallbackQuery returns new OptCallbackQuery with value set to v.
func NewOptCallbackQuery(v CallbackQuery) OptCallbackQuery {
	return OptCallbackQuery{
		Value: v,
		Set:   true,
	}
}

// OptCallbackQuery is optional CallbackQuery.
type OptCallbackQuery struct {
	Value CallbackQuery
	Set   bool
}

// IsSet returns true if OptCallbackQuery was set.
func (o OptCallbackQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallbackQuery) Reset() {
	var v CallbackQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallbackQuery) SetTo(v CallbackQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallbackQuery) Get() (v CallbackQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallbackQuery) Or(d CallbackQuery) CallbackQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChat returns new OptChat with value set to v.
func NewOptChat(v Chat) OptChat {
	return OptChat{
		Value: v,
		Set:   true,
	}
}

// OptChat is optional Chat.
type OptChat struct {
	Value Chat
	Set   bool
}

// IsSet returns true if OptChat was set.
func (o OptChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChat) Reset() {
	var v Chat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChat) SetTo(v Chat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChat) Get() (v Chat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChat) Or(d Chat) Chat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatAdministratorRights returns new OptChatAdministratorRights with value set to v.
func NewOptChatAdministratorRights(v ChatAdministratorRights) OptChatAdministratorRights {
	return OptChatAdministratorRights{
		Value: v,
		Set:   true,
	}
}

// OptChatAdministratorRights is optional ChatAdministratorRights.
type OptChatAdministratorRights struct {
	Value ChatAdministratorRights
	Set   bool
}

// IsSet returns true if OptChatAdministratorRights was set.
func (o OptChatAdministratorRights) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatAdministratorRights) Reset() {
	var v ChatAdministratorRights
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatAdministratorRights) SetTo(v ChatAdministratorRights) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatAdministratorRights) Get() (v ChatAdministratorRights, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatAdministratorRights) Or(d ChatAdministratorRights) ChatAdministratorRights {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatInviteLink returns new OptChatInviteLink with value set to v.
func NewOptChatInviteLink(v ChatInviteLink) OptChatInviteLink {
	return OptChatInviteLink{
		Value: v,
		Set:   true,
	}
}

// OptChatInviteLink is optional ChatInviteLink.
type OptChatInviteLink struct {
	Value ChatInviteLink
	Set   bool
}

// IsSet returns true if OptChatInviteLink was set.
func (o OptChatInviteLink) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatInviteLink) Reset() {
	var v ChatInviteLink
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatInviteLink) SetTo(v ChatInviteLink) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatInviteLink) Get() (v ChatInviteLink, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatInviteLink) Or(d ChatInviteLink) ChatInviteLink {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatJoinRequest returns new OptChatJoinRequest with value set to v.
func NewOptChatJoinRequest(v ChatJoinRequest) OptChatJoinRequest {
	return OptChatJoinRequest{
		Value: v,
		Set:   true,
	}
}

// OptChatJoinRequest is optional ChatJoinRequest.
type OptChatJoinRequest struct {
	Value ChatJoinRequest
	Set   bool
}

// IsSet returns true if OptChatJoinRequest was set.
func (o OptChatJoinRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatJoinRequest) Reset() {
	var v ChatJoinRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatJoinRequest) SetTo(v ChatJoinRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatJoinRequest) Get() (v ChatJoinRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatJoinRequest) Or(d ChatJoinRequest) ChatJoinRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatLocation returns new OptChatLocation with value set to v.
func NewOptChatLocation(v ChatLocation) OptChatLocation {
	return OptChatLocation{
		Value: v,
		Set:   true,
	}
}

// OptChatLocation is optional ChatLocation.
type OptChatLocation struct {
	Value ChatLocation
	Set   bool
}

// IsSet returns true if OptChatLocation was set.
func (o OptChatLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatLocation) Reset() {
	var v ChatLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatLocation) SetTo(v ChatLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatLocation) Get() (v ChatLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatLocation) Or(d ChatLocation) ChatLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatMember returns new OptChatMember with value set to v.
func NewOptChatMember(v ChatMember) OptChatMember {
	return OptChatMember{
		Value: v,
		Set:   true,
	}
}

// OptChatMember is optional ChatMember.
type OptChatMember struct {
	Value ChatMember
	Set   bool
}

// IsSet returns true if OptChatMember was set.
func (o OptChatMember) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatMember) Reset() {
	var v ChatMember
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatMember) SetTo(v ChatMember) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatMember) Get() (v ChatMember, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatMember) Or(d ChatMember) ChatMember {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatMemberUpdated returns new OptChatMemberUpdated with value set to v.
func NewOptChatMemberUpdated(v ChatMemberUpdated) OptChatMemberUpdated {
	return OptChatMemberUpdated{
		Value: v,
		Set:   true,
	}
}

// OptChatMemberUpdated is optional ChatMemberUpdated.
type OptChatMemberUpdated struct {
	Value ChatMemberUpdated
	Set   bool
}

// IsSet returns true if OptChatMemberUpdated was set.
func (o OptChatMemberUpdated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatMemberUpdated) Reset() {
	var v ChatMemberUpdated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatMemberUpdated) SetTo(v ChatMemberUpdated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatMemberUpdated) Get() (v ChatMemberUpdated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatMemberUpdated) Or(d ChatMemberUpdated) ChatMemberUpdated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatPermissions returns new OptChatPermissions with value set to v.
func NewOptChatPermissions(v ChatPermissions) OptChatPermissions {
	return OptChatPermissions{
		Value: v,
		Set:   true,
	}
}

// OptChatPermissions is optional ChatPermissions.
type OptChatPermissions struct {
	Value ChatPermissions
	Set   bool
}

// IsSet returns true if OptChatPermissions was set.
func (o OptChatPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatPermissions) Reset() {
	var v ChatPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatPermissions) SetTo(v ChatPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatPermissions) Get() (v ChatPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatPermissions) Or(d ChatPermissions) ChatPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatPhoto returns new OptChatPhoto with value set to v.
func NewOptChatPhoto(v ChatPhoto) OptChatPhoto {
	return OptChatPhoto{
		Value: v,
		Set:   true,
	}
}

// OptChatPhoto is optional ChatPhoto.
type OptChatPhoto struct {
	Value ChatPhoto
	Set   bool
}

// IsSet returns true if OptChatPhoto was set.
func (o OptChatPhoto) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatPhoto) Reset() {
	var v ChatPhoto
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatPhoto) SetTo(v ChatPhoto) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatPhoto) Get() (v ChatPhoto, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatPhoto) Or(d ChatPhoto) ChatPhoto {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChosenInlineResult returns new OptChosenInlineResult with value set to v.
func NewOptChosenInlineResult(v ChosenInlineResult) OptChosenInlineResult {
	return OptChosenInlineResult{
		Value: v,
		Set:   true,
	}
}

// OptChosenInlineResult is optional ChosenInlineResult.
type OptChosenInlineResult struct {
	Value ChosenInlineResult
	Set   bool
}

// IsSet returns true if OptChosenInlineResult was set.
func (o OptChosenInlineResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChosenInlineResult) Reset() {
	var v ChosenInlineResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChosenInlineResult) SetTo(v ChosenInlineResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChosenInlineResult) Get() (v ChosenInlineResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChosenInlineResult) Or(d ChosenInlineResult) ChosenInlineResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContact returns new OptContact with value set to v.
func NewOptContact(v Contact) OptContact {
	return OptContact{
		Value: v,
		Set:   true,
	}
}

// OptContact is optional Contact.
type OptContact struct {
	Value Contact
	Set   bool
}

// IsSet returns true if OptContact was set.
func (o OptContact) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContact) Reset() {
	var v Contact
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContact) SetTo(v Contact) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContact) Get() (v Contact, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContact) Or(d Contact) Contact {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeleteMyCommands returns new OptDeleteMyCommands with value set to v.
func NewOptDeleteMyCommands(v DeleteMyCommands) OptDeleteMyCommands {
	return OptDeleteMyCommands{
		Value: v,
		Set:   true,
	}
}

// OptDeleteMyCommands is optional DeleteMyCommands.
type OptDeleteMyCommands struct {
	Value DeleteMyCommands
	Set   bool
}

// IsSet returns true if OptDeleteMyCommands was set.
func (o OptDeleteMyCommands) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeleteMyCommands) Reset() {
	var v DeleteMyCommands
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeleteMyCommands) SetTo(v DeleteMyCommands) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeleteMyCommands) Get() (v DeleteMyCommands, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeleteMyCommands) Or(d DeleteMyCommands) DeleteMyCommands {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeleteWebhook returns new OptDeleteWebhook with value set to v.
func NewOptDeleteWebhook(v DeleteWebhook) OptDeleteWebhook {
	return OptDeleteWebhook{
		Value: v,
		Set:   true,
	}
}

// OptDeleteWebhook is optional DeleteWebhook.
type OptDeleteWebhook struct {
	Value DeleteWebhook
	Set   bool
}

// IsSet returns true if OptDeleteWebhook was set.
func (o OptDeleteWebhook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeleteWebhook) Reset() {
	var v DeleteWebhook
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeleteWebhook) SetTo(v DeleteWebhook) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeleteWebhook) Get() (v DeleteWebhook, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeleteWebhook) Or(d DeleteWebhook) DeleteWebhook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDice returns new OptDice with value set to v.
func NewOptDice(v Dice) OptDice {
	return OptDice{
		Value: v,
		Set:   true,
	}
}

// OptDice is optional Dice.
type OptDice struct {
	Value Dice
	Set   bool
}

// IsSet returns true if OptDice was set.
func (o OptDice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDice) Reset() {
	var v Dice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDice) SetTo(v Dice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDice) Get() (v Dice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDice) Or(d Dice) Dice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocument returns new OptDocument with value set to v.
func NewOptDocument(v Document) OptDocument {
	return OptDocument{
		Value: v,
		Set:   true,
	}
}

// OptDocument is optional Document.
type OptDocument struct {
	Value Document
	Set   bool
}

// IsSet returns true if OptDocument was set.
func (o OptDocument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocument) Reset() {
	var v Document
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocument) SetTo(v Document) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocument) Get() (v Document, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocument) Or(d Document) Document {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFile returns new OptFile with value set to v.
func NewOptFile(v File) OptFile {
	return OptFile{
		Value: v,
		Set:   true,
	}
}

// OptFile is optional File.
type OptFile struct {
	Value File
	Set   bool
}

// IsSet returns true if OptFile was set.
func (o OptFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFile) Reset() {
	var v File
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFile) SetTo(v File) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFile) Get() (v File, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFile) Or(d File) File {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGame returns new OptGame with value set to v.
func NewOptGame(v Game) OptGame {
	return OptGame{
		Value: v,
		Set:   true,
	}
}

// OptGame is optional Game.
type OptGame struct {
	Value Game
	Set   bool
}

// IsSet returns true if OptGame was set.
func (o OptGame) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGame) Reset() {
	var v Game
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGame) SetTo(v Game) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGame) Get() (v Game, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGame) Or(d Game) Game {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetChatMenuButton returns new OptGetChatMenuButton with value set to v.
func NewOptGetChatMenuButton(v GetChatMenuButton) OptGetChatMenuButton {
	return OptGetChatMenuButton{
		Value: v,
		Set:   true,
	}
}

// OptGetChatMenuButton is optional GetChatMenuButton.
type OptGetChatMenuButton struct {
	Value GetChatMenuButton
	Set   bool
}

// IsSet returns true if OptGetChatMenuButton was set.
func (o OptGetChatMenuButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetChatMenuButton) Reset() {
	var v GetChatMenuButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetChatMenuButton) SetTo(v GetChatMenuButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetChatMenuButton) Get() (v GetChatMenuButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetChatMenuButton) Or(d GetChatMenuButton) GetChatMenuButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyCommands returns new OptGetMyCommands with value set to v.
func NewOptGetMyCommands(v GetMyCommands) OptGetMyCommands {
	return OptGetMyCommands{
		Value: v,
		Set:   true,
	}
}

// OptGetMyCommands is optional GetMyCommands.
type OptGetMyCommands struct {
	Value GetMyCommands
	Set   bool
}

// IsSet returns true if OptGetMyCommands was set.
func (o OptGetMyCommands) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyCommands) Reset() {
	var v GetMyCommands
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyCommands) SetTo(v GetMyCommands) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyCommands) Get() (v GetMyCommands, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyCommands) Or(d GetMyCommands) GetMyCommands {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyDefaultAdministratorRights returns new OptGetMyDefaultAdministratorRights with value set to v.
func NewOptGetMyDefaultAdministratorRights(v GetMyDefaultAdministratorRights) OptGetMyDefaultAdministratorRights {
	return OptGetMyDefaultAdministratorRights{
		Value: v,
		Set:   true,
	}
}

// OptGetMyDefaultAdministratorRights is optional GetMyDefaultAdministratorRights.
type OptGetMyDefaultAdministratorRights struct {
	Value GetMyDefaultAdministratorRights
	Set   bool
}

// IsSet returns true if OptGetMyDefaultAdministratorRights was set.
func (o OptGetMyDefaultAdministratorRights) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyDefaultAdministratorRights) Reset() {
	var v GetMyDefaultAdministratorRights
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyDefaultAdministratorRights) SetTo(v GetMyDefaultAdministratorRights) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyDefaultAdministratorRights) Get() (v GetMyDefaultAdministratorRights, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyDefaultAdministratorRights) Or(d GetMyDefaultAdministratorRights) GetMyDefaultAdministratorRights {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUpdates returns new OptGetUpdates with value set to v.
func NewOptGetUpdates(v GetUpdates) OptGetUpdates {
	return OptGetUpdates{
		Value: v,
		Set:   true,
	}
}

// OptGetUpdates is optional GetUpdates.
type OptGetUpdates struct {
	Value GetUpdates
	Set   bool
}

// IsSet returns true if OptGetUpdates was set.
func (o OptGetUpdates) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUpdates) Reset() {
	var v GetUpdates
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUpdates) SetTo(v GetUpdates) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUpdates) Get() (v GetUpdates, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUpdates) Or(d GetUpdates) GetUpdates {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineKeyboardMarkup returns new OptInlineKeyboardMarkup with value set to v.
func NewOptInlineKeyboardMarkup(v InlineKeyboardMarkup) OptInlineKeyboardMarkup {
	return OptInlineKeyboardMarkup{
		Value: v,
		Set:   true,
	}
}

// OptInlineKeyboardMarkup is optional InlineKeyboardMarkup.
type OptInlineKeyboardMarkup struct {
	Value InlineKeyboardMarkup
	Set   bool
}

// IsSet returns true if OptInlineKeyboardMarkup was set.
func (o OptInlineKeyboardMarkup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineKeyboardMarkup) Reset() {
	var v InlineKeyboardMarkup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineKeyboardMarkup) SetTo(v InlineKeyboardMarkup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineKeyboardMarkup) Get() (v InlineKeyboardMarkup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineKeyboardMarkup) Or(d InlineKeyboardMarkup) InlineKeyboardMarkup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineQuery returns new OptInlineQuery with value set to v.
func NewOptInlineQuery(v InlineQuery) OptInlineQuery {
	return OptInlineQuery{
		Value: v,
		Set:   true,
	}
}

// OptInlineQuery is optional InlineQuery.
type OptInlineQuery struct {
	Value InlineQuery
	Set   bool
}

// IsSet returns true if OptInlineQuery was set.
func (o OptInlineQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineQuery) Reset() {
	var v InlineQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineQuery) SetTo(v InlineQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineQuery) Get() (v InlineQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineQuery) Or(d InlineQuery) InlineQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineQueryChatType returns new OptInlineQueryChatType with value set to v.
func NewOptInlineQueryChatType(v InlineQueryChatType) OptInlineQueryChatType {
	return OptInlineQueryChatType{
		Value: v,
		Set:   true,
	}
}

// OptInlineQueryChatType is optional InlineQueryChatType.
type OptInlineQueryChatType struct {
	Value InlineQueryChatType
	Set   bool
}

// IsSet returns true if OptInlineQueryChatType was set.
func (o OptInlineQueryChatType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineQueryChatType) Reset() {
	var v InlineQueryChatType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineQueryChatType) SetTo(v InlineQueryChatType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineQueryChatType) Get() (v InlineQueryChatType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineQueryChatType) Or(d InlineQueryChatType) InlineQueryChatType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInputMessageContent returns new OptInputMessageContent with value set to v.
func NewOptInputMessageContent(v InputMessageContent) OptInputMessageContent {
	return OptInputMessageContent{
		Value: v,
		Set:   true,
	}
}

// OptInputMessageContent is optional InputMessageContent.
type OptInputMessageContent struct {
	Value InputMessageContent
	Set   bool
}

// IsSet returns true if OptInputMessageContent was set.
func (o OptInputMessageContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInputMessageContent) Reset() {
	var v InputMessageContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInputMessageContent) SetTo(v InputMessageContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInputMessageContent) Get() (v InputMessageContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInputMessageContent) Or(d InputMessageContent) InputMessageContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoice returns new OptInvoice with value set to v.
func NewOptInvoice(v Invoice) OptInvoice {
	return OptInvoice{
		Value: v,
		Set:   true,
	}
}

// OptInvoice is optional Invoice.
type OptInvoice struct {
	Value Invoice
	Set   bool
}

// IsSet returns true if OptInvoice was set.
func (o OptInvoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoice) Reset() {
	var v Invoice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoice) SetTo(v Invoice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoice) Get() (v Invoice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoice) Or(d Invoice) Invoice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKeyboardButtonPollType returns new OptKeyboardButtonPollType with value set to v.
func NewOptKeyboardButtonPollType(v KeyboardButtonPollType) OptKeyboardButtonPollType {
	return OptKeyboardButtonPollType{
		Value: v,
		Set:   true,
	}
}

// OptKeyboardButtonPollType is optional KeyboardButtonPollType.
type OptKeyboardButtonPollType struct {
	Value KeyboardButtonPollType
	Set   bool
}

// IsSet returns true if OptKeyboardButtonPollType was set.
func (o OptKeyboardButtonPollType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyboardButtonPollType) Reset() {
	var v KeyboardButtonPollType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyboardButtonPollType) SetTo(v KeyboardButtonPollType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyboardButtonPollType) Get() (v KeyboardButtonPollType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKeyboardButtonPollType) Or(d KeyboardButtonPollType) KeyboardButtonPollType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLocation returns new OptLocation with value set to v.
func NewOptLocation(v Location) OptLocation {
	return OptLocation{
		Value: v,
		Set:   true,
	}
}

// OptLocation is optional Location.
type OptLocation struct {
	Value Location
	Set   bool
}

// IsSet returns true if OptLocation was set.
func (o OptLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLocation) Reset() {
	var v Location
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLocation) SetTo(v Location) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLocation) Get() (v Location, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLocation) Or(d Location) Location {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoginUrl returns new OptLoginUrl with value set to v.
func NewOptLoginUrl(v LoginUrl) OptLoginUrl {
	return OptLoginUrl{
		Value: v,
		Set:   true,
	}
}

// OptLoginUrl is optional LoginUrl.
type OptLoginUrl struct {
	Value LoginUrl
	Set   bool
}

// IsSet returns true if OptLoginUrl was set.
func (o OptLoginUrl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginUrl) Reset() {
	var v LoginUrl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginUrl) SetTo(v LoginUrl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginUrl) Get() (v LoginUrl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginUrl) Or(d LoginUrl) LoginUrl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMaskPosition returns new OptMaskPosition with value set to v.
func NewOptMaskPosition(v MaskPosition) OptMaskPosition {
	return OptMaskPosition{
		Value: v,
		Set:   true,
	}
}

// OptMaskPosition is optional MaskPosition.
type OptMaskPosition struct {
	Value MaskPosition
	Set   bool
}

// IsSet returns true if OptMaskPosition was set.
func (o OptMaskPosition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMaskPosition) Reset() {
	var v MaskPosition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMaskPosition) SetTo(v MaskPosition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMaskPosition) Get() (v MaskPosition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMaskPosition) Or(d MaskPosition) MaskPosition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMenuButton returns new OptMenuButton with value set to v.
func NewOptMenuButton(v MenuButton) OptMenuButton {
	return OptMenuButton{
		Value: v,
		Set:   true,
	}
}

// OptMenuButton is optional MenuButton.
type OptMenuButton struct {
	Value MenuButton
	Set   bool
}

// IsSet returns true if OptMenuButton was set.
func (o OptMenuButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMenuButton) Reset() {
	var v MenuButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMenuButton) SetTo(v MenuButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMenuButton) Get() (v MenuButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMenuButton) Or(d MenuButton) MenuButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessage returns new OptMessage with value set to v.
func NewOptMessage(v Message) OptMessage {
	return OptMessage{
		Value: v,
		Set:   true,
	}
}

// OptMessage is optional Message.
type OptMessage struct {
	Value Message
	Set   bool
}

// IsSet returns true if OptMessage was set.
func (o OptMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessage) Reset() {
	var v Message
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessage) SetTo(v Message) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessage) Get() (v Message, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessage) Or(d Message) Message {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageAutoDeleteTimerChanged returns new OptMessageAutoDeleteTimerChanged with value set to v.
func NewOptMessageAutoDeleteTimerChanged(v MessageAutoDeleteTimerChanged) OptMessageAutoDeleteTimerChanged {
	return OptMessageAutoDeleteTimerChanged{
		Value: v,
		Set:   true,
	}
}

// OptMessageAutoDeleteTimerChanged is optional MessageAutoDeleteTimerChanged.
type OptMessageAutoDeleteTimerChanged struct {
	Value MessageAutoDeleteTimerChanged
	Set   bool
}

// IsSet returns true if OptMessageAutoDeleteTimerChanged was set.
func (o OptMessageAutoDeleteTimerChanged) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageAutoDeleteTimerChanged) Reset() {
	var v MessageAutoDeleteTimerChanged
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageAutoDeleteTimerChanged) SetTo(v MessageAutoDeleteTimerChanged) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageAutoDeleteTimerChanged) Get() (v MessageAutoDeleteTimerChanged, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageAutoDeleteTimerChanged) Or(d MessageAutoDeleteTimerChanged) MessageAutoDeleteTimerChanged {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageId returns new OptMessageId with value set to v.
func NewOptMessageId(v MessageId) OptMessageId {
	return OptMessageId{
		Value: v,
		Set:   true,
	}
}

// OptMessageId is optional MessageId.
type OptMessageId struct {
	Value MessageId
	Set   bool
}

// IsSet returns true if OptMessageId was set.
func (o OptMessageId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageId) Reset() {
	var v MessageId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageId) SetTo(v MessageId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageId) Get() (v MessageId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageId) Or(d MessageId) MessageId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderInfo returns new OptOrderInfo with value set to v.
func NewOptOrderInfo(v OrderInfo) OptOrderInfo {
	return OptOrderInfo{
		Value: v,
		Set:   true,
	}
}

// OptOrderInfo is optional OrderInfo.
type OptOrderInfo struct {
	Value OrderInfo
	Set   bool
}

// IsSet returns true if OptOrderInfo was set.
func (o OptOrderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderInfo) Reset() {
	var v OrderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderInfo) SetTo(v OrderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderInfo) Get() (v OrderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderInfo) Or(d OrderInfo) OrderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPassportData returns new OptPassportData with value set to v.
func NewOptPassportData(v PassportData) OptPassportData {
	return OptPassportData{
		Value: v,
		Set:   true,
	}
}

// OptPassportData is optional PassportData.
type OptPassportData struct {
	Value PassportData
	Set   bool
}

// IsSet returns true if OptPassportData was set.
func (o OptPassportData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassportData) Reset() {
	var v PassportData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassportData) SetTo(v PassportData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassportData) Get() (v PassportData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPassportData) Or(d PassportData) PassportData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPassportFile returns new OptPassportFile with value set to v.
func NewOptPassportFile(v PassportFile) OptPassportFile {
	return OptPassportFile{
		Value: v,
		Set:   true,
	}
}

// OptPassportFile is optional PassportFile.
type OptPassportFile struct {
	Value PassportFile
	Set   bool
}

// IsSet returns true if OptPassportFile was set.
func (o OptPassportFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassportFile) Reset() {
	var v PassportFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassportFile) SetTo(v PassportFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassportFile) Get() (v PassportFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPassportFile) Or(d PassportFile) PassportFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhotoSize returns new OptPhotoSize with value set to v.
func NewOptPhotoSize(v PhotoSize) OptPhotoSize {
	return OptPhotoSize{
		Value: v,
		Set:   true,
	}
}

// OptPhotoSize is optional PhotoSize.
type OptPhotoSize struct {
	Value PhotoSize
	Set   bool
}

// IsSet returns true if OptPhotoSize was set.
func (o OptPhotoSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhotoSize) Reset() {
	var v PhotoSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhotoSize) SetTo(v PhotoSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhotoSize) Get() (v PhotoSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhotoSize) Or(d PhotoSize) PhotoSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoll returns new OptPoll with value set to v.
func NewOptPoll(v Poll) OptPoll {
	return OptPoll{
		Value: v,
		Set:   true,
	}
}

// OptPoll is optional Poll.
type OptPoll struct {
	Value Poll
	Set   bool
}

// IsSet returns true if OptPoll was set.
func (o OptPoll) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoll) Reset() {
	var v Poll
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoll) SetTo(v Poll) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoll) Get() (v Poll, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoll) Or(d Poll) Poll {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPollAnswer returns new OptPollAnswer with value set to v.
func NewOptPollAnswer(v PollAnswer) OptPollAnswer {
	return OptPollAnswer{
		Value: v,
		Set:   true,
	}
}

// OptPollAnswer is optional PollAnswer.
type OptPollAnswer struct {
	Value PollAnswer
	Set   bool
}

// IsSet returns true if OptPollAnswer was set.
func (o OptPollAnswer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPollAnswer) Reset() {
	var v PollAnswer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPollAnswer) SetTo(v PollAnswer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPollAnswer) Get() (v PollAnswer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPollAnswer) Or(d PollAnswer) PollAnswer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPreCheckoutQuery returns new OptPreCheckoutQuery with value set to v.
func NewOptPreCheckoutQuery(v PreCheckoutQuery) OptPreCheckoutQuery {
	return OptPreCheckoutQuery{
		Value: v,
		Set:   true,
	}
}

// OptPreCheckoutQuery is optional PreCheckoutQuery.
type OptPreCheckoutQuery struct {
	Value PreCheckoutQuery
	Set   bool
}

// IsSet returns true if OptPreCheckoutQuery was set.
func (o OptPreCheckoutQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPreCheckoutQuery) Reset() {
	var v PreCheckoutQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPreCheckoutQuery) SetTo(v PreCheckoutQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPreCheckoutQuery) Get() (v PreCheckoutQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPreCheckoutQuery) Or(d PreCheckoutQuery) PreCheckoutQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProximityAlertTriggered returns new OptProximityAlertTriggered with value set to v.
func NewOptProximityAlertTriggered(v ProximityAlertTriggered) OptProximityAlertTriggered {
	return OptProximityAlertTriggered{
		Value: v,
		Set:   true,
	}
}

// OptProximityAlertTriggered is optional ProximityAlertTriggered.
type OptProximityAlertTriggered struct {
	Value ProximityAlertTriggered
	Set   bool
}

// IsSet returns true if OptProximityAlertTriggered was set.
func (o OptProximityAlertTriggered) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProximityAlertTriggered) Reset() {
	var v ProximityAlertTriggered
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProximityAlertTriggered) SetTo(v ProximityAlertTriggered) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProximityAlertTriggered) Get() (v ProximityAlertTriggered, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProximityAlertTriggered) Or(d ProximityAlertTriggered) ProximityAlertTriggered {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponse returns new OptResponse with value set to v.
func NewOptResponse(v Response) OptResponse {
	return OptResponse{
		Value: v,
		Set:   true,
	}
}

// OptResponse is optional Response.
type OptResponse struct {
	Value Response
	Set   bool
}

// IsSet returns true if OptResponse was set.
func (o OptResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponse) Reset() {
	var v Response
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponse) SetTo(v Response) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponse) Get() (v Response, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponse) Or(d Response) Response {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResultMessageOrBooleanResult returns new OptResultMessageOrBooleanResult with value set to v.
func NewOptResultMessageOrBooleanResult(v ResultMessageOrBooleanResult) OptResultMessageOrBooleanResult {
	return OptResultMessageOrBooleanResult{
		Value: v,
		Set:   true,
	}
}

// OptResultMessageOrBooleanResult is optional ResultMessageOrBooleanResult.
type OptResultMessageOrBooleanResult struct {
	Value ResultMessageOrBooleanResult
	Set   bool
}

// IsSet returns true if OptResultMessageOrBooleanResult was set.
func (o OptResultMessageOrBooleanResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResultMessageOrBooleanResult) Reset() {
	var v ResultMessageOrBooleanResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResultMessageOrBooleanResult) SetTo(v ResultMessageOrBooleanResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResultMessageOrBooleanResult) Get() (v ResultMessageOrBooleanResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResultMessageOrBooleanResult) Or(d ResultMessageOrBooleanResult) ResultMessageOrBooleanResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendReplyMarkup returns new OptSendReplyMarkup with value set to v.
func NewOptSendReplyMarkup(v SendReplyMarkup) OptSendReplyMarkup {
	return OptSendReplyMarkup{
		Value: v,
		Set:   true,
	}
}

// OptSendReplyMarkup is optional SendReplyMarkup.
type OptSendReplyMarkup struct {
	Value SendReplyMarkup
	Set   bool
}

// IsSet returns true if OptSendReplyMarkup was set.
func (o OptSendReplyMarkup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendReplyMarkup) Reset() {
	var v SendReplyMarkup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendReplyMarkup) SetTo(v SendReplyMarkup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendReplyMarkup) Get() (v SendReplyMarkup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendReplyMarkup) Or(d SendReplyMarkup) SendReplyMarkup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetChatMenuButton returns new OptSetChatMenuButton with value set to v.
func NewOptSetChatMenuButton(v SetChatMenuButton) OptSetChatMenuButton {
	return OptSetChatMenuButton{
		Value: v,
		Set:   true,
	}
}

// OptSetChatMenuButton is optional SetChatMenuButton.
type OptSetChatMenuButton struct {
	Value SetChatMenuButton
	Set   bool
}

// IsSet returns true if OptSetChatMenuButton was set.
func (o OptSetChatMenuButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetChatMenuButton) Reset() {
	var v SetChatMenuButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetChatMenuButton) SetTo(v SetChatMenuButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetChatMenuButton) Get() (v SetChatMenuButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetChatMenuButton) Or(d SetChatMenuButton) SetChatMenuButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetMyDefaultAdministratorRights returns new OptSetMyDefaultAdministratorRights with value set to v.
func NewOptSetMyDefaultAdministratorRights(v SetMyDefaultAdministratorRights) OptSetMyDefaultAdministratorRights {
	return OptSetMyDefaultAdministratorRights{
		Value: v,
		Set:   true,
	}
}

// OptSetMyDefaultAdministratorRights is optional SetMyDefaultAdministratorRights.
type OptSetMyDefaultAdministratorRights struct {
	Value SetMyDefaultAdministratorRights
	Set   bool
}

// IsSet returns true if OptSetMyDefaultAdministratorRights was set.
func (o OptSetMyDefaultAdministratorRights) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetMyDefaultAdministratorRights) Reset() {
	var v SetMyDefaultAdministratorRights
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetMyDefaultAdministratorRights) SetTo(v SetMyDefaultAdministratorRights) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetMyDefaultAdministratorRights) Get() (v SetMyDefaultAdministratorRights, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetMyDefaultAdministratorRights) Or(d SetMyDefaultAdministratorRights) SetMyDefaultAdministratorRights {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShippingAddress returns new OptShippingAddress with value set to v.
func NewOptShippingAddress(v ShippingAddress) OptShippingAddress {
	return OptShippingAddress{
		Value: v,
		Set:   true,
	}
}

// OptShippingAddress is optional ShippingAddress.
type OptShippingAddress struct {
	Value ShippingAddress
	Set   bool
}

// IsSet returns true if OptShippingAddress was set.
func (o OptShippingAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShippingAddress) Reset() {
	var v ShippingAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShippingAddress) SetTo(v ShippingAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShippingAddress) Get() (v ShippingAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShippingAddress) Or(d ShippingAddress) ShippingAddress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShippingQuery returns new OptShippingQuery with value set to v.
func NewOptShippingQuery(v ShippingQuery) OptShippingQuery {
	return OptShippingQuery{
		Value: v,
		Set:   true,
	}
}

// OptShippingQuery is optional ShippingQuery.
type OptShippingQuery struct {
	Value ShippingQuery
	Set   bool
}

// IsSet returns true if OptShippingQuery was set.
func (o OptShippingQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShippingQuery) Reset() {
	var v ShippingQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShippingQuery) SetTo(v ShippingQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShippingQuery) Get() (v ShippingQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShippingQuery) Or(d ShippingQuery) ShippingQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSticker returns new OptSticker with value set to v.
func NewOptSticker(v Sticker) OptSticker {
	return OptSticker{
		Value: v,
		Set:   true,
	}
}

// OptSticker is optional Sticker.
type OptSticker struct {
	Value Sticker
	Set   bool
}

// IsSet returns true if OptSticker was set.
func (o OptSticker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSticker) Reset() {
	var v Sticker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSticker) SetTo(v Sticker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSticker) Get() (v Sticker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSticker) Or(d Sticker) Sticker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStickerSet returns new OptStickerSet with value set to v.
func NewOptStickerSet(v StickerSet) OptStickerSet {
	return OptStickerSet{
		Value: v,
		Set:   true,
	}
}

// OptStickerSet is optional StickerSet.
type OptStickerSet struct {
	Value StickerSet
	Set   bool
}

// IsSet returns true if OptStickerSet was set.
func (o OptStickerSet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStickerSet) Reset() {
	var v StickerSet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStickerSet) SetTo(v StickerSet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStickerSet) Get() (v StickerSet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStickerSet) Or(d StickerSet) StickerSet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSuccessfulPayment returns new OptSuccessfulPayment with value set to v.
func NewOptSuccessfulPayment(v SuccessfulPayment) OptSuccessfulPayment {
	return OptSuccessfulPayment{
		Value: v,
		Set:   true,
	}
}

// OptSuccessfulPayment is optional SuccessfulPayment.
type OptSuccessfulPayment struct {
	Value SuccessfulPayment
	Set   bool
}

// IsSet returns true if OptSuccessfulPayment was set.
func (o OptSuccessfulPayment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSuccessfulPayment) Reset() {
	var v SuccessfulPayment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSuccessfulPayment) SetTo(v SuccessfulPayment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSuccessfulPayment) Get() (v SuccessfulPayment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSuccessfulPayment) Or(d SuccessfulPayment) SuccessfulPayment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUser) Or(d User) User {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserProfilePhotos returns new OptUserProfilePhotos with value set to v.
func NewOptUserProfilePhotos(v UserProfilePhotos) OptUserProfilePhotos {
	return OptUserProfilePhotos{
		Value: v,
		Set:   true,
	}
}

// OptUserProfilePhotos is optional UserProfilePhotos.
type OptUserProfilePhotos struct {
	Value UserProfilePhotos
	Set   bool
}

// IsSet returns true if OptUserProfilePhotos was set.
func (o OptUserProfilePhotos) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserProfilePhotos) Reset() {
	var v UserProfilePhotos
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserProfilePhotos) SetTo(v UserProfilePhotos) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserProfilePhotos) Get() (v UserProfilePhotos, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserProfilePhotos) Or(d UserProfilePhotos) UserProfilePhotos {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVenue returns new OptVenue with value set to v.
func NewOptVenue(v Venue) OptVenue {
	return OptVenue{
		Value: v,
		Set:   true,
	}
}

// OptVenue is optional Venue.
type OptVenue struct {
	Value Venue
	Set   bool
}

// IsSet returns true if OptVenue was set.
func (o OptVenue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVenue) Reset() {
	var v Venue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVenue) SetTo(v Venue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVenue) Get() (v Venue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVenue) Or(d Venue) Venue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideo returns new OptVideo with value set to v.
func NewOptVideo(v Video) OptVideo {
	return OptVideo{
		Value: v,
		Set:   true,
	}
}

// OptVideo is optional Video.
type OptVideo struct {
	Value Video
	Set   bool
}

// IsSet returns true if OptVideo was set.
func (o OptVideo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideo) Reset() {
	var v Video
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideo) SetTo(v Video) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideo) Get() (v Video, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideo) Or(d Video) Video {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatEnded returns new OptVideoChatEnded with value set to v.
func NewOptVideoChatEnded(v VideoChatEnded) OptVideoChatEnded {
	return OptVideoChatEnded{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatEnded is optional VideoChatEnded.
type OptVideoChatEnded struct {
	Value VideoChatEnded
	Set   bool
}

// IsSet returns true if OptVideoChatEnded was set.
func (o OptVideoChatEnded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatEnded) Reset() {
	var v VideoChatEnded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatEnded) SetTo(v VideoChatEnded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatEnded) Get() (v VideoChatEnded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatEnded) Or(d VideoChatEnded) VideoChatEnded {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatParticipantsInvited returns new OptVideoChatParticipantsInvited with value set to v.
func NewOptVideoChatParticipantsInvited(v VideoChatParticipantsInvited) OptVideoChatParticipantsInvited {
	return OptVideoChatParticipantsInvited{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatParticipantsInvited is optional VideoChatParticipantsInvited.
type OptVideoChatParticipantsInvited struct {
	Value VideoChatParticipantsInvited
	Set   bool
}

// IsSet returns true if OptVideoChatParticipantsInvited was set.
func (o OptVideoChatParticipantsInvited) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatParticipantsInvited) Reset() {
	var v VideoChatParticipantsInvited
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatParticipantsInvited) SetTo(v VideoChatParticipantsInvited) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatParticipantsInvited) Get() (v VideoChatParticipantsInvited, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatParticipantsInvited) Or(d VideoChatParticipantsInvited) VideoChatParticipantsInvited {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatScheduled returns new OptVideoChatScheduled with value set to v.
func NewOptVideoChatScheduled(v VideoChatScheduled) OptVideoChatScheduled {
	return OptVideoChatScheduled{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatScheduled is optional VideoChatScheduled.
type OptVideoChatScheduled struct {
	Value VideoChatScheduled
	Set   bool
}

// IsSet returns true if OptVideoChatScheduled was set.
func (o OptVideoChatScheduled) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatScheduled) Reset() {
	var v VideoChatScheduled
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatScheduled) SetTo(v VideoChatScheduled) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatScheduled) Get() (v VideoChatScheduled, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatScheduled) Or(d VideoChatScheduled) VideoChatScheduled {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoNote returns new OptVideoNote with value set to v.
func NewOptVideoNote(v VideoNote) OptVideoNote {
	return OptVideoNote{
		Value: v,
		Set:   true,
	}
}

// OptVideoNote is optional VideoNote.
type OptVideoNote struct {
	Value VideoNote
	Set   bool
}

// IsSet returns true if OptVideoNote was set.
func (o OptVideoNote) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoNote) Reset() {
	var v VideoNote
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoNote) SetTo(v VideoNote) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoNote) Get() (v VideoNote, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoNote) Or(d VideoNote) VideoNote {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVoice returns new OptVoice with value set to v.
func NewOptVoice(v Voice) OptVoice {
	return OptVoice{
		Value: v,
		Set:   true,
	}
}

// OptVoice is optional Voice.
type OptVoice struct {
	Value Voice
	Set   bool
}

// IsSet returns true if OptVoice was set.
func (o OptVoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoice) Reset() {
	var v Voice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoice) SetTo(v Voice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoice) Get() (v Voice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVoice) Or(d Voice) Voice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebAppData returns new OptWebAppData with value set to v.
func NewOptWebAppData(v WebAppData) OptWebAppData {
	return OptWebAppData{
		Value: v,
		Set:   true,
	}
}

// OptWebAppData is optional WebAppData.
type OptWebAppData struct {
	Value WebAppData
	Set   bool
}

// IsSet returns true if OptWebAppData was set.
func (o OptWebAppData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebAppData) Reset() {
	var v WebAppData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebAppData) SetTo(v WebAppData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebAppData) Get() (v WebAppData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebAppData) Or(d WebAppData) WebAppData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebAppInfo returns new OptWebAppInfo with value set to v.
func NewOptWebAppInfo(v WebAppInfo) OptWebAppInfo {
	return OptWebAppInfo{
		Value: v,
		Set:   true,
	}
}

// OptWebAppInfo is optional WebAppInfo.
type OptWebAppInfo struct {
	Value WebAppInfo
	Set   bool
}

// IsSet returns true if OptWebAppInfo was set.
func (o OptWebAppInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebAppInfo) Reset() {
	var v WebAppInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebAppInfo) SetTo(v WebAppInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebAppInfo) Get() (v WebAppInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebAppInfo) Or(d WebAppInfo) WebAppInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookInfo returns new OptWebhookInfo with value set to v.
func NewOptWebhookInfo(v WebhookInfo) OptWebhookInfo {
	return OptWebhookInfo{
		Value: v,
		Set:   true,
	}
}

// OptWebhookInfo is optional WebhookInfo.
type OptWebhookInfo struct {
	Value WebhookInfo
	Set   bool
}

// IsSet returns true if OptWebhookInfo was set.
func (o OptWebhookInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookInfo) Reset() {
	var v WebhookInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookInfo) SetTo(v WebhookInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookInfo) Get() (v WebhookInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookInfo) Or(d WebhookInfo) WebhookInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// This object represents information about an order.
// Ref: #/components/schemas/OrderInfo
type OrderInfo struct {
	// User name.
	Name OptString `json:"name,omitempty"`
	// User's phone number.
	PhoneNumber OptString `json:"phone_number,omitempty"`
	// User email.
	Email           OptString          `json:"email,omitempty"`
	ShippingAddress OptShippingAddress `json:"shipping_address,omitempty"`
}

// GetName returns the value of Name.
func (s OrderInfo) GetName() OptString {
	return s.Name
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s OrderInfo) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetEmail returns the value of Email.
func (s OrderInfo) GetEmail() OptString {
	return s.Email
}

// GetShippingAddress returns the value of ShippingAddress.
func (s OrderInfo) GetShippingAddress() OptShippingAddress {
	return s.ShippingAddress
}

// SetName sets the value of Name.
func (s *OrderInfo) SetName(val OptString) {
	s.Name = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *OrderInfo) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetEmail sets the value of Email.
func (s *OrderInfo) SetEmail(val OptString) {
	s.Email = val
}

// SetShippingAddress sets the value of ShippingAddress.
func (s *OrderInfo) SetShippingAddress(val OptShippingAddress) {
	s.ShippingAddress = val
}

// Contains information about Telegram Passport data shared with the bot by the user.
// Ref: #/components/schemas/PassportData
type PassportData struct {
	// Array with information about documents and other Telegram Passport elements that was shared with
	// the bot.
	Data        []EncryptedPassportElement `json:"data"`
	Credentials EncryptedCredentials       `json:"credentials"`
}

// GetData returns the value of Data.
func (s PassportData) GetData() []EncryptedPassportElement {
	return s.Data
}

// GetCredentials returns the value of Credentials.
func (s PassportData) GetCredentials() EncryptedCredentials {
	return s.Credentials
}

// SetData sets the value of Data.
func (s *PassportData) SetData(val []EncryptedPassportElement) {
	s.Data = val
}

// SetCredentials sets the value of Credentials.
func (s *PassportData) SetCredentials(val EncryptedCredentials) {
	s.Credentials = val
}

// This object represents an error in the Telegram Passport element which was submitted that should
// be resolved by the user. :.
// Ref: #/components/schemas/PassportElementError
// PassportElementError represents sum type.
type PassportElementError struct {
	Type                                 PassportElementErrorType // switch on this field
	PassportElementErrorDataField        PassportElementErrorDataField
	PassportElementErrorFrontSide        PassportElementErrorFrontSide
	PassportElementErrorReverseSide      PassportElementErrorReverseSide
	PassportElementErrorSelfie           PassportElementErrorSelfie
	PassportElementErrorFile             PassportElementErrorFile
	PassportElementErrorFiles            PassportElementErrorFiles
	PassportElementErrorTranslationFile  PassportElementErrorTranslationFile
	PassportElementErrorTranslationFiles PassportElementErrorTranslationFiles
	PassportElementErrorUnspecified      PassportElementErrorUnspecified
}

// PassportElementErrorType is oneOf type of PassportElementError.
type PassportElementErrorType string

// Possible values for PassportElementErrorType.
const (
	PassportElementErrorDataFieldPassportElementError        PassportElementErrorType = "PassportElementErrorDataField"
	PassportElementErrorFrontSidePassportElementError        PassportElementErrorType = "PassportElementErrorFrontSide"
	PassportElementErrorReverseSidePassportElementError      PassportElementErrorType = "PassportElementErrorReverseSide"
	PassportElementErrorSelfiePassportElementError           PassportElementErrorType = "PassportElementErrorSelfie"
	PassportElementErrorFilePassportElementError             PassportElementErrorType = "PassportElementErrorFile"
	PassportElementErrorFilesPassportElementError            PassportElementErrorType = "PassportElementErrorFiles"
	PassportElementErrorTranslationFilePassportElementError  PassportElementErrorType = "PassportElementErrorTranslationFile"
	PassportElementErrorTranslationFilesPassportElementError PassportElementErrorType = "PassportElementErrorTranslationFiles"
	PassportElementErrorUnspecifiedPassportElementError      PassportElementErrorType = "PassportElementErrorUnspecified"
)

// IsPassportElementErrorDataField reports whether PassportElementError is PassportElementErrorDataField.
func (s PassportElementError) IsPassportElementErrorDataField() bool {
	return s.Type == PassportElementErrorDataFieldPassportElementError
}

// IsPassportElementErrorFrontSide reports whether PassportElementError is PassportElementErrorFrontSide.
func (s PassportElementError) IsPassportElementErrorFrontSide() bool {
	return s.Type == PassportElementErrorFrontSidePassportElementError
}

// IsPassportElementErrorReverseSide reports whether PassportElementError is PassportElementErrorReverseSide.
func (s PassportElementError) IsPassportElementErrorReverseSide() bool {
	return s.Type == PassportElementErrorReverseSidePassportElementError
}

// IsPassportElementErrorSelfie reports whether PassportElementError is PassportElementErrorSelfie.
func (s PassportElementError) IsPassportElementErrorSelfie() bool {
	return s.Type == PassportElementErrorSelfiePassportElementError
}

// IsPassportElementErrorFile reports whether PassportElementError is PassportElementErrorFile.
func (s PassportElementError) IsPassportElementErrorFile() bool {
	return s.Type == PassportElementErrorFilePassportElementError
}

// IsPassportElementErrorFiles reports whether PassportElementError is PassportElementErrorFiles.
func (s PassportElementError) IsPassportElementErrorFiles() bool {
	return s.Type == PassportElementErrorFilesPassportElementError
}

// IsPassportElementErrorTranslationFile reports whether PassportElementError is PassportElementErrorTranslationFile.
func (s PassportElementError) IsPassportElementErrorTranslationFile() bool {
	return s.Type == PassportElementErrorTranslationFilePassportElementError
}

// IsPassportElementErrorTranslationFiles reports whether PassportElementError is PassportElementErrorTranslationFiles.
func (s PassportElementError) IsPassportElementErrorTranslationFiles() bool {
	return s.Type == PassportElementErrorTranslationFilesPassportElementError
}

// IsPassportElementErrorUnspecified reports whether PassportElementError is PassportElementErrorUnspecified.
func (s PassportElementError) IsPassportElementErrorUnspecified() bool {
	return s.Type == PassportElementErrorUnspecifiedPassportElementError
}

// SetPassportElementErrorDataField sets PassportElementError to PassportElementErrorDataField.
func (s *PassportElementError) SetPassportElementErrorDataField(v PassportElementErrorDataField) {
	s.Type = PassportElementErrorDataFieldPassportElementError
	s.PassportElementErrorDataField = v
}

// GetPassportElementErrorDataField returns PassportElementErrorDataField and true boolean if PassportElementError is PassportElementErrorDataField.
func (s PassportElementError) GetPassportElementErrorDataField() (v PassportElementErrorDataField, ok bool) {
	if !s.IsPassportElementErrorDataField() {
		return v, false
	}
	return s.PassportElementErrorDataField, true
}

// NewPassportElementErrorDataFieldPassportElementError returns new PassportElementError from PassportElementErrorDataField.
func NewPassportElementErrorDataFieldPassportElementError(v PassportElementErrorDataField) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorDataField(v)
	return s
}

// SetPassportElementErrorFrontSide sets PassportElementError to PassportElementErrorFrontSide.
func (s *PassportElementError) SetPassportElementErrorFrontSide(v PassportElementErrorFrontSide) {
	s.Type = PassportElementErrorFrontSidePassportElementError
	s.PassportElementErrorFrontSide = v
}

// GetPassportElementErrorFrontSide returns PassportElementErrorFrontSide and true boolean if PassportElementError is PassportElementErrorFrontSide.
func (s PassportElementError) GetPassportElementErrorFrontSide() (v PassportElementErrorFrontSide, ok bool) {
	if !s.IsPassportElementErrorFrontSide() {
		return v, false
	}
	return s.PassportElementErrorFrontSide, true
}

// NewPassportElementErrorFrontSidePassportElementError returns new PassportElementError from PassportElementErrorFrontSide.
func NewPassportElementErrorFrontSidePassportElementError(v PassportElementErrorFrontSide) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFrontSide(v)
	return s
}

// SetPassportElementErrorReverseSide sets PassportElementError to PassportElementErrorReverseSide.
func (s *PassportElementError) SetPassportElementErrorReverseSide(v PassportElementErrorReverseSide) {
	s.Type = PassportElementErrorReverseSidePassportElementError
	s.PassportElementErrorReverseSide = v
}

// GetPassportElementErrorReverseSide returns PassportElementErrorReverseSide and true boolean if PassportElementError is PassportElementErrorReverseSide.
func (s PassportElementError) GetPassportElementErrorReverseSide() (v PassportElementErrorReverseSide, ok bool) {
	if !s.IsPassportElementErrorReverseSide() {
		return v, false
	}
	return s.PassportElementErrorReverseSide, true
}

// NewPassportElementErrorReverseSidePassportElementError returns new PassportElementError from PassportElementErrorReverseSide.
func NewPassportElementErrorReverseSidePassportElementError(v PassportElementErrorReverseSide) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorReverseSide(v)
	return s
}

// SetPassportElementErrorSelfie sets PassportElementError to PassportElementErrorSelfie.
func (s *PassportElementError) SetPassportElementErrorSelfie(v PassportElementErrorSelfie) {
	s.Type = PassportElementErrorSelfiePassportElementError
	s.PassportElementErrorSelfie = v
}

// GetPassportElementErrorSelfie returns PassportElementErrorSelfie and true boolean if PassportElementError is PassportElementErrorSelfie.
func (s PassportElementError) GetPassportElementErrorSelfie() (v PassportElementErrorSelfie, ok bool) {
	if !s.IsPassportElementErrorSelfie() {
		return v, false
	}
	return s.PassportElementErrorSelfie, true
}

// NewPassportElementErrorSelfiePassportElementError returns new PassportElementError from PassportElementErrorSelfie.
func NewPassportElementErrorSelfiePassportElementError(v PassportElementErrorSelfie) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorSelfie(v)
	return s
}

// SetPassportElementErrorFile sets PassportElementError to PassportElementErrorFile.
func (s *PassportElementError) SetPassportElementErrorFile(v PassportElementErrorFile) {
	s.Type = PassportElementErrorFilePassportElementError
	s.PassportElementErrorFile = v
}

// GetPassportElementErrorFile returns PassportElementErrorFile and true boolean if PassportElementError is PassportElementErrorFile.
func (s PassportElementError) GetPassportElementErrorFile() (v PassportElementErrorFile, ok bool) {
	if !s.IsPassportElementErrorFile() {
		return v, false
	}
	return s.PassportElementErrorFile, true
}

// NewPassportElementErrorFilePassportElementError returns new PassportElementError from PassportElementErrorFile.
func NewPassportElementErrorFilePassportElementError(v PassportElementErrorFile) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFile(v)
	return s
}

// SetPassportElementErrorFiles sets PassportElementError to PassportElementErrorFiles.
func (s *PassportElementError) SetPassportElementErrorFiles(v PassportElementErrorFiles) {
	s.Type = PassportElementErrorFilesPassportElementError
	s.PassportElementErrorFiles = v
}

// GetPassportElementErrorFiles returns PassportElementErrorFiles and true boolean if PassportElementError is PassportElementErrorFiles.
func (s PassportElementError) GetPassportElementErrorFiles() (v PassportElementErrorFiles, ok bool) {
	if !s.IsPassportElementErrorFiles() {
		return v, false
	}
	return s.PassportElementErrorFiles, true
}

// NewPassportElementErrorFilesPassportElementError returns new PassportElementError from PassportElementErrorFiles.
func NewPassportElementErrorFilesPassportElementError(v PassportElementErrorFiles) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFiles(v)
	return s
}

// SetPassportElementErrorTranslationFile sets PassportElementError to PassportElementErrorTranslationFile.
func (s *PassportElementError) SetPassportElementErrorTranslationFile(v PassportElementErrorTranslationFile) {
	s.Type = PassportElementErrorTranslationFilePassportElementError
	s.PassportElementErrorTranslationFile = v
}

// GetPassportElementErrorTranslationFile returns PassportElementErrorTranslationFile and true boolean if PassportElementError is PassportElementErrorTranslationFile.
func (s PassportElementError) GetPassportElementErrorTranslationFile() (v PassportElementErrorTranslationFile, ok bool) {
	if !s.IsPassportElementErrorTranslationFile() {
		return v, false
	}
	return s.PassportElementErrorTranslationFile, true
}

// NewPassportElementErrorTranslationFilePassportElementError returns new PassportElementError from PassportElementErrorTranslationFile.
func NewPassportElementErrorTranslationFilePassportElementError(v PassportElementErrorTranslationFile) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorTranslationFile(v)
	return s
}

// SetPassportElementErrorTranslationFiles sets PassportElementError to PassportElementErrorTranslationFiles.
func (s *PassportElementError) SetPassportElementErrorTranslationFiles(v PassportElementErrorTranslationFiles) {
	s.Type = PassportElementErrorTranslationFilesPassportElementError
	s.PassportElementErrorTranslationFiles = v
}

// GetPassportElementErrorTranslationFiles returns PassportElementErrorTranslationFiles and true boolean if PassportElementError is PassportElementErrorTranslationFiles.
func (s PassportElementError) GetPassportElementErrorTranslationFiles() (v PassportElementErrorTranslationFiles, ok bool) {
	if !s.IsPassportElementErrorTranslationFiles() {
		return v, false
	}
	return s.PassportElementErrorTranslationFiles, true
}

// NewPassportElementErrorTranslationFilesPassportElementError returns new PassportElementError from PassportElementErrorTranslationFiles.
func NewPassportElementErrorTranslationFilesPassportElementError(v PassportElementErrorTranslationFiles) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorTranslationFiles(v)
	return s
}

// SetPassportElementErrorUnspecified sets PassportElementError to PassportElementErrorUnspecified.
func (s *PassportElementError) SetPassportElementErrorUnspecified(v PassportElementErrorUnspecified) {
	s.Type = PassportElementErrorUnspecifiedPassportElementError
	s.PassportElementErrorUnspecified = v
}

// GetPassportElementErrorUnspecified returns PassportElementErrorUnspecified and true boolean if PassportElementError is PassportElementErrorUnspecified.
func (s PassportElementError) GetPassportElementErrorUnspecified() (v PassportElementErrorUnspecified, ok bool) {
	if !s.IsPassportElementErrorUnspecified() {
		return v, false
	}
	return s.PassportElementErrorUnspecified, true
}

// NewPassportElementErrorUnspecifiedPassportElementError returns new PassportElementError from PassportElementErrorUnspecified.
func NewPassportElementErrorUnspecifiedPassportElementError(v PassportElementErrorUnspecified) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorUnspecified(v)
	return s
}

// Represents an issue in one of the data fields that was provided by the user. The error is
// considered resolved when the field's value changes.
// Ref: #/components/schemas/PassportElementErrorDataField
type PassportElementErrorDataField struct {
	// Error source, must be data.
	Source string `json:"source"`
	// Name of the data field which has the error.
	FieldName string `json:"field_name"`
	// Base64-encoded data hash.
	DataHash string `json:"data_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorDataField) GetSource() string {
	return s.Source
}

// GetFieldName returns the value of FieldName.
func (s PassportElementErrorDataField) GetFieldName() string {
	return s.FieldName
}

// GetDataHash returns the value of DataHash.
func (s PassportElementErrorDataField) GetDataHash() string {
	return s.DataHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorDataField) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorDataField) SetSource(val string) {
	s.Source = val
}

// SetFieldName sets the value of FieldName.
func (s *PassportElementErrorDataField) SetFieldName(val string) {
	s.FieldName = val
}

// SetDataHash sets the value of DataHash.
func (s *PassportElementErrorDataField) SetDataHash(val string) {
	s.DataHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorDataField) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the error, one of "personal_details",
// "passport", "driver_license", "identity_card", "internal_passport", "address".
type PassportElementErrorDataFieldType string

const (
	PassportElementErrorDataFieldTypePersonalDetails  PassportElementErrorDataFieldType = "personal_details"
	PassportElementErrorDataFieldTypePassport         PassportElementErrorDataFieldType = "passport"
	PassportElementErrorDataFieldTypeDriverLicense    PassportElementErrorDataFieldType = "driver_license"
	PassportElementErrorDataFieldTypeIdentityCard     PassportElementErrorDataFieldType = "identity_card"
	PassportElementErrorDataFieldTypeInternalPassport PassportElementErrorDataFieldType = "internal_passport"
	PassportElementErrorDataFieldTypeAddress          PassportElementErrorDataFieldType = "address"
)

// Represents an issue with a document scan. The error is considered resolved when the file with the
// document scan changes.
// Ref: #/components/schemas/PassportElementErrorFile
type PassportElementErrorFile struct {
	// Error source, must be file.
	Source string `json:"source"`
	// Base64-encoded file hash.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorFile) GetSource() string {
	return s.Source
}

// GetFileHash returns the value of FileHash.
func (s PassportElementErrorFile) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorFile) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorFile) SetSource(val string) {
	s.Source = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorFile) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorFile) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of "utility_bill",
// "bank_statement", "rental_agreement", "passport_registration", "temporary_registration".
type PassportElementErrorFileType string

const (
	PassportElementErrorFileTypeUtilityBill           PassportElementErrorFileType = "utility_bill"
	PassportElementErrorFileTypeBankStatement         PassportElementErrorFileType = "bank_statement"
	PassportElementErrorFileTypeRentalAgreement       PassportElementErrorFileType = "rental_agreement"
	PassportElementErrorFileTypePassportRegistration  PassportElementErrorFileType = "passport_registration"
	PassportElementErrorFileTypeTemporaryRegistration PassportElementErrorFileType = "temporary_registration"
)

// Represents an issue with a list of scans. The error is considered resolved when the list of files
// containing the scans changes.
// Ref: #/components/schemas/PassportElementErrorFiles
type PassportElementErrorFiles struct {
	// Error source, must be files.
	Source string `json:"source"`
	// List of base64-encoded file hashes.
	FileHashes []string `json:"file_hashes"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorFiles) GetSource() string {
	return s.Source
}

// GetFileHashes returns the value of FileHashes.
func (s PassportElementErrorFiles) GetFileHashes() []string {
	return s.FileHashes
}

// GetMessage returns the value of Message.
func (s PassportElementErrorFiles) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorFiles) SetSource(val string) {
	s.Source = val
}

// SetFileHashes sets the value of FileHashes.
func (s *PassportElementErrorFiles) SetFileHashes(val []string) {
	s.FileHashes = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorFiles) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of "utility_bill",
// "bank_statement", "rental_agreement", "passport_registration", "temporary_registration".
type PassportElementErrorFilesType string

const (
	PassportElementErrorFilesTypeUtilityBill           PassportElementErrorFilesType = "utility_bill"
	PassportElementErrorFilesTypeBankStatement         PassportElementErrorFilesType = "bank_statement"
	PassportElementErrorFilesTypeRentalAgreement       PassportElementErrorFilesType = "rental_agreement"
	PassportElementErrorFilesTypePassportRegistration  PassportElementErrorFilesType = "passport_registration"
	PassportElementErrorFilesTypeTemporaryRegistration PassportElementErrorFilesType = "temporary_registration"
)

// Represents an issue with the front side of a document. The error is considered resolved when the
// file with the front side of the document changes.
// Ref: #/components/schemas/PassportElementErrorFrontSide
type PassportElementErrorFrontSide struct {
	// Error source, must be front_side.
	Source string `json:"source"`
	// Base64-encoded hash of the file with the front side of the document.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorFrontSide) GetSource() string {
	return s.Source
}

// GetFileHash returns the value of FileHash.
func (s PassportElementErrorFrontSide) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorFrontSide) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorFrontSide) SetSource(val string) {
	s.Source = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorFrontSide) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorFrontSide) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of "passport",
// "driver_license", "identity_card", "internal_passport".
type PassportElementErrorFrontSideType string

const (
	PassportElementErrorFrontSideTypePassport         PassportElementErrorFrontSideType = "passport"
	PassportElementErrorFrontSideTypeDriverLicense    PassportElementErrorFrontSideType = "driver_license"
	PassportElementErrorFrontSideTypeIdentityCard     PassportElementErrorFrontSideType = "identity_card"
	PassportElementErrorFrontSideTypeInternalPassport PassportElementErrorFrontSideType = "internal_passport"
)

// Represents an issue with the reverse side of a document. The error is considered resolved when the
// file with reverse side of the document changes.
// Ref: #/components/schemas/PassportElementErrorReverseSide
type PassportElementErrorReverseSide struct {
	// Error source, must be reverse_side.
	Source string `json:"source"`
	// Base64-encoded hash of the file with the reverse side of the document.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorReverseSide) GetSource() string {
	return s.Source
}

// GetFileHash returns the value of FileHash.
func (s PassportElementErrorReverseSide) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorReverseSide) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorReverseSide) SetSource(val string) {
	s.Source = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorReverseSide) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorReverseSide) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of "driver_license",
// "identity_card".
type PassportElementErrorReverseSideType string

const (
	PassportElementErrorReverseSideTypeDriverLicense PassportElementErrorReverseSideType = "driver_license"
	PassportElementErrorReverseSideTypeIdentityCard  PassportElementErrorReverseSideType = "identity_card"
)

// Represents an issue with the selfie with a document. The error is considered resolved when the
// file with the selfie changes.
// Ref: #/components/schemas/PassportElementErrorSelfie
type PassportElementErrorSelfie struct {
	// Error source, must be selfie.
	Source string `json:"source"`
	// Base64-encoded hash of the file with the selfie.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorSelfie) GetSource() string {
	return s.Source
}

// GetFileHash returns the value of FileHash.
func (s PassportElementErrorSelfie) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorSelfie) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorSelfie) SetSource(val string) {
	s.Source = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorSelfie) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorSelfie) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of "passport",
// "driver_license", "identity_card", "internal_passport".
type PassportElementErrorSelfieType string

const (
	PassportElementErrorSelfieTypePassport         PassportElementErrorSelfieType = "passport"
	PassportElementErrorSelfieTypeDriverLicense    PassportElementErrorSelfieType = "driver_license"
	PassportElementErrorSelfieTypeIdentityCard     PassportElementErrorSelfieType = "identity_card"
	PassportElementErrorSelfieTypeInternalPassport PassportElementErrorSelfieType = "internal_passport"
)

// Represents an issue with one of the files that constitute the translation of a document. The error
// is considered resolved when the file changes.
// Ref: #/components/schemas/PassportElementErrorTranslationFile
type PassportElementErrorTranslationFile struct {
	// Error source, must be translation_file.
	Source string `json:"source"`
	// Base64-encoded file hash.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorTranslationFile) GetSource() string {
	return s.Source
}

// GetFileHash returns the value of FileHash.
func (s PassportElementErrorTranslationFile) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorTranslationFile) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorTranslationFile) SetSource(val string) {
	s.Source = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorTranslationFile) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorTranslationFile) SetMessage(val string) {
	s.Message = val
}

// Type of element of the user's Telegram Passport which has the issue, one of "passport",
// "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement",
// "rental_agreement", "passport_registration", "temporary_registration".
type PassportElementErrorTranslationFileType string

const (
	PassportElementErrorTranslationFileTypePassport              PassportElementErrorTranslationFileType = "passport"
	PassportElementErrorTranslationFileTypeDriverLicense         PassportElementErrorTranslationFileType = "driver_license"
	PassportElementErrorTranslationFileTypeIdentityCard          PassportElementErrorTranslationFileType = "identity_card"
	PassportElementErrorTranslationFileTypeInternalPassport      PassportElementErrorTranslationFileType = "internal_passport"
	PassportElementErrorTranslationFileTypeUtilityBill           PassportElementErrorTranslationFileType = "utility_bill"
	PassportElementErrorTranslationFileTypeBankStatement         PassportElementErrorTranslationFileType = "bank_statement"
	PassportElementErrorTranslationFileTypeRentalAgreement       PassportElementErrorTranslationFileType = "rental_agreement"
	PassportElementErrorTranslationFileTypePassportRegistration  PassportElementErrorTranslationFileType = "passport_registration"
	PassportElementErrorTranslationFileTypeTemporaryRegistration PassportElementErrorTranslationFileType = "temporary_registration"
)

// Represents an issue with the translated version of a document. The error is considered resolved
// when a file with the document translation change.
// Ref: #/components/schemas/PassportElementErrorTranslationFiles
type PassportElementErrorTranslationFiles struct {
	// Error source, must be translation_files.
	Source string `json:"source"`
	// List of base64-encoded file hashes.
	FileHashes []string `json:"file_hashes"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorTranslationFiles) GetSource() string {
	return s.Source
}

// GetFileHashes returns the value of FileHashes.
func (s PassportElementErrorTranslationFiles) GetFileHashes() []string {
	return s.FileHashes
}

// GetMessage returns the value of Message.
func (s PassportElementErrorTranslationFiles) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorTranslationFiles) SetSource(val string) {
	s.Source = val
}

// SetFileHashes sets the value of FileHashes.
func (s *PassportElementErrorTranslationFiles) SetFileHashes(val []string) {
	s.FileHashes = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorTranslationFiles) SetMessage(val string) {
	s.Message = val
}

// Type of element of the user's Telegram Passport which has the issue, one of "passport",
// "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement",
// "rental_agreement", "passport_registration", "temporary_registration".
type PassportElementErrorTranslationFilesType string

const (
	PassportElementErrorTranslationFilesTypePassport              PassportElementErrorTranslationFilesType = "passport"
	PassportElementErrorTranslationFilesTypeDriverLicense         PassportElementErrorTranslationFilesType = "driver_license"
	PassportElementErrorTranslationFilesTypeIdentityCard          PassportElementErrorTranslationFilesType = "identity_card"
	PassportElementErrorTranslationFilesTypeInternalPassport      PassportElementErrorTranslationFilesType = "internal_passport"
	PassportElementErrorTranslationFilesTypeUtilityBill           PassportElementErrorTranslationFilesType = "utility_bill"
	PassportElementErrorTranslationFilesTypeBankStatement         PassportElementErrorTranslationFilesType = "bank_statement"
	PassportElementErrorTranslationFilesTypeRentalAgreement       PassportElementErrorTranslationFilesType = "rental_agreement"
	PassportElementErrorTranslationFilesTypePassportRegistration  PassportElementErrorTranslationFilesType = "passport_registration"
	PassportElementErrorTranslationFilesTypeTemporaryRegistration PassportElementErrorTranslationFilesType = "temporary_registration"
)

// Represents an issue in an unspecified place. The error is considered resolved when new data is
// added.
// Ref: #/components/schemas/PassportElementErrorUnspecified
type PassportElementErrorUnspecified struct {
	// Error source, must be unspecified.
	Source string `json:"source"`
	// Base64-encoded element hash.
	ElementHash string `json:"element_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s PassportElementErrorUnspecified) GetSource() string {
	return s.Source
}

// GetElementHash returns the value of ElementHash.
func (s PassportElementErrorUnspecified) GetElementHash() string {
	return s.ElementHash
}

// GetMessage returns the value of Message.
func (s PassportElementErrorUnspecified) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorUnspecified) SetSource(val string) {
	s.Source = val
}

// SetElementHash sets the value of ElementHash.
func (s *PassportElementErrorUnspecified) SetElementHash(val string) {
	s.ElementHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorUnspecified) SetMessage(val string) {
	s.Message = val
}

// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files
// are in JPEG format when decrypted and don't exceed 10MB.
// Ref: #/components/schemas/PassportFile
type PassportFile struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// File size in bytes.
	FileSize int `json:"file_size"`
	// Unix time when the file was uploaded.
	FileDate int `json:"file_date"`
}

// GetFileID returns the value of FileID.
func (s PassportFile) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s PassportFile) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetFileSize returns the value of FileSize.
func (s PassportFile) GetFileSize() int {
	return s.FileSize
}

// GetFileDate returns the value of FileDate.
func (s PassportFile) GetFileDate() int {
	return s.FileDate
}

// SetFileID sets the value of FileID.
func (s *PassportFile) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *PassportFile) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetFileSize sets the value of FileSize.
func (s *PassportFile) SetFileSize(val int) {
	s.FileSize = val
}

// SetFileDate sets the value of FileDate.
func (s *PassportFile) SetFileDate(val int) {
	s.FileDate = val
}

// This object represents one size of a photo or a file / sticker thumbnail.
// Ref: #/components/schemas/PhotoSize
type PhotoSize struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Photo width.
	Width int `json:"width"`
	// Photo height.
	Height int `json:"height"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s PhotoSize) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s PhotoSize) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s PhotoSize) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s PhotoSize) GetHeight() int {
	return s.Height
}

// GetFileSize returns the value of FileSize.
func (s PhotoSize) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *PhotoSize) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *PhotoSize) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *PhotoSize) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *PhotoSize) SetHeight(val int) {
	s.Height = val
}

// SetFileSize sets the value of FileSize.
func (s *PhotoSize) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Input for pinChatMessage.
// Ref: #/components/schemas/pinChatMessage
type PinChatMessage struct {
	ChatID ID `json:"chat_id"`
	// Identifier of a message to pin.
	MessageID int `json:"message_id"`
	// Pass True, if it is not necessary to send a notification to all chat members about the new pinned
	// message. Notifications are always disabled in channels and private chats.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s PinChatMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s PinChatMessage) GetMessageID() int {
	return s.MessageID
}

// GetDisableNotification returns the value of DisableNotification.
func (s PinChatMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// SetChatID sets the value of ChatID.
func (s *PinChatMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *PinChatMessage) SetMessageID(val int) {
	s.MessageID = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *PinChatMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// This object contains information about a poll.
// Ref: #/components/schemas/Poll
type Poll struct {
	// Unique poll identifier.
	ID string `json:"id"`
	// Poll question, 1-300 characters.
	Question string `json:"question"`
	// List of poll options.
	Options []PollOption `json:"options"`
	// Total number of users that voted in the poll.
	TotalVoterCount int `json:"total_voter_count"`
	// True, if the poll is closed.
	IsClosed bool `json:"is_closed"`
	// True, if the poll is anonymous.
	IsAnonymous bool `json:"is_anonymous"`
	// Poll type, currently can be "regular" or "quiz".
	Type PollType `json:"type"`
	// True, if the poll allows multiple answers.
	AllowsMultipleAnswers bool `json:"allows_multiple_answers"`
	// 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which
	// are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
	CorrectOptionID OptInt `json:"correct_option_id,omitempty"`
	// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
	// quiz-style poll, 0-200 characters.
	Explanation OptString `json:"explanation,omitempty"`
	// Special entities like usernames, URLs, bot commands, etc. that appear in the explanation.
	ExplanationEntities []MessageEntity `json:"explanation_entities,omitempty"`
	// Amount of time in seconds the poll will be active after creation.
	OpenPeriod OptInt `json:"open_period,omitempty"`
	// Point in time (Unix timestamp) when the poll will be automatically closed.
	CloseDate OptInt `json:"close_date,omitempty"`
}

// GetID returns the value of ID.
func (s Poll) GetID() string {
	return s.ID
}

// GetQuestion returns the value of Question.
func (s Poll) GetQuestion() string {
	return s.Question
}

// GetOptions returns the value of Options.
func (s Poll) GetOptions() []PollOption {
	return s.Options
}

// GetTotalVoterCount returns the value of TotalVoterCount.
func (s Poll) GetTotalVoterCount() int {
	return s.TotalVoterCount
}

// GetIsClosed returns the value of IsClosed.
func (s Poll) GetIsClosed() bool {
	return s.IsClosed
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s Poll) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetType returns the value of Type.
func (s Poll) GetType() PollType {
	return s.Type
}

// GetAllowsMultipleAnswers returns the value of AllowsMultipleAnswers.
func (s Poll) GetAllowsMultipleAnswers() bool {
	return s.AllowsMultipleAnswers
}

// GetCorrectOptionID returns the value of CorrectOptionID.
func (s Poll) GetCorrectOptionID() OptInt {
	return s.CorrectOptionID
}

// GetExplanation returns the value of Explanation.
func (s Poll) GetExplanation() OptString {
	return s.Explanation
}

// GetExplanationEntities returns the value of ExplanationEntities.
func (s Poll) GetExplanationEntities() []MessageEntity {
	return s.ExplanationEntities
}

// GetOpenPeriod returns the value of OpenPeriod.
func (s Poll) GetOpenPeriod() OptInt {
	return s.OpenPeriod
}

// GetCloseDate returns the value of CloseDate.
func (s Poll) GetCloseDate() OptInt {
	return s.CloseDate
}

// SetID sets the value of ID.
func (s *Poll) SetID(val string) {
	s.ID = val
}

// SetQuestion sets the value of Question.
func (s *Poll) SetQuestion(val string) {
	s.Question = val
}

// SetOptions sets the value of Options.
func (s *Poll) SetOptions(val []PollOption) {
	s.Options = val
}

// SetTotalVoterCount sets the value of TotalVoterCount.
func (s *Poll) SetTotalVoterCount(val int) {
	s.TotalVoterCount = val
}

// SetIsClosed sets the value of IsClosed.
func (s *Poll) SetIsClosed(val bool) {
	s.IsClosed = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *Poll) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetType sets the value of Type.
func (s *Poll) SetType(val PollType) {
	s.Type = val
}

// SetAllowsMultipleAnswers sets the value of AllowsMultipleAnswers.
func (s *Poll) SetAllowsMultipleAnswers(val bool) {
	s.AllowsMultipleAnswers = val
}

// SetCorrectOptionID sets the value of CorrectOptionID.
func (s *Poll) SetCorrectOptionID(val OptInt) {
	s.CorrectOptionID = val
}

// SetExplanation sets the value of Explanation.
func (s *Poll) SetExplanation(val OptString) {
	s.Explanation = val
}

// SetExplanationEntities sets the value of ExplanationEntities.
func (s *Poll) SetExplanationEntities(val []MessageEntity) {
	s.ExplanationEntities = val
}

// SetOpenPeriod sets the value of OpenPeriod.
func (s *Poll) SetOpenPeriod(val OptInt) {
	s.OpenPeriod = val
}

// SetCloseDate sets the value of CloseDate.
func (s *Poll) SetCloseDate(val OptInt) {
	s.CloseDate = val
}

// This object represents an answer of a user in a non-anonymous poll.
// Ref: #/components/schemas/PollAnswer
type PollAnswer struct {
	// Unique poll identifier.
	PollID string `json:"poll_id"`
	User   User   `json:"user"`
	// 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted
	// their vote.
	OptionIds []int `json:"option_ids"`
}

// GetPollID returns the value of PollID.
func (s PollAnswer) GetPollID() string {
	return s.PollID
}

// GetUser returns the value of User.
func (s PollAnswer) GetUser() User {
	return s.User
}

// GetOptionIds returns the value of OptionIds.
func (s PollAnswer) GetOptionIds() []int {
	return s.OptionIds
}

// SetPollID sets the value of PollID.
func (s *PollAnswer) SetPollID(val string) {
	s.PollID = val
}

// SetUser sets the value of User.
func (s *PollAnswer) SetUser(val User) {
	s.User = val
}

// SetOptionIds sets the value of OptionIds.
func (s *PollAnswer) SetOptionIds(val []int) {
	s.OptionIds = val
}

// This object contains information about one answer option in a poll.
// Ref: #/components/schemas/PollOption
type PollOption struct {
	// Option text, 1-100 characters.
	Text string `json:"text"`
	// Number of users that voted for this option.
	VoterCount int `json:"voter_count"`
}

// GetText returns the value of Text.
func (s PollOption) GetText() string {
	return s.Text
}

// GetVoterCount returns the value of VoterCount.
func (s PollOption) GetVoterCount() int {
	return s.VoterCount
}

// SetText sets the value of Text.
func (s *PollOption) SetText(val string) {
	s.Text = val
}

// SetVoterCount sets the value of VoterCount.
func (s *PollOption) SetVoterCount(val int) {
	s.VoterCount = val
}

// Poll type, currently can be "regular" or "quiz".
type PollType string

const (
	PollTypeRegular PollType = "regular"
	PollTypeQuiz    PollType = "quiz"
)

// This object contains information about an incoming pre-checkout query.
// Ref: #/components/schemas/PreCheckoutQuery
type PreCheckoutQuery struct {
	// Unique query identifier.
	ID   string `json:"id"`
	From User   `json:"from"`
	// Three-letter ISO 4217 currency code.
	Currency string `json:"currency"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a
	// price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number
	// of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
	// Bot specified invoice payload.
	InvoicePayload string `json:"invoice_payload"`
	// Identifier of the shipping option chosen by the user.
	ShippingOptionID OptString    `json:"shipping_option_id,omitempty"`
	OrderInfo        OptOrderInfo `json:"order_info,omitempty"`
}

// GetID returns the value of ID.
func (s PreCheckoutQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s PreCheckoutQuery) GetFrom() User {
	return s.From
}

// GetCurrency returns the value of Currency.
func (s PreCheckoutQuery) GetCurrency() string {
	return s.Currency
}

// GetTotalAmount returns the value of TotalAmount.
func (s PreCheckoutQuery) GetTotalAmount() int {
	return s.TotalAmount
}

// GetInvoicePayload returns the value of InvoicePayload.
func (s PreCheckoutQuery) GetInvoicePayload() string {
	return s.InvoicePayload
}

// GetShippingOptionID returns the value of ShippingOptionID.
func (s PreCheckoutQuery) GetShippingOptionID() OptString {
	return s.ShippingOptionID
}

// GetOrderInfo returns the value of OrderInfo.
func (s PreCheckoutQuery) GetOrderInfo() OptOrderInfo {
	return s.OrderInfo
}

// SetID sets the value of ID.
func (s *PreCheckoutQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *PreCheckoutQuery) SetFrom(val User) {
	s.From = val
}

// SetCurrency sets the value of Currency.
func (s *PreCheckoutQuery) SetCurrency(val string) {
	s.Currency = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PreCheckoutQuery) SetTotalAmount(val int) {
	s.TotalAmount = val
}

// SetInvoicePayload sets the value of InvoicePayload.
func (s *PreCheckoutQuery) SetInvoicePayload(val string) {
	s.InvoicePayload = val
}

// SetShippingOptionID sets the value of ShippingOptionID.
func (s *PreCheckoutQuery) SetShippingOptionID(val OptString) {
	s.ShippingOptionID = val
}

// SetOrderInfo sets the value of OrderInfo.
func (s *PreCheckoutQuery) SetOrderInfo(val OptOrderInfo) {
	s.OrderInfo = val
}

// Input for promoteChatMember.
// Ref: #/components/schemas/promoteChatMember
type PromoteChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Pass True, if the administrator's presence in the chat is hidden.
	IsAnonymous OptBool `json:"is_anonymous,omitempty"`
	// Pass True, if the administrator can access the chat event log, chat statistics, message statistics
	// in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
	//  Implied by any other administrator privilege.
	CanManageChat OptBool `json:"can_manage_chat,omitempty"`
	// Pass True, if the administrator can create channel posts, channels only.
	CanPostMessages OptBool `json:"can_post_messages,omitempty"`
	// Pass True, if the administrator can edit messages of other users and can pin messages, channels
	// only.
	CanEditMessages OptBool `json:"can_edit_messages,omitempty"`
	// Pass True, if the administrator can delete messages of other users.
	CanDeleteMessages OptBool `json:"can_delete_messages,omitempty"`
	// Pass True, if the administrator can manage video chats.
	CanManageVideoChats OptBool `json:"can_manage_video_chats,omitempty"`
	// Pass True, if the administrator can restrict, ban or unban chat members.
	CanRestrictMembers OptBool `json:"can_restrict_members,omitempty"`
	// Pass True, if the administrator can add new administrators with a subset of their own privileges
	// or demote administrators that he has promoted, directly or indirectly (promoted by administrators
	// that were appointed by him).
	CanPromoteMembers OptBool `json:"can_promote_members,omitempty"`
	// Pass True, if the administrator can change chat title, photo and other settings.
	CanChangeInfo OptBool `json:"can_change_info,omitempty"`
	// Pass True, if the administrator can invite new users to the chat.
	CanInviteUsers OptBool `json:"can_invite_users,omitempty"`
	// Pass True, if the administrator can pin messages, supergroups only.
	CanPinMessages OptBool `json:"can_pin_messages,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s PromoteChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s PromoteChatMember) GetUserID() int64 {
	return s.UserID
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s PromoteChatMember) GetIsAnonymous() OptBool {
	return s.IsAnonymous
}

// GetCanManageChat returns the value of CanManageChat.
func (s PromoteChatMember) GetCanManageChat() OptBool {
	return s.CanManageChat
}

// GetCanPostMessages returns the value of CanPostMessages.
func (s PromoteChatMember) GetCanPostMessages() OptBool {
	return s.CanPostMessages
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s PromoteChatMember) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanDeleteMessages returns the value of CanDeleteMessages.
func (s PromoteChatMember) GetCanDeleteMessages() OptBool {
	return s.CanDeleteMessages
}

// GetCanManageVideoChats returns the value of CanManageVideoChats.
func (s PromoteChatMember) GetCanManageVideoChats() OptBool {
	return s.CanManageVideoChats
}

// GetCanRestrictMembers returns the value of CanRestrictMembers.
func (s PromoteChatMember) GetCanRestrictMembers() OptBool {
	return s.CanRestrictMembers
}

// GetCanPromoteMembers returns the value of CanPromoteMembers.
func (s PromoteChatMember) GetCanPromoteMembers() OptBool {
	return s.CanPromoteMembers
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s PromoteChatMember) GetCanChangeInfo() OptBool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s PromoteChatMember) GetCanInviteUsers() OptBool {
	return s.CanInviteUsers
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s PromoteChatMember) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// SetChatID sets the value of ChatID.
func (s *PromoteChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *PromoteChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *PromoteChatMember) SetIsAnonymous(val OptBool) {
	s.IsAnonymous = val
}

// SetCanManageChat sets the value of CanManageChat.
func (s *PromoteChatMember) SetCanManageChat(val OptBool) {
	s.CanManageChat = val
}

// SetCanPostMessages sets the value of CanPostMessages.
func (s *PromoteChatMember) SetCanPostMessages(val OptBool) {
	s.CanPostMessages = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *PromoteChatMember) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanDeleteMessages sets the value of CanDeleteMessages.
func (s *PromoteChatMember) SetCanDeleteMessages(val OptBool) {
	s.CanDeleteMessages = val
}

// SetCanManageVideoChats sets the value of CanManageVideoChats.
func (s *PromoteChatMember) SetCanManageVideoChats(val OptBool) {
	s.CanManageVideoChats = val
}

// SetCanRestrictMembers sets the value of CanRestrictMembers.
func (s *PromoteChatMember) SetCanRestrictMembers(val OptBool) {
	s.CanRestrictMembers = val
}

// SetCanPromoteMembers sets the value of CanPromoteMembers.
func (s *PromoteChatMember) SetCanPromoteMembers(val OptBool) {
	s.CanPromoteMembers = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *PromoteChatMember) SetCanChangeInfo(val OptBool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *PromoteChatMember) SetCanInviteUsers(val OptBool) {
	s.CanInviteUsers = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *PromoteChatMember) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// This object represents the content of a service message, sent whenever a user in the chat triggers
// a proximity alert set by another user.
// Ref: #/components/schemas/ProximityAlertTriggered
type ProximityAlertTriggered struct {
	Traveler User `json:"traveler"`
	Watcher  User `json:"watcher"`
	// The distance between the users.
	Distance int `json:"distance"`
}

// GetTraveler returns the value of Traveler.
func (s ProximityAlertTriggered) GetTraveler() User {
	return s.Traveler
}

// GetWatcher returns the value of Watcher.
func (s ProximityAlertTriggered) GetWatcher() User {
	return s.Watcher
}

// GetDistance returns the value of Distance.
func (s ProximityAlertTriggered) GetDistance() int {
	return s.Distance
}

// SetTraveler sets the value of Traveler.
func (s *ProximityAlertTriggered) SetTraveler(val User) {
	s.Traveler = val
}

// SetWatcher sets the value of Watcher.
func (s *ProximityAlertTriggered) SetWatcher(val User) {
	s.Watcher = val
}

// SetDistance sets the value of Distance.
func (s *ProximityAlertTriggered) SetDistance(val int) {
	s.Distance = val
}

// This object represents a custom keyboard with reply options (see Introduction to bots for details
// and examples).
// Ref: #/components/schemas/ReplyKeyboardMarkup
type ReplyKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of KeyboardButton objects.
	Keyboard [][]KeyboardButton `json:"keyboard"`
	// Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard
	// smaller if there are just two rows of buttons). Defaults to false, in which case the custom
	// keyboard is always of the same height as the app's standard keyboard.
	ResizeKeyboard OptBool `json:"resize_keyboard,omitempty"`
	// Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be
	// available, but clients will automatically display the usual letter-keyboard in the chat â€“ the
	// user can press a special button in the input field to see the custom keyboard again. Defaults to
	// false.
	OneTimeKeyboard OptBool `json:"one_time_keyboard,omitempty"`
	// The placeholder to be shown in the input field when the keyboard is active; 1-64 characters.
	InputFieldPlaceholder OptString `json:"input_field_placeholder,omitempty"`
	// Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that
	// are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has
	// reply_to_message_id), sender of the original message.Example: A user requests to change the bot's
	// language, bot replies to the request with a keyboard to select the new language. Other users in
	// the group don't see the keyboard.
	Selective OptBool `json:"selective,omitempty"`
}

// GetKeyboard returns the value of Keyboard.
func (s ReplyKeyboardMarkup) GetKeyboard() [][]KeyboardButton {
	return s.Keyboard
}

// GetResizeKeyboard returns the value of ResizeKeyboard.
func (s ReplyKeyboardMarkup) GetResizeKeyboard() OptBool {
	return s.ResizeKeyboard
}

// GetOneTimeKeyboard returns the value of OneTimeKeyboard.
func (s ReplyKeyboardMarkup) GetOneTimeKeyboard() OptBool {
	return s.OneTimeKeyboard
}

// GetInputFieldPlaceholder returns the value of InputFieldPlaceholder.
func (s ReplyKeyboardMarkup) GetInputFieldPlaceholder() OptString {
	return s.InputFieldPlaceholder
}

// GetSelective returns the value of Selective.
func (s ReplyKeyboardMarkup) GetSelective() OptBool {
	return s.Selective
}

// SetKeyboard sets the value of Keyboard.
func (s *ReplyKeyboardMarkup) SetKeyboard(val [][]KeyboardButton) {
	s.Keyboard = val
}

// SetResizeKeyboard sets the value of ResizeKeyboard.
func (s *ReplyKeyboardMarkup) SetResizeKeyboard(val OptBool) {
	s.ResizeKeyboard = val
}

// SetOneTimeKeyboard sets the value of OneTimeKeyboard.
func (s *ReplyKeyboardMarkup) SetOneTimeKeyboard(val OptBool) {
	s.OneTimeKeyboard = val
}

// SetInputFieldPlaceholder sets the value of InputFieldPlaceholder.
func (s *ReplyKeyboardMarkup) SetInputFieldPlaceholder(val OptString) {
	s.InputFieldPlaceholder = val
}

// SetSelective sets the value of Selective.
func (s *ReplyKeyboardMarkup) SetSelective(val OptBool) {
	s.Selective = val
}

// Upon receiving a message with this object, Telegram clients will remove the current custom
// keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until
// a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden
// immediately after the user presses a button (see ReplyKeyboardMarkup).
// Ref: #/components/schemas/ReplyKeyboardRemove
type ReplyKeyboardRemove struct {
	// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if
	// you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in
	// ReplyKeyboardMarkup).
	RemoveKeyboard bool `json:"remove_keyboard"`
	// Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users
	// that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has
	// reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns
	// confirmation message in reply to the vote and removes the keyboard for that user, while still
	// showing the keyboard with poll options to users who haven't voted yet.
	Selective OptBool `json:"selective,omitempty"`
}

// GetRemoveKeyboard returns the value of RemoveKeyboard.
func (s ReplyKeyboardRemove) GetRemoveKeyboard() bool {
	return s.RemoveKeyboard
}

// GetSelective returns the value of Selective.
func (s ReplyKeyboardRemove) GetSelective() OptBool {
	return s.Selective
}

// SetRemoveKeyboard sets the value of RemoveKeyboard.
func (s *ReplyKeyboardRemove) SetRemoveKeyboard(val bool) {
	s.RemoveKeyboard = val
}

// SetSelective sets the value of Selective.
func (s *ReplyKeyboardRemove) SetSelective(val OptBool) {
	s.Selective = val
}

// Contains information about why a request was unsuccessful.
// Ref: #/components/schemas/Response
type Response struct {
	// The group has been migrated to a supergroup with the specified identifier. This number may be
	// greater than 32 bits and some programming languages may have difficulty/silent defects in
	// interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision
	// float type are safe for storing this identifier.
	MigrateToChatID OptInt64 `json:"migrate_to_chat_id,omitempty"`
	// In case of exceeding flood control, the number of seconds left to wait before the request can be
	// repeated.
	RetryAfter OptInt `json:"retry_after,omitempty"`
}

// GetMigrateToChatID returns the value of MigrateToChatID.
func (s Response) GetMigrateToChatID() OptInt64 {
	return s.MigrateToChatID
}

// GetRetryAfter returns the value of RetryAfter.
func (s Response) GetRetryAfter() OptInt {
	return s.RetryAfter
}

// SetMigrateToChatID sets the value of MigrateToChatID.
func (s *Response) SetMigrateToChatID(val OptInt64) {
	s.MigrateToChatID = val
}

// SetRetryAfter sets the value of RetryAfter.
func (s *Response) SetRetryAfter(val OptInt) {
	s.RetryAfter = val
}

// Input for restrictChatMember.
// Ref: #/components/schemas/restrictChatMember
type RestrictChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID      int64           `json:"user_id"`
	Permissions ChatPermissions `json:"permissions"`
	// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than
	// 366 days or less than 30 seconds from the current time, they are considered to be restricted
	// forever.
	UntilDate OptInt `json:"until_date,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s RestrictChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s RestrictChatMember) GetUserID() int64 {
	return s.UserID
}

// GetPermissions returns the value of Permissions.
func (s RestrictChatMember) GetPermissions() ChatPermissions {
	return s.Permissions
}

// GetUntilDate returns the value of UntilDate.
func (s RestrictChatMember) GetUntilDate() OptInt {
	return s.UntilDate
}

// SetChatID sets the value of ChatID.
func (s *RestrictChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *RestrictChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetPermissions sets the value of Permissions.
func (s *RestrictChatMember) SetPermissions(val ChatPermissions) {
	s.Permissions = val
}

// SetUntilDate sets the value of UntilDate.
func (s *RestrictChatMember) SetUntilDate(val OptInt) {
	s.UntilDate = val
}

// Ref: #/components/schemas/Result
type Result struct {
	Result OptBool `json:"result,omitempty"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s Result) GetResult() OptBool {
	return s.Result
}

// GetOk returns the value of Ok.
func (s Result) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *Result) SetResult(val OptBool) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *Result) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfBotCommand
type ResultArrayOfBotCommand struct {
	Result []BotCommand `json:"result,omitempty"`
	Ok     bool         `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultArrayOfBotCommand) GetResult() []BotCommand {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultArrayOfBotCommand) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfBotCommand) SetResult(val []BotCommand) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfBotCommand) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfChatMember
type ResultArrayOfChatMember struct {
	Result []ChatMember `json:"result,omitempty"`
	Ok     bool         `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultArrayOfChatMember) GetResult() []ChatMember {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultArrayOfChatMember) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfChatMember) SetResult(val []ChatMember) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfChatMember) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfGameHighScore
type ResultArrayOfGameHighScore struct {
	Result []GameHighScore `json:"result,omitempty"`
	Ok     bool            `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultArrayOfGameHighScore) GetResult() []GameHighScore {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultArrayOfGameHighScore) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfGameHighScore) SetResult(val []GameHighScore) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfGameHighScore) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfMessage
type ResultArrayOfMessage struct {
	Result []Message `json:"result,omitempty"`
	Ok     bool      `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultArrayOfMessage) GetResult() []Message {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultArrayOfMessage) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfMessage) SetResult(val []Message) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfMessage) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfUpdate
type ResultArrayOfUpdate struct {
	Result []Update `json:"result,omitempty"`
	Ok     bool     `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultArrayOfUpdate) GetResult() []Update {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultArrayOfUpdate) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfUpdate) SetResult(val []Update) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfUpdate) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultChat
type ResultChat struct {
	Result OptChat `json:"result,omitempty"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultChat) GetResult() OptChat {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultChat) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultChat) SetResult(val OptChat) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultChat) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultChatInviteLink
type ResultChatInviteLink struct {
	Result OptChatInviteLink `json:"result,omitempty"`
	Ok     bool              `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultChatInviteLink) GetResult() OptChatInviteLink {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultChatInviteLink) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultChatInviteLink) SetResult(val OptChatInviteLink) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultChatInviteLink) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultChatMember
type ResultChatMember struct {
	Result OptChatMember `json:"result,omitempty"`
	Ok     bool          `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultChatMember) GetResult() OptChatMember {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultChatMember) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultChatMember) SetResult(val OptChatMember) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultChatMember) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultFile
type ResultFile struct {
	Result OptFile `json:"result,omitempty"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultFile) GetResult() OptFile {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultFile) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultFile) SetResult(val OptFile) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultFile) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultInt
type ResultInt struct {
	Result OptInt `json:"result,omitempty"`
	Ok     bool   `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultInt) GetResult() OptInt {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultInt) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultInt) SetResult(val OptInt) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultInt) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultMessage
type ResultMessage struct {
	Result OptMessage `json:"result,omitempty"`
	Ok     bool       `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultMessage) GetResult() OptMessage {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultMessage) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultMessage) SetResult(val OptMessage) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultMessage) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultMessageId
type ResultMessageId struct {
	Result OptMessageId `json:"result,omitempty"`
	Ok     bool         `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultMessageId) GetResult() OptMessageId {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultMessageId) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultMessageId) SetResult(val OptMessageId) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultMessageId) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultMessageOrBoolean
type ResultMessageOrBoolean struct {
	Result OptResultMessageOrBooleanResult `json:"result,omitempty"`
	Ok     bool                            `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultMessageOrBoolean) GetResult() OptResultMessageOrBooleanResult {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultMessageOrBoolean) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultMessageOrBoolean) SetResult(val OptResultMessageOrBooleanResult) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultMessageOrBoolean) SetOk(val bool) {
	s.Ok = val
}

// ResultMessageOrBooleanResult represents sum type.
type ResultMessageOrBooleanResult struct {
	Type    ResultMessageOrBooleanResultType // switch on this field
	Message Message
	Bool    bool
}

// ResultMessageOrBooleanResultType is oneOf type of ResultMessageOrBooleanResult.
type ResultMessageOrBooleanResultType string

// Possible values for ResultMessageOrBooleanResultType.
const (
	MessageResultMessageOrBooleanResult ResultMessageOrBooleanResultType = "Message"
	BoolResultMessageOrBooleanResult    ResultMessageOrBooleanResultType = "bool"
)

// IsMessage reports whether ResultMessageOrBooleanResult is Message.
func (s ResultMessageOrBooleanResult) IsMessage() bool {
	return s.Type == MessageResultMessageOrBooleanResult
}

// IsBool reports whether ResultMessageOrBooleanResult is bool.
func (s ResultMessageOrBooleanResult) IsBool() bool {
	return s.Type == BoolResultMessageOrBooleanResult
}

// SetMessage sets ResultMessageOrBooleanResult to Message.
func (s *ResultMessageOrBooleanResult) SetMessage(v Message) {
	s.Type = MessageResultMessageOrBooleanResult
	s.Message = v
}

// GetMessage returns Message and true boolean if ResultMessageOrBooleanResult is Message.
func (s ResultMessageOrBooleanResult) GetMessage() (v Message, ok bool) {
	if !s.IsMessage() {
		return v, false
	}
	return s.Message, true
}

// NewMessageResultMessageOrBooleanResult returns new ResultMessageOrBooleanResult from Message.
func NewMessageResultMessageOrBooleanResult(v Message) ResultMessageOrBooleanResult {
	var s ResultMessageOrBooleanResult
	s.SetMessage(v)
	return s
}

// SetBool sets ResultMessageOrBooleanResult to bool.
func (s *ResultMessageOrBooleanResult) SetBool(v bool) {
	s.Type = BoolResultMessageOrBooleanResult
	s.Bool = v
}

// GetBool returns bool and true boolean if ResultMessageOrBooleanResult is bool.
func (s ResultMessageOrBooleanResult) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolResultMessageOrBooleanResult returns new ResultMessageOrBooleanResult from bool.
func NewBoolResultMessageOrBooleanResult(v bool) ResultMessageOrBooleanResult {
	var s ResultMessageOrBooleanResult
	s.SetBool(v)
	return s
}

// Ref: #/components/schemas/ResultPoll
type ResultPoll struct {
	Result OptPoll `json:"result,omitempty"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultPoll) GetResult() OptPoll {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultPoll) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultPoll) SetResult(val OptPoll) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultPoll) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultStickerSet
type ResultStickerSet struct {
	Result OptStickerSet `json:"result,omitempty"`
	Ok     bool          `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultStickerSet) GetResult() OptStickerSet {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultStickerSet) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultStickerSet) SetResult(val OptStickerSet) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultStickerSet) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultString
type ResultString struct {
	Result OptString `json:"result,omitempty"`
	Ok     bool      `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultString) GetResult() OptString {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultString) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultString) SetResult(val OptString) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultString) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultUser
type ResultUser struct {
	Result OptUser `json:"result,omitempty"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultUser) GetResult() OptUser {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultUser) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultUser) SetResult(val OptUser) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultUser) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultUserProfilePhotos
type ResultUserProfilePhotos struct {
	Result OptUserProfilePhotos `json:"result,omitempty"`
	Ok     bool                 `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultUserProfilePhotos) GetResult() OptUserProfilePhotos {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultUserProfilePhotos) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultUserProfilePhotos) SetResult(val OptUserProfilePhotos) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultUserProfilePhotos) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultWebhookInfo
type ResultWebhookInfo struct {
	Result OptWebhookInfo `json:"result,omitempty"`
	Ok     bool           `json:"ok"`
}

// GetResult returns the value of Result.
func (s ResultWebhookInfo) GetResult() OptWebhookInfo {
	return s.Result
}

// GetOk returns the value of Ok.
func (s ResultWebhookInfo) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultWebhookInfo) SetResult(val OptWebhookInfo) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultWebhookInfo) SetOk(val bool) {
	s.Ok = val
}

// Input for revokeChatInviteLink.
// Ref: #/components/schemas/revokeChatInviteLink
type RevokeChatInviteLink struct {
	ChatID ID `json:"chat_id"`
	// The invite link to revoke.
	InviteLink string `json:"invite_link"`
}

// GetChatID returns the value of ChatID.
func (s RevokeChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// GetInviteLink returns the value of InviteLink.
func (s RevokeChatInviteLink) GetInviteLink() string {
	return s.InviteLink
}

// SetChatID sets the value of ChatID.
func (s *RevokeChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// SetInviteLink sets the value of InviteLink.
func (s *RevokeChatInviteLink) SetInviteLink(val string) {
	s.InviteLink = val
}

// Input for sendAnimation.
// Ref: #/components/schemas/sendAnimation
type SendAnimation struct {
	ChatID ID `json:"chat_id"`
	// Animation to send. Pass a file_id as String to send an animation that exists on the Telegram
	// servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the
	// Internet, or upload a new animation using multipart/form-data.
	Animation string `json:"animation"`
	// Duration of sent animation in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Animation width.
	Width OptInt `json:"width,omitempty"`
	// Animation height.
	Height OptInt `json:"height,omitempty"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Animation caption (may also be used when resending animation by file_id), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the animation caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendAnimation) GetChatID() ID {
	return s.ChatID
}

// GetAnimation returns the value of Animation.
func (s SendAnimation) GetAnimation() string {
	return s.Animation
}

// GetDuration returns the value of Duration.
func (s SendAnimation) GetDuration() OptInt {
	return s.Duration
}

// GetWidth returns the value of Width.
func (s SendAnimation) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s SendAnimation) GetHeight() OptInt {
	return s.Height
}

// GetThumb returns the value of Thumb.
func (s SendAnimation) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s SendAnimation) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s SendAnimation) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s SendAnimation) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendAnimation) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendAnimation) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendAnimation) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendAnimation) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendAnimation) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendAnimation) SetChatID(val ID) {
	s.ChatID = val
}

// SetAnimation sets the value of Animation.
func (s *SendAnimation) SetAnimation(val string) {
	s.Animation = val
}

// SetDuration sets the value of Duration.
func (s *SendAnimation) SetDuration(val OptInt) {
	s.Duration = val
}

// SetWidth sets the value of Width.
func (s *SendAnimation) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *SendAnimation) SetHeight(val OptInt) {
	s.Height = val
}

// SetThumb sets the value of Thumb.
func (s *SendAnimation) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *SendAnimation) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendAnimation) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendAnimation) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendAnimation) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendAnimation) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendAnimation) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendAnimation) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendAnimation) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendAudio.
// Ref: #/components/schemas/sendAudio
type SendAudio struct {
	ChatID ID `json:"chat_id"`
	// Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram
	// servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the
	// Internet, or upload a new one using multipart/form-data.
	Audio string `json:"audio"`
	// Audio caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Duration of the audio in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Performer.
	Performer OptString `json:"performer,omitempty"`
	// Track name.
	Title OptString `json:"title,omitempty"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendAudio) GetChatID() ID {
	return s.ChatID
}

// GetAudio returns the value of Audio.
func (s SendAudio) GetAudio() string {
	return s.Audio
}

// GetCaption returns the value of Caption.
func (s SendAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s SendAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s SendAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDuration returns the value of Duration.
func (s SendAudio) GetDuration() OptInt {
	return s.Duration
}

// GetPerformer returns the value of Performer.
func (s SendAudio) GetPerformer() OptString {
	return s.Performer
}

// GetTitle returns the value of Title.
func (s SendAudio) GetTitle() OptString {
	return s.Title
}

// GetThumb returns the value of Thumb.
func (s SendAudio) GetThumb() OptString {
	return s.Thumb
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendAudio) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendAudio) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendAudio) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendAudio) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendAudio) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendAudio) SetChatID(val ID) {
	s.ChatID = val
}

// SetAudio sets the value of Audio.
func (s *SendAudio) SetAudio(val string) {
	s.Audio = val
}

// SetCaption sets the value of Caption.
func (s *SendAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDuration sets the value of Duration.
func (s *SendAudio) SetDuration(val OptInt) {
	s.Duration = val
}

// SetPerformer sets the value of Performer.
func (s *SendAudio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetTitle sets the value of Title.
func (s *SendAudio) SetTitle(val OptString) {
	s.Title = val
}

// SetThumb sets the value of Thumb.
func (s *SendAudio) SetThumb(val OptString) {
	s.Thumb = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendAudio) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendAudio) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendAudio) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendAudio) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendAudio) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendChatAction.
// Ref: #/components/schemas/sendChatAction
type SendChatAction struct {
	ChatID ID `json:"chat_id"`
	// Type of action to broadcast. Choose one, depending on what the user is about to receive: typing
	// for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice
	// or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers,
	// find_location for location data, record_video_note or upload_video_note for video notes.
	Action string `json:"action"`
}

// GetChatID returns the value of ChatID.
func (s SendChatAction) GetChatID() ID {
	return s.ChatID
}

// GetAction returns the value of Action.
func (s SendChatAction) GetAction() string {
	return s.Action
}

// SetChatID sets the value of ChatID.
func (s *SendChatAction) SetChatID(val ID) {
	s.ChatID = val
}

// SetAction sets the value of Action.
func (s *SendChatAction) SetAction(val string) {
	s.Action = val
}

// Input for sendContact.
// Ref: #/components/schemas/sendContact
type SendContact struct {
	ChatID ID `json:"chat_id"`
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// Contact's last name.
	LastName OptString `json:"last_name,omitempty"`
	// Additional data about the contact in the form of a vCard, 0-2048 bytes.
	Vcard OptString `json:"vcard,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendContact) GetChatID() ID {
	return s.ChatID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s SendContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s SendContact) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s SendContact) GetLastName() OptString {
	return s.LastName
}

// GetVcard returns the value of Vcard.
func (s SendContact) GetVcard() OptString {
	return s.Vcard
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendContact) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendContact) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendContact) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendContact) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendContact) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendContact) SetChatID(val ID) {
	s.ChatID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *SendContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *SendContact) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *SendContact) SetLastName(val OptString) {
	s.LastName = val
}

// SetVcard sets the value of Vcard.
func (s *SendContact) SetVcard(val OptString) {
	s.Vcard = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendContact) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendContact) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendContact) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendContact) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendContact) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendDice.
// Ref: #/components/schemas/sendDice
type SendDice struct {
	ChatID ID `json:"chat_id"`
	// Emoji on which the dice throw animation is based. Currently, must be one of "", "", "", "", "", or
	// "". Dice can have values 1-6 for "", "" and "", values 1-5 for "" and "", and values 1-64 for "".
	// Defaults to "".
	Emoji OptString `json:"emoji,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendDice) GetChatID() ID {
	return s.ChatID
}

// GetEmoji returns the value of Emoji.
func (s SendDice) GetEmoji() OptString {
	return s.Emoji
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendDice) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendDice) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendDice) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendDice) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendDice) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendDice) SetChatID(val ID) {
	s.ChatID = val
}

// SetEmoji sets the value of Emoji.
func (s *SendDice) SetEmoji(val OptString) {
	s.Emoji = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendDice) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendDice) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendDice) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendDice) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendDice) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendDocument.
// Ref: #/components/schemas/sendDocument
type SendDocument struct {
	ChatID ID `json:"chat_id"`
	// File to send. Pass a file_id as String to send a file that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or
	// upload a new one using multipart/form-data.
	Document string `json:"document"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Document caption (may also be used when resending documents by file_id), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Disables automatic server-side content type detection for files uploaded using multipart/form-data.
	DisableContentTypeDetection OptBool `json:"disable_content_type_detection,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendDocument) GetChatID() ID {
	return s.ChatID
}

// GetDocument returns the value of Document.
func (s SendDocument) GetDocument() string {
	return s.Document
}

// GetThumb returns the value of Thumb.
func (s SendDocument) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s SendDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s SendDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s SendDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableContentTypeDetection returns the value of DisableContentTypeDetection.
func (s SendDocument) GetDisableContentTypeDetection() OptBool {
	return s.DisableContentTypeDetection
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendDocument) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendDocument) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendDocument) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendDocument) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendDocument) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendDocument) SetChatID(val ID) {
	s.ChatID = val
}

// SetDocument sets the value of Document.
func (s *SendDocument) SetDocument(val string) {
	s.Document = val
}

// SetThumb sets the value of Thumb.
func (s *SendDocument) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *SendDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableContentTypeDetection sets the value of DisableContentTypeDetection.
func (s *SendDocument) SetDisableContentTypeDetection(val OptBool) {
	s.DisableContentTypeDetection = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendDocument) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendDocument) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendDocument) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendDocument) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendDocument) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendGame.
// Ref: #/components/schemas/sendGame
type SendGame struct {
	// Unique identifier for the target chat.
	ChatID int64 `json:"chat_id"`
	// Short name of the game, serves as the unique identifier for the game. Set up your games via
	// Botfather.
	GameShortName string `json:"game_short_name"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendGame) GetChatID() int64 {
	return s.ChatID
}

// GetGameShortName returns the value of GameShortName.
func (s SendGame) GetGameShortName() string {
	return s.GameShortName
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendGame) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendGame) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendGame) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendGame) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendGame) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendGame) SetChatID(val int64) {
	s.ChatID = val
}

// SetGameShortName sets the value of GameShortName.
func (s *SendGame) SetGameShortName(val string) {
	s.GameShortName = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendGame) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendGame) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendGame) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendGame) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendGame) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for sendInvoice.
// Ref: #/components/schemas/sendInvoice
type SendInvoice struct {
	ChatID ID `json:"chat_id"`
	// Product name, 1-32 characters.
	Title string `json:"title"`
	// Product description, 1-255 characters.
	Description string `json:"description"`
	// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
	// internal processes.
	Payload string `json:"payload"`
	// Payments provider token, obtained via Botfather.
	ProviderToken string `json:"provider_token"`
	// Three-letter ISO 4217 currency code, see more on currencies.
	Currency string `json:"currency"`
	// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery
	// cost, delivery tax, bonus, etc.).
	Prices []LabeledPrice `json:"prices"`
	// The maximum accepted amount for tips in the smallest units of the currency (integer, not
	// float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp
	// parameter in currencies.json, it shows the number of digits past the decimal point for each
	// currency (2 for the majority of currencies). Defaults to 0.
	MaxTipAmount OptInt `json:"max_tip_amount,omitempty"`
	// A JSON-serialized array of suggested amounts of tips in the smallest units of the currency
	// (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip
	// amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
	SuggestedTipAmounts []int64 `json:"suggested_tip_amounts,omitempty"`
	// Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay
	// button, allowing multiple users to pay directly from the forwarded message, using the same invoice.
	//  If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the
	// bot (instead of a Pay button), with the value used as the start parameter.
	StartParameter OptString `json:"start_parameter,omitempty"`
	// A JSON-serialized data about the invoice, which will be shared with the payment provider. A
	// detailed description of required fields should be provided by the payment provider.
	ProviderData OptString `json:"provider_data,omitempty"`
	// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a
	// service. People like it better when they see what they are paying for.
	PhotoURL OptString `json:"photo_url,omitempty"`
	// Photo size.
	PhotoSize OptInt `json:"photo_size,omitempty"`
	// Photo width.
	PhotoWidth OptInt `json:"photo_width,omitempty"`
	// Photo height.
	PhotoHeight OptInt `json:"photo_height,omitempty"`
	// Pass True, if you require the user's full name to complete the order.
	NeedName OptBool `json:"need_name,omitempty"`
	// Pass True, if you require the user's phone number to complete the order.
	NeedPhoneNumber OptBool `json:"need_phone_number,omitempty"`
	// Pass True, if you require the user's email address to complete the order.
	NeedEmail OptBool `json:"need_email,omitempty"`
	// Pass True, if you require the user's shipping address to complete the order.
	NeedShippingAddress OptBool `json:"need_shipping_address,omitempty"`
	// Pass True, if user's phone number should be sent to provider.
	SendPhoneNumberToProvider OptBool `json:"send_phone_number_to_provider,omitempty"`
	// Pass True, if user's email address should be sent to provider.
	SendEmailToProvider OptBool `json:"send_email_to_provider,omitempty"`
	// Pass True, if the final price depends on the shipping method.
	IsFlexible OptBool `json:"is_flexible,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendInvoice) GetChatID() ID {
	return s.ChatID
}

// GetTitle returns the value of Title.
func (s SendInvoice) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s SendInvoice) GetDescription() string {
	return s.Description
}

// GetPayload returns the value of Payload.
func (s SendInvoice) GetPayload() string {
	return s.Payload
}

// GetProviderToken returns the value of ProviderToken.
func (s SendInvoice) GetProviderToken() string {
	return s.ProviderToken
}

// GetCurrency returns the value of Currency.
func (s SendInvoice) GetCurrency() string {
	return s.Currency
}

// GetPrices returns the value of Prices.
func (s SendInvoice) GetPrices() []LabeledPrice {
	return s.Prices
}

// GetMaxTipAmount returns the value of MaxTipAmount.
func (s SendInvoice) GetMaxTipAmount() OptInt {
	return s.MaxTipAmount
}

// GetSuggestedTipAmounts returns the value of SuggestedTipAmounts.
func (s SendInvoice) GetSuggestedTipAmounts() []int64 {
	return s.SuggestedTipAmounts
}

// GetStartParameter returns the value of StartParameter.
func (s SendInvoice) GetStartParameter() OptString {
	return s.StartParameter
}

// GetProviderData returns the value of ProviderData.
func (s SendInvoice) GetProviderData() OptString {
	return s.ProviderData
}

// GetPhotoURL returns the value of PhotoURL.
func (s SendInvoice) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetPhotoSize returns the value of PhotoSize.
func (s SendInvoice) GetPhotoSize() OptInt {
	return s.PhotoSize
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s SendInvoice) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s SendInvoice) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetNeedName returns the value of NeedName.
func (s SendInvoice) GetNeedName() OptBool {
	return s.NeedName
}

// GetNeedPhoneNumber returns the value of NeedPhoneNumber.
func (s SendInvoice) GetNeedPhoneNumber() OptBool {
	return s.NeedPhoneNumber
}

// GetNeedEmail returns the value of NeedEmail.
func (s SendInvoice) GetNeedEmail() OptBool {
	return s.NeedEmail
}

// GetNeedShippingAddress returns the value of NeedShippingAddress.
func (s SendInvoice) GetNeedShippingAddress() OptBool {
	return s.NeedShippingAddress
}

// GetSendPhoneNumberToProvider returns the value of SendPhoneNumberToProvider.
func (s SendInvoice) GetSendPhoneNumberToProvider() OptBool {
	return s.SendPhoneNumberToProvider
}

// GetSendEmailToProvider returns the value of SendEmailToProvider.
func (s SendInvoice) GetSendEmailToProvider() OptBool {
	return s.SendEmailToProvider
}

// GetIsFlexible returns the value of IsFlexible.
func (s SendInvoice) GetIsFlexible() OptBool {
	return s.IsFlexible
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendInvoice) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendInvoice) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendInvoice) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendInvoice) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendInvoice) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendInvoice) SetChatID(val ID) {
	s.ChatID = val
}

// SetTitle sets the value of Title.
func (s *SendInvoice) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *SendInvoice) SetDescription(val string) {
	s.Description = val
}

// SetPayload sets the value of Payload.
func (s *SendInvoice) SetPayload(val string) {
	s.Payload = val
}

// SetProviderToken sets the value of ProviderToken.
func (s *SendInvoice) SetProviderToken(val string) {
	s.ProviderToken = val
}

// SetCurrency sets the value of Currency.
func (s *SendInvoice) SetCurrency(val string) {
	s.Currency = val
}

// SetPrices sets the value of Prices.
func (s *SendInvoice) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// SetMaxTipAmount sets the value of MaxTipAmount.
func (s *SendInvoice) SetMaxTipAmount(val OptInt) {
	s.MaxTipAmount = val
}

// SetSuggestedTipAmounts sets the value of SuggestedTipAmounts.
func (s *SendInvoice) SetSuggestedTipAmounts(val []int64) {
	s.SuggestedTipAmounts = val
}

// SetStartParameter sets the value of StartParameter.
func (s *SendInvoice) SetStartParameter(val OptString) {
	s.StartParameter = val
}

// SetProviderData sets the value of ProviderData.
func (s *SendInvoice) SetProviderData(val OptString) {
	s.ProviderData = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *SendInvoice) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetPhotoSize sets the value of PhotoSize.
func (s *SendInvoice) SetPhotoSize(val OptInt) {
	s.PhotoSize = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *SendInvoice) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *SendInvoice) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetNeedName sets the value of NeedName.
func (s *SendInvoice) SetNeedName(val OptBool) {
	s.NeedName = val
}

// SetNeedPhoneNumber sets the value of NeedPhoneNumber.
func (s *SendInvoice) SetNeedPhoneNumber(val OptBool) {
	s.NeedPhoneNumber = val
}

// SetNeedEmail sets the value of NeedEmail.
func (s *SendInvoice) SetNeedEmail(val OptBool) {
	s.NeedEmail = val
}

// SetNeedShippingAddress sets the value of NeedShippingAddress.
func (s *SendInvoice) SetNeedShippingAddress(val OptBool) {
	s.NeedShippingAddress = val
}

// SetSendPhoneNumberToProvider sets the value of SendPhoneNumberToProvider.
func (s *SendInvoice) SetSendPhoneNumberToProvider(val OptBool) {
	s.SendPhoneNumberToProvider = val
}

// SetSendEmailToProvider sets the value of SendEmailToProvider.
func (s *SendInvoice) SetSendEmailToProvider(val OptBool) {
	s.SendEmailToProvider = val
}

// SetIsFlexible sets the value of IsFlexible.
func (s *SendInvoice) SetIsFlexible(val OptBool) {
	s.IsFlexible = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendInvoice) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendInvoice) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendInvoice) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendInvoice) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendInvoice) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for sendLocation.
// Ref: #/components/schemas/sendLocation
type SendLocation struct {
	ChatID ID `json:"chat_id"`
	// Latitude of the location.
	Latitude float64 `json:"latitude"`
	// Longitude of the location.
	Longitude float64 `json:"longitude"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy,omitempty"`
	// Period in seconds for which the location will be updated (see Live Locations, should be between 60
	// and 86400.
	LivePeriod OptInt `json:"live_period,omitempty"`
	// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
	// if specified.
	Heading OptInt `json:"heading,omitempty"`
	// For live locations, a maximum distance for proximity alerts about approaching another chat member,
	// in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt `json:"proximity_alert_radius,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendLocation) GetChatID() ID {
	return s.ChatID
}

// GetLatitude returns the value of Latitude.
func (s SendLocation) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s SendLocation) GetLongitude() float64 {
	return s.Longitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s SendLocation) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s SendLocation) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s SendLocation) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s SendLocation) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendLocation) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendLocation) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendLocation) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendLocation) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendLocation) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendLocation) SetChatID(val ID) {
	s.ChatID = val
}

// SetLatitude sets the value of Latitude.
func (s *SendLocation) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *SendLocation) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *SendLocation) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *SendLocation) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *SendLocation) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *SendLocation) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendLocation) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendLocation) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendLocation) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendLocation) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendLocation) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendMediaGroup.
// Ref: #/components/schemas/sendMediaGroup
type SendMediaGroup struct {
	ChatID ID `json:"chat_id"`
	// A JSON-serialized array describing messages to be sent, must include 2-10 items.
	Media []SendMediaGroupMediaItem `json:"media"`
	// Sends messages silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent messages from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the messages are a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool `json:"allow_sending_without_reply,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendMediaGroup) GetChatID() ID {
	return s.ChatID
}

// GetMedia returns the value of Media.
func (s SendMediaGroup) GetMedia() []SendMediaGroupMediaItem {
	return s.Media
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendMediaGroup) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendMediaGroup) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendMediaGroup) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendMediaGroup) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// SetChatID sets the value of ChatID.
func (s *SendMediaGroup) SetChatID(val ID) {
	s.ChatID = val
}

// SetMedia sets the value of Media.
func (s *SendMediaGroup) SetMedia(val []SendMediaGroupMediaItem) {
	s.Media = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendMediaGroup) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendMediaGroup) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendMediaGroup) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendMediaGroup) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SendMediaGroupMediaItem represents sum type.
type SendMediaGroupMediaItem struct {
	Type               SendMediaGroupMediaItemType // switch on this field
	InputMediaAudio    InputMediaAudio
	InputMediaDocument InputMediaDocument
	InputMediaPhoto    InputMediaPhoto
	InputMediaVideo    InputMediaVideo
}

// SendMediaGroupMediaItemType is oneOf type of SendMediaGroupMediaItem.
type SendMediaGroupMediaItemType string

// Possible values for SendMediaGroupMediaItemType.
const (
	InputMediaAudioSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "InputMediaAudio"
	InputMediaDocumentSendMediaGroupMediaItem SendMediaGroupMediaItemType = "InputMediaDocument"
	InputMediaPhotoSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "InputMediaPhoto"
	InputMediaVideoSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "InputMediaVideo"
)

// IsInputMediaAudio reports whether SendMediaGroupMediaItem is InputMediaAudio.
func (s SendMediaGroupMediaItem) IsInputMediaAudio() bool {
	return s.Type == InputMediaAudioSendMediaGroupMediaItem
}

// IsInputMediaDocument reports whether SendMediaGroupMediaItem is InputMediaDocument.
func (s SendMediaGroupMediaItem) IsInputMediaDocument() bool {
	return s.Type == InputMediaDocumentSendMediaGroupMediaItem
}

// IsInputMediaPhoto reports whether SendMediaGroupMediaItem is InputMediaPhoto.
func (s SendMediaGroupMediaItem) IsInputMediaPhoto() bool {
	return s.Type == InputMediaPhotoSendMediaGroupMediaItem
}

// IsInputMediaVideo reports whether SendMediaGroupMediaItem is InputMediaVideo.
func (s SendMediaGroupMediaItem) IsInputMediaVideo() bool {
	return s.Type == InputMediaVideoSendMediaGroupMediaItem
}

// SetInputMediaAudio sets SendMediaGroupMediaItem to InputMediaAudio.
func (s *SendMediaGroupMediaItem) SetInputMediaAudio(v InputMediaAudio) {
	s.Type = InputMediaAudioSendMediaGroupMediaItem
	s.InputMediaAudio = v
}

// GetInputMediaAudio returns InputMediaAudio and true boolean if SendMediaGroupMediaItem is InputMediaAudio.
func (s SendMediaGroupMediaItem) GetInputMediaAudio() (v InputMediaAudio, ok bool) {
	if !s.IsInputMediaAudio() {
		return v, false
	}
	return s.InputMediaAudio, true
}

// NewInputMediaAudioSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaAudio.
func NewInputMediaAudioSendMediaGroupMediaItem(v InputMediaAudio) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaAudio(v)
	return s
}

// SetInputMediaDocument sets SendMediaGroupMediaItem to InputMediaDocument.
func (s *SendMediaGroupMediaItem) SetInputMediaDocument(v InputMediaDocument) {
	s.Type = InputMediaDocumentSendMediaGroupMediaItem
	s.InputMediaDocument = v
}

// GetInputMediaDocument returns InputMediaDocument and true boolean if SendMediaGroupMediaItem is InputMediaDocument.
func (s SendMediaGroupMediaItem) GetInputMediaDocument() (v InputMediaDocument, ok bool) {
	if !s.IsInputMediaDocument() {
		return v, false
	}
	return s.InputMediaDocument, true
}

// NewInputMediaDocumentSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaDocument.
func NewInputMediaDocumentSendMediaGroupMediaItem(v InputMediaDocument) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaDocument(v)
	return s
}

// SetInputMediaPhoto sets SendMediaGroupMediaItem to InputMediaPhoto.
func (s *SendMediaGroupMediaItem) SetInputMediaPhoto(v InputMediaPhoto) {
	s.Type = InputMediaPhotoSendMediaGroupMediaItem
	s.InputMediaPhoto = v
}

// GetInputMediaPhoto returns InputMediaPhoto and true boolean if SendMediaGroupMediaItem is InputMediaPhoto.
func (s SendMediaGroupMediaItem) GetInputMediaPhoto() (v InputMediaPhoto, ok bool) {
	if !s.IsInputMediaPhoto() {
		return v, false
	}
	return s.InputMediaPhoto, true
}

// NewInputMediaPhotoSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaPhoto.
func NewInputMediaPhotoSendMediaGroupMediaItem(v InputMediaPhoto) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaPhoto(v)
	return s
}

// SetInputMediaVideo sets SendMediaGroupMediaItem to InputMediaVideo.
func (s *SendMediaGroupMediaItem) SetInputMediaVideo(v InputMediaVideo) {
	s.Type = InputMediaVideoSendMediaGroupMediaItem
	s.InputMediaVideo = v
}

// GetInputMediaVideo returns InputMediaVideo and true boolean if SendMediaGroupMediaItem is InputMediaVideo.
func (s SendMediaGroupMediaItem) GetInputMediaVideo() (v InputMediaVideo, ok bool) {
	if !s.IsInputMediaVideo() {
		return v, false
	}
	return s.InputMediaVideo, true
}

// NewInputMediaVideoSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaVideo.
func NewInputMediaVideoSendMediaGroupMediaItem(v InputMediaVideo) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaVideo(v)
	return s
}

// Input for sendMessage.
// Ref: #/components/schemas/sendMessage
type SendMessage struct {
	ChatID ID `json:"chat_id"`
	// Text of the message to be sent, 1-4096 characters after entities parsing.
	Text string `json:"text"`
	// Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in message text, which can be specified
	// instead of parse_mode.
	Entities []MessageEntity `json:"entities,omitempty"`
	// Disables link previews for links in this message.
	DisableWebPagePreview OptBool `json:"disable_web_page_preview,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendMessage) GetChatID() ID {
	return s.ChatID
}

// GetText returns the value of Text.
func (s SendMessage) GetText() string {
	return s.Text
}

// GetParseMode returns the value of ParseMode.
func (s SendMessage) GetParseMode() OptString {
	return s.ParseMode
}

// GetEntities returns the value of Entities.
func (s SendMessage) GetEntities() []MessageEntity {
	return s.Entities
}

// GetDisableWebPagePreview returns the value of DisableWebPagePreview.
func (s SendMessage) GetDisableWebPagePreview() OptBool {
	return s.DisableWebPagePreview
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendMessage) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendMessage) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendMessage) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendMessage) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetText sets the value of Text.
func (s *SendMessage) SetText(val string) {
	s.Text = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendMessage) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetEntities sets the value of Entities.
func (s *SendMessage) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetDisableWebPagePreview sets the value of DisableWebPagePreview.
func (s *SendMessage) SetDisableWebPagePreview(val OptBool) {
	s.DisableWebPagePreview = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendMessage) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendMessage) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendMessage) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendMessage) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendPhoto.
// Ref: #/components/schemas/sendPhoto
type SendPhoto struct {
	ChatID ID `json:"chat_id"`
	// Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or
	// upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's
	// width and height must not exceed 10000 in total. Width and height ratio must be at most 20.
	Photo string `json:"photo"`
	// Photo caption (may also be used when resending photos by file_id), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendPhoto) GetChatID() ID {
	return s.ChatID
}

// GetPhoto returns the value of Photo.
func (s SendPhoto) GetPhoto() string {
	return s.Photo
}

// GetCaption returns the value of Caption.
func (s SendPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s SendPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s SendPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendPhoto) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendPhoto) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendPhoto) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendPhoto) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendPhoto) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendPhoto) SetChatID(val ID) {
	s.ChatID = val
}

// SetPhoto sets the value of Photo.
func (s *SendPhoto) SetPhoto(val string) {
	s.Photo = val
}

// SetCaption sets the value of Caption.
func (s *SendPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendPhoto) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendPhoto) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendPhoto) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendPhoto) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendPhoto) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendPoll.
// Ref: #/components/schemas/sendPoll
type SendPoll struct {
	ChatID ID `json:"chat_id"`
	// Poll question, 1-300 characters.
	Question string `json:"question"`
	// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each.
	Options []string `json:"options"`
	// True, if the poll needs to be anonymous, defaults to True.
	IsAnonymous OptBool `json:"is_anonymous,omitempty"`
	// Poll type, "quiz" or "regular", defaults to "regular".
	Type OptString `json:"type,omitempty"`
	// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False.
	AllowsMultipleAnswers OptBool `json:"allows_multiple_answers,omitempty"`
	// 0-based identifier of the correct answer option, required for polls in quiz mode.
	CorrectOptionID OptInt `json:"correct_option_id,omitempty"`
	// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
	// quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing.
	Explanation OptString `json:"explanation,omitempty"`
	// Mode for parsing entities in the explanation. See formatting options for more details.
	ExplanationParseMode OptString `json:"explanation_parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the poll explanation, which can be
	// specified instead of parse_mode.
	ExplanationEntities []MessageEntity `json:"explanation_entities,omitempty"`
	// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together
	// with close_date.
	OpenPeriod OptInt `json:"open_period,omitempty"`
	// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and
	// no more than 600 seconds in the future. Can't be used together with open_period.
	CloseDate OptInt `json:"close_date,omitempty"`
	// Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.
	IsClosed OptBool `json:"is_closed,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendPoll) GetChatID() ID {
	return s.ChatID
}

// GetQuestion returns the value of Question.
func (s SendPoll) GetQuestion() string {
	return s.Question
}

// GetOptions returns the value of Options.
func (s SendPoll) GetOptions() []string {
	return s.Options
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s SendPoll) GetIsAnonymous() OptBool {
	return s.IsAnonymous
}

// GetType returns the value of Type.
func (s SendPoll) GetType() OptString {
	return s.Type
}

// GetAllowsMultipleAnswers returns the value of AllowsMultipleAnswers.
func (s SendPoll) GetAllowsMultipleAnswers() OptBool {
	return s.AllowsMultipleAnswers
}

// GetCorrectOptionID returns the value of CorrectOptionID.
func (s SendPoll) GetCorrectOptionID() OptInt {
	return s.CorrectOptionID
}

// GetExplanation returns the value of Explanation.
func (s SendPoll) GetExplanation() OptString {
	return s.Explanation
}

// GetExplanationParseMode returns the value of ExplanationParseMode.
func (s SendPoll) GetExplanationParseMode() OptString {
	return s.ExplanationParseMode
}

// GetExplanationEntities returns the value of ExplanationEntities.
func (s SendPoll) GetExplanationEntities() []MessageEntity {
	return s.ExplanationEntities
}

// GetOpenPeriod returns the value of OpenPeriod.
func (s SendPoll) GetOpenPeriod() OptInt {
	return s.OpenPeriod
}

// GetCloseDate returns the value of CloseDate.
func (s SendPoll) GetCloseDate() OptInt {
	return s.CloseDate
}

// GetIsClosed returns the value of IsClosed.
func (s SendPoll) GetIsClosed() OptBool {
	return s.IsClosed
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendPoll) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendPoll) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendPoll) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendPoll) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendPoll) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendPoll) SetChatID(val ID) {
	s.ChatID = val
}

// SetQuestion sets the value of Question.
func (s *SendPoll) SetQuestion(val string) {
	s.Question = val
}

// SetOptions sets the value of Options.
func (s *SendPoll) SetOptions(val []string) {
	s.Options = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *SendPoll) SetIsAnonymous(val OptBool) {
	s.IsAnonymous = val
}

// SetType sets the value of Type.
func (s *SendPoll) SetType(val OptString) {
	s.Type = val
}

// SetAllowsMultipleAnswers sets the value of AllowsMultipleAnswers.
func (s *SendPoll) SetAllowsMultipleAnswers(val OptBool) {
	s.AllowsMultipleAnswers = val
}

// SetCorrectOptionID sets the value of CorrectOptionID.
func (s *SendPoll) SetCorrectOptionID(val OptInt) {
	s.CorrectOptionID = val
}

// SetExplanation sets the value of Explanation.
func (s *SendPoll) SetExplanation(val OptString) {
	s.Explanation = val
}

// SetExplanationParseMode sets the value of ExplanationParseMode.
func (s *SendPoll) SetExplanationParseMode(val OptString) {
	s.ExplanationParseMode = val
}

// SetExplanationEntities sets the value of ExplanationEntities.
func (s *SendPoll) SetExplanationEntities(val []MessageEntity) {
	s.ExplanationEntities = val
}

// SetOpenPeriod sets the value of OpenPeriod.
func (s *SendPoll) SetOpenPeriod(val OptInt) {
	s.OpenPeriod = val
}

// SetCloseDate sets the value of CloseDate.
func (s *SendPoll) SetCloseDate(val OptInt) {
	s.CloseDate = val
}

// SetIsClosed sets the value of IsClosed.
func (s *SendPoll) SetIsClosed(val OptBool) {
	s.IsClosed = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendPoll) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendPoll) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendPoll) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendPoll) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendPoll) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Ref: #/components/schemas/SendReplyMarkup
// SendReplyMarkup represents sum type.
type SendReplyMarkup struct {
	Type                 SendReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendReplyMarkupType is oneOf type of SendReplyMarkup.
type SendReplyMarkupType string

// Possible values for SendReplyMarkupType.
const (
	InlineKeyboardMarkupSendReplyMarkup SendReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendReplyMarkup  SendReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendReplyMarkup  SendReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendReplyMarkup           SendReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendReplyMarkup is InlineKeyboardMarkup.
func (s SendReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendReplyMarkup is ReplyKeyboardMarkup.
func (s SendReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendReplyMarkup is ReplyKeyboardRemove.
func (s SendReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendReplyMarkup
}

// IsForceReply reports whether SendReplyMarkup is ForceReply.
func (s SendReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendReplyMarkup }

// SetInlineKeyboardMarkup sets SendReplyMarkup to InlineKeyboardMarkup.
func (s *SendReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendReplyMarkup is InlineKeyboardMarkup.
func (s SendReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendReplyMarkup returns new SendReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendReplyMarkup(v InlineKeyboardMarkup) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendReplyMarkup to ReplyKeyboardMarkup.
func (s *SendReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendReplyMarkup is ReplyKeyboardMarkup.
func (s SendReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendReplyMarkup returns new SendReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendReplyMarkup(v ReplyKeyboardMarkup) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendReplyMarkup to ReplyKeyboardRemove.
func (s *SendReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendReplyMarkup is ReplyKeyboardRemove.
func (s SendReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendReplyMarkup returns new SendReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendReplyMarkup(v ReplyKeyboardRemove) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendReplyMarkup to ForceReply.
func (s *SendReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendReplyMarkup is ForceReply.
func (s SendReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendReplyMarkup returns new SendReplyMarkup from ForceReply.
func NewForceReplySendReplyMarkup(v ForceReply) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetForceReply(v)
	return s
}

// Input for sendSticker.
// Ref: #/components/schemas/sendSticker
type SendSticker struct {
	ChatID ID `json:"chat_id"`
	// Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or
	// upload a new one using multipart/form-data.
	Sticker string `json:"sticker"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendSticker) GetChatID() ID {
	return s.ChatID
}

// GetSticker returns the value of Sticker.
func (s SendSticker) GetSticker() string {
	return s.Sticker
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendSticker) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendSticker) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendSticker) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendSticker) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendSticker) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendSticker) SetChatID(val ID) {
	s.ChatID = val
}

// SetSticker sets the value of Sticker.
func (s *SendSticker) SetSticker(val string) {
	s.Sticker = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendSticker) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendSticker) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendSticker) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendSticker) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendSticker) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVenue.
// Ref: #/components/schemas/sendVenue
type SendVenue struct {
	ChatID ID `json:"chat_id"`
	// Latitude of the venue.
	Latitude float64 `json:"latitude"`
	// Longitude of the venue.
	Longitude float64 `json:"longitude"`
	// Name of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// Foursquare identifier of the venue.
	FoursquareID OptString `json:"foursquare_id,omitempty"`
	// Foursquare type of the venue, if known. (For example, "arts_entertainment/default",
	// "arts_entertainment/aquarium" or "food/icecream".).
	FoursquareType OptString `json:"foursquare_type,omitempty"`
	// Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id,omitempty"`
	// Google Places type of the venue. (See supported types.).
	GooglePlaceType OptString `json:"google_place_type,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendVenue) GetChatID() ID {
	return s.ChatID
}

// GetLatitude returns the value of Latitude.
func (s SendVenue) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s SendVenue) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s SendVenue) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s SendVenue) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s SendVenue) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s SendVenue) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s SendVenue) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s SendVenue) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendVenue) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendVenue) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendVenue) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendVenue) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendVenue) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendVenue) SetChatID(val ID) {
	s.ChatID = val
}

// SetLatitude sets the value of Latitude.
func (s *SendVenue) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *SendVenue) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *SendVenue) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *SendVenue) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *SendVenue) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *SendVenue) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *SendVenue) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *SendVenue) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVenue) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVenue) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendVenue) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendVenue) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVenue) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVideo.
// Ref: #/components/schemas/sendVideo
type SendVideo struct {
	ChatID ID `json:"chat_id"`
	// Video to send. Pass a file_id as String to send a video that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or
	// upload a new video using multipart/form-data.
	Video string `json:"video"`
	// Duration of sent video in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Video width.
	Width OptInt `json:"width,omitempty"`
	// Video height.
	Height OptInt `json:"height,omitempty"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Video caption (may also be used when resending videos by file_id), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Pass True, if the uploaded video is suitable for streaming.
	SupportsStreaming OptBool `json:"supports_streaming,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendVideo) GetChatID() ID {
	return s.ChatID
}

// GetVideo returns the value of Video.
func (s SendVideo) GetVideo() string {
	return s.Video
}

// GetDuration returns the value of Duration.
func (s SendVideo) GetDuration() OptInt {
	return s.Duration
}

// GetWidth returns the value of Width.
func (s SendVideo) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s SendVideo) GetHeight() OptInt {
	return s.Height
}

// GetThumb returns the value of Thumb.
func (s SendVideo) GetThumb() OptString {
	return s.Thumb
}

// GetCaption returns the value of Caption.
func (s SendVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s SendVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s SendVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetSupportsStreaming returns the value of SupportsStreaming.
func (s SendVideo) GetSupportsStreaming() OptBool {
	return s.SupportsStreaming
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendVideo) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendVideo) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendVideo) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendVideo) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendVideo) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendVideo) SetChatID(val ID) {
	s.ChatID = val
}

// SetVideo sets the value of Video.
func (s *SendVideo) SetVideo(val string) {
	s.Video = val
}

// SetDuration sets the value of Duration.
func (s *SendVideo) SetDuration(val OptInt) {
	s.Duration = val
}

// SetWidth sets the value of Width.
func (s *SendVideo) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *SendVideo) SetHeight(val OptInt) {
	s.Height = val
}

// SetThumb sets the value of Thumb.
func (s *SendVideo) SetThumb(val OptString) {
	s.Thumb = val
}

// SetCaption sets the value of Caption.
func (s *SendVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetSupportsStreaming sets the value of SupportsStreaming.
func (s *SendVideo) SetSupportsStreaming(val OptBool) {
	s.SupportsStreaming = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVideo) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVideo) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendVideo) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendVideo) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVideo) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVideoNote.
// Ref: #/components/schemas/sendVideoNote
type SendVideoNote struct {
	ChatID ID `json:"chat_id"`
	// Video note to send. Pass a file_id as String to send a video note that exists on the Telegram
	// servers (recommended) or upload a new video using multipart/form-data. . Sending video notes by a
	// URL is currently unsupported.
	VideoNote string `json:"video_note"`
	// Duration of sent video in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Video width and height, i.e. diameter of the video message.
	Length OptInt `json:"length,omitempty"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>.
	Thumb OptString `json:"thumb,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendVideoNote) GetChatID() ID {
	return s.ChatID
}

// GetVideoNote returns the value of VideoNote.
func (s SendVideoNote) GetVideoNote() string {
	return s.VideoNote
}

// GetDuration returns the value of Duration.
func (s SendVideoNote) GetDuration() OptInt {
	return s.Duration
}

// GetLength returns the value of Length.
func (s SendVideoNote) GetLength() OptInt {
	return s.Length
}

// GetThumb returns the value of Thumb.
func (s SendVideoNote) GetThumb() OptString {
	return s.Thumb
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendVideoNote) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendVideoNote) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendVideoNote) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendVideoNote) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendVideoNote) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendVideoNote) SetChatID(val ID) {
	s.ChatID = val
}

// SetVideoNote sets the value of VideoNote.
func (s *SendVideoNote) SetVideoNote(val string) {
	s.VideoNote = val
}

// SetDuration sets the value of Duration.
func (s *SendVideoNote) SetDuration(val OptInt) {
	s.Duration = val
}

// SetLength sets the value of Length.
func (s *SendVideoNote) SetLength(val OptInt) {
	s.Length = val
}

// SetThumb sets the value of Thumb.
func (s *SendVideoNote) SetThumb(val OptString) {
	s.Thumb = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVideoNote) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVideoNote) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendVideoNote) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendVideoNote) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVideoNote) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVoice.
// Ref: #/components/schemas/sendVoice
type SendVoice struct {
	ChatID ID `json:"chat_id"`
	// Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or
	// upload a new one using multipart/form-data.
	Voice string `json:"voice"`
	// Voice message caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption,omitempty"`
	// Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode OptString `json:"parse_mode,omitempty"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of parse_mode.
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Duration of the voice message in seconds.
	Duration OptInt `json:"duration,omitempty"`
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification,omitempty"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content,omitempty"`
	// If the message is a reply, ID of the original message.
	ReplyToMessageID OptInt `json:"reply_to_message_id,omitempty"`
	// Pass True, if the message should be sent even if the specified replied-to message is not found.
	AllowSendingWithoutReply OptBool            `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              OptSendReplyMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SendVoice) GetChatID() ID {
	return s.ChatID
}

// GetVoice returns the value of Voice.
func (s SendVoice) GetVoice() string {
	return s.Voice
}

// GetCaption returns the value of Caption.
func (s SendVoice) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s SendVoice) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s SendVoice) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDuration returns the value of Duration.
func (s SendVoice) GetDuration() OptInt {
	return s.Duration
}

// GetDisableNotification returns the value of DisableNotification.
func (s SendVoice) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s SendVoice) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyToMessageID returns the value of ReplyToMessageID.
func (s SendVoice) GetReplyToMessageID() OptInt {
	return s.ReplyToMessageID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s SendVoice) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s SendVoice) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendVoice) SetChatID(val ID) {
	s.ChatID = val
}

// SetVoice sets the value of Voice.
func (s *SendVoice) SetVoice(val string) {
	s.Voice = val
}

// SetCaption sets the value of Caption.
func (s *SendVoice) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendVoice) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendVoice) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDuration sets the value of Duration.
func (s *SendVoice) SetDuration(val OptInt) {
	s.Duration = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVoice) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVoice) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyToMessageID sets the value of ReplyToMessageID.
func (s *SendVoice) SetReplyToMessageID(val OptInt) {
	s.ReplyToMessageID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *SendVoice) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVoice) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for setChatAdministratorCustomTitle.
// Ref: #/components/schemas/setChatAdministratorCustomTitle
type SetChatAdministratorCustomTitle struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// New custom title for the administrator; 0-16 characters, emoji are not allowed.
	CustomTitle string `json:"custom_title"`
}

// GetChatID returns the value of ChatID.
func (s SetChatAdministratorCustomTitle) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s SetChatAdministratorCustomTitle) GetUserID() int64 {
	return s.UserID
}

// GetCustomTitle returns the value of CustomTitle.
func (s SetChatAdministratorCustomTitle) GetCustomTitle() string {
	return s.CustomTitle
}

// SetChatID sets the value of ChatID.
func (s *SetChatAdministratorCustomTitle) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *SetChatAdministratorCustomTitle) SetUserID(val int64) {
	s.UserID = val
}

// SetCustomTitle sets the value of CustomTitle.
func (s *SetChatAdministratorCustomTitle) SetCustomTitle(val string) {
	s.CustomTitle = val
}

// Input for setChatDescription.
// Ref: #/components/schemas/setChatDescription
type SetChatDescription struct {
	ChatID ID `json:"chat_id"`
	// New chat description, 0-255 characters.
	Description OptString `json:"description,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SetChatDescription) GetChatID() ID {
	return s.ChatID
}

// GetDescription returns the value of Description.
func (s SetChatDescription) GetDescription() OptString {
	return s.Description
}

// SetChatID sets the value of ChatID.
func (s *SetChatDescription) SetChatID(val ID) {
	s.ChatID = val
}

// SetDescription sets the value of Description.
func (s *SetChatDescription) SetDescription(val OptString) {
	s.Description = val
}

// Input for setChatMenuButton.
// Ref: #/components/schemas/setChatMenuButton
type SetChatMenuButton struct {
	// Unique identifier for the target private chat. If not specified, default bot's menu button will be
	// changed.
	ChatID     OptInt64      `json:"chat_id,omitempty"`
	MenuButton OptMenuButton `json:"menu_button,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s SetChatMenuButton) GetChatID() OptInt64 {
	return s.ChatID
}

// GetMenuButton returns the value of MenuButton.
func (s SetChatMenuButton) GetMenuButton() OptMenuButton {
	return s.MenuButton
}

// SetChatID sets the value of ChatID.
func (s *SetChatMenuButton) SetChatID(val OptInt64) {
	s.ChatID = val
}

// SetMenuButton sets the value of MenuButton.
func (s *SetChatMenuButton) SetMenuButton(val OptMenuButton) {
	s.MenuButton = val
}

// Input for setChatPermissions.
// Ref: #/components/schemas/setChatPermissions
type SetChatPermissions struct {
	ChatID      ID              `json:"chat_id"`
	Permissions ChatPermissions `json:"permissions"`
}

// GetChatID returns the value of ChatID.
func (s SetChatPermissions) GetChatID() ID {
	return s.ChatID
}

// GetPermissions returns the value of Permissions.
func (s SetChatPermissions) GetPermissions() ChatPermissions {
	return s.Permissions
}

// SetChatID sets the value of ChatID.
func (s *SetChatPermissions) SetChatID(val ID) {
	s.ChatID = val
}

// SetPermissions sets the value of Permissions.
func (s *SetChatPermissions) SetPermissions(val ChatPermissions) {
	s.Permissions = val
}

// Input for setChatPhoto.
// Ref: #/components/schemas/setChatPhoto
type SetChatPhoto struct {
	ChatID ID `json:"chat_id"`
	// New chat photo, uploaded using multipart/form-data.
	Photo string `json:"photo"`
}

// GetChatID returns the value of ChatID.
func (s SetChatPhoto) GetChatID() ID {
	return s.ChatID
}

// GetPhoto returns the value of Photo.
func (s SetChatPhoto) GetPhoto() string {
	return s.Photo
}

// SetChatID sets the value of ChatID.
func (s *SetChatPhoto) SetChatID(val ID) {
	s.ChatID = val
}

// SetPhoto sets the value of Photo.
func (s *SetChatPhoto) SetPhoto(val string) {
	s.Photo = val
}

// Input for setChatStickerSet.
// Ref: #/components/schemas/setChatStickerSet
type SetChatStickerSet struct {
	ChatID ID `json:"chat_id"`
	// Name of the sticker set to be set as the group sticker set.
	StickerSetName string `json:"sticker_set_name"`
}

// GetChatID returns the value of ChatID.
func (s SetChatStickerSet) GetChatID() ID {
	return s.ChatID
}

// GetStickerSetName returns the value of StickerSetName.
func (s SetChatStickerSet) GetStickerSetName() string {
	return s.StickerSetName
}

// SetChatID sets the value of ChatID.
func (s *SetChatStickerSet) SetChatID(val ID) {
	s.ChatID = val
}

// SetStickerSetName sets the value of StickerSetName.
func (s *SetChatStickerSet) SetStickerSetName(val string) {
	s.StickerSetName = val
}

// Input for setChatTitle.
// Ref: #/components/schemas/setChatTitle
type SetChatTitle struct {
	ChatID ID `json:"chat_id"`
	// New chat title, 1-255 characters.
	Title string `json:"title"`
}

// GetChatID returns the value of ChatID.
func (s SetChatTitle) GetChatID() ID {
	return s.ChatID
}

// GetTitle returns the value of Title.
func (s SetChatTitle) GetTitle() string {
	return s.Title
}

// SetChatID sets the value of ChatID.
func (s *SetChatTitle) SetChatID(val ID) {
	s.ChatID = val
}

// SetTitle sets the value of Title.
func (s *SetChatTitle) SetTitle(val string) {
	s.Title = val
}

// Input for setGameScore.
// Ref: #/components/schemas/setGameScore
type SetGameScore struct {
	// User identifier.
	UserID int64 `json:"user_id"`
	// New score, must be non-negative.
	Score int `json:"score"`
	// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or
	// banning cheaters.
	Force OptBool `json:"force,omitempty"`
	// Pass True, if the game message should not be automatically edited to include the current scoreboard.
	DisableEditMessage OptBool `json:"disable_edit_message,omitempty"`
	// Required if inline_message_id is not specified. Unique identifier for the target chat.
	ChatID OptInt64 `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the sent message.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id,omitempty"`
}

// GetUserID returns the value of UserID.
func (s SetGameScore) GetUserID() int64 {
	return s.UserID
}

// GetScore returns the value of Score.
func (s SetGameScore) GetScore() int {
	return s.Score
}

// GetForce returns the value of Force.
func (s SetGameScore) GetForce() OptBool {
	return s.Force
}

// GetDisableEditMessage returns the value of DisableEditMessage.
func (s SetGameScore) GetDisableEditMessage() OptBool {
	return s.DisableEditMessage
}

// GetChatID returns the value of ChatID.
func (s SetGameScore) GetChatID() OptInt64 {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s SetGameScore) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s SetGameScore) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// SetUserID sets the value of UserID.
func (s *SetGameScore) SetUserID(val int64) {
	s.UserID = val
}

// SetScore sets the value of Score.
func (s *SetGameScore) SetScore(val int) {
	s.Score = val
}

// SetForce sets the value of Force.
func (s *SetGameScore) SetForce(val OptBool) {
	s.Force = val
}

// SetDisableEditMessage sets the value of DisableEditMessage.
func (s *SetGameScore) SetDisableEditMessage(val OptBool) {
	s.DisableEditMessage = val
}

// SetChatID sets the value of ChatID.
func (s *SetGameScore) SetChatID(val OptInt64) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *SetGameScore) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *SetGameScore) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// Input for setMyCommands.
// Ref: #/components/schemas/setMyCommands
type SetMyCommands struct {
	// A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100
	// commands can be specified.
	Commands []BotCommand       `json:"commands"`
	Scope    OptBotCommandScope `json:"scope,omitempty"`
	// A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the
	// given scope, for whose language there are no dedicated commands.
	LanguageCode OptString `json:"language_code,omitempty"`
}

// GetCommands returns the value of Commands.
func (s SetMyCommands) GetCommands() []BotCommand {
	return s.Commands
}

// GetScope returns the value of Scope.
func (s SetMyCommands) GetScope() OptBotCommandScope {
	return s.Scope
}

// GetLanguageCode returns the value of LanguageCode.
func (s SetMyCommands) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetCommands sets the value of Commands.
func (s *SetMyCommands) SetCommands(val []BotCommand) {
	s.Commands = val
}

// SetScope sets the value of Scope.
func (s *SetMyCommands) SetScope(val OptBotCommandScope) {
	s.Scope = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *SetMyCommands) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for setMyDefaultAdministratorRights.
// Ref: #/components/schemas/setMyDefaultAdministratorRights
type SetMyDefaultAdministratorRights struct {
	Rights OptChatAdministratorRights `json:"rights,omitempty"`
	// Pass True to change the default administrator rights of the bot in channels. Otherwise, the
	// default administrator rights of the bot for groups and supergroups will be changed.
	ForChannels OptBool `json:"for_channels,omitempty"`
}

// GetRights returns the value of Rights.
func (s SetMyDefaultAdministratorRights) GetRights() OptChatAdministratorRights {
	return s.Rights
}

// GetForChannels returns the value of ForChannels.
func (s SetMyDefaultAdministratorRights) GetForChannels() OptBool {
	return s.ForChannels
}

// SetRights sets the value of Rights.
func (s *SetMyDefaultAdministratorRights) SetRights(val OptChatAdministratorRights) {
	s.Rights = val
}

// SetForChannels sets the value of ForChannels.
func (s *SetMyDefaultAdministratorRights) SetForChannels(val OptBool) {
	s.ForChannels = val
}

// Input for setPassportDataErrors.
// Ref: #/components/schemas/setPassportDataErrors
type SetPassportDataErrors struct {
	// User identifier.
	UserID int64 `json:"user_id"`
	// A JSON-serialized array describing the errors.
	Errors []PassportElementError `json:"errors"`
}

// GetUserID returns the value of UserID.
func (s SetPassportDataErrors) GetUserID() int64 {
	return s.UserID
}

// GetErrors returns the value of Errors.
func (s SetPassportDataErrors) GetErrors() []PassportElementError {
	return s.Errors
}

// SetUserID sets the value of UserID.
func (s *SetPassportDataErrors) SetUserID(val int64) {
	s.UserID = val
}

// SetErrors sets the value of Errors.
func (s *SetPassportDataErrors) SetErrors(val []PassportElementError) {
	s.Errors = val
}

// Input for setStickerPositionInSet.
// Ref: #/components/schemas/setStickerPositionInSet
type SetStickerPositionInSet struct {
	// File identifier of the sticker.
	Sticker string `json:"sticker"`
	// New sticker position in the set, zero-based.
	Position int `json:"position"`
}

// GetSticker returns the value of Sticker.
func (s SetStickerPositionInSet) GetSticker() string {
	return s.Sticker
}

// GetPosition returns the value of Position.
func (s SetStickerPositionInSet) GetPosition() int {
	return s.Position
}

// SetSticker sets the value of Sticker.
func (s *SetStickerPositionInSet) SetSticker(val string) {
	s.Sticker = val
}

// SetPosition sets the value of Position.
func (s *SetStickerPositionInSet) SetPosition(val int) {
	s.Position = val
}

// Input for setStickerSetThumb.
// Ref: #/components/schemas/setStickerSetThumb
type SetStickerSetThumb struct {
	// Sticker set name.
	Name string `json:"name"`
	// User identifier of the sticker set owner.
	UserID int64 `json:"user_id"`
	// A PNG image with the thumbnail, must be up to 128 kilobytes in size and have width and height
	// exactly 100px, or a TGS animation with the thumbnail up to 32 kilobytes in size; see https://core.
	// telegram.org/stickers#animated-sticker-requirements for animated sticker technical requirements,
	// or a WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.
	// org/stickers#video-sticker-requirements for video sticker technical requirements. Pass a file_id
	// as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a
	// String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data.
	//  . Animated sticker set thumbnails can't be uploaded via HTTP URL.
	Thumb OptString `json:"thumb,omitempty"`
}

// GetName returns the value of Name.
func (s SetStickerSetThumb) GetName() string {
	return s.Name
}

// GetUserID returns the value of UserID.
func (s SetStickerSetThumb) GetUserID() int64 {
	return s.UserID
}

// GetThumb returns the value of Thumb.
func (s SetStickerSetThumb) GetThumb() OptString {
	return s.Thumb
}

// SetName sets the value of Name.
func (s *SetStickerSetThumb) SetName(val string) {
	s.Name = val
}

// SetUserID sets the value of UserID.
func (s *SetStickerSetThumb) SetUserID(val int64) {
	s.UserID = val
}

// SetThumb sets the value of Thumb.
func (s *SetStickerSetThumb) SetThumb(val OptString) {
	s.Thumb = val
}

// Input for setWebhook.
// Ref: #/components/schemas/setWebhook
type SetWebhook struct {
	// HTTPS url to send updates to. Use an empty string to remove webhook integration.
	URL string `json:"url"`
	// Upload your public key certificate so that the root certificate in use can be checked. See our
	// self-signed guide for details.
	Certificate OptString `json:"certificate,omitempty"`
	// The fixed IP address which will be used to send webhook requests instead of the IP address
	// resolved through DNS.
	IPAddress OptString `json:"ip_address,omitempty"`
	// Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100.
	//  Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to
	// increase your bot's throughput.
	MaxConnections OptInt `json:"max_connections,omitempty"`
	// A JSON-serialized list of the update types you want your bot to receive. For example, specify
	// ["message", "edited_channel_post", "callback_query"] to only receive updates of these types. See
	// Update for a complete list of available update types. Specify an empty list to receive all update
	// types except chat_member (default). If not specified, the previous setting will be used.Please
	// note that this parameter doesn't affect updates created before the call to the setWebhook, so
	// unwanted updates may be received for a short period of time.
	AllowedUpdates []string `json:"allowed_updates,omitempty"`
	// Pass True to drop all pending updates.
	DropPendingUpdates OptBool `json:"drop_pending_updates,omitempty"`
}

// GetURL returns the value of URL.
func (s SetWebhook) GetURL() string {
	return s.URL
}

// GetCertificate returns the value of Certificate.
func (s SetWebhook) GetCertificate() OptString {
	return s.Certificate
}

// GetIPAddress returns the value of IPAddress.
func (s SetWebhook) GetIPAddress() OptString {
	return s.IPAddress
}

// GetMaxConnections returns the value of MaxConnections.
func (s SetWebhook) GetMaxConnections() OptInt {
	return s.MaxConnections
}

// GetAllowedUpdates returns the value of AllowedUpdates.
func (s SetWebhook) GetAllowedUpdates() []string {
	return s.AllowedUpdates
}

// GetDropPendingUpdates returns the value of DropPendingUpdates.
func (s SetWebhook) GetDropPendingUpdates() OptBool {
	return s.DropPendingUpdates
}

// SetURL sets the value of URL.
func (s *SetWebhook) SetURL(val string) {
	s.URL = val
}

// SetCertificate sets the value of Certificate.
func (s *SetWebhook) SetCertificate(val OptString) {
	s.Certificate = val
}

// SetIPAddress sets the value of IPAddress.
func (s *SetWebhook) SetIPAddress(val OptString) {
	s.IPAddress = val
}

// SetMaxConnections sets the value of MaxConnections.
func (s *SetWebhook) SetMaxConnections(val OptInt) {
	s.MaxConnections = val
}

// SetAllowedUpdates sets the value of AllowedUpdates.
func (s *SetWebhook) SetAllowedUpdates(val []string) {
	s.AllowedUpdates = val
}

// SetDropPendingUpdates sets the value of DropPendingUpdates.
func (s *SetWebhook) SetDropPendingUpdates(val OptBool) {
	s.DropPendingUpdates = val
}

// This object represents a shipping address.
// Ref: #/components/schemas/ShippingAddress
type ShippingAddress struct {
	// ISO 3166-1 alpha-2 country code.
	CountryCode string `json:"country_code"`
	// State, if applicable.
	State string `json:"state"`
	// City.
	City string `json:"city"`
	// First line for the address.
	StreetLine1 string `json:"street_line1"`
	// Second line for the address.
	StreetLine2 string `json:"street_line2"`
	// Address post code.
	PostCode string `json:"post_code"`
}

// GetCountryCode returns the value of CountryCode.
func (s ShippingAddress) GetCountryCode() string {
	return s.CountryCode
}

// GetState returns the value of State.
func (s ShippingAddress) GetState() string {
	return s.State
}

// GetCity returns the value of City.
func (s ShippingAddress) GetCity() string {
	return s.City
}

// GetStreetLine1 returns the value of StreetLine1.
func (s ShippingAddress) GetStreetLine1() string {
	return s.StreetLine1
}

// GetStreetLine2 returns the value of StreetLine2.
func (s ShippingAddress) GetStreetLine2() string {
	return s.StreetLine2
}

// GetPostCode returns the value of PostCode.
func (s ShippingAddress) GetPostCode() string {
	return s.PostCode
}

// SetCountryCode sets the value of CountryCode.
func (s *ShippingAddress) SetCountryCode(val string) {
	s.CountryCode = val
}

// SetState sets the value of State.
func (s *ShippingAddress) SetState(val string) {
	s.State = val
}

// SetCity sets the value of City.
func (s *ShippingAddress) SetCity(val string) {
	s.City = val
}

// SetStreetLine1 sets the value of StreetLine1.
func (s *ShippingAddress) SetStreetLine1(val string) {
	s.StreetLine1 = val
}

// SetStreetLine2 sets the value of StreetLine2.
func (s *ShippingAddress) SetStreetLine2(val string) {
	s.StreetLine2 = val
}

// SetPostCode sets the value of PostCode.
func (s *ShippingAddress) SetPostCode(val string) {
	s.PostCode = val
}

// This object represents one shipping option.
// Ref: #/components/schemas/ShippingOption
type ShippingOption struct {
	// Shipping option identifier.
	ID string `json:"id"`
	// Option title.
	Title string `json:"title"`
	// List of price portions.
	Prices []LabeledPrice `json:"prices"`
}

// GetID returns the value of ID.
func (s ShippingOption) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s ShippingOption) GetTitle() string {
	return s.Title
}

// GetPrices returns the value of Prices.
func (s ShippingOption) GetPrices() []LabeledPrice {
	return s.Prices
}

// SetID sets the value of ID.
func (s *ShippingOption) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ShippingOption) SetTitle(val string) {
	s.Title = val
}

// SetPrices sets the value of Prices.
func (s *ShippingOption) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// This object contains information about an incoming shipping query.
// Ref: #/components/schemas/ShippingQuery
type ShippingQuery struct {
	// Unique query identifier.
	ID   string `json:"id"`
	From User   `json:"from"`
	// Bot specified invoice payload.
	InvoicePayload  string          `json:"invoice_payload"`
	ShippingAddress ShippingAddress `json:"shipping_address"`
}

// GetID returns the value of ID.
func (s ShippingQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s ShippingQuery) GetFrom() User {
	return s.From
}

// GetInvoicePayload returns the value of InvoicePayload.
func (s ShippingQuery) GetInvoicePayload() string {
	return s.InvoicePayload
}

// GetShippingAddress returns the value of ShippingAddress.
func (s ShippingQuery) GetShippingAddress() ShippingAddress {
	return s.ShippingAddress
}

// SetID sets the value of ID.
func (s *ShippingQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *ShippingQuery) SetFrom(val User) {
	s.From = val
}

// SetInvoicePayload sets the value of InvoicePayload.
func (s *ShippingQuery) SetInvoicePayload(val string) {
	s.InvoicePayload = val
}

// SetShippingAddress sets the value of ShippingAddress.
func (s *ShippingQuery) SetShippingAddress(val ShippingAddress) {
	s.ShippingAddress = val
}

// This object represents a sticker.
// Ref: #/components/schemas/Sticker
type Sticker struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Sticker width.
	Width int `json:"width"`
	// Sticker height.
	Height int `json:"height"`
	// True, if the sticker is animated.
	IsAnimated bool `json:"is_animated"`
	// True, if the sticker is a video sticker.
	IsVideo bool         `json:"is_video"`
	Thumb   OptPhotoSize `json:"thumb,omitempty"`
	// Emoji associated with the sticker.
	Emoji OptString `json:"emoji,omitempty"`
	// Name of the sticker set to which the sticker belongs.
	SetName      OptString       `json:"set_name,omitempty"`
	MaskPosition OptMaskPosition `json:"mask_position,omitempty"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s Sticker) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s Sticker) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s Sticker) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s Sticker) GetHeight() int {
	return s.Height
}

// GetIsAnimated returns the value of IsAnimated.
func (s Sticker) GetIsAnimated() bool {
	return s.IsAnimated
}

// GetIsVideo returns the value of IsVideo.
func (s Sticker) GetIsVideo() bool {
	return s.IsVideo
}

// GetThumb returns the value of Thumb.
func (s Sticker) GetThumb() OptPhotoSize {
	return s.Thumb
}

// GetEmoji returns the value of Emoji.
func (s Sticker) GetEmoji() OptString {
	return s.Emoji
}

// GetSetName returns the value of SetName.
func (s Sticker) GetSetName() OptString {
	return s.SetName
}

// GetMaskPosition returns the value of MaskPosition.
func (s Sticker) GetMaskPosition() OptMaskPosition {
	return s.MaskPosition
}

// GetFileSize returns the value of FileSize.
func (s Sticker) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Sticker) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Sticker) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *Sticker) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Sticker) SetHeight(val int) {
	s.Height = val
}

// SetIsAnimated sets the value of IsAnimated.
func (s *Sticker) SetIsAnimated(val bool) {
	s.IsAnimated = val
}

// SetIsVideo sets the value of IsVideo.
func (s *Sticker) SetIsVideo(val bool) {
	s.IsVideo = val
}

// SetThumb sets the value of Thumb.
func (s *Sticker) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// SetEmoji sets the value of Emoji.
func (s *Sticker) SetEmoji(val OptString) {
	s.Emoji = val
}

// SetSetName sets the value of SetName.
func (s *Sticker) SetSetName(val OptString) {
	s.SetName = val
}

// SetMaskPosition sets the value of MaskPosition.
func (s *Sticker) SetMaskPosition(val OptMaskPosition) {
	s.MaskPosition = val
}

// SetFileSize sets the value of FileSize.
func (s *Sticker) SetFileSize(val OptInt) {
	s.FileSize = val
}

// This object represents a sticker set.
// Ref: #/components/schemas/StickerSet
type StickerSet struct {
	// Sticker set name.
	Name string `json:"name"`
	// Sticker set title.
	Title string `json:"title"`
	// True, if the sticker set contains animated stickers.
	IsAnimated bool `json:"is_animated"`
	// True, if the sticker set contains video stickers.
	IsVideo bool `json:"is_video"`
	// True, if the sticker set contains masks.
	ContainsMasks bool `json:"contains_masks"`
	// List of all set stickers.
	Stickers []Sticker    `json:"stickers"`
	Thumb    OptPhotoSize `json:"thumb,omitempty"`
}

// GetName returns the value of Name.
func (s StickerSet) GetName() string {
	return s.Name
}

// GetTitle returns the value of Title.
func (s StickerSet) GetTitle() string {
	return s.Title
}

// GetIsAnimated returns the value of IsAnimated.
func (s StickerSet) GetIsAnimated() bool {
	return s.IsAnimated
}

// GetIsVideo returns the value of IsVideo.
func (s StickerSet) GetIsVideo() bool {
	return s.IsVideo
}

// GetContainsMasks returns the value of ContainsMasks.
func (s StickerSet) GetContainsMasks() bool {
	return s.ContainsMasks
}

// GetStickers returns the value of Stickers.
func (s StickerSet) GetStickers() []Sticker {
	return s.Stickers
}

// GetThumb returns the value of Thumb.
func (s StickerSet) GetThumb() OptPhotoSize {
	return s.Thumb
}

// SetName sets the value of Name.
func (s *StickerSet) SetName(val string) {
	s.Name = val
}

// SetTitle sets the value of Title.
func (s *StickerSet) SetTitle(val string) {
	s.Title = val
}

// SetIsAnimated sets the value of IsAnimated.
func (s *StickerSet) SetIsAnimated(val bool) {
	s.IsAnimated = val
}

// SetIsVideo sets the value of IsVideo.
func (s *StickerSet) SetIsVideo(val bool) {
	s.IsVideo = val
}

// SetContainsMasks sets the value of ContainsMasks.
func (s *StickerSet) SetContainsMasks(val bool) {
	s.ContainsMasks = val
}

// SetStickers sets the value of Stickers.
func (s *StickerSet) SetStickers(val []Sticker) {
	s.Stickers = val
}

// SetThumb sets the value of Thumb.
func (s *StickerSet) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// Input for stopMessageLiveLocation.
// Ref: #/components/schemas/stopMessageLiveLocation
type StopMessageLiveLocation struct {
	ChatID OptID `json:"chat_id,omitempty"`
	// Required if inline_message_id is not specified. Identifier of the message with live location to
	// stop.
	MessageID OptInt `json:"message_id,omitempty"`
	// Required if chat_id and message_id are not specified. Identifier of the inline message.
	InlineMessageID OptString               `json:"inline_message_id,omitempty"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s StopMessageLiveLocation) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s StopMessageLiveLocation) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s StopMessageLiveLocation) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s StopMessageLiveLocation) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *StopMessageLiveLocation) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *StopMessageLiveLocation) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *StopMessageLiveLocation) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *StopMessageLiveLocation) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for stopPoll.
// Ref: #/components/schemas/stopPoll
type StopPoll struct {
	ChatID ID `json:"chat_id"`
	// Identifier of the original message with the poll.
	MessageID   int                     `json:"message_id"`
	ReplyMarkup OptInlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s StopPoll) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s StopPoll) GetMessageID() int {
	return s.MessageID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s StopPoll) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *StopPoll) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *StopPoll) SetMessageID(val int) {
	s.MessageID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *StopPoll) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// This object contains basic information about a successful payment.
// Ref: #/components/schemas/SuccessfulPayment
type SuccessfulPayment struct {
	// Three-letter ISO 4217 currency code.
	Currency string `json:"currency"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a
	// price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number
	// of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
	// Bot specified invoice payload.
	InvoicePayload string `json:"invoice_payload"`
	// Identifier of the shipping option chosen by the user.
	ShippingOptionID OptString    `json:"shipping_option_id,omitempty"`
	OrderInfo        OptOrderInfo `json:"order_info,omitempty"`
	// Telegram payment identifier.
	TelegramPaymentChargeID string `json:"telegram_payment_charge_id"`
	// Provider payment identifier.
	ProviderPaymentChargeID string `json:"provider_payment_charge_id"`
}

// GetCurrency returns the value of Currency.
func (s SuccessfulPayment) GetCurrency() string {
	return s.Currency
}

// GetTotalAmount returns the value of TotalAmount.
func (s SuccessfulPayment) GetTotalAmount() int {
	return s.TotalAmount
}

// GetInvoicePayload returns the value of InvoicePayload.
func (s SuccessfulPayment) GetInvoicePayload() string {
	return s.InvoicePayload
}

// GetShippingOptionID returns the value of ShippingOptionID.
func (s SuccessfulPayment) GetShippingOptionID() OptString {
	return s.ShippingOptionID
}

// GetOrderInfo returns the value of OrderInfo.
func (s SuccessfulPayment) GetOrderInfo() OptOrderInfo {
	return s.OrderInfo
}

// GetTelegramPaymentChargeID returns the value of TelegramPaymentChargeID.
func (s SuccessfulPayment) GetTelegramPaymentChargeID() string {
	return s.TelegramPaymentChargeID
}

// GetProviderPaymentChargeID returns the value of ProviderPaymentChargeID.
func (s SuccessfulPayment) GetProviderPaymentChargeID() string {
	return s.ProviderPaymentChargeID
}

// SetCurrency sets the value of Currency.
func (s *SuccessfulPayment) SetCurrency(val string) {
	s.Currency = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SuccessfulPayment) SetTotalAmount(val int) {
	s.TotalAmount = val
}

// SetInvoicePayload sets the value of InvoicePayload.
func (s *SuccessfulPayment) SetInvoicePayload(val string) {
	s.InvoicePayload = val
}

// SetShippingOptionID sets the value of ShippingOptionID.
func (s *SuccessfulPayment) SetShippingOptionID(val OptString) {
	s.ShippingOptionID = val
}

// SetOrderInfo sets the value of OrderInfo.
func (s *SuccessfulPayment) SetOrderInfo(val OptOrderInfo) {
	s.OrderInfo = val
}

// SetTelegramPaymentChargeID sets the value of TelegramPaymentChargeID.
func (s *SuccessfulPayment) SetTelegramPaymentChargeID(val string) {
	s.TelegramPaymentChargeID = val
}

// SetProviderPaymentChargeID sets the value of ProviderPaymentChargeID.
func (s *SuccessfulPayment) SetProviderPaymentChargeID(val string) {
	s.ProviderPaymentChargeID = val
}

// Input for unbanChatMember.
// Ref: #/components/schemas/unbanChatMember
type UnbanChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Do nothing if the user is not banned.
	OnlyIfBanned OptBool `json:"only_if_banned,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s UnbanChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s UnbanChatMember) GetUserID() int64 {
	return s.UserID
}

// GetOnlyIfBanned returns the value of OnlyIfBanned.
func (s UnbanChatMember) GetOnlyIfBanned() OptBool {
	return s.OnlyIfBanned
}

// SetChatID sets the value of ChatID.
func (s *UnbanChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *UnbanChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetOnlyIfBanned sets the value of OnlyIfBanned.
func (s *UnbanChatMember) SetOnlyIfBanned(val OptBool) {
	s.OnlyIfBanned = val
}

// Input for unbanChatSenderChat.
// Ref: #/components/schemas/unbanChatSenderChat
type UnbanChatSenderChat struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target sender chat.
	SenderChatID int64 `json:"sender_chat_id"`
}

// GetChatID returns the value of ChatID.
func (s UnbanChatSenderChat) GetChatID() ID {
	return s.ChatID
}

// GetSenderChatID returns the value of SenderChatID.
func (s UnbanChatSenderChat) GetSenderChatID() int64 {
	return s.SenderChatID
}

// SetChatID sets the value of ChatID.
func (s *UnbanChatSenderChat) SetChatID(val ID) {
	s.ChatID = val
}

// SetSenderChatID sets the value of SenderChatID.
func (s *UnbanChatSenderChat) SetSenderChatID(val int64) {
	s.SenderChatID = val
}

// Input for unpinAllChatMessages.
// Ref: #/components/schemas/unpinAllChatMessages
type UnpinAllChatMessages struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s UnpinAllChatMessages) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *UnpinAllChatMessages) SetChatID(val ID) {
	s.ChatID = val
}

// Input for unpinChatMessage.
// Ref: #/components/schemas/unpinChatMessage
type UnpinChatMessage struct {
	ChatID ID `json:"chat_id"`
	// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending
	// date) will be unpinned.
	MessageID OptInt `json:"message_id,omitempty"`
}

// GetChatID returns the value of ChatID.
func (s UnpinChatMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s UnpinChatMessage) GetMessageID() OptInt {
	return s.MessageID
}

// SetChatID sets the value of ChatID.
func (s *UnpinChatMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *UnpinChatMessage) SetMessageID(val OptInt) {
	s.MessageID = val
}

// This object represents an incoming update.At most one of the optional parameters can be present in
// any given update.
// Ref: #/components/schemas/Update
type Update struct {
	// The update's unique identifier. Update identifiers start from a certain positive number and
	// increase sequentially. This ID becomes especially handy if you're using Webhooks, since it allows
	// you to ignore repeated updates or to restore the correct update sequence, should they get out of
	// order. If there are no new updates for at least a week, then identifier of the next update will be
	// chosen randomly instead of sequentially.
	UpdateID           int                   `json:"update_id"`
	Message            OptMessage            `json:"message,omitempty"`
	EditedMessage      OptMessage            `json:"edited_message,omitempty"`
	ChannelPost        OptMessage            `json:"channel_post,omitempty"`
	EditedChannelPost  OptMessage            `json:"edited_channel_post,omitempty"`
	InlineQuery        OptInlineQuery        `json:"inline_query,omitempty"`
	ChosenInlineResult OptChosenInlineResult `json:"chosen_inline_result,omitempty"`
	CallbackQuery      OptCallbackQuery      `json:"callback_query,omitempty"`
	ShippingQuery      OptShippingQuery      `json:"shipping_query,omitempty"`
	PreCheckoutQuery   OptPreCheckoutQuery   `json:"pre_checkout_query,omitempty"`
	Poll               OptPoll               `json:"poll,omitempty"`
	PollAnswer         OptPollAnswer         `json:"poll_answer,omitempty"`
	MyChatMember       OptChatMemberUpdated  `json:"my_chat_member,omitempty"`
	ChatMember         OptChatMemberUpdated  `json:"chat_member,omitempty"`
	ChatJoinRequest    OptChatJoinRequest    `json:"chat_join_request,omitempty"`
}

// GetUpdateID returns the value of UpdateID.
func (s Update) GetUpdateID() int {
	return s.UpdateID
}

// GetMessage returns the value of Message.
func (s Update) GetMessage() OptMessage {
	return s.Message
}

// GetEditedMessage returns the value of EditedMessage.
func (s Update) GetEditedMessage() OptMessage {
	return s.EditedMessage
}

// GetChannelPost returns the value of ChannelPost.
func (s Update) GetChannelPost() OptMessage {
	return s.ChannelPost
}

// GetEditedChannelPost returns the value of EditedChannelPost.
func (s Update) GetEditedChannelPost() OptMessage {
	return s.EditedChannelPost
}

// GetInlineQuery returns the value of InlineQuery.
func (s Update) GetInlineQuery() OptInlineQuery {
	return s.InlineQuery
}

// GetChosenInlineResult returns the value of ChosenInlineResult.
func (s Update) GetChosenInlineResult() OptChosenInlineResult {
	return s.ChosenInlineResult
}

// GetCallbackQuery returns the value of CallbackQuery.
func (s Update) GetCallbackQuery() OptCallbackQuery {
	return s.CallbackQuery
}

// GetShippingQuery returns the value of ShippingQuery.
func (s Update) GetShippingQuery() OptShippingQuery {
	return s.ShippingQuery
}

// GetPreCheckoutQuery returns the value of PreCheckoutQuery.
func (s Update) GetPreCheckoutQuery() OptPreCheckoutQuery {
	return s.PreCheckoutQuery
}

// GetPoll returns the value of Poll.
func (s Update) GetPoll() OptPoll {
	return s.Poll
}

// GetPollAnswer returns the value of PollAnswer.
func (s Update) GetPollAnswer() OptPollAnswer {
	return s.PollAnswer
}

// GetMyChatMember returns the value of MyChatMember.
func (s Update) GetMyChatMember() OptChatMemberUpdated {
	return s.MyChatMember
}

// GetChatMember returns the value of ChatMember.
func (s Update) GetChatMember() OptChatMemberUpdated {
	return s.ChatMember
}

// GetChatJoinRequest returns the value of ChatJoinRequest.
func (s Update) GetChatJoinRequest() OptChatJoinRequest {
	return s.ChatJoinRequest
}

// SetUpdateID sets the value of UpdateID.
func (s *Update) SetUpdateID(val int) {
	s.UpdateID = val
}

// SetMessage sets the value of Message.
func (s *Update) SetMessage(val OptMessage) {
	s.Message = val
}

// SetEditedMessage sets the value of EditedMessage.
func (s *Update) SetEditedMessage(val OptMessage) {
	s.EditedMessage = val
}

// SetChannelPost sets the value of ChannelPost.
func (s *Update) SetChannelPost(val OptMessage) {
	s.ChannelPost = val
}

// SetEditedChannelPost sets the value of EditedChannelPost.
func (s *Update) SetEditedChannelPost(val OptMessage) {
	s.EditedChannelPost = val
}

// SetInlineQuery sets the value of InlineQuery.
func (s *Update) SetInlineQuery(val OptInlineQuery) {
	s.InlineQuery = val
}

// SetChosenInlineResult sets the value of ChosenInlineResult.
func (s *Update) SetChosenInlineResult(val OptChosenInlineResult) {
	s.ChosenInlineResult = val
}

// SetCallbackQuery sets the value of CallbackQuery.
func (s *Update) SetCallbackQuery(val OptCallbackQuery) {
	s.CallbackQuery = val
}

// SetShippingQuery sets the value of ShippingQuery.
func (s *Update) SetShippingQuery(val OptShippingQuery) {
	s.ShippingQuery = val
}

// SetPreCheckoutQuery sets the value of PreCheckoutQuery.
func (s *Update) SetPreCheckoutQuery(val OptPreCheckoutQuery) {
	s.PreCheckoutQuery = val
}

// SetPoll sets the value of Poll.
func (s *Update) SetPoll(val OptPoll) {
	s.Poll = val
}

// SetPollAnswer sets the value of PollAnswer.
func (s *Update) SetPollAnswer(val OptPollAnswer) {
	s.PollAnswer = val
}

// SetMyChatMember sets the value of MyChatMember.
func (s *Update) SetMyChatMember(val OptChatMemberUpdated) {
	s.MyChatMember = val
}

// SetChatMember sets the value of ChatMember.
func (s *Update) SetChatMember(val OptChatMemberUpdated) {
	s.ChatMember = val
}

// SetChatJoinRequest sets the value of ChatJoinRequest.
func (s *Update) SetChatJoinRequest(val OptChatJoinRequest) {
	s.ChatJoinRequest = val
}

// Input for uploadStickerFile.
// Ref: #/components/schemas/uploadStickerFile
type UploadStickerFile struct {
	// User identifier of sticker file owner.
	UserID int64 `json:"user_id"`
	// PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px,
	// and either width or height must be exactly 512px.
	PNGSticker string `json:"png_sticker"`
}

// GetUserID returns the value of UserID.
func (s UploadStickerFile) GetUserID() int64 {
	return s.UserID
}

// GetPNGSticker returns the value of PNGSticker.
func (s UploadStickerFile) GetPNGSticker() string {
	return s.PNGSticker
}

// SetUserID sets the value of UserID.
func (s *UploadStickerFile) SetUserID(val int64) {
	s.UserID = val
}

// SetPNGSticker sets the value of PNGSticker.
func (s *UploadStickerFile) SetPNGSticker(val string) {
	s.PNGSticker = val
}

// This object represents a Telegram user or bot.
// Ref: #/components/schemas/User
type User struct {
	// Unique identifier for this user or bot. This number may have more than 32 significant bits and
	// some programming languages may have difficulty/silent defects in interpreting it. But it has at
	// most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing
	// this identifier.
	ID int64 `json:"id"`
	// True, if this user is a bot.
	IsBot bool `json:"is_bot"`
	// User's or bot's first name.
	FirstName string `json:"first_name"`
	// User's or bot's last name.
	LastName OptString `json:"last_name,omitempty"`
	// User's or bot's username.
	Username OptString `json:"username,omitempty"`
	// IETF language tag of the user's language.
	LanguageCode OptString `json:"language_code,omitempty"`
	// True, if the bot can be invited to groups. Returned only in getMe.
	CanJoinGroups OptBool `json:"can_join_groups,omitempty"`
	// True, if privacy mode is disabled for the bot. Returned only in getMe.
	CanReadAllGroupMessages OptBool `json:"can_read_all_group_messages,omitempty"`
	// True, if the bot supports inline queries. Returned only in getMe.
	SupportsInlineQueries OptBool `json:"supports_inline_queries,omitempty"`
}

// GetID returns the value of ID.
func (s User) GetID() int64 {
	return s.ID
}

// GetIsBot returns the value of IsBot.
func (s User) GetIsBot() bool {
	return s.IsBot
}

// GetFirstName returns the value of FirstName.
func (s User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s User) GetLastName() OptString {
	return s.LastName
}

// GetUsername returns the value of Username.
func (s User) GetUsername() OptString {
	return s.Username
}

// GetLanguageCode returns the value of LanguageCode.
func (s User) GetLanguageCode() OptString {
	return s.LanguageCode
}

// GetCanJoinGroups returns the value of CanJoinGroups.
func (s User) GetCanJoinGroups() OptBool {
	return s.CanJoinGroups
}

// GetCanReadAllGroupMessages returns the value of CanReadAllGroupMessages.
func (s User) GetCanReadAllGroupMessages() OptBool {
	return s.CanReadAllGroupMessages
}

// GetSupportsInlineQueries returns the value of SupportsInlineQueries.
func (s User) GetSupportsInlineQueries() OptBool {
	return s.SupportsInlineQueries
}

// SetID sets the value of ID.
func (s *User) SetID(val int64) {
	s.ID = val
}

// SetIsBot sets the value of IsBot.
func (s *User) SetIsBot(val bool) {
	s.IsBot = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val OptString) {
	s.LastName = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *User) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// SetCanJoinGroups sets the value of CanJoinGroups.
func (s *User) SetCanJoinGroups(val OptBool) {
	s.CanJoinGroups = val
}

// SetCanReadAllGroupMessages sets the value of CanReadAllGroupMessages.
func (s *User) SetCanReadAllGroupMessages(val OptBool) {
	s.CanReadAllGroupMessages = val
}

// SetSupportsInlineQueries sets the value of SupportsInlineQueries.
func (s *User) SetSupportsInlineQueries(val OptBool) {
	s.SupportsInlineQueries = val
}

// This object represent a user's profile pictures.
// Ref: #/components/schemas/UserProfilePhotos
type UserProfilePhotos struct {
	// Total number of profile pictures the target user has.
	TotalCount int `json:"total_count"`
	// Requested profile pictures (in up to 4 sizes each).
	Photos [][]PhotoSize `json:"photos"`
}

// GetTotalCount returns the value of TotalCount.
func (s UserProfilePhotos) GetTotalCount() int {
	return s.TotalCount
}

// GetPhotos returns the value of Photos.
func (s UserProfilePhotos) GetPhotos() [][]PhotoSize {
	return s.Photos
}

// SetTotalCount sets the value of TotalCount.
func (s *UserProfilePhotos) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetPhotos sets the value of Photos.
func (s *UserProfilePhotos) SetPhotos(val [][]PhotoSize) {
	s.Photos = val
}

// This object represents a venue.
// Ref: #/components/schemas/Venue
type Venue struct {
	Location Location `json:"location"`
	// Name of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// Foursquare identifier of the venue.
	FoursquareID OptString `json:"foursquare_id,omitempty"`
	// Foursquare type of the venue. (For example, "arts_entertainment/default",
	// "arts_entertainment/aquarium" or "food/icecream".).
	FoursquareType OptString `json:"foursquare_type,omitempty"`
	// Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id,omitempty"`
	// Google Places type of the venue. (See supported types.).
	GooglePlaceType OptString `json:"google_place_type,omitempty"`
}

// GetLocation returns the value of Location.
func (s Venue) GetLocation() Location {
	return s.Location
}

// GetTitle returns the value of Title.
func (s Venue) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s Venue) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s Venue) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s Venue) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s Venue) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s Venue) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// SetLocation sets the value of Location.
func (s *Venue) SetLocation(val Location) {
	s.Location = val
}

// SetTitle sets the value of Title.
func (s *Venue) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *Venue) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *Venue) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *Venue) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *Venue) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *Venue) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// This object represents a video file.
// Ref: #/components/schemas/Video
type Video struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Video width as defined by sender.
	Width int `json:"width"`
	// Video height as defined by sender.
	Height int `json:"height"`
	// Duration of the video in seconds as defined by sender.
	Duration int          `json:"duration"`
	Thumb    OptPhotoSize `json:"thumb,omitempty"`
	// Original filename as defined by sender.
	FileName OptString `json:"file_name,omitempty"`
	// Mime type of a file as defined by sender.
	MimeType OptString `json:"mime_type,omitempty"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s Video) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s Video) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s Video) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s Video) GetHeight() int {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s Video) GetDuration() int {
	return s.Duration
}

// GetThumb returns the value of Thumb.
func (s Video) GetThumb() OptPhotoSize {
	return s.Thumb
}

// GetFileName returns the value of FileName.
func (s Video) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s Video) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s Video) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Video) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Video) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *Video) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Video) SetHeight(val int) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *Video) SetDuration(val int) {
	s.Duration = val
}

// SetThumb sets the value of Thumb.
func (s *Video) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// SetFileName sets the value of FileName.
func (s *Video) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Video) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Video) SetFileSize(val OptInt) {
	s.FileSize = val
}

// This object represents a service message about a video chat ended in the chat.
// Ref: #/components/schemas/VideoChatEnded
type VideoChatEnded struct {
	// Video chat duration in seconds.
	Duration int `json:"duration"`
}

// GetDuration returns the value of Duration.
func (s VideoChatEnded) GetDuration() int {
	return s.Duration
}

// SetDuration sets the value of Duration.
func (s *VideoChatEnded) SetDuration(val int) {
	s.Duration = val
}

// This object represents a service message about new members invited to a video chat.
// Ref: #/components/schemas/VideoChatParticipantsInvited
type VideoChatParticipantsInvited struct {
	// New members that were invited to the video chat.
	Users []User `json:"users"`
}

// GetUsers returns the value of Users.
func (s VideoChatParticipantsInvited) GetUsers() []User {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *VideoChatParticipantsInvited) SetUsers(val []User) {
	s.Users = val
}

// This object represents a service message about a video chat scheduled in the chat.
// Ref: #/components/schemas/VideoChatScheduled
type VideoChatScheduled struct {
	// Point in time (Unix timestamp) when the video chat is supposed to be started by a chat
	// administrator.
	StartDate int `json:"start_date"`
}

// GetStartDate returns the value of StartDate.
func (s VideoChatScheduled) GetStartDate() int {
	return s.StartDate
}

// SetStartDate sets the value of StartDate.
func (s *VideoChatScheduled) SetStartDate(val int) {
	s.StartDate = val
}

// This object represents a service message about a video chat started in the chat. Currently holds
// no information.
// Ref: #/components/schemas/VideoChatStarted
type VideoChatStarted struct{}

// This object represents a video message (available in Telegram apps as of v.4.0).
// Ref: #/components/schemas/VideoNote
type VideoNote struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Video width and height (diameter of the video message) as defined by sender.
	Length int `json:"length"`
	// Duration of the video in seconds as defined by sender.
	Duration int          `json:"duration"`
	Thumb    OptPhotoSize `json:"thumb,omitempty"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s VideoNote) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s VideoNote) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetLength returns the value of Length.
func (s VideoNote) GetLength() int {
	return s.Length
}

// GetDuration returns the value of Duration.
func (s VideoNote) GetDuration() int {
	return s.Duration
}

// GetThumb returns the value of Thumb.
func (s VideoNote) GetThumb() OptPhotoSize {
	return s.Thumb
}

// GetFileSize returns the value of FileSize.
func (s VideoNote) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *VideoNote) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *VideoNote) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetLength sets the value of Length.
func (s *VideoNote) SetLength(val int) {
	s.Length = val
}

// SetDuration sets the value of Duration.
func (s *VideoNote) SetDuration(val int) {
	s.Duration = val
}

// SetThumb sets the value of Thumb.
func (s *VideoNote) SetThumb(val OptPhotoSize) {
	s.Thumb = val
}

// SetFileSize sets the value of FileSize.
func (s *VideoNote) SetFileSize(val OptInt) {
	s.FileSize = val
}

// This object represents a voice note.
// Ref: #/components/schemas/Voice
type Voice struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Duration of the audio in seconds as defined by sender.
	Duration int `json:"duration"`
	// MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type,omitempty"`
	// File size in bytes.
	FileSize OptInt `json:"file_size,omitempty"`
}

// GetFileID returns the value of FileID.
func (s Voice) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s Voice) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetDuration returns the value of Duration.
func (s Voice) GetDuration() int {
	return s.Duration
}

// GetMimeType returns the value of MimeType.
func (s Voice) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s Voice) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Voice) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Voice) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetDuration sets the value of Duration.
func (s *Voice) SetDuration(val int) {
	s.Duration = val
}

// SetMimeType sets the value of MimeType.
func (s *Voice) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Voice) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Contains data sent from a Web App to the bot.
// Ref: #/components/schemas/WebAppData
type WebAppData struct {
	// The data. Be aware that a bad client can send arbitrary data in this field.
	Data string `json:"data"`
	// Text of the web_app keyboard button, from which the Web App was opened. Be aware that a bad client
	// can send arbitrary data in this field.
	ButtonText string `json:"button_text"`
}

// GetData returns the value of Data.
func (s WebAppData) GetData() string {
	return s.Data
}

// GetButtonText returns the value of ButtonText.
func (s WebAppData) GetButtonText() string {
	return s.ButtonText
}

// SetData sets the value of Data.
func (s *WebAppData) SetData(val string) {
	s.Data = val
}

// SetButtonText sets the value of ButtonText.
func (s *WebAppData) SetButtonText(val string) {
	s.ButtonText = val
}

// Contains information about a Web App.
// Ref: #/components/schemas/WebAppInfo
type WebAppInfo struct {
	// An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps.
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s WebAppInfo) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *WebAppInfo) SetURL(val string) {
	s.URL = val
}

// Contains information about the current status of a webhook.
// Ref: #/components/schemas/WebhookInfo
type WebhookInfo struct {
	// Webhook URL, may be empty if webhook is not set up.
	URL string `json:"url"`
	// True, if a custom certificate was provided for webhook certificate checks.
	HasCustomCertificate bool `json:"has_custom_certificate"`
	// Number of updates awaiting delivery.
	PendingUpdateCount int `json:"pending_update_count"`
	// Currently used webhook IP address.
	IPAddress OptString `json:"ip_address,omitempty"`
	// Unix time for the most recent error that happened when trying to deliver an update via webhook.
	LastErrorDate OptInt `json:"last_error_date,omitempty"`
	// Error message in human-readable format for the most recent error that happened when trying to
	// deliver an update via webhook.
	LastErrorMessage OptString `json:"last_error_message,omitempty"`
	// Unix time of the most recent error that happened when trying to synchronize available updates with
	// Telegram datacenters.
	LastSynchronizationErrorDate OptInt `json:"last_synchronization_error_date,omitempty"`
	// Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery.
	MaxConnections OptInt `json:"max_connections,omitempty"`
	// A list of update types the bot is subscribed to. Defaults to all update types except chat_member.
	AllowedUpdates []string `json:"allowed_updates,omitempty"`
}

// GetURL returns the value of URL.
func (s WebhookInfo) GetURL() string {
	return s.URL
}

// GetHasCustomCertificate returns the value of HasCustomCertificate.
func (s WebhookInfo) GetHasCustomCertificate() bool {
	return s.HasCustomCertificate
}

// GetPendingUpdateCount returns the value of PendingUpdateCount.
func (s WebhookInfo) GetPendingUpdateCount() int {
	return s.PendingUpdateCount
}

// GetIPAddress returns the value of IPAddress.
func (s WebhookInfo) GetIPAddress() OptString {
	return s.IPAddress
}

// GetLastErrorDate returns the value of LastErrorDate.
func (s WebhookInfo) GetLastErrorDate() OptInt {
	return s.LastErrorDate
}

// GetLastErrorMessage returns the value of LastErrorMessage.
func (s WebhookInfo) GetLastErrorMessage() OptString {
	return s.LastErrorMessage
}

// GetLastSynchronizationErrorDate returns the value of LastSynchronizationErrorDate.
func (s WebhookInfo) GetLastSynchronizationErrorDate() OptInt {
	return s.LastSynchronizationErrorDate
}

// GetMaxConnections returns the value of MaxConnections.
func (s WebhookInfo) GetMaxConnections() OptInt {
	return s.MaxConnections
}

// GetAllowedUpdates returns the value of AllowedUpdates.
func (s WebhookInfo) GetAllowedUpdates() []string {
	return s.AllowedUpdates
}

// SetURL sets the value of URL.
func (s *WebhookInfo) SetURL(val string) {
	s.URL = val
}

// SetHasCustomCertificate sets the value of HasCustomCertificate.
func (s *WebhookInfo) SetHasCustomCertificate(val bool) {
	s.HasCustomCertificate = val
}

// SetPendingUpdateCount sets the value of PendingUpdateCount.
func (s *WebhookInfo) SetPendingUpdateCount(val int) {
	s.PendingUpdateCount = val
}

// SetIPAddress sets the value of IPAddress.
func (s *WebhookInfo) SetIPAddress(val OptString) {
	s.IPAddress = val
}

// SetLastErrorDate sets the value of LastErrorDate.
func (s *WebhookInfo) SetLastErrorDate(val OptInt) {
	s.LastErrorDate = val
}

// SetLastErrorMessage sets the value of LastErrorMessage.
func (s *WebhookInfo) SetLastErrorMessage(val OptString) {
	s.LastErrorMessage = val
}

// SetLastSynchronizationErrorDate sets the value of LastSynchronizationErrorDate.
func (s *WebhookInfo) SetLastSynchronizationErrorDate(val OptInt) {
	s.LastSynchronizationErrorDate = val
}

// SetMaxConnections sets the value of MaxConnections.
func (s *WebhookInfo) SetMaxConnections(val OptInt) {
	s.MaxConnections = val
}

// SetAllowedUpdates sets the value of AllowedUpdates.
func (s *WebhookInfo) SetAllowedUpdates(val []string) {
	s.AllowedUpdates = val
}

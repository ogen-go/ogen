// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		AddStickerToSet: ogenreflect.RuntimeOperation{
			Name: "AddStickerToSet",
			ID:   "addStickerToSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AddStickerToSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		AnswerCallbackQuery: ogenreflect.RuntimeOperation{
			Name: "AnswerCallbackQuery",
			ID:   "answerCallbackQuery",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AnswerCallbackQuery)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		AnswerInlineQuery: ogenreflect.RuntimeOperation{
			Name: "AnswerInlineQuery",
			ID:   "answerInlineQuery",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AnswerInlineQuery)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		AnswerPreCheckoutQuery: ogenreflect.RuntimeOperation{
			Name: "AnswerPreCheckoutQuery",
			ID:   "answerPreCheckoutQuery",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AnswerPreCheckoutQuery)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		AnswerShippingQuery: ogenreflect.RuntimeOperation{
			Name: "AnswerShippingQuery",
			ID:   "answerShippingQuery",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AnswerShippingQuery)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		AnswerWebAppQuery: ogenreflect.RuntimeOperation{
			Name: "AnswerWebAppQuery",
			ID:   "answerWebAppQuery",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AnswerWebAppQuery)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		ApproveChatJoinRequest: ogenreflect.RuntimeOperation{
			Name: "ApproveChatJoinRequest",
			ID:   "approveChatJoinRequest",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ApproveChatJoinRequest)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		BanChatMember: ogenreflect.RuntimeOperation{
			Name: "BanChatMember",
			ID:   "banChatMember",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(BanChatMember)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		BanChatSenderChat: ogenreflect.RuntimeOperation{
			Name: "BanChatSenderChat",
			ID:   "banChatSenderChat",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(BanChatSenderChat)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		Close: ogenreflect.RuntimeOperation{
			Name: "Close",
			ID:   "close",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		CopyMessage: ogenreflect.RuntimeOperation{
			Name: "CopyMessage",
			ID:   "copyMessage",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CopyMessage)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageId)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageId)).Elem(),
							},
						},
					},
				},
			},
		},
		CreateChatInviteLink: ogenreflect.RuntimeOperation{
			Name: "CreateChatInviteLink",
			ID:   "createChatInviteLink",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CreateChatInviteLink)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultChatInviteLink)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultChatInviteLink)).Elem(),
							},
						},
					},
				},
			},
		},
		CreateNewStickerSet: ogenreflect.RuntimeOperation{
			Name: "CreateNewStickerSet",
			ID:   "createNewStickerSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CreateNewStickerSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeclineChatJoinRequest: ogenreflect.RuntimeOperation{
			Name: "DeclineChatJoinRequest",
			ID:   "declineChatJoinRequest",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(DeclineChatJoinRequest)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeleteChatPhoto: ogenreflect.RuntimeOperation{
			Name: "DeleteChatPhoto",
			ID:   "deleteChatPhoto",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(DeleteChatPhoto)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeleteChatStickerSet: ogenreflect.RuntimeOperation{
			Name: "DeleteChatStickerSet",
			ID:   "deleteChatStickerSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(DeleteChatStickerSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeleteMessage: ogenreflect.RuntimeOperation{
			Name: "DeleteMessage",
			ID:   "deleteMessage",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(DeleteMessage)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeleteMyCommands: ogenreflect.RuntimeOperation{
			Name: "DeleteMyCommands",
			ID:   "deleteMyCommands",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptDeleteMyCommands)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeleteStickerFromSet: ogenreflect.RuntimeOperation{
			Name: "DeleteStickerFromSet",
			ID:   "deleteStickerFromSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(DeleteStickerFromSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		DeleteWebhook: ogenreflect.RuntimeOperation{
			Name: "DeleteWebhook",
			ID:   "deleteWebhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptDeleteWebhook)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		EditChatInviteLink: ogenreflect.RuntimeOperation{
			Name: "EditChatInviteLink",
			ID:   "editChatInviteLink",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EditChatInviteLink)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultChatInviteLink)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultChatInviteLink)).Elem(),
							},
						},
					},
				},
			},
		},
		EditMessageCaption: ogenreflect.RuntimeOperation{
			Name: "EditMessageCaption",
			ID:   "editMessageCaption",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EditMessageCaption)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
							},
						},
					},
				},
			},
		},
		EditMessageLiveLocation: ogenreflect.RuntimeOperation{
			Name: "EditMessageLiveLocation",
			ID:   "editMessageLiveLocation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EditMessageLiveLocation)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
							},
						},
					},
				},
			},
		},
		EditMessageMedia: ogenreflect.RuntimeOperation{
			Name: "EditMessageMedia",
			ID:   "editMessageMedia",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EditMessageMedia)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
							},
						},
					},
				},
			},
		},
		EditMessageReplyMarkup: ogenreflect.RuntimeOperation{
			Name: "EditMessageReplyMarkup",
			ID:   "editMessageReplyMarkup",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EditMessageReplyMarkup)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
							},
						},
					},
				},
			},
		},
		EditMessageText: ogenreflect.RuntimeOperation{
			Name: "EditMessageText",
			ID:   "editMessageText",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EditMessageText)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
							},
						},
					},
				},
			},
		},
		ExportChatInviteLink: ogenreflect.RuntimeOperation{
			Name: "ExportChatInviteLink",
			ID:   "exportChatInviteLink",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ExportChatInviteLink)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultString)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultString)).Elem(),
							},
						},
					},
				},
			},
		},
		ForwardMessage: ogenreflect.RuntimeOperation{
			Name: "ForwardMessage",
			ID:   "forwardMessage",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ForwardMessage)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		GetChat: ogenreflect.RuntimeOperation{
			Name: "GetChat",
			ID:   "getChat",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetChat)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultChat)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultChat)).Elem(),
							},
						},
					},
				},
			},
		},
		GetChatAdministrators: ogenreflect.RuntimeOperation{
			Name: "GetChatAdministrators",
			ID:   "getChatAdministrators",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetChatAdministrators)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultArrayOfChatMember)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultArrayOfChatMember)).Elem(),
							},
						},
					},
				},
			},
		},
		GetChatMember: ogenreflect.RuntimeOperation{
			Name: "GetChatMember",
			ID:   "getChatMember",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetChatMember)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultChatMember)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultChatMember)).Elem(),
							},
						},
					},
				},
			},
		},
		GetChatMemberCount: ogenreflect.RuntimeOperation{
			Name: "GetChatMemberCount",
			ID:   "getChatMemberCount",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetChatMemberCount)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultInt)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultInt)).Elem(),
							},
						},
					},
				},
			},
		},
		GetChatMenuButton: ogenreflect.RuntimeOperation{
			Name: "GetChatMenuButton",
			ID:   "getChatMenuButton",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptGetChatMenuButton)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		GetFile: ogenreflect.RuntimeOperation{
			Name: "GetFile",
			ID:   "getFile",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetFile)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultFile)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultFile)).Elem(),
							},
						},
					},
				},
			},
		},
		GetGameHighScores: ogenreflect.RuntimeOperation{
			Name: "GetGameHighScores",
			ID:   "getGameHighScores",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetGameHighScores)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultArrayOfGameHighScore)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultArrayOfGameHighScore)).Elem(),
							},
						},
					},
				},
			},
		},
		GetMe: ogenreflect.RuntimeOperation{
			Name: "GetMe",
			ID:   "getMe",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultUser)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultUser)).Elem(),
							},
						},
					},
				},
			},
		},
		GetMyCommands: ogenreflect.RuntimeOperation{
			Name: "GetMyCommands",
			ID:   "getMyCommands",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptGetMyCommands)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultArrayOfBotCommand)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultArrayOfBotCommand)).Elem(),
							},
						},
					},
				},
			},
		},
		GetMyDefaultAdministratorRights: ogenreflect.RuntimeOperation{
			Name: "GetMyDefaultAdministratorRights",
			ID:   "getMyDefaultAdministratorRights",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptGetMyDefaultAdministratorRights)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		GetStickerSet: ogenreflect.RuntimeOperation{
			Name: "GetStickerSet",
			ID:   "getStickerSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetStickerSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultStickerSet)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultStickerSet)).Elem(),
							},
						},
					},
				},
			},
		},
		GetUpdates: ogenreflect.RuntimeOperation{
			Name: "GetUpdates",
			ID:   "getUpdates",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptGetUpdates)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultArrayOfUpdate)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultArrayOfUpdate)).Elem(),
							},
						},
					},
				},
			},
		},
		GetUserProfilePhotos: ogenreflect.RuntimeOperation{
			Name: "GetUserProfilePhotos",
			ID:   "getUserProfilePhotos",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GetUserProfilePhotos)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultUserProfilePhotos)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultUserProfilePhotos)).Elem(),
							},
						},
					},
				},
			},
		},
		GetWebhookInfo: ogenreflect.RuntimeOperation{
			Name: "GetWebhookInfo",
			ID:   "getWebhookInfo",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultWebhookInfo)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultWebhookInfo)).Elem(),
							},
						},
					},
				},
			},
		},
		LeaveChat: ogenreflect.RuntimeOperation{
			Name: "LeaveChat",
			ID:   "leaveChat",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(LeaveChat)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		LogOut: ogenreflect.RuntimeOperation{
			Name: "LogOut",
			ID:   "logOut",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		PinChatMessage: ogenreflect.RuntimeOperation{
			Name: "PinChatMessage",
			ID:   "pinChatMessage",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PinChatMessage)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		PromoteChatMember: ogenreflect.RuntimeOperation{
			Name: "PromoteChatMember",
			ID:   "promoteChatMember",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PromoteChatMember)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		RestrictChatMember: ogenreflect.RuntimeOperation{
			Name: "RestrictChatMember",
			ID:   "restrictChatMember",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(RestrictChatMember)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		RevokeChatInviteLink: ogenreflect.RuntimeOperation{
			Name: "RevokeChatInviteLink",
			ID:   "revokeChatInviteLink",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(RevokeChatInviteLink)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultChatInviteLink)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultChatInviteLink)).Elem(),
							},
						},
					},
				},
			},
		},
		SendAnimation: ogenreflect.RuntimeOperation{
			Name: "SendAnimation",
			ID:   "sendAnimation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendAnimation)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendAudio: ogenreflect.RuntimeOperation{
			Name: "SendAudio",
			ID:   "sendAudio",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendAudio)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendChatAction: ogenreflect.RuntimeOperation{
			Name: "SendChatAction",
			ID:   "sendChatAction",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendChatAction)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SendContact: ogenreflect.RuntimeOperation{
			Name: "SendContact",
			ID:   "sendContact",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendContact)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendDice: ogenreflect.RuntimeOperation{
			Name: "SendDice",
			ID:   "sendDice",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendDice)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendDocument: ogenreflect.RuntimeOperation{
			Name: "SendDocument",
			ID:   "sendDocument",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendDocument)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendGame: ogenreflect.RuntimeOperation{
			Name: "SendGame",
			ID:   "sendGame",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendGame)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendInvoice: ogenreflect.RuntimeOperation{
			Name: "SendInvoice",
			ID:   "sendInvoice",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendInvoice)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendLocation: ogenreflect.RuntimeOperation{
			Name: "SendLocation",
			ID:   "sendLocation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendLocation)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendMediaGroup: ogenreflect.RuntimeOperation{
			Name: "SendMediaGroup",
			ID:   "sendMediaGroup",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendMediaGroup)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultArrayOfMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultArrayOfMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendMessage: ogenreflect.RuntimeOperation{
			Name: "SendMessage",
			ID:   "sendMessage",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendMessage)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendPhoto: ogenreflect.RuntimeOperation{
			Name: "SendPhoto",
			ID:   "sendPhoto",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendPhoto)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendPoll: ogenreflect.RuntimeOperation{
			Name: "SendPoll",
			ID:   "sendPoll",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendPoll)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendSticker: ogenreflect.RuntimeOperation{
			Name: "SendSticker",
			ID:   "sendSticker",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendSticker)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendVenue: ogenreflect.RuntimeOperation{
			Name: "SendVenue",
			ID:   "sendVenue",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendVenue)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendVideo: ogenreflect.RuntimeOperation{
			Name: "SendVideo",
			ID:   "sendVideo",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendVideo)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendVideoNote: ogenreflect.RuntimeOperation{
			Name: "SendVideoNote",
			ID:   "sendVideoNote",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendVideoNote)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SendVoice: ogenreflect.RuntimeOperation{
			Name: "SendVoice",
			ID:   "sendVoice",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SendVoice)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessage)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatAdministratorCustomTitle: ogenreflect.RuntimeOperation{
			Name: "SetChatAdministratorCustomTitle",
			ID:   "setChatAdministratorCustomTitle",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetChatAdministratorCustomTitle)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatDescription: ogenreflect.RuntimeOperation{
			Name: "SetChatDescription",
			ID:   "setChatDescription",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetChatDescription)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatMenuButton: ogenreflect.RuntimeOperation{
			Name: "SetChatMenuButton",
			ID:   "setChatMenuButton",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptSetChatMenuButton)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatPermissions: ogenreflect.RuntimeOperation{
			Name: "SetChatPermissions",
			ID:   "setChatPermissions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetChatPermissions)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatPhoto: ogenreflect.RuntimeOperation{
			Name: "SetChatPhoto",
			ID:   "setChatPhoto",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetChatPhoto)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatStickerSet: ogenreflect.RuntimeOperation{
			Name: "SetChatStickerSet",
			ID:   "setChatStickerSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetChatStickerSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetChatTitle: ogenreflect.RuntimeOperation{
			Name: "SetChatTitle",
			ID:   "setChatTitle",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetChatTitle)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetGameScore: ogenreflect.RuntimeOperation{
			Name: "SetGameScore",
			ID:   "setGameScore",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetGameScore)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetMyCommands: ogenreflect.RuntimeOperation{
			Name: "SetMyCommands",
			ID:   "setMyCommands",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetMyCommands)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetMyDefaultAdministratorRights: ogenreflect.RuntimeOperation{
			Name: "SetMyDefaultAdministratorRights",
			ID:   "setMyDefaultAdministratorRights",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptSetMyDefaultAdministratorRights)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetPassportDataErrors: ogenreflect.RuntimeOperation{
			Name: "SetPassportDataErrors",
			ID:   "setPassportDataErrors",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetPassportDataErrors)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetStickerPositionInSet: ogenreflect.RuntimeOperation{
			Name: "SetStickerPositionInSet",
			ID:   "setStickerPositionInSet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetStickerPositionInSet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetStickerSetThumb: ogenreflect.RuntimeOperation{
			Name: "SetStickerSetThumb",
			ID:   "setStickerSetThumb",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetStickerSetThumb)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		SetWebhook: ogenreflect.RuntimeOperation{
			Name: "SetWebhook",
			ID:   "setWebhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SetWebhook)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		StopMessageLiveLocation: ogenreflect.RuntimeOperation{
			Name: "StopMessageLiveLocation",
			ID:   "stopMessageLiveLocation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(StopMessageLiveLocation)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultMessageOrBoolean)).Elem(),
							},
						},
					},
				},
			},
		},
		StopPoll: ogenreflect.RuntimeOperation{
			Name: "StopPoll",
			ID:   "stopPoll",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(StopPoll)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultPoll)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultPoll)).Elem(),
							},
						},
					},
				},
			},
		},
		UnbanChatMember: ogenreflect.RuntimeOperation{
			Name: "UnbanChatMember",
			ID:   "unbanChatMember",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UnbanChatMember)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		UnbanChatSenderChat: ogenreflect.RuntimeOperation{
			Name: "UnbanChatSenderChat",
			ID:   "unbanChatSenderChat",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UnbanChatSenderChat)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		UnpinAllChatMessages: ogenreflect.RuntimeOperation{
			Name: "UnpinAllChatMessages",
			ID:   "unpinAllChatMessages",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UnpinAllChatMessages)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		UnpinChatMessage: ogenreflect.RuntimeOperation{
			Name: "UnpinChatMessage",
			ID:   "unpinChatMessage",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UnpinChatMessage)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Result)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Result)).Elem(),
							},
						},
					},
				},
			},
		},
		UploadStickerFile: ogenreflect.RuntimeOperation{
			Name: "UploadStickerFile",
			ID:   "uploadStickerFile",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UploadStickerFile)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ResultFile)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ResultFile)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	AddStickerToSet                 ogenreflect.RuntimeOperation
	AnswerCallbackQuery             ogenreflect.RuntimeOperation
	AnswerInlineQuery               ogenreflect.RuntimeOperation
	AnswerPreCheckoutQuery          ogenreflect.RuntimeOperation
	AnswerShippingQuery             ogenreflect.RuntimeOperation
	AnswerWebAppQuery               ogenreflect.RuntimeOperation
	ApproveChatJoinRequest          ogenreflect.RuntimeOperation
	BanChatMember                   ogenreflect.RuntimeOperation
	BanChatSenderChat               ogenreflect.RuntimeOperation
	Close                           ogenreflect.RuntimeOperation
	CopyMessage                     ogenreflect.RuntimeOperation
	CreateChatInviteLink            ogenreflect.RuntimeOperation
	CreateNewStickerSet             ogenreflect.RuntimeOperation
	DeclineChatJoinRequest          ogenreflect.RuntimeOperation
	DeleteChatPhoto                 ogenreflect.RuntimeOperation
	DeleteChatStickerSet            ogenreflect.RuntimeOperation
	DeleteMessage                   ogenreflect.RuntimeOperation
	DeleteMyCommands                ogenreflect.RuntimeOperation
	DeleteStickerFromSet            ogenreflect.RuntimeOperation
	DeleteWebhook                   ogenreflect.RuntimeOperation
	EditChatInviteLink              ogenreflect.RuntimeOperation
	EditMessageCaption              ogenreflect.RuntimeOperation
	EditMessageLiveLocation         ogenreflect.RuntimeOperation
	EditMessageMedia                ogenreflect.RuntimeOperation
	EditMessageReplyMarkup          ogenreflect.RuntimeOperation
	EditMessageText                 ogenreflect.RuntimeOperation
	ExportChatInviteLink            ogenreflect.RuntimeOperation
	ForwardMessage                  ogenreflect.RuntimeOperation
	GetChat                         ogenreflect.RuntimeOperation
	GetChatAdministrators           ogenreflect.RuntimeOperation
	GetChatMember                   ogenreflect.RuntimeOperation
	GetChatMemberCount              ogenreflect.RuntimeOperation
	GetChatMenuButton               ogenreflect.RuntimeOperation
	GetFile                         ogenreflect.RuntimeOperation
	GetGameHighScores               ogenreflect.RuntimeOperation
	GetMe                           ogenreflect.RuntimeOperation
	GetMyCommands                   ogenreflect.RuntimeOperation
	GetMyDefaultAdministratorRights ogenreflect.RuntimeOperation
	GetStickerSet                   ogenreflect.RuntimeOperation
	GetUpdates                      ogenreflect.RuntimeOperation
	GetUserProfilePhotos            ogenreflect.RuntimeOperation
	GetWebhookInfo                  ogenreflect.RuntimeOperation
	LeaveChat                       ogenreflect.RuntimeOperation
	LogOut                          ogenreflect.RuntimeOperation
	PinChatMessage                  ogenreflect.RuntimeOperation
	PromoteChatMember               ogenreflect.RuntimeOperation
	RestrictChatMember              ogenreflect.RuntimeOperation
	RevokeChatInviteLink            ogenreflect.RuntimeOperation
	SendAnimation                   ogenreflect.RuntimeOperation
	SendAudio                       ogenreflect.RuntimeOperation
	SendChatAction                  ogenreflect.RuntimeOperation
	SendContact                     ogenreflect.RuntimeOperation
	SendDice                        ogenreflect.RuntimeOperation
	SendDocument                    ogenreflect.RuntimeOperation
	SendGame                        ogenreflect.RuntimeOperation
	SendInvoice                     ogenreflect.RuntimeOperation
	SendLocation                    ogenreflect.RuntimeOperation
	SendMediaGroup                  ogenreflect.RuntimeOperation
	SendMessage                     ogenreflect.RuntimeOperation
	SendPhoto                       ogenreflect.RuntimeOperation
	SendPoll                        ogenreflect.RuntimeOperation
	SendSticker                     ogenreflect.RuntimeOperation
	SendVenue                       ogenreflect.RuntimeOperation
	SendVideo                       ogenreflect.RuntimeOperation
	SendVideoNote                   ogenreflect.RuntimeOperation
	SendVoice                       ogenreflect.RuntimeOperation
	SetChatAdministratorCustomTitle ogenreflect.RuntimeOperation
	SetChatDescription              ogenreflect.RuntimeOperation
	SetChatMenuButton               ogenreflect.RuntimeOperation
	SetChatPermissions              ogenreflect.RuntimeOperation
	SetChatPhoto                    ogenreflect.RuntimeOperation
	SetChatStickerSet               ogenreflect.RuntimeOperation
	SetChatTitle                    ogenreflect.RuntimeOperation
	SetGameScore                    ogenreflect.RuntimeOperation
	SetMyCommands                   ogenreflect.RuntimeOperation
	SetMyDefaultAdministratorRights ogenreflect.RuntimeOperation
	SetPassportDataErrors           ogenreflect.RuntimeOperation
	SetStickerPositionInSet         ogenreflect.RuntimeOperation
	SetStickerSetThumb              ogenreflect.RuntimeOperation
	SetWebhook                      ogenreflect.RuntimeOperation
	StopMessageLiveLocation         ogenreflect.RuntimeOperation
	StopPoll                        ogenreflect.RuntimeOperation
	UnbanChatMember                 ogenreflect.RuntimeOperation
	UnbanChatSenderChat             ogenreflect.RuntimeOperation
	UnpinAllChatMessages            ogenreflect.RuntimeOperation
	UnpinChatMessage                ogenreflect.RuntimeOperation
	UploadStickerFile               ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "AddStickerToSet":
		return p.AddStickerToSet, true
	case "AnswerCallbackQuery":
		return p.AnswerCallbackQuery, true
	case "AnswerInlineQuery":
		return p.AnswerInlineQuery, true
	case "AnswerPreCheckoutQuery":
		return p.AnswerPreCheckoutQuery, true
	case "AnswerShippingQuery":
		return p.AnswerShippingQuery, true
	case "AnswerWebAppQuery":
		return p.AnswerWebAppQuery, true
	case "ApproveChatJoinRequest":
		return p.ApproveChatJoinRequest, true
	case "BanChatMember":
		return p.BanChatMember, true
	case "BanChatSenderChat":
		return p.BanChatSenderChat, true
	case "Close":
		return p.Close, true
	case "CopyMessage":
		return p.CopyMessage, true
	case "CreateChatInviteLink":
		return p.CreateChatInviteLink, true
	case "CreateNewStickerSet":
		return p.CreateNewStickerSet, true
	case "DeclineChatJoinRequest":
		return p.DeclineChatJoinRequest, true
	case "DeleteChatPhoto":
		return p.DeleteChatPhoto, true
	case "DeleteChatStickerSet":
		return p.DeleteChatStickerSet, true
	case "DeleteMessage":
		return p.DeleteMessage, true
	case "DeleteMyCommands":
		return p.DeleteMyCommands, true
	case "DeleteStickerFromSet":
		return p.DeleteStickerFromSet, true
	case "DeleteWebhook":
		return p.DeleteWebhook, true
	case "EditChatInviteLink":
		return p.EditChatInviteLink, true
	case "EditMessageCaption":
		return p.EditMessageCaption, true
	case "EditMessageLiveLocation":
		return p.EditMessageLiveLocation, true
	case "EditMessageMedia":
		return p.EditMessageMedia, true
	case "EditMessageReplyMarkup":
		return p.EditMessageReplyMarkup, true
	case "EditMessageText":
		return p.EditMessageText, true
	case "ExportChatInviteLink":
		return p.ExportChatInviteLink, true
	case "ForwardMessage":
		return p.ForwardMessage, true
	case "GetChat":
		return p.GetChat, true
	case "GetChatAdministrators":
		return p.GetChatAdministrators, true
	case "GetChatMember":
		return p.GetChatMember, true
	case "GetChatMemberCount":
		return p.GetChatMemberCount, true
	case "GetChatMenuButton":
		return p.GetChatMenuButton, true
	case "GetFile":
		return p.GetFile, true
	case "GetGameHighScores":
		return p.GetGameHighScores, true
	case "GetMe":
		return p.GetMe, true
	case "GetMyCommands":
		return p.GetMyCommands, true
	case "GetMyDefaultAdministratorRights":
		return p.GetMyDefaultAdministratorRights, true
	case "GetStickerSet":
		return p.GetStickerSet, true
	case "GetUpdates":
		return p.GetUpdates, true
	case "GetUserProfilePhotos":
		return p.GetUserProfilePhotos, true
	case "GetWebhookInfo":
		return p.GetWebhookInfo, true
	case "LeaveChat":
		return p.LeaveChat, true
	case "LogOut":
		return p.LogOut, true
	case "PinChatMessage":
		return p.PinChatMessage, true
	case "PromoteChatMember":
		return p.PromoteChatMember, true
	case "RestrictChatMember":
		return p.RestrictChatMember, true
	case "RevokeChatInviteLink":
		return p.RevokeChatInviteLink, true
	case "SendAnimation":
		return p.SendAnimation, true
	case "SendAudio":
		return p.SendAudio, true
	case "SendChatAction":
		return p.SendChatAction, true
	case "SendContact":
		return p.SendContact, true
	case "SendDice":
		return p.SendDice, true
	case "SendDocument":
		return p.SendDocument, true
	case "SendGame":
		return p.SendGame, true
	case "SendInvoice":
		return p.SendInvoice, true
	case "SendLocation":
		return p.SendLocation, true
	case "SendMediaGroup":
		return p.SendMediaGroup, true
	case "SendMessage":
		return p.SendMessage, true
	case "SendPhoto":
		return p.SendPhoto, true
	case "SendPoll":
		return p.SendPoll, true
	case "SendSticker":
		return p.SendSticker, true
	case "SendVenue":
		return p.SendVenue, true
	case "SendVideo":
		return p.SendVideo, true
	case "SendVideoNote":
		return p.SendVideoNote, true
	case "SendVoice":
		return p.SendVoice, true
	case "SetChatAdministratorCustomTitle":
		return p.SetChatAdministratorCustomTitle, true
	case "SetChatDescription":
		return p.SetChatDescription, true
	case "SetChatMenuButton":
		return p.SetChatMenuButton, true
	case "SetChatPermissions":
		return p.SetChatPermissions, true
	case "SetChatPhoto":
		return p.SetChatPhoto, true
	case "SetChatStickerSet":
		return p.SetChatStickerSet, true
	case "SetChatTitle":
		return p.SetChatTitle, true
	case "SetGameScore":
		return p.SetGameScore, true
	case "SetMyCommands":
		return p.SetMyCommands, true
	case "SetMyDefaultAdministratorRights":
		return p.SetMyDefaultAdministratorRights, true
	case "SetPassportDataErrors":
		return p.SetPassportDataErrors, true
	case "SetStickerPositionInSet":
		return p.SetStickerPositionInSet, true
	case "SetStickerSetThumb":
		return p.SetStickerSetThumb, true
	case "SetWebhook":
		return p.SetWebhook, true
	case "StopMessageLiveLocation":
		return p.StopMessageLiveLocation, true
	case "StopPoll":
		return p.StopPoll, true
	case "UnbanChatMember":
		return p.UnbanChatMember, true
	case "UnbanChatSenderChat":
		return p.UnbanChatSenderChat, true
	case "UnpinAllChatMessages":
		return p.UnpinAllChatMessages, true
	case "UnpinChatMessage":
		return p.UnpinChatMessage, true
	case "UploadStickerFile":
		return p.UploadStickerFile, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "addStickerToSet":
		return p.AddStickerToSet, true
	case "answerCallbackQuery":
		return p.AnswerCallbackQuery, true
	case "answerInlineQuery":
		return p.AnswerInlineQuery, true
	case "answerPreCheckoutQuery":
		return p.AnswerPreCheckoutQuery, true
	case "answerShippingQuery":
		return p.AnswerShippingQuery, true
	case "answerWebAppQuery":
		return p.AnswerWebAppQuery, true
	case "approveChatJoinRequest":
		return p.ApproveChatJoinRequest, true
	case "banChatMember":
		return p.BanChatMember, true
	case "banChatSenderChat":
		return p.BanChatSenderChat, true
	case "close":
		return p.Close, true
	case "copyMessage":
		return p.CopyMessage, true
	case "createChatInviteLink":
		return p.CreateChatInviteLink, true
	case "createNewStickerSet":
		return p.CreateNewStickerSet, true
	case "declineChatJoinRequest":
		return p.DeclineChatJoinRequest, true
	case "deleteChatPhoto":
		return p.DeleteChatPhoto, true
	case "deleteChatStickerSet":
		return p.DeleteChatStickerSet, true
	case "deleteMessage":
		return p.DeleteMessage, true
	case "deleteMyCommands":
		return p.DeleteMyCommands, true
	case "deleteStickerFromSet":
		return p.DeleteStickerFromSet, true
	case "deleteWebhook":
		return p.DeleteWebhook, true
	case "editChatInviteLink":
		return p.EditChatInviteLink, true
	case "editMessageCaption":
		return p.EditMessageCaption, true
	case "editMessageLiveLocation":
		return p.EditMessageLiveLocation, true
	case "editMessageMedia":
		return p.EditMessageMedia, true
	case "editMessageReplyMarkup":
		return p.EditMessageReplyMarkup, true
	case "editMessageText":
		return p.EditMessageText, true
	case "exportChatInviteLink":
		return p.ExportChatInviteLink, true
	case "forwardMessage":
		return p.ForwardMessage, true
	case "getChat":
		return p.GetChat, true
	case "getChatAdministrators":
		return p.GetChatAdministrators, true
	case "getChatMember":
		return p.GetChatMember, true
	case "getChatMemberCount":
		return p.GetChatMemberCount, true
	case "getChatMenuButton":
		return p.GetChatMenuButton, true
	case "getFile":
		return p.GetFile, true
	case "getGameHighScores":
		return p.GetGameHighScores, true
	case "getMe":
		return p.GetMe, true
	case "getMyCommands":
		return p.GetMyCommands, true
	case "getMyDefaultAdministratorRights":
		return p.GetMyDefaultAdministratorRights, true
	case "getStickerSet":
		return p.GetStickerSet, true
	case "getUpdates":
		return p.GetUpdates, true
	case "getUserProfilePhotos":
		return p.GetUserProfilePhotos, true
	case "getWebhookInfo":
		return p.GetWebhookInfo, true
	case "leaveChat":
		return p.LeaveChat, true
	case "logOut":
		return p.LogOut, true
	case "pinChatMessage":
		return p.PinChatMessage, true
	case "promoteChatMember":
		return p.PromoteChatMember, true
	case "restrictChatMember":
		return p.RestrictChatMember, true
	case "revokeChatInviteLink":
		return p.RevokeChatInviteLink, true
	case "sendAnimation":
		return p.SendAnimation, true
	case "sendAudio":
		return p.SendAudio, true
	case "sendChatAction":
		return p.SendChatAction, true
	case "sendContact":
		return p.SendContact, true
	case "sendDice":
		return p.SendDice, true
	case "sendDocument":
		return p.SendDocument, true
	case "sendGame":
		return p.SendGame, true
	case "sendInvoice":
		return p.SendInvoice, true
	case "sendLocation":
		return p.SendLocation, true
	case "sendMediaGroup":
		return p.SendMediaGroup, true
	case "sendMessage":
		return p.SendMessage, true
	case "sendPhoto":
		return p.SendPhoto, true
	case "sendPoll":
		return p.SendPoll, true
	case "sendSticker":
		return p.SendSticker, true
	case "sendVenue":
		return p.SendVenue, true
	case "sendVideo":
		return p.SendVideo, true
	case "sendVideoNote":
		return p.SendVideoNote, true
	case "sendVoice":
		return p.SendVoice, true
	case "setChatAdministratorCustomTitle":
		return p.SetChatAdministratorCustomTitle, true
	case "setChatDescription":
		return p.SetChatDescription, true
	case "setChatMenuButton":
		return p.SetChatMenuButton, true
	case "setChatPermissions":
		return p.SetChatPermissions, true
	case "setChatPhoto":
		return p.SetChatPhoto, true
	case "setChatStickerSet":
		return p.SetChatStickerSet, true
	case "setChatTitle":
		return p.SetChatTitle, true
	case "setGameScore":
		return p.SetGameScore, true
	case "setMyCommands":
		return p.SetMyCommands, true
	case "setMyDefaultAdministratorRights":
		return p.SetMyDefaultAdministratorRights, true
	case "setPassportDataErrors":
		return p.SetPassportDataErrors, true
	case "setStickerPositionInSet":
		return p.SetStickerPositionInSet, true
	case "setStickerSetThumb":
		return p.SetStickerSetThumb, true
	case "setWebhook":
		return p.SetWebhook, true
	case "stopMessageLiveLocation":
		return p.StopMessageLiveLocation, true
	case "stopPoll":
		return p.StopPoll, true
	case "unbanChatMember":
		return p.UnbanChatMember, true
	case "unbanChatSenderChat":
		return p.UnbanChatSenderChat, true
	case "unpinAllChatMessages":
		return p.UnpinAllChatMessages, true
	case "unpinChatMessage":
		return p.UnpinChatMessage, true
	case "uploadStickerFile":
		return p.UploadStickerFile, true
	default:
		return op, false
	}
}

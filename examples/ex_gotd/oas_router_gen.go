// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "ddStickerToSet"

					if l := len("ddStickerToSet"); len(elem) >= l && elem[0:l] == "ddStickerToSet" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAddStickerToSetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'n': // Prefix: "nswer"

					if l := len("nswer"); len(elem) >= l && elem[0:l] == "nswer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "CallbackQuery"

						if l := len("CallbackQuery"); len(elem) >= l && elem[0:l] == "CallbackQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAnswerCallbackQueryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'I': // Prefix: "InlineQuery"

						if l := len("InlineQuery"); len(elem) >= l && elem[0:l] == "InlineQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAnswerInlineQueryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'P': // Prefix: "PreCheckoutQuery"

						if l := len("PreCheckoutQuery"); len(elem) >= l && elem[0:l] == "PreCheckoutQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAnswerPreCheckoutQueryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'S': // Prefix: "ShippingQuery"

						if l := len("ShippingQuery"); len(elem) >= l && elem[0:l] == "ShippingQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAnswerShippingQueryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'W': // Prefix: "WebAppQuery"

						if l := len("WebAppQuery"); len(elem) >= l && elem[0:l] == "WebAppQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAnswerWebAppQueryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 'p': // Prefix: "pproveChatJoinRequest"

					if l := len("pproveChatJoinRequest"); len(elem) >= l && elem[0:l] == "pproveChatJoinRequest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleApproveChatJoinRequestRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'b': // Prefix: "banChat"

				if l := len("banChat"); len(elem) >= l && elem[0:l] == "banChat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'M': // Prefix: "Member"

					if l := len("Member"); len(elem) >= l && elem[0:l] == "Member" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleBanChatMemberRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'S': // Prefix: "SenderChat"

					if l := len("SenderChat"); len(elem) >= l && elem[0:l] == "SenderChat" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleBanChatSenderChatRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'c': // Prefix: "c"

				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "lose"

					if l := len("lose"); len(elem) >= l && elem[0:l] == "lose" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCloseRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'o': // Prefix: "opyMessage"

					if l := len("opyMessage"); len(elem) >= l && elem[0:l] == "opyMessage" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleCopyMessageRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'r': // Prefix: "reate"

					if l := len("reate"); len(elem) >= l && elem[0:l] == "reate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "ChatInviteLink"

						if l := len("ChatInviteLink"); len(elem) >= l && elem[0:l] == "ChatInviteLink" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleCreateChatInviteLinkRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'N': // Prefix: "NewStickerSet"

						if l := len("NewStickerSet"); len(elem) >= l && elem[0:l] == "NewStickerSet" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleCreateNewStickerSetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'd': // Prefix: "de"

				if l := len("de"); len(elem) >= l && elem[0:l] == "de" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "clineChatJoinRequest"

					if l := len("clineChatJoinRequest"); len(elem) >= l && elem[0:l] == "clineChatJoinRequest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleDeclineChatJoinRequestRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'l': // Prefix: "lete"

					if l := len("lete"); len(elem) >= l && elem[0:l] == "lete" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "Chat"

						if l := len("Chat"); len(elem) >= l && elem[0:l] == "Chat" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'P': // Prefix: "Photo"

							if l := len("Photo"); len(elem) >= l && elem[0:l] == "Photo" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleDeleteChatPhotoRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'S': // Prefix: "StickerSet"

							if l := len("StickerSet"); len(elem) >= l && elem[0:l] == "StickerSet" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleDeleteChatStickerSetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					case 'M': // Prefix: "M"

						if l := len("M"); len(elem) >= l && elem[0:l] == "M" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "essage"

							if l := len("essage"); len(elem) >= l && elem[0:l] == "essage" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleDeleteMessageRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'y': // Prefix: "yCommands"

							if l := len("yCommands"); len(elem) >= l && elem[0:l] == "yCommands" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleDeleteMyCommandsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					case 'S': // Prefix: "StickerFromSet"

						if l := len("StickerFromSet"); len(elem) >= l && elem[0:l] == "StickerFromSet" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleDeleteStickerFromSetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'W': // Prefix: "Webhook"

						if l := len("Webhook"); len(elem) >= l && elem[0:l] == "Webhook" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleDeleteWebhookRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'e': // Prefix: "e"

				if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "dit"

					if l := len("dit"); len(elem) >= l && elem[0:l] == "dit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "ChatInviteLink"

						if l := len("ChatInviteLink"); len(elem) >= l && elem[0:l] == "ChatInviteLink" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleEditChatInviteLinkRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'M': // Prefix: "Message"

						if l := len("Message"); len(elem) >= l && elem[0:l] == "Message" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'C': // Prefix: "Caption"

							if l := len("Caption"); len(elem) >= l && elem[0:l] == "Caption" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleEditMessageCaptionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'L': // Prefix: "LiveLocation"

							if l := len("LiveLocation"); len(elem) >= l && elem[0:l] == "LiveLocation" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleEditMessageLiveLocationRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'M': // Prefix: "Media"

							if l := len("Media"); len(elem) >= l && elem[0:l] == "Media" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleEditMessageMediaRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'R': // Prefix: "ReplyMarkup"

							if l := len("ReplyMarkup"); len(elem) >= l && elem[0:l] == "ReplyMarkup" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleEditMessageReplyMarkupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'T': // Prefix: "Text"

							if l := len("Text"); len(elem) >= l && elem[0:l] == "Text" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleEditMessageTextRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case 'x': // Prefix: "xportChatInviteLink"

					if l := len("xportChatInviteLink"); len(elem) >= l && elem[0:l] == "xportChatInviteLink" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleExportChatInviteLinkRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'f': // Prefix: "forwardMessage"

				if l := len("forwardMessage"); len(elem) >= l && elem[0:l] == "forwardMessage" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleForwardMessageRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'g': // Prefix: "get"

				if l := len("get"); len(elem) >= l && elem[0:l] == "get" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "Chat"

					if l := len("Chat"); len(elem) >= l && elem[0:l] == "Chat" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleGetChatRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case 'A': // Prefix: "Administrators"

						if l := len("Administrators"); len(elem) >= l && elem[0:l] == "Administrators" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGetChatAdministratorsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'M': // Prefix: "Me"

						if l := len("Me"); len(elem) >= l && elem[0:l] == "Me" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'm': // Prefix: "mber"

							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleGetChatMemberRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case 'C': // Prefix: "Count"

								if l := len("Count"); len(elem) >= l && elem[0:l] == "Count" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleGetChatMemberCountRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'n': // Prefix: "nuButton"

							if l := len("nuButton"); len(elem) >= l && elem[0:l] == "nuButton" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetChatMenuButtonRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case 'F': // Prefix: "File"

					if l := len("File"); len(elem) >= l && elem[0:l] == "File" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleGetFileRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'G': // Prefix: "GameHighScores"

					if l := len("GameHighScores"); len(elem) >= l && elem[0:l] == "GameHighScores" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleGetGameHighScoresRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'M': // Prefix: "M"

					if l := len("M"); len(elem) >= l && elem[0:l] == "M" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "e"

						if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGetMeRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'y': // Prefix: "y"

						if l := len("y"); len(elem) >= l && elem[0:l] == "y" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'C': // Prefix: "Commands"

							if l := len("Commands"); len(elem) >= l && elem[0:l] == "Commands" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetMyCommandsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'D': // Prefix: "DefaultAdministratorRights"

							if l := len("DefaultAdministratorRights"); len(elem) >= l && elem[0:l] == "DefaultAdministratorRights" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetMyDefaultAdministratorRightsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case 'S': // Prefix: "StickerSet"

					if l := len("StickerSet"); len(elem) >= l && elem[0:l] == "StickerSet" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleGetStickerSetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'U': // Prefix: "U"

					if l := len("U"); len(elem) >= l && elem[0:l] == "U" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "pdates"

						if l := len("pdates"); len(elem) >= l && elem[0:l] == "pdates" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGetUpdatesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 's': // Prefix: "serProfilePhotos"

						if l := len("serProfilePhotos"); len(elem) >= l && elem[0:l] == "serProfilePhotos" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGetUserProfilePhotosRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 'W': // Prefix: "WebhookInfo"

					if l := len("WebhookInfo"); len(elem) >= l && elem[0:l] == "WebhookInfo" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleGetWebhookInfoRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'l': // Prefix: "l"

				if l := len("l"); len(elem) >= l && elem[0:l] == "l" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "eaveChat"

					if l := len("eaveChat"); len(elem) >= l && elem[0:l] == "eaveChat" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleLeaveChatRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'o': // Prefix: "ogOut"

					if l := len("ogOut"); len(elem) >= l && elem[0:l] == "ogOut" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleLogOutRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'p': // Prefix: "p"

				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "inChatMessage"

					if l := len("inChatMessage"); len(elem) >= l && elem[0:l] == "inChatMessage" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handlePinChatMessageRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'r': // Prefix: "romoteChatMember"

					if l := len("romoteChatMember"); len(elem) >= l && elem[0:l] == "romoteChatMember" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handlePromoteChatMemberRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'r': // Prefix: "re"

				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 's': // Prefix: "strictChatMember"

					if l := len("strictChatMember"); len(elem) >= l && elem[0:l] == "strictChatMember" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleRestrictChatMemberRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'v': // Prefix: "vokeChatInviteLink"

					if l := len("vokeChatInviteLink"); len(elem) >= l && elem[0:l] == "vokeChatInviteLink" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleRevokeChatInviteLinkRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 's': // Prefix: "s"

				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"

					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "nd"

						if l := len("nd"); len(elem) >= l && elem[0:l] == "nd" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "A"

							if l := len("A"); len(elem) >= l && elem[0:l] == "A" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'n': // Prefix: "nimation"

								if l := len("nimation"); len(elem) >= l && elem[0:l] == "nimation" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendAnimationRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'u': // Prefix: "udio"

								if l := len("udio"); len(elem) >= l && elem[0:l] == "udio" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendAudioRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'C': // Prefix: "C"

							if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hatAction"

								if l := len("hatAction"); len(elem) >= l && elem[0:l] == "hatAction" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendChatActionRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'o': // Prefix: "ontact"

								if l := len("ontact"); len(elem) >= l && elem[0:l] == "ontact" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendContactRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'D': // Prefix: "D"

							if l := len("D"); len(elem) >= l && elem[0:l] == "D" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "ice"

								if l := len("ice"); len(elem) >= l && elem[0:l] == "ice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendDiceRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'o': // Prefix: "ocument"

								if l := len("ocument"); len(elem) >= l && elem[0:l] == "ocument" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendDocumentRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'G': // Prefix: "Game"

							if l := len("Game"); len(elem) >= l && elem[0:l] == "Game" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSendGameRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'I': // Prefix: "Invoice"

							if l := len("Invoice"); len(elem) >= l && elem[0:l] == "Invoice" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSendInvoiceRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'L': // Prefix: "Location"

							if l := len("Location"); len(elem) >= l && elem[0:l] == "Location" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSendLocationRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'M': // Prefix: "Me"

							if l := len("Me"); len(elem) >= l && elem[0:l] == "Me" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "diaGroup"

								if l := len("diaGroup"); len(elem) >= l && elem[0:l] == "diaGroup" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendMediaGroupRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 's': // Prefix: "ssage"

								if l := len("ssage"); len(elem) >= l && elem[0:l] == "ssage" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendMessageRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'P': // Prefix: "P"

							if l := len("P"); len(elem) >= l && elem[0:l] == "P" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hoto"

								if l := len("hoto"); len(elem) >= l && elem[0:l] == "hoto" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendPhotoRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'o': // Prefix: "oll"

								if l := len("oll"); len(elem) >= l && elem[0:l] == "oll" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendPollRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'S': // Prefix: "Sticker"

							if l := len("Sticker"); len(elem) >= l && elem[0:l] == "Sticker" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSendStickerRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'V': // Prefix: "V"

							if l := len("V"); len(elem) >= l && elem[0:l] == "V" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "enue"

								if l := len("enue"); len(elem) >= l && elem[0:l] == "enue" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendVenueRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'i': // Prefix: "ideo"

								if l := len("ideo"); len(elem) >= l && elem[0:l] == "ideo" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleSendVideoRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case 'N': // Prefix: "Note"

									if l := len("Note"); len(elem) >= l && elem[0:l] == "Note" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSendVideoNoteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'o': // Prefix: "oice"

								if l := len("oice"); len(elem) >= l && elem[0:l] == "oice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSendVoiceRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						}

					case 't': // Prefix: "t"

						if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'C': // Prefix: "Chat"

							if l := len("Chat"); len(elem) >= l && elem[0:l] == "Chat" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'A': // Prefix: "AdministratorCustomTitle"

								if l := len("AdministratorCustomTitle"); len(elem) >= l && elem[0:l] == "AdministratorCustomTitle" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetChatAdministratorCustomTitleRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'D': // Prefix: "Description"

								if l := len("Description"); len(elem) >= l && elem[0:l] == "Description" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetChatDescriptionRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'M': // Prefix: "MenuButton"

								if l := len("MenuButton"); len(elem) >= l && elem[0:l] == "MenuButton" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetChatMenuButtonRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'P': // Prefix: "P"

								if l := len("P"); len(elem) >= l && elem[0:l] == "P" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "ermissions"

									if l := len("ermissions"); len(elem) >= l && elem[0:l] == "ermissions" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSetChatPermissionsRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'h': // Prefix: "hoto"

									if l := len("hoto"); len(elem) >= l && elem[0:l] == "hoto" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleSetChatPhotoRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'S': // Prefix: "StickerSet"

								if l := len("StickerSet"); len(elem) >= l && elem[0:l] == "StickerSet" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetChatStickerSetRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'T': // Prefix: "Title"

								if l := len("Title"); len(elem) >= l && elem[0:l] == "Title" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetChatTitleRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'G': // Prefix: "GameScore"

							if l := len("GameScore"); len(elem) >= l && elem[0:l] == "GameScore" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSetGameScoreRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'M': // Prefix: "My"

							if l := len("My"); len(elem) >= l && elem[0:l] == "My" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'C': // Prefix: "Commands"

								if l := len("Commands"); len(elem) >= l && elem[0:l] == "Commands" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetMyCommandsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'D': // Prefix: "DefaultAdministratorRights"

								if l := len("DefaultAdministratorRights"); len(elem) >= l && elem[0:l] == "DefaultAdministratorRights" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetMyDefaultAdministratorRightsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'P': // Prefix: "PassportDataErrors"

							if l := len("PassportDataErrors"); len(elem) >= l && elem[0:l] == "PassportDataErrors" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSetPassportDataErrorsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'S': // Prefix: "Sticker"

							if l := len("Sticker"); len(elem) >= l && elem[0:l] == "Sticker" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'P': // Prefix: "PositionInSet"

								if l := len("PositionInSet"); len(elem) >= l && elem[0:l] == "PositionInSet" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetStickerPositionInSetRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'S': // Prefix: "SetThumb"

								if l := len("SetThumb"); len(elem) >= l && elem[0:l] == "SetThumb" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSetStickerSetThumbRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						case 'W': // Prefix: "Webhook"

							if l := len("Webhook"); len(elem) >= l && elem[0:l] == "Webhook" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSetWebhookRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case 't': // Prefix: "top"

					if l := len("top"); len(elem) >= l && elem[0:l] == "top" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'M': // Prefix: "MessageLiveLocation"

						if l := len("MessageLiveLocation"); len(elem) >= l && elem[0:l] == "MessageLiveLocation" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleStopMessageLiveLocationRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'P': // Prefix: "Poll"

						if l := len("Poll"); len(elem) >= l && elem[0:l] == "Poll" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleStopPollRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'u': // Prefix: "u"

				if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'n': // Prefix: "n"

					if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "banChat"

						if l := len("banChat"); len(elem) >= l && elem[0:l] == "banChat" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'M': // Prefix: "Member"

							if l := len("Member"); len(elem) >= l && elem[0:l] == "Member" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUnbanChatMemberRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'S': // Prefix: "SenderChat"

							if l := len("SenderChat"); len(elem) >= l && elem[0:l] == "SenderChat" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUnbanChatSenderChatRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					case 'p': // Prefix: "pin"

						if l := len("pin"); len(elem) >= l && elem[0:l] == "pin" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "AllChatMessages"

							if l := len("AllChatMessages"); len(elem) >= l && elem[0:l] == "AllChatMessages" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUnpinAllChatMessagesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'C': // Prefix: "ChatMessage"

							if l := len("ChatMessage"); len(elem) >= l && elem[0:l] == "ChatMessage" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUnpinChatMessageRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case 'p': // Prefix: "ploadStickerFile"

					if l := len("ploadStickerFile"); len(elem) >= l && elem[0:l] == "ploadStickerFile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUploadStickerFileRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "ddStickerToSet"

					if l := len("ddStickerToSet"); len(elem) >= l && elem[0:l] == "ddStickerToSet" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = AddStickerToSetOperation
							r.summary = ""
							r.operationID = "addStickerToSet"
							r.pathPattern = "/addStickerToSet"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'n': // Prefix: "nswer"

					if l := len("nswer"); len(elem) >= l && elem[0:l] == "nswer" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "CallbackQuery"

						if l := len("CallbackQuery"); len(elem) >= l && elem[0:l] == "CallbackQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AnswerCallbackQueryOperation
								r.summary = ""
								r.operationID = "answerCallbackQuery"
								r.pathPattern = "/answerCallbackQuery"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'I': // Prefix: "InlineQuery"

						if l := len("InlineQuery"); len(elem) >= l && elem[0:l] == "InlineQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AnswerInlineQueryOperation
								r.summary = ""
								r.operationID = "answerInlineQuery"
								r.pathPattern = "/answerInlineQuery"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'P': // Prefix: "PreCheckoutQuery"

						if l := len("PreCheckoutQuery"); len(elem) >= l && elem[0:l] == "PreCheckoutQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AnswerPreCheckoutQueryOperation
								r.summary = ""
								r.operationID = "answerPreCheckoutQuery"
								r.pathPattern = "/answerPreCheckoutQuery"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'S': // Prefix: "ShippingQuery"

						if l := len("ShippingQuery"); len(elem) >= l && elem[0:l] == "ShippingQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AnswerShippingQueryOperation
								r.summary = ""
								r.operationID = "answerShippingQuery"
								r.pathPattern = "/answerShippingQuery"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'W': // Prefix: "WebAppQuery"

						if l := len("WebAppQuery"); len(elem) >= l && elem[0:l] == "WebAppQuery" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = AnswerWebAppQueryOperation
								r.summary = ""
								r.operationID = "answerWebAppQuery"
								r.pathPattern = "/answerWebAppQuery"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'p': // Prefix: "pproveChatJoinRequest"

					if l := len("pproveChatJoinRequest"); len(elem) >= l && elem[0:l] == "pproveChatJoinRequest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ApproveChatJoinRequestOperation
							r.summary = ""
							r.operationID = "approveChatJoinRequest"
							r.pathPattern = "/approveChatJoinRequest"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'b': // Prefix: "banChat"

				if l := len("banChat"); len(elem) >= l && elem[0:l] == "banChat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'M': // Prefix: "Member"

					if l := len("Member"); len(elem) >= l && elem[0:l] == "Member" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = BanChatMemberOperation
							r.summary = ""
							r.operationID = "banChatMember"
							r.pathPattern = "/banChatMember"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'S': // Prefix: "SenderChat"

					if l := len("SenderChat"); len(elem) >= l && elem[0:l] == "SenderChat" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = BanChatSenderChatOperation
							r.summary = ""
							r.operationID = "banChatSenderChat"
							r.pathPattern = "/banChatSenderChat"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'c': // Prefix: "c"

				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "lose"

					if l := len("lose"); len(elem) >= l && elem[0:l] == "lose" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = CloseOperation
							r.summary = ""
							r.operationID = "close"
							r.pathPattern = "/close"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'o': // Prefix: "opyMessage"

					if l := len("opyMessage"); len(elem) >= l && elem[0:l] == "opyMessage" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = CopyMessageOperation
							r.summary = ""
							r.operationID = "copyMessage"
							r.pathPattern = "/copyMessage"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'r': // Prefix: "reate"

					if l := len("reate"); len(elem) >= l && elem[0:l] == "reate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "ChatInviteLink"

						if l := len("ChatInviteLink"); len(elem) >= l && elem[0:l] == "ChatInviteLink" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = CreateChatInviteLinkOperation
								r.summary = ""
								r.operationID = "createChatInviteLink"
								r.pathPattern = "/createChatInviteLink"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'N': // Prefix: "NewStickerSet"

						if l := len("NewStickerSet"); len(elem) >= l && elem[0:l] == "NewStickerSet" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = CreateNewStickerSetOperation
								r.summary = ""
								r.operationID = "createNewStickerSet"
								r.pathPattern = "/createNewStickerSet"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'd': // Prefix: "de"

				if l := len("de"); len(elem) >= l && elem[0:l] == "de" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "clineChatJoinRequest"

					if l := len("clineChatJoinRequest"); len(elem) >= l && elem[0:l] == "clineChatJoinRequest" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = DeclineChatJoinRequestOperation
							r.summary = ""
							r.operationID = "declineChatJoinRequest"
							r.pathPattern = "/declineChatJoinRequest"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'l': // Prefix: "lete"

					if l := len("lete"); len(elem) >= l && elem[0:l] == "lete" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "Chat"

						if l := len("Chat"); len(elem) >= l && elem[0:l] == "Chat" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'P': // Prefix: "Photo"

							if l := len("Photo"); len(elem) >= l && elem[0:l] == "Photo" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = DeleteChatPhotoOperation
									r.summary = ""
									r.operationID = "deleteChatPhoto"
									r.pathPattern = "/deleteChatPhoto"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'S': // Prefix: "StickerSet"

							if l := len("StickerSet"); len(elem) >= l && elem[0:l] == "StickerSet" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = DeleteChatStickerSetOperation
									r.summary = ""
									r.operationID = "deleteChatStickerSet"
									r.pathPattern = "/deleteChatStickerSet"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'M': // Prefix: "M"

						if l := len("M"); len(elem) >= l && elem[0:l] == "M" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "essage"

							if l := len("essage"); len(elem) >= l && elem[0:l] == "essage" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = DeleteMessageOperation
									r.summary = ""
									r.operationID = "deleteMessage"
									r.pathPattern = "/deleteMessage"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'y': // Prefix: "yCommands"

							if l := len("yCommands"); len(elem) >= l && elem[0:l] == "yCommands" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = DeleteMyCommandsOperation
									r.summary = ""
									r.operationID = "deleteMyCommands"
									r.pathPattern = "/deleteMyCommands"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'S': // Prefix: "StickerFromSet"

						if l := len("StickerFromSet"); len(elem) >= l && elem[0:l] == "StickerFromSet" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = DeleteStickerFromSetOperation
								r.summary = ""
								r.operationID = "deleteStickerFromSet"
								r.pathPattern = "/deleteStickerFromSet"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'W': // Prefix: "Webhook"

						if l := len("Webhook"); len(elem) >= l && elem[0:l] == "Webhook" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = DeleteWebhookOperation
								r.summary = ""
								r.operationID = "deleteWebhook"
								r.pathPattern = "/deleteWebhook"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'e': // Prefix: "e"

				if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "dit"

					if l := len("dit"); len(elem) >= l && elem[0:l] == "dit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'C': // Prefix: "ChatInviteLink"

						if l := len("ChatInviteLink"); len(elem) >= l && elem[0:l] == "ChatInviteLink" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = EditChatInviteLinkOperation
								r.summary = ""
								r.operationID = "editChatInviteLink"
								r.pathPattern = "/editChatInviteLink"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'M': // Prefix: "Message"

						if l := len("Message"); len(elem) >= l && elem[0:l] == "Message" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'C': // Prefix: "Caption"

							if l := len("Caption"); len(elem) >= l && elem[0:l] == "Caption" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = EditMessageCaptionOperation
									r.summary = ""
									r.operationID = "editMessageCaption"
									r.pathPattern = "/editMessageCaption"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'L': // Prefix: "LiveLocation"

							if l := len("LiveLocation"); len(elem) >= l && elem[0:l] == "LiveLocation" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = EditMessageLiveLocationOperation
									r.summary = ""
									r.operationID = "editMessageLiveLocation"
									r.pathPattern = "/editMessageLiveLocation"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'M': // Prefix: "Media"

							if l := len("Media"); len(elem) >= l && elem[0:l] == "Media" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = EditMessageMediaOperation
									r.summary = ""
									r.operationID = "editMessageMedia"
									r.pathPattern = "/editMessageMedia"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'R': // Prefix: "ReplyMarkup"

							if l := len("ReplyMarkup"); len(elem) >= l && elem[0:l] == "ReplyMarkup" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = EditMessageReplyMarkupOperation
									r.summary = ""
									r.operationID = "editMessageReplyMarkup"
									r.pathPattern = "/editMessageReplyMarkup"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'T': // Prefix: "Text"

							if l := len("Text"); len(elem) >= l && elem[0:l] == "Text" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = EditMessageTextOperation
									r.summary = ""
									r.operationID = "editMessageText"
									r.pathPattern = "/editMessageText"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'x': // Prefix: "xportChatInviteLink"

					if l := len("xportChatInviteLink"); len(elem) >= l && elem[0:l] == "xportChatInviteLink" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ExportChatInviteLinkOperation
							r.summary = ""
							r.operationID = "exportChatInviteLink"
							r.pathPattern = "/exportChatInviteLink"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'f': // Prefix: "forwardMessage"

				if l := len("forwardMessage"); len(elem) >= l && elem[0:l] == "forwardMessage" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = ForwardMessageOperation
						r.summary = ""
						r.operationID = "forwardMessage"
						r.pathPattern = "/forwardMessage"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'g': // Prefix: "get"

				if l := len("get"); len(elem) >= l && elem[0:l] == "get" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "Chat"

					if l := len("Chat"); len(elem) >= l && elem[0:l] == "Chat" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = GetChatOperation
							r.summary = ""
							r.operationID = "getChat"
							r.pathPattern = "/getChat"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 'A': // Prefix: "Administrators"

						if l := len("Administrators"); len(elem) >= l && elem[0:l] == "Administrators" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GetChatAdministratorsOperation
								r.summary = ""
								r.operationID = "getChatAdministrators"
								r.pathPattern = "/getChatAdministrators"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'M': // Prefix: "Me"

						if l := len("Me"); len(elem) >= l && elem[0:l] == "Me" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'm': // Prefix: "mber"

							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = GetChatMemberOperation
									r.summary = ""
									r.operationID = "getChatMember"
									r.pathPattern = "/getChatMember"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'C': // Prefix: "Count"

								if l := len("Count"); len(elem) >= l && elem[0:l] == "Count" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = GetChatMemberCountOperation
										r.summary = ""
										r.operationID = "getChatMemberCount"
										r.pathPattern = "/getChatMemberCount"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'n': // Prefix: "nuButton"

							if l := len("nuButton"); len(elem) >= l && elem[0:l] == "nuButton" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GetChatMenuButtonOperation
									r.summary = ""
									r.operationID = "getChatMenuButton"
									r.pathPattern = "/getChatMenuButton"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'F': // Prefix: "File"

					if l := len("File"); len(elem) >= l && elem[0:l] == "File" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = GetFileOperation
							r.summary = ""
							r.operationID = "getFile"
							r.pathPattern = "/getFile"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'G': // Prefix: "GameHighScores"

					if l := len("GameHighScores"); len(elem) >= l && elem[0:l] == "GameHighScores" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = GetGameHighScoresOperation
							r.summary = ""
							r.operationID = "getGameHighScores"
							r.pathPattern = "/getGameHighScores"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'M': // Prefix: "M"

					if l := len("M"); len(elem) >= l && elem[0:l] == "M" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "e"

						if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GetMeOperation
								r.summary = ""
								r.operationID = "getMe"
								r.pathPattern = "/getMe"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'y': // Prefix: "y"

						if l := len("y"); len(elem) >= l && elem[0:l] == "y" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'C': // Prefix: "Commands"

							if l := len("Commands"); len(elem) >= l && elem[0:l] == "Commands" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GetMyCommandsOperation
									r.summary = ""
									r.operationID = "getMyCommands"
									r.pathPattern = "/getMyCommands"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'D': // Prefix: "DefaultAdministratorRights"

							if l := len("DefaultAdministratorRights"); len(elem) >= l && elem[0:l] == "DefaultAdministratorRights" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GetMyDefaultAdministratorRightsOperation
									r.summary = ""
									r.operationID = "getMyDefaultAdministratorRights"
									r.pathPattern = "/getMyDefaultAdministratorRights"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'S': // Prefix: "StickerSet"

					if l := len("StickerSet"); len(elem) >= l && elem[0:l] == "StickerSet" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = GetStickerSetOperation
							r.summary = ""
							r.operationID = "getStickerSet"
							r.pathPattern = "/getStickerSet"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'U': // Prefix: "U"

					if l := len("U"); len(elem) >= l && elem[0:l] == "U" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "pdates"

						if l := len("pdates"); len(elem) >= l && elem[0:l] == "pdates" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GetUpdatesOperation
								r.summary = ""
								r.operationID = "getUpdates"
								r.pathPattern = "/getUpdates"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 's': // Prefix: "serProfilePhotos"

						if l := len("serProfilePhotos"); len(elem) >= l && elem[0:l] == "serProfilePhotos" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GetUserProfilePhotosOperation
								r.summary = ""
								r.operationID = "getUserProfilePhotos"
								r.pathPattern = "/getUserProfilePhotos"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'W': // Prefix: "WebhookInfo"

					if l := len("WebhookInfo"); len(elem) >= l && elem[0:l] == "WebhookInfo" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = GetWebhookInfoOperation
							r.summary = ""
							r.operationID = "getWebhookInfo"
							r.pathPattern = "/getWebhookInfo"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'l': // Prefix: "l"

				if l := len("l"); len(elem) >= l && elem[0:l] == "l" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "eaveChat"

					if l := len("eaveChat"); len(elem) >= l && elem[0:l] == "eaveChat" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = LeaveChatOperation
							r.summary = ""
							r.operationID = "leaveChat"
							r.pathPattern = "/leaveChat"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'o': // Prefix: "ogOut"

					if l := len("ogOut"); len(elem) >= l && elem[0:l] == "ogOut" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = LogOutOperation
							r.summary = ""
							r.operationID = "logOut"
							r.pathPattern = "/logOut"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'p': // Prefix: "p"

				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "inChatMessage"

					if l := len("inChatMessage"); len(elem) >= l && elem[0:l] == "inChatMessage" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = PinChatMessageOperation
							r.summary = ""
							r.operationID = "pinChatMessage"
							r.pathPattern = "/pinChatMessage"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'r': // Prefix: "romoteChatMember"

					if l := len("romoteChatMember"); len(elem) >= l && elem[0:l] == "romoteChatMember" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = PromoteChatMemberOperation
							r.summary = ""
							r.operationID = "promoteChatMember"
							r.pathPattern = "/promoteChatMember"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'r': // Prefix: "re"

				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 's': // Prefix: "strictChatMember"

					if l := len("strictChatMember"); len(elem) >= l && elem[0:l] == "strictChatMember" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = RestrictChatMemberOperation
							r.summary = ""
							r.operationID = "restrictChatMember"
							r.pathPattern = "/restrictChatMember"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'v': // Prefix: "vokeChatInviteLink"

					if l := len("vokeChatInviteLink"); len(elem) >= l && elem[0:l] == "vokeChatInviteLink" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = RevokeChatInviteLinkOperation
							r.summary = ""
							r.operationID = "revokeChatInviteLink"
							r.pathPattern = "/revokeChatInviteLink"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 's': // Prefix: "s"

				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"

					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "nd"

						if l := len("nd"); len(elem) >= l && elem[0:l] == "nd" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "A"

							if l := len("A"); len(elem) >= l && elem[0:l] == "A" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'n': // Prefix: "nimation"

								if l := len("nimation"); len(elem) >= l && elem[0:l] == "nimation" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendAnimationOperation
										r.summary = ""
										r.operationID = "sendAnimation"
										r.pathPattern = "/sendAnimation"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'u': // Prefix: "udio"

								if l := len("udio"); len(elem) >= l && elem[0:l] == "udio" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendAudioOperation
										r.summary = ""
										r.operationID = "sendAudio"
										r.pathPattern = "/sendAudio"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'C': // Prefix: "C"

							if l := len("C"); len(elem) >= l && elem[0:l] == "C" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hatAction"

								if l := len("hatAction"); len(elem) >= l && elem[0:l] == "hatAction" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendChatActionOperation
										r.summary = ""
										r.operationID = "sendChatAction"
										r.pathPattern = "/sendChatAction"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'o': // Prefix: "ontact"

								if l := len("ontact"); len(elem) >= l && elem[0:l] == "ontact" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendContactOperation
										r.summary = ""
										r.operationID = "sendContact"
										r.pathPattern = "/sendContact"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'D': // Prefix: "D"

							if l := len("D"); len(elem) >= l && elem[0:l] == "D" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "ice"

								if l := len("ice"); len(elem) >= l && elem[0:l] == "ice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendDiceOperation
										r.summary = ""
										r.operationID = "sendDice"
										r.pathPattern = "/sendDice"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'o': // Prefix: "ocument"

								if l := len("ocument"); len(elem) >= l && elem[0:l] == "ocument" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendDocumentOperation
										r.summary = ""
										r.operationID = "sendDocument"
										r.pathPattern = "/sendDocument"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'G': // Prefix: "Game"

							if l := len("Game"); len(elem) >= l && elem[0:l] == "Game" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SendGameOperation
									r.summary = ""
									r.operationID = "sendGame"
									r.pathPattern = "/sendGame"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'I': // Prefix: "Invoice"

							if l := len("Invoice"); len(elem) >= l && elem[0:l] == "Invoice" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SendInvoiceOperation
									r.summary = ""
									r.operationID = "sendInvoice"
									r.pathPattern = "/sendInvoice"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'L': // Prefix: "Location"

							if l := len("Location"); len(elem) >= l && elem[0:l] == "Location" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SendLocationOperation
									r.summary = ""
									r.operationID = "sendLocation"
									r.pathPattern = "/sendLocation"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'M': // Prefix: "Me"

							if l := len("Me"); len(elem) >= l && elem[0:l] == "Me" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "diaGroup"

								if l := len("diaGroup"); len(elem) >= l && elem[0:l] == "diaGroup" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendMediaGroupOperation
										r.summary = ""
										r.operationID = "sendMediaGroup"
										r.pathPattern = "/sendMediaGroup"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 's': // Prefix: "ssage"

								if l := len("ssage"); len(elem) >= l && elem[0:l] == "ssage" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendMessageOperation
										r.summary = ""
										r.operationID = "sendMessage"
										r.pathPattern = "/sendMessage"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'P': // Prefix: "P"

							if l := len("P"); len(elem) >= l && elem[0:l] == "P" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hoto"

								if l := len("hoto"); len(elem) >= l && elem[0:l] == "hoto" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendPhotoOperation
										r.summary = ""
										r.operationID = "sendPhoto"
										r.pathPattern = "/sendPhoto"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'o': // Prefix: "oll"

								if l := len("oll"); len(elem) >= l && elem[0:l] == "oll" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendPollOperation
										r.summary = ""
										r.operationID = "sendPoll"
										r.pathPattern = "/sendPoll"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'S': // Prefix: "Sticker"

							if l := len("Sticker"); len(elem) >= l && elem[0:l] == "Sticker" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SendStickerOperation
									r.summary = ""
									r.operationID = "sendSticker"
									r.pathPattern = "/sendSticker"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'V': // Prefix: "V"

							if l := len("V"); len(elem) >= l && elem[0:l] == "V" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "enue"

								if l := len("enue"); len(elem) >= l && elem[0:l] == "enue" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendVenueOperation
										r.summary = ""
										r.operationID = "sendVenue"
										r.pathPattern = "/sendVenue"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'i': // Prefix: "ideo"

								if l := len("ideo"); len(elem) >= l && elem[0:l] == "ideo" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = SendVideoOperation
										r.summary = ""
										r.operationID = "sendVideo"
										r.pathPattern = "/sendVideo"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'N': // Prefix: "Note"

									if l := len("Note"); len(elem) >= l && elem[0:l] == "Note" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = SendVideoNoteOperation
											r.summary = ""
											r.operationID = "sendVideoNote"
											r.pathPattern = "/sendVideoNote"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'o': // Prefix: "oice"

								if l := len("oice"); len(elem) >= l && elem[0:l] == "oice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SendVoiceOperation
										r.summary = ""
										r.operationID = "sendVoice"
										r.pathPattern = "/sendVoice"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						}

					case 't': // Prefix: "t"

						if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'C': // Prefix: "Chat"

							if l := len("Chat"); len(elem) >= l && elem[0:l] == "Chat" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'A': // Prefix: "AdministratorCustomTitle"

								if l := len("AdministratorCustomTitle"); len(elem) >= l && elem[0:l] == "AdministratorCustomTitle" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetChatAdministratorCustomTitleOperation
										r.summary = ""
										r.operationID = "setChatAdministratorCustomTitle"
										r.pathPattern = "/setChatAdministratorCustomTitle"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'D': // Prefix: "Description"

								if l := len("Description"); len(elem) >= l && elem[0:l] == "Description" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetChatDescriptionOperation
										r.summary = ""
										r.operationID = "setChatDescription"
										r.pathPattern = "/setChatDescription"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'M': // Prefix: "MenuButton"

								if l := len("MenuButton"); len(elem) >= l && elem[0:l] == "MenuButton" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetChatMenuButtonOperation
										r.summary = ""
										r.operationID = "setChatMenuButton"
										r.pathPattern = "/setChatMenuButton"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'P': // Prefix: "P"

								if l := len("P"); len(elem) >= l && elem[0:l] == "P" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "ermissions"

									if l := len("ermissions"); len(elem) >= l && elem[0:l] == "ermissions" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = SetChatPermissionsOperation
											r.summary = ""
											r.operationID = "setChatPermissions"
											r.pathPattern = "/setChatPermissions"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'h': // Prefix: "hoto"

									if l := len("hoto"); len(elem) >= l && elem[0:l] == "hoto" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = SetChatPhotoOperation
											r.summary = ""
											r.operationID = "setChatPhoto"
											r.pathPattern = "/setChatPhoto"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'S': // Prefix: "StickerSet"

								if l := len("StickerSet"); len(elem) >= l && elem[0:l] == "StickerSet" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetChatStickerSetOperation
										r.summary = ""
										r.operationID = "setChatStickerSet"
										r.pathPattern = "/setChatStickerSet"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'T': // Prefix: "Title"

								if l := len("Title"); len(elem) >= l && elem[0:l] == "Title" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetChatTitleOperation
										r.summary = ""
										r.operationID = "setChatTitle"
										r.pathPattern = "/setChatTitle"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'G': // Prefix: "GameScore"

							if l := len("GameScore"); len(elem) >= l && elem[0:l] == "GameScore" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SetGameScoreOperation
									r.summary = ""
									r.operationID = "setGameScore"
									r.pathPattern = "/setGameScore"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'M': // Prefix: "My"

							if l := len("My"); len(elem) >= l && elem[0:l] == "My" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'C': // Prefix: "Commands"

								if l := len("Commands"); len(elem) >= l && elem[0:l] == "Commands" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetMyCommandsOperation
										r.summary = ""
										r.operationID = "setMyCommands"
										r.pathPattern = "/setMyCommands"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'D': // Prefix: "DefaultAdministratorRights"

								if l := len("DefaultAdministratorRights"); len(elem) >= l && elem[0:l] == "DefaultAdministratorRights" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetMyDefaultAdministratorRightsOperation
										r.summary = ""
										r.operationID = "setMyDefaultAdministratorRights"
										r.pathPattern = "/setMyDefaultAdministratorRights"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'P': // Prefix: "PassportDataErrors"

							if l := len("PassportDataErrors"); len(elem) >= l && elem[0:l] == "PassportDataErrors" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SetPassportDataErrorsOperation
									r.summary = ""
									r.operationID = "setPassportDataErrors"
									r.pathPattern = "/setPassportDataErrors"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'S': // Prefix: "Sticker"

							if l := len("Sticker"); len(elem) >= l && elem[0:l] == "Sticker" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'P': // Prefix: "PositionInSet"

								if l := len("PositionInSet"); len(elem) >= l && elem[0:l] == "PositionInSet" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetStickerPositionInSetOperation
										r.summary = ""
										r.operationID = "setStickerPositionInSet"
										r.pathPattern = "/setStickerPositionInSet"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'S': // Prefix: "SetThumb"

								if l := len("SetThumb"); len(elem) >= l && elem[0:l] == "SetThumb" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = SetStickerSetThumbOperation
										r.summary = ""
										r.operationID = "setStickerSetThumb"
										r.pathPattern = "/setStickerSetThumb"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'W': // Prefix: "Webhook"

							if l := len("Webhook"); len(elem) >= l && elem[0:l] == "Webhook" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = SetWebhookOperation
									r.summary = ""
									r.operationID = "setWebhook"
									r.pathPattern = "/setWebhook"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 't': // Prefix: "top"

					if l := len("top"); len(elem) >= l && elem[0:l] == "top" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'M': // Prefix: "MessageLiveLocation"

						if l := len("MessageLiveLocation"); len(elem) >= l && elem[0:l] == "MessageLiveLocation" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = StopMessageLiveLocationOperation
								r.summary = ""
								r.operationID = "stopMessageLiveLocation"
								r.pathPattern = "/stopMessageLiveLocation"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'P': // Prefix: "Poll"

						if l := len("Poll"); len(elem) >= l && elem[0:l] == "Poll" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = StopPollOperation
								r.summary = ""
								r.operationID = "stopPoll"
								r.pathPattern = "/stopPoll"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'u': // Prefix: "u"

				if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'n': // Prefix: "n"

					if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'b': // Prefix: "banChat"

						if l := len("banChat"); len(elem) >= l && elem[0:l] == "banChat" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'M': // Prefix: "Member"

							if l := len("Member"); len(elem) >= l && elem[0:l] == "Member" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = UnbanChatMemberOperation
									r.summary = ""
									r.operationID = "unbanChatMember"
									r.pathPattern = "/unbanChatMember"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'S': // Prefix: "SenderChat"

							if l := len("SenderChat"); len(elem) >= l && elem[0:l] == "SenderChat" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = UnbanChatSenderChatOperation
									r.summary = ""
									r.operationID = "unbanChatSenderChat"
									r.pathPattern = "/unbanChatSenderChat"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'p': // Prefix: "pin"

						if l := len("pin"); len(elem) >= l && elem[0:l] == "pin" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "AllChatMessages"

							if l := len("AllChatMessages"); len(elem) >= l && elem[0:l] == "AllChatMessages" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = UnpinAllChatMessagesOperation
									r.summary = ""
									r.operationID = "unpinAllChatMessages"
									r.pathPattern = "/unpinAllChatMessages"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'C': // Prefix: "ChatMessage"

							if l := len("ChatMessage"); len(elem) >= l && elem[0:l] == "ChatMessage" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = UnpinChatMessageOperation
									r.summary = ""
									r.operationID = "unpinChatMessage"
									r.pathPattern = "/unpinChatMessage"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'p': // Prefix: "ploadStickerFile"

					if l := len("ploadStickerFile"); len(elem) >= l && elem[0:l] == "ploadStickerFile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = UploadStickerFileOperation
							r.summary = ""
							r.operationID = "uploadStickerFile"
							r.pathPattern = "/uploadStickerFile"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}

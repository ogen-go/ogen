// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// APICaptcha2chcaptchaIDGetParams is parameters of GET /api/captcha/2chcaptcha/id operation.
type APICaptcha2chcaptchaIDGetParams struct {
	// ID доски, например, b.
	Board OptString
	// Номер треда.
	Thread OptInt
}

func unpackAPICaptcha2chcaptchaIDGetParams(packed middleware.Parameters) (params APICaptcha2chcaptchaIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Board = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "thread",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Thread = v.(OptInt)
		}
	}
	return params
}

func decodeAPICaptcha2chcaptchaIDGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APICaptcha2chcaptchaIDGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: board.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBoardVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: thread.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThreadVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Thread.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APICaptcha2chcaptchaShowGetParams is parameters of GET /api/captcha/2chcaptcha/show operation.
type APICaptcha2chcaptchaShowGetParams struct {
	// ID капчи.
	ID string
}

func unpackAPICaptcha2chcaptchaShowGetParams(packed middleware.Parameters) (params APICaptcha2chcaptchaShowGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeAPICaptcha2chcaptchaShowGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APICaptcha2chcaptchaShowGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APICaptchaAppIDPublicKeyGetParams is parameters of GET /api/captcha/app/id/{public_key} operation.
type APICaptchaAppIDPublicKeyGetParams struct {
	// Публичный ключ, для получения напишите admin@2ch.hk с темой
	// письма "Получение ключа для приложения" и ссылкой на
	// ваш клиент.
	PublicKey string
	// ID доски, например, b.
	Board OptString
	// Номер треда.
	Thread OptInt
}

func unpackAPICaptchaAppIDPublicKeyGetParams(packed middleware.Parameters) (params APICaptchaAppIDPublicKeyGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "public_key",
			In:   "path",
		}
		params.PublicKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Board = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "thread",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Thread = v.(OptInt)
		}
	}
	return params
}

func decodeAPICaptchaAppIDPublicKeyGetParams(args [1]string, argsEscaped bool, r *http.Request) (params APICaptchaAppIDPublicKeyGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: public_key.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "public_key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PublicKey = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "public_key",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: board.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBoardVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: thread.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThreadVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Thread.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APICaptchaInvisibleRecaptchaIDGetParams is parameters of GET /api/captcha/invisible_recaptcha/id operation.
type APICaptchaInvisibleRecaptchaIDGetParams struct {
	// ID доски, например, b.
	Board OptString
	// Номер треда.
	Thread OptInt
}

func unpackAPICaptchaInvisibleRecaptchaIDGetParams(packed middleware.Parameters) (params APICaptchaInvisibleRecaptchaIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Board = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "thread",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Thread = v.(OptInt)
		}
	}
	return params
}

func decodeAPICaptchaInvisibleRecaptchaIDGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APICaptchaInvisibleRecaptchaIDGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: board.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBoardVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: thread.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThreadVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Thread.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APICaptchaRecaptchaIDGetParams is parameters of GET /api/captcha/recaptcha/id operation.
type APICaptchaRecaptchaIDGetParams struct {
	// ID доски, например, b.
	Board OptString
	// Номер треда.
	Thread OptInt
}

func unpackAPICaptchaRecaptchaIDGetParams(packed middleware.Parameters) (params APICaptchaRecaptchaIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Board = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "thread",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Thread = v.(OptInt)
		}
	}
	return params
}

func decodeAPICaptchaRecaptchaIDGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APICaptchaRecaptchaIDGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: board.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBoardVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBoardVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Board.SetTo(paramsDotBoardVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: thread.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "thread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotThreadVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotThreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Thread.SetTo(paramsDotThreadVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Thread.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIDislikeGetParams is parameters of GET /api/dislike operation.
type APIDislikeGetParams struct {
	// ID доски, например, b.
	Board string
	// Номер поста.
	Num int
}

func unpackAPIDislikeGetParams(packed middleware.Parameters) (params APIDislikeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "query",
		}
		params.Board = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "num",
			In:   "query",
		}
		params.Num = packed[key].(int)
	}
	return params
}

func decodeAPIDislikeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APIDislikeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: board.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: num.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "num",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Num)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APILikeGetParams is parameters of GET /api/like operation.
type APILikeGetParams struct {
	// ID доски, например, b.
	Board string
	// Номер поста.
	Num int
}

func unpackAPILikeGetParams(packed middleware.Parameters) (params APILikeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "query",
		}
		params.Board = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "num",
			In:   "query",
		}
		params.Num = packed[key].(int)
	}
	return params
}

func decodeAPILikeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APILikeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: board.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "board",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: num.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "num",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Num)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIMobileV2AfterBoardThreadNumGetParams is parameters of GET /api/mobile/v2/after/{board}/{thread}/{num} operation.
type APIMobileV2AfterBoardThreadNumGetParams struct {
	// ID доски, например, b.
	Board string
	// Номер треда.
	Thread int
	// Номер поста.
	Num int
}

func unpackAPIMobileV2AfterBoardThreadNumGetParams(packed middleware.Parameters) (params APIMobileV2AfterBoardThreadNumGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "path",
		}
		params.Board = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "thread",
			In:   "path",
		}
		params.Thread = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "num",
			In:   "path",
		}
		params.Num = packed[key].(int)
	}
	return params
}

func decodeAPIMobileV2AfterBoardThreadNumGetParams(args [3]string, argsEscaped bool, r *http.Request) (params APIMobileV2AfterBoardThreadNumGetParams, _ error) {
	// Decode path: board.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "board",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: thread.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Thread = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Thread)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: num.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "num",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Num)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIMobileV2InfoBoardThreadGetParams is parameters of GET /api/mobile/v2/info/{board}/{thread} operation.
type APIMobileV2InfoBoardThreadGetParams struct {
	// ID доски, например, b.
	Board string
	// Номер треда.
	Thread int
}

func unpackAPIMobileV2InfoBoardThreadGetParams(packed middleware.Parameters) (params APIMobileV2InfoBoardThreadGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "path",
		}
		params.Board = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "thread",
			In:   "path",
		}
		params.Thread = packed[key].(int)
	}
	return params
}

func decodeAPIMobileV2InfoBoardThreadGetParams(args [2]string, argsEscaped bool, r *http.Request) (params APIMobileV2InfoBoardThreadGetParams, _ error) {
	// Decode path: board.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "board",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: thread.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "thread",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Thread = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Thread)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "thread",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIMobileV2PostBoardNumGetParams is parameters of GET /api/mobile/v2/post/{board}/{num} operation.
type APIMobileV2PostBoardNumGetParams struct {
	// ID доски, например, b.
	Board string
	// Номер поста.
	Num int
}

func unpackAPIMobileV2PostBoardNumGetParams(packed middleware.Parameters) (params APIMobileV2PostBoardNumGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "board",
			In:   "path",
		}
		params.Board = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "num",
			In:   "path",
		}
		params.Num = packed[key].(int)
	}
	return params
}

func decodeAPIMobileV2PostBoardNumGetParams(args [2]string, argsEscaped bool, r *http.Request) (params APIMobileV2PostBoardNumGetParams, _ error) {
	// Decode path: board.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "board",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Board = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "board",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: num.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "num",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Num = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Num)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UserPassloginPostParams is parameters of POST /user/passlogin operation.
type UserPassloginPostParams struct {
	// Параметр, указывающий что запрос выполняется не
	// пользователем и ответ нужен в формате json.
	JSON int
}

func unpackUserPassloginPostParams(packed middleware.Parameters) (params UserPassloginPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "json",
			In:   "query",
		}
		params.JSON = packed[key].(int)
	}
	return params
}

func decodeUserPassloginPostParams(args [0]string, argsEscaped bool, r *http.Request) (params UserPassloginPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: json.
	{
		val := int(1)
		params.JSON = val
	}
	// Decode query: json.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "json",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.JSON = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "json",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

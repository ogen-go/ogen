// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		APICaptcha2chcaptchaIDGet: ogenreflect.RuntimeOperation{
			Name: "APICaptcha2chcaptchaIDGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APICaptcha2chcaptchaIDGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "board",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "thread",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "thread",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Captcha)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Captcha)).Elem(),
							},
						},
					},
				},
			},
		},
		APICaptcha2chcaptchaShowGet: ogenreflect.RuntimeOperation{
			Name: "APICaptcha2chcaptchaShowGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APICaptcha2chcaptchaShowGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(APICaptcha2chcaptchaShowGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*APICaptcha2chcaptchaShowGetOK)).Elem(),
						reflect.TypeOf(new(*APICaptcha2chcaptchaShowGetNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		APICaptchaAppIDPublicKeyGet: ogenreflect.RuntimeOperation{
			Name: "APICaptchaAppIDPublicKeyGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APICaptchaAppIDPublicKeyGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "public_key",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "public_key",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "board",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "board",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "thread",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "thread",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Captcha)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Captcha)).Elem(),
							},
						},
					},
				},
			},
		},
		APICaptchaInvisibleRecaptchaIDGet: ogenreflect.RuntimeOperation{
			Name: "APICaptchaInvisibleRecaptchaIDGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APICaptchaInvisibleRecaptchaIDGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "board",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "thread",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "thread",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Captcha)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Captcha)).Elem(),
							},
						},
					},
				},
			},
		},
		APICaptchaInvisibleRecaptchaMobileGet: ogenreflect.RuntimeOperation{
			Name: "APICaptchaInvisibleRecaptchaMobileGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(APICaptchaInvisibleRecaptchaMobileGetOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		APICaptchaRecaptchaIDGet: ogenreflect.RuntimeOperation{
			Name: "APICaptchaRecaptchaIDGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APICaptchaRecaptchaIDGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "board",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "thread",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "thread",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Captcha)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Captcha)).Elem(),
							},
						},
					},
				},
			},
		},
		APICaptchaRecaptchaMobileGet: ogenreflect.RuntimeOperation{
			Name: "APICaptchaRecaptchaMobileGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(APICaptchaRecaptchaMobileGetOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		APIDislikeGet: ogenreflect.RuntimeOperation{
			Name: "APIDislikeGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APIDislikeGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "board",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "num",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "num",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Like)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Like)).Elem(),
							},
						},
					},
				},
			},
		},
		APILikeGet: ogenreflect.RuntimeOperation{
			Name: "APILikeGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APILikeGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "board",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "num",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "num",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Like)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Like)).Elem(),
							},
						},
					},
				},
			},
		},
		APIMobileV2AfterBoardThreadNumGet: ogenreflect.RuntimeOperation{
			Name: "APIMobileV2AfterBoardThreadNumGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APIMobileV2AfterBoardThreadNumGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "board",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "thread",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "num",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "num",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MobileThreadPostsAfter)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MobileThreadPostsAfter)).Elem(),
							},
						},
					},
				},
			},
		},
		APIMobileV2BoardsGet: ogenreflect.RuntimeOperation{
			Name: "APIMobileV2BoardsGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Boards)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Boards)).Elem(),
							},
						},
					},
				},
			},
		},
		APIMobileV2InfoBoardThreadGet: ogenreflect.RuntimeOperation{
			Name: "APIMobileV2InfoBoardThreadGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APIMobileV2InfoBoardThreadGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "board",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "thread",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MobileThreadLastInfo)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MobileThreadLastInfo)).Elem(),
							},
						},
					},
				},
			},
		},
		APIMobileV2PostBoardNumGet: ogenreflect.RuntimeOperation{
			Name: "APIMobileV2PostBoardNumGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(APIMobileV2PostBoardNumGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "board",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "board",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "num",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "num",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MobilePost)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MobilePost)).Elem(),
							},
						},
					},
				},
			},
		},
		UserPassloginPost: ogenreflect.RuntimeOperation{
			Name: "UserPassloginPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptUserPassloginPostReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UserPassloginPostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "json",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "json",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Passcode)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Passcode)).Elem(),
							},
						},
					},
				},
			},
		},
		UserPostingPost: ogenreflect.RuntimeOperation{
			Name: "UserPostingPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptUserPostingPostReqForm)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(UserPostingPostOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UserPostingPostOK)).Elem(),
							},
						},
					},
				},
			},
		},
		UserReportPost: ogenreflect.RuntimeOperation{
			Name: "UserReportPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptUserReportPostReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Report)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Report)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	APICaptcha2chcaptchaIDGet             ogenreflect.RuntimeOperation
	APICaptcha2chcaptchaShowGet           ogenreflect.RuntimeOperation
	APICaptchaAppIDPublicKeyGet           ogenreflect.RuntimeOperation
	APICaptchaInvisibleRecaptchaIDGet     ogenreflect.RuntimeOperation
	APICaptchaInvisibleRecaptchaMobileGet ogenreflect.RuntimeOperation
	APICaptchaRecaptchaIDGet              ogenreflect.RuntimeOperation
	APICaptchaRecaptchaMobileGet          ogenreflect.RuntimeOperation
	APIDislikeGet                         ogenreflect.RuntimeOperation
	APILikeGet                            ogenreflect.RuntimeOperation
	APIMobileV2AfterBoardThreadNumGet     ogenreflect.RuntimeOperation
	APIMobileV2BoardsGet                  ogenreflect.RuntimeOperation
	APIMobileV2InfoBoardThreadGet         ogenreflect.RuntimeOperation
	APIMobileV2PostBoardNumGet            ogenreflect.RuntimeOperation
	UserPassloginPost                     ogenreflect.RuntimeOperation
	UserPostingPost                       ogenreflect.RuntimeOperation
	UserReportPost                        ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "APICaptcha2chcaptchaIDGet":
		return p.APICaptcha2chcaptchaIDGet, true
	case "APICaptcha2chcaptchaShowGet":
		return p.APICaptcha2chcaptchaShowGet, true
	case "APICaptchaAppIDPublicKeyGet":
		return p.APICaptchaAppIDPublicKeyGet, true
	case "APICaptchaInvisibleRecaptchaIDGet":
		return p.APICaptchaInvisibleRecaptchaIDGet, true
	case "APICaptchaInvisibleRecaptchaMobileGet":
		return p.APICaptchaInvisibleRecaptchaMobileGet, true
	case "APICaptchaRecaptchaIDGet":
		return p.APICaptchaRecaptchaIDGet, true
	case "APICaptchaRecaptchaMobileGet":
		return p.APICaptchaRecaptchaMobileGet, true
	case "APIDislikeGet":
		return p.APIDislikeGet, true
	case "APILikeGet":
		return p.APILikeGet, true
	case "APIMobileV2AfterBoardThreadNumGet":
		return p.APIMobileV2AfterBoardThreadNumGet, true
	case "APIMobileV2BoardsGet":
		return p.APIMobileV2BoardsGet, true
	case "APIMobileV2InfoBoardThreadGet":
		return p.APIMobileV2InfoBoardThreadGet, true
	case "APIMobileV2PostBoardNumGet":
		return p.APIMobileV2PostBoardNumGet, true
	case "UserPassloginPost":
		return p.UserPassloginPost, true
	case "UserPostingPost":
		return p.UserPostingPost, true
	case "UserReportPost":
		return p.UserReportPost, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	default:
		return op, false
	}
}

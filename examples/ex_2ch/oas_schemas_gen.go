// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	ht "github.com/ogen-go/ogen/http"
)

// APICaptcha2chcaptchaShowGetNotFound is response for APICaptcha2chcaptchaShowGet operation.
type APICaptcha2chcaptchaShowGetNotFound struct{}

func (*APICaptcha2chcaptchaShowGetNotFound) aPICaptcha2chcaptchaShowGetRes() {}

// APICaptcha2chcaptchaShowGetOK is response for APICaptcha2chcaptchaShowGet operation.
type APICaptcha2chcaptchaShowGetOK struct{}

func (*APICaptcha2chcaptchaShowGetOK) aPICaptcha2chcaptchaShowGetRes() {}

// APICaptchaInvisibleRecaptchaMobileGetOK is response for APICaptchaInvisibleRecaptchaMobileGet operation.
type APICaptchaInvisibleRecaptchaMobileGetOK struct{}

// APICaptchaRecaptchaMobileGetOK is response for APICaptchaRecaptchaMobileGet operation.
type APICaptchaRecaptchaMobileGetOK struct{}

// Модель доски.
// Ref: #/components/schemas/Board
type Board struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Category string `json:"category"`
	// Информация о доске.
	Info string `json:"info"`
	// Информация о доске для главной.
	InfoOuter        string   `json:"info_outer"`
	ThreadsPerPage   int      `json:"threads_per_page"`
	BumpLimit        int      `json:"bump_limit"`
	MaxPages         int      `json:"max_pages"`
	DefaultName      string   `json:"default_name"`
	EnableNames      bool     `json:"enable_names"`
	EnableTrips      bool     `json:"enable_trips"`
	EnableSubject    bool     `json:"enable_subject"`
	EnableSage       bool     `json:"enable_sage"`
	EnableIcons      bool     `json:"enable_icons"`
	EnableFlags      bool     `json:"enable_flags"`
	EnableDices      bool     `json:"enable_dices"`
	EnableShield     bool     `json:"enable_shield"`
	EnableThreadTags bool     `json:"enable_thread_tags"`
	EnablePosting    bool     `json:"enable_posting"`
	EnableLikes      bool     `json:"enable_likes"`
	EnableOekaki     bool     `json:"enable_oekaki"`
	FileTypes        []string `json:"file_types"`
	MaxComment       int      `json:"max_comment"`
	MaxFilesSize     int      `json:"max_files_size"`
	// Массив тегов, которые доступны на этой доске, если они
	// включены.
	Tags []string `json:"tags"`
	// Массив иконок, которые доступны на этой доске, если
	// они включены.
	Icons []BoardIconsItem `json:"icons"`
}

// GetID returns the value of ID.
func (s *Board) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Board) GetName() string {
	return s.Name
}

// GetCategory returns the value of Category.
func (s *Board) GetCategory() string {
	return s.Category
}

// GetInfo returns the value of Info.
func (s *Board) GetInfo() string {
	return s.Info
}

// GetInfoOuter returns the value of InfoOuter.
func (s *Board) GetInfoOuter() string {
	return s.InfoOuter
}

// GetThreadsPerPage returns the value of ThreadsPerPage.
func (s *Board) GetThreadsPerPage() int {
	return s.ThreadsPerPage
}

// GetBumpLimit returns the value of BumpLimit.
func (s *Board) GetBumpLimit() int {
	return s.BumpLimit
}

// GetMaxPages returns the value of MaxPages.
func (s *Board) GetMaxPages() int {
	return s.MaxPages
}

// GetDefaultName returns the value of DefaultName.
func (s *Board) GetDefaultName() string {
	return s.DefaultName
}

// GetEnableNames returns the value of EnableNames.
func (s *Board) GetEnableNames() bool {
	return s.EnableNames
}

// GetEnableTrips returns the value of EnableTrips.
func (s *Board) GetEnableTrips() bool {
	return s.EnableTrips
}

// GetEnableSubject returns the value of EnableSubject.
func (s *Board) GetEnableSubject() bool {
	return s.EnableSubject
}

// GetEnableSage returns the value of EnableSage.
func (s *Board) GetEnableSage() bool {
	return s.EnableSage
}

// GetEnableIcons returns the value of EnableIcons.
func (s *Board) GetEnableIcons() bool {
	return s.EnableIcons
}

// GetEnableFlags returns the value of EnableFlags.
func (s *Board) GetEnableFlags() bool {
	return s.EnableFlags
}

// GetEnableDices returns the value of EnableDices.
func (s *Board) GetEnableDices() bool {
	return s.EnableDices
}

// GetEnableShield returns the value of EnableShield.
func (s *Board) GetEnableShield() bool {
	return s.EnableShield
}

// GetEnableThreadTags returns the value of EnableThreadTags.
func (s *Board) GetEnableThreadTags() bool {
	return s.EnableThreadTags
}

// GetEnablePosting returns the value of EnablePosting.
func (s *Board) GetEnablePosting() bool {
	return s.EnablePosting
}

// GetEnableLikes returns the value of EnableLikes.
func (s *Board) GetEnableLikes() bool {
	return s.EnableLikes
}

// GetEnableOekaki returns the value of EnableOekaki.
func (s *Board) GetEnableOekaki() bool {
	return s.EnableOekaki
}

// GetFileTypes returns the value of FileTypes.
func (s *Board) GetFileTypes() []string {
	return s.FileTypes
}

// GetMaxComment returns the value of MaxComment.
func (s *Board) GetMaxComment() int {
	return s.MaxComment
}

// GetMaxFilesSize returns the value of MaxFilesSize.
func (s *Board) GetMaxFilesSize() int {
	return s.MaxFilesSize
}

// GetTags returns the value of Tags.
func (s *Board) GetTags() []string {
	return s.Tags
}

// GetIcons returns the value of Icons.
func (s *Board) GetIcons() []BoardIconsItem {
	return s.Icons
}

// SetID sets the value of ID.
func (s *Board) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Board) SetName(val string) {
	s.Name = val
}

// SetCategory sets the value of Category.
func (s *Board) SetCategory(val string) {
	s.Category = val
}

// SetInfo sets the value of Info.
func (s *Board) SetInfo(val string) {
	s.Info = val
}

// SetInfoOuter sets the value of InfoOuter.
func (s *Board) SetInfoOuter(val string) {
	s.InfoOuter = val
}

// SetThreadsPerPage sets the value of ThreadsPerPage.
func (s *Board) SetThreadsPerPage(val int) {
	s.ThreadsPerPage = val
}

// SetBumpLimit sets the value of BumpLimit.
func (s *Board) SetBumpLimit(val int) {
	s.BumpLimit = val
}

// SetMaxPages sets the value of MaxPages.
func (s *Board) SetMaxPages(val int) {
	s.MaxPages = val
}

// SetDefaultName sets the value of DefaultName.
func (s *Board) SetDefaultName(val string) {
	s.DefaultName = val
}

// SetEnableNames sets the value of EnableNames.
func (s *Board) SetEnableNames(val bool) {
	s.EnableNames = val
}

// SetEnableTrips sets the value of EnableTrips.
func (s *Board) SetEnableTrips(val bool) {
	s.EnableTrips = val
}

// SetEnableSubject sets the value of EnableSubject.
func (s *Board) SetEnableSubject(val bool) {
	s.EnableSubject = val
}

// SetEnableSage sets the value of EnableSage.
func (s *Board) SetEnableSage(val bool) {
	s.EnableSage = val
}

// SetEnableIcons sets the value of EnableIcons.
func (s *Board) SetEnableIcons(val bool) {
	s.EnableIcons = val
}

// SetEnableFlags sets the value of EnableFlags.
func (s *Board) SetEnableFlags(val bool) {
	s.EnableFlags = val
}

// SetEnableDices sets the value of EnableDices.
func (s *Board) SetEnableDices(val bool) {
	s.EnableDices = val
}

// SetEnableShield sets the value of EnableShield.
func (s *Board) SetEnableShield(val bool) {
	s.EnableShield = val
}

// SetEnableThreadTags sets the value of EnableThreadTags.
func (s *Board) SetEnableThreadTags(val bool) {
	s.EnableThreadTags = val
}

// SetEnablePosting sets the value of EnablePosting.
func (s *Board) SetEnablePosting(val bool) {
	s.EnablePosting = val
}

// SetEnableLikes sets the value of EnableLikes.
func (s *Board) SetEnableLikes(val bool) {
	s.EnableLikes = val
}

// SetEnableOekaki sets the value of EnableOekaki.
func (s *Board) SetEnableOekaki(val bool) {
	s.EnableOekaki = val
}

// SetFileTypes sets the value of FileTypes.
func (s *Board) SetFileTypes(val []string) {
	s.FileTypes = val
}

// SetMaxComment sets the value of MaxComment.
func (s *Board) SetMaxComment(val int) {
	s.MaxComment = val
}

// SetMaxFilesSize sets the value of MaxFilesSize.
func (s *Board) SetMaxFilesSize(val int) {
	s.MaxFilesSize = val
}

// SetTags sets the value of Tags.
func (s *Board) SetTags(val []string) {
	s.Tags = val
}

// SetIcons sets the value of Icons.
func (s *Board) SetIcons(val []BoardIconsItem) {
	s.Icons = val
}

type BoardIconsItem struct {
	Num  OptInt    `json:"num"`
	Name OptString `json:"name"`
	URL  OptString `json:"url"`
}

// GetNum returns the value of Num.
func (s *BoardIconsItem) GetNum() OptInt {
	return s.Num
}

// GetName returns the value of Name.
func (s *BoardIconsItem) GetName() OptString {
	return s.Name
}

// GetURL returns the value of URL.
func (s *BoardIconsItem) GetURL() OptString {
	return s.URL
}

// SetNum sets the value of Num.
func (s *BoardIconsItem) SetNum(val OptInt) {
	s.Num = val
}

// SetName sets the value of Name.
func (s *BoardIconsItem) SetName(val OptString) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *BoardIconsItem) SetURL(val OptString) {
	s.URL = val
}

type Boards []Board

// Ref: #/components/schemas/Captcha
type Captcha struct {
	Result int         `json:"result"`
	Error  OptError    `json:"error"`
	Type   CaptchaType `json:"type"`
	ID     string      `json:"id"`
	// Время в секундах после которого id перестанет
	// действовать.
	Expires OptInt `json:"expires"`
	// Тип текста, изображённого на картинке капчи.
	// Возможные варианты:
	// * numeric - только цифры. (0123456789)
	// * english - цифры и английские буквы. (0123456789abcdefghijklmnopqrstuvwxyz)
	// * russian - цифры и русские буквы.
	// (0123456789абвгдеёжзийклмнопрстуфхцчшщъыьэюя)
	// * all - цифры, русские и английские буквы.
	// (0123456789abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя).
	Input OptString `json:"input"`
}

// GetResult returns the value of Result.
func (s *Captcha) GetResult() int {
	return s.Result
}

// GetError returns the value of Error.
func (s *Captcha) GetError() OptError {
	return s.Error
}

// GetType returns the value of Type.
func (s *Captcha) GetType() CaptchaType {
	return s.Type
}

// GetID returns the value of ID.
func (s *Captcha) GetID() string {
	return s.ID
}

// GetExpires returns the value of Expires.
func (s *Captcha) GetExpires() OptInt {
	return s.Expires
}

// GetInput returns the value of Input.
func (s *Captcha) GetInput() OptString {
	return s.Input
}

// SetResult sets the value of Result.
func (s *Captcha) SetResult(val int) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *Captcha) SetError(val OptError) {
	s.Error = val
}

// SetType sets the value of Type.
func (s *Captcha) SetType(val CaptchaType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *Captcha) SetID(val string) {
	s.ID = val
}

// SetExpires sets the value of Expires.
func (s *Captcha) SetExpires(val OptInt) {
	s.Expires = val
}

// SetInput sets the value of Input.
func (s *Captcha) SetInput(val OptString) {
	s.Input = val
}

// Каждый тип капчи так же требует дополнительные
// параметры для её валидации:
// * recaptcha: g-recaptcha-response
// * invisible_recaptcha: g-recaptcha-response
// * recaptcha3: g-recaptcha-response
// * 2chcaptcha: Два.ч капча
// 2chcaptcha_id - идентификатор Два.ч капчи.
// 2chcaptcha_value - строка, которую пользователь увидел на
// картинке.
// * appid: app_response_id и app_response
// app_response_id - результат запроса к этому методу с
// публичным ключём приложения: /api/captcha/app/id/{public_key}
// app_response - sha256(app_response_id + '|' + private_key)
// * passcode: cookie passcode_auth
// * nocaptcha: капча не требуется, никакие дополнительные
// параметры тоже.
// Ref: #/components/schemas/CaptchaType
type CaptchaType string

const (
	CaptchaTypeRecaptcha          CaptchaType = "recaptcha"
	CaptchaTypeInvisibleRecaptcha CaptchaType = "invisible_recaptcha"
	CaptchaTypeRecaptcha3         CaptchaType = "recaptcha3"
	CaptchaType2chcaptcha         CaptchaType = "2chcaptcha"
	CaptchaTypeAppid              CaptchaType = "appid"
	CaptchaTypePasscode           CaptchaType = "passcode"
	CaptchaTypeNocaptcha          CaptchaType = "nocaptcha"
)

// AllValues returns all CaptchaType values.
func (CaptchaType) AllValues() []CaptchaType {
	return []CaptchaType{
		CaptchaTypeRecaptcha,
		CaptchaTypeInvisibleRecaptcha,
		CaptchaTypeRecaptcha3,
		CaptchaType2chcaptcha,
		CaptchaTypeAppid,
		CaptchaTypePasscode,
		CaptchaTypeNocaptcha,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CaptchaType) MarshalText() ([]byte, error) {
	switch s {
	case CaptchaTypeRecaptcha:
		return []byte(s), nil
	case CaptchaTypeInvisibleRecaptcha:
		return []byte(s), nil
	case CaptchaTypeRecaptcha3:
		return []byte(s), nil
	case CaptchaType2chcaptcha:
		return []byte(s), nil
	case CaptchaTypeAppid:
		return []byte(s), nil
	case CaptchaTypePasscode:
		return []byte(s), nil
	case CaptchaTypeNocaptcha:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CaptchaType) UnmarshalText(data []byte) error {
	switch CaptchaType(data) {
	case CaptchaTypeRecaptcha:
		*s = CaptchaTypeRecaptcha
		return nil
	case CaptchaTypeInvisibleRecaptcha:
		*s = CaptchaTypeInvisibleRecaptcha
		return nil
	case CaptchaTypeRecaptcha3:
		*s = CaptchaTypeRecaptcha3
		return nil
	case CaptchaType2chcaptcha:
		*s = CaptchaType2chcaptcha
		return nil
	case CaptchaTypeAppid:
		*s = CaptchaTypeAppid
		return nil
	case CaptchaTypePasscode:
		*s = CaptchaTypePasscode
		return nil
	case CaptchaTypeNocaptcha:
		*s = CaptchaTypeNocaptcha
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ошибка запроса.
// Ref: #/components/schemas/Error
type Error struct {
	Code OptErrorCode `json:"code"`
	// Описание ошибки на русском языке.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// * 0 NoError, ошибки нет.
// * 403 ErrorForbidden, ошибка доступа.
// * 666 ErrorInternal, внутренняя ошибка.
// * 667 ErrorNotFound, используется для совместимости, если
// запрос не существует.
// * -2 ErrorNoBoard, доска не существует.
// * -3 ErrorNoParent, тред не существует.
// * -31 ErrorNoPost, пост не существует.
// * -4 ErrorNoAccess, контент существует, но у вас нет доступа.
// * -41 ErrorBoardClosed, доска закрыта.
// * -42 ErrorBoardOnlyVIP, доступ к доске возможен только с
// пасскодом.
// * -5 ErrorCaptchaNotValid, капча не валидна.
// * -6 ErrorBanned, вы были забанены. Сообщение содержит
// причину и номер бана.
// * -7 ErrorThreadClosed, тред закрыт.
// * -8 ErrorPostingToFast, вы постите слишком быстро ИЛИ
// установлен лимит на создание тредов на доске.
// * -9 ErrorFieldTooBig, поле слишком большое. Например,
// комментарий превысил лимит.
// * -10 ErrorFileSimilar, похожий файл уже был загружен.
// * -11 ErrorFileNotSupported, файл не поддерживается.
// * -12 ErrorFileTooBig, слишком большой файл.
// * -13 ErrorFilesTooMuch, вы загрузили больше файлов, чем
// разрешено на доске.
// * -14 ErrorTripBanned, трипкод был забанен.
// * -15 ErrorWordBanned, в комментарии недопустимое выражение.
// * -16 ErrorSpamList, в комментарии выражение из спамлиста.
// * -19 ErrorEmptyOp, при создании треда необходимо загрузить
// файл.
// * -20 ErrorEmptyPost, пост не может быть пустым, необходим
// комментарий/файл/etc.
// * -21 ErrorPasscodeNotExist, пасскод не существует.
// * -22 ErrorLimitReached, достигнут лимит запросов, попробуйте
// позже.
// * -23 ErrorFieldTooSmall, слишком короткое сообщение.
// (используется в поиске).
// * -50 ErrorReportTooManyPostsm, слишком много постов для жалобы.
// * -51 ErrorReportEmpty, вы ничего не написали в жалобе.
// * -52 ErrorReportExist, вы уже отправляли жалобу.
// * -300 ErrorAppNotExist, приложение не существует или было
// отключено.
// * -301 ErrorAppIDWrong, некорректный идентификатор приложения.
// * -302 ErrorAppIDExpired, идентификатор приложения истёк.
// * -303 ErrorAppIDSignature, неверная подпись поста с помощью
// идентификатора.
// * -304 ErrorAppIDUsed, указанный идентификатор уже был
// использован.
// * -24 ErrorWrongStickerID, некорректный идентификатор стикера.
// * -25 ErrorStickerNotFound, стикер не найден.
// Ref: #/components/schemas/ErrorCode
type ErrorCode int

const (
	ErrorCode0        ErrorCode = 0
	ErrorCode403      ErrorCode = 403
	ErrorCode666      ErrorCode = 666
	ErrorCode667      ErrorCode = 667
	ErrorCodeMinus2   ErrorCode = -2
	ErrorCodeMinus3   ErrorCode = -3
	ErrorCodeMinus31  ErrorCode = -31
	ErrorCodeMinus4   ErrorCode = -4
	ErrorCodeMinus41  ErrorCode = -41
	ErrorCodeMinus42  ErrorCode = -42
	ErrorCodeMinus5   ErrorCode = -5
	ErrorCodeMinus6   ErrorCode = -6
	ErrorCodeMinus7   ErrorCode = -7
	ErrorCodeMinus8   ErrorCode = -8
	ErrorCodeMinus9   ErrorCode = -9
	ErrorCodeMinus10  ErrorCode = -10
	ErrorCodeMinus11  ErrorCode = -11
	ErrorCodeMinus12  ErrorCode = -12
	ErrorCodeMinus13  ErrorCode = -13
	ErrorCodeMinus14  ErrorCode = -14
	ErrorCodeMinus15  ErrorCode = -15
	ErrorCodeMinus16  ErrorCode = -16
	ErrorCodeMinus19  ErrorCode = -19
	ErrorCodeMinus20  ErrorCode = -20
	ErrorCodeMinus21  ErrorCode = -21
	ErrorCodeMinus22  ErrorCode = -22
	ErrorCodeMinus23  ErrorCode = -23
	ErrorCodeMinus300 ErrorCode = -300
	ErrorCodeMinus301 ErrorCode = -301
	ErrorCodeMinus302 ErrorCode = -302
	ErrorCodeMinus303 ErrorCode = -303
	ErrorCodeMinus304 ErrorCode = -304
	ErrorCodeMinus24  ErrorCode = -24
	ErrorCodeMinus25  ErrorCode = -25
)

// AllValues returns all ErrorCode values.
func (ErrorCode) AllValues() []ErrorCode {
	return []ErrorCode{
		ErrorCode0,
		ErrorCode403,
		ErrorCode666,
		ErrorCode667,
		ErrorCodeMinus2,
		ErrorCodeMinus3,
		ErrorCodeMinus31,
		ErrorCodeMinus4,
		ErrorCodeMinus41,
		ErrorCodeMinus42,
		ErrorCodeMinus5,
		ErrorCodeMinus6,
		ErrorCodeMinus7,
		ErrorCodeMinus8,
		ErrorCodeMinus9,
		ErrorCodeMinus10,
		ErrorCodeMinus11,
		ErrorCodeMinus12,
		ErrorCodeMinus13,
		ErrorCodeMinus14,
		ErrorCodeMinus15,
		ErrorCodeMinus16,
		ErrorCodeMinus19,
		ErrorCodeMinus20,
		ErrorCodeMinus21,
		ErrorCodeMinus22,
		ErrorCodeMinus23,
		ErrorCodeMinus300,
		ErrorCodeMinus301,
		ErrorCodeMinus302,
		ErrorCodeMinus303,
		ErrorCodeMinus304,
		ErrorCodeMinus24,
		ErrorCodeMinus25,
	}
}

// Модель файла.
// Ref: #/components/schemas/File
type File struct {
	Name        string    `json:"name"`
	Fullname    string    `json:"fullname"`
	Displayname string    `json:"displayname"`
	Path        string    `json:"path"`
	Thumbnail   string    `json:"thumbnail"`
	MD5         OptString `json:"md5"`
	Type        FileType  `json:"type"`
	// Размер файла, в КБ.
	Size     int `json:"size"`
	Width    int `json:"width"`
	Height   int `json:"height"`
	TnWidth  int `json:"tn_width"`
	TnHeight int `json:"tn_height"`
	// Если >= 0, файл содержит NSFW контент, в данный момент
	// реализовано не на всех досках.
	Nsfw OptInt `json:"nsfw"`
	// В случае видео/аудио файла, содержит
	// продолжительность в формате XX:XX:XX.
	Duration OptString `json:"duration"`
	// В случае видео/аудио файла, содержит
	// продолжительность в секундах.
	DurationSecs OptInt `json:"duration_secs"`
	// В случае стикера, содержит ID стикер пака.
	Pack OptString `json:"pack"`
	// В случае стикера, содержит ID стикера.
	Sticker OptString `json:"sticker"`
	// В случае стикера, содержит ссылку на установку.
	Install OptString `json:"install"`
}

// GetName returns the value of Name.
func (s *File) GetName() string {
	return s.Name
}

// GetFullname returns the value of Fullname.
func (s *File) GetFullname() string {
	return s.Fullname
}

// GetDisplayname returns the value of Displayname.
func (s *File) GetDisplayname() string {
	return s.Displayname
}

// GetPath returns the value of Path.
func (s *File) GetPath() string {
	return s.Path
}

// GetThumbnail returns the value of Thumbnail.
func (s *File) GetThumbnail() string {
	return s.Thumbnail
}

// GetMD5 returns the value of MD5.
func (s *File) GetMD5() OptString {
	return s.MD5
}

// GetType returns the value of Type.
func (s *File) GetType() FileType {
	return s.Type
}

// GetSize returns the value of Size.
func (s *File) GetSize() int {
	return s.Size
}

// GetWidth returns the value of Width.
func (s *File) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *File) GetHeight() int {
	return s.Height
}

// GetTnWidth returns the value of TnWidth.
func (s *File) GetTnWidth() int {
	return s.TnWidth
}

// GetTnHeight returns the value of TnHeight.
func (s *File) GetTnHeight() int {
	return s.TnHeight
}

// GetNsfw returns the value of Nsfw.
func (s *File) GetNsfw() OptInt {
	return s.Nsfw
}

// GetDuration returns the value of Duration.
func (s *File) GetDuration() OptString {
	return s.Duration
}

// GetDurationSecs returns the value of DurationSecs.
func (s *File) GetDurationSecs() OptInt {
	return s.DurationSecs
}

// GetPack returns the value of Pack.
func (s *File) GetPack() OptString {
	return s.Pack
}

// GetSticker returns the value of Sticker.
func (s *File) GetSticker() OptString {
	return s.Sticker
}

// GetInstall returns the value of Install.
func (s *File) GetInstall() OptString {
	return s.Install
}

// SetName sets the value of Name.
func (s *File) SetName(val string) {
	s.Name = val
}

// SetFullname sets the value of Fullname.
func (s *File) SetFullname(val string) {
	s.Fullname = val
}

// SetDisplayname sets the value of Displayname.
func (s *File) SetDisplayname(val string) {
	s.Displayname = val
}

// SetPath sets the value of Path.
func (s *File) SetPath(val string) {
	s.Path = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *File) SetThumbnail(val string) {
	s.Thumbnail = val
}

// SetMD5 sets the value of MD5.
func (s *File) SetMD5(val OptString) {
	s.MD5 = val
}

// SetType sets the value of Type.
func (s *File) SetType(val FileType) {
	s.Type = val
}

// SetSize sets the value of Size.
func (s *File) SetSize(val int) {
	s.Size = val
}

// SetWidth sets the value of Width.
func (s *File) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *File) SetHeight(val int) {
	s.Height = val
}

// SetTnWidth sets the value of TnWidth.
func (s *File) SetTnWidth(val int) {
	s.TnWidth = val
}

// SetTnHeight sets the value of TnHeight.
func (s *File) SetTnHeight(val int) {
	s.TnHeight = val
}

// SetNsfw sets the value of Nsfw.
func (s *File) SetNsfw(val OptInt) {
	s.Nsfw = val
}

// SetDuration sets the value of Duration.
func (s *File) SetDuration(val OptString) {
	s.Duration = val
}

// SetDurationSecs sets the value of DurationSecs.
func (s *File) SetDurationSecs(val OptInt) {
	s.DurationSecs = val
}

// SetPack sets the value of Pack.
func (s *File) SetPack(val OptString) {
	s.Pack = val
}

// SetSticker sets the value of Sticker.
func (s *File) SetSticker(val OptString) {
	s.Sticker = val
}

// SetInstall sets the value of Install.
func (s *File) SetInstall(val OptString) {
	s.Install = val
}

// * 0 FileTypeNone
// * 1 FileTypeJpg
// * 2 FileTypePng
// * 3 FileTypeAPng
// * 4 FileTypeGif
// * 5 FileTypeBmp
// * 6 FileTypeWebm
// * 7 FileTypeMp3, не используется в данный момент.
// * 8 FileTypeOgg, не используется в данный момент.
// * 10 FileTypeMp4
// * 100 FileTypeSticker.
// Ref: #/components/schemas/FileType
type FileType int

const (
	FileType0   FileType = 0
	FileType1   FileType = 1
	FileType2   FileType = 2
	FileType3   FileType = 3
	FileType4   FileType = 4
	FileType5   FileType = 5
	FileType6   FileType = 6
	FileType7   FileType = 7
	FileType8   FileType = 8
	FileType10  FileType = 10
	FileType100 FileType = 100
)

// AllValues returns all FileType values.
func (FileType) AllValues() []FileType {
	return []FileType{
		FileType0,
		FileType1,
		FileType2,
		FileType3,
		FileType4,
		FileType5,
		FileType6,
		FileType7,
		FileType8,
		FileType10,
		FileType100,
	}
}

// Ref: #/components/schemas/Like
type Like struct {
	Result OptInt   `json:"result"`
	Error  OptError `json:"error"`
}

// GetResult returns the value of Result.
func (s *Like) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *Like) GetError() OptError {
	return s.Error
}

// SetResult sets the value of Result.
func (s *Like) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *Like) SetError(val OptError) {
	s.Error = val
}

// Ref: #/components/schemas/MobilePost
type MobilePost struct {
	Result OptInt   `json:"result"`
	Error  OptError `json:"error"`
	Post   OptPost  `json:"post"`
}

// GetResult returns the value of Result.
func (s *MobilePost) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *MobilePost) GetError() OptError {
	return s.Error
}

// GetPost returns the value of Post.
func (s *MobilePost) GetPost() OptPost {
	return s.Post
}

// SetResult sets the value of Result.
func (s *MobilePost) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *MobilePost) SetError(val OptError) {
	s.Error = val
}

// SetPost sets the value of Post.
func (s *MobilePost) SetPost(val OptPost) {
	s.Post = val
}

// Ref: #/components/schemas/MobileThreadLastInfo
type MobileThreadLastInfo struct {
	Result OptInt                        `json:"result"`
	Error  OptError                      `json:"error"`
	Thread OptMobileThreadLastInfoThread `json:"thread"`
}

// GetResult returns the value of Result.
func (s *MobileThreadLastInfo) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *MobileThreadLastInfo) GetError() OptError {
	return s.Error
}

// GetThread returns the value of Thread.
func (s *MobileThreadLastInfo) GetThread() OptMobileThreadLastInfoThread {
	return s.Thread
}

// SetResult sets the value of Result.
func (s *MobileThreadLastInfo) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *MobileThreadLastInfo) SetError(val OptError) {
	s.Error = val
}

// SetThread sets the value of Thread.
func (s *MobileThreadLastInfo) SetThread(val OptMobileThreadLastInfoThread) {
	s.Thread = val
}

type MobileThreadLastInfoThread struct {
	Num       OptInt `json:"num"`
	Timestamp OptInt `json:"timestamp"`
	Posts     OptInt `json:"posts"`
}

// GetNum returns the value of Num.
func (s *MobileThreadLastInfoThread) GetNum() OptInt {
	return s.Num
}

// GetTimestamp returns the value of Timestamp.
func (s *MobileThreadLastInfoThread) GetTimestamp() OptInt {
	return s.Timestamp
}

// GetPosts returns the value of Posts.
func (s *MobileThreadLastInfoThread) GetPosts() OptInt {
	return s.Posts
}

// SetNum sets the value of Num.
func (s *MobileThreadLastInfoThread) SetNum(val OptInt) {
	s.Num = val
}

// SetTimestamp sets the value of Timestamp.
func (s *MobileThreadLastInfoThread) SetTimestamp(val OptInt) {
	s.Timestamp = val
}

// SetPosts sets the value of Posts.
func (s *MobileThreadLastInfoThread) SetPosts(val OptInt) {
	s.Posts = val
}

// Ref: #/components/schemas/MobileThreadPostsAfter
type MobileThreadPostsAfter struct {
	Result        OptInt   `json:"result"`
	Error         OptError `json:"error"`
	UniquePosters OptInt   `json:"unique_posters"`
	Posts         []Post   `json:"posts"`
}

// GetResult returns the value of Result.
func (s *MobileThreadPostsAfter) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *MobileThreadPostsAfter) GetError() OptError {
	return s.Error
}

// GetUniquePosters returns the value of UniquePosters.
func (s *MobileThreadPostsAfter) GetUniquePosters() OptInt {
	return s.UniquePosters
}

// GetPosts returns the value of Posts.
func (s *MobileThreadPostsAfter) GetPosts() []Post {
	return s.Posts
}

// SetResult sets the value of Result.
func (s *MobileThreadPostsAfter) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *MobileThreadPostsAfter) SetError(val OptError) {
	s.Error = val
}

// SetUniquePosters sets the value of UniquePosters.
func (s *MobileThreadPostsAfter) SetUniquePosters(val OptInt) {
	s.UniquePosters = val
}

// SetPosts sets the value of Posts.
func (s *MobileThreadPostsAfter) SetPosts(val []Post) {
	s.Posts = val
}

// NewOptError returns new OptError with value set to v.
func NewOptError(v Error) OptError {
	return OptError{
		Value: v,
		Set:   true,
	}
}

// OptError is optional Error.
type OptError struct {
	Value Error
	Set   bool
}

// IsSet returns true if OptError was set.
func (o OptError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptError) Reset() {
	var v Error
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptError) SetTo(v Error) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptError) Get() (v Error, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptError) Or(d Error) Error {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorCode returns new OptErrorCode with value set to v.
func NewOptErrorCode(v ErrorCode) OptErrorCode {
	return OptErrorCode{
		Value: v,
		Set:   true,
	}
}

// OptErrorCode is optional ErrorCode.
type OptErrorCode struct {
	Value ErrorCode
	Set   bool
}

// IsSet returns true if OptErrorCode was set.
func (o OptErrorCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorCode) Reset() {
	var v ErrorCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorCode) SetTo(v ErrorCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorCode) Get() (v ErrorCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorCode) Or(d ErrorCode) ErrorCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMobileThreadLastInfoThread returns new OptMobileThreadLastInfoThread with value set to v.
func NewOptMobileThreadLastInfoThread(v MobileThreadLastInfoThread) OptMobileThreadLastInfoThread {
	return OptMobileThreadLastInfoThread{
		Value: v,
		Set:   true,
	}
}

// OptMobileThreadLastInfoThread is optional MobileThreadLastInfoThread.
type OptMobileThreadLastInfoThread struct {
	Value MobileThreadLastInfoThread
	Set   bool
}

// IsSet returns true if OptMobileThreadLastInfoThread was set.
func (o OptMobileThreadLastInfoThread) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMobileThreadLastInfoThread) Reset() {
	var v MobileThreadLastInfoThread
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMobileThreadLastInfoThread) SetTo(v MobileThreadLastInfoThread) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMobileThreadLastInfoThread) Get() (v MobileThreadLastInfoThread, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMobileThreadLastInfoThread) Or(d MobileThreadLastInfoThread) MobileThreadLastInfoThread {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPasscodePasscode returns new OptPasscodePasscode with value set to v.
func NewOptPasscodePasscode(v PasscodePasscode) OptPasscodePasscode {
	return OptPasscodePasscode{
		Value: v,
		Set:   true,
	}
}

// OptPasscodePasscode is optional PasscodePasscode.
type OptPasscodePasscode struct {
	Value PasscodePasscode
	Set   bool
}

// IsSet returns true if OptPasscodePasscode was set.
func (o OptPasscodePasscode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPasscodePasscode) Reset() {
	var v PasscodePasscode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPasscodePasscode) SetTo(v PasscodePasscode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPasscodePasscode) Get() (v PasscodePasscode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPasscodePasscode) Or(d PasscodePasscode) PasscodePasscode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPost returns new OptPost with value set to v.
func NewOptPost(v Post) OptPost {
	return OptPost{
		Value: v,
		Set:   true,
	}
}

// OptPost is optional Post.
type OptPost struct {
	Value Post
	Set   bool
}

// IsSet returns true if OptPost was set.
func (o OptPost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPost) Reset() {
	var v Post
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPost) SetTo(v Post) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPost) Get() (v Post, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPost) Or(d Post) Post {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPassloginPostReq returns new OptUserPassloginPostReq with value set to v.
func NewOptUserPassloginPostReq(v UserPassloginPostReq) OptUserPassloginPostReq {
	return OptUserPassloginPostReq{
		Value: v,
		Set:   true,
	}
}

// OptUserPassloginPostReq is optional UserPassloginPostReq.
type OptUserPassloginPostReq struct {
	Value UserPassloginPostReq
	Set   bool
}

// IsSet returns true if OptUserPassloginPostReq was set.
func (o OptUserPassloginPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPassloginPostReq) Reset() {
	var v UserPassloginPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPassloginPostReq) SetTo(v UserPassloginPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPassloginPostReq) Get() (v UserPassloginPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPassloginPostReq) Or(d UserPassloginPostReq) UserPassloginPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPostingPostReq returns new OptUserPostingPostReq with value set to v.
func NewOptUserPostingPostReq(v UserPostingPostReq) OptUserPostingPostReq {
	return OptUserPostingPostReq{
		Value: v,
		Set:   true,
	}
}

// OptUserPostingPostReq is optional UserPostingPostReq.
type OptUserPostingPostReq struct {
	Value UserPostingPostReq
	Set   bool
}

// IsSet returns true if OptUserPostingPostReq was set.
func (o OptUserPostingPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPostingPostReq) Reset() {
	var v UserPostingPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPostingPostReq) SetTo(v UserPostingPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPostingPostReq) Get() (v UserPostingPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPostingPostReq) Or(d UserPostingPostReq) UserPostingPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserReportPostReq returns new OptUserReportPostReq with value set to v.
func NewOptUserReportPostReq(v UserReportPostReq) OptUserReportPostReq {
	return OptUserReportPostReq{
		Value: v,
		Set:   true,
	}
}

// OptUserReportPostReq is optional UserReportPostReq.
type OptUserReportPostReq struct {
	Value UserReportPostReq
	Set   bool
}

// IsSet returns true if OptUserReportPostReq was set.
func (o OptUserReportPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserReportPostReq) Reset() {
	var v UserReportPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserReportPostReq) SetTo(v UserReportPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserReportPostReq) Get() (v UserReportPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserReportPostReq) Or(d UserReportPostReq) UserReportPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Passcode
type Passcode struct {
	Result   OptInt              `json:"result"`
	Error    OptError            `json:"error"`
	Passcode OptPasscodePasscode `json:"passcode"`
}

// GetResult returns the value of Result.
func (s *Passcode) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *Passcode) GetError() OptError {
	return s.Error
}

// GetPasscode returns the value of Passcode.
func (s *Passcode) GetPasscode() OptPasscodePasscode {
	return s.Passcode
}

// SetResult sets the value of Result.
func (s *Passcode) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *Passcode) SetError(val OptError) {
	s.Error = val
}

// SetPasscode sets the value of Passcode.
func (s *Passcode) SetPasscode(val OptPasscodePasscode) {
	s.Passcode = val
}

type PasscodePasscode struct {
	Type    OptString `json:"type"`
	Expires OptInt    `json:"expires"`
}

// GetType returns the value of Type.
func (s *PasscodePasscode) GetType() OptString {
	return s.Type
}

// GetExpires returns the value of Expires.
func (s *PasscodePasscode) GetExpires() OptInt {
	return s.Expires
}

// SetType sets the value of Type.
func (s *PasscodePasscode) SetType(val OptString) {
	s.Type = val
}

// SetExpires sets the value of Expires.
func (s *PasscodePasscode) SetExpires(val OptInt) {
	s.Expires = val
}

// Модель поста.
// Ref: #/components/schemas/Post
type Post struct {
	Num       int       `json:"num"`
	Parent    int       `json:"parent"`
	Board     string    `json:"board"`
	Timestamp int       `json:"timestamp"`
	Lasthit   int       `json:"lasthit"`
	Date      string    `json:"date"`
	Email     OptString `json:"email"`
	Subject   OptString `json:"subject"`
	Comment   string    `json:"comment"`
	Files     []File    `json:"files"`
	Views     int       `json:"views"`
	Sticky    int       `json:"sticky"`
	Endless   int       `json:"endless"`
	Closed    int       `json:"closed"`
	Banned    int       `json:"banned"`
	Op        int       `json:"op"`
	Name      OptString `json:"name"`
	Icon      OptString `json:"icon"`
	Trip      OptString `json:"trip"`
	TripStyle OptString `json:"trip_style"`
	Tags      OptString `json:"tags"`
	Likes     OptInt    `json:"likes"`
	Dislikes  OptInt    `json:"dislikes"`
}

// GetNum returns the value of Num.
func (s *Post) GetNum() int {
	return s.Num
}

// GetParent returns the value of Parent.
func (s *Post) GetParent() int {
	return s.Parent
}

// GetBoard returns the value of Board.
func (s *Post) GetBoard() string {
	return s.Board
}

// GetTimestamp returns the value of Timestamp.
func (s *Post) GetTimestamp() int {
	return s.Timestamp
}

// GetLasthit returns the value of Lasthit.
func (s *Post) GetLasthit() int {
	return s.Lasthit
}

// GetDate returns the value of Date.
func (s *Post) GetDate() string {
	return s.Date
}

// GetEmail returns the value of Email.
func (s *Post) GetEmail() OptString {
	return s.Email
}

// GetSubject returns the value of Subject.
func (s *Post) GetSubject() OptString {
	return s.Subject
}

// GetComment returns the value of Comment.
func (s *Post) GetComment() string {
	return s.Comment
}

// GetFiles returns the value of Files.
func (s *Post) GetFiles() []File {
	return s.Files
}

// GetViews returns the value of Views.
func (s *Post) GetViews() int {
	return s.Views
}

// GetSticky returns the value of Sticky.
func (s *Post) GetSticky() int {
	return s.Sticky
}

// GetEndless returns the value of Endless.
func (s *Post) GetEndless() int {
	return s.Endless
}

// GetClosed returns the value of Closed.
func (s *Post) GetClosed() int {
	return s.Closed
}

// GetBanned returns the value of Banned.
func (s *Post) GetBanned() int {
	return s.Banned
}

// GetOp returns the value of Op.
func (s *Post) GetOp() int {
	return s.Op
}

// GetName returns the value of Name.
func (s *Post) GetName() OptString {
	return s.Name
}

// GetIcon returns the value of Icon.
func (s *Post) GetIcon() OptString {
	return s.Icon
}

// GetTrip returns the value of Trip.
func (s *Post) GetTrip() OptString {
	return s.Trip
}

// GetTripStyle returns the value of TripStyle.
func (s *Post) GetTripStyle() OptString {
	return s.TripStyle
}

// GetTags returns the value of Tags.
func (s *Post) GetTags() OptString {
	return s.Tags
}

// GetLikes returns the value of Likes.
func (s *Post) GetLikes() OptInt {
	return s.Likes
}

// GetDislikes returns the value of Dislikes.
func (s *Post) GetDislikes() OptInt {
	return s.Dislikes
}

// SetNum sets the value of Num.
func (s *Post) SetNum(val int) {
	s.Num = val
}

// SetParent sets the value of Parent.
func (s *Post) SetParent(val int) {
	s.Parent = val
}

// SetBoard sets the value of Board.
func (s *Post) SetBoard(val string) {
	s.Board = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Post) SetTimestamp(val int) {
	s.Timestamp = val
}

// SetLasthit sets the value of Lasthit.
func (s *Post) SetLasthit(val int) {
	s.Lasthit = val
}

// SetDate sets the value of Date.
func (s *Post) SetDate(val string) {
	s.Date = val
}

// SetEmail sets the value of Email.
func (s *Post) SetEmail(val OptString) {
	s.Email = val
}

// SetSubject sets the value of Subject.
func (s *Post) SetSubject(val OptString) {
	s.Subject = val
}

// SetComment sets the value of Comment.
func (s *Post) SetComment(val string) {
	s.Comment = val
}

// SetFiles sets the value of Files.
func (s *Post) SetFiles(val []File) {
	s.Files = val
}

// SetViews sets the value of Views.
func (s *Post) SetViews(val int) {
	s.Views = val
}

// SetSticky sets the value of Sticky.
func (s *Post) SetSticky(val int) {
	s.Sticky = val
}

// SetEndless sets the value of Endless.
func (s *Post) SetEndless(val int) {
	s.Endless = val
}

// SetClosed sets the value of Closed.
func (s *Post) SetClosed(val int) {
	s.Closed = val
}

// SetBanned sets the value of Banned.
func (s *Post) SetBanned(val int) {
	s.Banned = val
}

// SetOp sets the value of Op.
func (s *Post) SetOp(val int) {
	s.Op = val
}

// SetName sets the value of Name.
func (s *Post) SetName(val OptString) {
	s.Name = val
}

// SetIcon sets the value of Icon.
func (s *Post) SetIcon(val OptString) {
	s.Icon = val
}

// SetTrip sets the value of Trip.
func (s *Post) SetTrip(val OptString) {
	s.Trip = val
}

// SetTripStyle sets the value of TripStyle.
func (s *Post) SetTripStyle(val OptString) {
	s.TripStyle = val
}

// SetTags sets the value of Tags.
func (s *Post) SetTags(val OptString) {
	s.Tags = val
}

// SetLikes sets the value of Likes.
func (s *Post) SetLikes(val OptInt) {
	s.Likes = val
}

// SetDislikes sets the value of Dislikes.
func (s *Post) SetDislikes(val OptInt) {
	s.Dislikes = val
}

// Ref: #/components/schemas/PostingNewPost
type PostingNewPost struct {
	Result OptInt   `json:"result"`
	Error  OptError `json:"error"`
	// Номер нового поста.
	Num OptInt `json:"num"`
}

// GetResult returns the value of Result.
func (s *PostingNewPost) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *PostingNewPost) GetError() OptError {
	return s.Error
}

// GetNum returns the value of Num.
func (s *PostingNewPost) GetNum() OptInt {
	return s.Num
}

// SetResult sets the value of Result.
func (s *PostingNewPost) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *PostingNewPost) SetError(val OptError) {
	s.Error = val
}

// SetNum sets the value of Num.
func (s *PostingNewPost) SetNum(val OptInt) {
	s.Num = val
}

// Ref: #/components/schemas/PostingNewThread
type PostingNewThread struct {
	Result OptInt   `json:"result"`
	Error  OptError `json:"error"`
	// Номер нового треда.
	Thread OptInt `json:"thread"`
}

// GetResult returns the value of Result.
func (s *PostingNewThread) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *PostingNewThread) GetError() OptError {
	return s.Error
}

// GetThread returns the value of Thread.
func (s *PostingNewThread) GetThread() OptInt {
	return s.Thread
}

// SetResult sets the value of Result.
func (s *PostingNewThread) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *PostingNewThread) SetError(val OptError) {
	s.Error = val
}

// SetThread sets the value of Thread.
func (s *PostingNewThread) SetThread(val OptInt) {
	s.Thread = val
}

// Ref: #/components/schemas/Report
type Report struct {
	Result OptInt   `json:"result"`
	Error  OptError `json:"error"`
}

// GetResult returns the value of Result.
func (s *Report) GetResult() OptInt {
	return s.Result
}

// GetError returns the value of Error.
func (s *Report) GetError() OptError {
	return s.Error
}

// SetResult sets the value of Result.
func (s *Report) SetResult(val OptInt) {
	s.Result = val
}

// SetError sets the value of Error.
func (s *Report) SetError(val OptError) {
	s.Error = val
}

type UserPassloginPostReq struct {
	Passcode string `json:"passcode"`
}

// GetPasscode returns the value of Passcode.
func (s *UserPassloginPostReq) GetPasscode() string {
	return s.Passcode
}

// SetPasscode sets the value of Passcode.
func (s *UserPassloginPostReq) SetPasscode(val string) {
	s.Passcode = val
}

// UserPostingPostOK represents sum type.
type UserPostingPostOK struct {
	Type             UserPostingPostOKType // switch on this field
	PostingNewThread PostingNewThread
	PostingNewPost   PostingNewPost
}

// UserPostingPostOKType is oneOf type of UserPostingPostOK.
type UserPostingPostOKType string

// Possible values for UserPostingPostOKType.
const (
	PostingNewThreadUserPostingPostOK UserPostingPostOKType = "PostingNewThread"
	PostingNewPostUserPostingPostOK   UserPostingPostOKType = "PostingNewPost"
)

// IsPostingNewThread reports whether UserPostingPostOK is PostingNewThread.
func (s UserPostingPostOK) IsPostingNewThread() bool {
	return s.Type == PostingNewThreadUserPostingPostOK
}

// IsPostingNewPost reports whether UserPostingPostOK is PostingNewPost.
func (s UserPostingPostOK) IsPostingNewPost() bool { return s.Type == PostingNewPostUserPostingPostOK }

// SetPostingNewThread sets UserPostingPostOK to PostingNewThread.
func (s *UserPostingPostOK) SetPostingNewThread(v PostingNewThread) {
	s.Type = PostingNewThreadUserPostingPostOK
	s.PostingNewThread = v
}

// GetPostingNewThread returns PostingNewThread and true boolean if UserPostingPostOK is PostingNewThread.
func (s UserPostingPostOK) GetPostingNewThread() (v PostingNewThread, ok bool) {
	if !s.IsPostingNewThread() {
		return v, false
	}
	return s.PostingNewThread, true
}

// NewPostingNewThreadUserPostingPostOK returns new UserPostingPostOK from PostingNewThread.
func NewPostingNewThreadUserPostingPostOK(v PostingNewThread) UserPostingPostOK {
	var s UserPostingPostOK
	s.SetPostingNewThread(v)
	return s
}

// SetPostingNewPost sets UserPostingPostOK to PostingNewPost.
func (s *UserPostingPostOK) SetPostingNewPost(v PostingNewPost) {
	s.Type = PostingNewPostUserPostingPostOK
	s.PostingNewPost = v
}

// GetPostingNewPost returns PostingNewPost and true boolean if UserPostingPostOK is PostingNewPost.
func (s UserPostingPostOK) GetPostingNewPost() (v PostingNewPost, ok bool) {
	if !s.IsPostingNewPost() {
		return v, false
	}
	return s.PostingNewPost, true
}

// NewPostingNewPostUserPostingPostOK returns new UserPostingPostOK from PostingNewPost.
func NewPostingNewPostUserPostingPostOK(v PostingNewPost) UserPostingPostOK {
	var s UserPostingPostOK
	s.SetPostingNewPost(v)
	return s
}

type UserPostingPostReq struct {
	CaptchaType CaptchaType `json:"captcha_type"`
	Board       string      `json:"board"`
	// Если не указано, будет создан тред.
	Thread OptInt `json:"thread"`
	// Если не включено в настройках доски - поле будет
	// проигнорировано.
	Name OptString `json:"name"`
	// Если не включено в настройках доски - поле будет
	// проигнорировано.
	Email OptString `json:"email"`
	// Если не включено в настройках доски - поле будет
	// проигнорировано.
	Tags OptString `json:"tags"`
	// Если не включено в настройках доски - поле будет
	// проигнорировано.
	Subject OptString `json:"subject"`
	Comment OptString `json:"comment"`
	Icon    OptInt    `json:"icon"`
	// Если не включено в настройках доски - поле будет
	// проигнорировано.
	OpMark OptInt             `json:"op_mark"`
	File   []ht.MultipartFile `json:"file[]"`
}

// GetCaptchaType returns the value of CaptchaType.
func (s *UserPostingPostReq) GetCaptchaType() CaptchaType {
	return s.CaptchaType
}

// GetBoard returns the value of Board.
func (s *UserPostingPostReq) GetBoard() string {
	return s.Board
}

// GetThread returns the value of Thread.
func (s *UserPostingPostReq) GetThread() OptInt {
	return s.Thread
}

// GetName returns the value of Name.
func (s *UserPostingPostReq) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserPostingPostReq) GetEmail() OptString {
	return s.Email
}

// GetTags returns the value of Tags.
func (s *UserPostingPostReq) GetTags() OptString {
	return s.Tags
}

// GetSubject returns the value of Subject.
func (s *UserPostingPostReq) GetSubject() OptString {
	return s.Subject
}

// GetComment returns the value of Comment.
func (s *UserPostingPostReq) GetComment() OptString {
	return s.Comment
}

// GetIcon returns the value of Icon.
func (s *UserPostingPostReq) GetIcon() OptInt {
	return s.Icon
}

// GetOpMark returns the value of OpMark.
func (s *UserPostingPostReq) GetOpMark() OptInt {
	return s.OpMark
}

// GetFile returns the value of File.
func (s *UserPostingPostReq) GetFile() []ht.MultipartFile {
	return s.File
}

// SetCaptchaType sets the value of CaptchaType.
func (s *UserPostingPostReq) SetCaptchaType(val CaptchaType) {
	s.CaptchaType = val
}

// SetBoard sets the value of Board.
func (s *UserPostingPostReq) SetBoard(val string) {
	s.Board = val
}

// SetThread sets the value of Thread.
func (s *UserPostingPostReq) SetThread(val OptInt) {
	s.Thread = val
}

// SetName sets the value of Name.
func (s *UserPostingPostReq) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserPostingPostReq) SetEmail(val OptString) {
	s.Email = val
}

// SetTags sets the value of Tags.
func (s *UserPostingPostReq) SetTags(val OptString) {
	s.Tags = val
}

// SetSubject sets the value of Subject.
func (s *UserPostingPostReq) SetSubject(val OptString) {
	s.Subject = val
}

// SetComment sets the value of Comment.
func (s *UserPostingPostReq) SetComment(val OptString) {
	s.Comment = val
}

// SetIcon sets the value of Icon.
func (s *UserPostingPostReq) SetIcon(val OptInt) {
	s.Icon = val
}

// SetOpMark sets the value of OpMark.
func (s *UserPostingPostReq) SetOpMark(val OptInt) {
	s.OpMark = val
}

// SetFile sets the value of File.
func (s *UserPostingPostReq) SetFile(val []ht.MultipartFile) {
	s.File = val
}

type UserReportPostReq struct {
	Board   string `json:"board"`
	Thread  int    `json:"thread"`
	Post    []int  `json:"post"`
	Comment string `json:"comment"`
}

// GetBoard returns the value of Board.
func (s *UserReportPostReq) GetBoard() string {
	return s.Board
}

// GetThread returns the value of Thread.
func (s *UserReportPostReq) GetThread() int {
	return s.Thread
}

// GetPost returns the value of Post.
func (s *UserReportPostReq) GetPost() []int {
	return s.Post
}

// GetComment returns the value of Comment.
func (s *UserReportPostReq) GetComment() string {
	return s.Comment
}

// SetBoard sets the value of Board.
func (s *UserReportPostReq) SetBoard(val string) {
	s.Board = val
}

// SetThread sets the value of Thread.
func (s *UserReportPostReq) SetThread(val int) {
	s.Thread = val
}

// SetPost sets the value of Post.
func (s *UserReportPostReq) SetPost(val []int) {
	s.Post = val
}

// SetComment sets the value of Comment.
func (s *UserReportPostReq) SetComment(val string) {
	s.Comment = val
}

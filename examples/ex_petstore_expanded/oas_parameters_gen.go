// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// DeletePetParams is parameters of deletePet operation.
type DeletePetParams struct {
	// ID of pet to delete.
	ID int64
}

func unpackDeletePetParams(packed map[string]any) (params DeletePetParams) {
	params.ID = packed["id"].(int64)
	return params
}

func decodeDeletePetParams(args [1]string, r *http.Request) (params DeletePetParams, _ error) {
	// Decode path: id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: id: parse")
			}
		} else {
			return params, errors.New("path: id: not specified")
		}
	}
	return params, nil
}

// FindPetByIDParams is parameters of find pet by id operation.
type FindPetByIDParams struct {
	// ID of pet to fetch.
	ID int64
}

func unpackFindPetByIDParams(packed map[string]any) (params FindPetByIDParams) {
	params.ID = packed["id"].(int64)
	return params
}

func decodeFindPetByIDParams(args [1]string, r *http.Request) (params FindPetByIDParams, _ error) {
	// Decode path: id.
	{
		param := args[0]
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return params, errors.Wrap(err, "path: id: parse")
			}
		} else {
			return params, errors.New("path: id: not specified")
		}
	}
	return params, nil
}

// FindPetsParams is parameters of findPets operation.
type FindPetsParams struct {
	// Tags to filter by.
	Tags []string `json:",omitempty"`
	// Maximum number of results to return.
	Limit OptInt32 `json:",omitempty"`
}

func unpackFindPetsParams(packed map[string]any) (params FindPetsParams) {
	if v, ok := packed["tags"]; ok {
		params.Tags = v.([]string)
	}
	if v, ok := packed["limit"]; ok {
		params.Limit = v.(OptInt32)
	}
	return params
}

func decodeFindPetsParams(args [0]string, r *http.Request) (params FindPetsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: tags.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tags",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotTagsVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotTagsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Tags = append(params.Tags, paramsDotTagsVal)
					return nil
				})
			}); err != nil {
				return params, errors.Wrap(err, "query: tags: parse")
			}
		}
	}
	// Decode query: limit.
	{
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return params, errors.Wrap(err, "query: limit: parse")
			}
		}
	}
	return params, nil
}

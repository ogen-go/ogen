// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		AddPet: ogenreflect.RuntimeOperation{
			Name: "AddPet",
			ID:   "addPet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(NewPet)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AddPetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Pet)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		DeletePet: ogenreflect.RuntimeOperation{
			Name: "DeletePet",
			ID:   "deletePet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DeletePetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(DeletePetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeletePetNoContent)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		FindPetByID: ogenreflect.RuntimeOperation{
			Name: "FindPetByID",
			ID:   "find pet by id",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(FindPetByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int64)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(FindPetByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Pet)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		FindPets: ogenreflect.RuntimeOperation{
			Name: "FindPets",
			ID:   "findPets",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(FindPetsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "tags",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new([]string)).Elem(),
							Name:     "tags",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(FindPetsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*FindPetsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(FindPetsOKApplicationJSON)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	AddPet      ogenreflect.RuntimeOperation
	DeletePet   ogenreflect.RuntimeOperation
	FindPetByID ogenreflect.RuntimeOperation
	FindPets    ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "AddPet":
		return p.AddPet, true
	case "DeletePet":
		return p.DeletePet, true
	case "FindPetByID":
		return p.FindPetByID, true
	case "FindPets":
		return p.FindPets, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "addPet":
		return p.AddPet, true
	case "deletePet":
		return p.DeletePet, true
	case "find pet by id":
		return p.FindPetByID, true
	case "findPets":
		return p.FindPets, true
	default:
		return op, false
	}
}

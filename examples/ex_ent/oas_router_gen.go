// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/pets"

			if l := len("/pets"); len(elem) >= l && elem[0:l] == "/pets" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "GET":
					s.handleListPetRequest([0]string{}, elemIsEscaped, w, r)
				case "POST":
					s.handleCreatePetRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "GET,POST")
				}

				return
			}
			switch elem[0] {
			case '/': // Prefix: "/"

				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "DELETE":
						s.handleDeletePetRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "GET":
						s.handleReadPetRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "PATCH":
						s.handleUpdatePetRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE,GET,PATCH")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "categories"

						if l := len("categories"); len(elem) >= l && elem[0:l] == "categories" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListPetCategoriesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreatePetCategoriesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}

					case 'f': // Prefix: "friends"

						if l := len("friends"); len(elem) >= l && elem[0:l] == "friends" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListPetFriendsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreatePetFriendsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}

					case 'o': // Prefix: "owner"

						if l := len("owner"); len(elem) >= l && elem[0:l] == "owner" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeletePetOwnerRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleReadPetOwnerRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreatePetOwnerRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,POST")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/pets"

			if l := len("/pets"); len(elem) >= l && elem[0:l] == "/pets" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "GET":
					r.name = ListPetOperation
					r.summary = "List Pets"
					r.operationID = "listPet"
					r.pathPattern = "/pets"
					r.args = args
					r.count = 0
					return r, true
				case "POST":
					r.name = CreatePetOperation
					r.summary = "Create a new Pet"
					r.operationID = "createPet"
					r.pathPattern = "/pets"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case '/': // Prefix: "/"

				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "DELETE":
						r.name = DeletePetOperation
						r.summary = "Deletes a Pet by ID"
						r.operationID = "deletePet"
						r.pathPattern = "/pets/{id}"
						r.args = args
						r.count = 1
						return r, true
					case "GET":
						r.name = ReadPetOperation
						r.summary = "Find a Pet by ID"
						r.operationID = "readPet"
						r.pathPattern = "/pets/{id}"
						r.args = args
						r.count = 1
						return r, true
					case "PATCH":
						r.name = UpdatePetOperation
						r.summary = "Updates a Pet"
						r.operationID = "updatePet"
						r.pathPattern = "/pets/{id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "categories"

						if l := len("categories"); len(elem) >= l && elem[0:l] == "categories" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = ListPetCategoriesOperation
								r.summary = "List attached Categories"
								r.operationID = "listPetCategories"
								r.pathPattern = "/pets/{id}/categories"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = CreatePetCategoriesOperation
								r.summary = "Create a new Category and attach it to the Pet"
								r.operationID = "createPetCategories"
								r.pathPattern = "/pets/{id}/categories"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 'f': // Prefix: "friends"

						if l := len("friends"); len(elem) >= l && elem[0:l] == "friends" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = ListPetFriendsOperation
								r.summary = "List attached Friends"
								r.operationID = "listPetFriends"
								r.pathPattern = "/pets/{id}/friends"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = CreatePetFriendsOperation
								r.summary = "Create a new Pet and attach it to the Pet"
								r.operationID = "createPetFriends"
								r.pathPattern = "/pets/{id}/friends"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 'o': // Prefix: "owner"

						if l := len("owner"); len(elem) >= l && elem[0:l] == "owner" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeletePetOwnerOperation
								r.summary = "Delete the attached Owner"
								r.operationID = "deletePetOwner"
								r.pathPattern = "/pets/{id}/owner"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = ReadPetOwnerOperation
								r.summary = "Find the attached User"
								r.operationID = "readPetOwner"
								r.pathPattern = "/pets/{id}/owner"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = CreatePetOwnerOperation
								r.summary = "Create a new User and attach it to the Pet"
								r.operationID = "createPetOwner"
								r.pathPattern = "/pets/{id}/owner"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		CreatePet: ogenreflect.RuntimeOperation{
			Name: "CreatePet",
			ID:   "createPet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CreatePetReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreatePetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetCreate)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R409)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetCreate)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R409)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		CreatePetCategories: ogenreflect.RuntimeOperation{
			Name: "CreatePetCategories",
			ID:   "createPetCategories",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CreatePetCategoriesReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CreatePetCategoriesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreatePetCategoriesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetCategoriesCreate)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R409)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetCategoriesCreate)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R409)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		CreatePetFriends: ogenreflect.RuntimeOperation{
			Name: "CreatePetFriends",
			ID:   "createPetFriends",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CreatePetFriendsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CreatePetFriendsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreatePetFriendsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetFriendsCreate)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R409)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetFriendsCreate)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R409)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		CreatePetOwner: ogenreflect.RuntimeOperation{
			Name: "CreatePetOwner",
			ID:   "createPetOwner",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CreatePetOwnerReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CreatePetOwnerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreatePetOwnerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetOwnerCreate)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R409)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetOwnerCreate)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R409)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		DeletePet: ogenreflect.RuntimeOperation{
			Name: "DeletePet",
			ID:   "deletePet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DeletePetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(DeletePetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeletePetNoContent)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		DeletePetOwner: ogenreflect.RuntimeOperation{
			Name: "DeletePetOwner",
			ID:   "deletePetOwner",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(DeletePetOwnerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(DeletePetOwnerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeletePetOwnerNoContent)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		ListPet: ogenreflect.RuntimeOperation{
			Name: "ListPet",
			ID:   "listPet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "itemsPerPage",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "itemsPerPage",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ListPetOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ListPetOKApplicationJSON)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		ListPetCategories: ogenreflect.RuntimeOperation{
			Name: "ListPetCategories",
			ID:   "listPetCategories",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPetCategoriesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "itemsPerPage",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "itemsPerPage",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPetCategoriesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ListPetCategoriesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ListPetCategoriesOKApplicationJSON)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		ListPetFriends: ogenreflect.RuntimeOperation{
			Name: "ListPetFriends",
			ID:   "listPetFriends",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPetFriendsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "itemsPerPage",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "itemsPerPage",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPetFriendsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ListPetFriendsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ListPetFriendsOKApplicationJSON)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		ReadPet: ogenreflect.RuntimeOperation{
			Name: "ReadPet",
			ID:   "readPet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetRead)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetRead)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		ReadPetOwner: ogenreflect.RuntimeOperation{
			Name: "ReadPetOwner",
			ID:   "readPetOwner",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPetOwnerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPetOwnerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetOwnerRead)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetOwnerRead)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
		UpdatePet: ogenreflect.RuntimeOperation{
			Name: "UpdatePet",
			ID:   "updatePet",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UpdatePetReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UpdatePetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UpdatePetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetUpdate)).Elem(),
						reflect.TypeOf(new(*R400)).Elem(),
						reflect.TypeOf(new(*R404)).Elem(),
						reflect.TypeOf(new(*R500)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetUpdate)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R400)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R404)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(R500)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	CreatePet           ogenreflect.RuntimeOperation
	CreatePetCategories ogenreflect.RuntimeOperation
	CreatePetFriends    ogenreflect.RuntimeOperation
	CreatePetOwner      ogenreflect.RuntimeOperation
	DeletePet           ogenreflect.RuntimeOperation
	DeletePetOwner      ogenreflect.RuntimeOperation
	ListPet             ogenreflect.RuntimeOperation
	ListPetCategories   ogenreflect.RuntimeOperation
	ListPetFriends      ogenreflect.RuntimeOperation
	ReadPet             ogenreflect.RuntimeOperation
	ReadPetOwner        ogenreflect.RuntimeOperation
	UpdatePet           ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "CreatePet":
		return p.CreatePet, true
	case "CreatePetCategories":
		return p.CreatePetCategories, true
	case "CreatePetFriends":
		return p.CreatePetFriends, true
	case "CreatePetOwner":
		return p.CreatePetOwner, true
	case "DeletePet":
		return p.DeletePet, true
	case "DeletePetOwner":
		return p.DeletePetOwner, true
	case "ListPet":
		return p.ListPet, true
	case "ListPetCategories":
		return p.ListPetCategories, true
	case "ListPetFriends":
		return p.ListPetFriends, true
	case "ReadPet":
		return p.ReadPet, true
	case "ReadPetOwner":
		return p.ReadPetOwner, true
	case "UpdatePet":
		return p.UpdatePet, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "createPet":
		return p.CreatePet, true
	case "createPetCategories":
		return p.CreatePetCategories, true
	case "createPetFriends":
		return p.CreatePetFriends, true
	case "createPetOwner":
		return p.CreatePetOwner, true
	case "deletePet":
		return p.DeletePet, true
	case "deletePetOwner":
		return p.DeletePetOwner, true
	case "listPet":
		return p.ListPet, true
	case "listPetCategories":
		return p.ListPetCategories, true
	case "listPetFriends":
		return p.ListPetFriends, true
	case "readPet":
		return p.ReadPet, true
	case "readPetOwner":
		return p.ReadPetOwner, true
	case "updatePet":
		return p.UpdatePet, true
	default:
		return op, false
	}
}

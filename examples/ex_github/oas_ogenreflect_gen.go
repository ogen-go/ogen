// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg",
			ID:   "actions/add-repo-access-to-self-hosted-runner-group-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsAddSelectedRepoToOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsAddSelectedRepoToOrgSecret",
			ID:   "actions/add-selected-repo-to-org-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsAddSelectedRepoToOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActionsAddSelectedRepoToOrgSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActionsAddSelectedRepoToOrgSecretNoContent)).Elem(),
						reflect.TypeOf(new(*ActionsAddSelectedRepoToOrgSecretConflict)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsAddSelfHostedRunnerToGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsAddSelfHostedRunnerToGroupForOrg",
			ID:   "actions/add-self-hosted-runner-to-group-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsAddSelfHostedRunnerToGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsAddSelfHostedRunnerToGroupForOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsApproveWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsApproveWorkflowRun",
			ID:   "actions/approve-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsApproveWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActionsApproveWorkflowRunRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*EmptyObject)).Elem(),
						reflect.TypeOf(new(*ActionsApproveWorkflowRunApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ActionsApproveWorkflowRunApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EmptyObject)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsApproveWorkflowRunApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsApproveWorkflowRunApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsCancelWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsCancelWorkflowRun",
			ID:   "actions/cancel-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCancelWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsCancelWorkflowRunAccepted)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsCancelWorkflowRunAccepted)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsCreateOrUpdateEnvironmentSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateOrUpdateEnvironmentSecret",
			ID:   "actions/create-or-update-environment-secret",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsCreateOrUpdateEnvironmentSecretReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateOrUpdateEnvironmentSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "environment_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "environment_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActionsCreateOrUpdateEnvironmentSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*EmptyObject)).Elem(),
						reflect.TypeOf(new(*ActionsCreateOrUpdateEnvironmentSecretNoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EmptyObject)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsCreateOrUpdateOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateOrUpdateOrgSecret",
			ID:   "actions/create-or-update-org-secret",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsCreateOrUpdateOrgSecretReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateOrUpdateOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActionsCreateOrUpdateOrgSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*EmptyObject)).Elem(),
						reflect.TypeOf(new(*ActionsCreateOrUpdateOrgSecretNoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EmptyObject)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsCreateOrUpdateRepoSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateOrUpdateRepoSecret",
			ID:   "actions/create-or-update-repo-secret",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsCreateOrUpdateRepoSecretReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateOrUpdateRepoSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActionsCreateOrUpdateRepoSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActionsCreateOrUpdateRepoSecretCreated)).Elem(),
						reflect.TypeOf(new(*ActionsCreateOrUpdateRepoSecretNoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsCreateOrUpdateRepoSecretCreated)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsCreateRegistrationTokenForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateRegistrationTokenForOrg",
			ID:   "actions/create-registration-token-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateRegistrationTokenForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AuthenticationToken)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthenticationToken)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsCreateRegistrationTokenForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateRegistrationTokenForRepo",
			ID:   "actions/create-registration-token-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateRegistrationTokenForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AuthenticationToken)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthenticationToken)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsCreateRemoveTokenForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateRemoveTokenForOrg",
			ID:   "actions/create-remove-token-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateRemoveTokenForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AuthenticationToken)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthenticationToken)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsCreateRemoveTokenForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateRemoveTokenForRepo",
			ID:   "actions/create-remove-token-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateRemoveTokenForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AuthenticationToken)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthenticationToken)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsCreateSelfHostedRunnerGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsCreateSelfHostedRunnerGroupForOrg",
			ID:   "actions/create-self-hosted-runner-group-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsCreateSelfHostedRunnerGroupForOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsCreateSelfHostedRunnerGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RunnerGroupsOrg)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RunnerGroupsOrg)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsDeleteArtifact: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteArtifact",
			ID:   "actions/delete-artifact",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteArtifactParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "artifact_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "artifact_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteArtifactNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteEnvironmentSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteEnvironmentSecret",
			ID:   "actions/delete-environment-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteEnvironmentSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "environment_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "environment_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteEnvironmentSecretNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteOrgSecret",
			ID:   "actions/delete-org-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteOrgSecretNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteRepoSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteRepoSecret",
			ID:   "actions/delete-repo-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteRepoSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteRepoSecretNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteSelfHostedRunnerFromOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteSelfHostedRunnerFromOrg",
			ID:   "actions/delete-self-hosted-runner-from-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteSelfHostedRunnerFromOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteSelfHostedRunnerFromOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteSelfHostedRunnerFromRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteSelfHostedRunnerFromRepo",
			ID:   "actions/delete-self-hosted-runner-from-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteSelfHostedRunnerFromRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteSelfHostedRunnerFromRepoNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteSelfHostedRunnerGroupFromOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteSelfHostedRunnerGroupFromOrg",
			ID:   "actions/delete-self-hosted-runner-group-from-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteSelfHostedRunnerGroupFromOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteWorkflowRun",
			ID:   "actions/delete-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteWorkflowRunNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDeleteWorkflowRunLogs: ogenreflect.RuntimeOperation{
			Name: "ActionsDeleteWorkflowRunLogs",
			ID:   "actions/delete-workflow-run-logs",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDeleteWorkflowRunLogsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDeleteWorkflowRunLogsNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDisableSelectedRepositoryGithubActionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsDisableSelectedRepositoryGithubActionsOrganization",
			ID:   "actions/disable-selected-repository-github-actions-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDisableSelectedRepositoryGithubActionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDownloadArtifact: ogenreflect.RuntimeOperation{
			Name: "ActionsDownloadArtifact",
			ID:   "actions/download-artifact",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDownloadArtifactParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "artifact_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "artifact_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "archive_format",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "archive_format",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDownloadArtifactFound)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDownloadJobLogsForWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsDownloadJobLogsForWorkflowRun",
			ID:   "actions/download-job-logs-for-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDownloadJobLogsForWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "job_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "job_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDownloadJobLogsForWorkflowRunFound)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsDownloadWorkflowRunLogs: ogenreflect.RuntimeOperation{
			Name: "ActionsDownloadWorkflowRunLogs",
			ID:   "actions/download-workflow-run-logs",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsDownloadWorkflowRunLogsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsDownloadWorkflowRunLogsFound)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsEnableSelectedRepositoryGithubActionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsEnableSelectedRepositoryGithubActionsOrganization",
			ID:   "actions/enable-selected-repository-github-actions-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsEnableSelectedRepositoryGithubActionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsGetAllowedActionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsGetAllowedActionsOrganization",
			ID:   "actions/get-allowed-actions-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetAllowedActionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(SelectedActions)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SelectedActions)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetAllowedActionsRepository: ogenreflect.RuntimeOperation{
			Name: "ActionsGetAllowedActionsRepository",
			ID:   "actions/get-allowed-actions-repository",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetAllowedActionsRepositoryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(SelectedActions)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SelectedActions)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetArtifact: ogenreflect.RuntimeOperation{
			Name: "ActionsGetArtifact",
			ID:   "actions/get-artifact",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetArtifactParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "artifact_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "artifact_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Artifact)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Artifact)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetEnvironmentPublicKey: ogenreflect.RuntimeOperation{
			Name: "ActionsGetEnvironmentPublicKey",
			ID:   "actions/get-environment-public-key",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetEnvironmentPublicKeyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "environment_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "environment_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsPublicKey)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsPublicKey)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetEnvironmentSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsGetEnvironmentSecret",
			ID:   "actions/get-environment-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetEnvironmentSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "environment_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "environment_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSecret)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsSecret)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetGithubActionsPermissionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsGetGithubActionsPermissionsOrganization",
			ID:   "actions/get-github-actions-permissions-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetGithubActionsPermissionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsOrganizationPermissions)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsOrganizationPermissions)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetGithubActionsPermissionsRepository: ogenreflect.RuntimeOperation{
			Name: "ActionsGetGithubActionsPermissionsRepository",
			ID:   "actions/get-github-actions-permissions-repository",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetGithubActionsPermissionsRepositoryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsRepositoryPermissions)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsRepositoryPermissions)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetJobForWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsGetJobForWorkflowRun",
			ID:   "actions/get-job-for-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetJobForWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "job_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "job_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Job)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Job)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetOrgPublicKey: ogenreflect.RuntimeOperation{
			Name: "ActionsGetOrgPublicKey",
			ID:   "actions/get-org-public-key",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetOrgPublicKeyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsPublicKey)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsPublicKey)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsGetOrgSecret",
			ID:   "actions/get-org-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OrganizationActionsSecret)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrganizationActionsSecret)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetRepoPublicKey: ogenreflect.RuntimeOperation{
			Name: "ActionsGetRepoPublicKey",
			ID:   "actions/get-repo-public-key",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetRepoPublicKeyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsPublicKey)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsPublicKey)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetRepoSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsGetRepoSecret",
			ID:   "actions/get-repo-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetRepoSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSecret)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsSecret)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetReviewsForRun: ogenreflect.RuntimeOperation{
			Name: "ActionsGetReviewsForRun",
			ID:   "actions/get-reviews-for-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetReviewsForRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]EnvironmentApprovals)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]EnvironmentApprovals)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetSelfHostedRunnerForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsGetSelfHostedRunnerForOrg",
			ID:   "actions/get-self-hosted-runner-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetSelfHostedRunnerForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Runner)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Runner)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetSelfHostedRunnerForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsGetSelfHostedRunnerForRepo",
			ID:   "actions/get-self-hosted-runner-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetSelfHostedRunnerForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Runner)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Runner)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetSelfHostedRunnerGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsGetSelfHostedRunnerGroupForOrg",
			ID:   "actions/get-self-hosted-runner-group-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetSelfHostedRunnerGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RunnerGroupsOrg)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RunnerGroupsOrg)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsGetWorkflowRun",
			ID:   "actions/get-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WorkflowRun)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WorkflowRun)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsGetWorkflowRunUsage: ogenreflect.RuntimeOperation{
			Name: "ActionsGetWorkflowRunUsage",
			ID:   "actions/get-workflow-run-usage",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsGetWorkflowRunUsageParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WorkflowRunUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WorkflowRunUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListArtifactsForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsListArtifactsForRepo",
			ID:   "actions/list-artifacts-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListArtifactsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListArtifactsForRepoOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListArtifactsForRepoOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListEnvironmentSecrets: ogenreflect.RuntimeOperation{
			Name: "ActionsListEnvironmentSecrets",
			ID:   "actions/list-environment-secrets",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListEnvironmentSecretsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "environment_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "environment_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListEnvironmentSecretsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListEnvironmentSecretsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListJobsForWorkflowRun: ogenreflect.RuntimeOperation{
			Name: "ActionsListJobsForWorkflowRun",
			ID:   "actions/list-jobs-for-workflow-run",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListJobsForWorkflowRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptActionsListJobsForWorkflowRunFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListJobsForWorkflowRunOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListJobsForWorkflowRunOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListOrgSecrets: ogenreflect.RuntimeOperation{
			Name: "ActionsListOrgSecrets",
			ID:   "actions/list-org-secrets",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListOrgSecretsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListOrgSecretsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListOrgSecretsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListRepoAccessToSelfHostedRunnerGroupInOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsListRepoAccessToSelfHostedRunnerGroupInOrg",
			ID:   "actions/list-repo-access-to-self-hosted-runner-group-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListRepoSecrets: ogenreflect.RuntimeOperation{
			Name: "ActionsListRepoSecrets",
			ID:   "actions/list-repo-secrets",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListRepoSecretsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListRepoSecretsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListRepoSecretsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListRepoWorkflows: ogenreflect.RuntimeOperation{
			Name: "ActionsListRepoWorkflows",
			ID:   "actions/list-repo-workflows",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListRepoWorkflowsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListRepoWorkflowsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListRepoWorkflowsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListRunnerApplicationsForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsListRunnerApplicationsForOrg",
			ID:   "actions/list-runner-applications-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListRunnerApplicationsForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]RunnerApplication)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]RunnerApplication)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListRunnerApplicationsForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsListRunnerApplicationsForRepo",
			ID:   "actions/list-runner-applications-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListRunnerApplicationsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]RunnerApplication)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]RunnerApplication)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListSelectedReposForOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsListSelectedReposForOrgSecret",
			ID:   "actions/list-selected-repos-for-org-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListSelectedReposForOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListSelectedReposForOrgSecretOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListSelectedReposForOrgSecretOK)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListSelectedRepositoriesEnabledGithubActionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsListSelectedRepositoriesEnabledGithubActionsOrganization",
			ID:   "actions/list-selected-repositories-enabled-github-actions-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListSelfHostedRunnerGroupsForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsListSelfHostedRunnerGroupsForOrg",
			ID:   "actions/list-self-hosted-runner-groups-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListSelfHostedRunnerGroupsForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListSelfHostedRunnerGroupsForOrgOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListSelfHostedRunnerGroupsForOrgOK)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListSelfHostedRunnersForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsListSelfHostedRunnersForOrg",
			ID:   "actions/list-self-hosted-runners-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListSelfHostedRunnersForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListSelfHostedRunnersForOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListSelfHostedRunnersForOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListSelfHostedRunnersForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsListSelfHostedRunnersForRepo",
			ID:   "actions/list-self-hosted-runners-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListSelfHostedRunnersForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListSelfHostedRunnersForRepoOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListSelfHostedRunnersForRepoOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListSelfHostedRunnersInGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsListSelfHostedRunnersInGroupForOrg",
			ID:   "actions/list-self-hosted-runners-in-group-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListSelfHostedRunnersInGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListSelfHostedRunnersInGroupForOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListSelfHostedRunnersInGroupForOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListWorkflowRunArtifacts: ogenreflect.RuntimeOperation{
			Name: "ActionsListWorkflowRunArtifacts",
			ID:   "actions/list-workflow-run-artifacts",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListWorkflowRunArtifactsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListWorkflowRunArtifactsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListWorkflowRunArtifactsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsListWorkflowRunsForRepo: ogenreflect.RuntimeOperation{
			Name: "ActionsListWorkflowRunsForRepo",
			ID:   "actions/list-workflow-runs-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsListWorkflowRunsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "actor",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "actor",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "branch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "branch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "event",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "event",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "status",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptActionsListWorkflowRunsForRepoStatus)).Elem(),
							Name:     "status",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "created",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "created",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsListWorkflowRunsForRepoOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsListWorkflowRunsForRepoOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsReRunWorkflow: ogenreflect.RuntimeOperation{
			Name: "ActionsReRunWorkflow",
			ID:   "actions/re-run-workflow",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsReRunWorkflowParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsReRunWorkflowCreated)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsReRunWorkflowCreated)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg",
			ID:   "actions/remove-repo-access-to-self-hosted-runner-group-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsRemoveSelectedRepoFromOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsRemoveSelectedRepoFromOrgSecret",
			ID:   "actions/remove-selected-repo-from-org-secret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsRemoveSelectedRepoFromOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActionsRemoveSelectedRepoFromOrgSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActionsRemoveSelectedRepoFromOrgSecretNoContent)).Elem(),
						reflect.TypeOf(new(*ActionsRemoveSelectedRepoFromOrgSecretConflict)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsRemoveSelfHostedRunnerFromGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsRemoveSelfHostedRunnerFromGroupForOrg",
			ID:   "actions/remove-self-hosted-runner-from-group-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsRemoveSelfHostedRunnerFromGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsRetryWorkflow: ogenreflect.RuntimeOperation{
			Name: "ActionsRetryWorkflow",
			ID:   "actions/retry-workflow",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsRetryWorkflowParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsRetryWorkflowCreated)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsRetryWorkflowCreated)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsReviewPendingDeploymentsForRun: ogenreflect.RuntimeOperation{
			Name: "ActionsReviewPendingDeploymentsForRun",
			ID:   "actions/review-pending-deployments-for-run",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsReviewPendingDeploymentsForRunReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsReviewPendingDeploymentsForRunParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Deployment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Deployment)).Elem(),
							},
						},
					},
				},
			},
		},
		ActionsSetAllowedActionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsSetAllowedActionsOrganization",
			ID:   "actions/set-allowed-actions-organization",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptSelectedActions)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetAllowedActionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetAllowedActionsOrganizationNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetAllowedActionsRepository: ogenreflect.RuntimeOperation{
			Name: "ActionsSetAllowedActionsRepository",
			ID:   "actions/set-allowed-actions-repository",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptSelectedActions)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetAllowedActionsRepositoryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetAllowedActionsRepositoryNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetGithubActionsPermissionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsSetGithubActionsPermissionsOrganization",
			ID:   "actions/set-github-actions-permissions-organization",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsSetGithubActionsPermissionsOrganizationReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetGithubActionsPermissionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetGithubActionsPermissionsOrganizationNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetGithubActionsPermissionsRepository: ogenreflect.RuntimeOperation{
			Name: "ActionsSetGithubActionsPermissionsRepository",
			ID:   "actions/set-github-actions-permissions-repository",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsSetGithubActionsPermissionsRepositoryReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetGithubActionsPermissionsRepositoryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetGithubActionsPermissionsRepositoryNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg",
			ID:   "actions/set-repo-access-to-self-hosted-runner-group-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetSelectedReposForOrgSecret: ogenreflect.RuntimeOperation{
			Name: "ActionsSetSelectedReposForOrgSecret",
			ID:   "actions/set-selected-repos-for-org-secret",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsSetSelectedReposForOrgSecretReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetSelectedReposForOrgSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "secret_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "secret_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetSelectedReposForOrgSecretNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization: ogenreflect.RuntimeOperation{
			Name: "ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization",
			ID:   "actions/set-selected-repositories-enabled-github-actions-organization",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsSetSelfHostedRunnersInGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsSetSelfHostedRunnersInGroupForOrg",
			ID:   "actions/set-self-hosted-runners-in-group-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsSetSelfHostedRunnersInGroupForOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsSetSelfHostedRunnersInGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsSetSelfHostedRunnersInGroupForOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActionsUpdateSelfHostedRunnerGroupForOrg: ogenreflect.RuntimeOperation{
			Name: "ActionsUpdateSelfHostedRunnerGroupForOrg",
			ID:   "actions/update-self-hosted-runner-group-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ActionsUpdateSelfHostedRunnerGroupForOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActionsUpdateSelfHostedRunnerGroupForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RunnerGroupsOrg)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RunnerGroupsOrg)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityCheckRepoIsStarredByAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityCheckRepoIsStarredByAuthenticatedUser",
			ID:   "activity/check-repo-is-starred-by-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityCheckRepoIsStarredByAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityCheckRepoIsStarredByAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityCheckRepoIsStarredByAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityDeleteRepoSubscription: ogenreflect.RuntimeOperation{
			Name: "ActivityDeleteRepoSubscription",
			ID:   "activity/delete-repo-subscription",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityDeleteRepoSubscriptionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActivityDeleteRepoSubscriptionNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActivityDeleteThreadSubscription: ogenreflect.RuntimeOperation{
			Name: "ActivityDeleteThreadSubscription",
			ID:   "activity/delete-thread-subscription",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityDeleteThreadSubscriptionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "thread_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityDeleteThreadSubscriptionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityDeleteThreadSubscriptionNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityDeleteThreadSubscriptionApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityDeleteThreadSubscriptionApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityGetFeeds: ogenreflect.RuntimeOperation{
			Name: "ActivityGetFeeds",
			ID:   "activity/get-feeds",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Feed)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Feed)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityGetRepoSubscription: ogenreflect.RuntimeOperation{
			Name: "ActivityGetRepoSubscription",
			ID:   "activity/get-repo-subscription",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityGetRepoSubscriptionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityGetRepoSubscriptionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RepositorySubscription)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ActivityGetRepoSubscriptionNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositorySubscription)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActivityGetThread: ogenreflect.RuntimeOperation{
			Name: "ActivityGetThread",
			ID:   "activity/get-thread",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityGetThreadParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "thread_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityGetThreadRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Thread)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityGetThreadApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityGetThreadApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Thread)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityGetThreadApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityGetThreadApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityGetThreadSubscriptionForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityGetThreadSubscriptionForAuthenticatedUser",
			ID:   "activity/get-thread-subscription-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityGetThreadSubscriptionForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "thread_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityGetThreadSubscriptionForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ThreadSubscription)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ThreadSubscription)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListEventsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListEventsForAuthenticatedUser",
			ID:   "activity/list-events-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListEventsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListNotificationsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListNotificationsForAuthenticatedUser",
			ID:   "activity/list-notifications-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListNotificationsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "all",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "all",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "participating",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "participating",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "before",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "before",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityListNotificationsForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityListNotificationsForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityListNotificationsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityListNotificationsForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListNotificationsForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListNotificationsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListNotificationsForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListOrgEventsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListOrgEventsForAuthenticatedUser",
			ID:   "activity/list-org-events-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListOrgEventsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListPublicEvents: ogenreflect.RuntimeOperation{
			Name: "ActivityListPublicEvents",
			ID:   "activity/list-public-events",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListPublicEventsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityListPublicEventsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityListPublicEventsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListPublicEventsOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListPublicEventsForRepoNetwork: ogenreflect.RuntimeOperation{
			Name: "ActivityListPublicEventsForRepoNetwork",
			ID:   "activity/list-public-events-for-repo-network",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListPublicEventsForRepoNetworkParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityListPublicEventsForRepoNetworkRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityListPublicEventsForRepoNetworkOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListPublicEventsForRepoNetworkOKApplicationJSON)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListPublicEventsForUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListPublicEventsForUser",
			ID:   "activity/list-public-events-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListPublicEventsForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListPublicOrgEvents: ogenreflect.RuntimeOperation{
			Name: "ActivityListPublicOrgEvents",
			ID:   "activity/list-public-org-events",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListPublicOrgEventsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListReceivedEventsForUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListReceivedEventsForUser",
			ID:   "activity/list-received-events-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListReceivedEventsForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListReceivedPublicEventsForUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListReceivedPublicEventsForUser",
			ID:   "activity/list-received-public-events-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListReceivedPublicEventsForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListRepoEvents: ogenreflect.RuntimeOperation{
			Name: "ActivityListRepoEvents",
			ID:   "activity/list-repo-events",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListRepoEventsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Event)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Event)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListRepoNotificationsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListRepoNotificationsForAuthenticatedUser",
			ID:   "activity/list-repo-notifications-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListRepoNotificationsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "all",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "all",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "participating",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "participating",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "before",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "before",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActivityListRepoNotificationsForAuthenticatedUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListRepoNotificationsForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListReposStarredByAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListReposStarredByAuthenticatedUser",
			ID:   "activity/list-repos-starred-by-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListReposStarredByAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptActivityListReposStarredByAuthenticatedUserSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptActivityListReposStarredByAuthenticatedUserDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityListReposStarredByAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityListReposStarredByAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListReposStarredByAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListReposStarredByAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListReposStarredByAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListReposWatchedByUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListReposWatchedByUser",
			ID:   "activity/list-repos-watched-by-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListReposWatchedByUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActivityListReposWatchedByUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListReposWatchedByUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListWatchedReposForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityListWatchedReposForAuthenticatedUser",
			ID:   "activity/list-watched-repos-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListWatchedReposForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityListWatchedReposForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityListWatchedReposForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListWatchedReposForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityListWatchersForRepo: ogenreflect.RuntimeOperation{
			Name: "ActivityListWatchersForRepo",
			ID:   "activity/list-watchers-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityListWatchersForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActivityListWatchersForRepoOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityListWatchersForRepoOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityMarkNotificationsAsRead: ogenreflect.RuntimeOperation{
			Name: "ActivityMarkNotificationsAsRead",
			ID:   "activity/mark-notifications-as-read",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptActivityMarkNotificationsAsReadReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityMarkNotificationsAsReadRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityMarkNotificationsAsReadAccepted)).Elem(),
						reflect.TypeOf(new(*ActivityMarkNotificationsAsReadResetContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityMarkNotificationsAsReadApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityMarkNotificationsAsReadApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityMarkNotificationsAsReadAccepted)).Elem(),
							},
						},
						"205": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityMarkNotificationsAsReadApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityMarkNotificationsAsReadApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityMarkRepoNotificationsAsRead: ogenreflect.RuntimeOperation{
			Name: "ActivityMarkRepoNotificationsAsRead",
			ID:   "activity/mark-repo-notifications-as-read",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptActivityMarkRepoNotificationsAsReadReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityMarkRepoNotificationsAsReadParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityMarkRepoNotificationsAsReadRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityMarkRepoNotificationsAsReadAccepted)).Elem(),
						reflect.TypeOf(new(*ActivityMarkRepoNotificationsAsReadResetContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityMarkRepoNotificationsAsReadAccepted)).Elem(),
							},
						},
						"205": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ActivityMarkThreadAsRead: ogenreflect.RuntimeOperation{
			Name: "ActivityMarkThreadAsRead",
			ID:   "activity/mark-thread-as-read",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityMarkThreadAsReadParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "thread_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityMarkThreadAsReadRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityMarkThreadAsReadResetContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"205": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivitySetRepoSubscription: ogenreflect.RuntimeOperation{
			Name: "ActivitySetRepoSubscription",
			ID:   "activity/set-repo-subscription",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptActivitySetRepoSubscriptionReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivitySetRepoSubscriptionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RepositorySubscription)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositorySubscription)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivitySetThreadSubscription: ogenreflect.RuntimeOperation{
			Name: "ActivitySetThreadSubscription",
			ID:   "activity/set-thread-subscription",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptActivitySetThreadSubscriptionReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivitySetThreadSubscriptionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "thread_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "thread_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivitySetThreadSubscriptionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ThreadSubscription)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivitySetThreadSubscriptionApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivitySetThreadSubscriptionApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ThreadSubscription)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivitySetThreadSubscriptionApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivitySetThreadSubscriptionApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityStarRepoForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityStarRepoForAuthenticatedUser",
			ID:   "activity/star-repo-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityStarRepoForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityStarRepoForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityStarRepoForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ActivityUnstarRepoForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ActivityUnstarRepoForAuthenticatedUser",
			ID:   "activity/unstar-repo-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ActivityUnstarRepoForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ActivityUnstarRepoForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ActivityUnstarRepoForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsAddRepoToInstallation: ogenreflect.RuntimeOperation{
			Name: "AppsAddRepoToInstallation",
			ID:   "apps/add-repo-to-installation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsAddRepoToInstallationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsAddRepoToInstallationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsAddRepoToInstallationNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*AppsAddRepoToInstallationApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsAddRepoToInstallationApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsAddRepoToInstallationApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsAddRepoToInstallationApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsCheckToken: ogenreflect.RuntimeOperation{
			Name: "AppsCheckToken",
			ID:   "apps/check-token",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AppsCheckTokenReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsCheckTokenParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsCheckTokenRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Authorization)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Authorization)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsCreateContentAttachment: ogenreflect.RuntimeOperation{
			Name: "AppsCreateContentAttachment",
			ID:   "apps/create-content-attachment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AppsCreateContentAttachmentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsCreateContentAttachmentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content_reference_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "content_reference_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsCreateContentAttachmentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ContentReferenceAttachment)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*AppsCreateContentAttachmentApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsCreateContentAttachmentApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*AppsCreateContentAttachmentApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ContentReferenceAttachment)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateContentAttachmentApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateContentAttachmentApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateContentAttachmentApplicationJSONGone)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsCreateFromManifest: ogenreflect.RuntimeOperation{
			Name: "AppsCreateFromManifest",
			ID:   "apps/create-from-manifest",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(*AppsCreateFromManifestReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsCreateFromManifestParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "code",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "code",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsCreateFromManifestRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsCreateFromManifestCreated)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateFromManifestCreated)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsCreateInstallationAccessToken: ogenreflect.RuntimeOperation{
			Name: "AppsCreateInstallationAccessToken",
			ID:   "apps/create-installation-access-token",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptAppsCreateInstallationAccessTokenReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsCreateInstallationAccessTokenParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsCreateInstallationAccessTokenRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*InstallationToken)).Elem(),
						reflect.TypeOf(new(*AppsCreateInstallationAccessTokenApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsCreateInstallationAccessTokenApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsCreateInstallationAccessTokenApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(InstallationToken)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateInstallationAccessTokenApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateInstallationAccessTokenApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsCreateInstallationAccessTokenApplicationJSONNotFound)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsDeleteAuthorization: ogenreflect.RuntimeOperation{
			Name: "AppsDeleteAuthorization",
			ID:   "apps/delete-authorization",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AppsDeleteAuthorizationReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsDeleteAuthorizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsDeleteAuthorizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsDeleteAuthorizationNoContent)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsDeleteInstallation: ogenreflect.RuntimeOperation{
			Name: "AppsDeleteInstallation",
			ID:   "apps/delete-installation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsDeleteInstallationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsDeleteInstallationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsDeleteInstallationNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsDeleteToken: ogenreflect.RuntimeOperation{
			Name: "AppsDeleteToken",
			ID:   "apps/delete-token",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AppsDeleteTokenReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsDeleteTokenParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsDeleteTokenRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsDeleteTokenNoContent)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsGetAuthenticated: ogenreflect.RuntimeOperation{
			Name: "AppsGetAuthenticated",
			ID:   "apps/get-authenticated",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Integration)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Integration)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsGetBySlug: ogenreflect.RuntimeOperation{
			Name: "AppsGetBySlug",
			ID:   "apps/get-by-slug",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsGetBySlugParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "app_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "app_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsGetBySlugRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Integration)).Elem(),
						reflect.TypeOf(new(*AppsGetBySlugApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsGetBySlugApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Integration)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsGetBySlugApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsGetBySlugApplicationJSONNotFound)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsGetSubscriptionPlanForAccount: ogenreflect.RuntimeOperation{
			Name: "AppsGetSubscriptionPlanForAccount",
			ID:   "apps/get-subscription-plan-for-account",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsGetSubscriptionPlanForAccountParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "account_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "account_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsGetSubscriptionPlanForAccountRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketplacePurchase)).Elem(),
						reflect.TypeOf(new(*AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsGetSubscriptionPlanForAccountApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketplacePurchase)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsGetSubscriptionPlanForAccountApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsGetSubscriptionPlanForAccountStubbed: ogenreflect.RuntimeOperation{
			Name: "AppsGetSubscriptionPlanForAccountStubbed",
			ID:   "apps/get-subscription-plan-for-account-stubbed",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsGetSubscriptionPlanForAccountStubbedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "account_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "account_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsGetSubscriptionPlanForAccountStubbedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketplacePurchase)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*AppsGetSubscriptionPlanForAccountStubbedNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketplacePurchase)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		AppsGetWebhookConfigForApp: ogenreflect.RuntimeOperation{
			Name: "AppsGetWebhookConfigForApp",
			ID:   "apps/get-webhook-config-for-app",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WebhookConfig)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookConfig)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsGetWebhookDelivery: ogenreflect.RuntimeOperation{
			Name: "AppsGetWebhookDelivery",
			ID:   "apps/get-webhook-delivery",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsGetWebhookDeliveryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "delivery_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "delivery_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsGetWebhookDeliveryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*HookDelivery)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(HookDelivery)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListAccountsForPlan: ogenreflect.RuntimeOperation{
			Name: "AppsListAccountsForPlan",
			ID:   "apps/list-accounts-for-plan",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListAccountsForPlanParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "plan_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "plan_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptAppsListAccountsForPlanSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptAppsListAccountsForPlanDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListAccountsForPlanRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListAccountsForPlanOKHeaders)).Elem(),
						reflect.TypeOf(new(*AppsListAccountsForPlanApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsListAccountsForPlanApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListAccountsForPlanOKHeaders)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListAccountsForPlanApplicationJSONUnauthorized)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListAccountsForPlanApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListAccountsForPlanStubbed: ogenreflect.RuntimeOperation{
			Name: "AppsListAccountsForPlanStubbed",
			ID:   "apps/list-accounts-for-plan-stubbed",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListAccountsForPlanStubbedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "plan_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "plan_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptAppsListAccountsForPlanStubbedSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptAppsListAccountsForPlanStubbedDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListAccountsForPlanStubbedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListAccountsForPlanStubbedOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListAccountsForPlanStubbedOKHeaders)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListInstallationReposForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "AppsListInstallationReposForAuthenticatedUser",
			ID:   "apps/list-installation-repos-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListInstallationReposForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListInstallationReposForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListInstallationReposForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListInstallationReposForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListPlans: ogenreflect.RuntimeOperation{
			Name: "AppsListPlans",
			ID:   "apps/list-plans",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListPlansParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListPlansRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListPlansOKHeaders)).Elem(),
						reflect.TypeOf(new(*AppsListPlansApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsListPlansApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListPlansOKHeaders)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListPlansApplicationJSONUnauthorized)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListPlansApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListPlansStubbed: ogenreflect.RuntimeOperation{
			Name: "AppsListPlansStubbed",
			ID:   "apps/list-plans-stubbed",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListPlansStubbedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListPlansStubbedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListPlansStubbedOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListPlansStubbedOKHeaders)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListReposAccessibleToInstallation: ogenreflect.RuntimeOperation{
			Name: "AppsListReposAccessibleToInstallation",
			ID:   "apps/list-repos-accessible-to-installation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListReposAccessibleToInstallationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListReposAccessibleToInstallationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListReposAccessibleToInstallationOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*AppsListReposAccessibleToInstallationApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsListReposAccessibleToInstallationApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListReposAccessibleToInstallationOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListReposAccessibleToInstallationApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListReposAccessibleToInstallationApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListSubscriptionsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "AppsListSubscriptionsForAuthenticatedUser",
			ID:   "apps/list-subscriptions-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListSubscriptionsForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListSubscriptionsForAuthenticatedUserStubbed: ogenreflect.RuntimeOperation{
			Name: "AppsListSubscriptionsForAuthenticatedUserStubbed",
			ID:   "apps/list-subscriptions-for-authenticated-user-stubbed",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserStubbedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserStubbedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsListWebhookDeliveries: ogenreflect.RuntimeOperation{
			Name: "AppsListWebhookDeliveries",
			ID:   "apps/list-webhook-deliveries",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsListWebhookDeliveriesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "cursor",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "cursor",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsListWebhookDeliveriesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsListWebhookDeliveriesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsListWebhookDeliveriesOKApplicationJSON)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsRedeliverWebhookDelivery: ogenreflect.RuntimeOperation{
			Name: "AppsRedeliverWebhookDelivery",
			ID:   "apps/redeliver-webhook-delivery",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsRedeliverWebhookDeliveryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "delivery_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "delivery_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsRedeliverWebhookDeliveryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsRemoveRepoFromInstallation: ogenreflect.RuntimeOperation{
			Name: "AppsRemoveRepoFromInstallation",
			ID:   "apps/remove-repo-from-installation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsRemoveRepoFromInstallationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repository_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsRemoveRepoFromInstallationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsRemoveRepoFromInstallationNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*AppsRemoveRepoFromInstallationApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsRemoveRepoFromInstallationApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsRemoveRepoFromInstallationApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsRemoveRepoFromInstallationApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsResetToken: ogenreflect.RuntimeOperation{
			Name: "AppsResetToken",
			ID:   "apps/reset-token",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AppsResetTokenReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsResetTokenParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsResetTokenRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Authorization)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Authorization)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsRevokeInstallationAccessToken: ogenreflect.RuntimeOperation{
			Name: "AppsRevokeInstallationAccessToken",
			ID:   "apps/revoke-installation-access-token",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AppsRevokeInstallationAccessTokenNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		AppsScopeToken: ogenreflect.RuntimeOperation{
			Name: "AppsScopeToken",
			ID:   "apps/scope-token",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(AppsScopeTokenReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsScopeTokenParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsScopeTokenRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Authorization)).Elem(),
						reflect.TypeOf(new(*AppsScopeTokenApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*AppsScopeTokenApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*AppsScopeTokenApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Authorization)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsScopeTokenApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsScopeTokenApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AppsScopeTokenApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsSuspendInstallation: ogenreflect.RuntimeOperation{
			Name: "AppsSuspendInstallation",
			ID:   "apps/suspend-installation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsSuspendInstallationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsSuspendInstallationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsSuspendInstallationNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsUnsuspendInstallation: ogenreflect.RuntimeOperation{
			Name: "AppsUnsuspendInstallation",
			ID:   "apps/unsuspend-installation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(AppsUnsuspendInstallationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "installation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "installation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(AppsUnsuspendInstallationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AppsUnsuspendInstallationNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		AppsUpdateWebhookConfigForApp: ogenreflect.RuntimeOperation{
			Name: "AppsUpdateWebhookConfigForApp",
			ID:   "apps/update-webhook-config-for-app",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptAppsUpdateWebhookConfigForAppReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WebhookConfig)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookConfig)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetGithubActionsBillingGhe: ogenreflect.RuntimeOperation{
			Name: "BillingGetGithubActionsBillingGhe",
			ID:   "billing/get-github-actions-billing-ghe",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetGithubActionsBillingGheParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetGithubActionsBillingOrg: ogenreflect.RuntimeOperation{
			Name: "BillingGetGithubActionsBillingOrg",
			ID:   "billing/get-github-actions-billing-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetGithubActionsBillingOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetGithubActionsBillingUser: ogenreflect.RuntimeOperation{
			Name: "BillingGetGithubActionsBillingUser",
			ID:   "billing/get-github-actions-billing-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetGithubActionsBillingUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetGithubPackagesBillingGhe: ogenreflect.RuntimeOperation{
			Name: "BillingGetGithubPackagesBillingGhe",
			ID:   "billing/get-github-packages-billing-ghe",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetGithubPackagesBillingGheParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PackagesBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetGithubPackagesBillingOrg: ogenreflect.RuntimeOperation{
			Name: "BillingGetGithubPackagesBillingOrg",
			ID:   "billing/get-github-packages-billing-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetGithubPackagesBillingOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PackagesBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetGithubPackagesBillingUser: ogenreflect.RuntimeOperation{
			Name: "BillingGetGithubPackagesBillingUser",
			ID:   "billing/get-github-packages-billing-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetGithubPackagesBillingUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PackagesBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetSharedStorageBillingGhe: ogenreflect.RuntimeOperation{
			Name: "BillingGetSharedStorageBillingGhe",
			ID:   "billing/get-shared-storage-billing-ghe",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetSharedStorageBillingGheParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CombinedBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CombinedBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetSharedStorageBillingOrg: ogenreflect.RuntimeOperation{
			Name: "BillingGetSharedStorageBillingOrg",
			ID:   "billing/get-shared-storage-billing-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetSharedStorageBillingOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CombinedBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CombinedBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		BillingGetSharedStorageBillingUser: ogenreflect.RuntimeOperation{
			Name: "BillingGetSharedStorageBillingUser",
			ID:   "billing/get-shared-storage-billing-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(BillingGetSharedStorageBillingUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CombinedBillingUsage)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CombinedBillingUsage)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksCreateSuite: ogenreflect.RuntimeOperation{
			Name: "ChecksCreateSuite",
			ID:   "checks/create-suite",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ChecksCreateSuiteReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksCreateSuiteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ChecksCreateSuiteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ChecksCreateSuiteApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ChecksCreateSuiteApplicationJSONCreated)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksCreateSuiteApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksCreateSuiteApplicationJSONCreated)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksGet: ogenreflect.RuntimeOperation{
			Name: "ChecksGet",
			ID:   "checks/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "check_run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CheckRun)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CheckRun)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksGetSuite: ogenreflect.RuntimeOperation{
			Name: "ChecksGetSuite",
			ID:   "checks/get-suite",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksGetSuiteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_suite_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "check_suite_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CheckSuite)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CheckSuite)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksListAnnotations: ogenreflect.RuntimeOperation{
			Name: "ChecksListAnnotations",
			ID:   "checks/list-annotations",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksListAnnotationsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_run_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "check_run_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ChecksListAnnotationsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksListAnnotationsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksListForRef: ogenreflect.RuntimeOperation{
			Name: "ChecksListForRef",
			ID:   "checks/list-for-ref",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksListForRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_name",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "check_name",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "status",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptChecksListForRefStatus)).Elem(),
							Name:     "status",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptChecksListForRefFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "app_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "app_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ChecksListForRefOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksListForRefOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksListForSuite: ogenreflect.RuntimeOperation{
			Name: "ChecksListForSuite",
			ID:   "checks/list-for-suite",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksListForSuiteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_suite_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "check_suite_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_name",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "check_name",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "status",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptChecksListForSuiteStatus)).Elem(),
							Name:     "status",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptChecksListForSuiteFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ChecksListForSuiteOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksListForSuiteOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksListSuitesForRef: ogenreflect.RuntimeOperation{
			Name: "ChecksListSuitesForRef",
			ID:   "checks/list-suites-for-ref",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksListSuitesForRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "app_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "app_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "check_name",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "check_name",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ChecksListSuitesForRefOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksListSuitesForRefOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksRerequestSuite: ogenreflect.RuntimeOperation{
			Name: "ChecksRerequestSuite",
			ID:   "checks/rerequest-suite",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksRerequestSuiteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "check_suite_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "check_suite_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ChecksRerequestSuiteCreated)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ChecksRerequestSuiteCreated)).Elem(),
							},
						},
					},
				},
			},
		},
		ChecksSetSuitesPreferences: ogenreflect.RuntimeOperation{
			Name: "ChecksSetSuitesPreferences",
			ID:   "checks/set-suites-preferences",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ChecksSetSuitesPreferencesReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ChecksSetSuitesPreferencesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CheckSuitePreference)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CheckSuitePreference)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningDeleteAnalysis: ogenreflect.RuntimeOperation{
			Name: "CodeScanningDeleteAnalysis",
			ID:   "code-scanning/delete-analysis",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningDeleteAnalysisParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "analysis_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "analysis_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "confirm_delete",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptNilString)).Elem(),
							Name:     "confirm_delete",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningDeleteAnalysisRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningAnalysisDeletion)).Elem(),
						reflect.TypeOf(new(*CodeScanningDeleteAnalysisApplicationJSONBadRequest)).Elem(),
						reflect.TypeOf(new(*CodeScanningDeleteAnalysisApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningDeleteAnalysisApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningAnalysisDeletion)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningDeleteAnalysisApplicationJSONBadRequest)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningDeleteAnalysisApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningDeleteAnalysisApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningGetAlert: ogenreflect.RuntimeOperation{
			Name: "CodeScanningGetAlert",
			ID:   "code-scanning/get-alert",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningGetAlertParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "alert_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(AlertNumber)).Elem(),
							Name:     "alert_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningGetAlertRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningAlert)).Elem(),
						reflect.TypeOf(new(*CodeScanningGetAlertApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningGetAlertApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningAlert)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningGetAlertApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningGetAlertApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningGetAnalysis: ogenreflect.RuntimeOperation{
			Name: "CodeScanningGetAnalysis",
			ID:   "code-scanning/get-analysis",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningGetAnalysisParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "analysis_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "analysis_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningGetAnalysisRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningAnalysis)).Elem(),
						reflect.TypeOf(new(*CodeScanningGetAnalysisOKApplicationJSONSarif)).Elem(),
						reflect.TypeOf(new(*CodeScanningGetAnalysisApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningGetAnalysisApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json":       reflect.TypeOf(new(CodeScanningAnalysis)).Elem(),
								"application/json+sarif": reflect.TypeOf(new(CodeScanningGetAnalysisOKApplicationJSONSarif)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningGetAnalysisApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningGetAnalysisApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningGetSarif: ogenreflect.RuntimeOperation{
			Name: "CodeScanningGetSarif",
			ID:   "code-scanning/get-sarif",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningGetSarifParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sarif_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "sarif_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningGetSarifRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningSarifsStatus)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*CodeScanningGetSarifNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningSarifsStatus)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningListAlertInstances: ogenreflect.RuntimeOperation{
			Name: "CodeScanningListAlertInstances",
			ID:   "code-scanning/list-alert-instances",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningListAlertInstancesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "alert_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(AlertNumber)).Elem(),
							Name:     "alert_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "ref",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningRef)).Elem(),
							Name:     "ref",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningListAlertInstancesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningListAlertInstancesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*CodeScanningListAlertInstancesApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningListAlertInstancesApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListAlertInstancesOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListAlertInstancesApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListAlertInstancesApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningListAlertsForRepo: ogenreflect.RuntimeOperation{
			Name: "CodeScanningListAlertsForRepo",
			ID:   "code-scanning/list-alerts-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningListAlertsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "tool_name",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningAnalysisToolName)).Elem(),
							Name:     "tool_name",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tool_guid",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptNilCodeScanningAnalysisToolGUID)).Elem(),
							Name:     "tool_guid",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "ref",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningRef)).Elem(),
							Name:     "ref",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningAlertState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningListAlertsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningListAlertsForRepoOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*CodeScanningListAlertsForRepoApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningListAlertsForRepoApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListAlertsForRepoOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListAlertsForRepoApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListAlertsForRepoApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningListRecentAnalyses: ogenreflect.RuntimeOperation{
			Name: "CodeScanningListRecentAnalyses",
			ID:   "code-scanning/list-recent-analyses",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningListRecentAnalysesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "tool_name",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningAnalysisToolName)).Elem(),
							Name:     "tool_name",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tool_guid",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptNilCodeScanningAnalysisToolGUID)).Elem(),
							Name:     "tool_guid",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "ref",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningRef)).Elem(),
							Name:     "ref",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sarif_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptCodeScanningAnalysisSarifID)).Elem(),
							Name:     "sarif_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningListRecentAnalysesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningListRecentAnalysesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*CodeScanningListRecentAnalysesApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningListRecentAnalysesApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListRecentAnalysesOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListRecentAnalysesApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningListRecentAnalysesApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningUpdateAlert: ogenreflect.RuntimeOperation{
			Name: "CodeScanningUpdateAlert",
			ID:   "code-scanning/update-alert",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CodeScanningUpdateAlertReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningUpdateAlertParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "alert_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(AlertNumber)).Elem(),
							Name:     "alert_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningUpdateAlertRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningAlert)).Elem(),
						reflect.TypeOf(new(*CodeScanningUpdateAlertApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningUpdateAlertApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningAlert)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningUpdateAlertApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningUpdateAlertApplicationJSONNotFound)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodeScanningUploadSarif: ogenreflect.RuntimeOperation{
			Name: "CodeScanningUploadSarif",
			ID:   "code-scanning/upload-sarif",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(CodeScanningUploadSarifReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodeScanningUploadSarifParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodeScanningUploadSarifRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeScanningSarifsReceipt)).Elem(),
						reflect.TypeOf(new(*CodeScanningUploadSarifBadRequest)).Elem(),
						reflect.TypeOf(new(*CodeScanningUploadSarifApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*CodeScanningUploadSarifApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*CodeScanningUploadSarifRequestEntityTooLarge)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningSarifsReceipt)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningUploadSarifApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeScanningUploadSarifApplicationJSONNotFound)).Elem(),
							},
						},
						"413": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		CodesOfConductGetAllCodesOfConduct: ogenreflect.RuntimeOperation{
			Name: "CodesOfConductGetAllCodesOfConduct",
			ID:   "codes-of-conduct/get-all-codes-of-conduct",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodesOfConductGetAllCodesOfConductRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodesOfConductGetAllCodesOfConductOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodesOfConductGetAllCodesOfConductOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		CodesOfConductGetConductCode: ogenreflect.RuntimeOperation{
			Name: "CodesOfConductGetConductCode",
			ID:   "codes-of-conduct/get-conduct-code",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(CodesOfConductGetConductCodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "key",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "key",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CodesOfConductGetConductCodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CodeOfConduct)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CodeOfConduct)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		EmojisGet: ogenreflect.RuntimeOperation{
			Name: "EmojisGet",
			ID:   "emojis/get",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(EmojisGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*EmojisGetOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EmojisGetOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise",
			ID:   "enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "org_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise",
			ID:   "enterprise-admin/add-self-hosted-runner-to-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminCreateRegistrationTokenForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminCreateRegistrationTokenForEnterprise",
			ID:   "enterprise-admin/create-registration-token-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminCreateRegistrationTokenForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AuthenticationToken)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthenticationToken)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminCreateRemoveTokenForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminCreateRemoveTokenForEnterprise",
			ID:   "enterprise-admin/create-remove-token-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminCreateRemoveTokenForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(AuthenticationToken)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthenticationToken)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise",
			ID:   "enterprise-admin/create-self-hosted-runner-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RunnerGroupsEnterprise)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RunnerGroupsEnterprise)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminDeleteScimGroupFromEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminDeleteScimGroupFromEnterprise",
			ID:   "enterprise-admin/delete-scim-group-from-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminDeleteScimGroupFromEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise",
			ID:   "enterprise-admin/delete-self-hosted-runner-from-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise",
			ID:   "enterprise-admin/delete-self-hosted-runner-group-from-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminDeleteUserFromEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminDeleteUserFromEnterprise",
			ID:   "enterprise-admin/delete-user-from-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminDeleteUserFromEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_user_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_user_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminDeleteUserFromEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise",
			ID:   "enterprise-admin/disable-selected-organization-github-actions-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "org_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise",
			ID:   "enterprise-admin/enable-selected-organization-github-actions-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "org_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminGetAllowedActionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetAllowedActionsEnterprise",
			ID:   "enterprise-admin/get-allowed-actions-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetAllowedActionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(SelectedActions)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SelectedActions)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminGetAuditLog: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetAuditLog",
			ID:   "enterprise-admin/get-audit-log",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetAuditLogParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "phrase",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "phrase",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "include",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptEnterpriseAdminGetAuditLogInclude)).Elem(),
							Name:     "include",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "after",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "after",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "before",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "before",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptEnterpriseAdminGetAuditLogOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]AuditLogEvent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]AuditLogEvent)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminGetGithubActionsPermissionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetGithubActionsPermissionsEnterprise",
			ID:   "enterprise-admin/get-github-actions-permissions-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetGithubActionsPermissionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ActionsEnterprisePermissions)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ActionsEnterprisePermissions)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminGetProvisioningInformationForEnterpriseGroup: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetProvisioningInformationForEnterpriseGroup",
			ID:   "enterprise-admin/get-provisioning-information-for-enterprise-group",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "excludedAttributes",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "excludedAttributes",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminGetProvisioningInformationForEnterpriseUser: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetProvisioningInformationForEnterpriseUser",
			ID:   "enterprise-admin/get-provisioning-information-for-enterprise-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetProvisioningInformationForEnterpriseUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_user_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_user_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminGetSelfHostedRunnerForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetSelfHostedRunnerForEnterprise",
			ID:   "enterprise-admin/get-self-hosted-runner-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetSelfHostedRunnerForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Runner)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Runner)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise",
			ID:   "enterprise-admin/get-self-hosted-runner-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RunnerGroupsEnterprise)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RunnerGroupsEnterprise)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise",
			ID:   "enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListProvisionedGroupsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListProvisionedGroupsEnterprise",
			ID:   "enterprise-admin/list-provisioned-groups-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListProvisionedGroupsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "startIndex",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "startIndex",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "count",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "count",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "excludedAttributes",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "excludedAttributes",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimGroupListEnterprise)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimGroupListEnterprise)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListProvisionedIdentitiesEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListProvisionedIdentitiesEnterprise",
			ID:   "enterprise-admin/list-provisioned-identities-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListProvisionedIdentitiesEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "startIndex",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "startIndex",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "count",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "count",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimUserListEnterprise)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimUserListEnterprise)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListRunnerApplicationsForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListRunnerApplicationsForEnterprise",
			ID:   "enterprise-admin/list-runner-applications-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListRunnerApplicationsForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]RunnerApplication)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]RunnerApplication)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise",
			ID:   "enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise",
			ID:   "enterprise-admin/list-self-hosted-runner-groups-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListSelfHostedRunnersForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListSelfHostedRunnersForEnterprise",
			ID:   "enterprise-admin/list-self-hosted-runners-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnersForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise",
			ID:   "enterprise-admin/list-self-hosted-runners-in-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminProvisionAndInviteEnterpriseGroup: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminProvisionAndInviteEnterpriseGroup",
			ID:   "enterprise-admin/provision-and-invite-enterprise-group",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminProvisionAndInviteEnterpriseGroupReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminProvisionAndInviteEnterpriseGroupParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminProvisionAndInviteEnterpriseUser: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminProvisionAndInviteEnterpriseUser",
			ID:   "enterprise-admin/provision-and-invite-enterprise-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminProvisionAndInviteEnterpriseUserReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminProvisionAndInviteEnterpriseUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise",
			ID:   "enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "org_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise",
			ID:   "enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminSetAllowedActionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetAllowedActionsEnterprise",
			ID:   "enterprise-admin/set-allowed-actions-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SelectedActions)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetAllowedActionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetAllowedActionsEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminSetGithubActionsPermissionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetGithubActionsPermissionsEnterprise",
			ID:   "enterprise-admin/set-github-actions-permissions-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetGithubActionsPermissionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminSetInformationForProvisionedEnterpriseGroup: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetInformationForProvisionedEnterpriseGroup",
			ID:   "enterprise-admin/set-information-for-provisioned-enterprise-group",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminSetInformationForProvisionedEnterpriseUser: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetInformationForProvisionedEnterpriseUser",
			ID:   "enterprise-admin/set-information-for-provisioned-enterprise-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetInformationForProvisionedEnterpriseUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_user_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_user_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise",
			ID:   "enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise",
			ID:   "enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise",
			ID:   "enterprise-admin/set-self-hosted-runners-in-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		EnterpriseAdminUpdateAttributeForEnterpriseGroup: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminUpdateAttributeForEnterpriseGroup",
			ID:   "enterprise-admin/update-attribute-for-enterprise-group",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminUpdateAttributeForEnterpriseGroupReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminUpdateAttributeForEnterpriseGroupParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseGroup)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminUpdateAttributeForEnterpriseUser: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminUpdateAttributeForEnterpriseUser",
			ID:   "enterprise-admin/update-attribute-for-enterprise-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(EnterpriseAdminUpdateAttributeForEnterpriseUserReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminUpdateAttributeForEnterpriseUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_user_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_user_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimEnterpriseUser)).Elem(),
							},
						},
					},
				},
			},
		},
		EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise: ogenreflect.RuntimeOperation{
			Name: "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise",
			ID:   "enterprise-admin/update-self-hosted-runner-group-for-enterprise",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "enterprise",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "enterprise",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "runner_group_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "runner_group_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RunnerGroupsEnterprise)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RunnerGroupsEnterprise)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsCheckIsStarred: ogenreflect.RuntimeOperation{
			Name: "GistsCheckIsStarred",
			ID:   "gists/check-is-starred",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsCheckIsStarredParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsCheckIsStarredRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsCheckIsStarredNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*GistsCheckIsStarredNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsCheckIsStarredNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsCreate: ogenreflect.RuntimeOperation{
			Name: "GistsCreate",
			ID:   "gists/create",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GistsCreateReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsCreateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistSimpleHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsCreateApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsCreateApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistSimpleHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsCreateApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsCreateApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsCreateComment: ogenreflect.RuntimeOperation{
			Name: "GistsCreateComment",
			ID:   "gists/create-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GistsCreateCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsCreateCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsCreateCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistCommentHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsCreateCommentApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsCreateCommentApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistCommentHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsCreateCommentApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsCreateCommentApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsDelete: ogenreflect.RuntimeOperation{
			Name: "GistsDelete",
			ID:   "gists/delete",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsDeleteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsDeleteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsDeleteNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsDeleteApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsDeleteApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsDeleteApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsDeleteApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsDeleteComment: ogenreflect.RuntimeOperation{
			Name: "GistsDeleteComment",
			ID:   "gists/delete-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsDeleteCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsDeleteCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsDeleteCommentNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsDeleteCommentApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsDeleteCommentApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsDeleteCommentApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsDeleteCommentApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsFork: ogenreflect.RuntimeOperation{
			Name: "GistsFork",
			ID:   "gists/fork",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsForkParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsForkRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*BaseGistHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsForkApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsForkApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BaseGistHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsForkApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsForkApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsGet: ogenreflect.RuntimeOperation{
			Name: "GistsGet",
			ID:   "gists/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistSimple)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ForbiddenGist)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistSimple)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ForbiddenGist)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsGetComment: ogenreflect.RuntimeOperation{
			Name: "GistsGetComment",
			ID:   "gists/get-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsGetCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsGetCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistComment)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ForbiddenGist)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistComment)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ForbiddenGist)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsGetRevision: ogenreflect.RuntimeOperation{
			Name: "GistsGetRevision",
			ID:   "gists/get-revision",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsGetRevisionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsGetRevisionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistSimple)).Elem(),
						reflect.TypeOf(new(*GistsGetRevisionApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsGetRevisionApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistSimple)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsGetRevisionApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsGetRevisionApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsList: ogenreflect.RuntimeOperation{
			Name: "GistsList",
			ID:   "gists/list",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsListComments: ogenreflect.RuntimeOperation{
			Name: "GistsListComments",
			ID:   "gists/list-comments",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListCommentsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListCommentsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListCommentsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsListCommentsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsListCommentsApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListCommentsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListCommentsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListCommentsApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsListCommits: ogenreflect.RuntimeOperation{
			Name: "GistsListCommits",
			ID:   "gists/list-commits",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListCommitsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListCommitsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListCommitsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsListCommitsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsListCommitsApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListCommitsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListCommitsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListCommitsApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsListForUser: ogenreflect.RuntimeOperation{
			Name: "GistsListForUser",
			ID:   "gists/list-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListForUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListForUserOKHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsListForks: ogenreflect.RuntimeOperation{
			Name: "GistsListForks",
			ID:   "gists/list-forks",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListForksParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListForksRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListForksOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsListForksApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsListForksApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListForksOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListForksApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListForksApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsListPublic: ogenreflect.RuntimeOperation{
			Name: "GistsListPublic",
			ID:   "gists/list-public",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListPublicParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListPublicRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListPublicOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListPublicOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsListStarred: ogenreflect.RuntimeOperation{
			Name: "GistsListStarred",
			ID:   "gists/list-starred",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsListStarredParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsListStarredRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsListStarredOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsListStarredApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*GistsListStarredApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListStarredOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListStarredApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsListStarredApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsStar: ogenreflect.RuntimeOperation{
			Name: "GistsStar",
			ID:   "gists/star",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsStarParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsStarRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsStarNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsStarApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsStarApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsStarApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsStarApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsUnstar: ogenreflect.RuntimeOperation{
			Name: "GistsUnstar",
			ID:   "gists/unstar",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsUnstarParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsUnstarRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistsUnstarNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*GistsUnstarApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GistsUnstarApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsUnstarApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistsUnstarApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		GistsUpdateComment: ogenreflect.RuntimeOperation{
			Name: "GistsUpdateComment",
			ID:   "gists/update-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GistsUpdateCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GistsUpdateCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gist_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "gist_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GistsUpdateCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GistComment)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GistComment)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitCreateBlob: ogenreflect.RuntimeOperation{
			Name: "GitCreateBlob",
			ID:   "git/create-blob",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GitCreateBlobReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitCreateBlobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitCreateBlobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ShortBlobHeaders)).Elem(),
						reflect.TypeOf(new(*GitCreateBlobApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GitCreateBlobApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*GitCreateBlobApplicationJSONConflict)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ShortBlobHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCreateBlobApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCreateBlobApplicationJSONNotFound)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCreateBlobApplicationJSONConflict)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitCreateCommit: ogenreflect.RuntimeOperation{
			Name: "GitCreateCommit",
			ID:   "git/create-commit",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GitCreateCommitReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitCreateCommitParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitCreateCommitRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitCommitHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCommitHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitCreateRef: ogenreflect.RuntimeOperation{
			Name: "GitCreateRef",
			ID:   "git/create-ref",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GitCreateRefReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitCreateRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitCreateRefRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitRefHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitRefHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitCreateTag: ogenreflect.RuntimeOperation{
			Name: "GitCreateTag",
			ID:   "git/create-tag",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GitCreateTagReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitCreateTagParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitCreateTagRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitTagHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitTagHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitCreateTree: ogenreflect.RuntimeOperation{
			Name: "GitCreateTree",
			ID:   "git/create-tree",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GitCreateTreeReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitCreateTreeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitCreateTreeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitTreeHeaders)).Elem(),
						reflect.TypeOf(new(*GitCreateTreeApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GitCreateTreeApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitTreeHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCreateTreeApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCreateTreeApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitDeleteRef: ogenreflect.RuntimeOperation{
			Name: "GitDeleteRef",
			ID:   "git/delete-ref",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitDeleteRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitDeleteRefRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitDeleteRefNoContent)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitGetBlob: ogenreflect.RuntimeOperation{
			Name: "GitGetBlob",
			ID:   "git/get-blob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitGetBlobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "file_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "file_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitGetBlobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Blob)).Elem(),
						reflect.TypeOf(new(*GitGetBlobApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*GitGetBlobApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Blob)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitGetBlobApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitGetBlobApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitGetCommit: ogenreflect.RuntimeOperation{
			Name: "GitGetCommit",
			ID:   "git/get-commit",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitGetCommitParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "commit_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "commit_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitGetCommitRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitCommit)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitCommit)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitGetRef: ogenreflect.RuntimeOperation{
			Name: "GitGetRef",
			ID:   "git/get-ref",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitGetRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitGetRefRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitRef)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitRef)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitGetTag: ogenreflect.RuntimeOperation{
			Name: "GitGetTag",
			ID:   "git/get-tag",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitGetTagParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "tag_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "tag_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitGetTagRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitTag)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitTag)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitGetTree: ogenreflect.RuntimeOperation{
			Name: "GitGetTree",
			ID:   "git/get-tree",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitGetTreeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "tree_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "tree_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "recursive",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "recursive",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitGetTreeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitTree)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitTree)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitListMatchingRefs: ogenreflect.RuntimeOperation{
			Name: "GitListMatchingRefs",
			ID:   "git/list-matching-refs",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitListMatchingRefsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(GitListMatchingRefsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitListMatchingRefsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		GitUpdateRef: ogenreflect.RuntimeOperation{
			Name: "GitUpdateRef",
			ID:   "git/update-ref",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(GitUpdateRefReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitUpdateRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitUpdateRefRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitRef)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitRef)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		GitignoreGetAllTemplates: ogenreflect.RuntimeOperation{
			Name: "GitignoreGetAllTemplates",
			ID:   "gitignore/get-all-templates",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitignoreGetAllTemplatesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitignoreGetAllTemplatesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitignoreGetAllTemplatesOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GitignoreGetTemplate: ogenreflect.RuntimeOperation{
			Name: "GitignoreGetTemplate",
			ID:   "gitignore/get-template",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GitignoreGetTemplateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GitignoreGetTemplateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GitignoreTemplate)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GitignoreTemplate)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		InteractionsRemoveRestrictionsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "InteractionsRemoveRestrictionsForAuthenticatedUser",
			ID:   "interactions/remove-restrictions-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(InteractionsRemoveRestrictionsForAuthenticatedUserNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		InteractionsRemoveRestrictionsForOrg: ogenreflect.RuntimeOperation{
			Name: "InteractionsRemoveRestrictionsForOrg",
			ID:   "interactions/remove-restrictions-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(InteractionsRemoveRestrictionsForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(InteractionsRemoveRestrictionsForOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		InteractionsRemoveRestrictionsForRepo: ogenreflect.RuntimeOperation{
			Name: "InteractionsRemoveRestrictionsForRepo",
			ID:   "interactions/remove-restrictions-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(InteractionsRemoveRestrictionsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(InteractionsRemoveRestrictionsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*InteractionsRemoveRestrictionsForRepoNoContent)).Elem(),
						reflect.TypeOf(new(*InteractionsRemoveRestrictionsForRepoConflict)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		InteractionsSetRestrictionsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "InteractionsSetRestrictionsForAuthenticatedUser",
			ID:   "interactions/set-restrictions-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(InteractionLimit)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(InteractionsSetRestrictionsForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*InteractionLimitResponse)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(InteractionLimitResponse)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		InteractionsSetRestrictionsForOrg: ogenreflect.RuntimeOperation{
			Name: "InteractionsSetRestrictionsForOrg",
			ID:   "interactions/set-restrictions-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(InteractionLimit)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(InteractionsSetRestrictionsForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(InteractionsSetRestrictionsForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*InteractionLimitResponse)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(InteractionLimitResponse)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		InteractionsSetRestrictionsForRepo: ogenreflect.RuntimeOperation{
			Name: "InteractionsSetRestrictionsForRepo",
			ID:   "interactions/set-restrictions-for-repo",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(InteractionLimit)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(InteractionsSetRestrictionsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(InteractionsSetRestrictionsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*InteractionLimitResponse)).Elem(),
						reflect.TypeOf(new(*InteractionsSetRestrictionsForRepoConflict)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(InteractionLimitResponse)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		IssuesAddAssignees: ogenreflect.RuntimeOperation{
			Name: "IssuesAddAssignees",
			ID:   "issues/add-assignees",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptIssuesAddAssigneesReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesAddAssigneesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(IssueSimple)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesCheckUserCanBeAssigned: ogenreflect.RuntimeOperation{
			Name: "IssuesCheckUserCanBeAssigned",
			ID:   "issues/check-user-can-be-assigned",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesCheckUserCanBeAssignedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "assignee",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "assignee",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesCheckUserCanBeAssignedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesCheckUserCanBeAssignedNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesCreate: ogenreflect.RuntimeOperation{
			Name: "IssuesCreate",
			ID:   "issues/create",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(IssuesCreateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesCreateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesCreateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssueHeaders)).Elem(),
						reflect.TypeOf(new(*IssuesCreateApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*IssuesCreateApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesCreateApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesCreateApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesCreateApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesCreateApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesCreateComment: ogenreflect.RuntimeOperation{
			Name: "IssuesCreateComment",
			ID:   "issues/create-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(IssuesCreateCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesCreateCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesCreateCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssueCommentHeaders)).Elem(),
						reflect.TypeOf(new(*IssuesCreateCommentApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*IssuesCreateCommentApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesCreateCommentApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueCommentHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesCreateCommentApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesCreateCommentApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesCreateCommentApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesCreateLabel: ogenreflect.RuntimeOperation{
			Name: "IssuesCreateLabel",
			ID:   "issues/create-label",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(IssuesCreateLabelReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesCreateLabelParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesCreateLabelRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*LabelHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(LabelHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesCreateMilestone: ogenreflect.RuntimeOperation{
			Name: "IssuesCreateMilestone",
			ID:   "issues/create-milestone",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(IssuesCreateMilestoneReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesCreateMilestoneParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesCreateMilestoneRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MilestoneHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MilestoneHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesDeleteComment: ogenreflect.RuntimeOperation{
			Name: "IssuesDeleteComment",
			ID:   "issues/delete-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesDeleteCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(IssuesDeleteCommentNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		IssuesDeleteLabel: ogenreflect.RuntimeOperation{
			Name: "IssuesDeleteLabel",
			ID:   "issues/delete-label",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesDeleteLabelParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(IssuesDeleteLabelNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		IssuesDeleteMilestone: ogenreflect.RuntimeOperation{
			Name: "IssuesDeleteMilestone",
			ID:   "issues/delete-milestone",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesDeleteMilestoneParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "milestone_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "milestone_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesDeleteMilestoneRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesDeleteMilestoneNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesGet: ogenreflect.RuntimeOperation{
			Name: "IssuesGet",
			ID:   "issues/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Issue)).Elem(),
						reflect.TypeOf(new(*IssuesGetApplicationJSONMovedPermanently)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*IssuesGetApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesGetApplicationJSONGone)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Issue)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesGetApplicationJSONMovedPermanently)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesGetApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesGetApplicationJSONGone)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesGetComment: ogenreflect.RuntimeOperation{
			Name: "IssuesGetComment",
			ID:   "issues/get-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesGetCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesGetCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssueComment)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueComment)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesGetEvent: ogenreflect.RuntimeOperation{
			Name: "IssuesGetEvent",
			ID:   "issues/get-event",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesGetEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "event_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "event_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesGetEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssueEvent)).Elem(),
						reflect.TypeOf(new(*IssuesGetEventApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*IssuesGetEventApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesGetEventApplicationJSONGone)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueEvent)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesGetEventApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesGetEventApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesGetEventApplicationJSONGone)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesGetLabel: ogenreflect.RuntimeOperation{
			Name: "IssuesGetLabel",
			ID:   "issues/get-label",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesGetLabelParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesGetLabelRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Label)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Label)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesGetMilestone: ogenreflect.RuntimeOperation{
			Name: "IssuesGetMilestone",
			ID:   "issues/get-milestone",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesGetMilestoneParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "milestone_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "milestone_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesGetMilestoneRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Milestone)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Milestone)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesList: ogenreflect.RuntimeOperation{
			Name: "IssuesList",
			ID:   "issues/list",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labels",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labels",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "collab",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "collab",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "orgs",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "orgs",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "owned",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "owned",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pulls",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "pulls",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListAssignees: ogenreflect.RuntimeOperation{
			Name: "IssuesListAssignees",
			ID:   "issues/list-assignees",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListAssigneesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListAssigneesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListAssigneesOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListAssigneesOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListComments: ogenreflect.RuntimeOperation{
			Name: "IssuesListComments",
			ID:   "issues/list-comments",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListCommentsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListCommentsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListCommentsOKHeaders)).Elem(),
						reflect.TypeOf(new(*IssuesListCommentsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesListCommentsApplicationJSONGone)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListCommentsOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListCommentsApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListCommentsApplicationJSONGone)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListCommentsForRepo: ogenreflect.RuntimeOperation{
			Name: "IssuesListCommentsForRepo",
			ID:   "issues/list-comments-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListCommentsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListCommentsForRepoSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListCommentsForRepoDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListCommentsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListCommentsForRepoOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListCommentsForRepoOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListEventsForRepo: ogenreflect.RuntimeOperation{
			Name: "IssuesListEventsForRepo",
			ID:   "issues/list-events-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListEventsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListEventsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListEventsForRepoOKHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListEventsForRepoOKHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "IssuesListForAuthenticatedUser",
			ID:   "issues/list-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForAuthenticatedUserFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForAuthenticatedUserState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labels",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labels",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForAuthenticatedUserSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForAuthenticatedUserDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListForOrg: ogenreflect.RuntimeOperation{
			Name: "IssuesListForOrg",
			ID:   "issues/list-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForOrgFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForOrgState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labels",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labels",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForOrgSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForOrgDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListForOrgOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListForOrgOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListForRepo: ogenreflect.RuntimeOperation{
			Name: "IssuesListForRepo",
			ID:   "issues/list-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "milestone",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "milestone",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForRepoState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "assignee",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "assignee",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "creator",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "creator",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "mentioned",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "mentioned",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labels",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labels",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForRepoSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListForRepoDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListForRepoOKHeaders)).Elem(),
						reflect.TypeOf(new(*IssuesListForRepoApplicationJSONMovedPermanently)).Elem(),
						reflect.TypeOf(new(*IssuesListForRepoApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListForRepoOKHeaders)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListForRepoApplicationJSONMovedPermanently)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListForRepoApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListLabelsForMilestone: ogenreflect.RuntimeOperation{
			Name: "IssuesListLabelsForMilestone",
			ID:   "issues/list-labels-for-milestone",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListLabelsForMilestoneParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "milestone_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "milestone_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(IssuesListLabelsForMilestoneOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListLabelsForMilestoneOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListLabelsForRepo: ogenreflect.RuntimeOperation{
			Name: "IssuesListLabelsForRepo",
			ID:   "issues/list-labels-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListLabelsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListLabelsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListLabelsForRepoOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListLabelsForRepoOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListLabelsOnIssue: ogenreflect.RuntimeOperation{
			Name: "IssuesListLabelsOnIssue",
			ID:   "issues/list-labels-on-issue",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListLabelsOnIssueParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListLabelsOnIssueRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListLabelsOnIssueOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListLabelsOnIssueOKHeaders)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesListMilestones: ogenreflect.RuntimeOperation{
			Name: "IssuesListMilestones",
			ID:   "issues/list-milestones",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesListMilestonesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListMilestonesState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListMilestonesSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptIssuesListMilestonesDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesListMilestonesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesListMilestonesOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesListMilestonesOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesLock: ogenreflect.RuntimeOperation{
			Name: "IssuesLock",
			ID:   "issues/lock",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilIssuesLockReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesLockParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesLockRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesLockNoContent)).Elem(),
						reflect.TypeOf(new(*IssuesLockApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*IssuesLockApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesLockApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesLockApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesLockApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesLockApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesRemoveAllLabels: ogenreflect.RuntimeOperation{
			Name: "IssuesRemoveAllLabels",
			ID:   "issues/remove-all-labels",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesRemoveAllLabelsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesRemoveAllLabelsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesRemoveAllLabelsNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesRemoveAssignees: ogenreflect.RuntimeOperation{
			Name: "IssuesRemoveAssignees",
			ID:   "issues/remove-assignees",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptIssuesRemoveAssigneesReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesRemoveAssigneesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(IssueSimple)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesRemoveLabel: ogenreflect.RuntimeOperation{
			Name: "IssuesRemoveLabel",
			ID:   "issues/remove-label",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesRemoveLabelParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesRemoveLabelRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesRemoveLabelOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*IssuesRemoveLabelApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesRemoveLabelApplicationJSONGone)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesRemoveLabelOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesRemoveLabelApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesRemoveLabelApplicationJSONGone)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesUnlock: ogenreflect.RuntimeOperation{
			Name: "IssuesUnlock",
			ID:   "issues/unlock",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesUnlockParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesUnlockRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssuesUnlockNoContent)).Elem(),
						reflect.TypeOf(new(*IssuesUnlockApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*IssuesUnlockApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesUnlockApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesUnlockApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesUpdate: ogenreflect.RuntimeOperation{
			Name: "IssuesUpdate",
			ID:   "issues/update",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptIssuesUpdateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesUpdateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesUpdateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Issue)).Elem(),
						reflect.TypeOf(new(*IssuesUpdateApplicationJSONMovedPermanently)).Elem(),
						reflect.TypeOf(new(*IssuesUpdateApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*IssuesUpdateApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*IssuesUpdateApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Issue)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesUpdateApplicationJSONMovedPermanently)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesUpdateApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesUpdateApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssuesUpdateApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesUpdateComment: ogenreflect.RuntimeOperation{
			Name: "IssuesUpdateComment",
			ID:   "issues/update-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(IssuesUpdateCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesUpdateCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(IssuesUpdateCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IssueComment)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IssueComment)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesUpdateLabel: ogenreflect.RuntimeOperation{
			Name: "IssuesUpdateLabel",
			ID:   "issues/update-label",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptIssuesUpdateLabelReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesUpdateLabelParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Label)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Label)).Elem(),
							},
						},
					},
				},
			},
		},
		IssuesUpdateMilestone: ogenreflect.RuntimeOperation{
			Name: "IssuesUpdateMilestone",
			ID:   "issues/update-milestone",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptIssuesUpdateMilestoneReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(IssuesUpdateMilestoneParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "milestone_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "milestone_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Milestone)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Milestone)).Elem(),
							},
						},
					},
				},
			},
		},
		LicensesGet: ogenreflect.RuntimeOperation{
			Name: "LicensesGet",
			ID:   "licenses/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(LicensesGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "license",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "license",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(LicensesGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*License)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*LicensesGetApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*LicensesGetApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(License)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(LicensesGetApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(LicensesGetApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		LicensesGetAllCommonlyUsed: ogenreflect.RuntimeOperation{
			Name: "LicensesGetAllCommonlyUsed",
			ID:   "licenses/get-all-commonly-used",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(LicensesGetAllCommonlyUsedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "featured",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "featured",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(LicensesGetAllCommonlyUsedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*LicensesGetAllCommonlyUsedOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(LicensesGetAllCommonlyUsedOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		LicensesGetForRepo: ogenreflect.RuntimeOperation{
			Name: "LicensesGetForRepo",
			ID:   "licenses/get-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(LicensesGetForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(LicenseContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(LicenseContent)).Elem(),
							},
						},
					},
				},
			},
		},
		MarkdownRender: ogenreflect.RuntimeOperation{
			Name: "MarkdownRender",
			ID:   "markdown/render",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MarkdownRenderReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarkdownRenderRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarkdownRenderOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Content-Length": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Content-Length",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
								"X-CommonMarker-Version": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "X-CommonMarker-Version",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"text/html": reflect.TypeOf(new(MarkdownRenderOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		MarkdownRenderRaw: ogenreflect.RuntimeOperation{
			Name: "MarkdownRenderRaw",
			ID:   "markdown/render-raw",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type: reflect.TypeOf(new(MarkdownRenderRawReq)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarkdownRenderRawReqEmptyBody)).Elem(),
						reflect.TypeOf(new(*MarkdownRenderRawReqTextPlain)).Elem(),
						reflect.TypeOf(new(*MarkdownRenderRawReqTextXMarkdown)).Elem(),
					},
					Contents: ogenreflect.Contents{
						"text/plain":      reflect.TypeOf(new(MarkdownRenderRawReqTextPlain)).Elem(),
						"text/x-markdown": reflect.TypeOf(new(MarkdownRenderRawReqTextXMarkdown)).Elem(),
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarkdownRenderRawRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarkdownRenderRawOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"X-CommonMarker-Version": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "X-CommonMarker-Version",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"text/html": reflect.TypeOf(new(MarkdownRenderRawOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		MetaGet: ogenreflect.RuntimeOperation{
			Name: "MetaGet",
			ID:   "meta/get",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MetaGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*APIOverview)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(APIOverview)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		MetaGetOctocat: ogenreflect.RuntimeOperation{
			Name: "MetaGetOctocat",
			ID:   "meta/get-octocat",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MetaGetOctocatParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "s",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "s",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MetaGetOctocatOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/octocat-stream": reflect.TypeOf(new(MetaGetOctocatOK)).Elem(),
							},
						},
					},
				},
			},
		},
		MetaGetZen: ogenreflect.RuntimeOperation{
			Name: "MetaGetZen",
			ID:   "meta/get-zen",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MetaGetZenOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"text/plain": reflect.TypeOf(new(MetaGetZenOK)).Elem(),
							},
						},
					},
				},
			},
		},
		MetaRoot: ogenreflect.RuntimeOperation{
			Name: "MetaRoot",
			ID:   "meta/root",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MetaRootOK)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MetaRootOK)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsCancelImport: ogenreflect.RuntimeOperation{
			Name: "MigrationsCancelImport",
			ID:   "migrations/cancel-import",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsCancelImportParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MigrationsCancelImportNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		MigrationsDeleteArchiveForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsDeleteArchiveForAuthenticatedUser",
			ID:   "migrations/delete-archive-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsDeleteArchiveForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsDeleteArchiveForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsDeleteArchiveForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsDeleteArchiveForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsDeleteArchiveForOrg",
			ID:   "migrations/delete-archive-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsDeleteArchiveForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsDeleteArchiveForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsDeleteArchiveForOrgNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsDownloadArchiveForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsDownloadArchiveForOrg",
			ID:   "migrations/download-archive-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsDownloadArchiveForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsDownloadArchiveForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsDownloadArchiveForOrgFound)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsGetArchiveForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsGetArchiveForAuthenticatedUser",
			ID:   "migrations/get-archive-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsGetArchiveForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsGetArchiveForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsGetArchiveForAuthenticatedUserFound)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsGetCommitAuthors: ogenreflect.RuntimeOperation{
			Name: "MigrationsGetCommitAuthors",
			ID:   "migrations/get-commit-authors",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsGetCommitAuthorsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsGetCommitAuthorsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsGetCommitAuthorsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsGetCommitAuthorsOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsGetImportStatus: ogenreflect.RuntimeOperation{
			Name: "MigrationsGetImportStatus",
			ID:   "migrations/get-import-status",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsGetImportStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsGetImportStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Import)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Import)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsGetLargeFiles: ogenreflect.RuntimeOperation{
			Name: "MigrationsGetLargeFiles",
			ID:   "migrations/get-large-files",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsGetLargeFilesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]PorterLargeFile)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]PorterLargeFile)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsGetStatusForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsGetStatusForAuthenticatedUser",
			ID:   "migrations/get-status-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsGetStatusForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "exclude",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new([]string)).Elem(),
							Name:     "exclude",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsGetStatusForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Migration)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Migration)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsGetStatusForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsGetStatusForOrg",
			ID:   "migrations/get-status-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsGetStatusForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "exclude",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new([]MigrationsGetStatusForOrgExcludeItem)).Elem(),
							Name:     "exclude",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsGetStatusForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Migration)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Migration)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsListForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsListForAuthenticatedUser",
			ID:   "migrations/list-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsListForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsListForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsListForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*MigrationsListForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*MigrationsListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsListForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsListForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsListForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsListForOrg",
			ID:   "migrations/list-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsListForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "exclude",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new([]MigrationsListForOrgExcludeItem)).Elem(),
							Name:     "exclude",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MigrationsListForOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsListForOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsListReposForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsListReposForOrg",
			ID:   "migrations/list-repos-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsListReposForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsListReposForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsListReposForOrgOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsListReposForOrgOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsListReposForUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsListReposForUser",
			ID:   "migrations/list-repos-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsListReposForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsListReposForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsListReposForUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsListReposForUserOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsMapCommitAuthor: ogenreflect.RuntimeOperation{
			Name: "MigrationsMapCommitAuthor",
			ID:   "migrations/map-commit-author",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptMigrationsMapCommitAuthorReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsMapCommitAuthorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "author_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "author_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsMapCommitAuthorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PorterAuthor)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PorterAuthor)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsSetLfsPreference: ogenreflect.RuntimeOperation{
			Name: "MigrationsSetLfsPreference",
			ID:   "migrations/set-lfs-preference",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MigrationsSetLfsPreferenceReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsSetLfsPreferenceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsSetLfsPreferenceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Import)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Import)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsStartForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsStartForAuthenticatedUser",
			ID:   "migrations/start-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MigrationsStartForAuthenticatedUserReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsStartForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Migration)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*MigrationsStartForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*MigrationsStartForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Migration)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsStartForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsStartForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsStartForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsStartForOrg",
			ID:   "migrations/start-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MigrationsStartForOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsStartForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsStartForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Migration)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Migration)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsStartImport: ogenreflect.RuntimeOperation{
			Name: "MigrationsStartImport",
			ID:   "migrations/start-import",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MigrationsStartImportReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsStartImportParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsStartImportRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ImportHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ImportHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsUnlockRepoForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "MigrationsUnlockRepoForAuthenticatedUser",
			ID:   "migrations/unlock-repo-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsUnlockRepoForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsUnlockRepoForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsUnlockRepoForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsUnlockRepoForOrg: ogenreflect.RuntimeOperation{
			Name: "MigrationsUnlockRepoForOrg",
			ID:   "migrations/unlock-repo-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsUnlockRepoForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "migration_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "migration_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MigrationsUnlockRepoForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MigrationsUnlockRepoForOrgNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		MigrationsUpdateImport: ogenreflect.RuntimeOperation{
			Name: "MigrationsUpdateImport",
			ID:   "migrations/update-import",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilMigrationsUpdateImportReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MigrationsUpdateImportParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Import)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Import)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsCreateAuthorization: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsCreateAuthorization",
			ID:   "oauth-authorizations/create-authorization",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptOAuthAuthorizationsCreateAuthorizationReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsCreateAuthorizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AuthorizationHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsCreateAuthorizationApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsCreateAuthorizationApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsCreateAuthorizationApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AuthorizationHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsCreateAuthorizationApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsCreateAuthorizationApplicationJSONForbidden)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsCreateAuthorizationApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsDeleteAuthorization: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsDeleteAuthorization",
			ID:   "oauth-authorizations/delete-authorization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsDeleteAuthorizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "authorization_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "authorization_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsDeleteAuthorizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OAuthAuthorizationsDeleteAuthorizationNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsDeleteGrant: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsDeleteGrant",
			ID:   "oauth-authorizations/delete-grant",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsDeleteGrantParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "grant_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "grant_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsDeleteGrantRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OAuthAuthorizationsDeleteGrantNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsDeleteGrantApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsDeleteGrantApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsGetAuthorization: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsGetAuthorization",
			ID:   "oauth-authorizations/get-authorization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsGetAuthorizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "authorization_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "authorization_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsGetAuthorizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Authorization)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Authorization)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsGetGrant: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsGetGrant",
			ID:   "oauth-authorizations/get-grant",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsGetGrantParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "grant_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "grant_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsGetGrantRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ApplicationGrant)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetGrantApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetGrantApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ApplicationGrant)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetGrantApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetGrantApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsGetOrCreateAuthorizationForApp: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsGetOrCreateAuthorizationForApp",
			ID:   "oauth-authorizations/get-or-create-authorization-for-app",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint",
			ID:   "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "client_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "client_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "fingerprint",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "fingerprint",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsListAuthorizations: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsListAuthorizations",
			ID:   "oauth-authorizations/list-authorizations",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsListAuthorizationsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "client_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "client_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsListAuthorizationsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OAuthAuthorizationsListAuthorizationsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListAuthorizationsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsListGrants: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsListGrants",
			ID:   "oauth-authorizations/list-grants",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsListGrantsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "client_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "client_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsListGrantsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OAuthAuthorizationsListGrantsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsListGrantsApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsListGrantsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OAuthAuthorizationsListGrantsApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListGrantsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListGrantsApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListGrantsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OAuthAuthorizationsListGrantsApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		OAuthAuthorizationsUpdateAuthorization: ogenreflect.RuntimeOperation{
			Name: "OAuthAuthorizationsUpdateAuthorization",
			ID:   "oauth-authorizations/update-authorization",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptOAuthAuthorizationsUpdateAuthorizationReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OAuthAuthorizationsUpdateAuthorizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "authorization_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "authorization_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OAuthAuthorizationsUpdateAuthorizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Authorization)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Authorization)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsBlockUser: ogenreflect.RuntimeOperation{
			Name: "OrgsBlockUser",
			ID:   "orgs/block-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsBlockUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsBlockUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsBlockUserNoContent)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsCancelInvitation: ogenreflect.RuntimeOperation{
			Name: "OrgsCancelInvitation",
			ID:   "orgs/cancel-invitation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsCancelInvitationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "invitation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "invitation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsCancelInvitationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsCancelInvitationNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsCheckBlockedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsCheckBlockedUser",
			ID:   "orgs/check-blocked-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsCheckBlockedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsCheckBlockedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsCheckBlockedUserNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsCheckMembershipForUser: ogenreflect.RuntimeOperation{
			Name: "OrgsCheckMembershipForUser",
			ID:   "orgs/check-membership-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsCheckMembershipForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsCheckMembershipForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsCheckMembershipForUserNoContent)).Elem(),
						reflect.TypeOf(new(*OrgsCheckMembershipForUserFound)).Elem(),
						reflect.TypeOf(new(*OrgsCheckMembershipForUserNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		OrgsCheckPublicMembershipForUser: ogenreflect.RuntimeOperation{
			Name: "OrgsCheckPublicMembershipForUser",
			ID:   "orgs/check-public-membership-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsCheckPublicMembershipForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsCheckPublicMembershipForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsCheckPublicMembershipForUserNoContent)).Elem(),
						reflect.TypeOf(new(*OrgsCheckPublicMembershipForUserNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		OrgsConvertMemberToOutsideCollaborator: ogenreflect.RuntimeOperation{
			Name: "OrgsConvertMemberToOutsideCollaborator",
			ID:   "orgs/convert-member-to-outside-collaborator",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsConvertMemberToOutsideCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsConvertMemberToOutsideCollaboratorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsConvertMemberToOutsideCollaboratorAccepted)).Elem(),
						reflect.TypeOf(new(*OrgsConvertMemberToOutsideCollaboratorNoContent)).Elem(),
						reflect.TypeOf(new(*OrgsConvertMemberToOutsideCollaboratorForbidden)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsConvertMemberToOutsideCollaboratorAccepted)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsCreateInvitation: ogenreflect.RuntimeOperation{
			Name: "OrgsCreateInvitation",
			ID:   "orgs/create-invitation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptOrgsCreateInvitationReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsCreateInvitationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsCreateInvitationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrganizationInvitation)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrganizationInvitation)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsCreateWebhook: ogenreflect.RuntimeOperation{
			Name: "OrgsCreateWebhook",
			ID:   "orgs/create-webhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OrgsCreateWebhookReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsCreateWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsCreateWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgHookHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgHookHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsDeleteWebhook: ogenreflect.RuntimeOperation{
			Name: "OrgsDeleteWebhook",
			ID:   "orgs/delete-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsDeleteWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsDeleteWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsDeleteWebhookNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGet: ogenreflect.RuntimeOperation{
			Name: "OrgsGet",
			ID:   "orgs/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrganizationFull)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrganizationFull)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGetAuditLog: ogenreflect.RuntimeOperation{
			Name: "OrgsGetAuditLog",
			ID:   "orgs/get-audit-log",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetAuditLogParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "phrase",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "phrase",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "include",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptOrgsGetAuditLogInclude)).Elem(),
							Name:     "include",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "after",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "after",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "before",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "before",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptOrgsGetAuditLogOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]AuditLogEvent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]AuditLogEvent)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGetMembershipForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsGetMembershipForAuthenticatedUser",
			ID:   "orgs/get-membership-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetMembershipForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsGetMembershipForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgMembership)).Elem(),
						reflect.TypeOf(new(*OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgMembership)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGetMembershipForUser: ogenreflect.RuntimeOperation{
			Name: "OrgsGetMembershipForUser",
			ID:   "orgs/get-membership-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetMembershipForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsGetMembershipForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgMembership)).Elem(),
						reflect.TypeOf(new(*OrgsGetMembershipForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OrgsGetMembershipForUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgMembership)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsGetMembershipForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsGetMembershipForUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGetWebhook: ogenreflect.RuntimeOperation{
			Name: "OrgsGetWebhook",
			ID:   "orgs/get-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsGetWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgHook)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgHook)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGetWebhookConfigForOrg: ogenreflect.RuntimeOperation{
			Name: "OrgsGetWebhookConfigForOrg",
			ID:   "orgs/get-webhook-config-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetWebhookConfigForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WebhookConfig)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookConfig)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsGetWebhookDelivery: ogenreflect.RuntimeOperation{
			Name: "OrgsGetWebhookDelivery",
			ID:   "orgs/get-webhook-delivery",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsGetWebhookDeliveryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "delivery_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "delivery_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsGetWebhookDeliveryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*HookDelivery)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(HookDelivery)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsList: ogenreflect.RuntimeOperation{
			Name: "OrgsList",
			ID:   "orgs/list",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		OrgsListBlockedUsers: ogenreflect.RuntimeOperation{
			Name: "OrgsListBlockedUsers",
			ID:   "orgs/list-blocked-users",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListBlockedUsersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListBlockedUsersRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListBlockedUsersOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListBlockedUsersOKApplicationJSON)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListFailedInvitations: ogenreflect.RuntimeOperation{
			Name: "OrgsListFailedInvitations",
			ID:   "orgs/list-failed-invitations",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListFailedInvitationsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListFailedInvitationsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListFailedInvitationsOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListFailedInvitationsOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsListForAuthenticatedUser",
			ID:   "orgs/list-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OrgsListForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OrgsListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListForUser: ogenreflect.RuntimeOperation{
			Name: "OrgsListForUser",
			ID:   "orgs/list-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OrgsListForUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListForUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListInvitationTeams: ogenreflect.RuntimeOperation{
			Name: "OrgsListInvitationTeams",
			ID:   "orgs/list-invitation-teams",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListInvitationTeamsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "invitation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "invitation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListInvitationTeamsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListInvitationTeamsOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListInvitationTeamsOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListMembers: ogenreflect.RuntimeOperation{
			Name: "OrgsListMembers",
			ID:   "orgs/list-members",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListMembersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptOrgsListMembersFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "role",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptOrgsListMembersRole)).Elem(),
							Name:     "role",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListMembersRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListMembersOKHeaders)).Elem(),
						reflect.TypeOf(new(*OrgsListMembersFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListMembersOKHeaders)).Elem(),
							},
						},
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListMembershipsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsListMembershipsForAuthenticatedUser",
			ID:   "orgs/list-memberships-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListMembershipsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptOrgsListMembershipsForAuthenticatedUserState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListMembershipsForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListMembershipsForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*OrgsListMembershipsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*OrgsListMembershipsForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListMembershipsForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListMembershipsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListMembershipsForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListOutsideCollaborators: ogenreflect.RuntimeOperation{
			Name: "OrgsListOutsideCollaborators",
			ID:   "orgs/list-outside-collaborators",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListOutsideCollaboratorsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "filter",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptOrgsListOutsideCollaboratorsFilter)).Elem(),
							Name:     "filter",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OrgsListOutsideCollaboratorsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListOutsideCollaboratorsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListPendingInvitations: ogenreflect.RuntimeOperation{
			Name: "OrgsListPendingInvitations",
			ID:   "orgs/list-pending-invitations",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListPendingInvitationsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListPendingInvitationsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListPendingInvitationsOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListPendingInvitationsOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListPublicMembers: ogenreflect.RuntimeOperation{
			Name: "OrgsListPublicMembers",
			ID:   "orgs/list-public-members",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListPublicMembersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OrgsListPublicMembersOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListPublicMembersOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListSamlSSOAuthorizations: ogenreflect.RuntimeOperation{
			Name: "OrgsListSamlSSOAuthorizations",
			ID:   "orgs/list-saml-sso-authorizations",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListSamlSSOAuthorizationsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]CredentialAuthorization)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]CredentialAuthorization)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListWebhookDeliveries: ogenreflect.RuntimeOperation{
			Name: "OrgsListWebhookDeliveries",
			ID:   "orgs/list-webhook-deliveries",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListWebhookDeliveriesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "cursor",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "cursor",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListWebhookDeliveriesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListWebhookDeliveriesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListWebhookDeliveriesOKApplicationJSON)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsListWebhooks: ogenreflect.RuntimeOperation{
			Name: "OrgsListWebhooks",
			ID:   "orgs/list-webhooks",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsListWebhooksParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsListWebhooksRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsListWebhooksOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsListWebhooksOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsPingWebhook: ogenreflect.RuntimeOperation{
			Name: "OrgsPingWebhook",
			ID:   "orgs/ping-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsPingWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsPingWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsPingWebhookNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsRedeliverWebhookDelivery: ogenreflect.RuntimeOperation{
			Name: "OrgsRedeliverWebhookDelivery",
			ID:   "orgs/redeliver-webhook-delivery",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsRedeliverWebhookDeliveryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "delivery_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "delivery_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsRedeliverWebhookDeliveryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsRemoveMember: ogenreflect.RuntimeOperation{
			Name: "OrgsRemoveMember",
			ID:   "orgs/remove-member",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsRemoveMemberParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsRemoveMemberRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsRemoveMemberNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsRemoveMembershipForUser: ogenreflect.RuntimeOperation{
			Name: "OrgsRemoveMembershipForUser",
			ID:   "orgs/remove-membership-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsRemoveMembershipForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsRemoveMembershipForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsRemoveMembershipForUserNoContent)).Elem(),
						reflect.TypeOf(new(*OrgsRemoveMembershipForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OrgsRemoveMembershipForUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsRemoveMembershipForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsRemoveMembershipForUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsRemoveOutsideCollaborator: ogenreflect.RuntimeOperation{
			Name: "OrgsRemoveOutsideCollaborator",
			ID:   "orgs/remove-outside-collaborator",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsRemoveOutsideCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsRemoveOutsideCollaboratorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsRemoveOutsideCollaboratorNoContent)).Elem(),
						reflect.TypeOf(new(*OrgsRemoveOutsideCollaboratorUnprocessableEntity)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsRemoveOutsideCollaboratorUnprocessableEntity)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsRemovePublicMembershipForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsRemovePublicMembershipForAuthenticatedUser",
			ID:   "orgs/remove-public-membership-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsRemovePublicMembershipForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OrgsRemovePublicMembershipForAuthenticatedUserNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		OrgsRemoveSamlSSOAuthorization: ogenreflect.RuntimeOperation{
			Name: "OrgsRemoveSamlSSOAuthorization",
			ID:   "orgs/remove-saml-sso-authorization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsRemoveSamlSSOAuthorizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "credential_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "credential_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsRemoveSamlSSOAuthorizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsRemoveSamlSSOAuthorizationNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsSetMembershipForUser: ogenreflect.RuntimeOperation{
			Name: "OrgsSetMembershipForUser",
			ID:   "orgs/set-membership-for-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptOrgsSetMembershipForUserReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsSetMembershipForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsSetMembershipForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgMembership)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgMembership)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsSetPublicMembershipForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsSetPublicMembershipForAuthenticatedUser",
			ID:   "orgs/set-public-membership-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsSetPublicMembershipForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsSetPublicMembershipForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgsSetPublicMembershipForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsUnblockUser: ogenreflect.RuntimeOperation{
			Name: "OrgsUnblockUser",
			ID:   "orgs/unblock-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsUnblockUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(OrgsUnblockUserNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		OrgsUpdateMembershipForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "OrgsUpdateMembershipForAuthenticatedUser",
			ID:   "orgs/update-membership-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OrgsUpdateMembershipForAuthenticatedUserReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsUpdateMembershipForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsUpdateMembershipForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgMembership)).Elem(),
						reflect.TypeOf(new(*OrgsUpdateMembershipForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*OrgsUpdateMembershipForAuthenticatedUserApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgMembership)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsUpdateMembershipForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgsUpdateMembershipForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsUpdateWebhook: ogenreflect.RuntimeOperation{
			Name: "OrgsUpdateWebhook",
			ID:   "orgs/update-webhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptOrgsUpdateWebhookReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsUpdateWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrgsUpdateWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrgHook)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrgHook)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		OrgsUpdateWebhookConfigForOrg: ogenreflect.RuntimeOperation{
			Name: "OrgsUpdateWebhookConfigForOrg",
			ID:   "orgs/update-webhook-config-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptOrgsUpdateWebhookConfigForOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrgsUpdateWebhookConfigForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WebhookConfig)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookConfig)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesDeletePackageForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesDeletePackageForAuthenticatedUser",
			ID:   "packages/delete-package-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesDeletePackageForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesDeletePackageForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesDeletePackageForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesDeletePackageForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesDeletePackageForOrg: ogenreflect.RuntimeOperation{
			Name: "PackagesDeletePackageForOrg",
			ID:   "packages/delete-package-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesDeletePackageForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesDeletePackageForOrgPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesDeletePackageForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesDeletePackageForOrgNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForOrgApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForOrgApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForOrgApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForOrgApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesDeletePackageForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesDeletePackageForUser",
			ID:   "packages/delete-package-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesDeletePackageForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesDeletePackageForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesDeletePackageForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesDeletePackageForUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageForUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageForUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesDeletePackageVersionForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesDeletePackageVersionForAuthenticatedUser",
			ID:   "packages/delete-package-version-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesDeletePackageVersionForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesDeletePackageVersionForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesDeletePackageVersionForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesDeletePackageVersionForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesDeletePackageVersionForOrg: ogenreflect.RuntimeOperation{
			Name: "PackagesDeletePackageVersionForOrg",
			ID:   "packages/delete-package-version-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesDeletePackageVersionForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesDeletePackageVersionForOrgPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesDeletePackageVersionForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesDeletePackageVersionForOrgNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForOrgApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForOrgApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForOrgApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesDeletePackageVersionForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesDeletePackageVersionForUser",
			ID:   "packages/delete-package-version-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesDeletePackageVersionForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesDeletePackageVersionForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesDeletePackageVersionForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesDeletePackageVersionForUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesDeletePackageVersionForUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesDeletePackageVersionForUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
			ID:   "packages/get-all-package-versions-for-package-owned-by-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetAllPackageVersionsForPackageOwnedByOrg: ogenreflect.RuntimeOperation{
			Name: "PackagesGetAllPackageVersionsForPackageOwnedByOrg",
			ID:   "packages/get-all-package-versions-for-package-owned-by-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByOrgApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetAllPackageVersionsForPackageOwnedByUser: ogenreflect.RuntimeOperation{
			Name: "PackagesGetAllPackageVersionsForPackageOwnedByUser",
			ID:   "packages/get-all-package-versions-for-package-owned-by-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesGetAllPackageVersionsForPackageOwnedByUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetPackageForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesGetPackageForAuthenticatedUser",
			ID:   "packages/get-package-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetPackageForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetPackageForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Package)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Package)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetPackageForOrganization: ogenreflect.RuntimeOperation{
			Name: "PackagesGetPackageForOrganization",
			ID:   "packages/get-package-for-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetPackageForOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetPackageForOrganizationPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Package)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Package)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetPackageForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesGetPackageForUser",
			ID:   "packages/get-package-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetPackageForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetPackageForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Package)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Package)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetPackageVersionForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesGetPackageVersionForAuthenticatedUser",
			ID:   "packages/get-package-version-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetPackageVersionForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetPackageVersionForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PackageVersion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackageVersion)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetPackageVersionForOrganization: ogenreflect.RuntimeOperation{
			Name: "PackagesGetPackageVersionForOrganization",
			ID:   "packages/get-package-version-for-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetPackageVersionForOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetPackageVersionForOrganizationPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PackageVersion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackageVersion)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesGetPackageVersionForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesGetPackageVersionForUser",
			ID:   "packages/get-package-version-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesGetPackageVersionForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesGetPackageVersionForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PackageVersion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackageVersion)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesListPackagesForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesListPackagesForAuthenticatedUser",
			ID:   "packages/list-packages-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesListPackagesForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesListPackagesForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "visibility",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPackagesListPackagesForAuthenticatedUserVisibility)).Elem(),
							Name:     "visibility",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Package)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Package)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesListPackagesForOrganization: ogenreflect.RuntimeOperation{
			Name: "PackagesListPackagesForOrganization",
			ID:   "packages/list-packages-for-organization",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesListPackagesForOrganizationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesListPackagesForOrganizationPackageType)).Elem(),
							Name:     "package_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "visibility",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPackagesListPackagesForOrganizationVisibility)).Elem(),
							Name:     "visibility",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesListPackagesForOrganizationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesListPackagesForOrganizationOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*PackagesListPackagesForOrganizationApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesListPackagesForOrganizationApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesListPackagesForOrganizationOKApplicationJSON)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesListPackagesForOrganizationApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesListPackagesForOrganizationApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesListPackagesForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesListPackagesForUser",
			ID:   "packages/list-packages-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesListPackagesForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesListPackagesForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "visibility",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPackagesListPackagesForUserVisibility)).Elem(),
							Name:     "visibility",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesListPackagesForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesListPackagesForUserOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*PackagesListPackagesForUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesListPackagesForUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesListPackagesForUserOKApplicationJSON)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesListPackagesForUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesListPackagesForUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesRestorePackageForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesRestorePackageForAuthenticatedUser",
			ID:   "packages/restore-package-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesRestorePackageForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesRestorePackageForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "token",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "token",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesRestorePackageForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesRestorePackageForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesRestorePackageForOrg: ogenreflect.RuntimeOperation{
			Name: "PackagesRestorePackageForOrg",
			ID:   "packages/restore-package-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesRestorePackageForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesRestorePackageForOrgPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "token",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "token",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesRestorePackageForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesRestorePackageForOrgNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForOrgApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForOrgApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForOrgApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForOrgApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesRestorePackageForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesRestorePackageForUser",
			ID:   "packages/restore-package-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesRestorePackageForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesRestorePackageForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "token",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "token",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesRestorePackageForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesRestorePackageForUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageForUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageForUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesRestorePackageVersionForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "PackagesRestorePackageVersionForAuthenticatedUser",
			ID:   "packages/restore-package-version-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesRestorePackageVersionForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesRestorePackageVersionForAuthenticatedUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesRestorePackageVersionForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesRestorePackageVersionForAuthenticatedUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesRestorePackageVersionForOrg: ogenreflect.RuntimeOperation{
			Name: "PackagesRestorePackageVersionForOrg",
			ID:   "packages/restore-package-version-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesRestorePackageVersionForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesRestorePackageVersionForOrgPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesRestorePackageVersionForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesRestorePackageVersionForOrgNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForOrgApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForOrgApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForOrgApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		PackagesRestorePackageVersionForUser: ogenreflect.RuntimeOperation{
			Name: "PackagesRestorePackageVersionForUser",
			ID:   "packages/restore-package-version-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PackagesRestorePackageVersionForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "package_type",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(PackagesRestorePackageVersionForUserPackageType)).Elem(),
							Name:     "package_type",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "package_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "package_version_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "package_version_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PackagesRestorePackageVersionForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PackagesRestorePackageVersionForUserNoContent)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PackagesRestorePackageVersionForUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PackagesRestorePackageVersionForUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsAddCollaborator: ogenreflect.RuntimeOperation{
			Name: "ProjectsAddCollaborator",
			ID:   "projects/add-collaborator",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilProjectsAddCollaboratorReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsAddCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsAddCollaboratorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsAddCollaboratorNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsAddCollaboratorApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsAddCollaboratorApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsAddCollaboratorApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsAddCollaboratorApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsAddCollaboratorApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsAddCollaboratorApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsCreateColumn: ogenreflect.RuntimeOperation{
			Name: "ProjectsCreateColumn",
			ID:   "projects/create-column",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsCreateColumnReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsCreateColumnParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsCreateColumnRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectColumn)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateColumnApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateColumnApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectColumn)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateColumnApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateColumnApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsCreateForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ProjectsCreateForAuthenticatedUser",
			ID:   "projects/create-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsCreateForAuthenticatedUserReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsCreateForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Project)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Project)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsCreateForOrg: ogenreflect.RuntimeOperation{
			Name: "ProjectsCreateForOrg",
			ID:   "projects/create-for-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsCreateForOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsCreateForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsCreateForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Project)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForOrgApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForOrgApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForOrgApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Project)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForOrgApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForOrgApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForOrgApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsCreateForRepo: ogenreflect.RuntimeOperation{
			Name: "ProjectsCreateForRepo",
			ID:   "projects/create-for-repo",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsCreateForRepoReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsCreateForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsCreateForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Project)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForRepoApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForRepoApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForRepoApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ProjectsCreateForRepoApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Project)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForRepoApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForRepoApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForRepoApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsCreateForRepoApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsDelete: ogenreflect.RuntimeOperation{
			Name: "ProjectsDelete",
			ID:   "projects/delete",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsDeleteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsDeleteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsDeleteNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteApplicationJSONGone)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteApplicationJSONGone)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsDeleteCard: ogenreflect.RuntimeOperation{
			Name: "ProjectsDeleteCard",
			ID:   "projects/delete-card",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsDeleteCardParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "card_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "card_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsDeleteCardRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsDeleteCardNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteCardApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteCardForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteCardApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteCardApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteCardForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteCardApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsDeleteColumn: ogenreflect.RuntimeOperation{
			Name: "ProjectsDeleteColumn",
			ID:   "projects/delete-column",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsDeleteColumnParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "column_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "column_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsDeleteColumnRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsDeleteColumnNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteColumnApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsDeleteColumnApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteColumnApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsDeleteColumnApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsGet: ogenreflect.RuntimeOperation{
			Name: "ProjectsGet",
			ID:   "projects/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Project)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsGetApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsGetApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Project)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsGetCard: ogenreflect.RuntimeOperation{
			Name: "ProjectsGetCard",
			ID:   "projects/get-card",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsGetCardParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "card_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "card_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsGetCardRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectCard)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsGetCardApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsGetCardApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsGetCardApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectCard)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetCardApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetCardApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetCardApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsGetColumn: ogenreflect.RuntimeOperation{
			Name: "ProjectsGetColumn",
			ID:   "projects/get-column",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsGetColumnParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "column_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "column_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsGetColumnRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectColumn)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsGetColumnApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsGetColumnApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsGetColumnApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectColumn)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetColumnApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetColumnApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetColumnApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsGetPermissionForUser: ogenreflect.RuntimeOperation{
			Name: "ProjectsGetPermissionForUser",
			ID:   "projects/get-permission-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsGetPermissionForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsGetPermissionForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RepositoryCollaboratorPermission)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsGetPermissionForUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsGetPermissionForUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsGetPermissionForUserApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryCollaboratorPermission)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetPermissionForUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetPermissionForUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsGetPermissionForUserApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsListCards: ogenreflect.RuntimeOperation{
			Name: "ProjectsListCards",
			ID:   "projects/list-cards",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsListCardsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "column_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "column_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "archived_state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptProjectsListCardsArchivedState)).Elem(),
							Name:     "archived_state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsListCardsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsListCardsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsListCardsApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsListCardsApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCardsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCardsApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCardsApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsListCollaborators: ogenreflect.RuntimeOperation{
			Name: "ProjectsListCollaborators",
			ID:   "projects/list-collaborators",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsListCollaboratorsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "affiliation",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptProjectsListCollaboratorsAffiliation)).Elem(),
							Name:     "affiliation",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsListCollaboratorsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsListCollaboratorsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsListCollaboratorsApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsListCollaboratorsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsListCollaboratorsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCollaboratorsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCollaboratorsApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCollaboratorsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListCollaboratorsApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsListColumns: ogenreflect.RuntimeOperation{
			Name: "ProjectsListColumns",
			ID:   "projects/list-columns",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsListColumnsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsListColumnsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsListColumnsOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsListColumnsApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsListColumnsApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListColumnsOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListColumnsApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListColumnsApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsListForOrg: ogenreflect.RuntimeOperation{
			Name: "ProjectsListForOrg",
			ID:   "projects/list-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsListForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptProjectsListForOrgState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsListForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsListForOrgOKHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForOrgOKHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsListForRepo: ogenreflect.RuntimeOperation{
			Name: "ProjectsListForRepo",
			ID:   "projects/list-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsListForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptProjectsListForRepoState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsListForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsListForRepoOKHeaders)).Elem(),
						reflect.TypeOf(new(*ProjectsListForRepoApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsListForRepoApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsListForRepoApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ProjectsListForRepoApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForRepoOKHeaders)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForRepoApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForRepoApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForRepoApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForRepoApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsListForUser: ogenreflect.RuntimeOperation{
			Name: "ProjectsListForUser",
			ID:   "projects/list-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsListForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptProjectsListForUserState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsListForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsListForUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsListForUserOKHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsMoveCard: ogenreflect.RuntimeOperation{
			Name: "ProjectsMoveCard",
			ID:   "projects/move-card",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsMoveCardReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsMoveCardParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "card_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "card_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsMoveCardRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsMoveCardCreated)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ProjectsMoveCardForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ProjectsMoveCardServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsMoveCardCreated)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsMoveCardForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsMoveCardServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsMoveColumn: ogenreflect.RuntimeOperation{
			Name: "ProjectsMoveColumn",
			ID:   "projects/move-column",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsMoveColumnReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsMoveColumnParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "column_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "column_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsMoveColumnRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsMoveColumnCreated)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsMoveColumnApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsMoveColumnApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsMoveColumnCreated)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsMoveColumnApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsMoveColumnApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsRemoveCollaborator: ogenreflect.RuntimeOperation{
			Name: "ProjectsRemoveCollaborator",
			ID:   "projects/remove-collaborator",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsRemoveCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsRemoveCollaboratorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectsRemoveCollaboratorNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsRemoveCollaboratorApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsRemoveCollaboratorApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsRemoveCollaboratorApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsRemoveCollaboratorApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsRemoveCollaboratorApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsRemoveCollaboratorApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsUpdate: ogenreflect.RuntimeOperation{
			Name: "ProjectsUpdate",
			ID:   "projects/update",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptProjectsUpdateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsUpdateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsUpdateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Project)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateNotFound)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Project)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateApplicationJSONGone)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsUpdateCard: ogenreflect.RuntimeOperation{
			Name: "ProjectsUpdateCard",
			ID:   "projects/update-card",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptProjectsUpdateCardReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsUpdateCardParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "card_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "card_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsUpdateCardRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectCard)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateCardApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateCardApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateCardApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectCard)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateCardApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateCardApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateCardApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ProjectsUpdateColumn: ogenreflect.RuntimeOperation{
			Name: "ProjectsUpdateColumn",
			ID:   "projects/update-column",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ProjectsUpdateColumnReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ProjectsUpdateColumnParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "column_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "column_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ProjectsUpdateColumnRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProjectColumn)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateColumnApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ProjectsUpdateColumnApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectColumn)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateColumnApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProjectsUpdateColumnApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsCheckIfMerged: ogenreflect.RuntimeOperation{
			Name: "PullsCheckIfMerged",
			ID:   "pulls/check-if-merged",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsCheckIfMergedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsCheckIfMergedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullsCheckIfMergedNoContent)).Elem(),
						reflect.TypeOf(new(*PullsCheckIfMergedNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		PullsCreate: ogenreflect.RuntimeOperation{
			Name: "PullsCreate",
			ID:   "pulls/create",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsCreateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsCreateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsCreateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsCreateReplyForReviewComment: ogenreflect.RuntimeOperation{
			Name: "PullsCreateReplyForReviewComment",
			ID:   "pulls/create-reply-for-review-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsCreateReplyForReviewCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsCreateReplyForReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsCreateReplyForReviewCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReviewCommentHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReviewCommentHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsCreateReview: ogenreflect.RuntimeOperation{
			Name: "PullsCreateReview",
			ID:   "pulls/create-review",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptPullsCreateReviewReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsCreateReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsCreateReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReview)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReview)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsCreateReviewComment: ogenreflect.RuntimeOperation{
			Name: "PullsCreateReviewComment",
			ID:   "pulls/create-review-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsCreateReviewCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsCreateReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsCreateReviewCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReviewCommentHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReviewCommentHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsDeletePendingReview: ogenreflect.RuntimeOperation{
			Name: "PullsDeletePendingReview",
			ID:   "pulls/delete-pending-review",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsDeletePendingReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "review_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "review_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsDeletePendingReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReview)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReview)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsDeleteReviewComment: ogenreflect.RuntimeOperation{
			Name: "PullsDeleteReviewComment",
			ID:   "pulls/delete-review-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsDeleteReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsDeleteReviewCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullsDeleteReviewCommentNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsDismissReview: ogenreflect.RuntimeOperation{
			Name: "PullsDismissReview",
			ID:   "pulls/dismiss-review",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsDismissReviewReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsDismissReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "review_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "review_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsDismissReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReview)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReview)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsGet: ogenreflect.RuntimeOperation{
			Name: "PullsGet",
			ID:   "pulls/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequest)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*PullsGetApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*PullsGetApplicationJSONInternalServerError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequest)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsGetApplicationJSONNotFound)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsGetApplicationJSONInternalServerError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsGetReview: ogenreflect.RuntimeOperation{
			Name: "PullsGetReview",
			ID:   "pulls/get-review",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsGetReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "review_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "review_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsGetReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReview)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReview)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsGetReviewComment: ogenreflect.RuntimeOperation{
			Name: "PullsGetReviewComment",
			ID:   "pulls/get-review-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsGetReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsGetReviewCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReviewComment)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReviewComment)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsList: ogenreflect.RuntimeOperation{
			Name: "PullsList",
			ID:   "pulls/list",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "head",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "head",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "base",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "base",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullsListOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListCommentsForReview: ogenreflect.RuntimeOperation{
			Name: "PullsListCommentsForReview",
			ID:   "pulls/list-comments-for-review",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListCommentsForReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "review_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "review_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsListCommentsForReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullsListCommentsForReviewOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListCommentsForReviewOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListCommits: ogenreflect.RuntimeOperation{
			Name: "PullsListCommits",
			ID:   "pulls/list-commits",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListCommitsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PullsListCommitsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListCommitsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListFiles: ogenreflect.RuntimeOperation{
			Name: "PullsListFiles",
			ID:   "pulls/list-files",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListFilesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsListFilesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullsListFilesOKHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListFilesOKHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListRequestedReviewers: ogenreflect.RuntimeOperation{
			Name: "PullsListRequestedReviewers",
			ID:   "pulls/list-requested-reviewers",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListRequestedReviewersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PullRequestReviewRequestHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReviewRequestHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListReviewComments: ogenreflect.RuntimeOperation{
			Name: "PullsListReviewComments",
			ID:   "pulls/list-review-comments",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListReviewCommentsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListReviewCommentsSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListReviewCommentsDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PullsListReviewCommentsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListReviewCommentsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListReviewCommentsForRepo: ogenreflect.RuntimeOperation{
			Name: "PullsListReviewCommentsForRepo",
			ID:   "pulls/list-review-comments-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListReviewCommentsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListReviewCommentsForRepoSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptPullsListReviewCommentsForRepoDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PullsListReviewCommentsForRepoOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListReviewCommentsForRepoOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsListReviews: ogenreflect.RuntimeOperation{
			Name: "PullsListReviews",
			ID:   "pulls/list-reviews",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsListReviewsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PullsListReviewsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsListReviewsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsMerge: ogenreflect.RuntimeOperation{
			Name: "PullsMerge",
			ID:   "pulls/merge",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilPullsMergeReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsMergeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsMergeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestMergeResult)).Elem(),
						reflect.TypeOf(new(*PullsMergeApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PullsMergeApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*PullsMergeMethodNotAllowed)).Elem(),
						reflect.TypeOf(new(*PullsMergeConflict)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestMergeResult)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsMergeApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsMergeApplicationJSONNotFound)).Elem(),
							},
						},
						"405": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsMergeMethodNotAllowed)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsMergeConflict)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsRemoveRequestedReviewers: ogenreflect.RuntimeOperation{
			Name: "PullsRemoveRequestedReviewers",
			ID:   "pulls/remove-requested-reviewers",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsRemoveRequestedReviewersReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsRemoveRequestedReviewersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsRemoveRequestedReviewersRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestSimple)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestSimple)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsSubmitReview: ogenreflect.RuntimeOperation{
			Name: "PullsSubmitReview",
			ID:   "pulls/submit-review",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsSubmitReviewReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsSubmitReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "review_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "review_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsSubmitReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReview)).Elem(),
						reflect.TypeOf(new(*PullsSubmitReviewApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*PullsSubmitReviewApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReview)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsSubmitReviewApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsSubmitReviewApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsUpdate: ogenreflect.RuntimeOperation{
			Name: "PullsUpdate",
			ID:   "pulls/update",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptPullsUpdateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsUpdateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsUpdateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequest)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequest)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsUpdateBranch: ogenreflect.RuntimeOperation{
			Name: "PullsUpdateBranch",
			ID:   "pulls/update-branch",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilPullsUpdateBranchReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsUpdateBranchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsUpdateBranchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullsUpdateBranchAccepted)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullsUpdateBranchAccepted)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsUpdateReview: ogenreflect.RuntimeOperation{
			Name: "PullsUpdateReview",
			ID:   "pulls/update-review",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsUpdateReviewReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsUpdateReviewParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pull_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "pull_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "review_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "review_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PullsUpdateReviewRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PullRequestReview)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReview)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		PullsUpdateReviewComment: ogenreflect.RuntimeOperation{
			Name: "PullsUpdateReviewComment",
			ID:   "pulls/update-review-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PullsUpdateReviewCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PullsUpdateReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PullRequestReviewComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PullRequestReviewComment)).Elem(),
							},
						},
					},
				},
			},
		},
		RateLimitGet: ogenreflect.RuntimeOperation{
			Name: "RateLimitGet",
			ID:   "rate-limit/get",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(RateLimitGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RateLimitOverviewHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"X-RateLimit-Limit": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptInt)).Elem(),
									Name:     "X-RateLimit-Limit",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
								"X-RateLimit-Remaining": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptInt)).Elem(),
									Name:     "X-RateLimit-Remaining",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
								"X-RateLimit-Reset": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptInt)).Elem(),
									Name:     "X-RateLimit-Reset",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RateLimitOverviewHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForCommitComment",
			ID:   "reactions/create-for-commit-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForCommitCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForCommitCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForCommitCommentApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForCommitCommentApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForCommitCommentApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForCommitCommentApplicationJSONCreated)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForIssue: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForIssue",
			ID:   "reactions/create-for-issue",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForIssueReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForIssueParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForIssueRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForIssueApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForIssueApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForIssueApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForIssueApplicationJSONCreated)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForIssueComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForIssueComment",
			ID:   "reactions/create-for-issue-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForIssueCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForIssueCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForIssueCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForIssueCommentApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForIssueCommentApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForIssueCommentApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForIssueCommentApplicationJSONCreated)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForPullRequestReviewComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForPullRequestReviewComment",
			ID:   "reactions/create-for-pull-request-review-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForPullRequestReviewCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForPullRequestReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForPullRequestReviewCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForPullRequestReviewCommentApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForPullRequestReviewCommentApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForRelease: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForRelease",
			ID:   "reactions/create-for-release",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForReleaseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForReleaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "release_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "release_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForReleaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForReleaseApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForReleaseApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForReleaseApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForReleaseApplicationJSONCreated)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForTeamDiscussionCommentInOrg: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForTeamDiscussionCommentInOrg",
			ID:   "reactions/create-for-team-discussion-comment-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForTeamDiscussionCommentLegacy: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForTeamDiscussionCommentLegacy",
			ID:   "reactions/create-for-team-discussion-comment-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForTeamDiscussionCommentLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Reaction)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Reaction)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForTeamDiscussionInOrg: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForTeamDiscussionInOrg",
			ID:   "reactions/create-for-team-discussion-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForTeamDiscussionInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForTeamDiscussionInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsCreateForTeamDiscussionInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsCreateForTeamDiscussionLegacy: ogenreflect.RuntimeOperation{
			Name: "ReactionsCreateForTeamDiscussionLegacy",
			ID:   "reactions/create-for-team-discussion-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReactionsCreateForTeamDiscussionLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsCreateForTeamDiscussionLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Reaction)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Reaction)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsDeleteForCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteForCommitComment",
			ID:   "reactions/delete-for-commit-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteForCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsDeleteForCommitCommentNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReactionsDeleteForIssue: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteForIssue",
			ID:   "reactions/delete-for-issue",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteForIssueParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsDeleteForIssueNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReactionsDeleteForIssueComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteForIssueComment",
			ID:   "reactions/delete-for-issue-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteForIssueCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsDeleteForIssueCommentNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReactionsDeleteForPullRequestComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteForPullRequestComment",
			ID:   "reactions/delete-for-pull-request-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteForPullRequestCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsDeleteForPullRequestCommentNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReactionsDeleteForTeamDiscussion: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteForTeamDiscussion",
			ID:   "reactions/delete-for-team-discussion",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteForTeamDiscussionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsDeleteForTeamDiscussionNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReactionsDeleteForTeamDiscussionComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteForTeamDiscussionComment",
			ID:   "reactions/delete-for-team-discussion-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteForTeamDiscussionCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsDeleteForTeamDiscussionCommentNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReactionsDeleteLegacy: ogenreflect.RuntimeOperation{
			Name: "ReactionsDeleteLegacy",
			ID:   "reactions/delete-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsDeleteLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "reaction_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "reaction_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsDeleteLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsDeleteLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ReactionsDeleteLegacyApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ReactionsDeleteLegacyApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReactionsDeleteLegacyApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsDeleteLegacyApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsDeleteLegacyApplicationJSONForbidden)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsDeleteLegacyApplicationJSONGone)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForCommitComment",
			ID:   "reactions/list-for-commit-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForCommitCommentContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsListForCommitCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsListForCommitCommentOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForCommitCommentOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForIssue: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForIssue",
			ID:   "reactions/list-for-issue",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForIssueParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "issue_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "issue_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForIssueContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsListForIssueRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsListForIssueOKHeaders)).Elem(),
						reflect.TypeOf(new(*ReactionsListForIssueApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReactionsListForIssueApplicationJSONGone)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForIssueOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForIssueApplicationJSONNotFound)).Elem(),
							},
						},
						"410": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForIssueApplicationJSONGone)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForIssueComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForIssueComment",
			ID:   "reactions/list-for-issue-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForIssueCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForIssueCommentContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsListForIssueCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsListForIssueCommentOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForIssueCommentOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForPullRequestReviewComment: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForPullRequestReviewComment",
			ID:   "reactions/list-for-pull-request-review-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForPullRequestReviewCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForPullRequestReviewCommentContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReactionsListForPullRequestReviewCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReactionsListForPullRequestReviewCommentOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForPullRequestReviewCommentOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForTeamDiscussionCommentInOrg: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForTeamDiscussionCommentInOrg",
			ID:   "reactions/list-for-team-discussion-comment-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForTeamDiscussionCommentInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForTeamDiscussionCommentInOrgContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsListForTeamDiscussionCommentInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForTeamDiscussionCommentInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForTeamDiscussionCommentLegacy: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForTeamDiscussionCommentLegacy",
			ID:   "reactions/list-for-team-discussion-comment-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForTeamDiscussionCommentLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForTeamDiscussionCommentLegacyContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsListForTeamDiscussionCommentLegacyOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForTeamDiscussionCommentLegacyOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForTeamDiscussionInOrg: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForTeamDiscussionInOrg",
			ID:   "reactions/list-for-team-discussion-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForTeamDiscussionInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForTeamDiscussionInOrgContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsListForTeamDiscussionInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForTeamDiscussionInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReactionsListForTeamDiscussionLegacy: ogenreflect.RuntimeOperation{
			Name: "ReactionsListForTeamDiscussionLegacy",
			ID:   "reactions/list-for-team-discussion-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReactionsListForTeamDiscussionLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "content",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReactionsListForTeamDiscussionLegacyContent)).Elem(),
							Name:     "content",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReactionsListForTeamDiscussionLegacyOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReactionsListForTeamDiscussionLegacyOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposAcceptInvitation: ogenreflect.RuntimeOperation{
			Name: "ReposAcceptInvitation",
			ID:   "repos/accept-invitation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposAcceptInvitationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "invitation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "invitation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposAcceptInvitationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposAcceptInvitationNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ReposAcceptInvitationApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposAcceptInvitationApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReposAcceptInvitationApplicationJSONConflict)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAcceptInvitationApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAcceptInvitationApplicationJSONNotFound)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAcceptInvitationApplicationJSONConflict)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposAddAppAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposAddAppAccessRestrictions",
			ID:   "repos/add-app-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposAddAppAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposAddAppAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposAddAppAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposAddAppAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAddAppAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposAddCollaborator: ogenreflect.RuntimeOperation{
			Name: "ReposAddCollaborator",
			ID:   "repos/add-collaborator",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposAddCollaboratorReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposAddCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposAddCollaboratorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RepositoryInvitation)).Elem(),
						reflect.TypeOf(new(*ReposAddCollaboratorNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryInvitation)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposAddStatusCheckContexts: ogenreflect.RuntimeOperation{
			Name: "ReposAddStatusCheckContexts",
			ID:   "repos/add-status-check-contexts",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposAddStatusCheckContextsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposAddStatusCheckContextsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposAddStatusCheckContextsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposAddStatusCheckContextsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ReposAddStatusCheckContextsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposAddStatusCheckContextsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAddStatusCheckContextsOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAddStatusCheckContextsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAddStatusCheckContextsApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposAddTeamAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposAddTeamAccessRestrictions",
			ID:   "repos/add-team-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposAddTeamAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposAddTeamAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposAddTeamAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposAddTeamAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAddTeamAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposAddUserAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposAddUserAccessRestrictions",
			ID:   "repos/add-user-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposAddUserAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposAddUserAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposAddUserAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposAddUserAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposAddUserAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCheckCollaborator: ogenreflect.RuntimeOperation{
			Name: "ReposCheckCollaborator",
			ID:   "repos/check-collaborator",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCheckCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCheckCollaboratorRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposCheckCollaboratorNoContent)).Elem(),
						reflect.TypeOf(new(*ReposCheckCollaboratorNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposCheckVulnerabilityAlerts: ogenreflect.RuntimeOperation{
			Name: "ReposCheckVulnerabilityAlerts",
			ID:   "repos/check-vulnerability-alerts",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCheckVulnerabilityAlertsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCheckVulnerabilityAlertsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposCheckVulnerabilityAlertsNoContent)).Elem(),
						reflect.TypeOf(new(*ReposCheckVulnerabilityAlertsNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposCompareCommits: ogenreflect.RuntimeOperation{
			Name: "ReposCompareCommits",
			ID:   "repos/compare-commits",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCompareCommitsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "basehead",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "basehead",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCompareCommitsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CommitComparison)).Elem(),
						reflect.TypeOf(new(*ReposCompareCommitsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReposCompareCommitsApplicationJSONInternalServerError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CommitComparison)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCompareCommitsApplicationJSONNotFound)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCompareCommitsApplicationJSONInternalServerError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateAutolink: ogenreflect.RuntimeOperation{
			Name: "ReposCreateAutolink",
			ID:   "repos/create-autolink",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateAutolinkReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateAutolinkParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateAutolinkRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*AutolinkHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(AutolinkHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReposCreateCommitComment",
			ID:   "repos/create-commit-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateCommitCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "commit_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "commit_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateCommitCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CommitCommentHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CommitCommentHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateCommitSignatureProtection: ogenreflect.RuntimeOperation{
			Name: "ReposCreateCommitSignatureProtection",
			ID:   "repos/create-commit-signature-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateCommitSignatureProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateCommitSignatureProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProtectedBranchAdminEnforced)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranchAdminEnforced)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateCommitStatus: ogenreflect.RuntimeOperation{
			Name: "ReposCreateCommitStatus",
			ID:   "repos/create-commit-status",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateCommitStatusReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateCommitStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(StatusHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(StatusHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateDeployKey: ogenreflect.RuntimeOperation{
			Name: "ReposCreateDeployKey",
			ID:   "repos/create-deploy-key",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateDeployKeyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateDeployKeyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateDeployKeyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeployKeyHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(DeployKeyHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateDeployment: ogenreflect.RuntimeOperation{
			Name: "ReposCreateDeployment",
			ID:   "repos/create-deployment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateDeploymentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateDeploymentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateDeploymentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Deployment)).Elem(),
						reflect.TypeOf(new(*ReposCreateDeploymentAccepted)).Elem(),
						reflect.TypeOf(new(*ReposCreateDeploymentConflict)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Deployment)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateDeploymentAccepted)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateDeploymentStatus: ogenreflect.RuntimeOperation{
			Name: "ReposCreateDeploymentStatus",
			ID:   "repos/create-deployment-status",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateDeploymentStatusReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateDeploymentStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "deployment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "deployment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateDeploymentStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeploymentStatusHeaders)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(DeploymentStatusHeaders)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateDispatchEvent: ogenreflect.RuntimeOperation{
			Name: "ReposCreateDispatchEvent",
			ID:   "repos/create-dispatch-event",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateDispatchEventReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateDispatchEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateDispatchEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposCreateDispatchEventNoContent)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ReposCreateForAuthenticatedUser",
			ID:   "repos/create-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateForAuthenticatedUserReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RepositoryHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ReposCreateForAuthenticatedUserApplicationJSONBadRequest)).Elem(),
						reflect.TypeOf(new(*ReposCreateForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ReposCreateForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposCreateForAuthenticatedUserApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForAuthenticatedUserApplicationJSONBadRequest)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateFork: ogenreflect.RuntimeOperation{
			Name: "ReposCreateFork",
			ID:   "repos/create-fork",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilReposCreateForkReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateForkParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateForkRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*FullRepository)).Elem(),
						reflect.TypeOf(new(*ReposCreateForkApplicationJSONBadRequest)).Elem(),
						reflect.TypeOf(new(*ReposCreateForkApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposCreateForkApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(FullRepository)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForkApplicationJSONBadRequest)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForkApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateForkApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateInOrg: ogenreflect.RuntimeOperation{
			Name: "ReposCreateInOrg",
			ID:   "repos/create-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RepositoryHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateOrUpdateFileContents: ogenreflect.RuntimeOperation{
			Name: "ReposCreateOrUpdateFileContents",
			ID:   "repos/create-or-update-file-contents",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateOrUpdateFileContentsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateOrUpdateFileContentsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateOrUpdateFileContentsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposCreateOrUpdateFileContentsApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*ReposCreateOrUpdateFileContentsApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*ReposCreateOrUpdateFileContentsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReposCreateOrUpdateFileContentsApplicationJSONConflict)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateOrUpdateFileContentsApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateOrUpdateFileContentsApplicationJSONCreated)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateOrUpdateFileContentsApplicationJSONNotFound)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateOrUpdateFileContentsApplicationJSONConflict)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreatePagesSite: ogenreflect.RuntimeOperation{
			Name: "ReposCreatePagesSite",
			ID:   "repos/create-pages-site",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(NilReposCreatePagesSiteReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreatePagesSiteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreatePagesSiteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Page)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Page)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateRelease: ogenreflect.RuntimeOperation{
			Name: "ReposCreateRelease",
			ID:   "repos/create-release",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateReleaseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateReleaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateReleaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReleaseHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReleaseHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateUsingTemplate: ogenreflect.RuntimeOperation{
			Name: "ReposCreateUsingTemplate",
			ID:   "repos/create-using-template",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposCreateUsingTemplateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateUsingTemplateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "template_owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "template_owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "template_repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "template_repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RepositoryHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposCreateWebhook: ogenreflect.RuntimeOperation{
			Name: "ReposCreateWebhook",
			ID:   "repos/create-webhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilReposCreateWebhookReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposCreateWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposCreateWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*HookHeaders)).Elem(),
						reflect.TypeOf(new(*ReposCreateWebhookApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposCreateWebhookApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(HookHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateWebhookApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposCreateWebhookApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeclineInvitation: ogenreflect.RuntimeOperation{
			Name: "ReposDeclineInvitation",
			ID:   "repos/decline-invitation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeclineInvitationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "invitation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "invitation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeclineInvitationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeclineInvitationNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ReposDeclineInvitationApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposDeclineInvitationApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReposDeclineInvitationApplicationJSONConflict)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeclineInvitationApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeclineInvitationApplicationJSONNotFound)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeclineInvitationApplicationJSONConflict)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDelete: ogenreflect.RuntimeOperation{
			Name: "ReposDelete",
			ID:   "repos/delete",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteNoContent)).Elem(),
						reflect.TypeOf(new(*ReposDeleteApplicationJSONTemporaryRedirect)).Elem(),
						reflect.TypeOf(new(*ReposDeleteForbidden)).Elem(),
						reflect.TypeOf(new(*ReposDeleteApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"307": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeleteApplicationJSONTemporaryRedirect)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeleteForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeleteApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteAccessRestrictions",
			ID:   "repos/delete-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDeleteAccessRestrictionsNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDeleteAdminBranchProtection: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteAdminBranchProtection",
			ID:   "repos/delete-admin-branch-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteAdminBranchProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteAdminBranchProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteAdminBranchProtectionNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteAnEnvironment: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteAnEnvironment",
			ID:   "repos/delete-an-environment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteAnEnvironmentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "environment_name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "environment_name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDeleteAnEnvironmentNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDeleteAutolink: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteAutolink",
			ID:   "repos/delete-autolink",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteAutolinkParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "autolink_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "autolink_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteAutolinkRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteAutolinkNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteBranchProtection: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteBranchProtection",
			ID:   "repos/delete-branch-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteBranchProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteBranchProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteBranchProtectionNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteCommitComment",
			ID:   "repos/delete-commit-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteCommitCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteCommitCommentNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteCommitSignatureProtection: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteCommitSignatureProtection",
			ID:   "repos/delete-commit-signature-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteCommitSignatureProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteCommitSignatureProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteCommitSignatureProtectionNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteDeployKey: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteDeployKey",
			ID:   "repos/delete-deploy-key",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteDeployKeyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "key_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "key_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDeleteDeployKeyNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDeleteDeployment: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteDeployment",
			ID:   "repos/delete-deployment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteDeploymentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "deployment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "deployment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteDeploymentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteDeploymentNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteFile: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteFile",
			ID:   "repos/delete-file",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposDeleteFileReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteFileParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteFileRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*FileCommit)).Elem(),
						reflect.TypeOf(new(*ReposDeleteFileApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReposDeleteFileApplicationJSONConflict)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(FileCommit)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeleteFileApplicationJSONNotFound)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposDeleteFileApplicationJSONConflict)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteInvitation: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteInvitation",
			ID:   "repos/delete-invitation",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteInvitationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "invitation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "invitation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDeleteInvitationNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDeletePagesSite: ogenreflect.RuntimeOperation{
			Name: "ReposDeletePagesSite",
			ID:   "repos/delete-pages-site",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeletePagesSiteParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeletePagesSiteRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeletePagesSiteNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeletePullRequestReviewProtection: ogenreflect.RuntimeOperation{
			Name: "ReposDeletePullRequestReviewProtection",
			ID:   "repos/delete-pull-request-review-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeletePullRequestReviewProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeletePullRequestReviewProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeletePullRequestReviewProtectionNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDeleteRelease: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteRelease",
			ID:   "repos/delete-release",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteReleaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "release_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "release_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDeleteReleaseNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDeleteReleaseAsset: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteReleaseAsset",
			ID:   "repos/delete-release-asset",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteReleaseAssetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "asset_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "asset_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDeleteReleaseAssetNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDeleteWebhook: ogenreflect.RuntimeOperation{
			Name: "ReposDeleteWebhook",
			ID:   "repos/delete-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDeleteWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposDeleteWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposDeleteWebhookNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposDisableAutomatedSecurityFixes: ogenreflect.RuntimeOperation{
			Name: "ReposDisableAutomatedSecurityFixes",
			ID:   "repos/disable-automated-security-fixes",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDisableAutomatedSecurityFixesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDisableAutomatedSecurityFixesNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDisableLfsForRepo: ogenreflect.RuntimeOperation{
			Name: "ReposDisableLfsForRepo",
			ID:   "repos/disable-lfs-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDisableLfsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDisableLfsForRepoNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDisableVulnerabilityAlerts: ogenreflect.RuntimeOperation{
			Name: "ReposDisableVulnerabilityAlerts",
			ID:   "repos/disable-vulnerability-alerts",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDisableVulnerabilityAlertsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDisableVulnerabilityAlertsNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDownloadTarballArchive: ogenreflect.RuntimeOperation{
			Name: "ReposDownloadTarballArchive",
			ID:   "repos/download-tarball-archive",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDownloadTarballArchiveParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDownloadTarballArchiveFound)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposDownloadZipballArchive: ogenreflect.RuntimeOperation{
			Name: "ReposDownloadZipballArchive",
			ID:   "repos/download-zipball-archive",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposDownloadZipballArchiveParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposDownloadZipballArchiveFound)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"302": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Location": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Location",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposEnableAutomatedSecurityFixes: ogenreflect.RuntimeOperation{
			Name: "ReposEnableAutomatedSecurityFixes",
			ID:   "repos/enable-automated-security-fixes",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposEnableAutomatedSecurityFixesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposEnableAutomatedSecurityFixesNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposEnableLfsForRepo: ogenreflect.RuntimeOperation{
			Name: "ReposEnableLfsForRepo",
			ID:   "repos/enable-lfs-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposEnableLfsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposEnableLfsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*ReposEnableLfsForRepoForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposEnableVulnerabilityAlerts: ogenreflect.RuntimeOperation{
			Name: "ReposEnableVulnerabilityAlerts",
			ID:   "repos/enable-vulnerability-alerts",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposEnableVulnerabilityAlertsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposEnableVulnerabilityAlertsNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposGet: ogenreflect.RuntimeOperation{
			Name: "ReposGet",
			ID:   "repos/get",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*FullRepository)).Elem(),
						reflect.TypeOf(new(*ReposGetApplicationJSONMovedPermanently)).Elem(),
						reflect.TypeOf(new(*ReposGetApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposGetApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(FullRepository)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetApplicationJSONMovedPermanently)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposGetAccessRestrictions",
			ID:   "repos/get-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*BranchRestrictionPolicy)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BranchRestrictionPolicy)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetAdminBranchProtection: ogenreflect.RuntimeOperation{
			Name: "ReposGetAdminBranchProtection",
			ID:   "repos/get-admin-branch-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetAdminBranchProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ProtectedBranchAdminEnforced)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranchAdminEnforced)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetAllStatusCheckContexts: ogenreflect.RuntimeOperation{
			Name: "ReposGetAllStatusCheckContexts",
			ID:   "repos/get-all-status-check-contexts",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetAllStatusCheckContextsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetAllStatusCheckContextsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetAllStatusCheckContextsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetAllStatusCheckContextsOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetAllTopics: ogenreflect.RuntimeOperation{
			Name: "ReposGetAllTopics",
			ID:   "repos/get-all-topics",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetAllTopicsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetAllTopicsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Topic)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Topic)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetAppsWithAccessToProtectedBranch: ogenreflect.RuntimeOperation{
			Name: "ReposGetAppsWithAccessToProtectedBranch",
			ID:   "repos/get-apps-with-access-to-protected-branch",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetAppsWithAccessToProtectedBranchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetAppsWithAccessToProtectedBranchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetAutolink: ogenreflect.RuntimeOperation{
			Name: "ReposGetAutolink",
			ID:   "repos/get-autolink",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetAutolinkParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "autolink_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "autolink_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetAutolinkRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Autolink)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Autolink)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetBranch: ogenreflect.RuntimeOperation{
			Name: "ReposGetBranch",
			ID:   "repos/get-branch",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetBranchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetBranchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*BranchWithProtection)).Elem(),
						reflect.TypeOf(new(*ReposGetBranchApplicationJSONMovedPermanently)).Elem(),
						reflect.TypeOf(new(*ReposGetBranchApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BranchWithProtection)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetBranchApplicationJSONMovedPermanently)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetBranchApplicationJSONNotFound)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetBranchProtection: ogenreflect.RuntimeOperation{
			Name: "ReposGetBranchProtection",
			ID:   "repos/get-branch-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetBranchProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetBranchProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*BranchProtection)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BranchProtection)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetClones: ogenreflect.RuntimeOperation{
			Name: "ReposGetClones",
			ID:   "repos/get-clones",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetClonesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposGetClonesPer)).Elem(),
							Name:     "per",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetClonesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CloneTraffic)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CloneTraffic)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetCodeFrequencyStats: ogenreflect.RuntimeOperation{
			Name: "ReposGetCodeFrequencyStats",
			ID:   "repos/get-code-frequency-stats",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCodeFrequencyStatsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCodeFrequencyStatsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetCodeFrequencyStatsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*NoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetCodeFrequencyStatsOKApplicationJSON)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposGetCollaboratorPermissionLevel: ogenreflect.RuntimeOperation{
			Name: "ReposGetCollaboratorPermissionLevel",
			ID:   "repos/get-collaborator-permission-level",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCollaboratorPermissionLevelParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCollaboratorPermissionLevelRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*RepositoryCollaboratorPermission)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryCollaboratorPermission)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetCombinedStatusForRef: ogenreflect.RuntimeOperation{
			Name: "ReposGetCombinedStatusForRef",
			ID:   "repos/get-combined-status-for-ref",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCombinedStatusForRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCombinedStatusForRefRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CombinedCommitStatus)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CombinedCommitStatus)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetCommit: ogenreflect.RuntimeOperation{
			Name: "ReposGetCommit",
			ID:   "repos/get-commit",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCommitParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCommitRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Commit)).Elem(),
						reflect.TypeOf(new(*ReposGetCommitApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ReposGetCommitApplicationJSONInternalServerError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Commit)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetCommitApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetCommitApplicationJSONInternalServerError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetCommitActivityStats: ogenreflect.RuntimeOperation{
			Name: "ReposGetCommitActivityStats",
			ID:   "repos/get-commit-activity-stats",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCommitActivityStatsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCommitActivityStatsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetCommitActivityStatsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*NoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetCommitActivityStatsOKApplicationJSON)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposGetCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReposGetCommitComment",
			ID:   "repos/get-commit-comment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCommitCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CommitComment)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CommitComment)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetCommitSignatureProtection: ogenreflect.RuntimeOperation{
			Name: "ReposGetCommitSignatureProtection",
			ID:   "repos/get-commit-signature-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCommitSignatureProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetCommitSignatureProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProtectedBranchAdminEnforced)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranchAdminEnforced)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetCommunityProfileMetrics: ogenreflect.RuntimeOperation{
			Name: "ReposGetCommunityProfileMetrics",
			ID:   "repos/get-community-profile-metrics",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetCommunityProfileMetricsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(CommunityProfile)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CommunityProfile)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetContributorsStats: ogenreflect.RuntimeOperation{
			Name: "ReposGetContributorsStats",
			ID:   "repos/get-contributors-stats",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetContributorsStatsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetContributorsStatsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetContributorsStatsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*NoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetContributorsStatsOKApplicationJSON)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposGetDeployKey: ogenreflect.RuntimeOperation{
			Name: "ReposGetDeployKey",
			ID:   "repos/get-deploy-key",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetDeployKeyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "key_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "key_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetDeployKeyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeployKey)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(DeployKey)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetDeployment: ogenreflect.RuntimeOperation{
			Name: "ReposGetDeployment",
			ID:   "repos/get-deployment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetDeploymentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "deployment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "deployment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetDeploymentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Deployment)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Deployment)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetDeploymentStatus: ogenreflect.RuntimeOperation{
			Name: "ReposGetDeploymentStatus",
			ID:   "repos/get-deployment-status",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetDeploymentStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "deployment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "deployment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "status_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "status_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetDeploymentStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*DeploymentStatus)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(DeploymentStatus)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetLatestPagesBuild: ogenreflect.RuntimeOperation{
			Name: "ReposGetLatestPagesBuild",
			ID:   "repos/get-latest-pages-build",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetLatestPagesBuildParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PageBuild)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PageBuild)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetLatestRelease: ogenreflect.RuntimeOperation{
			Name: "ReposGetLatestRelease",
			ID:   "repos/get-latest-release",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetLatestReleaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Release)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Release)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetPages: ogenreflect.RuntimeOperation{
			Name: "ReposGetPages",
			ID:   "repos/get-pages",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetPagesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetPagesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Page)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Page)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetPagesBuild: ogenreflect.RuntimeOperation{
			Name: "ReposGetPagesBuild",
			ID:   "repos/get-pages-build",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetPagesBuildParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "build_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "build_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PageBuild)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PageBuild)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetPagesHealthCheck: ogenreflect.RuntimeOperation{
			Name: "ReposGetPagesHealthCheck",
			ID:   "repos/get-pages-health-check",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetPagesHealthCheckParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetPagesHealthCheckRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PagesHealthCheck)).Elem(),
						reflect.TypeOf(new(*EmptyObject)).Elem(),
						reflect.TypeOf(new(*ReposGetPagesHealthCheckBadRequest)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ReposGetPagesHealthCheckUnprocessableEntity)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PagesHealthCheck)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(EmptyObject)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposGetParticipationStats: ogenreflect.RuntimeOperation{
			Name: "ReposGetParticipationStats",
			ID:   "repos/get-participation-stats",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetParticipationStatsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetParticipationStatsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ParticipationStats)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ParticipationStats)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetPullRequestReviewProtection: ogenreflect.RuntimeOperation{
			Name: "ReposGetPullRequestReviewProtection",
			ID:   "repos/get-pull-request-review-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetPullRequestReviewProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ProtectedBranchPullRequestReview)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranchPullRequestReview)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetPunchCardStats: ogenreflect.RuntimeOperation{
			Name: "ReposGetPunchCardStats",
			ID:   "repos/get-punch-card-stats",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetPunchCardStatsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetPunchCardStatsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetPunchCardStatsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NoContent)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetPunchCardStatsOKApplicationJSON)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposGetReadme: ogenreflect.RuntimeOperation{
			Name: "ReposGetReadme",
			ID:   "repos/get-readme",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetReadmeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "ref",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetReadmeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ContentFile)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ContentFile)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetReadmeInDirectory: ogenreflect.RuntimeOperation{
			Name: "ReposGetReadmeInDirectory",
			ID:   "repos/get-readme-in-directory",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetReadmeInDirectoryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "dir",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "dir",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "ref",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetReadmeInDirectoryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ContentFile)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ContentFile)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetRelease: ogenreflect.RuntimeOperation{
			Name: "ReposGetRelease",
			ID:   "repos/get-release",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetReleaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "release_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "release_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetReleaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Release)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Release)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetReleaseAsset: ogenreflect.RuntimeOperation{
			Name: "ReposGetReleaseAsset",
			ID:   "repos/get-release-asset",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetReleaseAssetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "asset_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "asset_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetReleaseAssetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReleaseAsset)).Elem(),
						reflect.TypeOf(new(*Found)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReleaseAsset)).Elem(),
							},
						},
						"302": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetReleaseByTag: ogenreflect.RuntimeOperation{
			Name: "ReposGetReleaseByTag",
			ID:   "repos/get-release-by-tag",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetReleaseByTagParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "tag",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "tag",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetReleaseByTagRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Release)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Release)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetStatusChecksProtection: ogenreflect.RuntimeOperation{
			Name: "ReposGetStatusChecksProtection",
			ID:   "repos/get-status-checks-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetStatusChecksProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetStatusChecksProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*StatusCheckPolicy)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(StatusCheckPolicy)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetTeamsWithAccessToProtectedBranch: ogenreflect.RuntimeOperation{
			Name: "ReposGetTeamsWithAccessToProtectedBranch",
			ID:   "repos/get-teams-with-access-to-protected-branch",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetTeamsWithAccessToProtectedBranchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetTeamsWithAccessToProtectedBranchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetTopPaths: ogenreflect.RuntimeOperation{
			Name: "ReposGetTopPaths",
			ID:   "repos/get-top-paths",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetTopPathsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetTopPathsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetTopPathsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetTopPathsOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetTopReferrers: ogenreflect.RuntimeOperation{
			Name: "ReposGetTopReferrers",
			ID:   "repos/get-top-referrers",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetTopReferrersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetTopReferrersRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetTopReferrersOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetTopReferrersOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetUsersWithAccessToProtectedBranch: ogenreflect.RuntimeOperation{
			Name: "ReposGetUsersWithAccessToProtectedBranch",
			ID:   "repos/get-users-with-access-to-protected-branch",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetUsersWithAccessToProtectedBranchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetUsersWithAccessToProtectedBranchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetViews: ogenreflect.RuntimeOperation{
			Name: "ReposGetViews",
			ID:   "repos/get-views",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetViewsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposGetViewsPer)).Elem(),
							Name:     "per",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetViewsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ViewTraffic)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ViewTraffic)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetWebhook: ogenreflect.RuntimeOperation{
			Name: "ReposGetWebhook",
			ID:   "repos/get-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Hook)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Hook)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetWebhookConfigForRepo: ogenreflect.RuntimeOperation{
			Name: "ReposGetWebhookConfigForRepo",
			ID:   "repos/get-webhook-config-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetWebhookConfigForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WebhookConfig)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookConfig)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposGetWebhookDelivery: ogenreflect.RuntimeOperation{
			Name: "ReposGetWebhookDelivery",
			ID:   "repos/get-webhook-delivery",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposGetWebhookDeliveryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "delivery_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "delivery_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposGetWebhookDeliveryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*HookDelivery)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(HookDelivery)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListAutolinks: ogenreflect.RuntimeOperation{
			Name: "ReposListAutolinks",
			ID:   "repos/list-autolinks",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListAutolinksParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new([]Autolink)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new([]Autolink)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListBranches: ogenreflect.RuntimeOperation{
			Name: "ReposListBranches",
			ID:   "repos/list-branches",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListBranchesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "protected",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "protected",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListBranchesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListBranchesOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListBranchesOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListBranchesForHeadCommit: ogenreflect.RuntimeOperation{
			Name: "ReposListBranchesForHeadCommit",
			ID:   "repos/list-branches-for-head-commit",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListBranchesForHeadCommitParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "commit_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "commit_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListBranchesForHeadCommitRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListBranchesForHeadCommitOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListBranchesForHeadCommitOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListCollaborators: ogenreflect.RuntimeOperation{
			Name: "ReposListCollaborators",
			ID:   "repos/list-collaborators",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListCollaboratorsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "affiliation",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListCollaboratorsAffiliation)).Elem(),
							Name:     "affiliation",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListCollaboratorsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListCollaboratorsOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCollaboratorsOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListCommentsForCommit: ogenreflect.RuntimeOperation{
			Name: "ReposListCommentsForCommit",
			ID:   "repos/list-comments-for-commit",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListCommentsForCommitParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "commit_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "commit_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListCommentsForCommitOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommentsForCommitOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListCommitCommentsForRepo: ogenreflect.RuntimeOperation{
			Name: "ReposListCommitCommentsForRepo",
			ID:   "repos/list-commit-comments-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListCommitCommentsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListCommitCommentsForRepoOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitCommentsForRepoOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListCommitStatusesForRef: ogenreflect.RuntimeOperation{
			Name: "ReposListCommitStatusesForRef",
			ID:   "repos/list-commit-statuses-for-ref",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListCommitStatusesForRefParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ref",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ref",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListCommitStatusesForRefRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListCommitStatusesForRefOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitStatusesForRefOKHeaders)).Elem(),
							},
						},
						"301": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListCommits: ogenreflect.RuntimeOperation{
			Name: "ReposListCommits",
			ID:   "repos/list-commits",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListCommitsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sha",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "sha",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "author",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "author",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "until",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "until",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListCommitsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListCommitsOKHeaders)).Elem(),
						reflect.TypeOf(new(*ReposListCommitsApplicationJSONBadRequest)).Elem(),
						reflect.TypeOf(new(*ReposListCommitsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ReposListCommitsApplicationJSONConflict)).Elem(),
						reflect.TypeOf(new(*ReposListCommitsApplicationJSONInternalServerError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitsOKHeaders)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitsApplicationJSONBadRequest)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitsApplicationJSONNotFound)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitsApplicationJSONConflict)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListCommitsApplicationJSONInternalServerError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListContributors: ogenreflect.RuntimeOperation{
			Name: "ReposListContributors",
			ID:   "repos/list-contributors",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListContributorsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "anon",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "anon",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListContributorsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListContributorsOKHeaders)).Elem(),
						reflect.TypeOf(new(*ReposListContributorsNoContent)).Elem(),
						reflect.TypeOf(new(*ReposListContributorsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposListContributorsApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListContributorsOKHeaders)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListContributorsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListContributorsApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListDeployKeys: ogenreflect.RuntimeOperation{
			Name: "ReposListDeployKeys",
			ID:   "repos/list-deploy-keys",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListDeployKeysParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListDeployKeysOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListDeployKeysOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListDeploymentStatuses: ogenreflect.RuntimeOperation{
			Name: "ReposListDeploymentStatuses",
			ID:   "repos/list-deployment-statuses",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListDeploymentStatusesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "deployment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "deployment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListDeploymentStatusesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListDeploymentStatusesOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListDeploymentStatusesOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListDeployments: ogenreflect.RuntimeOperation{
			Name: "ReposListDeployments",
			ID:   "repos/list-deployments",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListDeploymentsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sha",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "sha",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "ref",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "ref",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "task",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "task",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "environment",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptNilString)).Elem(),
							Name:     "environment",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListDeploymentsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListDeploymentsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ReposListForAuthenticatedUser",
			ID:   "repos/list-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "visibility",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForAuthenticatedUserVisibility)).Elem(),
							Name:     "visibility",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "affiliation",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "affiliation",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForAuthenticatedUserType)).Elem(),
							Name:     "type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForAuthenticatedUserSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForAuthenticatedUserDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "before",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptDateTime)).Elem(),
							Name:     "before",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListForAuthenticatedUserOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ReposListForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ReposListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListForAuthenticatedUserOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListForOrg: ogenreflect.RuntimeOperation{
			Name: "ReposListForOrg",
			ID:   "repos/list-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForOrgType)).Elem(),
							Name:     "type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForOrgSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForOrgDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListForOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListForOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListForUser: ogenreflect.RuntimeOperation{
			Name: "ReposListForUser",
			ID:   "repos/list-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForUserType)).Elem(),
							Name:     "type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForUserSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForUserDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListForUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListForUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListForks: ogenreflect.RuntimeOperation{
			Name: "ReposListForks",
			ID:   "repos/list-forks",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListForksParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptReposListForksSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListForksRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListForksOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListForksOKHeaders)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListInvitations: ogenreflect.RuntimeOperation{
			Name: "ReposListInvitations",
			ID:   "repos/list-invitations",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListInvitationsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListInvitationsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListInvitationsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListInvitationsForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "ReposListInvitationsForAuthenticatedUser",
			ID:   "repos/list-invitations-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListInvitationsForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListInvitationsForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListInvitationsForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListInvitationsForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListLanguages: ogenreflect.RuntimeOperation{
			Name: "ReposListLanguages",
			ID:   "repos/list-languages",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListLanguagesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(Language)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Language)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListPagesBuilds: ogenreflect.RuntimeOperation{
			Name: "ReposListPagesBuilds",
			ID:   "repos/list-pages-builds",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListPagesBuildsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListPagesBuildsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListPagesBuildsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListPublic: ogenreflect.RuntimeOperation{
			Name: "ReposListPublic",
			ID:   "repos/list-public",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListPublicParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListPublicRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListPublicOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListPublicOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListPullRequestsAssociatedWithCommit: ogenreflect.RuntimeOperation{
			Name: "ReposListPullRequestsAssociatedWithCommit",
			ID:   "repos/list-pull-requests-associated-with-commit",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListPullRequestsAssociatedWithCommitParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "commit_sha",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "commit_sha",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListPullRequestsAssociatedWithCommitOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListPullRequestsAssociatedWithCommitOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListReleaseAssets: ogenreflect.RuntimeOperation{
			Name: "ReposListReleaseAssets",
			ID:   "repos/list-release-assets",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListReleaseAssetsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "release_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "release_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListReleaseAssetsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListReleaseAssetsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListReleases: ogenreflect.RuntimeOperation{
			Name: "ReposListReleases",
			ID:   "repos/list-releases",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListReleasesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListReleasesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListReleasesOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListReleasesOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListTags: ogenreflect.RuntimeOperation{
			Name: "ReposListTags",
			ID:   "repos/list-tags",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListTagsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListTagsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListTagsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListTeams: ogenreflect.RuntimeOperation{
			Name: "ReposListTeams",
			ID:   "repos/list-teams",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListTeamsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposListTeamsOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListTeamsOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListWebhookDeliveries: ogenreflect.RuntimeOperation{
			Name: "ReposListWebhookDeliveries",
			ID:   "repos/list-webhook-deliveries",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListWebhookDeliveriesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "cursor",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "cursor",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListWebhookDeliveriesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListWebhookDeliveriesOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListWebhookDeliveriesOKApplicationJSON)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposListWebhooks: ogenreflect.RuntimeOperation{
			Name: "ReposListWebhooks",
			ID:   "repos/list-webhooks",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposListWebhooksParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposListWebhooksRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposListWebhooksOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposListWebhooksOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposMerge: ogenreflect.RuntimeOperation{
			Name: "ReposMerge",
			ID:   "repos/merge",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposMergeReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposMergeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposMergeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Commit)).Elem(),
						reflect.TypeOf(new(*ReposMergeNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ReposMergeNotFound)).Elem(),
						reflect.TypeOf(new(*ReposMergeConflict)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Commit)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposMergeUpstream: ogenreflect.RuntimeOperation{
			Name: "ReposMergeUpstream",
			ID:   "repos/merge-upstream",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposMergeUpstreamReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposMergeUpstreamParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposMergeUpstreamRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MergedUpstream)).Elem(),
						reflect.TypeOf(new(*ReposMergeUpstreamConflict)).Elem(),
						reflect.TypeOf(new(*ReposMergeUpstreamUnprocessableEntity)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MergedUpstream)).Elem(),
							},
						},
						"409": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposPingWebhook: ogenreflect.RuntimeOperation{
			Name: "ReposPingWebhook",
			ID:   "repos/ping-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposPingWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposPingWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposPingWebhookNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRedeliverWebhookDelivery: ogenreflect.RuntimeOperation{
			Name: "ReposRedeliverWebhookDelivery",
			ID:   "repos/redeliver-webhook-delivery",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRedeliverWebhookDeliveryParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "delivery_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "delivery_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposRedeliverWebhookDeliveryRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRemoveAppAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposRemoveAppAccessRestrictions",
			ID:   "repos/remove-app-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposRemoveAppAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRemoveAppAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposRemoveAppAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposRemoveAppAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposRemoveAppAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRemoveCollaborator: ogenreflect.RuntimeOperation{
			Name: "ReposRemoveCollaborator",
			ID:   "repos/remove-collaborator",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRemoveCollaboratorParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposRemoveCollaboratorNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposRemoveStatusCheckContexts: ogenreflect.RuntimeOperation{
			Name: "ReposRemoveStatusCheckContexts",
			ID:   "repos/remove-status-check-contexts",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposRemoveStatusCheckContextsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRemoveStatusCheckContextsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposRemoveStatusCheckContextsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposRemoveStatusCheckContextsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposRemoveStatusCheckContextsOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRemoveStatusCheckProtection: ogenreflect.RuntimeOperation{
			Name: "ReposRemoveStatusCheckProtection",
			ID:   "repos/remove-status-check-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRemoveStatusCheckProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReposRemoveStatusCheckProtectionNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReposRemoveTeamAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposRemoveTeamAccessRestrictions",
			ID:   "repos/remove-team-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposRemoveTeamAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRemoveTeamAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposRemoveTeamAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposRemoveTeamAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposRemoveTeamAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRemoveUserAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposRemoveUserAccessRestrictions",
			ID:   "repos/remove-user-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposRemoveUserAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRemoveUserAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposRemoveUserAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposRemoveUserAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposRemoveUserAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRenameBranch: ogenreflect.RuntimeOperation{
			Name: "ReposRenameBranch",
			ID:   "repos/rename-branch",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposRenameBranchReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRenameBranchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposRenameBranchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*BranchWithProtection)).Elem(),
						reflect.TypeOf(new(*ReposRenameBranchApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposRenameBranchApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BranchWithProtection)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposRenameBranchApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposRenameBranchApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposReplaceAllTopics: ogenreflect.RuntimeOperation{
			Name: "ReposReplaceAllTopics",
			ID:   "repos/replace-all-topics",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposReplaceAllTopicsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposReplaceAllTopicsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposReplaceAllTopicsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Topic)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Topic)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposRequestPagesBuild: ogenreflect.RuntimeOperation{
			Name: "ReposRequestPagesBuild",
			ID:   "repos/request-pages-build",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposRequestPagesBuildParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(PageBuildStatus)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PageBuildStatus)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposSetAdminBranchProtection: ogenreflect.RuntimeOperation{
			Name: "ReposSetAdminBranchProtection",
			ID:   "repos/set-admin-branch-protection",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposSetAdminBranchProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ProtectedBranchAdminEnforced)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranchAdminEnforced)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposSetAppAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposSetAppAccessRestrictions",
			ID:   "repos/set-app-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposSetAppAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposSetAppAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposSetAppAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposSetAppAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposSetAppAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposSetStatusCheckContexts: ogenreflect.RuntimeOperation{
			Name: "ReposSetStatusCheckContexts",
			ID:   "repos/set-status-check-contexts",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposSetStatusCheckContextsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposSetStatusCheckContextsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposSetStatusCheckContextsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposSetStatusCheckContextsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposSetStatusCheckContextsOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposSetTeamAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposSetTeamAccessRestrictions",
			ID:   "repos/set-team-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposSetTeamAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposSetTeamAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposSetTeamAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposSetTeamAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposSetTeamAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposSetUserAccessRestrictions: ogenreflect.RuntimeOperation{
			Name: "ReposSetUserAccessRestrictions",
			ID:   "repos/set-user-access-restrictions",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposSetUserAccessRestrictionsReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposSetUserAccessRestrictionsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposSetUserAccessRestrictionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposSetUserAccessRestrictionsOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposSetUserAccessRestrictionsOKApplicationJSON)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposTestPushWebhook: ogenreflect.RuntimeOperation{
			Name: "ReposTestPushWebhook",
			ID:   "repos/test-push-webhook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposTestPushWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposTestPushWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReposTestPushWebhookNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposTransfer: ogenreflect.RuntimeOperation{
			Name: "ReposTransfer",
			ID:   "repos/transfer",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposTransferReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposTransferParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(MinimalRepository)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MinimalRepository)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdate: ogenreflect.RuntimeOperation{
			Name: "ReposUpdate",
			ID:   "repos/update",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*FullRepository)).Elem(),
						reflect.TypeOf(new(*ReposUpdateApplicationJSONTemporaryRedirect)).Elem(),
						reflect.TypeOf(new(*ReposUpdateApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposUpdateApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(FullRepository)).Elem(),
							},
						},
						"307": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposUpdateApplicationJSONTemporaryRedirect)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposUpdateApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposUpdateApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateBranchProtection: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateBranchProtection",
			ID:   "repos/update-branch-protection",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposUpdateBranchProtectionReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateBranchProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdateBranchProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProtectedBranch)).Elem(),
						reflect.TypeOf(new(*ReposUpdateBranchProtectionApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ReposUpdateBranchProtectionApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationErrorSimple)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranch)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposUpdateBranchProtectionApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReposUpdateBranchProtectionApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationErrorSimple)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateCommitComment: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateCommitComment",
			ID:   "repos/update-commit-comment",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposUpdateCommitCommentReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateCommitCommentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdateCommitCommentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CommitComment)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CommitComment)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateInvitation: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateInvitation",
			ID:   "repos/update-invitation",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateInvitationReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateInvitationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "invitation_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "invitation_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(RepositoryInvitation)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(RepositoryInvitation)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdatePullRequestReviewProtection: ogenreflect.RuntimeOperation{
			Name: "ReposUpdatePullRequestReviewProtection",
			ID:   "repos/update-pull-request-review-protection",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdatePullRequestReviewProtectionReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdatePullRequestReviewProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdatePullRequestReviewProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ProtectedBranchPullRequestReview)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ProtectedBranchPullRequestReview)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateRelease: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateRelease",
			ID:   "repos/update-release",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateReleaseReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateReleaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "release_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "release_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdateReleaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Release)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Release)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateReleaseAsset: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateReleaseAsset",
			ID:   "repos/update-release-asset",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateReleaseAssetReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateReleaseAssetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "asset_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "asset_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReleaseAsset)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReleaseAsset)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateStatusCheckProtection: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateStatusCheckProtection",
			ID:   "repos/update-status-check-protection",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateStatusCheckProtectionReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateStatusCheckProtectionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "branch",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "branch",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdateStatusCheckProtectionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*StatusCheckPolicy)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(StatusCheckPolicy)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateWebhook: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateWebhook",
			ID:   "repos/update-webhook",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateWebhookReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateWebhookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReposUpdateWebhookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Hook)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Hook)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUpdateWebhookConfigForRepo: ogenreflect.RuntimeOperation{
			Name: "ReposUpdateWebhookConfigForRepo",
			ID:   "repos/update-webhook-config-for-repo",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptReposUpdateWebhookConfigForRepoReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUpdateWebhookConfigForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "hook_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "hook_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(WebhookConfig)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(WebhookConfig)).Elem(),
							},
						},
					},
				},
			},
		},
		ReposUploadReleaseAsset: ogenreflect.RuntimeOperation{
			Name: "ReposUploadReleaseAsset",
			ID:   "repos/upload-release-asset",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(ReposUploadReleaseAssetReqWithContentType)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReposUploadReleaseAssetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "release_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "release_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "name",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "label",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "label",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(ReleaseAsset)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ReleaseAsset)).Elem(),
							},
						},
					},
				},
			},
		},
		ScimDeleteUserFromOrg: ogenreflect.RuntimeOperation{
			Name: "ScimDeleteUserFromOrg",
			ID:   "scim/delete-user-from-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ScimDeleteUserFromOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "scim_user_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "scim_user_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ScimDeleteUserFromOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ScimDeleteUserFromOrgNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ScimDeleteUserFromOrgApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*ScimDeleteUserFromOrgApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimDeleteUserFromOrgApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ScimDeleteUserFromOrgApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchCode: ogenreflect.RuntimeOperation{
			Name: "SearchCode",
			ID:   "search/code",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchCodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchCodeSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchCodeOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchCodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchCodeOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchCodeOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchCommits: ogenreflect.RuntimeOperation{
			Name: "SearchCommits",
			ID:   "search/commits",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchCommitsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchCommitsSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchCommitsOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchCommitsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchCommitsOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchCommitsOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchIssuesAndPullRequests: ogenreflect.RuntimeOperation{
			Name: "SearchIssuesAndPullRequests",
			ID:   "search/issues-and-pull-requests",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchIssuesAndPullRequestsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchIssuesAndPullRequestsSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchIssuesAndPullRequestsOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchIssuesAndPullRequestsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchIssuesAndPullRequestsOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchIssuesAndPullRequestsOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchLabels: ogenreflect.RuntimeOperation{
			Name: "SearchLabels",
			ID:   "search/labels",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchLabelsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "repository_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "repository_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchLabelsSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchLabelsOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchLabelsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchLabelsOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*SearchLabelsApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*SearchLabelsApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchLabelsOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchLabelsApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchLabelsApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchRepos: ogenreflect.RuntimeOperation{
			Name: "SearchRepos",
			ID:   "search/repos",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchReposParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchReposSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchReposOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchReposRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchReposOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchReposOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchTopics: ogenreflect.RuntimeOperation{
			Name: "SearchTopics",
			ID:   "search/topics",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchTopicsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchTopicsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchTopicsOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchTopicsOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		SearchUsers: ogenreflect.RuntimeOperation{
			Name: "SearchUsers",
			ID:   "search/users",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchUsersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "q",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "q",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "sort",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchUsersSort)).Elem(),
							Name:     "sort",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "order",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSearchUsersOrder)).Elem(),
							Name:     "order",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchUsersRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchUsersOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchUsersOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SecretScanningGetAlert: ogenreflect.RuntimeOperation{
			Name: "SecretScanningGetAlert",
			ID:   "secret-scanning/get-alert",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SecretScanningGetAlertParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "alert_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(AlertNumber)).Elem(),
							Name:     "alert_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SecretScanningGetAlertRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SecretScanningAlert)).Elem(),
						reflect.TypeOf(new(*SecretScanningGetAlertNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SecretScanningAlert)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SecretScanningListAlertsForOrg: ogenreflect.RuntimeOperation{
			Name: "SecretScanningListAlertsForOrg",
			ID:   "secret-scanning/list-alerts-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SecretScanningListAlertsForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSecretScanningListAlertsForOrgState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "secret_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "secret_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SecretScanningListAlertsForOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SecretScanningListAlertsForOrgOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SecretScanningListAlertsForOrgOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SecretScanningListAlertsForRepo: ogenreflect.RuntimeOperation{
			Name: "SecretScanningListAlertsForRepo",
			ID:   "secret-scanning/list-alerts-for-repo",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SecretScanningListAlertsForRepoParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "state",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptSecretScanningListAlertsForRepoState)).Elem(),
							Name:     "state",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "secret_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "secret_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SecretScanningListAlertsForRepoRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SecretScanningListAlertsForRepoOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*SecretScanningListAlertsForRepoNotFound)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SecretScanningListAlertsForRepoOKApplicationJSON)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		SecretScanningUpdateAlert: ogenreflect.RuntimeOperation{
			Name: "SecretScanningUpdateAlert",
			ID:   "secret-scanning/update-alert",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SecretScanningUpdateAlertReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SecretScanningUpdateAlertParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "alert_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(AlertNumber)).Elem(),
							Name:     "alert_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SecretScanningUpdateAlertRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SecretScanningAlert)).Elem(),
						reflect.TypeOf(new(*SecretScanningUpdateAlertNotFound)).Elem(),
						reflect.TypeOf(new(*SecretScanningUpdateAlertUnprocessableEntity)).Elem(),
						reflect.TypeOf(new(*ServiceUnavailable)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SecretScanningAlert)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"503": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ServiceUnavailable)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsAddMemberLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsAddMemberLegacy",
			ID:   "teams/add-member-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddMemberLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsAddMemberLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsAddMemberLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*TeamsAddMemberLegacyNotFound)).Elem(),
						reflect.TypeOf(new(*TeamsAddMemberLegacyUnprocessableEntity)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsAddOrUpdateMembershipForUserInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsAddOrUpdateMembershipForUserInOrg",
			ID:   "teams/add-or-update-membership-for-user-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsAddOrUpdateMembershipForUserInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddOrUpdateMembershipForUserInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsAddOrUpdateMembershipForUserInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamMembership)).Elem(),
						reflect.TypeOf(new(*TeamsAddOrUpdateMembershipForUserInOrgForbidden)).Elem(),
						reflect.TypeOf(new(*TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamMembership)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"422": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsAddOrUpdateMembershipForUserLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsAddOrUpdateMembershipForUserLegacy",
			ID:   "teams/add-or-update-membership-for-user-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsAddOrUpdateMembershipForUserLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddOrUpdateMembershipForUserLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsAddOrUpdateMembershipForUserLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamMembership)).Elem(),
						reflect.TypeOf(new(*TeamsAddOrUpdateMembershipForUserLegacyForbidden)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamMembership)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsAddOrUpdateProjectPermissionsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsAddOrUpdateProjectPermissionsInOrg",
			ID:   "teams/add-or-update-project-permissions-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddOrUpdateProjectPermissionsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsAddOrUpdateProjectPermissionsInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsAddOrUpdateProjectPermissionsInOrgNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsAddOrUpdateProjectPermissionsInOrgForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsAddOrUpdateProjectPermissionsInOrgForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsAddOrUpdateProjectPermissionsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsAddOrUpdateProjectPermissionsLegacy",
			ID:   "teams/add-or-update-project-permissions-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsAddOrUpdateProjectPermissionsLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddOrUpdateProjectPermissionsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsAddOrUpdateProjectPermissionsLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsAddOrUpdateProjectPermissionsLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsAddOrUpdateProjectPermissionsLegacyForbidden)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsAddOrUpdateProjectPermissionsLegacyForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsAddOrUpdateRepoPermissionsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsAddOrUpdateRepoPermissionsInOrg",
			ID:   "teams/add-or-update-repo-permissions-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsAddOrUpdateRepoPermissionsInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddOrUpdateRepoPermissionsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsAddOrUpdateRepoPermissionsInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsAddOrUpdateRepoPermissionsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsAddOrUpdateRepoPermissionsLegacy",
			ID:   "teams/add-or-update-repo-permissions-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsAddOrUpdateRepoPermissionsLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsAddOrUpdateRepoPermissionsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsAddOrUpdateRepoPermissionsLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsAddOrUpdateRepoPermissionsLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCheckPermissionsForProjectInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsCheckPermissionsForProjectInOrg",
			ID:   "teams/check-permissions-for-project-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCheckPermissionsForProjectInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsCheckPermissionsForProjectInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamProject)).Elem(),
						reflect.TypeOf(new(*TeamsCheckPermissionsForProjectInOrgNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamProject)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsCheckPermissionsForProjectLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsCheckPermissionsForProjectLegacy",
			ID:   "teams/check-permissions-for-project-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCheckPermissionsForProjectLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsCheckPermissionsForProjectLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamProject)).Elem(),
						reflect.TypeOf(new(*TeamsCheckPermissionsForProjectLegacyNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamProject)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsCheckPermissionsForRepoInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsCheckPermissionsForRepoInOrg",
			ID:   "teams/check-permissions-for-repo-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCheckPermissionsForRepoInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsCheckPermissionsForRepoInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamRepository)).Elem(),
						reflect.TypeOf(new(*TeamsCheckPermissionsForRepoInOrgNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsCheckPermissionsForRepoInOrgNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamRepository)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsCheckPermissionsForRepoLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsCheckPermissionsForRepoLegacy",
			ID:   "teams/check-permissions-for-repo-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCheckPermissionsForRepoLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsCheckPermissionsForRepoLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamRepository)).Elem(),
						reflect.TypeOf(new(*TeamsCheckPermissionsForRepoLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsCheckPermissionsForRepoLegacyNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamRepository)).Elem(),
							},
						},
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsCreate: ogenreflect.RuntimeOperation{
			Name: "TeamsCreate",
			ID:   "teams/create",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsCreateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamFull)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamFull)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCreateDiscussionCommentInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsCreateDiscussionCommentInOrg",
			ID:   "teams/create-discussion-comment-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateDiscussionCommentInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateDiscussionCommentInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCreateDiscussionCommentLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsCreateDiscussionCommentLegacy",
			ID:   "teams/create-discussion-comment-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateDiscussionCommentLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateDiscussionCommentLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCreateDiscussionInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsCreateDiscussionInOrg",
			ID:   "teams/create-discussion-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateDiscussionInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateDiscussionInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussion)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCreateDiscussionLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsCreateDiscussionLegacy",
			ID:   "teams/create-discussion-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateDiscussionLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateDiscussionLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussion)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCreateOrUpdateIdpGroupConnectionsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsCreateOrUpdateIdpGroupConnectionsInOrg",
			ID:   "teams/create-or-update-idp-group-connections-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateOrUpdateIdpGroupConnectionsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(GroupMapping)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GroupMapping)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsCreateOrUpdateIdpGroupConnectionsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsCreateOrUpdateIdpGroupConnectionsLegacy",
			ID:   "teams/create-or-update-idp-group-connections-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsCreateOrUpdateIdpGroupConnectionsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsCreateOrUpdateIdpGroupConnectionsLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GroupMapping)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GroupMapping)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsDeleteDiscussionCommentInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsDeleteDiscussionCommentInOrg",
			ID:   "teams/delete-discussion-comment-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsDeleteDiscussionCommentInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsDeleteDiscussionCommentInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsDeleteDiscussionCommentLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsDeleteDiscussionCommentLegacy",
			ID:   "teams/delete-discussion-comment-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsDeleteDiscussionCommentLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsDeleteDiscussionCommentLegacyNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsDeleteDiscussionInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsDeleteDiscussionInOrg",
			ID:   "teams/delete-discussion-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsDeleteDiscussionInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsDeleteDiscussionInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsDeleteDiscussionLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsDeleteDiscussionLegacy",
			ID:   "teams/delete-discussion-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsDeleteDiscussionLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsDeleteDiscussionLegacyNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsDeleteInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsDeleteInOrg",
			ID:   "teams/delete-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsDeleteInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsDeleteInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsDeleteLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsDeleteLegacy",
			ID:   "teams/delete-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsDeleteLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsDeleteLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsDeleteLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetByName: ogenreflect.RuntimeOperation{
			Name: "TeamsGetByName",
			ID:   "teams/get-by-name",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetByNameParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsGetByNameRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamFull)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamFull)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetDiscussionCommentInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsGetDiscussionCommentInOrg",
			ID:   "teams/get-discussion-comment-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetDiscussionCommentInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetDiscussionCommentLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsGetDiscussionCommentLegacy",
			ID:   "teams/get-discussion-comment-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetDiscussionCommentLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetDiscussionInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsGetDiscussionInOrg",
			ID:   "teams/get-discussion-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetDiscussionInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussion)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetDiscussionLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsGetDiscussionLegacy",
			ID:   "teams/get-discussion-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetDiscussionLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussion)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsGetLegacy",
			ID:   "teams/get-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsGetLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamFull)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamFull)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsGetMemberLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsGetMemberLegacy",
			ID:   "teams/get-member-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetMemberLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsGetMemberLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsGetMemberLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsGetMemberLegacyNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsGetMembershipForUserInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsGetMembershipForUserInOrg",
			ID:   "teams/get-membership-for-user-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetMembershipForUserInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsGetMembershipForUserInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamMembership)).Elem(),
						reflect.TypeOf(new(*TeamsGetMembershipForUserInOrgNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamMembership)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsGetMembershipForUserLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsGetMembershipForUserLegacy",
			ID:   "teams/get-membership-for-user-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsGetMembershipForUserLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsGetMembershipForUserLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamMembership)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamMembership)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsList: ogenreflect.RuntimeOperation{
			Name: "TeamsList",
			ID:   "teams/list",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsListOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListOKHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListChildInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListChildInOrg",
			ID:   "teams/list-child-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListChildInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListChildInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListChildInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListChildLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListChildLegacy",
			ID:   "teams/list-child-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListChildLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListChildLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsListChildLegacyOKHeaders)).Elem(),
						reflect.TypeOf(new(*TeamsListChildLegacyApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*TeamsListChildLegacyApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListChildLegacyOKHeaders)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListChildLegacyApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListChildLegacyApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListDiscussionCommentsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListDiscussionCommentsInOrg",
			ID:   "teams/list-discussion-comments-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListDiscussionCommentsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptTeamsListDiscussionCommentsInOrgDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListDiscussionCommentsInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListDiscussionCommentsInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListDiscussionCommentsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListDiscussionCommentsLegacy",
			ID:   "teams/list-discussion-comments-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListDiscussionCommentsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptTeamsListDiscussionCommentsLegacyDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListDiscussionCommentsLegacyOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListDiscussionCommentsLegacyOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListDiscussionsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListDiscussionsInOrg",
			ID:   "teams/list-discussions-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListDiscussionsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptTeamsListDiscussionsInOrgDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pinned",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pinned",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListDiscussionsInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListDiscussionsInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListDiscussionsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListDiscussionsLegacy",
			ID:   "teams/list-discussions-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListDiscussionsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "direction",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptTeamsListDiscussionsLegacyDirection)).Elem(),
							Name:     "direction",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListDiscussionsLegacyOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListDiscussionsLegacyOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "TeamsListForAuthenticatedUser",
			ID:   "teams/list-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsListForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*TeamsListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*TeamsListForAuthenticatedUserApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListForAuthenticatedUserApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListIdpGroupsForLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListIdpGroupsForLegacy",
			ID:   "teams/list-idp-groups-for-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListIdpGroupsForLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListIdpGroupsForLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GroupMapping)).Elem(),
						reflect.TypeOf(new(*TeamsListIdpGroupsForLegacyApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*TeamsListIdpGroupsForLegacyApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GroupMapping)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListIdpGroupsForLegacyApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListIdpGroupsForLegacyApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListIdpGroupsForOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListIdpGroupsForOrg",
			ID:   "teams/list-idp-groups-for-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListIdpGroupsForOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(GroupMappingHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GroupMappingHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListIdpGroupsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListIdpGroupsInOrg",
			ID:   "teams/list-idp-groups-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListIdpGroupsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(GroupMapping)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GroupMapping)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListMembersInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListMembersInOrg",
			ID:   "teams/list-members-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListMembersInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "role",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptTeamsListMembersInOrgRole)).Elem(),
							Name:     "role",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListMembersInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListMembersInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListMembersLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListMembersLegacy",
			ID:   "teams/list-members-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListMembersLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "role",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptTeamsListMembersLegacyRole)).Elem(),
							Name:     "role",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListMembersLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsListMembersLegacyOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListMembersLegacyOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListPendingInvitationsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListPendingInvitationsInOrg",
			ID:   "teams/list-pending-invitations-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListPendingInvitationsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListPendingInvitationsInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListPendingInvitationsInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListPendingInvitationsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListPendingInvitationsLegacy",
			ID:   "teams/list-pending-invitations-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListPendingInvitationsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListPendingInvitationsLegacyOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListPendingInvitationsLegacyOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListProjectsInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListProjectsInOrg",
			ID:   "teams/list-projects-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListProjectsInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListProjectsInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListProjectsInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListProjectsLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListProjectsLegacy",
			ID:   "teams/list-projects-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListProjectsLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListProjectsLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsListProjectsLegacyOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListProjectsLegacyOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListReposInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsListReposInOrg",
			ID:   "teams/list-repos-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListReposInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsListReposInOrgOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListReposInOrgOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsListReposLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsListReposLegacy",
			ID:   "teams/list-repos-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsListReposLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsListReposLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsListReposLegacyOKHeaders)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsListReposLegacyOKHeaders)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsRemoveMemberLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveMemberLegacy",
			ID:   "teams/remove-member-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveMemberLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsRemoveMemberLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsRemoveMemberLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsRemoveMemberLegacyNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsRemoveMembershipForUserInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveMembershipForUserInOrg",
			ID:   "teams/remove-membership-for-user-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveMembershipForUserInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsRemoveMembershipForUserInOrgRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsRemoveMembershipForUserInOrgNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsRemoveMembershipForUserInOrgForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsRemoveMembershipForUserLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveMembershipForUserLegacy",
			ID:   "teams/remove-membership-for-user-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveMembershipForUserLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsRemoveMembershipForUserLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsRemoveMembershipForUserLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*TeamsRemoveMembershipForUserLegacyForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsRemoveProjectInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveProjectInOrg",
			ID:   "teams/remove-project-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveProjectInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsRemoveProjectInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsRemoveProjectLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveProjectLegacy",
			ID:   "teams/remove-project-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveProjectLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "project_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "project_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsRemoveProjectLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsRemoveProjectLegacyNoContent)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsRemoveRepoInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveRepoInOrg",
			ID:   "teams/remove-repo-in-org",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveRepoInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsRemoveRepoInOrgNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsRemoveRepoLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsRemoveRepoLegacy",
			ID:   "teams/remove-repo-legacy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsRemoveRepoLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "owner",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "owner",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "repo",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "repo",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamsRemoveRepoLegacyNoContent)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		TeamsUpdateDiscussionCommentInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsUpdateDiscussionCommentInOrg",
			ID:   "teams/update-discussion-comment-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsUpdateDiscussionCommentInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsUpdateDiscussionCommentInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsUpdateDiscussionCommentLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsUpdateDiscussionCommentLegacy",
			ID:   "teams/update-discussion-comment-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsUpdateDiscussionCommentLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsUpdateDiscussionCommentLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "comment_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "comment_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussionComment)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsUpdateDiscussionInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsUpdateDiscussionInOrg",
			ID:   "teams/update-discussion-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsUpdateDiscussionInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsUpdateDiscussionInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussion)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsUpdateDiscussionLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsUpdateDiscussionLegacy",
			ID:   "teams/update-discussion-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsUpdateDiscussionLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsUpdateDiscussionLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "discussion_number",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "discussion_number",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamDiscussion)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamDiscussion)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsUpdateInOrg: ogenreflect.RuntimeOperation{
			Name: "TeamsUpdateInOrg",
			ID:   "teams/update-in-org",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptTeamsUpdateInOrgReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsUpdateInOrgParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "org",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "org",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "team_slug",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "team_slug",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(TeamFull)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamFull)).Elem(),
							},
						},
					},
				},
			},
		},
		TeamsUpdateLegacy: ogenreflect.RuntimeOperation{
			Name: "TeamsUpdateLegacy",
			ID:   "teams/update-legacy",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(TeamsUpdateLegacyReq)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(TeamsUpdateLegacyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "team_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "team_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(TeamsUpdateLegacyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*TeamsUpdateLegacyApplicationJSONOK)).Elem(),
						reflect.TypeOf(new(*TeamsUpdateLegacyApplicationJSONCreated)).Elem(),
						reflect.TypeOf(new(*TeamsUpdateLegacyApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*TeamsUpdateLegacyApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsUpdateLegacyApplicationJSONOK)).Elem(),
							},
						},
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsUpdateLegacyApplicationJSONCreated)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsUpdateLegacyApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(TeamsUpdateLegacyApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersAddEmailForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersAddEmailForAuthenticated",
			ID:   "users/add-email-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptUsersAddEmailForAuthenticatedReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersAddEmailForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersAddEmailForAuthenticatedCreatedApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersAddEmailForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersAddEmailForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersAddEmailForAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersAddEmailForAuthenticatedCreatedApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersAddEmailForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersAddEmailForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersAddEmailForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersBlock: ogenreflect.RuntimeOperation{
			Name: "UsersBlock",
			ID:   "users/block",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersBlockParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersBlockRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersBlockNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersBlockApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersBlockApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersBlockApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersBlockApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersBlockApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersBlockApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersCheckBlocked: ogenreflect.RuntimeOperation{
			Name: "UsersCheckBlocked",
			ID:   "users/check-blocked",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersCheckBlockedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersCheckBlockedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersCheckBlockedNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersCheckBlockedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersCheckBlockedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersCheckBlockedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCheckBlockedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCheckBlockedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCheckBlockedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersCheckFollowingForUser: ogenreflect.RuntimeOperation{
			Name: "UsersCheckFollowingForUser",
			ID:   "users/check-following-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersCheckFollowingForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "target_user",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "target_user",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersCheckFollowingForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersCheckFollowingForUserNoContent)).Elem(),
						reflect.TypeOf(new(*UsersCheckFollowingForUserNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"404": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		UsersCheckPersonIsFollowedByAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersCheckPersonIsFollowedByAuthenticated",
			ID:   "users/check-person-is-followed-by-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersCheckPersonIsFollowedByAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersCheckPersonIsFollowedByAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersCheckPersonIsFollowedByAuthenticatedNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersCreateGpgKeyForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersCreateGpgKeyForAuthenticated",
			ID:   "users/create-gpg-key-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UsersCreateGpgKeyForAuthenticatedReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersCreateGpgKeyForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GpgKey)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersCreateGpgKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersCreateGpgKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersCreateGpgKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GpgKey)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCreateGpgKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCreateGpgKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCreateGpgKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersCreatePublicSSHKeyForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersCreatePublicSSHKeyForAuthenticated",
			ID:   "users/create-public-ssh-key-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UsersCreatePublicSSHKeyForAuthenticatedReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersCreatePublicSSHKeyForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Key)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Key)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersDeleteEmailForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersDeleteEmailForAuthenticated",
			ID:   "users/delete-email-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptUsersDeleteEmailForAuthenticatedReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersDeleteEmailForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersDeleteEmailForAuthenticatedNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersDeleteEmailForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersDeleteEmailForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersDeleteEmailForAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeleteEmailForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeleteEmailForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeleteEmailForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersDeleteGpgKeyForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersDeleteGpgKeyForAuthenticated",
			ID:   "users/delete-gpg-key-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersDeleteGpgKeyForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gpg_key_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "gpg_key_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersDeleteGpgKeyForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersDeleteGpgKeyForAuthenticatedNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersDeleteGpgKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersDeleteGpgKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersDeleteGpgKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeleteGpgKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeleteGpgKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeleteGpgKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersDeletePublicSSHKeyForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersDeletePublicSSHKeyForAuthenticated",
			ID:   "users/delete-public-ssh-key-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersDeletePublicSSHKeyForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "key_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "key_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersDeletePublicSSHKeyForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersDeletePublicSSHKeyForAuthenticatedNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersFollow: ogenreflect.RuntimeOperation{
			Name: "UsersFollow",
			ID:   "users/follow",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersFollowParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersFollowRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersFollowNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersFollowApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersFollowApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersFollowApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersFollowApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersFollowApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersFollowApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersGetAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersGetAuthenticated",
			ID:   "users/get-authenticated",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersGetAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersGetAuthenticatedOK)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersGetAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersGetAuthenticatedApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetAuthenticatedOK)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersGetByUsername: ogenreflect.RuntimeOperation{
			Name: "UsersGetByUsername",
			ID:   "users/get-by-username",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersGetByUsernameParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersGetByUsernameRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersGetByUsernameOK)).Elem(),
						reflect.TypeOf(new(*Accepted)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetByUsernameOK)).Elem(),
							},
						},
						"202": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Accepted)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersGetContextForUser: ogenreflect.RuntimeOperation{
			Name: "UsersGetContextForUser",
			ID:   "users/get-context-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersGetContextForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "subject_type",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptUsersGetContextForUserSubjectType)).Elem(),
							Name:     "subject_type",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "subject_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "subject_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersGetContextForUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Hovercard)).Elem(),
						reflect.TypeOf(new(*BasicError)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Hovercard)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BasicError)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersGetGpgKeyForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersGetGpgKeyForAuthenticated",
			ID:   "users/get-gpg-key-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersGetGpgKeyForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "gpg_key_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "gpg_key_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersGetGpgKeyForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GpgKey)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GpgKey)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersGetPublicSSHKeyForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersGetPublicSSHKeyForAuthenticated",
			ID:   "users/get-public-ssh-key-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersGetPublicSSHKeyForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "key_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "key_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersGetPublicSSHKeyForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Key)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Key)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersList: ogenreflect.RuntimeOperation{
			Name: "UsersList",
			ID:   "users/list",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "since",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "since",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		UsersListBlockedByAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersListBlockedByAuthenticated",
			ID:   "users/list-blocked-by-authenticated",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListBlockedByAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListBlockedByAuthenticatedOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListBlockedByAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListBlockedByAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersListBlockedByAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*PreviewHeaderMissing)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListBlockedByAuthenticatedOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListBlockedByAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListBlockedByAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListBlockedByAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"415": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PreviewHeaderMissing)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListEmailsForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersListEmailsForAuthenticated",
			ID:   "users/list-emails-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListEmailsForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListEmailsForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListEmailsForAuthenticatedOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListEmailsForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListEmailsForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersListEmailsForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListEmailsForAuthenticatedOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListEmailsForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListEmailsForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListEmailsForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListFollowedByAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersListFollowedByAuthenticated",
			ID:   "users/list-followed-by-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListFollowedByAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListFollowedByAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListFollowedByAuthenticatedOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListFollowedByAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListFollowedByAuthenticatedApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowedByAuthenticatedOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowedByAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowedByAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListFollowersForAuthenticatedUser: ogenreflect.RuntimeOperation{
			Name: "UsersListFollowersForAuthenticatedUser",
			ID:   "users/list-followers-for-authenticated-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListFollowersForAuthenticatedUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListFollowersForAuthenticatedUserRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListFollowersForAuthenticatedUserOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListFollowersForAuthenticatedUserApplicationJSONForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowersForAuthenticatedUserOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowersForAuthenticatedUserApplicationJSONForbidden)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListFollowersForUser: ogenreflect.RuntimeOperation{
			Name: "UsersListFollowersForUser",
			ID:   "users/list-followers-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListFollowersForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(UsersListFollowersForUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowersForUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListFollowingForUser: ogenreflect.RuntimeOperation{
			Name: "UsersListFollowingForUser",
			ID:   "users/list-following-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListFollowingForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(UsersListFollowingForUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListFollowingForUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListGpgKeysForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersListGpgKeysForAuthenticated",
			ID:   "users/list-gpg-keys-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListGpgKeysForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListGpgKeysForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListGpgKeysForAuthenticatedOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListGpgKeysForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersListGpgKeysForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListGpgKeysForAuthenticatedOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListGpgKeysForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListGpgKeysForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListGpgKeysForUser: ogenreflect.RuntimeOperation{
			Name: "UsersListGpgKeysForUser",
			ID:   "users/list-gpg-keys-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListGpgKeysForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(UsersListGpgKeysForUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListGpgKeysForUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListPublicEmailsForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersListPublicEmailsForAuthenticated",
			ID:   "users/list-public-emails-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListPublicEmailsForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListPublicEmailsForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListPublicEmailsForAuthenticatedOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicEmailsForAuthenticatedOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListPublicKeysForUser: ogenreflect.RuntimeOperation{
			Name: "UsersListPublicKeysForUser",
			ID:   "users/list-public-keys-for-user",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListPublicKeysForUserParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(UsersListPublicKeysForUserOKHeaders)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicKeysForUserOKHeaders)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersListPublicSSHKeysForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersListPublicSSHKeysForAuthenticated",
			ID:   "users/list-public-ssh-keys-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersListPublicSSHKeysForAuthenticatedParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "per_page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "per_page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersListPublicSSHKeysForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersListPublicSSHKeysForAuthenticatedOKHeaders)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"Link": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "Link",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicSSHKeysForAuthenticatedOKHeaders)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersSetPrimaryEmailVisibilityForAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersSetPrimaryEmailVisibilityForAuthenticated",
			ID:   "users/set-primary-email-visibility-for-authenticated",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(UsersSetPrimaryEmailVisibilityForAuthenticatedReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersSetPrimaryEmailVisibilityForAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersUnblock: ogenreflect.RuntimeOperation{
			Name: "UsersUnblock",
			ID:   "users/unblock",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersUnblockParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersUnblockRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersUnblockNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersUnblockApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersUnblockApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersUnblockApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUnblockApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUnblockApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUnblockApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersUnfollow: ogenreflect.RuntimeOperation{
			Name: "UsersUnfollow",
			ID:   "users/unfollow",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(UsersUnfollowParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "username",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "username",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersUnfollowRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UsersUnfollowNoContent)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersUnfollowApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersUnfollowApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersUnfollowApplicationJSONNotFound)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUnfollowApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUnfollowApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUnfollowApplicationJSONNotFound)).Elem(),
							},
						},
					},
				},
			},
		},
		UsersUpdateAuthenticated: ogenreflect.RuntimeOperation{
			Name: "UsersUpdateAuthenticated",
			ID:   "users/update-authenticated",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptUsersUpdateAuthenticatedReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UsersUpdateAuthenticatedRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PrivateUser)).Elem(),
						reflect.TypeOf(new(*NotModified)).Elem(),
						reflect.TypeOf(new(*UsersUpdateAuthenticatedApplicationJSONUnauthorized)).Elem(),
						reflect.TypeOf(new(*UsersUpdateAuthenticatedApplicationJSONForbidden)).Elem(),
						reflect.TypeOf(new(*UsersUpdateAuthenticatedApplicationJSONNotFound)).Elem(),
						reflect.TypeOf(new(*ValidationError)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PrivateUser)).Elem(),
							},
						},
						"304": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"401": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUpdateAuthenticatedApplicationJSONUnauthorized)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUpdateAuthenticatedApplicationJSONForbidden)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UsersUpdateAuthenticatedApplicationJSONNotFound)).Elem(),
							},
						},
						"422": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ValidationError)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg                       ogenreflect.RuntimeOperation
	ActionsAddSelectedRepoToOrgSecret                                      ogenreflect.RuntimeOperation
	ActionsAddSelfHostedRunnerToGroupForOrg                                ogenreflect.RuntimeOperation
	ActionsApproveWorkflowRun                                              ogenreflect.RuntimeOperation
	ActionsCancelWorkflowRun                                               ogenreflect.RuntimeOperation
	ActionsCreateOrUpdateEnvironmentSecret                                 ogenreflect.RuntimeOperation
	ActionsCreateOrUpdateOrgSecret                                         ogenreflect.RuntimeOperation
	ActionsCreateOrUpdateRepoSecret                                        ogenreflect.RuntimeOperation
	ActionsCreateRegistrationTokenForOrg                                   ogenreflect.RuntimeOperation
	ActionsCreateRegistrationTokenForRepo                                  ogenreflect.RuntimeOperation
	ActionsCreateRemoveTokenForOrg                                         ogenreflect.RuntimeOperation
	ActionsCreateRemoveTokenForRepo                                        ogenreflect.RuntimeOperation
	ActionsCreateSelfHostedRunnerGroupForOrg                               ogenreflect.RuntimeOperation
	ActionsDeleteArtifact                                                  ogenreflect.RuntimeOperation
	ActionsDeleteEnvironmentSecret                                         ogenreflect.RuntimeOperation
	ActionsDeleteOrgSecret                                                 ogenreflect.RuntimeOperation
	ActionsDeleteRepoSecret                                                ogenreflect.RuntimeOperation
	ActionsDeleteSelfHostedRunnerFromOrg                                   ogenreflect.RuntimeOperation
	ActionsDeleteSelfHostedRunnerFromRepo                                  ogenreflect.RuntimeOperation
	ActionsDeleteSelfHostedRunnerGroupFromOrg                              ogenreflect.RuntimeOperation
	ActionsDeleteWorkflowRun                                               ogenreflect.RuntimeOperation
	ActionsDeleteWorkflowRunLogs                                           ogenreflect.RuntimeOperation
	ActionsDisableSelectedRepositoryGithubActionsOrganization              ogenreflect.RuntimeOperation
	ActionsDownloadArtifact                                                ogenreflect.RuntimeOperation
	ActionsDownloadJobLogsForWorkflowRun                                   ogenreflect.RuntimeOperation
	ActionsDownloadWorkflowRunLogs                                         ogenreflect.RuntimeOperation
	ActionsEnableSelectedRepositoryGithubActionsOrganization               ogenreflect.RuntimeOperation
	ActionsGetAllowedActionsOrganization                                   ogenreflect.RuntimeOperation
	ActionsGetAllowedActionsRepository                                     ogenreflect.RuntimeOperation
	ActionsGetArtifact                                                     ogenreflect.RuntimeOperation
	ActionsGetEnvironmentPublicKey                                         ogenreflect.RuntimeOperation
	ActionsGetEnvironmentSecret                                            ogenreflect.RuntimeOperation
	ActionsGetGithubActionsPermissionsOrganization                         ogenreflect.RuntimeOperation
	ActionsGetGithubActionsPermissionsRepository                           ogenreflect.RuntimeOperation
	ActionsGetJobForWorkflowRun                                            ogenreflect.RuntimeOperation
	ActionsGetOrgPublicKey                                                 ogenreflect.RuntimeOperation
	ActionsGetOrgSecret                                                    ogenreflect.RuntimeOperation
	ActionsGetRepoPublicKey                                                ogenreflect.RuntimeOperation
	ActionsGetRepoSecret                                                   ogenreflect.RuntimeOperation
	ActionsGetReviewsForRun                                                ogenreflect.RuntimeOperation
	ActionsGetSelfHostedRunnerForOrg                                       ogenreflect.RuntimeOperation
	ActionsGetSelfHostedRunnerForRepo                                      ogenreflect.RuntimeOperation
	ActionsGetSelfHostedRunnerGroupForOrg                                  ogenreflect.RuntimeOperation
	ActionsGetWorkflowRun                                                  ogenreflect.RuntimeOperation
	ActionsGetWorkflowRunUsage                                             ogenreflect.RuntimeOperation
	ActionsListArtifactsForRepo                                            ogenreflect.RuntimeOperation
	ActionsListEnvironmentSecrets                                          ogenreflect.RuntimeOperation
	ActionsListJobsForWorkflowRun                                          ogenreflect.RuntimeOperation
	ActionsListOrgSecrets                                                  ogenreflect.RuntimeOperation
	ActionsListRepoAccessToSelfHostedRunnerGroupInOrg                      ogenreflect.RuntimeOperation
	ActionsListRepoSecrets                                                 ogenreflect.RuntimeOperation
	ActionsListRepoWorkflows                                               ogenreflect.RuntimeOperation
	ActionsListRunnerApplicationsForOrg                                    ogenreflect.RuntimeOperation
	ActionsListRunnerApplicationsForRepo                                   ogenreflect.RuntimeOperation
	ActionsListSelectedReposForOrgSecret                                   ogenreflect.RuntimeOperation
	ActionsListSelectedRepositoriesEnabledGithubActionsOrganization        ogenreflect.RuntimeOperation
	ActionsListSelfHostedRunnerGroupsForOrg                                ogenreflect.RuntimeOperation
	ActionsListSelfHostedRunnersForOrg                                     ogenreflect.RuntimeOperation
	ActionsListSelfHostedRunnersForRepo                                    ogenreflect.RuntimeOperation
	ActionsListSelfHostedRunnersInGroupForOrg                              ogenreflect.RuntimeOperation
	ActionsListWorkflowRunArtifacts                                        ogenreflect.RuntimeOperation
	ActionsListWorkflowRunsForRepo                                         ogenreflect.RuntimeOperation
	ActionsReRunWorkflow                                                   ogenreflect.RuntimeOperation
	ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg                    ogenreflect.RuntimeOperation
	ActionsRemoveSelectedRepoFromOrgSecret                                 ogenreflect.RuntimeOperation
	ActionsRemoveSelfHostedRunnerFromGroupForOrg                           ogenreflect.RuntimeOperation
	ActionsRetryWorkflow                                                   ogenreflect.RuntimeOperation
	ActionsReviewPendingDeploymentsForRun                                  ogenreflect.RuntimeOperation
	ActionsSetAllowedActionsOrganization                                   ogenreflect.RuntimeOperation
	ActionsSetAllowedActionsRepository                                     ogenreflect.RuntimeOperation
	ActionsSetGithubActionsPermissionsOrganization                         ogenreflect.RuntimeOperation
	ActionsSetGithubActionsPermissionsRepository                           ogenreflect.RuntimeOperation
	ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg                       ogenreflect.RuntimeOperation
	ActionsSetSelectedReposForOrgSecret                                    ogenreflect.RuntimeOperation
	ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization         ogenreflect.RuntimeOperation
	ActionsSetSelfHostedRunnersInGroupForOrg                               ogenreflect.RuntimeOperation
	ActionsUpdateSelfHostedRunnerGroupForOrg                               ogenreflect.RuntimeOperation
	ActivityCheckRepoIsStarredByAuthenticatedUser                          ogenreflect.RuntimeOperation
	ActivityDeleteRepoSubscription                                         ogenreflect.RuntimeOperation
	ActivityDeleteThreadSubscription                                       ogenreflect.RuntimeOperation
	ActivityGetFeeds                                                       ogenreflect.RuntimeOperation
	ActivityGetRepoSubscription                                            ogenreflect.RuntimeOperation
	ActivityGetThread                                                      ogenreflect.RuntimeOperation
	ActivityGetThreadSubscriptionForAuthenticatedUser                      ogenreflect.RuntimeOperation
	ActivityListEventsForAuthenticatedUser                                 ogenreflect.RuntimeOperation
	ActivityListNotificationsForAuthenticatedUser                          ogenreflect.RuntimeOperation
	ActivityListOrgEventsForAuthenticatedUser                              ogenreflect.RuntimeOperation
	ActivityListPublicEvents                                               ogenreflect.RuntimeOperation
	ActivityListPublicEventsForRepoNetwork                                 ogenreflect.RuntimeOperation
	ActivityListPublicEventsForUser                                        ogenreflect.RuntimeOperation
	ActivityListPublicOrgEvents                                            ogenreflect.RuntimeOperation
	ActivityListReceivedEventsForUser                                      ogenreflect.RuntimeOperation
	ActivityListReceivedPublicEventsForUser                                ogenreflect.RuntimeOperation
	ActivityListRepoEvents                                                 ogenreflect.RuntimeOperation
	ActivityListRepoNotificationsForAuthenticatedUser                      ogenreflect.RuntimeOperation
	ActivityListReposStarredByAuthenticatedUser                            ogenreflect.RuntimeOperation
	ActivityListReposWatchedByUser                                         ogenreflect.RuntimeOperation
	ActivityListWatchedReposForAuthenticatedUser                           ogenreflect.RuntimeOperation
	ActivityListWatchersForRepo                                            ogenreflect.RuntimeOperation
	ActivityMarkNotificationsAsRead                                        ogenreflect.RuntimeOperation
	ActivityMarkRepoNotificationsAsRead                                    ogenreflect.RuntimeOperation
	ActivityMarkThreadAsRead                                               ogenreflect.RuntimeOperation
	ActivitySetRepoSubscription                                            ogenreflect.RuntimeOperation
	ActivitySetThreadSubscription                                          ogenreflect.RuntimeOperation
	ActivityStarRepoForAuthenticatedUser                                   ogenreflect.RuntimeOperation
	ActivityUnstarRepoForAuthenticatedUser                                 ogenreflect.RuntimeOperation
	AppsAddRepoToInstallation                                              ogenreflect.RuntimeOperation
	AppsCheckToken                                                         ogenreflect.RuntimeOperation
	AppsCreateContentAttachment                                            ogenreflect.RuntimeOperation
	AppsCreateFromManifest                                                 ogenreflect.RuntimeOperation
	AppsCreateInstallationAccessToken                                      ogenreflect.RuntimeOperation
	AppsDeleteAuthorization                                                ogenreflect.RuntimeOperation
	AppsDeleteInstallation                                                 ogenreflect.RuntimeOperation
	AppsDeleteToken                                                        ogenreflect.RuntimeOperation
	AppsGetAuthenticated                                                   ogenreflect.RuntimeOperation
	AppsGetBySlug                                                          ogenreflect.RuntimeOperation
	AppsGetSubscriptionPlanForAccount                                      ogenreflect.RuntimeOperation
	AppsGetSubscriptionPlanForAccountStubbed                               ogenreflect.RuntimeOperation
	AppsGetWebhookConfigForApp                                             ogenreflect.RuntimeOperation
	AppsGetWebhookDelivery                                                 ogenreflect.RuntimeOperation
	AppsListAccountsForPlan                                                ogenreflect.RuntimeOperation
	AppsListAccountsForPlanStubbed                                         ogenreflect.RuntimeOperation
	AppsListInstallationReposForAuthenticatedUser                          ogenreflect.RuntimeOperation
	AppsListPlans                                                          ogenreflect.RuntimeOperation
	AppsListPlansStubbed                                                   ogenreflect.RuntimeOperation
	AppsListReposAccessibleToInstallation                                  ogenreflect.RuntimeOperation
	AppsListSubscriptionsForAuthenticatedUser                              ogenreflect.RuntimeOperation
	AppsListSubscriptionsForAuthenticatedUserStubbed                       ogenreflect.RuntimeOperation
	AppsListWebhookDeliveries                                              ogenreflect.RuntimeOperation
	AppsRedeliverWebhookDelivery                                           ogenreflect.RuntimeOperation
	AppsRemoveRepoFromInstallation                                         ogenreflect.RuntimeOperation
	AppsResetToken                                                         ogenreflect.RuntimeOperation
	AppsRevokeInstallationAccessToken                                      ogenreflect.RuntimeOperation
	AppsScopeToken                                                         ogenreflect.RuntimeOperation
	AppsSuspendInstallation                                                ogenreflect.RuntimeOperation
	AppsUnsuspendInstallation                                              ogenreflect.RuntimeOperation
	AppsUpdateWebhookConfigForApp                                          ogenreflect.RuntimeOperation
	BillingGetGithubActionsBillingGhe                                      ogenreflect.RuntimeOperation
	BillingGetGithubActionsBillingOrg                                      ogenreflect.RuntimeOperation
	BillingGetGithubActionsBillingUser                                     ogenreflect.RuntimeOperation
	BillingGetGithubPackagesBillingGhe                                     ogenreflect.RuntimeOperation
	BillingGetGithubPackagesBillingOrg                                     ogenreflect.RuntimeOperation
	BillingGetGithubPackagesBillingUser                                    ogenreflect.RuntimeOperation
	BillingGetSharedStorageBillingGhe                                      ogenreflect.RuntimeOperation
	BillingGetSharedStorageBillingOrg                                      ogenreflect.RuntimeOperation
	BillingGetSharedStorageBillingUser                                     ogenreflect.RuntimeOperation
	ChecksCreateSuite                                                      ogenreflect.RuntimeOperation
	ChecksGet                                                              ogenreflect.RuntimeOperation
	ChecksGetSuite                                                         ogenreflect.RuntimeOperation
	ChecksListAnnotations                                                  ogenreflect.RuntimeOperation
	ChecksListForRef                                                       ogenreflect.RuntimeOperation
	ChecksListForSuite                                                     ogenreflect.RuntimeOperation
	ChecksListSuitesForRef                                                 ogenreflect.RuntimeOperation
	ChecksRerequestSuite                                                   ogenreflect.RuntimeOperation
	ChecksSetSuitesPreferences                                             ogenreflect.RuntimeOperation
	CodeScanningDeleteAnalysis                                             ogenreflect.RuntimeOperation
	CodeScanningGetAlert                                                   ogenreflect.RuntimeOperation
	CodeScanningGetAnalysis                                                ogenreflect.RuntimeOperation
	CodeScanningGetSarif                                                   ogenreflect.RuntimeOperation
	CodeScanningListAlertInstances                                         ogenreflect.RuntimeOperation
	CodeScanningListAlertsForRepo                                          ogenreflect.RuntimeOperation
	CodeScanningListRecentAnalyses                                         ogenreflect.RuntimeOperation
	CodeScanningUpdateAlert                                                ogenreflect.RuntimeOperation
	CodeScanningUploadSarif                                                ogenreflect.RuntimeOperation
	CodesOfConductGetAllCodesOfConduct                                     ogenreflect.RuntimeOperation
	CodesOfConductGetConductCode                                           ogenreflect.RuntimeOperation
	EmojisGet                                                              ogenreflect.RuntimeOperation
	EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise         ogenreflect.RuntimeOperation
	EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise                 ogenreflect.RuntimeOperation
	EnterpriseAdminCreateRegistrationTokenForEnterprise                    ogenreflect.RuntimeOperation
	EnterpriseAdminCreateRemoveTokenForEnterprise                          ogenreflect.RuntimeOperation
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise                ogenreflect.RuntimeOperation
	EnterpriseAdminDeleteScimGroupFromEnterprise                           ogenreflect.RuntimeOperation
	EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise                    ogenreflect.RuntimeOperation
	EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise               ogenreflect.RuntimeOperation
	EnterpriseAdminDeleteUserFromEnterprise                                ogenreflect.RuntimeOperation
	EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise      ogenreflect.RuntimeOperation
	EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise       ogenreflect.RuntimeOperation
	EnterpriseAdminGetAllowedActionsEnterprise                             ogenreflect.RuntimeOperation
	EnterpriseAdminGetAuditLog                                             ogenreflect.RuntimeOperation
	EnterpriseAdminGetGithubActionsPermissionsEnterprise                   ogenreflect.RuntimeOperation
	EnterpriseAdminGetProvisioningInformationForEnterpriseGroup            ogenreflect.RuntimeOperation
	EnterpriseAdminGetProvisioningInformationForEnterpriseUser             ogenreflect.RuntimeOperation
	EnterpriseAdminGetSelfHostedRunnerForEnterprise                        ogenreflect.RuntimeOperation
	EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise                   ogenreflect.RuntimeOperation
	EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise        ogenreflect.RuntimeOperation
	EnterpriseAdminListProvisionedGroupsEnterprise                         ogenreflect.RuntimeOperation
	EnterpriseAdminListProvisionedIdentitiesEnterprise                     ogenreflect.RuntimeOperation
	EnterpriseAdminListRunnerApplicationsForEnterprise                     ogenreflect.RuntimeOperation
	EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise ogenreflect.RuntimeOperation
	EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise                 ogenreflect.RuntimeOperation
	EnterpriseAdminListSelfHostedRunnersForEnterprise                      ogenreflect.RuntimeOperation
	EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise               ogenreflect.RuntimeOperation
	EnterpriseAdminProvisionAndInviteEnterpriseGroup                       ogenreflect.RuntimeOperation
	EnterpriseAdminProvisionAndInviteEnterpriseUser                        ogenreflect.RuntimeOperation
	EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise      ogenreflect.RuntimeOperation
	EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise            ogenreflect.RuntimeOperation
	EnterpriseAdminSetAllowedActionsEnterprise                             ogenreflect.RuntimeOperation
	EnterpriseAdminSetGithubActionsPermissionsEnterprise                   ogenreflect.RuntimeOperation
	EnterpriseAdminSetInformationForProvisionedEnterpriseGroup             ogenreflect.RuntimeOperation
	EnterpriseAdminSetInformationForProvisionedEnterpriseUser              ogenreflect.RuntimeOperation
	EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise         ogenreflect.RuntimeOperation
	EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise  ogenreflect.RuntimeOperation
	EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise                ogenreflect.RuntimeOperation
	EnterpriseAdminUpdateAttributeForEnterpriseGroup                       ogenreflect.RuntimeOperation
	EnterpriseAdminUpdateAttributeForEnterpriseUser                        ogenreflect.RuntimeOperation
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise                ogenreflect.RuntimeOperation
	GistsCheckIsStarred                                                    ogenreflect.RuntimeOperation
	GistsCreate                                                            ogenreflect.RuntimeOperation
	GistsCreateComment                                                     ogenreflect.RuntimeOperation
	GistsDelete                                                            ogenreflect.RuntimeOperation
	GistsDeleteComment                                                     ogenreflect.RuntimeOperation
	GistsFork                                                              ogenreflect.RuntimeOperation
	GistsGet                                                               ogenreflect.RuntimeOperation
	GistsGetComment                                                        ogenreflect.RuntimeOperation
	GistsGetRevision                                                       ogenreflect.RuntimeOperation
	GistsList                                                              ogenreflect.RuntimeOperation
	GistsListComments                                                      ogenreflect.RuntimeOperation
	GistsListCommits                                                       ogenreflect.RuntimeOperation
	GistsListForUser                                                       ogenreflect.RuntimeOperation
	GistsListForks                                                         ogenreflect.RuntimeOperation
	GistsListPublic                                                        ogenreflect.RuntimeOperation
	GistsListStarred                                                       ogenreflect.RuntimeOperation
	GistsStar                                                              ogenreflect.RuntimeOperation
	GistsUnstar                                                            ogenreflect.RuntimeOperation
	GistsUpdateComment                                                     ogenreflect.RuntimeOperation
	GitCreateBlob                                                          ogenreflect.RuntimeOperation
	GitCreateCommit                                                        ogenreflect.RuntimeOperation
	GitCreateRef                                                           ogenreflect.RuntimeOperation
	GitCreateTag                                                           ogenreflect.RuntimeOperation
	GitCreateTree                                                          ogenreflect.RuntimeOperation
	GitDeleteRef                                                           ogenreflect.RuntimeOperation
	GitGetBlob                                                             ogenreflect.RuntimeOperation
	GitGetCommit                                                           ogenreflect.RuntimeOperation
	GitGetRef                                                              ogenreflect.RuntimeOperation
	GitGetTag                                                              ogenreflect.RuntimeOperation
	GitGetTree                                                             ogenreflect.RuntimeOperation
	GitListMatchingRefs                                                    ogenreflect.RuntimeOperation
	GitUpdateRef                                                           ogenreflect.RuntimeOperation
	GitignoreGetAllTemplates                                               ogenreflect.RuntimeOperation
	GitignoreGetTemplate                                                   ogenreflect.RuntimeOperation
	InteractionsRemoveRestrictionsForAuthenticatedUser                     ogenreflect.RuntimeOperation
	InteractionsRemoveRestrictionsForOrg                                   ogenreflect.RuntimeOperation
	InteractionsRemoveRestrictionsForRepo                                  ogenreflect.RuntimeOperation
	InteractionsSetRestrictionsForAuthenticatedUser                        ogenreflect.RuntimeOperation
	InteractionsSetRestrictionsForOrg                                      ogenreflect.RuntimeOperation
	InteractionsSetRestrictionsForRepo                                     ogenreflect.RuntimeOperation
	IssuesAddAssignees                                                     ogenreflect.RuntimeOperation
	IssuesCheckUserCanBeAssigned                                           ogenreflect.RuntimeOperation
	IssuesCreate                                                           ogenreflect.RuntimeOperation
	IssuesCreateComment                                                    ogenreflect.RuntimeOperation
	IssuesCreateLabel                                                      ogenreflect.RuntimeOperation
	IssuesCreateMilestone                                                  ogenreflect.RuntimeOperation
	IssuesDeleteComment                                                    ogenreflect.RuntimeOperation
	IssuesDeleteLabel                                                      ogenreflect.RuntimeOperation
	IssuesDeleteMilestone                                                  ogenreflect.RuntimeOperation
	IssuesGet                                                              ogenreflect.RuntimeOperation
	IssuesGetComment                                                       ogenreflect.RuntimeOperation
	IssuesGetEvent                                                         ogenreflect.RuntimeOperation
	IssuesGetLabel                                                         ogenreflect.RuntimeOperation
	IssuesGetMilestone                                                     ogenreflect.RuntimeOperation
	IssuesList                                                             ogenreflect.RuntimeOperation
	IssuesListAssignees                                                    ogenreflect.RuntimeOperation
	IssuesListComments                                                     ogenreflect.RuntimeOperation
	IssuesListCommentsForRepo                                              ogenreflect.RuntimeOperation
	IssuesListEventsForRepo                                                ogenreflect.RuntimeOperation
	IssuesListForAuthenticatedUser                                         ogenreflect.RuntimeOperation
	IssuesListForOrg                                                       ogenreflect.RuntimeOperation
	IssuesListForRepo                                                      ogenreflect.RuntimeOperation
	IssuesListLabelsForMilestone                                           ogenreflect.RuntimeOperation
	IssuesListLabelsForRepo                                                ogenreflect.RuntimeOperation
	IssuesListLabelsOnIssue                                                ogenreflect.RuntimeOperation
	IssuesListMilestones                                                   ogenreflect.RuntimeOperation
	IssuesLock                                                             ogenreflect.RuntimeOperation
	IssuesRemoveAllLabels                                                  ogenreflect.RuntimeOperation
	IssuesRemoveAssignees                                                  ogenreflect.RuntimeOperation
	IssuesRemoveLabel                                                      ogenreflect.RuntimeOperation
	IssuesUnlock                                                           ogenreflect.RuntimeOperation
	IssuesUpdate                                                           ogenreflect.RuntimeOperation
	IssuesUpdateComment                                                    ogenreflect.RuntimeOperation
	IssuesUpdateLabel                                                      ogenreflect.RuntimeOperation
	IssuesUpdateMilestone                                                  ogenreflect.RuntimeOperation
	LicensesGet                                                            ogenreflect.RuntimeOperation
	LicensesGetAllCommonlyUsed                                             ogenreflect.RuntimeOperation
	LicensesGetForRepo                                                     ogenreflect.RuntimeOperation
	MarkdownRender                                                         ogenreflect.RuntimeOperation
	MarkdownRenderRaw                                                      ogenreflect.RuntimeOperation
	MetaGet                                                                ogenreflect.RuntimeOperation
	MetaGetOctocat                                                         ogenreflect.RuntimeOperation
	MetaGetZen                                                             ogenreflect.RuntimeOperation
	MetaRoot                                                               ogenreflect.RuntimeOperation
	MigrationsCancelImport                                                 ogenreflect.RuntimeOperation
	MigrationsDeleteArchiveForAuthenticatedUser                            ogenreflect.RuntimeOperation
	MigrationsDeleteArchiveForOrg                                          ogenreflect.RuntimeOperation
	MigrationsDownloadArchiveForOrg                                        ogenreflect.RuntimeOperation
	MigrationsGetArchiveForAuthenticatedUser                               ogenreflect.RuntimeOperation
	MigrationsGetCommitAuthors                                             ogenreflect.RuntimeOperation
	MigrationsGetImportStatus                                              ogenreflect.RuntimeOperation
	MigrationsGetLargeFiles                                                ogenreflect.RuntimeOperation
	MigrationsGetStatusForAuthenticatedUser                                ogenreflect.RuntimeOperation
	MigrationsGetStatusForOrg                                              ogenreflect.RuntimeOperation
	MigrationsListForAuthenticatedUser                                     ogenreflect.RuntimeOperation
	MigrationsListForOrg                                                   ogenreflect.RuntimeOperation
	MigrationsListReposForOrg                                              ogenreflect.RuntimeOperation
	MigrationsListReposForUser                                             ogenreflect.RuntimeOperation
	MigrationsMapCommitAuthor                                              ogenreflect.RuntimeOperation
	MigrationsSetLfsPreference                                             ogenreflect.RuntimeOperation
	MigrationsStartForAuthenticatedUser                                    ogenreflect.RuntimeOperation
	MigrationsStartForOrg                                                  ogenreflect.RuntimeOperation
	MigrationsStartImport                                                  ogenreflect.RuntimeOperation
	MigrationsUnlockRepoForAuthenticatedUser                               ogenreflect.RuntimeOperation
	MigrationsUnlockRepoForOrg                                             ogenreflect.RuntimeOperation
	MigrationsUpdateImport                                                 ogenreflect.RuntimeOperation
	OAuthAuthorizationsCreateAuthorization                                 ogenreflect.RuntimeOperation
	OAuthAuthorizationsDeleteAuthorization                                 ogenreflect.RuntimeOperation
	OAuthAuthorizationsDeleteGrant                                         ogenreflect.RuntimeOperation
	OAuthAuthorizationsGetAuthorization                                    ogenreflect.RuntimeOperation
	OAuthAuthorizationsGetGrant                                            ogenreflect.RuntimeOperation
	OAuthAuthorizationsGetOrCreateAuthorizationForApp                      ogenreflect.RuntimeOperation
	OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint        ogenreflect.RuntimeOperation
	OAuthAuthorizationsListAuthorizations                                  ogenreflect.RuntimeOperation
	OAuthAuthorizationsListGrants                                          ogenreflect.RuntimeOperation
	OAuthAuthorizationsUpdateAuthorization                                 ogenreflect.RuntimeOperation
	OrgsBlockUser                                                          ogenreflect.RuntimeOperation
	OrgsCancelInvitation                                                   ogenreflect.RuntimeOperation
	OrgsCheckBlockedUser                                                   ogenreflect.RuntimeOperation
	OrgsCheckMembershipForUser                                             ogenreflect.RuntimeOperation
	OrgsCheckPublicMembershipForUser                                       ogenreflect.RuntimeOperation
	OrgsConvertMemberToOutsideCollaborator                                 ogenreflect.RuntimeOperation
	OrgsCreateInvitation                                                   ogenreflect.RuntimeOperation
	OrgsCreateWebhook                                                      ogenreflect.RuntimeOperation
	OrgsDeleteWebhook                                                      ogenreflect.RuntimeOperation
	OrgsGet                                                                ogenreflect.RuntimeOperation
	OrgsGetAuditLog                                                        ogenreflect.RuntimeOperation
	OrgsGetMembershipForAuthenticatedUser                                  ogenreflect.RuntimeOperation
	OrgsGetMembershipForUser                                               ogenreflect.RuntimeOperation
	OrgsGetWebhook                                                         ogenreflect.RuntimeOperation
	OrgsGetWebhookConfigForOrg                                             ogenreflect.RuntimeOperation
	OrgsGetWebhookDelivery                                                 ogenreflect.RuntimeOperation
	OrgsList                                                               ogenreflect.RuntimeOperation
	OrgsListBlockedUsers                                                   ogenreflect.RuntimeOperation
	OrgsListFailedInvitations                                              ogenreflect.RuntimeOperation
	OrgsListForAuthenticatedUser                                           ogenreflect.RuntimeOperation
	OrgsListForUser                                                        ogenreflect.RuntimeOperation
	OrgsListInvitationTeams                                                ogenreflect.RuntimeOperation
	OrgsListMembers                                                        ogenreflect.RuntimeOperation
	OrgsListMembershipsForAuthenticatedUser                                ogenreflect.RuntimeOperation
	OrgsListOutsideCollaborators                                           ogenreflect.RuntimeOperation
	OrgsListPendingInvitations                                             ogenreflect.RuntimeOperation
	OrgsListPublicMembers                                                  ogenreflect.RuntimeOperation
	OrgsListSamlSSOAuthorizations                                          ogenreflect.RuntimeOperation
	OrgsListWebhookDeliveries                                              ogenreflect.RuntimeOperation
	OrgsListWebhooks                                                       ogenreflect.RuntimeOperation
	OrgsPingWebhook                                                        ogenreflect.RuntimeOperation
	OrgsRedeliverWebhookDelivery                                           ogenreflect.RuntimeOperation
	OrgsRemoveMember                                                       ogenreflect.RuntimeOperation
	OrgsRemoveMembershipForUser                                            ogenreflect.RuntimeOperation
	OrgsRemoveOutsideCollaborator                                          ogenreflect.RuntimeOperation
	OrgsRemovePublicMembershipForAuthenticatedUser                         ogenreflect.RuntimeOperation
	OrgsRemoveSamlSSOAuthorization                                         ogenreflect.RuntimeOperation
	OrgsSetMembershipForUser                                               ogenreflect.RuntimeOperation
	OrgsSetPublicMembershipForAuthenticatedUser                            ogenreflect.RuntimeOperation
	OrgsUnblockUser                                                        ogenreflect.RuntimeOperation
	OrgsUpdateMembershipForAuthenticatedUser                               ogenreflect.RuntimeOperation
	OrgsUpdateWebhook                                                      ogenreflect.RuntimeOperation
	OrgsUpdateWebhookConfigForOrg                                          ogenreflect.RuntimeOperation
	PackagesDeletePackageForAuthenticatedUser                              ogenreflect.RuntimeOperation
	PackagesDeletePackageForOrg                                            ogenreflect.RuntimeOperation
	PackagesDeletePackageForUser                                           ogenreflect.RuntimeOperation
	PackagesDeletePackageVersionForAuthenticatedUser                       ogenreflect.RuntimeOperation
	PackagesDeletePackageVersionForOrg                                     ogenreflect.RuntimeOperation
	PackagesDeletePackageVersionForUser                                    ogenreflect.RuntimeOperation
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser        ogenreflect.RuntimeOperation
	PackagesGetAllPackageVersionsForPackageOwnedByOrg                      ogenreflect.RuntimeOperation
	PackagesGetAllPackageVersionsForPackageOwnedByUser                     ogenreflect.RuntimeOperation
	PackagesGetPackageForAuthenticatedUser                                 ogenreflect.RuntimeOperation
	PackagesGetPackageForOrganization                                      ogenreflect.RuntimeOperation
	PackagesGetPackageForUser                                              ogenreflect.RuntimeOperation
	PackagesGetPackageVersionForAuthenticatedUser                          ogenreflect.RuntimeOperation
	PackagesGetPackageVersionForOrganization                               ogenreflect.RuntimeOperation
	PackagesGetPackageVersionForUser                                       ogenreflect.RuntimeOperation
	PackagesListPackagesForAuthenticatedUser                               ogenreflect.RuntimeOperation
	PackagesListPackagesForOrganization                                    ogenreflect.RuntimeOperation
	PackagesListPackagesForUser                                            ogenreflect.RuntimeOperation
	PackagesRestorePackageForAuthenticatedUser                             ogenreflect.RuntimeOperation
	PackagesRestorePackageForOrg                                           ogenreflect.RuntimeOperation
	PackagesRestorePackageForUser                                          ogenreflect.RuntimeOperation
	PackagesRestorePackageVersionForAuthenticatedUser                      ogenreflect.RuntimeOperation
	PackagesRestorePackageVersionForOrg                                    ogenreflect.RuntimeOperation
	PackagesRestorePackageVersionForUser                                   ogenreflect.RuntimeOperation
	ProjectsAddCollaborator                                                ogenreflect.RuntimeOperation
	ProjectsCreateColumn                                                   ogenreflect.RuntimeOperation
	ProjectsCreateForAuthenticatedUser                                     ogenreflect.RuntimeOperation
	ProjectsCreateForOrg                                                   ogenreflect.RuntimeOperation
	ProjectsCreateForRepo                                                  ogenreflect.RuntimeOperation
	ProjectsDelete                                                         ogenreflect.RuntimeOperation
	ProjectsDeleteCard                                                     ogenreflect.RuntimeOperation
	ProjectsDeleteColumn                                                   ogenreflect.RuntimeOperation
	ProjectsGet                                                            ogenreflect.RuntimeOperation
	ProjectsGetCard                                                        ogenreflect.RuntimeOperation
	ProjectsGetColumn                                                      ogenreflect.RuntimeOperation
	ProjectsGetPermissionForUser                                           ogenreflect.RuntimeOperation
	ProjectsListCards                                                      ogenreflect.RuntimeOperation
	ProjectsListCollaborators                                              ogenreflect.RuntimeOperation
	ProjectsListColumns                                                    ogenreflect.RuntimeOperation
	ProjectsListForOrg                                                     ogenreflect.RuntimeOperation
	ProjectsListForRepo                                                    ogenreflect.RuntimeOperation
	ProjectsListForUser                                                    ogenreflect.RuntimeOperation
	ProjectsMoveCard                                                       ogenreflect.RuntimeOperation
	ProjectsMoveColumn                                                     ogenreflect.RuntimeOperation
	ProjectsRemoveCollaborator                                             ogenreflect.RuntimeOperation
	ProjectsUpdate                                                         ogenreflect.RuntimeOperation
	ProjectsUpdateCard                                                     ogenreflect.RuntimeOperation
	ProjectsUpdateColumn                                                   ogenreflect.RuntimeOperation
	PullsCheckIfMerged                                                     ogenreflect.RuntimeOperation
	PullsCreate                                                            ogenreflect.RuntimeOperation
	PullsCreateReplyForReviewComment                                       ogenreflect.RuntimeOperation
	PullsCreateReview                                                      ogenreflect.RuntimeOperation
	PullsCreateReviewComment                                               ogenreflect.RuntimeOperation
	PullsDeletePendingReview                                               ogenreflect.RuntimeOperation
	PullsDeleteReviewComment                                               ogenreflect.RuntimeOperation
	PullsDismissReview                                                     ogenreflect.RuntimeOperation
	PullsGet                                                               ogenreflect.RuntimeOperation
	PullsGetReview                                                         ogenreflect.RuntimeOperation
	PullsGetReviewComment                                                  ogenreflect.RuntimeOperation
	PullsList                                                              ogenreflect.RuntimeOperation
	PullsListCommentsForReview                                             ogenreflect.RuntimeOperation
	PullsListCommits                                                       ogenreflect.RuntimeOperation
	PullsListFiles                                                         ogenreflect.RuntimeOperation
	PullsListRequestedReviewers                                            ogenreflect.RuntimeOperation
	PullsListReviewComments                                                ogenreflect.RuntimeOperation
	PullsListReviewCommentsForRepo                                         ogenreflect.RuntimeOperation
	PullsListReviews                                                       ogenreflect.RuntimeOperation
	PullsMerge                                                             ogenreflect.RuntimeOperation
	PullsRemoveRequestedReviewers                                          ogenreflect.RuntimeOperation
	PullsSubmitReview                                                      ogenreflect.RuntimeOperation
	PullsUpdate                                                            ogenreflect.RuntimeOperation
	PullsUpdateBranch                                                      ogenreflect.RuntimeOperation
	PullsUpdateReview                                                      ogenreflect.RuntimeOperation
	PullsUpdateReviewComment                                               ogenreflect.RuntimeOperation
	RateLimitGet                                                           ogenreflect.RuntimeOperation
	ReactionsCreateForCommitComment                                        ogenreflect.RuntimeOperation
	ReactionsCreateForIssue                                                ogenreflect.RuntimeOperation
	ReactionsCreateForIssueComment                                         ogenreflect.RuntimeOperation
	ReactionsCreateForPullRequestReviewComment                             ogenreflect.RuntimeOperation
	ReactionsCreateForRelease                                              ogenreflect.RuntimeOperation
	ReactionsCreateForTeamDiscussionCommentInOrg                           ogenreflect.RuntimeOperation
	ReactionsCreateForTeamDiscussionCommentLegacy                          ogenreflect.RuntimeOperation
	ReactionsCreateForTeamDiscussionInOrg                                  ogenreflect.RuntimeOperation
	ReactionsCreateForTeamDiscussionLegacy                                 ogenreflect.RuntimeOperation
	ReactionsDeleteForCommitComment                                        ogenreflect.RuntimeOperation
	ReactionsDeleteForIssue                                                ogenreflect.RuntimeOperation
	ReactionsDeleteForIssueComment                                         ogenreflect.RuntimeOperation
	ReactionsDeleteForPullRequestComment                                   ogenreflect.RuntimeOperation
	ReactionsDeleteForTeamDiscussion                                       ogenreflect.RuntimeOperation
	ReactionsDeleteForTeamDiscussionComment                                ogenreflect.RuntimeOperation
	ReactionsDeleteLegacy                                                  ogenreflect.RuntimeOperation
	ReactionsListForCommitComment                                          ogenreflect.RuntimeOperation
	ReactionsListForIssue                                                  ogenreflect.RuntimeOperation
	ReactionsListForIssueComment                                           ogenreflect.RuntimeOperation
	ReactionsListForPullRequestReviewComment                               ogenreflect.RuntimeOperation
	ReactionsListForTeamDiscussionCommentInOrg                             ogenreflect.RuntimeOperation
	ReactionsListForTeamDiscussionCommentLegacy                            ogenreflect.RuntimeOperation
	ReactionsListForTeamDiscussionInOrg                                    ogenreflect.RuntimeOperation
	ReactionsListForTeamDiscussionLegacy                                   ogenreflect.RuntimeOperation
	ReposAcceptInvitation                                                  ogenreflect.RuntimeOperation
	ReposAddAppAccessRestrictions                                          ogenreflect.RuntimeOperation
	ReposAddCollaborator                                                   ogenreflect.RuntimeOperation
	ReposAddStatusCheckContexts                                            ogenreflect.RuntimeOperation
	ReposAddTeamAccessRestrictions                                         ogenreflect.RuntimeOperation
	ReposAddUserAccessRestrictions                                         ogenreflect.RuntimeOperation
	ReposCheckCollaborator                                                 ogenreflect.RuntimeOperation
	ReposCheckVulnerabilityAlerts                                          ogenreflect.RuntimeOperation
	ReposCompareCommits                                                    ogenreflect.RuntimeOperation
	ReposCreateAutolink                                                    ogenreflect.RuntimeOperation
	ReposCreateCommitComment                                               ogenreflect.RuntimeOperation
	ReposCreateCommitSignatureProtection                                   ogenreflect.RuntimeOperation
	ReposCreateCommitStatus                                                ogenreflect.RuntimeOperation
	ReposCreateDeployKey                                                   ogenreflect.RuntimeOperation
	ReposCreateDeployment                                                  ogenreflect.RuntimeOperation
	ReposCreateDeploymentStatus                                            ogenreflect.RuntimeOperation
	ReposCreateDispatchEvent                                               ogenreflect.RuntimeOperation
	ReposCreateForAuthenticatedUser                                        ogenreflect.RuntimeOperation
	ReposCreateFork                                                        ogenreflect.RuntimeOperation
	ReposCreateInOrg                                                       ogenreflect.RuntimeOperation
	ReposCreateOrUpdateFileContents                                        ogenreflect.RuntimeOperation
	ReposCreatePagesSite                                                   ogenreflect.RuntimeOperation
	ReposCreateRelease                                                     ogenreflect.RuntimeOperation
	ReposCreateUsingTemplate                                               ogenreflect.RuntimeOperation
	ReposCreateWebhook                                                     ogenreflect.RuntimeOperation
	ReposDeclineInvitation                                                 ogenreflect.RuntimeOperation
	ReposDelete                                                            ogenreflect.RuntimeOperation
	ReposDeleteAccessRestrictions                                          ogenreflect.RuntimeOperation
	ReposDeleteAdminBranchProtection                                       ogenreflect.RuntimeOperation
	ReposDeleteAnEnvironment                                               ogenreflect.RuntimeOperation
	ReposDeleteAutolink                                                    ogenreflect.RuntimeOperation
	ReposDeleteBranchProtection                                            ogenreflect.RuntimeOperation
	ReposDeleteCommitComment                                               ogenreflect.RuntimeOperation
	ReposDeleteCommitSignatureProtection                                   ogenreflect.RuntimeOperation
	ReposDeleteDeployKey                                                   ogenreflect.RuntimeOperation
	ReposDeleteDeployment                                                  ogenreflect.RuntimeOperation
	ReposDeleteFile                                                        ogenreflect.RuntimeOperation
	ReposDeleteInvitation                                                  ogenreflect.RuntimeOperation
	ReposDeletePagesSite                                                   ogenreflect.RuntimeOperation
	ReposDeletePullRequestReviewProtection                                 ogenreflect.RuntimeOperation
	ReposDeleteRelease                                                     ogenreflect.RuntimeOperation
	ReposDeleteReleaseAsset                                                ogenreflect.RuntimeOperation
	ReposDeleteWebhook                                                     ogenreflect.RuntimeOperation
	ReposDisableAutomatedSecurityFixes                                     ogenreflect.RuntimeOperation
	ReposDisableLfsForRepo                                                 ogenreflect.RuntimeOperation
	ReposDisableVulnerabilityAlerts                                        ogenreflect.RuntimeOperation
	ReposDownloadTarballArchive                                            ogenreflect.RuntimeOperation
	ReposDownloadZipballArchive                                            ogenreflect.RuntimeOperation
	ReposEnableAutomatedSecurityFixes                                      ogenreflect.RuntimeOperation
	ReposEnableLfsForRepo                                                  ogenreflect.RuntimeOperation
	ReposEnableVulnerabilityAlerts                                         ogenreflect.RuntimeOperation
	ReposGet                                                               ogenreflect.RuntimeOperation
	ReposGetAccessRestrictions                                             ogenreflect.RuntimeOperation
	ReposGetAdminBranchProtection                                          ogenreflect.RuntimeOperation
	ReposGetAllStatusCheckContexts                                         ogenreflect.RuntimeOperation
	ReposGetAllTopics                                                      ogenreflect.RuntimeOperation
	ReposGetAppsWithAccessToProtectedBranch                                ogenreflect.RuntimeOperation
	ReposGetAutolink                                                       ogenreflect.RuntimeOperation
	ReposGetBranch                                                         ogenreflect.RuntimeOperation
	ReposGetBranchProtection                                               ogenreflect.RuntimeOperation
	ReposGetClones                                                         ogenreflect.RuntimeOperation
	ReposGetCodeFrequencyStats                                             ogenreflect.RuntimeOperation
	ReposGetCollaboratorPermissionLevel                                    ogenreflect.RuntimeOperation
	ReposGetCombinedStatusForRef                                           ogenreflect.RuntimeOperation
	ReposGetCommit                                                         ogenreflect.RuntimeOperation
	ReposGetCommitActivityStats                                            ogenreflect.RuntimeOperation
	ReposGetCommitComment                                                  ogenreflect.RuntimeOperation
	ReposGetCommitSignatureProtection                                      ogenreflect.RuntimeOperation
	ReposGetCommunityProfileMetrics                                        ogenreflect.RuntimeOperation
	ReposGetContributorsStats                                              ogenreflect.RuntimeOperation
	ReposGetDeployKey                                                      ogenreflect.RuntimeOperation
	ReposGetDeployment                                                     ogenreflect.RuntimeOperation
	ReposGetDeploymentStatus                                               ogenreflect.RuntimeOperation
	ReposGetLatestPagesBuild                                               ogenreflect.RuntimeOperation
	ReposGetLatestRelease                                                  ogenreflect.RuntimeOperation
	ReposGetPages                                                          ogenreflect.RuntimeOperation
	ReposGetPagesBuild                                                     ogenreflect.RuntimeOperation
	ReposGetPagesHealthCheck                                               ogenreflect.RuntimeOperation
	ReposGetParticipationStats                                             ogenreflect.RuntimeOperation
	ReposGetPullRequestReviewProtection                                    ogenreflect.RuntimeOperation
	ReposGetPunchCardStats                                                 ogenreflect.RuntimeOperation
	ReposGetReadme                                                         ogenreflect.RuntimeOperation
	ReposGetReadmeInDirectory                                              ogenreflect.RuntimeOperation
	ReposGetRelease                                                        ogenreflect.RuntimeOperation
	ReposGetReleaseAsset                                                   ogenreflect.RuntimeOperation
	ReposGetReleaseByTag                                                   ogenreflect.RuntimeOperation
	ReposGetStatusChecksProtection                                         ogenreflect.RuntimeOperation
	ReposGetTeamsWithAccessToProtectedBranch                               ogenreflect.RuntimeOperation
	ReposGetTopPaths                                                       ogenreflect.RuntimeOperation
	ReposGetTopReferrers                                                   ogenreflect.RuntimeOperation
	ReposGetUsersWithAccessToProtectedBranch                               ogenreflect.RuntimeOperation
	ReposGetViews                                                          ogenreflect.RuntimeOperation
	ReposGetWebhook                                                        ogenreflect.RuntimeOperation
	ReposGetWebhookConfigForRepo                                           ogenreflect.RuntimeOperation
	ReposGetWebhookDelivery                                                ogenreflect.RuntimeOperation
	ReposListAutolinks                                                     ogenreflect.RuntimeOperation
	ReposListBranches                                                      ogenreflect.RuntimeOperation
	ReposListBranchesForHeadCommit                                         ogenreflect.RuntimeOperation
	ReposListCollaborators                                                 ogenreflect.RuntimeOperation
	ReposListCommentsForCommit                                             ogenreflect.RuntimeOperation
	ReposListCommitCommentsForRepo                                         ogenreflect.RuntimeOperation
	ReposListCommitStatusesForRef                                          ogenreflect.RuntimeOperation
	ReposListCommits                                                       ogenreflect.RuntimeOperation
	ReposListContributors                                                  ogenreflect.RuntimeOperation
	ReposListDeployKeys                                                    ogenreflect.RuntimeOperation
	ReposListDeploymentStatuses                                            ogenreflect.RuntimeOperation
	ReposListDeployments                                                   ogenreflect.RuntimeOperation
	ReposListForAuthenticatedUser                                          ogenreflect.RuntimeOperation
	ReposListForOrg                                                        ogenreflect.RuntimeOperation
	ReposListForUser                                                       ogenreflect.RuntimeOperation
	ReposListForks                                                         ogenreflect.RuntimeOperation
	ReposListInvitations                                                   ogenreflect.RuntimeOperation
	ReposListInvitationsForAuthenticatedUser                               ogenreflect.RuntimeOperation
	ReposListLanguages                                                     ogenreflect.RuntimeOperation
	ReposListPagesBuilds                                                   ogenreflect.RuntimeOperation
	ReposListPublic                                                        ogenreflect.RuntimeOperation
	ReposListPullRequestsAssociatedWithCommit                              ogenreflect.RuntimeOperation
	ReposListReleaseAssets                                                 ogenreflect.RuntimeOperation
	ReposListReleases                                                      ogenreflect.RuntimeOperation
	ReposListTags                                                          ogenreflect.RuntimeOperation
	ReposListTeams                                                         ogenreflect.RuntimeOperation
	ReposListWebhookDeliveries                                             ogenreflect.RuntimeOperation
	ReposListWebhooks                                                      ogenreflect.RuntimeOperation
	ReposMerge                                                             ogenreflect.RuntimeOperation
	ReposMergeUpstream                                                     ogenreflect.RuntimeOperation
	ReposPingWebhook                                                       ogenreflect.RuntimeOperation
	ReposRedeliverWebhookDelivery                                          ogenreflect.RuntimeOperation
	ReposRemoveAppAccessRestrictions                                       ogenreflect.RuntimeOperation
	ReposRemoveCollaborator                                                ogenreflect.RuntimeOperation
	ReposRemoveStatusCheckContexts                                         ogenreflect.RuntimeOperation
	ReposRemoveStatusCheckProtection                                       ogenreflect.RuntimeOperation
	ReposRemoveTeamAccessRestrictions                                      ogenreflect.RuntimeOperation
	ReposRemoveUserAccessRestrictions                                      ogenreflect.RuntimeOperation
	ReposRenameBranch                                                      ogenreflect.RuntimeOperation
	ReposReplaceAllTopics                                                  ogenreflect.RuntimeOperation
	ReposRequestPagesBuild                                                 ogenreflect.RuntimeOperation
	ReposSetAdminBranchProtection                                          ogenreflect.RuntimeOperation
	ReposSetAppAccessRestrictions                                          ogenreflect.RuntimeOperation
	ReposSetStatusCheckContexts                                            ogenreflect.RuntimeOperation
	ReposSetTeamAccessRestrictions                                         ogenreflect.RuntimeOperation
	ReposSetUserAccessRestrictions                                         ogenreflect.RuntimeOperation
	ReposTestPushWebhook                                                   ogenreflect.RuntimeOperation
	ReposTransfer                                                          ogenreflect.RuntimeOperation
	ReposUpdate                                                            ogenreflect.RuntimeOperation
	ReposUpdateBranchProtection                                            ogenreflect.RuntimeOperation
	ReposUpdateCommitComment                                               ogenreflect.RuntimeOperation
	ReposUpdateInvitation                                                  ogenreflect.RuntimeOperation
	ReposUpdatePullRequestReviewProtection                                 ogenreflect.RuntimeOperation
	ReposUpdateRelease                                                     ogenreflect.RuntimeOperation
	ReposUpdateReleaseAsset                                                ogenreflect.RuntimeOperation
	ReposUpdateStatusCheckProtection                                       ogenreflect.RuntimeOperation
	ReposUpdateWebhook                                                     ogenreflect.RuntimeOperation
	ReposUpdateWebhookConfigForRepo                                        ogenreflect.RuntimeOperation
	ReposUploadReleaseAsset                                                ogenreflect.RuntimeOperation
	ScimDeleteUserFromOrg                                                  ogenreflect.RuntimeOperation
	SearchCode                                                             ogenreflect.RuntimeOperation
	SearchCommits                                                          ogenreflect.RuntimeOperation
	SearchIssuesAndPullRequests                                            ogenreflect.RuntimeOperation
	SearchLabels                                                           ogenreflect.RuntimeOperation
	SearchRepos                                                            ogenreflect.RuntimeOperation
	SearchTopics                                                           ogenreflect.RuntimeOperation
	SearchUsers                                                            ogenreflect.RuntimeOperation
	SecretScanningGetAlert                                                 ogenreflect.RuntimeOperation
	SecretScanningListAlertsForOrg                                         ogenreflect.RuntimeOperation
	SecretScanningListAlertsForRepo                                        ogenreflect.RuntimeOperation
	SecretScanningUpdateAlert                                              ogenreflect.RuntimeOperation
	TeamsAddMemberLegacy                                                   ogenreflect.RuntimeOperation
	TeamsAddOrUpdateMembershipForUserInOrg                                 ogenreflect.RuntimeOperation
	TeamsAddOrUpdateMembershipForUserLegacy                                ogenreflect.RuntimeOperation
	TeamsAddOrUpdateProjectPermissionsInOrg                                ogenreflect.RuntimeOperation
	TeamsAddOrUpdateProjectPermissionsLegacy                               ogenreflect.RuntimeOperation
	TeamsAddOrUpdateRepoPermissionsInOrg                                   ogenreflect.RuntimeOperation
	TeamsAddOrUpdateRepoPermissionsLegacy                                  ogenreflect.RuntimeOperation
	TeamsCheckPermissionsForProjectInOrg                                   ogenreflect.RuntimeOperation
	TeamsCheckPermissionsForProjectLegacy                                  ogenreflect.RuntimeOperation
	TeamsCheckPermissionsForRepoInOrg                                      ogenreflect.RuntimeOperation
	TeamsCheckPermissionsForRepoLegacy                                     ogenreflect.RuntimeOperation
	TeamsCreate                                                            ogenreflect.RuntimeOperation
	TeamsCreateDiscussionCommentInOrg                                      ogenreflect.RuntimeOperation
	TeamsCreateDiscussionCommentLegacy                                     ogenreflect.RuntimeOperation
	TeamsCreateDiscussionInOrg                                             ogenreflect.RuntimeOperation
	TeamsCreateDiscussionLegacy                                            ogenreflect.RuntimeOperation
	TeamsCreateOrUpdateIdpGroupConnectionsInOrg                            ogenreflect.RuntimeOperation
	TeamsCreateOrUpdateIdpGroupConnectionsLegacy                           ogenreflect.RuntimeOperation
	TeamsDeleteDiscussionCommentInOrg                                      ogenreflect.RuntimeOperation
	TeamsDeleteDiscussionCommentLegacy                                     ogenreflect.RuntimeOperation
	TeamsDeleteDiscussionInOrg                                             ogenreflect.RuntimeOperation
	TeamsDeleteDiscussionLegacy                                            ogenreflect.RuntimeOperation
	TeamsDeleteInOrg                                                       ogenreflect.RuntimeOperation
	TeamsDeleteLegacy                                                      ogenreflect.RuntimeOperation
	TeamsGetByName                                                         ogenreflect.RuntimeOperation
	TeamsGetDiscussionCommentInOrg                                         ogenreflect.RuntimeOperation
	TeamsGetDiscussionCommentLegacy                                        ogenreflect.RuntimeOperation
	TeamsGetDiscussionInOrg                                                ogenreflect.RuntimeOperation
	TeamsGetDiscussionLegacy                                               ogenreflect.RuntimeOperation
	TeamsGetLegacy                                                         ogenreflect.RuntimeOperation
	TeamsGetMemberLegacy                                                   ogenreflect.RuntimeOperation
	TeamsGetMembershipForUserInOrg                                         ogenreflect.RuntimeOperation
	TeamsGetMembershipForUserLegacy                                        ogenreflect.RuntimeOperation
	TeamsList                                                              ogenreflect.RuntimeOperation
	TeamsListChildInOrg                                                    ogenreflect.RuntimeOperation
	TeamsListChildLegacy                                                   ogenreflect.RuntimeOperation
	TeamsListDiscussionCommentsInOrg                                       ogenreflect.RuntimeOperation
	TeamsListDiscussionCommentsLegacy                                      ogenreflect.RuntimeOperation
	TeamsListDiscussionsInOrg                                              ogenreflect.RuntimeOperation
	TeamsListDiscussionsLegacy                                             ogenreflect.RuntimeOperation
	TeamsListForAuthenticatedUser                                          ogenreflect.RuntimeOperation
	TeamsListIdpGroupsForLegacy                                            ogenreflect.RuntimeOperation
	TeamsListIdpGroupsForOrg                                               ogenreflect.RuntimeOperation
	TeamsListIdpGroupsInOrg                                                ogenreflect.RuntimeOperation
	TeamsListMembersInOrg                                                  ogenreflect.RuntimeOperation
	TeamsListMembersLegacy                                                 ogenreflect.RuntimeOperation
	TeamsListPendingInvitationsInOrg                                       ogenreflect.RuntimeOperation
	TeamsListPendingInvitationsLegacy                                      ogenreflect.RuntimeOperation
	TeamsListProjectsInOrg                                                 ogenreflect.RuntimeOperation
	TeamsListProjectsLegacy                                                ogenreflect.RuntimeOperation
	TeamsListReposInOrg                                                    ogenreflect.RuntimeOperation
	TeamsListReposLegacy                                                   ogenreflect.RuntimeOperation
	TeamsRemoveMemberLegacy                                                ogenreflect.RuntimeOperation
	TeamsRemoveMembershipForUserInOrg                                      ogenreflect.RuntimeOperation
	TeamsRemoveMembershipForUserLegacy                                     ogenreflect.RuntimeOperation
	TeamsRemoveProjectInOrg                                                ogenreflect.RuntimeOperation
	TeamsRemoveProjectLegacy                                               ogenreflect.RuntimeOperation
	TeamsRemoveRepoInOrg                                                   ogenreflect.RuntimeOperation
	TeamsRemoveRepoLegacy                                                  ogenreflect.RuntimeOperation
	TeamsUpdateDiscussionCommentInOrg                                      ogenreflect.RuntimeOperation
	TeamsUpdateDiscussionCommentLegacy                                     ogenreflect.RuntimeOperation
	TeamsUpdateDiscussionInOrg                                             ogenreflect.RuntimeOperation
	TeamsUpdateDiscussionLegacy                                            ogenreflect.RuntimeOperation
	TeamsUpdateInOrg                                                       ogenreflect.RuntimeOperation
	TeamsUpdateLegacy                                                      ogenreflect.RuntimeOperation
	UsersAddEmailForAuthenticated                                          ogenreflect.RuntimeOperation
	UsersBlock                                                             ogenreflect.RuntimeOperation
	UsersCheckBlocked                                                      ogenreflect.RuntimeOperation
	UsersCheckFollowingForUser                                             ogenreflect.RuntimeOperation
	UsersCheckPersonIsFollowedByAuthenticated                              ogenreflect.RuntimeOperation
	UsersCreateGpgKeyForAuthenticated                                      ogenreflect.RuntimeOperation
	UsersCreatePublicSSHKeyForAuthenticated                                ogenreflect.RuntimeOperation
	UsersDeleteEmailForAuthenticated                                       ogenreflect.RuntimeOperation
	UsersDeleteGpgKeyForAuthenticated                                      ogenreflect.RuntimeOperation
	UsersDeletePublicSSHKeyForAuthenticated                                ogenreflect.RuntimeOperation
	UsersFollow                                                            ogenreflect.RuntimeOperation
	UsersGetAuthenticated                                                  ogenreflect.RuntimeOperation
	UsersGetByUsername                                                     ogenreflect.RuntimeOperation
	UsersGetContextForUser                                                 ogenreflect.RuntimeOperation
	UsersGetGpgKeyForAuthenticated                                         ogenreflect.RuntimeOperation
	UsersGetPublicSSHKeyForAuthenticated                                   ogenreflect.RuntimeOperation
	UsersList                                                              ogenreflect.RuntimeOperation
	UsersListBlockedByAuthenticated                                        ogenreflect.RuntimeOperation
	UsersListEmailsForAuthenticated                                        ogenreflect.RuntimeOperation
	UsersListFollowedByAuthenticated                                       ogenreflect.RuntimeOperation
	UsersListFollowersForAuthenticatedUser                                 ogenreflect.RuntimeOperation
	UsersListFollowersForUser                                              ogenreflect.RuntimeOperation
	UsersListFollowingForUser                                              ogenreflect.RuntimeOperation
	UsersListGpgKeysForAuthenticated                                       ogenreflect.RuntimeOperation
	UsersListGpgKeysForUser                                                ogenreflect.RuntimeOperation
	UsersListPublicEmailsForAuthenticated                                  ogenreflect.RuntimeOperation
	UsersListPublicKeysForUser                                             ogenreflect.RuntimeOperation
	UsersListPublicSSHKeysForAuthenticated                                 ogenreflect.RuntimeOperation
	UsersSetPrimaryEmailVisibilityForAuthenticated                         ogenreflect.RuntimeOperation
	UsersUnblock                                                           ogenreflect.RuntimeOperation
	UsersUnfollow                                                          ogenreflect.RuntimeOperation
	UsersUpdateAuthenticated                                               ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg":
		return p.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "ActionsAddSelectedRepoToOrgSecret":
		return p.ActionsAddSelectedRepoToOrgSecret, true
	case "ActionsAddSelfHostedRunnerToGroupForOrg":
		return p.ActionsAddSelfHostedRunnerToGroupForOrg, true
	case "ActionsApproveWorkflowRun":
		return p.ActionsApproveWorkflowRun, true
	case "ActionsCancelWorkflowRun":
		return p.ActionsCancelWorkflowRun, true
	case "ActionsCreateOrUpdateEnvironmentSecret":
		return p.ActionsCreateOrUpdateEnvironmentSecret, true
	case "ActionsCreateOrUpdateOrgSecret":
		return p.ActionsCreateOrUpdateOrgSecret, true
	case "ActionsCreateOrUpdateRepoSecret":
		return p.ActionsCreateOrUpdateRepoSecret, true
	case "ActionsCreateRegistrationTokenForOrg":
		return p.ActionsCreateRegistrationTokenForOrg, true
	case "ActionsCreateRegistrationTokenForRepo":
		return p.ActionsCreateRegistrationTokenForRepo, true
	case "ActionsCreateRemoveTokenForOrg":
		return p.ActionsCreateRemoveTokenForOrg, true
	case "ActionsCreateRemoveTokenForRepo":
		return p.ActionsCreateRemoveTokenForRepo, true
	case "ActionsCreateSelfHostedRunnerGroupForOrg":
		return p.ActionsCreateSelfHostedRunnerGroupForOrg, true
	case "ActionsDeleteArtifact":
		return p.ActionsDeleteArtifact, true
	case "ActionsDeleteEnvironmentSecret":
		return p.ActionsDeleteEnvironmentSecret, true
	case "ActionsDeleteOrgSecret":
		return p.ActionsDeleteOrgSecret, true
	case "ActionsDeleteRepoSecret":
		return p.ActionsDeleteRepoSecret, true
	case "ActionsDeleteSelfHostedRunnerFromOrg":
		return p.ActionsDeleteSelfHostedRunnerFromOrg, true
	case "ActionsDeleteSelfHostedRunnerFromRepo":
		return p.ActionsDeleteSelfHostedRunnerFromRepo, true
	case "ActionsDeleteSelfHostedRunnerGroupFromOrg":
		return p.ActionsDeleteSelfHostedRunnerGroupFromOrg, true
	case "ActionsDeleteWorkflowRun":
		return p.ActionsDeleteWorkflowRun, true
	case "ActionsDeleteWorkflowRunLogs":
		return p.ActionsDeleteWorkflowRunLogs, true
	case "ActionsDisableSelectedRepositoryGithubActionsOrganization":
		return p.ActionsDisableSelectedRepositoryGithubActionsOrganization, true
	case "ActionsDownloadArtifact":
		return p.ActionsDownloadArtifact, true
	case "ActionsDownloadJobLogsForWorkflowRun":
		return p.ActionsDownloadJobLogsForWorkflowRun, true
	case "ActionsDownloadWorkflowRunLogs":
		return p.ActionsDownloadWorkflowRunLogs, true
	case "ActionsEnableSelectedRepositoryGithubActionsOrganization":
		return p.ActionsEnableSelectedRepositoryGithubActionsOrganization, true
	case "ActionsGetAllowedActionsOrganization":
		return p.ActionsGetAllowedActionsOrganization, true
	case "ActionsGetAllowedActionsRepository":
		return p.ActionsGetAllowedActionsRepository, true
	case "ActionsGetArtifact":
		return p.ActionsGetArtifact, true
	case "ActionsGetEnvironmentPublicKey":
		return p.ActionsGetEnvironmentPublicKey, true
	case "ActionsGetEnvironmentSecret":
		return p.ActionsGetEnvironmentSecret, true
	case "ActionsGetGithubActionsPermissionsOrganization":
		return p.ActionsGetGithubActionsPermissionsOrganization, true
	case "ActionsGetGithubActionsPermissionsRepository":
		return p.ActionsGetGithubActionsPermissionsRepository, true
	case "ActionsGetJobForWorkflowRun":
		return p.ActionsGetJobForWorkflowRun, true
	case "ActionsGetOrgPublicKey":
		return p.ActionsGetOrgPublicKey, true
	case "ActionsGetOrgSecret":
		return p.ActionsGetOrgSecret, true
	case "ActionsGetRepoPublicKey":
		return p.ActionsGetRepoPublicKey, true
	case "ActionsGetRepoSecret":
		return p.ActionsGetRepoSecret, true
	case "ActionsGetReviewsForRun":
		return p.ActionsGetReviewsForRun, true
	case "ActionsGetSelfHostedRunnerForOrg":
		return p.ActionsGetSelfHostedRunnerForOrg, true
	case "ActionsGetSelfHostedRunnerForRepo":
		return p.ActionsGetSelfHostedRunnerForRepo, true
	case "ActionsGetSelfHostedRunnerGroupForOrg":
		return p.ActionsGetSelfHostedRunnerGroupForOrg, true
	case "ActionsGetWorkflowRun":
		return p.ActionsGetWorkflowRun, true
	case "ActionsGetWorkflowRunUsage":
		return p.ActionsGetWorkflowRunUsage, true
	case "ActionsListArtifactsForRepo":
		return p.ActionsListArtifactsForRepo, true
	case "ActionsListEnvironmentSecrets":
		return p.ActionsListEnvironmentSecrets, true
	case "ActionsListJobsForWorkflowRun":
		return p.ActionsListJobsForWorkflowRun, true
	case "ActionsListOrgSecrets":
		return p.ActionsListOrgSecrets, true
	case "ActionsListRepoAccessToSelfHostedRunnerGroupInOrg":
		return p.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "ActionsListRepoSecrets":
		return p.ActionsListRepoSecrets, true
	case "ActionsListRepoWorkflows":
		return p.ActionsListRepoWorkflows, true
	case "ActionsListRunnerApplicationsForOrg":
		return p.ActionsListRunnerApplicationsForOrg, true
	case "ActionsListRunnerApplicationsForRepo":
		return p.ActionsListRunnerApplicationsForRepo, true
	case "ActionsListSelectedReposForOrgSecret":
		return p.ActionsListSelectedReposForOrgSecret, true
	case "ActionsListSelectedRepositoriesEnabledGithubActionsOrganization":
		return p.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization, true
	case "ActionsListSelfHostedRunnerGroupsForOrg":
		return p.ActionsListSelfHostedRunnerGroupsForOrg, true
	case "ActionsListSelfHostedRunnersForOrg":
		return p.ActionsListSelfHostedRunnersForOrg, true
	case "ActionsListSelfHostedRunnersForRepo":
		return p.ActionsListSelfHostedRunnersForRepo, true
	case "ActionsListSelfHostedRunnersInGroupForOrg":
		return p.ActionsListSelfHostedRunnersInGroupForOrg, true
	case "ActionsListWorkflowRunArtifacts":
		return p.ActionsListWorkflowRunArtifacts, true
	case "ActionsListWorkflowRunsForRepo":
		return p.ActionsListWorkflowRunsForRepo, true
	case "ActionsReRunWorkflow":
		return p.ActionsReRunWorkflow, true
	case "ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg":
		return p.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "ActionsRemoveSelectedRepoFromOrgSecret":
		return p.ActionsRemoveSelectedRepoFromOrgSecret, true
	case "ActionsRemoveSelfHostedRunnerFromGroupForOrg":
		return p.ActionsRemoveSelfHostedRunnerFromGroupForOrg, true
	case "ActionsRetryWorkflow":
		return p.ActionsRetryWorkflow, true
	case "ActionsReviewPendingDeploymentsForRun":
		return p.ActionsReviewPendingDeploymentsForRun, true
	case "ActionsSetAllowedActionsOrganization":
		return p.ActionsSetAllowedActionsOrganization, true
	case "ActionsSetAllowedActionsRepository":
		return p.ActionsSetAllowedActionsRepository, true
	case "ActionsSetGithubActionsPermissionsOrganization":
		return p.ActionsSetGithubActionsPermissionsOrganization, true
	case "ActionsSetGithubActionsPermissionsRepository":
		return p.ActionsSetGithubActionsPermissionsRepository, true
	case "ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg":
		return p.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "ActionsSetSelectedReposForOrgSecret":
		return p.ActionsSetSelectedReposForOrgSecret, true
	case "ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization":
		return p.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization, true
	case "ActionsSetSelfHostedRunnersInGroupForOrg":
		return p.ActionsSetSelfHostedRunnersInGroupForOrg, true
	case "ActionsUpdateSelfHostedRunnerGroupForOrg":
		return p.ActionsUpdateSelfHostedRunnerGroupForOrg, true
	case "ActivityCheckRepoIsStarredByAuthenticatedUser":
		return p.ActivityCheckRepoIsStarredByAuthenticatedUser, true
	case "ActivityDeleteRepoSubscription":
		return p.ActivityDeleteRepoSubscription, true
	case "ActivityDeleteThreadSubscription":
		return p.ActivityDeleteThreadSubscription, true
	case "ActivityGetFeeds":
		return p.ActivityGetFeeds, true
	case "ActivityGetRepoSubscription":
		return p.ActivityGetRepoSubscription, true
	case "ActivityGetThread":
		return p.ActivityGetThread, true
	case "ActivityGetThreadSubscriptionForAuthenticatedUser":
		return p.ActivityGetThreadSubscriptionForAuthenticatedUser, true
	case "ActivityListEventsForAuthenticatedUser":
		return p.ActivityListEventsForAuthenticatedUser, true
	case "ActivityListNotificationsForAuthenticatedUser":
		return p.ActivityListNotificationsForAuthenticatedUser, true
	case "ActivityListOrgEventsForAuthenticatedUser":
		return p.ActivityListOrgEventsForAuthenticatedUser, true
	case "ActivityListPublicEvents":
		return p.ActivityListPublicEvents, true
	case "ActivityListPublicEventsForRepoNetwork":
		return p.ActivityListPublicEventsForRepoNetwork, true
	case "ActivityListPublicEventsForUser":
		return p.ActivityListPublicEventsForUser, true
	case "ActivityListPublicOrgEvents":
		return p.ActivityListPublicOrgEvents, true
	case "ActivityListReceivedEventsForUser":
		return p.ActivityListReceivedEventsForUser, true
	case "ActivityListReceivedPublicEventsForUser":
		return p.ActivityListReceivedPublicEventsForUser, true
	case "ActivityListRepoEvents":
		return p.ActivityListRepoEvents, true
	case "ActivityListRepoNotificationsForAuthenticatedUser":
		return p.ActivityListRepoNotificationsForAuthenticatedUser, true
	case "ActivityListReposStarredByAuthenticatedUser":
		return p.ActivityListReposStarredByAuthenticatedUser, true
	case "ActivityListReposWatchedByUser":
		return p.ActivityListReposWatchedByUser, true
	case "ActivityListWatchedReposForAuthenticatedUser":
		return p.ActivityListWatchedReposForAuthenticatedUser, true
	case "ActivityListWatchersForRepo":
		return p.ActivityListWatchersForRepo, true
	case "ActivityMarkNotificationsAsRead":
		return p.ActivityMarkNotificationsAsRead, true
	case "ActivityMarkRepoNotificationsAsRead":
		return p.ActivityMarkRepoNotificationsAsRead, true
	case "ActivityMarkThreadAsRead":
		return p.ActivityMarkThreadAsRead, true
	case "ActivitySetRepoSubscription":
		return p.ActivitySetRepoSubscription, true
	case "ActivitySetThreadSubscription":
		return p.ActivitySetThreadSubscription, true
	case "ActivityStarRepoForAuthenticatedUser":
		return p.ActivityStarRepoForAuthenticatedUser, true
	case "ActivityUnstarRepoForAuthenticatedUser":
		return p.ActivityUnstarRepoForAuthenticatedUser, true
	case "AppsAddRepoToInstallation":
		return p.AppsAddRepoToInstallation, true
	case "AppsCheckToken":
		return p.AppsCheckToken, true
	case "AppsCreateContentAttachment":
		return p.AppsCreateContentAttachment, true
	case "AppsCreateFromManifest":
		return p.AppsCreateFromManifest, true
	case "AppsCreateInstallationAccessToken":
		return p.AppsCreateInstallationAccessToken, true
	case "AppsDeleteAuthorization":
		return p.AppsDeleteAuthorization, true
	case "AppsDeleteInstallation":
		return p.AppsDeleteInstallation, true
	case "AppsDeleteToken":
		return p.AppsDeleteToken, true
	case "AppsGetAuthenticated":
		return p.AppsGetAuthenticated, true
	case "AppsGetBySlug":
		return p.AppsGetBySlug, true
	case "AppsGetSubscriptionPlanForAccount":
		return p.AppsGetSubscriptionPlanForAccount, true
	case "AppsGetSubscriptionPlanForAccountStubbed":
		return p.AppsGetSubscriptionPlanForAccountStubbed, true
	case "AppsGetWebhookConfigForApp":
		return p.AppsGetWebhookConfigForApp, true
	case "AppsGetWebhookDelivery":
		return p.AppsGetWebhookDelivery, true
	case "AppsListAccountsForPlan":
		return p.AppsListAccountsForPlan, true
	case "AppsListAccountsForPlanStubbed":
		return p.AppsListAccountsForPlanStubbed, true
	case "AppsListInstallationReposForAuthenticatedUser":
		return p.AppsListInstallationReposForAuthenticatedUser, true
	case "AppsListPlans":
		return p.AppsListPlans, true
	case "AppsListPlansStubbed":
		return p.AppsListPlansStubbed, true
	case "AppsListReposAccessibleToInstallation":
		return p.AppsListReposAccessibleToInstallation, true
	case "AppsListSubscriptionsForAuthenticatedUser":
		return p.AppsListSubscriptionsForAuthenticatedUser, true
	case "AppsListSubscriptionsForAuthenticatedUserStubbed":
		return p.AppsListSubscriptionsForAuthenticatedUserStubbed, true
	case "AppsListWebhookDeliveries":
		return p.AppsListWebhookDeliveries, true
	case "AppsRedeliverWebhookDelivery":
		return p.AppsRedeliverWebhookDelivery, true
	case "AppsRemoveRepoFromInstallation":
		return p.AppsRemoveRepoFromInstallation, true
	case "AppsResetToken":
		return p.AppsResetToken, true
	case "AppsRevokeInstallationAccessToken":
		return p.AppsRevokeInstallationAccessToken, true
	case "AppsScopeToken":
		return p.AppsScopeToken, true
	case "AppsSuspendInstallation":
		return p.AppsSuspendInstallation, true
	case "AppsUnsuspendInstallation":
		return p.AppsUnsuspendInstallation, true
	case "AppsUpdateWebhookConfigForApp":
		return p.AppsUpdateWebhookConfigForApp, true
	case "BillingGetGithubActionsBillingGhe":
		return p.BillingGetGithubActionsBillingGhe, true
	case "BillingGetGithubActionsBillingOrg":
		return p.BillingGetGithubActionsBillingOrg, true
	case "BillingGetGithubActionsBillingUser":
		return p.BillingGetGithubActionsBillingUser, true
	case "BillingGetGithubPackagesBillingGhe":
		return p.BillingGetGithubPackagesBillingGhe, true
	case "BillingGetGithubPackagesBillingOrg":
		return p.BillingGetGithubPackagesBillingOrg, true
	case "BillingGetGithubPackagesBillingUser":
		return p.BillingGetGithubPackagesBillingUser, true
	case "BillingGetSharedStorageBillingGhe":
		return p.BillingGetSharedStorageBillingGhe, true
	case "BillingGetSharedStorageBillingOrg":
		return p.BillingGetSharedStorageBillingOrg, true
	case "BillingGetSharedStorageBillingUser":
		return p.BillingGetSharedStorageBillingUser, true
	case "ChecksCreateSuite":
		return p.ChecksCreateSuite, true
	case "ChecksGet":
		return p.ChecksGet, true
	case "ChecksGetSuite":
		return p.ChecksGetSuite, true
	case "ChecksListAnnotations":
		return p.ChecksListAnnotations, true
	case "ChecksListForRef":
		return p.ChecksListForRef, true
	case "ChecksListForSuite":
		return p.ChecksListForSuite, true
	case "ChecksListSuitesForRef":
		return p.ChecksListSuitesForRef, true
	case "ChecksRerequestSuite":
		return p.ChecksRerequestSuite, true
	case "ChecksSetSuitesPreferences":
		return p.ChecksSetSuitesPreferences, true
	case "CodeScanningDeleteAnalysis":
		return p.CodeScanningDeleteAnalysis, true
	case "CodeScanningGetAlert":
		return p.CodeScanningGetAlert, true
	case "CodeScanningGetAnalysis":
		return p.CodeScanningGetAnalysis, true
	case "CodeScanningGetSarif":
		return p.CodeScanningGetSarif, true
	case "CodeScanningListAlertInstances":
		return p.CodeScanningListAlertInstances, true
	case "CodeScanningListAlertsForRepo":
		return p.CodeScanningListAlertsForRepo, true
	case "CodeScanningListRecentAnalyses":
		return p.CodeScanningListRecentAnalyses, true
	case "CodeScanningUpdateAlert":
		return p.CodeScanningUpdateAlert, true
	case "CodeScanningUploadSarif":
		return p.CodeScanningUploadSarif, true
	case "CodesOfConductGetAllCodesOfConduct":
		return p.CodesOfConductGetAllCodesOfConduct, true
	case "CodesOfConductGetConductCode":
		return p.CodesOfConductGetConductCode, true
	case "EmojisGet":
		return p.EmojisGet, true
	case "EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise":
		return p.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise":
		return p.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise, true
	case "EnterpriseAdminCreateRegistrationTokenForEnterprise":
		return p.EnterpriseAdminCreateRegistrationTokenForEnterprise, true
	case "EnterpriseAdminCreateRemoveTokenForEnterprise":
		return p.EnterpriseAdminCreateRemoveTokenForEnterprise, true
	case "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise":
		return p.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise, true
	case "EnterpriseAdminDeleteScimGroupFromEnterprise":
		return p.EnterpriseAdminDeleteScimGroupFromEnterprise, true
	case "EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise":
		return p.EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise, true
	case "EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise":
		return p.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise, true
	case "EnterpriseAdminDeleteUserFromEnterprise":
		return p.EnterpriseAdminDeleteUserFromEnterprise, true
	case "EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise":
		return p.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise, true
	case "EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise":
		return p.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise, true
	case "EnterpriseAdminGetAllowedActionsEnterprise":
		return p.EnterpriseAdminGetAllowedActionsEnterprise, true
	case "EnterpriseAdminGetAuditLog":
		return p.EnterpriseAdminGetAuditLog, true
	case "EnterpriseAdminGetGithubActionsPermissionsEnterprise":
		return p.EnterpriseAdminGetGithubActionsPermissionsEnterprise, true
	case "EnterpriseAdminGetProvisioningInformationForEnterpriseGroup":
		return p.EnterpriseAdminGetProvisioningInformationForEnterpriseGroup, true
	case "EnterpriseAdminGetProvisioningInformationForEnterpriseUser":
		return p.EnterpriseAdminGetProvisioningInformationForEnterpriseUser, true
	case "EnterpriseAdminGetSelfHostedRunnerForEnterprise":
		return p.EnterpriseAdminGetSelfHostedRunnerForEnterprise, true
	case "EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise":
		return p.EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise, true
	case "EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise":
		return p.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "EnterpriseAdminListProvisionedGroupsEnterprise":
		return p.EnterpriseAdminListProvisionedGroupsEnterprise, true
	case "EnterpriseAdminListProvisionedIdentitiesEnterprise":
		return p.EnterpriseAdminListProvisionedIdentitiesEnterprise, true
	case "EnterpriseAdminListRunnerApplicationsForEnterprise":
		return p.EnterpriseAdminListRunnerApplicationsForEnterprise, true
	case "EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise":
		return p.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise, true
	case "EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise":
		return p.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise, true
	case "EnterpriseAdminListSelfHostedRunnersForEnterprise":
		return p.EnterpriseAdminListSelfHostedRunnersForEnterprise, true
	case "EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise":
		return p.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise, true
	case "EnterpriseAdminProvisionAndInviteEnterpriseGroup":
		return p.EnterpriseAdminProvisionAndInviteEnterpriseGroup, true
	case "EnterpriseAdminProvisionAndInviteEnterpriseUser":
		return p.EnterpriseAdminProvisionAndInviteEnterpriseUser, true
	case "EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise":
		return p.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise":
		return p.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise, true
	case "EnterpriseAdminSetAllowedActionsEnterprise":
		return p.EnterpriseAdminSetAllowedActionsEnterprise, true
	case "EnterpriseAdminSetGithubActionsPermissionsEnterprise":
		return p.EnterpriseAdminSetGithubActionsPermissionsEnterprise, true
	case "EnterpriseAdminSetInformationForProvisionedEnterpriseGroup":
		return p.EnterpriseAdminSetInformationForProvisionedEnterpriseGroup, true
	case "EnterpriseAdminSetInformationForProvisionedEnterpriseUser":
		return p.EnterpriseAdminSetInformationForProvisionedEnterpriseUser, true
	case "EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise":
		return p.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise":
		return p.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise, true
	case "EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise":
		return p.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise, true
	case "EnterpriseAdminUpdateAttributeForEnterpriseGroup":
		return p.EnterpriseAdminUpdateAttributeForEnterpriseGroup, true
	case "EnterpriseAdminUpdateAttributeForEnterpriseUser":
		return p.EnterpriseAdminUpdateAttributeForEnterpriseUser, true
	case "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise":
		return p.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise, true
	case "GistsCheckIsStarred":
		return p.GistsCheckIsStarred, true
	case "GistsCreate":
		return p.GistsCreate, true
	case "GistsCreateComment":
		return p.GistsCreateComment, true
	case "GistsDelete":
		return p.GistsDelete, true
	case "GistsDeleteComment":
		return p.GistsDeleteComment, true
	case "GistsFork":
		return p.GistsFork, true
	case "GistsGet":
		return p.GistsGet, true
	case "GistsGetComment":
		return p.GistsGetComment, true
	case "GistsGetRevision":
		return p.GistsGetRevision, true
	case "GistsList":
		return p.GistsList, true
	case "GistsListComments":
		return p.GistsListComments, true
	case "GistsListCommits":
		return p.GistsListCommits, true
	case "GistsListForUser":
		return p.GistsListForUser, true
	case "GistsListForks":
		return p.GistsListForks, true
	case "GistsListPublic":
		return p.GistsListPublic, true
	case "GistsListStarred":
		return p.GistsListStarred, true
	case "GistsStar":
		return p.GistsStar, true
	case "GistsUnstar":
		return p.GistsUnstar, true
	case "GistsUpdateComment":
		return p.GistsUpdateComment, true
	case "GitCreateBlob":
		return p.GitCreateBlob, true
	case "GitCreateCommit":
		return p.GitCreateCommit, true
	case "GitCreateRef":
		return p.GitCreateRef, true
	case "GitCreateTag":
		return p.GitCreateTag, true
	case "GitCreateTree":
		return p.GitCreateTree, true
	case "GitDeleteRef":
		return p.GitDeleteRef, true
	case "GitGetBlob":
		return p.GitGetBlob, true
	case "GitGetCommit":
		return p.GitGetCommit, true
	case "GitGetRef":
		return p.GitGetRef, true
	case "GitGetTag":
		return p.GitGetTag, true
	case "GitGetTree":
		return p.GitGetTree, true
	case "GitListMatchingRefs":
		return p.GitListMatchingRefs, true
	case "GitUpdateRef":
		return p.GitUpdateRef, true
	case "GitignoreGetAllTemplates":
		return p.GitignoreGetAllTemplates, true
	case "GitignoreGetTemplate":
		return p.GitignoreGetTemplate, true
	case "InteractionsRemoveRestrictionsForAuthenticatedUser":
		return p.InteractionsRemoveRestrictionsForAuthenticatedUser, true
	case "InteractionsRemoveRestrictionsForOrg":
		return p.InteractionsRemoveRestrictionsForOrg, true
	case "InteractionsRemoveRestrictionsForRepo":
		return p.InteractionsRemoveRestrictionsForRepo, true
	case "InteractionsSetRestrictionsForAuthenticatedUser":
		return p.InteractionsSetRestrictionsForAuthenticatedUser, true
	case "InteractionsSetRestrictionsForOrg":
		return p.InteractionsSetRestrictionsForOrg, true
	case "InteractionsSetRestrictionsForRepo":
		return p.InteractionsSetRestrictionsForRepo, true
	case "IssuesAddAssignees":
		return p.IssuesAddAssignees, true
	case "IssuesCheckUserCanBeAssigned":
		return p.IssuesCheckUserCanBeAssigned, true
	case "IssuesCreate":
		return p.IssuesCreate, true
	case "IssuesCreateComment":
		return p.IssuesCreateComment, true
	case "IssuesCreateLabel":
		return p.IssuesCreateLabel, true
	case "IssuesCreateMilestone":
		return p.IssuesCreateMilestone, true
	case "IssuesDeleteComment":
		return p.IssuesDeleteComment, true
	case "IssuesDeleteLabel":
		return p.IssuesDeleteLabel, true
	case "IssuesDeleteMilestone":
		return p.IssuesDeleteMilestone, true
	case "IssuesGet":
		return p.IssuesGet, true
	case "IssuesGetComment":
		return p.IssuesGetComment, true
	case "IssuesGetEvent":
		return p.IssuesGetEvent, true
	case "IssuesGetLabel":
		return p.IssuesGetLabel, true
	case "IssuesGetMilestone":
		return p.IssuesGetMilestone, true
	case "IssuesList":
		return p.IssuesList, true
	case "IssuesListAssignees":
		return p.IssuesListAssignees, true
	case "IssuesListComments":
		return p.IssuesListComments, true
	case "IssuesListCommentsForRepo":
		return p.IssuesListCommentsForRepo, true
	case "IssuesListEventsForRepo":
		return p.IssuesListEventsForRepo, true
	case "IssuesListForAuthenticatedUser":
		return p.IssuesListForAuthenticatedUser, true
	case "IssuesListForOrg":
		return p.IssuesListForOrg, true
	case "IssuesListForRepo":
		return p.IssuesListForRepo, true
	case "IssuesListLabelsForMilestone":
		return p.IssuesListLabelsForMilestone, true
	case "IssuesListLabelsForRepo":
		return p.IssuesListLabelsForRepo, true
	case "IssuesListLabelsOnIssue":
		return p.IssuesListLabelsOnIssue, true
	case "IssuesListMilestones":
		return p.IssuesListMilestones, true
	case "IssuesLock":
		return p.IssuesLock, true
	case "IssuesRemoveAllLabels":
		return p.IssuesRemoveAllLabels, true
	case "IssuesRemoveAssignees":
		return p.IssuesRemoveAssignees, true
	case "IssuesRemoveLabel":
		return p.IssuesRemoveLabel, true
	case "IssuesUnlock":
		return p.IssuesUnlock, true
	case "IssuesUpdate":
		return p.IssuesUpdate, true
	case "IssuesUpdateComment":
		return p.IssuesUpdateComment, true
	case "IssuesUpdateLabel":
		return p.IssuesUpdateLabel, true
	case "IssuesUpdateMilestone":
		return p.IssuesUpdateMilestone, true
	case "LicensesGet":
		return p.LicensesGet, true
	case "LicensesGetAllCommonlyUsed":
		return p.LicensesGetAllCommonlyUsed, true
	case "LicensesGetForRepo":
		return p.LicensesGetForRepo, true
	case "MarkdownRender":
		return p.MarkdownRender, true
	case "MarkdownRenderRaw":
		return p.MarkdownRenderRaw, true
	case "MetaGet":
		return p.MetaGet, true
	case "MetaGetOctocat":
		return p.MetaGetOctocat, true
	case "MetaGetZen":
		return p.MetaGetZen, true
	case "MetaRoot":
		return p.MetaRoot, true
	case "MigrationsCancelImport":
		return p.MigrationsCancelImport, true
	case "MigrationsDeleteArchiveForAuthenticatedUser":
		return p.MigrationsDeleteArchiveForAuthenticatedUser, true
	case "MigrationsDeleteArchiveForOrg":
		return p.MigrationsDeleteArchiveForOrg, true
	case "MigrationsDownloadArchiveForOrg":
		return p.MigrationsDownloadArchiveForOrg, true
	case "MigrationsGetArchiveForAuthenticatedUser":
		return p.MigrationsGetArchiveForAuthenticatedUser, true
	case "MigrationsGetCommitAuthors":
		return p.MigrationsGetCommitAuthors, true
	case "MigrationsGetImportStatus":
		return p.MigrationsGetImportStatus, true
	case "MigrationsGetLargeFiles":
		return p.MigrationsGetLargeFiles, true
	case "MigrationsGetStatusForAuthenticatedUser":
		return p.MigrationsGetStatusForAuthenticatedUser, true
	case "MigrationsGetStatusForOrg":
		return p.MigrationsGetStatusForOrg, true
	case "MigrationsListForAuthenticatedUser":
		return p.MigrationsListForAuthenticatedUser, true
	case "MigrationsListForOrg":
		return p.MigrationsListForOrg, true
	case "MigrationsListReposForOrg":
		return p.MigrationsListReposForOrg, true
	case "MigrationsListReposForUser":
		return p.MigrationsListReposForUser, true
	case "MigrationsMapCommitAuthor":
		return p.MigrationsMapCommitAuthor, true
	case "MigrationsSetLfsPreference":
		return p.MigrationsSetLfsPreference, true
	case "MigrationsStartForAuthenticatedUser":
		return p.MigrationsStartForAuthenticatedUser, true
	case "MigrationsStartForOrg":
		return p.MigrationsStartForOrg, true
	case "MigrationsStartImport":
		return p.MigrationsStartImport, true
	case "MigrationsUnlockRepoForAuthenticatedUser":
		return p.MigrationsUnlockRepoForAuthenticatedUser, true
	case "MigrationsUnlockRepoForOrg":
		return p.MigrationsUnlockRepoForOrg, true
	case "MigrationsUpdateImport":
		return p.MigrationsUpdateImport, true
	case "OAuthAuthorizationsCreateAuthorization":
		return p.OAuthAuthorizationsCreateAuthorization, true
	case "OAuthAuthorizationsDeleteAuthorization":
		return p.OAuthAuthorizationsDeleteAuthorization, true
	case "OAuthAuthorizationsDeleteGrant":
		return p.OAuthAuthorizationsDeleteGrant, true
	case "OAuthAuthorizationsGetAuthorization":
		return p.OAuthAuthorizationsGetAuthorization, true
	case "OAuthAuthorizationsGetGrant":
		return p.OAuthAuthorizationsGetGrant, true
	case "OAuthAuthorizationsGetOrCreateAuthorizationForApp":
		return p.OAuthAuthorizationsGetOrCreateAuthorizationForApp, true
	case "OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint":
		return p.OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint, true
	case "OAuthAuthorizationsListAuthorizations":
		return p.OAuthAuthorizationsListAuthorizations, true
	case "OAuthAuthorizationsListGrants":
		return p.OAuthAuthorizationsListGrants, true
	case "OAuthAuthorizationsUpdateAuthorization":
		return p.OAuthAuthorizationsUpdateAuthorization, true
	case "OrgsBlockUser":
		return p.OrgsBlockUser, true
	case "OrgsCancelInvitation":
		return p.OrgsCancelInvitation, true
	case "OrgsCheckBlockedUser":
		return p.OrgsCheckBlockedUser, true
	case "OrgsCheckMembershipForUser":
		return p.OrgsCheckMembershipForUser, true
	case "OrgsCheckPublicMembershipForUser":
		return p.OrgsCheckPublicMembershipForUser, true
	case "OrgsConvertMemberToOutsideCollaborator":
		return p.OrgsConvertMemberToOutsideCollaborator, true
	case "OrgsCreateInvitation":
		return p.OrgsCreateInvitation, true
	case "OrgsCreateWebhook":
		return p.OrgsCreateWebhook, true
	case "OrgsDeleteWebhook":
		return p.OrgsDeleteWebhook, true
	case "OrgsGet":
		return p.OrgsGet, true
	case "OrgsGetAuditLog":
		return p.OrgsGetAuditLog, true
	case "OrgsGetMembershipForAuthenticatedUser":
		return p.OrgsGetMembershipForAuthenticatedUser, true
	case "OrgsGetMembershipForUser":
		return p.OrgsGetMembershipForUser, true
	case "OrgsGetWebhook":
		return p.OrgsGetWebhook, true
	case "OrgsGetWebhookConfigForOrg":
		return p.OrgsGetWebhookConfigForOrg, true
	case "OrgsGetWebhookDelivery":
		return p.OrgsGetWebhookDelivery, true
	case "OrgsList":
		return p.OrgsList, true
	case "OrgsListBlockedUsers":
		return p.OrgsListBlockedUsers, true
	case "OrgsListFailedInvitations":
		return p.OrgsListFailedInvitations, true
	case "OrgsListForAuthenticatedUser":
		return p.OrgsListForAuthenticatedUser, true
	case "OrgsListForUser":
		return p.OrgsListForUser, true
	case "OrgsListInvitationTeams":
		return p.OrgsListInvitationTeams, true
	case "OrgsListMembers":
		return p.OrgsListMembers, true
	case "OrgsListMembershipsForAuthenticatedUser":
		return p.OrgsListMembershipsForAuthenticatedUser, true
	case "OrgsListOutsideCollaborators":
		return p.OrgsListOutsideCollaborators, true
	case "OrgsListPendingInvitations":
		return p.OrgsListPendingInvitations, true
	case "OrgsListPublicMembers":
		return p.OrgsListPublicMembers, true
	case "OrgsListSamlSSOAuthorizations":
		return p.OrgsListSamlSSOAuthorizations, true
	case "OrgsListWebhookDeliveries":
		return p.OrgsListWebhookDeliveries, true
	case "OrgsListWebhooks":
		return p.OrgsListWebhooks, true
	case "OrgsPingWebhook":
		return p.OrgsPingWebhook, true
	case "OrgsRedeliverWebhookDelivery":
		return p.OrgsRedeliverWebhookDelivery, true
	case "OrgsRemoveMember":
		return p.OrgsRemoveMember, true
	case "OrgsRemoveMembershipForUser":
		return p.OrgsRemoveMembershipForUser, true
	case "OrgsRemoveOutsideCollaborator":
		return p.OrgsRemoveOutsideCollaborator, true
	case "OrgsRemovePublicMembershipForAuthenticatedUser":
		return p.OrgsRemovePublicMembershipForAuthenticatedUser, true
	case "OrgsRemoveSamlSSOAuthorization":
		return p.OrgsRemoveSamlSSOAuthorization, true
	case "OrgsSetMembershipForUser":
		return p.OrgsSetMembershipForUser, true
	case "OrgsSetPublicMembershipForAuthenticatedUser":
		return p.OrgsSetPublicMembershipForAuthenticatedUser, true
	case "OrgsUnblockUser":
		return p.OrgsUnblockUser, true
	case "OrgsUpdateMembershipForAuthenticatedUser":
		return p.OrgsUpdateMembershipForAuthenticatedUser, true
	case "OrgsUpdateWebhook":
		return p.OrgsUpdateWebhook, true
	case "OrgsUpdateWebhookConfigForOrg":
		return p.OrgsUpdateWebhookConfigForOrg, true
	case "PackagesDeletePackageForAuthenticatedUser":
		return p.PackagesDeletePackageForAuthenticatedUser, true
	case "PackagesDeletePackageForOrg":
		return p.PackagesDeletePackageForOrg, true
	case "PackagesDeletePackageForUser":
		return p.PackagesDeletePackageForUser, true
	case "PackagesDeletePackageVersionForAuthenticatedUser":
		return p.PackagesDeletePackageVersionForAuthenticatedUser, true
	case "PackagesDeletePackageVersionForOrg":
		return p.PackagesDeletePackageVersionForOrg, true
	case "PackagesDeletePackageVersionForUser":
		return p.PackagesDeletePackageVersionForUser, true
	case "PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser":
		return p.PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser, true
	case "PackagesGetAllPackageVersionsForPackageOwnedByOrg":
		return p.PackagesGetAllPackageVersionsForPackageOwnedByOrg, true
	case "PackagesGetAllPackageVersionsForPackageOwnedByUser":
		return p.PackagesGetAllPackageVersionsForPackageOwnedByUser, true
	case "PackagesGetPackageForAuthenticatedUser":
		return p.PackagesGetPackageForAuthenticatedUser, true
	case "PackagesGetPackageForOrganization":
		return p.PackagesGetPackageForOrganization, true
	case "PackagesGetPackageForUser":
		return p.PackagesGetPackageForUser, true
	case "PackagesGetPackageVersionForAuthenticatedUser":
		return p.PackagesGetPackageVersionForAuthenticatedUser, true
	case "PackagesGetPackageVersionForOrganization":
		return p.PackagesGetPackageVersionForOrganization, true
	case "PackagesGetPackageVersionForUser":
		return p.PackagesGetPackageVersionForUser, true
	case "PackagesListPackagesForAuthenticatedUser":
		return p.PackagesListPackagesForAuthenticatedUser, true
	case "PackagesListPackagesForOrganization":
		return p.PackagesListPackagesForOrganization, true
	case "PackagesListPackagesForUser":
		return p.PackagesListPackagesForUser, true
	case "PackagesRestorePackageForAuthenticatedUser":
		return p.PackagesRestorePackageForAuthenticatedUser, true
	case "PackagesRestorePackageForOrg":
		return p.PackagesRestorePackageForOrg, true
	case "PackagesRestorePackageForUser":
		return p.PackagesRestorePackageForUser, true
	case "PackagesRestorePackageVersionForAuthenticatedUser":
		return p.PackagesRestorePackageVersionForAuthenticatedUser, true
	case "PackagesRestorePackageVersionForOrg":
		return p.PackagesRestorePackageVersionForOrg, true
	case "PackagesRestorePackageVersionForUser":
		return p.PackagesRestorePackageVersionForUser, true
	case "ProjectsAddCollaborator":
		return p.ProjectsAddCollaborator, true
	case "ProjectsCreateColumn":
		return p.ProjectsCreateColumn, true
	case "ProjectsCreateForAuthenticatedUser":
		return p.ProjectsCreateForAuthenticatedUser, true
	case "ProjectsCreateForOrg":
		return p.ProjectsCreateForOrg, true
	case "ProjectsCreateForRepo":
		return p.ProjectsCreateForRepo, true
	case "ProjectsDelete":
		return p.ProjectsDelete, true
	case "ProjectsDeleteCard":
		return p.ProjectsDeleteCard, true
	case "ProjectsDeleteColumn":
		return p.ProjectsDeleteColumn, true
	case "ProjectsGet":
		return p.ProjectsGet, true
	case "ProjectsGetCard":
		return p.ProjectsGetCard, true
	case "ProjectsGetColumn":
		return p.ProjectsGetColumn, true
	case "ProjectsGetPermissionForUser":
		return p.ProjectsGetPermissionForUser, true
	case "ProjectsListCards":
		return p.ProjectsListCards, true
	case "ProjectsListCollaborators":
		return p.ProjectsListCollaborators, true
	case "ProjectsListColumns":
		return p.ProjectsListColumns, true
	case "ProjectsListForOrg":
		return p.ProjectsListForOrg, true
	case "ProjectsListForRepo":
		return p.ProjectsListForRepo, true
	case "ProjectsListForUser":
		return p.ProjectsListForUser, true
	case "ProjectsMoveCard":
		return p.ProjectsMoveCard, true
	case "ProjectsMoveColumn":
		return p.ProjectsMoveColumn, true
	case "ProjectsRemoveCollaborator":
		return p.ProjectsRemoveCollaborator, true
	case "ProjectsUpdate":
		return p.ProjectsUpdate, true
	case "ProjectsUpdateCard":
		return p.ProjectsUpdateCard, true
	case "ProjectsUpdateColumn":
		return p.ProjectsUpdateColumn, true
	case "PullsCheckIfMerged":
		return p.PullsCheckIfMerged, true
	case "PullsCreate":
		return p.PullsCreate, true
	case "PullsCreateReplyForReviewComment":
		return p.PullsCreateReplyForReviewComment, true
	case "PullsCreateReview":
		return p.PullsCreateReview, true
	case "PullsCreateReviewComment":
		return p.PullsCreateReviewComment, true
	case "PullsDeletePendingReview":
		return p.PullsDeletePendingReview, true
	case "PullsDeleteReviewComment":
		return p.PullsDeleteReviewComment, true
	case "PullsDismissReview":
		return p.PullsDismissReview, true
	case "PullsGet":
		return p.PullsGet, true
	case "PullsGetReview":
		return p.PullsGetReview, true
	case "PullsGetReviewComment":
		return p.PullsGetReviewComment, true
	case "PullsList":
		return p.PullsList, true
	case "PullsListCommentsForReview":
		return p.PullsListCommentsForReview, true
	case "PullsListCommits":
		return p.PullsListCommits, true
	case "PullsListFiles":
		return p.PullsListFiles, true
	case "PullsListRequestedReviewers":
		return p.PullsListRequestedReviewers, true
	case "PullsListReviewComments":
		return p.PullsListReviewComments, true
	case "PullsListReviewCommentsForRepo":
		return p.PullsListReviewCommentsForRepo, true
	case "PullsListReviews":
		return p.PullsListReviews, true
	case "PullsMerge":
		return p.PullsMerge, true
	case "PullsRemoveRequestedReviewers":
		return p.PullsRemoveRequestedReviewers, true
	case "PullsSubmitReview":
		return p.PullsSubmitReview, true
	case "PullsUpdate":
		return p.PullsUpdate, true
	case "PullsUpdateBranch":
		return p.PullsUpdateBranch, true
	case "PullsUpdateReview":
		return p.PullsUpdateReview, true
	case "PullsUpdateReviewComment":
		return p.PullsUpdateReviewComment, true
	case "RateLimitGet":
		return p.RateLimitGet, true
	case "ReactionsCreateForCommitComment":
		return p.ReactionsCreateForCommitComment, true
	case "ReactionsCreateForIssue":
		return p.ReactionsCreateForIssue, true
	case "ReactionsCreateForIssueComment":
		return p.ReactionsCreateForIssueComment, true
	case "ReactionsCreateForPullRequestReviewComment":
		return p.ReactionsCreateForPullRequestReviewComment, true
	case "ReactionsCreateForRelease":
		return p.ReactionsCreateForRelease, true
	case "ReactionsCreateForTeamDiscussionCommentInOrg":
		return p.ReactionsCreateForTeamDiscussionCommentInOrg, true
	case "ReactionsCreateForTeamDiscussionCommentLegacy":
		return p.ReactionsCreateForTeamDiscussionCommentLegacy, true
	case "ReactionsCreateForTeamDiscussionInOrg":
		return p.ReactionsCreateForTeamDiscussionInOrg, true
	case "ReactionsCreateForTeamDiscussionLegacy":
		return p.ReactionsCreateForTeamDiscussionLegacy, true
	case "ReactionsDeleteForCommitComment":
		return p.ReactionsDeleteForCommitComment, true
	case "ReactionsDeleteForIssue":
		return p.ReactionsDeleteForIssue, true
	case "ReactionsDeleteForIssueComment":
		return p.ReactionsDeleteForIssueComment, true
	case "ReactionsDeleteForPullRequestComment":
		return p.ReactionsDeleteForPullRequestComment, true
	case "ReactionsDeleteForTeamDiscussion":
		return p.ReactionsDeleteForTeamDiscussion, true
	case "ReactionsDeleteForTeamDiscussionComment":
		return p.ReactionsDeleteForTeamDiscussionComment, true
	case "ReactionsDeleteLegacy":
		return p.ReactionsDeleteLegacy, true
	case "ReactionsListForCommitComment":
		return p.ReactionsListForCommitComment, true
	case "ReactionsListForIssue":
		return p.ReactionsListForIssue, true
	case "ReactionsListForIssueComment":
		return p.ReactionsListForIssueComment, true
	case "ReactionsListForPullRequestReviewComment":
		return p.ReactionsListForPullRequestReviewComment, true
	case "ReactionsListForTeamDiscussionCommentInOrg":
		return p.ReactionsListForTeamDiscussionCommentInOrg, true
	case "ReactionsListForTeamDiscussionCommentLegacy":
		return p.ReactionsListForTeamDiscussionCommentLegacy, true
	case "ReactionsListForTeamDiscussionInOrg":
		return p.ReactionsListForTeamDiscussionInOrg, true
	case "ReactionsListForTeamDiscussionLegacy":
		return p.ReactionsListForTeamDiscussionLegacy, true
	case "ReposAcceptInvitation":
		return p.ReposAcceptInvitation, true
	case "ReposAddAppAccessRestrictions":
		return p.ReposAddAppAccessRestrictions, true
	case "ReposAddCollaborator":
		return p.ReposAddCollaborator, true
	case "ReposAddStatusCheckContexts":
		return p.ReposAddStatusCheckContexts, true
	case "ReposAddTeamAccessRestrictions":
		return p.ReposAddTeamAccessRestrictions, true
	case "ReposAddUserAccessRestrictions":
		return p.ReposAddUserAccessRestrictions, true
	case "ReposCheckCollaborator":
		return p.ReposCheckCollaborator, true
	case "ReposCheckVulnerabilityAlerts":
		return p.ReposCheckVulnerabilityAlerts, true
	case "ReposCompareCommits":
		return p.ReposCompareCommits, true
	case "ReposCreateAutolink":
		return p.ReposCreateAutolink, true
	case "ReposCreateCommitComment":
		return p.ReposCreateCommitComment, true
	case "ReposCreateCommitSignatureProtection":
		return p.ReposCreateCommitSignatureProtection, true
	case "ReposCreateCommitStatus":
		return p.ReposCreateCommitStatus, true
	case "ReposCreateDeployKey":
		return p.ReposCreateDeployKey, true
	case "ReposCreateDeployment":
		return p.ReposCreateDeployment, true
	case "ReposCreateDeploymentStatus":
		return p.ReposCreateDeploymentStatus, true
	case "ReposCreateDispatchEvent":
		return p.ReposCreateDispatchEvent, true
	case "ReposCreateForAuthenticatedUser":
		return p.ReposCreateForAuthenticatedUser, true
	case "ReposCreateFork":
		return p.ReposCreateFork, true
	case "ReposCreateInOrg":
		return p.ReposCreateInOrg, true
	case "ReposCreateOrUpdateFileContents":
		return p.ReposCreateOrUpdateFileContents, true
	case "ReposCreatePagesSite":
		return p.ReposCreatePagesSite, true
	case "ReposCreateRelease":
		return p.ReposCreateRelease, true
	case "ReposCreateUsingTemplate":
		return p.ReposCreateUsingTemplate, true
	case "ReposCreateWebhook":
		return p.ReposCreateWebhook, true
	case "ReposDeclineInvitation":
		return p.ReposDeclineInvitation, true
	case "ReposDelete":
		return p.ReposDelete, true
	case "ReposDeleteAccessRestrictions":
		return p.ReposDeleteAccessRestrictions, true
	case "ReposDeleteAdminBranchProtection":
		return p.ReposDeleteAdminBranchProtection, true
	case "ReposDeleteAnEnvironment":
		return p.ReposDeleteAnEnvironment, true
	case "ReposDeleteAutolink":
		return p.ReposDeleteAutolink, true
	case "ReposDeleteBranchProtection":
		return p.ReposDeleteBranchProtection, true
	case "ReposDeleteCommitComment":
		return p.ReposDeleteCommitComment, true
	case "ReposDeleteCommitSignatureProtection":
		return p.ReposDeleteCommitSignatureProtection, true
	case "ReposDeleteDeployKey":
		return p.ReposDeleteDeployKey, true
	case "ReposDeleteDeployment":
		return p.ReposDeleteDeployment, true
	case "ReposDeleteFile":
		return p.ReposDeleteFile, true
	case "ReposDeleteInvitation":
		return p.ReposDeleteInvitation, true
	case "ReposDeletePagesSite":
		return p.ReposDeletePagesSite, true
	case "ReposDeletePullRequestReviewProtection":
		return p.ReposDeletePullRequestReviewProtection, true
	case "ReposDeleteRelease":
		return p.ReposDeleteRelease, true
	case "ReposDeleteReleaseAsset":
		return p.ReposDeleteReleaseAsset, true
	case "ReposDeleteWebhook":
		return p.ReposDeleteWebhook, true
	case "ReposDisableAutomatedSecurityFixes":
		return p.ReposDisableAutomatedSecurityFixes, true
	case "ReposDisableLfsForRepo":
		return p.ReposDisableLfsForRepo, true
	case "ReposDisableVulnerabilityAlerts":
		return p.ReposDisableVulnerabilityAlerts, true
	case "ReposDownloadTarballArchive":
		return p.ReposDownloadTarballArchive, true
	case "ReposDownloadZipballArchive":
		return p.ReposDownloadZipballArchive, true
	case "ReposEnableAutomatedSecurityFixes":
		return p.ReposEnableAutomatedSecurityFixes, true
	case "ReposEnableLfsForRepo":
		return p.ReposEnableLfsForRepo, true
	case "ReposEnableVulnerabilityAlerts":
		return p.ReposEnableVulnerabilityAlerts, true
	case "ReposGet":
		return p.ReposGet, true
	case "ReposGetAccessRestrictions":
		return p.ReposGetAccessRestrictions, true
	case "ReposGetAdminBranchProtection":
		return p.ReposGetAdminBranchProtection, true
	case "ReposGetAllStatusCheckContexts":
		return p.ReposGetAllStatusCheckContexts, true
	case "ReposGetAllTopics":
		return p.ReposGetAllTopics, true
	case "ReposGetAppsWithAccessToProtectedBranch":
		return p.ReposGetAppsWithAccessToProtectedBranch, true
	case "ReposGetAutolink":
		return p.ReposGetAutolink, true
	case "ReposGetBranch":
		return p.ReposGetBranch, true
	case "ReposGetBranchProtection":
		return p.ReposGetBranchProtection, true
	case "ReposGetClones":
		return p.ReposGetClones, true
	case "ReposGetCodeFrequencyStats":
		return p.ReposGetCodeFrequencyStats, true
	case "ReposGetCollaboratorPermissionLevel":
		return p.ReposGetCollaboratorPermissionLevel, true
	case "ReposGetCombinedStatusForRef":
		return p.ReposGetCombinedStatusForRef, true
	case "ReposGetCommit":
		return p.ReposGetCommit, true
	case "ReposGetCommitActivityStats":
		return p.ReposGetCommitActivityStats, true
	case "ReposGetCommitComment":
		return p.ReposGetCommitComment, true
	case "ReposGetCommitSignatureProtection":
		return p.ReposGetCommitSignatureProtection, true
	case "ReposGetCommunityProfileMetrics":
		return p.ReposGetCommunityProfileMetrics, true
	case "ReposGetContributorsStats":
		return p.ReposGetContributorsStats, true
	case "ReposGetDeployKey":
		return p.ReposGetDeployKey, true
	case "ReposGetDeployment":
		return p.ReposGetDeployment, true
	case "ReposGetDeploymentStatus":
		return p.ReposGetDeploymentStatus, true
	case "ReposGetLatestPagesBuild":
		return p.ReposGetLatestPagesBuild, true
	case "ReposGetLatestRelease":
		return p.ReposGetLatestRelease, true
	case "ReposGetPages":
		return p.ReposGetPages, true
	case "ReposGetPagesBuild":
		return p.ReposGetPagesBuild, true
	case "ReposGetPagesHealthCheck":
		return p.ReposGetPagesHealthCheck, true
	case "ReposGetParticipationStats":
		return p.ReposGetParticipationStats, true
	case "ReposGetPullRequestReviewProtection":
		return p.ReposGetPullRequestReviewProtection, true
	case "ReposGetPunchCardStats":
		return p.ReposGetPunchCardStats, true
	case "ReposGetReadme":
		return p.ReposGetReadme, true
	case "ReposGetReadmeInDirectory":
		return p.ReposGetReadmeInDirectory, true
	case "ReposGetRelease":
		return p.ReposGetRelease, true
	case "ReposGetReleaseAsset":
		return p.ReposGetReleaseAsset, true
	case "ReposGetReleaseByTag":
		return p.ReposGetReleaseByTag, true
	case "ReposGetStatusChecksProtection":
		return p.ReposGetStatusChecksProtection, true
	case "ReposGetTeamsWithAccessToProtectedBranch":
		return p.ReposGetTeamsWithAccessToProtectedBranch, true
	case "ReposGetTopPaths":
		return p.ReposGetTopPaths, true
	case "ReposGetTopReferrers":
		return p.ReposGetTopReferrers, true
	case "ReposGetUsersWithAccessToProtectedBranch":
		return p.ReposGetUsersWithAccessToProtectedBranch, true
	case "ReposGetViews":
		return p.ReposGetViews, true
	case "ReposGetWebhook":
		return p.ReposGetWebhook, true
	case "ReposGetWebhookConfigForRepo":
		return p.ReposGetWebhookConfigForRepo, true
	case "ReposGetWebhookDelivery":
		return p.ReposGetWebhookDelivery, true
	case "ReposListAutolinks":
		return p.ReposListAutolinks, true
	case "ReposListBranches":
		return p.ReposListBranches, true
	case "ReposListBranchesForHeadCommit":
		return p.ReposListBranchesForHeadCommit, true
	case "ReposListCollaborators":
		return p.ReposListCollaborators, true
	case "ReposListCommentsForCommit":
		return p.ReposListCommentsForCommit, true
	case "ReposListCommitCommentsForRepo":
		return p.ReposListCommitCommentsForRepo, true
	case "ReposListCommitStatusesForRef":
		return p.ReposListCommitStatusesForRef, true
	case "ReposListCommits":
		return p.ReposListCommits, true
	case "ReposListContributors":
		return p.ReposListContributors, true
	case "ReposListDeployKeys":
		return p.ReposListDeployKeys, true
	case "ReposListDeploymentStatuses":
		return p.ReposListDeploymentStatuses, true
	case "ReposListDeployments":
		return p.ReposListDeployments, true
	case "ReposListForAuthenticatedUser":
		return p.ReposListForAuthenticatedUser, true
	case "ReposListForOrg":
		return p.ReposListForOrg, true
	case "ReposListForUser":
		return p.ReposListForUser, true
	case "ReposListForks":
		return p.ReposListForks, true
	case "ReposListInvitations":
		return p.ReposListInvitations, true
	case "ReposListInvitationsForAuthenticatedUser":
		return p.ReposListInvitationsForAuthenticatedUser, true
	case "ReposListLanguages":
		return p.ReposListLanguages, true
	case "ReposListPagesBuilds":
		return p.ReposListPagesBuilds, true
	case "ReposListPublic":
		return p.ReposListPublic, true
	case "ReposListPullRequestsAssociatedWithCommit":
		return p.ReposListPullRequestsAssociatedWithCommit, true
	case "ReposListReleaseAssets":
		return p.ReposListReleaseAssets, true
	case "ReposListReleases":
		return p.ReposListReleases, true
	case "ReposListTags":
		return p.ReposListTags, true
	case "ReposListTeams":
		return p.ReposListTeams, true
	case "ReposListWebhookDeliveries":
		return p.ReposListWebhookDeliveries, true
	case "ReposListWebhooks":
		return p.ReposListWebhooks, true
	case "ReposMerge":
		return p.ReposMerge, true
	case "ReposMergeUpstream":
		return p.ReposMergeUpstream, true
	case "ReposPingWebhook":
		return p.ReposPingWebhook, true
	case "ReposRedeliverWebhookDelivery":
		return p.ReposRedeliverWebhookDelivery, true
	case "ReposRemoveAppAccessRestrictions":
		return p.ReposRemoveAppAccessRestrictions, true
	case "ReposRemoveCollaborator":
		return p.ReposRemoveCollaborator, true
	case "ReposRemoveStatusCheckContexts":
		return p.ReposRemoveStatusCheckContexts, true
	case "ReposRemoveStatusCheckProtection":
		return p.ReposRemoveStatusCheckProtection, true
	case "ReposRemoveTeamAccessRestrictions":
		return p.ReposRemoveTeamAccessRestrictions, true
	case "ReposRemoveUserAccessRestrictions":
		return p.ReposRemoveUserAccessRestrictions, true
	case "ReposRenameBranch":
		return p.ReposRenameBranch, true
	case "ReposReplaceAllTopics":
		return p.ReposReplaceAllTopics, true
	case "ReposRequestPagesBuild":
		return p.ReposRequestPagesBuild, true
	case "ReposSetAdminBranchProtection":
		return p.ReposSetAdminBranchProtection, true
	case "ReposSetAppAccessRestrictions":
		return p.ReposSetAppAccessRestrictions, true
	case "ReposSetStatusCheckContexts":
		return p.ReposSetStatusCheckContexts, true
	case "ReposSetTeamAccessRestrictions":
		return p.ReposSetTeamAccessRestrictions, true
	case "ReposSetUserAccessRestrictions":
		return p.ReposSetUserAccessRestrictions, true
	case "ReposTestPushWebhook":
		return p.ReposTestPushWebhook, true
	case "ReposTransfer":
		return p.ReposTransfer, true
	case "ReposUpdate":
		return p.ReposUpdate, true
	case "ReposUpdateBranchProtection":
		return p.ReposUpdateBranchProtection, true
	case "ReposUpdateCommitComment":
		return p.ReposUpdateCommitComment, true
	case "ReposUpdateInvitation":
		return p.ReposUpdateInvitation, true
	case "ReposUpdatePullRequestReviewProtection":
		return p.ReposUpdatePullRequestReviewProtection, true
	case "ReposUpdateRelease":
		return p.ReposUpdateRelease, true
	case "ReposUpdateReleaseAsset":
		return p.ReposUpdateReleaseAsset, true
	case "ReposUpdateStatusCheckProtection":
		return p.ReposUpdateStatusCheckProtection, true
	case "ReposUpdateWebhook":
		return p.ReposUpdateWebhook, true
	case "ReposUpdateWebhookConfigForRepo":
		return p.ReposUpdateWebhookConfigForRepo, true
	case "ReposUploadReleaseAsset":
		return p.ReposUploadReleaseAsset, true
	case "ScimDeleteUserFromOrg":
		return p.ScimDeleteUserFromOrg, true
	case "SearchCode":
		return p.SearchCode, true
	case "SearchCommits":
		return p.SearchCommits, true
	case "SearchIssuesAndPullRequests":
		return p.SearchIssuesAndPullRequests, true
	case "SearchLabels":
		return p.SearchLabels, true
	case "SearchRepos":
		return p.SearchRepos, true
	case "SearchTopics":
		return p.SearchTopics, true
	case "SearchUsers":
		return p.SearchUsers, true
	case "SecretScanningGetAlert":
		return p.SecretScanningGetAlert, true
	case "SecretScanningListAlertsForOrg":
		return p.SecretScanningListAlertsForOrg, true
	case "SecretScanningListAlertsForRepo":
		return p.SecretScanningListAlertsForRepo, true
	case "SecretScanningUpdateAlert":
		return p.SecretScanningUpdateAlert, true
	case "TeamsAddMemberLegacy":
		return p.TeamsAddMemberLegacy, true
	case "TeamsAddOrUpdateMembershipForUserInOrg":
		return p.TeamsAddOrUpdateMembershipForUserInOrg, true
	case "TeamsAddOrUpdateMembershipForUserLegacy":
		return p.TeamsAddOrUpdateMembershipForUserLegacy, true
	case "TeamsAddOrUpdateProjectPermissionsInOrg":
		return p.TeamsAddOrUpdateProjectPermissionsInOrg, true
	case "TeamsAddOrUpdateProjectPermissionsLegacy":
		return p.TeamsAddOrUpdateProjectPermissionsLegacy, true
	case "TeamsAddOrUpdateRepoPermissionsInOrg":
		return p.TeamsAddOrUpdateRepoPermissionsInOrg, true
	case "TeamsAddOrUpdateRepoPermissionsLegacy":
		return p.TeamsAddOrUpdateRepoPermissionsLegacy, true
	case "TeamsCheckPermissionsForProjectInOrg":
		return p.TeamsCheckPermissionsForProjectInOrg, true
	case "TeamsCheckPermissionsForProjectLegacy":
		return p.TeamsCheckPermissionsForProjectLegacy, true
	case "TeamsCheckPermissionsForRepoInOrg":
		return p.TeamsCheckPermissionsForRepoInOrg, true
	case "TeamsCheckPermissionsForRepoLegacy":
		return p.TeamsCheckPermissionsForRepoLegacy, true
	case "TeamsCreate":
		return p.TeamsCreate, true
	case "TeamsCreateDiscussionCommentInOrg":
		return p.TeamsCreateDiscussionCommentInOrg, true
	case "TeamsCreateDiscussionCommentLegacy":
		return p.TeamsCreateDiscussionCommentLegacy, true
	case "TeamsCreateDiscussionInOrg":
		return p.TeamsCreateDiscussionInOrg, true
	case "TeamsCreateDiscussionLegacy":
		return p.TeamsCreateDiscussionLegacy, true
	case "TeamsCreateOrUpdateIdpGroupConnectionsInOrg":
		return p.TeamsCreateOrUpdateIdpGroupConnectionsInOrg, true
	case "TeamsCreateOrUpdateIdpGroupConnectionsLegacy":
		return p.TeamsCreateOrUpdateIdpGroupConnectionsLegacy, true
	case "TeamsDeleteDiscussionCommentInOrg":
		return p.TeamsDeleteDiscussionCommentInOrg, true
	case "TeamsDeleteDiscussionCommentLegacy":
		return p.TeamsDeleteDiscussionCommentLegacy, true
	case "TeamsDeleteDiscussionInOrg":
		return p.TeamsDeleteDiscussionInOrg, true
	case "TeamsDeleteDiscussionLegacy":
		return p.TeamsDeleteDiscussionLegacy, true
	case "TeamsDeleteInOrg":
		return p.TeamsDeleteInOrg, true
	case "TeamsDeleteLegacy":
		return p.TeamsDeleteLegacy, true
	case "TeamsGetByName":
		return p.TeamsGetByName, true
	case "TeamsGetDiscussionCommentInOrg":
		return p.TeamsGetDiscussionCommentInOrg, true
	case "TeamsGetDiscussionCommentLegacy":
		return p.TeamsGetDiscussionCommentLegacy, true
	case "TeamsGetDiscussionInOrg":
		return p.TeamsGetDiscussionInOrg, true
	case "TeamsGetDiscussionLegacy":
		return p.TeamsGetDiscussionLegacy, true
	case "TeamsGetLegacy":
		return p.TeamsGetLegacy, true
	case "TeamsGetMemberLegacy":
		return p.TeamsGetMemberLegacy, true
	case "TeamsGetMembershipForUserInOrg":
		return p.TeamsGetMembershipForUserInOrg, true
	case "TeamsGetMembershipForUserLegacy":
		return p.TeamsGetMembershipForUserLegacy, true
	case "TeamsList":
		return p.TeamsList, true
	case "TeamsListChildInOrg":
		return p.TeamsListChildInOrg, true
	case "TeamsListChildLegacy":
		return p.TeamsListChildLegacy, true
	case "TeamsListDiscussionCommentsInOrg":
		return p.TeamsListDiscussionCommentsInOrg, true
	case "TeamsListDiscussionCommentsLegacy":
		return p.TeamsListDiscussionCommentsLegacy, true
	case "TeamsListDiscussionsInOrg":
		return p.TeamsListDiscussionsInOrg, true
	case "TeamsListDiscussionsLegacy":
		return p.TeamsListDiscussionsLegacy, true
	case "TeamsListForAuthenticatedUser":
		return p.TeamsListForAuthenticatedUser, true
	case "TeamsListIdpGroupsForLegacy":
		return p.TeamsListIdpGroupsForLegacy, true
	case "TeamsListIdpGroupsForOrg":
		return p.TeamsListIdpGroupsForOrg, true
	case "TeamsListIdpGroupsInOrg":
		return p.TeamsListIdpGroupsInOrg, true
	case "TeamsListMembersInOrg":
		return p.TeamsListMembersInOrg, true
	case "TeamsListMembersLegacy":
		return p.TeamsListMembersLegacy, true
	case "TeamsListPendingInvitationsInOrg":
		return p.TeamsListPendingInvitationsInOrg, true
	case "TeamsListPendingInvitationsLegacy":
		return p.TeamsListPendingInvitationsLegacy, true
	case "TeamsListProjectsInOrg":
		return p.TeamsListProjectsInOrg, true
	case "TeamsListProjectsLegacy":
		return p.TeamsListProjectsLegacy, true
	case "TeamsListReposInOrg":
		return p.TeamsListReposInOrg, true
	case "TeamsListReposLegacy":
		return p.TeamsListReposLegacy, true
	case "TeamsRemoveMemberLegacy":
		return p.TeamsRemoveMemberLegacy, true
	case "TeamsRemoveMembershipForUserInOrg":
		return p.TeamsRemoveMembershipForUserInOrg, true
	case "TeamsRemoveMembershipForUserLegacy":
		return p.TeamsRemoveMembershipForUserLegacy, true
	case "TeamsRemoveProjectInOrg":
		return p.TeamsRemoveProjectInOrg, true
	case "TeamsRemoveProjectLegacy":
		return p.TeamsRemoveProjectLegacy, true
	case "TeamsRemoveRepoInOrg":
		return p.TeamsRemoveRepoInOrg, true
	case "TeamsRemoveRepoLegacy":
		return p.TeamsRemoveRepoLegacy, true
	case "TeamsUpdateDiscussionCommentInOrg":
		return p.TeamsUpdateDiscussionCommentInOrg, true
	case "TeamsUpdateDiscussionCommentLegacy":
		return p.TeamsUpdateDiscussionCommentLegacy, true
	case "TeamsUpdateDiscussionInOrg":
		return p.TeamsUpdateDiscussionInOrg, true
	case "TeamsUpdateDiscussionLegacy":
		return p.TeamsUpdateDiscussionLegacy, true
	case "TeamsUpdateInOrg":
		return p.TeamsUpdateInOrg, true
	case "TeamsUpdateLegacy":
		return p.TeamsUpdateLegacy, true
	case "UsersAddEmailForAuthenticated":
		return p.UsersAddEmailForAuthenticated, true
	case "UsersBlock":
		return p.UsersBlock, true
	case "UsersCheckBlocked":
		return p.UsersCheckBlocked, true
	case "UsersCheckFollowingForUser":
		return p.UsersCheckFollowingForUser, true
	case "UsersCheckPersonIsFollowedByAuthenticated":
		return p.UsersCheckPersonIsFollowedByAuthenticated, true
	case "UsersCreateGpgKeyForAuthenticated":
		return p.UsersCreateGpgKeyForAuthenticated, true
	case "UsersCreatePublicSSHKeyForAuthenticated":
		return p.UsersCreatePublicSSHKeyForAuthenticated, true
	case "UsersDeleteEmailForAuthenticated":
		return p.UsersDeleteEmailForAuthenticated, true
	case "UsersDeleteGpgKeyForAuthenticated":
		return p.UsersDeleteGpgKeyForAuthenticated, true
	case "UsersDeletePublicSSHKeyForAuthenticated":
		return p.UsersDeletePublicSSHKeyForAuthenticated, true
	case "UsersFollow":
		return p.UsersFollow, true
	case "UsersGetAuthenticated":
		return p.UsersGetAuthenticated, true
	case "UsersGetByUsername":
		return p.UsersGetByUsername, true
	case "UsersGetContextForUser":
		return p.UsersGetContextForUser, true
	case "UsersGetGpgKeyForAuthenticated":
		return p.UsersGetGpgKeyForAuthenticated, true
	case "UsersGetPublicSSHKeyForAuthenticated":
		return p.UsersGetPublicSSHKeyForAuthenticated, true
	case "UsersList":
		return p.UsersList, true
	case "UsersListBlockedByAuthenticated":
		return p.UsersListBlockedByAuthenticated, true
	case "UsersListEmailsForAuthenticated":
		return p.UsersListEmailsForAuthenticated, true
	case "UsersListFollowedByAuthenticated":
		return p.UsersListFollowedByAuthenticated, true
	case "UsersListFollowersForAuthenticatedUser":
		return p.UsersListFollowersForAuthenticatedUser, true
	case "UsersListFollowersForUser":
		return p.UsersListFollowersForUser, true
	case "UsersListFollowingForUser":
		return p.UsersListFollowingForUser, true
	case "UsersListGpgKeysForAuthenticated":
		return p.UsersListGpgKeysForAuthenticated, true
	case "UsersListGpgKeysForUser":
		return p.UsersListGpgKeysForUser, true
	case "UsersListPublicEmailsForAuthenticated":
		return p.UsersListPublicEmailsForAuthenticated, true
	case "UsersListPublicKeysForUser":
		return p.UsersListPublicKeysForUser, true
	case "UsersListPublicSSHKeysForAuthenticated":
		return p.UsersListPublicSSHKeysForAuthenticated, true
	case "UsersSetPrimaryEmailVisibilityForAuthenticated":
		return p.UsersSetPrimaryEmailVisibilityForAuthenticated, true
	case "UsersUnblock":
		return p.UsersUnblock, true
	case "UsersUnfollow":
		return p.UsersUnfollow, true
	case "UsersUpdateAuthenticated":
		return p.UsersUpdateAuthenticated, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "actions/add-repo-access-to-self-hosted-runner-group-in-org":
		return p.ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "actions/add-selected-repo-to-org-secret":
		return p.ActionsAddSelectedRepoToOrgSecret, true
	case "actions/add-self-hosted-runner-to-group-for-org":
		return p.ActionsAddSelfHostedRunnerToGroupForOrg, true
	case "actions/approve-workflow-run":
		return p.ActionsApproveWorkflowRun, true
	case "actions/cancel-workflow-run":
		return p.ActionsCancelWorkflowRun, true
	case "actions/create-or-update-environment-secret":
		return p.ActionsCreateOrUpdateEnvironmentSecret, true
	case "actions/create-or-update-org-secret":
		return p.ActionsCreateOrUpdateOrgSecret, true
	case "actions/create-or-update-repo-secret":
		return p.ActionsCreateOrUpdateRepoSecret, true
	case "actions/create-registration-token-for-org":
		return p.ActionsCreateRegistrationTokenForOrg, true
	case "actions/create-registration-token-for-repo":
		return p.ActionsCreateRegistrationTokenForRepo, true
	case "actions/create-remove-token-for-org":
		return p.ActionsCreateRemoveTokenForOrg, true
	case "actions/create-remove-token-for-repo":
		return p.ActionsCreateRemoveTokenForRepo, true
	case "actions/create-self-hosted-runner-group-for-org":
		return p.ActionsCreateSelfHostedRunnerGroupForOrg, true
	case "actions/delete-artifact":
		return p.ActionsDeleteArtifact, true
	case "actions/delete-environment-secret":
		return p.ActionsDeleteEnvironmentSecret, true
	case "actions/delete-org-secret":
		return p.ActionsDeleteOrgSecret, true
	case "actions/delete-repo-secret":
		return p.ActionsDeleteRepoSecret, true
	case "actions/delete-self-hosted-runner-from-org":
		return p.ActionsDeleteSelfHostedRunnerFromOrg, true
	case "actions/delete-self-hosted-runner-from-repo":
		return p.ActionsDeleteSelfHostedRunnerFromRepo, true
	case "actions/delete-self-hosted-runner-group-from-org":
		return p.ActionsDeleteSelfHostedRunnerGroupFromOrg, true
	case "actions/delete-workflow-run":
		return p.ActionsDeleteWorkflowRun, true
	case "actions/delete-workflow-run-logs":
		return p.ActionsDeleteWorkflowRunLogs, true
	case "actions/disable-selected-repository-github-actions-organization":
		return p.ActionsDisableSelectedRepositoryGithubActionsOrganization, true
	case "actions/download-artifact":
		return p.ActionsDownloadArtifact, true
	case "actions/download-job-logs-for-workflow-run":
		return p.ActionsDownloadJobLogsForWorkflowRun, true
	case "actions/download-workflow-run-logs":
		return p.ActionsDownloadWorkflowRunLogs, true
	case "actions/enable-selected-repository-github-actions-organization":
		return p.ActionsEnableSelectedRepositoryGithubActionsOrganization, true
	case "actions/get-allowed-actions-organization":
		return p.ActionsGetAllowedActionsOrganization, true
	case "actions/get-allowed-actions-repository":
		return p.ActionsGetAllowedActionsRepository, true
	case "actions/get-artifact":
		return p.ActionsGetArtifact, true
	case "actions/get-environment-public-key":
		return p.ActionsGetEnvironmentPublicKey, true
	case "actions/get-environment-secret":
		return p.ActionsGetEnvironmentSecret, true
	case "actions/get-github-actions-permissions-organization":
		return p.ActionsGetGithubActionsPermissionsOrganization, true
	case "actions/get-github-actions-permissions-repository":
		return p.ActionsGetGithubActionsPermissionsRepository, true
	case "actions/get-job-for-workflow-run":
		return p.ActionsGetJobForWorkflowRun, true
	case "actions/get-org-public-key":
		return p.ActionsGetOrgPublicKey, true
	case "actions/get-org-secret":
		return p.ActionsGetOrgSecret, true
	case "actions/get-repo-public-key":
		return p.ActionsGetRepoPublicKey, true
	case "actions/get-repo-secret":
		return p.ActionsGetRepoSecret, true
	case "actions/get-reviews-for-run":
		return p.ActionsGetReviewsForRun, true
	case "actions/get-self-hosted-runner-for-org":
		return p.ActionsGetSelfHostedRunnerForOrg, true
	case "actions/get-self-hosted-runner-for-repo":
		return p.ActionsGetSelfHostedRunnerForRepo, true
	case "actions/get-self-hosted-runner-group-for-org":
		return p.ActionsGetSelfHostedRunnerGroupForOrg, true
	case "actions/get-workflow-run":
		return p.ActionsGetWorkflowRun, true
	case "actions/get-workflow-run-usage":
		return p.ActionsGetWorkflowRunUsage, true
	case "actions/list-artifacts-for-repo":
		return p.ActionsListArtifactsForRepo, true
	case "actions/list-environment-secrets":
		return p.ActionsListEnvironmentSecrets, true
	case "actions/list-jobs-for-workflow-run":
		return p.ActionsListJobsForWorkflowRun, true
	case "actions/list-org-secrets":
		return p.ActionsListOrgSecrets, true
	case "actions/list-repo-access-to-self-hosted-runner-group-in-org":
		return p.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "actions/list-repo-secrets":
		return p.ActionsListRepoSecrets, true
	case "actions/list-repo-workflows":
		return p.ActionsListRepoWorkflows, true
	case "actions/list-runner-applications-for-org":
		return p.ActionsListRunnerApplicationsForOrg, true
	case "actions/list-runner-applications-for-repo":
		return p.ActionsListRunnerApplicationsForRepo, true
	case "actions/list-selected-repos-for-org-secret":
		return p.ActionsListSelectedReposForOrgSecret, true
	case "actions/list-selected-repositories-enabled-github-actions-organization":
		return p.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization, true
	case "actions/list-self-hosted-runner-groups-for-org":
		return p.ActionsListSelfHostedRunnerGroupsForOrg, true
	case "actions/list-self-hosted-runners-for-org":
		return p.ActionsListSelfHostedRunnersForOrg, true
	case "actions/list-self-hosted-runners-for-repo":
		return p.ActionsListSelfHostedRunnersForRepo, true
	case "actions/list-self-hosted-runners-in-group-for-org":
		return p.ActionsListSelfHostedRunnersInGroupForOrg, true
	case "actions/list-workflow-run-artifacts":
		return p.ActionsListWorkflowRunArtifacts, true
	case "actions/list-workflow-runs-for-repo":
		return p.ActionsListWorkflowRunsForRepo, true
	case "actions/re-run-workflow":
		return p.ActionsReRunWorkflow, true
	case "actions/remove-repo-access-to-self-hosted-runner-group-in-org":
		return p.ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "actions/remove-selected-repo-from-org-secret":
		return p.ActionsRemoveSelectedRepoFromOrgSecret, true
	case "actions/remove-self-hosted-runner-from-group-for-org":
		return p.ActionsRemoveSelfHostedRunnerFromGroupForOrg, true
	case "actions/retry-workflow":
		return p.ActionsRetryWorkflow, true
	case "actions/review-pending-deployments-for-run":
		return p.ActionsReviewPendingDeploymentsForRun, true
	case "actions/set-allowed-actions-organization":
		return p.ActionsSetAllowedActionsOrganization, true
	case "actions/set-allowed-actions-repository":
		return p.ActionsSetAllowedActionsRepository, true
	case "actions/set-github-actions-permissions-organization":
		return p.ActionsSetGithubActionsPermissionsOrganization, true
	case "actions/set-github-actions-permissions-repository":
		return p.ActionsSetGithubActionsPermissionsRepository, true
	case "actions/set-repo-access-to-self-hosted-runner-group-in-org":
		return p.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg, true
	case "actions/set-selected-repos-for-org-secret":
		return p.ActionsSetSelectedReposForOrgSecret, true
	case "actions/set-selected-repositories-enabled-github-actions-organization":
		return p.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization, true
	case "actions/set-self-hosted-runners-in-group-for-org":
		return p.ActionsSetSelfHostedRunnersInGroupForOrg, true
	case "actions/update-self-hosted-runner-group-for-org":
		return p.ActionsUpdateSelfHostedRunnerGroupForOrg, true
	case "activity/check-repo-is-starred-by-authenticated-user":
		return p.ActivityCheckRepoIsStarredByAuthenticatedUser, true
	case "activity/delete-repo-subscription":
		return p.ActivityDeleteRepoSubscription, true
	case "activity/delete-thread-subscription":
		return p.ActivityDeleteThreadSubscription, true
	case "activity/get-feeds":
		return p.ActivityGetFeeds, true
	case "activity/get-repo-subscription":
		return p.ActivityGetRepoSubscription, true
	case "activity/get-thread":
		return p.ActivityGetThread, true
	case "activity/get-thread-subscription-for-authenticated-user":
		return p.ActivityGetThreadSubscriptionForAuthenticatedUser, true
	case "activity/list-events-for-authenticated-user":
		return p.ActivityListEventsForAuthenticatedUser, true
	case "activity/list-notifications-for-authenticated-user":
		return p.ActivityListNotificationsForAuthenticatedUser, true
	case "activity/list-org-events-for-authenticated-user":
		return p.ActivityListOrgEventsForAuthenticatedUser, true
	case "activity/list-public-events":
		return p.ActivityListPublicEvents, true
	case "activity/list-public-events-for-repo-network":
		return p.ActivityListPublicEventsForRepoNetwork, true
	case "activity/list-public-events-for-user":
		return p.ActivityListPublicEventsForUser, true
	case "activity/list-public-org-events":
		return p.ActivityListPublicOrgEvents, true
	case "activity/list-received-events-for-user":
		return p.ActivityListReceivedEventsForUser, true
	case "activity/list-received-public-events-for-user":
		return p.ActivityListReceivedPublicEventsForUser, true
	case "activity/list-repo-events":
		return p.ActivityListRepoEvents, true
	case "activity/list-repo-notifications-for-authenticated-user":
		return p.ActivityListRepoNotificationsForAuthenticatedUser, true
	case "activity/list-repos-starred-by-authenticated-user":
		return p.ActivityListReposStarredByAuthenticatedUser, true
	case "activity/list-repos-watched-by-user":
		return p.ActivityListReposWatchedByUser, true
	case "activity/list-watched-repos-for-authenticated-user":
		return p.ActivityListWatchedReposForAuthenticatedUser, true
	case "activity/list-watchers-for-repo":
		return p.ActivityListWatchersForRepo, true
	case "activity/mark-notifications-as-read":
		return p.ActivityMarkNotificationsAsRead, true
	case "activity/mark-repo-notifications-as-read":
		return p.ActivityMarkRepoNotificationsAsRead, true
	case "activity/mark-thread-as-read":
		return p.ActivityMarkThreadAsRead, true
	case "activity/set-repo-subscription":
		return p.ActivitySetRepoSubscription, true
	case "activity/set-thread-subscription":
		return p.ActivitySetThreadSubscription, true
	case "activity/star-repo-for-authenticated-user":
		return p.ActivityStarRepoForAuthenticatedUser, true
	case "activity/unstar-repo-for-authenticated-user":
		return p.ActivityUnstarRepoForAuthenticatedUser, true
	case "apps/add-repo-to-installation":
		return p.AppsAddRepoToInstallation, true
	case "apps/check-token":
		return p.AppsCheckToken, true
	case "apps/create-content-attachment":
		return p.AppsCreateContentAttachment, true
	case "apps/create-from-manifest":
		return p.AppsCreateFromManifest, true
	case "apps/create-installation-access-token":
		return p.AppsCreateInstallationAccessToken, true
	case "apps/delete-authorization":
		return p.AppsDeleteAuthorization, true
	case "apps/delete-installation":
		return p.AppsDeleteInstallation, true
	case "apps/delete-token":
		return p.AppsDeleteToken, true
	case "apps/get-authenticated":
		return p.AppsGetAuthenticated, true
	case "apps/get-by-slug":
		return p.AppsGetBySlug, true
	case "apps/get-subscription-plan-for-account":
		return p.AppsGetSubscriptionPlanForAccount, true
	case "apps/get-subscription-plan-for-account-stubbed":
		return p.AppsGetSubscriptionPlanForAccountStubbed, true
	case "apps/get-webhook-config-for-app":
		return p.AppsGetWebhookConfigForApp, true
	case "apps/get-webhook-delivery":
		return p.AppsGetWebhookDelivery, true
	case "apps/list-accounts-for-plan":
		return p.AppsListAccountsForPlan, true
	case "apps/list-accounts-for-plan-stubbed":
		return p.AppsListAccountsForPlanStubbed, true
	case "apps/list-installation-repos-for-authenticated-user":
		return p.AppsListInstallationReposForAuthenticatedUser, true
	case "apps/list-plans":
		return p.AppsListPlans, true
	case "apps/list-plans-stubbed":
		return p.AppsListPlansStubbed, true
	case "apps/list-repos-accessible-to-installation":
		return p.AppsListReposAccessibleToInstallation, true
	case "apps/list-subscriptions-for-authenticated-user":
		return p.AppsListSubscriptionsForAuthenticatedUser, true
	case "apps/list-subscriptions-for-authenticated-user-stubbed":
		return p.AppsListSubscriptionsForAuthenticatedUserStubbed, true
	case "apps/list-webhook-deliveries":
		return p.AppsListWebhookDeliveries, true
	case "apps/redeliver-webhook-delivery":
		return p.AppsRedeliverWebhookDelivery, true
	case "apps/remove-repo-from-installation":
		return p.AppsRemoveRepoFromInstallation, true
	case "apps/reset-token":
		return p.AppsResetToken, true
	case "apps/revoke-installation-access-token":
		return p.AppsRevokeInstallationAccessToken, true
	case "apps/scope-token":
		return p.AppsScopeToken, true
	case "apps/suspend-installation":
		return p.AppsSuspendInstallation, true
	case "apps/unsuspend-installation":
		return p.AppsUnsuspendInstallation, true
	case "apps/update-webhook-config-for-app":
		return p.AppsUpdateWebhookConfigForApp, true
	case "billing/get-github-actions-billing-ghe":
		return p.BillingGetGithubActionsBillingGhe, true
	case "billing/get-github-actions-billing-org":
		return p.BillingGetGithubActionsBillingOrg, true
	case "billing/get-github-actions-billing-user":
		return p.BillingGetGithubActionsBillingUser, true
	case "billing/get-github-packages-billing-ghe":
		return p.BillingGetGithubPackagesBillingGhe, true
	case "billing/get-github-packages-billing-org":
		return p.BillingGetGithubPackagesBillingOrg, true
	case "billing/get-github-packages-billing-user":
		return p.BillingGetGithubPackagesBillingUser, true
	case "billing/get-shared-storage-billing-ghe":
		return p.BillingGetSharedStorageBillingGhe, true
	case "billing/get-shared-storage-billing-org":
		return p.BillingGetSharedStorageBillingOrg, true
	case "billing/get-shared-storage-billing-user":
		return p.BillingGetSharedStorageBillingUser, true
	case "checks/create-suite":
		return p.ChecksCreateSuite, true
	case "checks/get":
		return p.ChecksGet, true
	case "checks/get-suite":
		return p.ChecksGetSuite, true
	case "checks/list-annotations":
		return p.ChecksListAnnotations, true
	case "checks/list-for-ref":
		return p.ChecksListForRef, true
	case "checks/list-for-suite":
		return p.ChecksListForSuite, true
	case "checks/list-suites-for-ref":
		return p.ChecksListSuitesForRef, true
	case "checks/rerequest-suite":
		return p.ChecksRerequestSuite, true
	case "checks/set-suites-preferences":
		return p.ChecksSetSuitesPreferences, true
	case "code-scanning/delete-analysis":
		return p.CodeScanningDeleteAnalysis, true
	case "code-scanning/get-alert":
		return p.CodeScanningGetAlert, true
	case "code-scanning/get-analysis":
		return p.CodeScanningGetAnalysis, true
	case "code-scanning/get-sarif":
		return p.CodeScanningGetSarif, true
	case "code-scanning/list-alert-instances":
		return p.CodeScanningListAlertInstances, true
	case "code-scanning/list-alerts-for-repo":
		return p.CodeScanningListAlertsForRepo, true
	case "code-scanning/list-recent-analyses":
		return p.CodeScanningListRecentAnalyses, true
	case "code-scanning/update-alert":
		return p.CodeScanningUpdateAlert, true
	case "code-scanning/upload-sarif":
		return p.CodeScanningUploadSarif, true
	case "codes-of-conduct/get-all-codes-of-conduct":
		return p.CodesOfConductGetAllCodesOfConduct, true
	case "codes-of-conduct/get-conduct-code":
		return p.CodesOfConductGetConductCode, true
	case "emojis/get":
		return p.EmojisGet, true
	case "enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise":
		return p.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "enterprise-admin/add-self-hosted-runner-to-group-for-enterprise":
		return p.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise, true
	case "enterprise-admin/create-registration-token-for-enterprise":
		return p.EnterpriseAdminCreateRegistrationTokenForEnterprise, true
	case "enterprise-admin/create-remove-token-for-enterprise":
		return p.EnterpriseAdminCreateRemoveTokenForEnterprise, true
	case "enterprise-admin/create-self-hosted-runner-group-for-enterprise":
		return p.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise, true
	case "enterprise-admin/delete-scim-group-from-enterprise":
		return p.EnterpriseAdminDeleteScimGroupFromEnterprise, true
	case "enterprise-admin/delete-self-hosted-runner-from-enterprise":
		return p.EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise, true
	case "enterprise-admin/delete-self-hosted-runner-group-from-enterprise":
		return p.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise, true
	case "enterprise-admin/delete-user-from-enterprise":
		return p.EnterpriseAdminDeleteUserFromEnterprise, true
	case "enterprise-admin/disable-selected-organization-github-actions-enterprise":
		return p.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise, true
	case "enterprise-admin/enable-selected-organization-github-actions-enterprise":
		return p.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise, true
	case "enterprise-admin/get-allowed-actions-enterprise":
		return p.EnterpriseAdminGetAllowedActionsEnterprise, true
	case "enterprise-admin/get-audit-log":
		return p.EnterpriseAdminGetAuditLog, true
	case "enterprise-admin/get-github-actions-permissions-enterprise":
		return p.EnterpriseAdminGetGithubActionsPermissionsEnterprise, true
	case "enterprise-admin/get-provisioning-information-for-enterprise-group":
		return p.EnterpriseAdminGetProvisioningInformationForEnterpriseGroup, true
	case "enterprise-admin/get-provisioning-information-for-enterprise-user":
		return p.EnterpriseAdminGetProvisioningInformationForEnterpriseUser, true
	case "enterprise-admin/get-self-hosted-runner-for-enterprise":
		return p.EnterpriseAdminGetSelfHostedRunnerForEnterprise, true
	case "enterprise-admin/get-self-hosted-runner-group-for-enterprise":
		return p.EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise, true
	case "enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise":
		return p.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "enterprise-admin/list-provisioned-groups-enterprise":
		return p.EnterpriseAdminListProvisionedGroupsEnterprise, true
	case "enterprise-admin/list-provisioned-identities-enterprise":
		return p.EnterpriseAdminListProvisionedIdentitiesEnterprise, true
	case "enterprise-admin/list-runner-applications-for-enterprise":
		return p.EnterpriseAdminListRunnerApplicationsForEnterprise, true
	case "enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise":
		return p.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise, true
	case "enterprise-admin/list-self-hosted-runner-groups-for-enterprise":
		return p.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise, true
	case "enterprise-admin/list-self-hosted-runners-for-enterprise":
		return p.EnterpriseAdminListSelfHostedRunnersForEnterprise, true
	case "enterprise-admin/list-self-hosted-runners-in-group-for-enterprise":
		return p.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise, true
	case "enterprise-admin/provision-and-invite-enterprise-group":
		return p.EnterpriseAdminProvisionAndInviteEnterpriseGroup, true
	case "enterprise-admin/provision-and-invite-enterprise-user":
		return p.EnterpriseAdminProvisionAndInviteEnterpriseUser, true
	case "enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise":
		return p.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise":
		return p.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise, true
	case "enterprise-admin/set-allowed-actions-enterprise":
		return p.EnterpriseAdminSetAllowedActionsEnterprise, true
	case "enterprise-admin/set-github-actions-permissions-enterprise":
		return p.EnterpriseAdminSetGithubActionsPermissionsEnterprise, true
	case "enterprise-admin/set-information-for-provisioned-enterprise-group":
		return p.EnterpriseAdminSetInformationForProvisionedEnterpriseGroup, true
	case "enterprise-admin/set-information-for-provisioned-enterprise-user":
		return p.EnterpriseAdminSetInformationForProvisionedEnterpriseUser, true
	case "enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise":
		return p.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise, true
	case "enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise":
		return p.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise, true
	case "enterprise-admin/set-self-hosted-runners-in-group-for-enterprise":
		return p.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise, true
	case "enterprise-admin/update-attribute-for-enterprise-group":
		return p.EnterpriseAdminUpdateAttributeForEnterpriseGroup, true
	case "enterprise-admin/update-attribute-for-enterprise-user":
		return p.EnterpriseAdminUpdateAttributeForEnterpriseUser, true
	case "enterprise-admin/update-self-hosted-runner-group-for-enterprise":
		return p.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise, true
	case "gists/check-is-starred":
		return p.GistsCheckIsStarred, true
	case "gists/create":
		return p.GistsCreate, true
	case "gists/create-comment":
		return p.GistsCreateComment, true
	case "gists/delete":
		return p.GistsDelete, true
	case "gists/delete-comment":
		return p.GistsDeleteComment, true
	case "gists/fork":
		return p.GistsFork, true
	case "gists/get":
		return p.GistsGet, true
	case "gists/get-comment":
		return p.GistsGetComment, true
	case "gists/get-revision":
		return p.GistsGetRevision, true
	case "gists/list":
		return p.GistsList, true
	case "gists/list-comments":
		return p.GistsListComments, true
	case "gists/list-commits":
		return p.GistsListCommits, true
	case "gists/list-for-user":
		return p.GistsListForUser, true
	case "gists/list-forks":
		return p.GistsListForks, true
	case "gists/list-public":
		return p.GistsListPublic, true
	case "gists/list-starred":
		return p.GistsListStarred, true
	case "gists/star":
		return p.GistsStar, true
	case "gists/unstar":
		return p.GistsUnstar, true
	case "gists/update-comment":
		return p.GistsUpdateComment, true
	case "git/create-blob":
		return p.GitCreateBlob, true
	case "git/create-commit":
		return p.GitCreateCommit, true
	case "git/create-ref":
		return p.GitCreateRef, true
	case "git/create-tag":
		return p.GitCreateTag, true
	case "git/create-tree":
		return p.GitCreateTree, true
	case "git/delete-ref":
		return p.GitDeleteRef, true
	case "git/get-blob":
		return p.GitGetBlob, true
	case "git/get-commit":
		return p.GitGetCommit, true
	case "git/get-ref":
		return p.GitGetRef, true
	case "git/get-tag":
		return p.GitGetTag, true
	case "git/get-tree":
		return p.GitGetTree, true
	case "git/list-matching-refs":
		return p.GitListMatchingRefs, true
	case "git/update-ref":
		return p.GitUpdateRef, true
	case "gitignore/get-all-templates":
		return p.GitignoreGetAllTemplates, true
	case "gitignore/get-template":
		return p.GitignoreGetTemplate, true
	case "interactions/remove-restrictions-for-authenticated-user":
		return p.InteractionsRemoveRestrictionsForAuthenticatedUser, true
	case "interactions/remove-restrictions-for-org":
		return p.InteractionsRemoveRestrictionsForOrg, true
	case "interactions/remove-restrictions-for-repo":
		return p.InteractionsRemoveRestrictionsForRepo, true
	case "interactions/set-restrictions-for-authenticated-user":
		return p.InteractionsSetRestrictionsForAuthenticatedUser, true
	case "interactions/set-restrictions-for-org":
		return p.InteractionsSetRestrictionsForOrg, true
	case "interactions/set-restrictions-for-repo":
		return p.InteractionsSetRestrictionsForRepo, true
	case "issues/add-assignees":
		return p.IssuesAddAssignees, true
	case "issues/check-user-can-be-assigned":
		return p.IssuesCheckUserCanBeAssigned, true
	case "issues/create":
		return p.IssuesCreate, true
	case "issues/create-comment":
		return p.IssuesCreateComment, true
	case "issues/create-label":
		return p.IssuesCreateLabel, true
	case "issues/create-milestone":
		return p.IssuesCreateMilestone, true
	case "issues/delete-comment":
		return p.IssuesDeleteComment, true
	case "issues/delete-label":
		return p.IssuesDeleteLabel, true
	case "issues/delete-milestone":
		return p.IssuesDeleteMilestone, true
	case "issues/get":
		return p.IssuesGet, true
	case "issues/get-comment":
		return p.IssuesGetComment, true
	case "issues/get-event":
		return p.IssuesGetEvent, true
	case "issues/get-label":
		return p.IssuesGetLabel, true
	case "issues/get-milestone":
		return p.IssuesGetMilestone, true
	case "issues/list":
		return p.IssuesList, true
	case "issues/list-assignees":
		return p.IssuesListAssignees, true
	case "issues/list-comments":
		return p.IssuesListComments, true
	case "issues/list-comments-for-repo":
		return p.IssuesListCommentsForRepo, true
	case "issues/list-events-for-repo":
		return p.IssuesListEventsForRepo, true
	case "issues/list-for-authenticated-user":
		return p.IssuesListForAuthenticatedUser, true
	case "issues/list-for-org":
		return p.IssuesListForOrg, true
	case "issues/list-for-repo":
		return p.IssuesListForRepo, true
	case "issues/list-labels-for-milestone":
		return p.IssuesListLabelsForMilestone, true
	case "issues/list-labels-for-repo":
		return p.IssuesListLabelsForRepo, true
	case "issues/list-labels-on-issue":
		return p.IssuesListLabelsOnIssue, true
	case "issues/list-milestones":
		return p.IssuesListMilestones, true
	case "issues/lock":
		return p.IssuesLock, true
	case "issues/remove-all-labels":
		return p.IssuesRemoveAllLabels, true
	case "issues/remove-assignees":
		return p.IssuesRemoveAssignees, true
	case "issues/remove-label":
		return p.IssuesRemoveLabel, true
	case "issues/unlock":
		return p.IssuesUnlock, true
	case "issues/update":
		return p.IssuesUpdate, true
	case "issues/update-comment":
		return p.IssuesUpdateComment, true
	case "issues/update-label":
		return p.IssuesUpdateLabel, true
	case "issues/update-milestone":
		return p.IssuesUpdateMilestone, true
	case "licenses/get":
		return p.LicensesGet, true
	case "licenses/get-all-commonly-used":
		return p.LicensesGetAllCommonlyUsed, true
	case "licenses/get-for-repo":
		return p.LicensesGetForRepo, true
	case "markdown/render":
		return p.MarkdownRender, true
	case "markdown/render-raw":
		return p.MarkdownRenderRaw, true
	case "meta/get":
		return p.MetaGet, true
	case "meta/get-octocat":
		return p.MetaGetOctocat, true
	case "meta/get-zen":
		return p.MetaGetZen, true
	case "meta/root":
		return p.MetaRoot, true
	case "migrations/cancel-import":
		return p.MigrationsCancelImport, true
	case "migrations/delete-archive-for-authenticated-user":
		return p.MigrationsDeleteArchiveForAuthenticatedUser, true
	case "migrations/delete-archive-for-org":
		return p.MigrationsDeleteArchiveForOrg, true
	case "migrations/download-archive-for-org":
		return p.MigrationsDownloadArchiveForOrg, true
	case "migrations/get-archive-for-authenticated-user":
		return p.MigrationsGetArchiveForAuthenticatedUser, true
	case "migrations/get-commit-authors":
		return p.MigrationsGetCommitAuthors, true
	case "migrations/get-import-status":
		return p.MigrationsGetImportStatus, true
	case "migrations/get-large-files":
		return p.MigrationsGetLargeFiles, true
	case "migrations/get-status-for-authenticated-user":
		return p.MigrationsGetStatusForAuthenticatedUser, true
	case "migrations/get-status-for-org":
		return p.MigrationsGetStatusForOrg, true
	case "migrations/list-for-authenticated-user":
		return p.MigrationsListForAuthenticatedUser, true
	case "migrations/list-for-org":
		return p.MigrationsListForOrg, true
	case "migrations/list-repos-for-org":
		return p.MigrationsListReposForOrg, true
	case "migrations/list-repos-for-user":
		return p.MigrationsListReposForUser, true
	case "migrations/map-commit-author":
		return p.MigrationsMapCommitAuthor, true
	case "migrations/set-lfs-preference":
		return p.MigrationsSetLfsPreference, true
	case "migrations/start-for-authenticated-user":
		return p.MigrationsStartForAuthenticatedUser, true
	case "migrations/start-for-org":
		return p.MigrationsStartForOrg, true
	case "migrations/start-import":
		return p.MigrationsStartImport, true
	case "migrations/unlock-repo-for-authenticated-user":
		return p.MigrationsUnlockRepoForAuthenticatedUser, true
	case "migrations/unlock-repo-for-org":
		return p.MigrationsUnlockRepoForOrg, true
	case "migrations/update-import":
		return p.MigrationsUpdateImport, true
	case "oauth-authorizations/create-authorization":
		return p.OAuthAuthorizationsCreateAuthorization, true
	case "oauth-authorizations/delete-authorization":
		return p.OAuthAuthorizationsDeleteAuthorization, true
	case "oauth-authorizations/delete-grant":
		return p.OAuthAuthorizationsDeleteGrant, true
	case "oauth-authorizations/get-authorization":
		return p.OAuthAuthorizationsGetAuthorization, true
	case "oauth-authorizations/get-grant":
		return p.OAuthAuthorizationsGetGrant, true
	case "oauth-authorizations/get-or-create-authorization-for-app":
		return p.OAuthAuthorizationsGetOrCreateAuthorizationForApp, true
	case "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint":
		return p.OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint, true
	case "oauth-authorizations/list-authorizations":
		return p.OAuthAuthorizationsListAuthorizations, true
	case "oauth-authorizations/list-grants":
		return p.OAuthAuthorizationsListGrants, true
	case "oauth-authorizations/update-authorization":
		return p.OAuthAuthorizationsUpdateAuthorization, true
	case "orgs/block-user":
		return p.OrgsBlockUser, true
	case "orgs/cancel-invitation":
		return p.OrgsCancelInvitation, true
	case "orgs/check-blocked-user":
		return p.OrgsCheckBlockedUser, true
	case "orgs/check-membership-for-user":
		return p.OrgsCheckMembershipForUser, true
	case "orgs/check-public-membership-for-user":
		return p.OrgsCheckPublicMembershipForUser, true
	case "orgs/convert-member-to-outside-collaborator":
		return p.OrgsConvertMemberToOutsideCollaborator, true
	case "orgs/create-invitation":
		return p.OrgsCreateInvitation, true
	case "orgs/create-webhook":
		return p.OrgsCreateWebhook, true
	case "orgs/delete-webhook":
		return p.OrgsDeleteWebhook, true
	case "orgs/get":
		return p.OrgsGet, true
	case "orgs/get-audit-log":
		return p.OrgsGetAuditLog, true
	case "orgs/get-membership-for-authenticated-user":
		return p.OrgsGetMembershipForAuthenticatedUser, true
	case "orgs/get-membership-for-user":
		return p.OrgsGetMembershipForUser, true
	case "orgs/get-webhook":
		return p.OrgsGetWebhook, true
	case "orgs/get-webhook-config-for-org":
		return p.OrgsGetWebhookConfigForOrg, true
	case "orgs/get-webhook-delivery":
		return p.OrgsGetWebhookDelivery, true
	case "orgs/list":
		return p.OrgsList, true
	case "orgs/list-blocked-users":
		return p.OrgsListBlockedUsers, true
	case "orgs/list-failed-invitations":
		return p.OrgsListFailedInvitations, true
	case "orgs/list-for-authenticated-user":
		return p.OrgsListForAuthenticatedUser, true
	case "orgs/list-for-user":
		return p.OrgsListForUser, true
	case "orgs/list-invitation-teams":
		return p.OrgsListInvitationTeams, true
	case "orgs/list-members":
		return p.OrgsListMembers, true
	case "orgs/list-memberships-for-authenticated-user":
		return p.OrgsListMembershipsForAuthenticatedUser, true
	case "orgs/list-outside-collaborators":
		return p.OrgsListOutsideCollaborators, true
	case "orgs/list-pending-invitations":
		return p.OrgsListPendingInvitations, true
	case "orgs/list-public-members":
		return p.OrgsListPublicMembers, true
	case "orgs/list-saml-sso-authorizations":
		return p.OrgsListSamlSSOAuthorizations, true
	case "orgs/list-webhook-deliveries":
		return p.OrgsListWebhookDeliveries, true
	case "orgs/list-webhooks":
		return p.OrgsListWebhooks, true
	case "orgs/ping-webhook":
		return p.OrgsPingWebhook, true
	case "orgs/redeliver-webhook-delivery":
		return p.OrgsRedeliverWebhookDelivery, true
	case "orgs/remove-member":
		return p.OrgsRemoveMember, true
	case "orgs/remove-membership-for-user":
		return p.OrgsRemoveMembershipForUser, true
	case "orgs/remove-outside-collaborator":
		return p.OrgsRemoveOutsideCollaborator, true
	case "orgs/remove-public-membership-for-authenticated-user":
		return p.OrgsRemovePublicMembershipForAuthenticatedUser, true
	case "orgs/remove-saml-sso-authorization":
		return p.OrgsRemoveSamlSSOAuthorization, true
	case "orgs/set-membership-for-user":
		return p.OrgsSetMembershipForUser, true
	case "orgs/set-public-membership-for-authenticated-user":
		return p.OrgsSetPublicMembershipForAuthenticatedUser, true
	case "orgs/unblock-user":
		return p.OrgsUnblockUser, true
	case "orgs/update-membership-for-authenticated-user":
		return p.OrgsUpdateMembershipForAuthenticatedUser, true
	case "orgs/update-webhook":
		return p.OrgsUpdateWebhook, true
	case "orgs/update-webhook-config-for-org":
		return p.OrgsUpdateWebhookConfigForOrg, true
	case "packages/delete-package-for-authenticated-user":
		return p.PackagesDeletePackageForAuthenticatedUser, true
	case "packages/delete-package-for-org":
		return p.PackagesDeletePackageForOrg, true
	case "packages/delete-package-for-user":
		return p.PackagesDeletePackageForUser, true
	case "packages/delete-package-version-for-authenticated-user":
		return p.PackagesDeletePackageVersionForAuthenticatedUser, true
	case "packages/delete-package-version-for-org":
		return p.PackagesDeletePackageVersionForOrg, true
	case "packages/delete-package-version-for-user":
		return p.PackagesDeletePackageVersionForUser, true
	case "packages/get-all-package-versions-for-package-owned-by-authenticated-user":
		return p.PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser, true
	case "packages/get-all-package-versions-for-package-owned-by-org":
		return p.PackagesGetAllPackageVersionsForPackageOwnedByOrg, true
	case "packages/get-all-package-versions-for-package-owned-by-user":
		return p.PackagesGetAllPackageVersionsForPackageOwnedByUser, true
	case "packages/get-package-for-authenticated-user":
		return p.PackagesGetPackageForAuthenticatedUser, true
	case "packages/get-package-for-organization":
		return p.PackagesGetPackageForOrganization, true
	case "packages/get-package-for-user":
		return p.PackagesGetPackageForUser, true
	case "packages/get-package-version-for-authenticated-user":
		return p.PackagesGetPackageVersionForAuthenticatedUser, true
	case "packages/get-package-version-for-organization":
		return p.PackagesGetPackageVersionForOrganization, true
	case "packages/get-package-version-for-user":
		return p.PackagesGetPackageVersionForUser, true
	case "packages/list-packages-for-authenticated-user":
		return p.PackagesListPackagesForAuthenticatedUser, true
	case "packages/list-packages-for-organization":
		return p.PackagesListPackagesForOrganization, true
	case "packages/list-packages-for-user":
		return p.PackagesListPackagesForUser, true
	case "packages/restore-package-for-authenticated-user":
		return p.PackagesRestorePackageForAuthenticatedUser, true
	case "packages/restore-package-for-org":
		return p.PackagesRestorePackageForOrg, true
	case "packages/restore-package-for-user":
		return p.PackagesRestorePackageForUser, true
	case "packages/restore-package-version-for-authenticated-user":
		return p.PackagesRestorePackageVersionForAuthenticatedUser, true
	case "packages/restore-package-version-for-org":
		return p.PackagesRestorePackageVersionForOrg, true
	case "packages/restore-package-version-for-user":
		return p.PackagesRestorePackageVersionForUser, true
	case "projects/add-collaborator":
		return p.ProjectsAddCollaborator, true
	case "projects/create-column":
		return p.ProjectsCreateColumn, true
	case "projects/create-for-authenticated-user":
		return p.ProjectsCreateForAuthenticatedUser, true
	case "projects/create-for-org":
		return p.ProjectsCreateForOrg, true
	case "projects/create-for-repo":
		return p.ProjectsCreateForRepo, true
	case "projects/delete":
		return p.ProjectsDelete, true
	case "projects/delete-card":
		return p.ProjectsDeleteCard, true
	case "projects/delete-column":
		return p.ProjectsDeleteColumn, true
	case "projects/get":
		return p.ProjectsGet, true
	case "projects/get-card":
		return p.ProjectsGetCard, true
	case "projects/get-column":
		return p.ProjectsGetColumn, true
	case "projects/get-permission-for-user":
		return p.ProjectsGetPermissionForUser, true
	case "projects/list-cards":
		return p.ProjectsListCards, true
	case "projects/list-collaborators":
		return p.ProjectsListCollaborators, true
	case "projects/list-columns":
		return p.ProjectsListColumns, true
	case "projects/list-for-org":
		return p.ProjectsListForOrg, true
	case "projects/list-for-repo":
		return p.ProjectsListForRepo, true
	case "projects/list-for-user":
		return p.ProjectsListForUser, true
	case "projects/move-card":
		return p.ProjectsMoveCard, true
	case "projects/move-column":
		return p.ProjectsMoveColumn, true
	case "projects/remove-collaborator":
		return p.ProjectsRemoveCollaborator, true
	case "projects/update":
		return p.ProjectsUpdate, true
	case "projects/update-card":
		return p.ProjectsUpdateCard, true
	case "projects/update-column":
		return p.ProjectsUpdateColumn, true
	case "pulls/check-if-merged":
		return p.PullsCheckIfMerged, true
	case "pulls/create":
		return p.PullsCreate, true
	case "pulls/create-reply-for-review-comment":
		return p.PullsCreateReplyForReviewComment, true
	case "pulls/create-review":
		return p.PullsCreateReview, true
	case "pulls/create-review-comment":
		return p.PullsCreateReviewComment, true
	case "pulls/delete-pending-review":
		return p.PullsDeletePendingReview, true
	case "pulls/delete-review-comment":
		return p.PullsDeleteReviewComment, true
	case "pulls/dismiss-review":
		return p.PullsDismissReview, true
	case "pulls/get":
		return p.PullsGet, true
	case "pulls/get-review":
		return p.PullsGetReview, true
	case "pulls/get-review-comment":
		return p.PullsGetReviewComment, true
	case "pulls/list":
		return p.PullsList, true
	case "pulls/list-comments-for-review":
		return p.PullsListCommentsForReview, true
	case "pulls/list-commits":
		return p.PullsListCommits, true
	case "pulls/list-files":
		return p.PullsListFiles, true
	case "pulls/list-requested-reviewers":
		return p.PullsListRequestedReviewers, true
	case "pulls/list-review-comments":
		return p.PullsListReviewComments, true
	case "pulls/list-review-comments-for-repo":
		return p.PullsListReviewCommentsForRepo, true
	case "pulls/list-reviews":
		return p.PullsListReviews, true
	case "pulls/merge":
		return p.PullsMerge, true
	case "pulls/remove-requested-reviewers":
		return p.PullsRemoveRequestedReviewers, true
	case "pulls/submit-review":
		return p.PullsSubmitReview, true
	case "pulls/update":
		return p.PullsUpdate, true
	case "pulls/update-branch":
		return p.PullsUpdateBranch, true
	case "pulls/update-review":
		return p.PullsUpdateReview, true
	case "pulls/update-review-comment":
		return p.PullsUpdateReviewComment, true
	case "rate-limit/get":
		return p.RateLimitGet, true
	case "reactions/create-for-commit-comment":
		return p.ReactionsCreateForCommitComment, true
	case "reactions/create-for-issue":
		return p.ReactionsCreateForIssue, true
	case "reactions/create-for-issue-comment":
		return p.ReactionsCreateForIssueComment, true
	case "reactions/create-for-pull-request-review-comment":
		return p.ReactionsCreateForPullRequestReviewComment, true
	case "reactions/create-for-release":
		return p.ReactionsCreateForRelease, true
	case "reactions/create-for-team-discussion-comment-in-org":
		return p.ReactionsCreateForTeamDiscussionCommentInOrg, true
	case "reactions/create-for-team-discussion-comment-legacy":
		return p.ReactionsCreateForTeamDiscussionCommentLegacy, true
	case "reactions/create-for-team-discussion-in-org":
		return p.ReactionsCreateForTeamDiscussionInOrg, true
	case "reactions/create-for-team-discussion-legacy":
		return p.ReactionsCreateForTeamDiscussionLegacy, true
	case "reactions/delete-for-commit-comment":
		return p.ReactionsDeleteForCommitComment, true
	case "reactions/delete-for-issue":
		return p.ReactionsDeleteForIssue, true
	case "reactions/delete-for-issue-comment":
		return p.ReactionsDeleteForIssueComment, true
	case "reactions/delete-for-pull-request-comment":
		return p.ReactionsDeleteForPullRequestComment, true
	case "reactions/delete-for-team-discussion":
		return p.ReactionsDeleteForTeamDiscussion, true
	case "reactions/delete-for-team-discussion-comment":
		return p.ReactionsDeleteForTeamDiscussionComment, true
	case "reactions/delete-legacy":
		return p.ReactionsDeleteLegacy, true
	case "reactions/list-for-commit-comment":
		return p.ReactionsListForCommitComment, true
	case "reactions/list-for-issue":
		return p.ReactionsListForIssue, true
	case "reactions/list-for-issue-comment":
		return p.ReactionsListForIssueComment, true
	case "reactions/list-for-pull-request-review-comment":
		return p.ReactionsListForPullRequestReviewComment, true
	case "reactions/list-for-team-discussion-comment-in-org":
		return p.ReactionsListForTeamDiscussionCommentInOrg, true
	case "reactions/list-for-team-discussion-comment-legacy":
		return p.ReactionsListForTeamDiscussionCommentLegacy, true
	case "reactions/list-for-team-discussion-in-org":
		return p.ReactionsListForTeamDiscussionInOrg, true
	case "reactions/list-for-team-discussion-legacy":
		return p.ReactionsListForTeamDiscussionLegacy, true
	case "repos/accept-invitation":
		return p.ReposAcceptInvitation, true
	case "repos/add-app-access-restrictions":
		return p.ReposAddAppAccessRestrictions, true
	case "repos/add-collaborator":
		return p.ReposAddCollaborator, true
	case "repos/add-status-check-contexts":
		return p.ReposAddStatusCheckContexts, true
	case "repos/add-team-access-restrictions":
		return p.ReposAddTeamAccessRestrictions, true
	case "repos/add-user-access-restrictions":
		return p.ReposAddUserAccessRestrictions, true
	case "repos/check-collaborator":
		return p.ReposCheckCollaborator, true
	case "repos/check-vulnerability-alerts":
		return p.ReposCheckVulnerabilityAlerts, true
	case "repos/compare-commits":
		return p.ReposCompareCommits, true
	case "repos/create-autolink":
		return p.ReposCreateAutolink, true
	case "repos/create-commit-comment":
		return p.ReposCreateCommitComment, true
	case "repos/create-commit-signature-protection":
		return p.ReposCreateCommitSignatureProtection, true
	case "repos/create-commit-status":
		return p.ReposCreateCommitStatus, true
	case "repos/create-deploy-key":
		return p.ReposCreateDeployKey, true
	case "repos/create-deployment":
		return p.ReposCreateDeployment, true
	case "repos/create-deployment-status":
		return p.ReposCreateDeploymentStatus, true
	case "repos/create-dispatch-event":
		return p.ReposCreateDispatchEvent, true
	case "repos/create-for-authenticated-user":
		return p.ReposCreateForAuthenticatedUser, true
	case "repos/create-fork":
		return p.ReposCreateFork, true
	case "repos/create-in-org":
		return p.ReposCreateInOrg, true
	case "repos/create-or-update-file-contents":
		return p.ReposCreateOrUpdateFileContents, true
	case "repos/create-pages-site":
		return p.ReposCreatePagesSite, true
	case "repos/create-release":
		return p.ReposCreateRelease, true
	case "repos/create-using-template":
		return p.ReposCreateUsingTemplate, true
	case "repos/create-webhook":
		return p.ReposCreateWebhook, true
	case "repos/decline-invitation":
		return p.ReposDeclineInvitation, true
	case "repos/delete":
		return p.ReposDelete, true
	case "repos/delete-access-restrictions":
		return p.ReposDeleteAccessRestrictions, true
	case "repos/delete-admin-branch-protection":
		return p.ReposDeleteAdminBranchProtection, true
	case "repos/delete-an-environment":
		return p.ReposDeleteAnEnvironment, true
	case "repos/delete-autolink":
		return p.ReposDeleteAutolink, true
	case "repos/delete-branch-protection":
		return p.ReposDeleteBranchProtection, true
	case "repos/delete-commit-comment":
		return p.ReposDeleteCommitComment, true
	case "repos/delete-commit-signature-protection":
		return p.ReposDeleteCommitSignatureProtection, true
	case "repos/delete-deploy-key":
		return p.ReposDeleteDeployKey, true
	case "repos/delete-deployment":
		return p.ReposDeleteDeployment, true
	case "repos/delete-file":
		return p.ReposDeleteFile, true
	case "repos/delete-invitation":
		return p.ReposDeleteInvitation, true
	case "repos/delete-pages-site":
		return p.ReposDeletePagesSite, true
	case "repos/delete-pull-request-review-protection":
		return p.ReposDeletePullRequestReviewProtection, true
	case "repos/delete-release":
		return p.ReposDeleteRelease, true
	case "repos/delete-release-asset":
		return p.ReposDeleteReleaseAsset, true
	case "repos/delete-webhook":
		return p.ReposDeleteWebhook, true
	case "repos/disable-automated-security-fixes":
		return p.ReposDisableAutomatedSecurityFixes, true
	case "repos/disable-lfs-for-repo":
		return p.ReposDisableLfsForRepo, true
	case "repos/disable-vulnerability-alerts":
		return p.ReposDisableVulnerabilityAlerts, true
	case "repos/download-tarball-archive":
		return p.ReposDownloadTarballArchive, true
	case "repos/download-zipball-archive":
		return p.ReposDownloadZipballArchive, true
	case "repos/enable-automated-security-fixes":
		return p.ReposEnableAutomatedSecurityFixes, true
	case "repos/enable-lfs-for-repo":
		return p.ReposEnableLfsForRepo, true
	case "repos/enable-vulnerability-alerts":
		return p.ReposEnableVulnerabilityAlerts, true
	case "repos/get":
		return p.ReposGet, true
	case "repos/get-access-restrictions":
		return p.ReposGetAccessRestrictions, true
	case "repos/get-admin-branch-protection":
		return p.ReposGetAdminBranchProtection, true
	case "repos/get-all-status-check-contexts":
		return p.ReposGetAllStatusCheckContexts, true
	case "repos/get-all-topics":
		return p.ReposGetAllTopics, true
	case "repos/get-apps-with-access-to-protected-branch":
		return p.ReposGetAppsWithAccessToProtectedBranch, true
	case "repos/get-autolink":
		return p.ReposGetAutolink, true
	case "repos/get-branch":
		return p.ReposGetBranch, true
	case "repos/get-branch-protection":
		return p.ReposGetBranchProtection, true
	case "repos/get-clones":
		return p.ReposGetClones, true
	case "repos/get-code-frequency-stats":
		return p.ReposGetCodeFrequencyStats, true
	case "repos/get-collaborator-permission-level":
		return p.ReposGetCollaboratorPermissionLevel, true
	case "repos/get-combined-status-for-ref":
		return p.ReposGetCombinedStatusForRef, true
	case "repos/get-commit":
		return p.ReposGetCommit, true
	case "repos/get-commit-activity-stats":
		return p.ReposGetCommitActivityStats, true
	case "repos/get-commit-comment":
		return p.ReposGetCommitComment, true
	case "repos/get-commit-signature-protection":
		return p.ReposGetCommitSignatureProtection, true
	case "repos/get-community-profile-metrics":
		return p.ReposGetCommunityProfileMetrics, true
	case "repos/get-contributors-stats":
		return p.ReposGetContributorsStats, true
	case "repos/get-deploy-key":
		return p.ReposGetDeployKey, true
	case "repos/get-deployment":
		return p.ReposGetDeployment, true
	case "repos/get-deployment-status":
		return p.ReposGetDeploymentStatus, true
	case "repos/get-latest-pages-build":
		return p.ReposGetLatestPagesBuild, true
	case "repos/get-latest-release":
		return p.ReposGetLatestRelease, true
	case "repos/get-pages":
		return p.ReposGetPages, true
	case "repos/get-pages-build":
		return p.ReposGetPagesBuild, true
	case "repos/get-pages-health-check":
		return p.ReposGetPagesHealthCheck, true
	case "repos/get-participation-stats":
		return p.ReposGetParticipationStats, true
	case "repos/get-pull-request-review-protection":
		return p.ReposGetPullRequestReviewProtection, true
	case "repos/get-punch-card-stats":
		return p.ReposGetPunchCardStats, true
	case "repos/get-readme":
		return p.ReposGetReadme, true
	case "repos/get-readme-in-directory":
		return p.ReposGetReadmeInDirectory, true
	case "repos/get-release":
		return p.ReposGetRelease, true
	case "repos/get-release-asset":
		return p.ReposGetReleaseAsset, true
	case "repos/get-release-by-tag":
		return p.ReposGetReleaseByTag, true
	case "repos/get-status-checks-protection":
		return p.ReposGetStatusChecksProtection, true
	case "repos/get-teams-with-access-to-protected-branch":
		return p.ReposGetTeamsWithAccessToProtectedBranch, true
	case "repos/get-top-paths":
		return p.ReposGetTopPaths, true
	case "repos/get-top-referrers":
		return p.ReposGetTopReferrers, true
	case "repos/get-users-with-access-to-protected-branch":
		return p.ReposGetUsersWithAccessToProtectedBranch, true
	case "repos/get-views":
		return p.ReposGetViews, true
	case "repos/get-webhook":
		return p.ReposGetWebhook, true
	case "repos/get-webhook-config-for-repo":
		return p.ReposGetWebhookConfigForRepo, true
	case "repos/get-webhook-delivery":
		return p.ReposGetWebhookDelivery, true
	case "repos/list-autolinks":
		return p.ReposListAutolinks, true
	case "repos/list-branches":
		return p.ReposListBranches, true
	case "repos/list-branches-for-head-commit":
		return p.ReposListBranchesForHeadCommit, true
	case "repos/list-collaborators":
		return p.ReposListCollaborators, true
	case "repos/list-comments-for-commit":
		return p.ReposListCommentsForCommit, true
	case "repos/list-commit-comments-for-repo":
		return p.ReposListCommitCommentsForRepo, true
	case "repos/list-commit-statuses-for-ref":
		return p.ReposListCommitStatusesForRef, true
	case "repos/list-commits":
		return p.ReposListCommits, true
	case "repos/list-contributors":
		return p.ReposListContributors, true
	case "repos/list-deploy-keys":
		return p.ReposListDeployKeys, true
	case "repos/list-deployment-statuses":
		return p.ReposListDeploymentStatuses, true
	case "repos/list-deployments":
		return p.ReposListDeployments, true
	case "repos/list-for-authenticated-user":
		return p.ReposListForAuthenticatedUser, true
	case "repos/list-for-org":
		return p.ReposListForOrg, true
	case "repos/list-for-user":
		return p.ReposListForUser, true
	case "repos/list-forks":
		return p.ReposListForks, true
	case "repos/list-invitations":
		return p.ReposListInvitations, true
	case "repos/list-invitations-for-authenticated-user":
		return p.ReposListInvitationsForAuthenticatedUser, true
	case "repos/list-languages":
		return p.ReposListLanguages, true
	case "repos/list-pages-builds":
		return p.ReposListPagesBuilds, true
	case "repos/list-public":
		return p.ReposListPublic, true
	case "repos/list-pull-requests-associated-with-commit":
		return p.ReposListPullRequestsAssociatedWithCommit, true
	case "repos/list-release-assets":
		return p.ReposListReleaseAssets, true
	case "repos/list-releases":
		return p.ReposListReleases, true
	case "repos/list-tags":
		return p.ReposListTags, true
	case "repos/list-teams":
		return p.ReposListTeams, true
	case "repos/list-webhook-deliveries":
		return p.ReposListWebhookDeliveries, true
	case "repos/list-webhooks":
		return p.ReposListWebhooks, true
	case "repos/merge":
		return p.ReposMerge, true
	case "repos/merge-upstream":
		return p.ReposMergeUpstream, true
	case "repos/ping-webhook":
		return p.ReposPingWebhook, true
	case "repos/redeliver-webhook-delivery":
		return p.ReposRedeliverWebhookDelivery, true
	case "repos/remove-app-access-restrictions":
		return p.ReposRemoveAppAccessRestrictions, true
	case "repos/remove-collaborator":
		return p.ReposRemoveCollaborator, true
	case "repos/remove-status-check-contexts":
		return p.ReposRemoveStatusCheckContexts, true
	case "repos/remove-status-check-protection":
		return p.ReposRemoveStatusCheckProtection, true
	case "repos/remove-team-access-restrictions":
		return p.ReposRemoveTeamAccessRestrictions, true
	case "repos/remove-user-access-restrictions":
		return p.ReposRemoveUserAccessRestrictions, true
	case "repos/rename-branch":
		return p.ReposRenameBranch, true
	case "repos/replace-all-topics":
		return p.ReposReplaceAllTopics, true
	case "repos/request-pages-build":
		return p.ReposRequestPagesBuild, true
	case "repos/set-admin-branch-protection":
		return p.ReposSetAdminBranchProtection, true
	case "repos/set-app-access-restrictions":
		return p.ReposSetAppAccessRestrictions, true
	case "repos/set-status-check-contexts":
		return p.ReposSetStatusCheckContexts, true
	case "repos/set-team-access-restrictions":
		return p.ReposSetTeamAccessRestrictions, true
	case "repos/set-user-access-restrictions":
		return p.ReposSetUserAccessRestrictions, true
	case "repos/test-push-webhook":
		return p.ReposTestPushWebhook, true
	case "repos/transfer":
		return p.ReposTransfer, true
	case "repos/update":
		return p.ReposUpdate, true
	case "repos/update-branch-protection":
		return p.ReposUpdateBranchProtection, true
	case "repos/update-commit-comment":
		return p.ReposUpdateCommitComment, true
	case "repos/update-invitation":
		return p.ReposUpdateInvitation, true
	case "repos/update-pull-request-review-protection":
		return p.ReposUpdatePullRequestReviewProtection, true
	case "repos/update-release":
		return p.ReposUpdateRelease, true
	case "repos/update-release-asset":
		return p.ReposUpdateReleaseAsset, true
	case "repos/update-status-check-protection":
		return p.ReposUpdateStatusCheckProtection, true
	case "repos/update-webhook":
		return p.ReposUpdateWebhook, true
	case "repos/update-webhook-config-for-repo":
		return p.ReposUpdateWebhookConfigForRepo, true
	case "repos/upload-release-asset":
		return p.ReposUploadReleaseAsset, true
	case "scim/delete-user-from-org":
		return p.ScimDeleteUserFromOrg, true
	case "search/code":
		return p.SearchCode, true
	case "search/commits":
		return p.SearchCommits, true
	case "search/issues-and-pull-requests":
		return p.SearchIssuesAndPullRequests, true
	case "search/labels":
		return p.SearchLabels, true
	case "search/repos":
		return p.SearchRepos, true
	case "search/topics":
		return p.SearchTopics, true
	case "search/users":
		return p.SearchUsers, true
	case "secret-scanning/get-alert":
		return p.SecretScanningGetAlert, true
	case "secret-scanning/list-alerts-for-org":
		return p.SecretScanningListAlertsForOrg, true
	case "secret-scanning/list-alerts-for-repo":
		return p.SecretScanningListAlertsForRepo, true
	case "secret-scanning/update-alert":
		return p.SecretScanningUpdateAlert, true
	case "teams/add-member-legacy":
		return p.TeamsAddMemberLegacy, true
	case "teams/add-or-update-membership-for-user-in-org":
		return p.TeamsAddOrUpdateMembershipForUserInOrg, true
	case "teams/add-or-update-membership-for-user-legacy":
		return p.TeamsAddOrUpdateMembershipForUserLegacy, true
	case "teams/add-or-update-project-permissions-in-org":
		return p.TeamsAddOrUpdateProjectPermissionsInOrg, true
	case "teams/add-or-update-project-permissions-legacy":
		return p.TeamsAddOrUpdateProjectPermissionsLegacy, true
	case "teams/add-or-update-repo-permissions-in-org":
		return p.TeamsAddOrUpdateRepoPermissionsInOrg, true
	case "teams/add-or-update-repo-permissions-legacy":
		return p.TeamsAddOrUpdateRepoPermissionsLegacy, true
	case "teams/check-permissions-for-project-in-org":
		return p.TeamsCheckPermissionsForProjectInOrg, true
	case "teams/check-permissions-for-project-legacy":
		return p.TeamsCheckPermissionsForProjectLegacy, true
	case "teams/check-permissions-for-repo-in-org":
		return p.TeamsCheckPermissionsForRepoInOrg, true
	case "teams/check-permissions-for-repo-legacy":
		return p.TeamsCheckPermissionsForRepoLegacy, true
	case "teams/create":
		return p.TeamsCreate, true
	case "teams/create-discussion-comment-in-org":
		return p.TeamsCreateDiscussionCommentInOrg, true
	case "teams/create-discussion-comment-legacy":
		return p.TeamsCreateDiscussionCommentLegacy, true
	case "teams/create-discussion-in-org":
		return p.TeamsCreateDiscussionInOrg, true
	case "teams/create-discussion-legacy":
		return p.TeamsCreateDiscussionLegacy, true
	case "teams/create-or-update-idp-group-connections-in-org":
		return p.TeamsCreateOrUpdateIdpGroupConnectionsInOrg, true
	case "teams/create-or-update-idp-group-connections-legacy":
		return p.TeamsCreateOrUpdateIdpGroupConnectionsLegacy, true
	case "teams/delete-discussion-comment-in-org":
		return p.TeamsDeleteDiscussionCommentInOrg, true
	case "teams/delete-discussion-comment-legacy":
		return p.TeamsDeleteDiscussionCommentLegacy, true
	case "teams/delete-discussion-in-org":
		return p.TeamsDeleteDiscussionInOrg, true
	case "teams/delete-discussion-legacy":
		return p.TeamsDeleteDiscussionLegacy, true
	case "teams/delete-in-org":
		return p.TeamsDeleteInOrg, true
	case "teams/delete-legacy":
		return p.TeamsDeleteLegacy, true
	case "teams/get-by-name":
		return p.TeamsGetByName, true
	case "teams/get-discussion-comment-in-org":
		return p.TeamsGetDiscussionCommentInOrg, true
	case "teams/get-discussion-comment-legacy":
		return p.TeamsGetDiscussionCommentLegacy, true
	case "teams/get-discussion-in-org":
		return p.TeamsGetDiscussionInOrg, true
	case "teams/get-discussion-legacy":
		return p.TeamsGetDiscussionLegacy, true
	case "teams/get-legacy":
		return p.TeamsGetLegacy, true
	case "teams/get-member-legacy":
		return p.TeamsGetMemberLegacy, true
	case "teams/get-membership-for-user-in-org":
		return p.TeamsGetMembershipForUserInOrg, true
	case "teams/get-membership-for-user-legacy":
		return p.TeamsGetMembershipForUserLegacy, true
	case "teams/list":
		return p.TeamsList, true
	case "teams/list-child-in-org":
		return p.TeamsListChildInOrg, true
	case "teams/list-child-legacy":
		return p.TeamsListChildLegacy, true
	case "teams/list-discussion-comments-in-org":
		return p.TeamsListDiscussionCommentsInOrg, true
	case "teams/list-discussion-comments-legacy":
		return p.TeamsListDiscussionCommentsLegacy, true
	case "teams/list-discussions-in-org":
		return p.TeamsListDiscussionsInOrg, true
	case "teams/list-discussions-legacy":
		return p.TeamsListDiscussionsLegacy, true
	case "teams/list-for-authenticated-user":
		return p.TeamsListForAuthenticatedUser, true
	case "teams/list-idp-groups-for-legacy":
		return p.TeamsListIdpGroupsForLegacy, true
	case "teams/list-idp-groups-for-org":
		return p.TeamsListIdpGroupsForOrg, true
	case "teams/list-idp-groups-in-org":
		return p.TeamsListIdpGroupsInOrg, true
	case "teams/list-members-in-org":
		return p.TeamsListMembersInOrg, true
	case "teams/list-members-legacy":
		return p.TeamsListMembersLegacy, true
	case "teams/list-pending-invitations-in-org":
		return p.TeamsListPendingInvitationsInOrg, true
	case "teams/list-pending-invitations-legacy":
		return p.TeamsListPendingInvitationsLegacy, true
	case "teams/list-projects-in-org":
		return p.TeamsListProjectsInOrg, true
	case "teams/list-projects-legacy":
		return p.TeamsListProjectsLegacy, true
	case "teams/list-repos-in-org":
		return p.TeamsListReposInOrg, true
	case "teams/list-repos-legacy":
		return p.TeamsListReposLegacy, true
	case "teams/remove-member-legacy":
		return p.TeamsRemoveMemberLegacy, true
	case "teams/remove-membership-for-user-in-org":
		return p.TeamsRemoveMembershipForUserInOrg, true
	case "teams/remove-membership-for-user-legacy":
		return p.TeamsRemoveMembershipForUserLegacy, true
	case "teams/remove-project-in-org":
		return p.TeamsRemoveProjectInOrg, true
	case "teams/remove-project-legacy":
		return p.TeamsRemoveProjectLegacy, true
	case "teams/remove-repo-in-org":
		return p.TeamsRemoveRepoInOrg, true
	case "teams/remove-repo-legacy":
		return p.TeamsRemoveRepoLegacy, true
	case "teams/update-discussion-comment-in-org":
		return p.TeamsUpdateDiscussionCommentInOrg, true
	case "teams/update-discussion-comment-legacy":
		return p.TeamsUpdateDiscussionCommentLegacy, true
	case "teams/update-discussion-in-org":
		return p.TeamsUpdateDiscussionInOrg, true
	case "teams/update-discussion-legacy":
		return p.TeamsUpdateDiscussionLegacy, true
	case "teams/update-in-org":
		return p.TeamsUpdateInOrg, true
	case "teams/update-legacy":
		return p.TeamsUpdateLegacy, true
	case "users/add-email-for-authenticated":
		return p.UsersAddEmailForAuthenticated, true
	case "users/block":
		return p.UsersBlock, true
	case "users/check-blocked":
		return p.UsersCheckBlocked, true
	case "users/check-following-for-user":
		return p.UsersCheckFollowingForUser, true
	case "users/check-person-is-followed-by-authenticated":
		return p.UsersCheckPersonIsFollowedByAuthenticated, true
	case "users/create-gpg-key-for-authenticated":
		return p.UsersCreateGpgKeyForAuthenticated, true
	case "users/create-public-ssh-key-for-authenticated":
		return p.UsersCreatePublicSSHKeyForAuthenticated, true
	case "users/delete-email-for-authenticated":
		return p.UsersDeleteEmailForAuthenticated, true
	case "users/delete-gpg-key-for-authenticated":
		return p.UsersDeleteGpgKeyForAuthenticated, true
	case "users/delete-public-ssh-key-for-authenticated":
		return p.UsersDeletePublicSSHKeyForAuthenticated, true
	case "users/follow":
		return p.UsersFollow, true
	case "users/get-authenticated":
		return p.UsersGetAuthenticated, true
	case "users/get-by-username":
		return p.UsersGetByUsername, true
	case "users/get-context-for-user":
		return p.UsersGetContextForUser, true
	case "users/get-gpg-key-for-authenticated":
		return p.UsersGetGpgKeyForAuthenticated, true
	case "users/get-public-ssh-key-for-authenticated":
		return p.UsersGetPublicSSHKeyForAuthenticated, true
	case "users/list":
		return p.UsersList, true
	case "users/list-blocked-by-authenticated":
		return p.UsersListBlockedByAuthenticated, true
	case "users/list-emails-for-authenticated":
		return p.UsersListEmailsForAuthenticated, true
	case "users/list-followed-by-authenticated":
		return p.UsersListFollowedByAuthenticated, true
	case "users/list-followers-for-authenticated-user":
		return p.UsersListFollowersForAuthenticatedUser, true
	case "users/list-followers-for-user":
		return p.UsersListFollowersForUser, true
	case "users/list-following-for-user":
		return p.UsersListFollowingForUser, true
	case "users/list-gpg-keys-for-authenticated":
		return p.UsersListGpgKeysForAuthenticated, true
	case "users/list-gpg-keys-for-user":
		return p.UsersListGpgKeysForUser, true
	case "users/list-public-emails-for-authenticated":
		return p.UsersListPublicEmailsForAuthenticated, true
	case "users/list-public-keys-for-user":
		return p.UsersListPublicKeysForUser, true
	case "users/list-public-ssh-keys-for-authenticated":
		return p.UsersListPublicSSHKeysForAuthenticated, true
	case "users/set-primary-email-visibility-for-authenticated":
		return p.UsersSetPrimaryEmailVisibilityForAuthenticated, true
	case "users/unblock":
		return p.UsersUnblock, true
	case "users/unfollow":
		return p.UsersUnfollow, true
	case "users/update-authenticated":
		return p.UsersUpdateAuthenticated, true
	default:
		return op, false
	}
}

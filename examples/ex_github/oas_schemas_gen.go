// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Api Overview.
// Ref: #/components/schemas/api-overview
type APIOverview struct {
	VerifiablePasswordAuthentication bool                             `json:"verifiable_password_authentication"`
	SSHKeyFingerprints               OptAPIOverviewSSHKeyFingerprints `json:"ssh_key_fingerprints"`
	Hooks                            []string                         `json:"hooks"`
	Web                              []string                         `json:"web"`
	API                              []string                         `json:"api"`
	Git                              []string                         `json:"git"`
	Packages                         []string                         `json:"packages"`
	Pages                            []string                         `json:"pages"`
	Importer                         []string                         `json:"importer"`
	Actions                          []string                         `json:"actions"`
	Dependabot                       []string                         `json:"dependabot"`
}

// GetVerifiablePasswordAuthentication returns the value of VerifiablePasswordAuthentication.
func (s *APIOverview) GetVerifiablePasswordAuthentication() bool {
	return s.VerifiablePasswordAuthentication
}

// GetSSHKeyFingerprints returns the value of SSHKeyFingerprints.
func (s *APIOverview) GetSSHKeyFingerprints() OptAPIOverviewSSHKeyFingerprints {
	return s.SSHKeyFingerprints
}

// GetHooks returns the value of Hooks.
func (s *APIOverview) GetHooks() []string {
	return s.Hooks
}

// GetWeb returns the value of Web.
func (s *APIOverview) GetWeb() []string {
	return s.Web
}

// GetAPI returns the value of API.
func (s *APIOverview) GetAPI() []string {
	return s.API
}

// GetGit returns the value of Git.
func (s *APIOverview) GetGit() []string {
	return s.Git
}

// GetPackages returns the value of Packages.
func (s *APIOverview) GetPackages() []string {
	return s.Packages
}

// GetPages returns the value of Pages.
func (s *APIOverview) GetPages() []string {
	return s.Pages
}

// GetImporter returns the value of Importer.
func (s *APIOverview) GetImporter() []string {
	return s.Importer
}

// GetActions returns the value of Actions.
func (s *APIOverview) GetActions() []string {
	return s.Actions
}

// GetDependabot returns the value of Dependabot.
func (s *APIOverview) GetDependabot() []string {
	return s.Dependabot
}

// SetVerifiablePasswordAuthentication sets the value of VerifiablePasswordAuthentication.
func (s *APIOverview) SetVerifiablePasswordAuthentication(val bool) {
	s.VerifiablePasswordAuthentication = val
}

// SetSSHKeyFingerprints sets the value of SSHKeyFingerprints.
func (s *APIOverview) SetSSHKeyFingerprints(val OptAPIOverviewSSHKeyFingerprints) {
	s.SSHKeyFingerprints = val
}

// SetHooks sets the value of Hooks.
func (s *APIOverview) SetHooks(val []string) {
	s.Hooks = val
}

// SetWeb sets the value of Web.
func (s *APIOverview) SetWeb(val []string) {
	s.Web = val
}

// SetAPI sets the value of API.
func (s *APIOverview) SetAPI(val []string) {
	s.API = val
}

// SetGit sets the value of Git.
func (s *APIOverview) SetGit(val []string) {
	s.Git = val
}

// SetPackages sets the value of Packages.
func (s *APIOverview) SetPackages(val []string) {
	s.Packages = val
}

// SetPages sets the value of Pages.
func (s *APIOverview) SetPages(val []string) {
	s.Pages = val
}

// SetImporter sets the value of Importer.
func (s *APIOverview) SetImporter(val []string) {
	s.Importer = val
}

// SetActions sets the value of Actions.
func (s *APIOverview) SetActions(val []string) {
	s.Actions = val
}

// SetDependabot sets the value of Dependabot.
func (s *APIOverview) SetDependabot(val []string) {
	s.Dependabot = val
}

func (*APIOverview) metaGetRes() {}

type APIOverviewSSHKeyFingerprints struct {
	SHA256RSA     OptString `json:"SHA256_RSA"`
	SHA256DSA     OptString `json:"SHA256_DSA"`
	SHA256ECDSA   OptString `json:"SHA256_ECDSA"`
	SHA256ED25519 OptString `json:"SHA256_ED25519"`
}

// GetSHA256RSA returns the value of SHA256RSA.
func (s *APIOverviewSSHKeyFingerprints) GetSHA256RSA() OptString {
	return s.SHA256RSA
}

// GetSHA256DSA returns the value of SHA256DSA.
func (s *APIOverviewSSHKeyFingerprints) GetSHA256DSA() OptString {
	return s.SHA256DSA
}

// GetSHA256ECDSA returns the value of SHA256ECDSA.
func (s *APIOverviewSSHKeyFingerprints) GetSHA256ECDSA() OptString {
	return s.SHA256ECDSA
}

// GetSHA256ED25519 returns the value of SHA256ED25519.
func (s *APIOverviewSSHKeyFingerprints) GetSHA256ED25519() OptString {
	return s.SHA256ED25519
}

// SetSHA256RSA sets the value of SHA256RSA.
func (s *APIOverviewSSHKeyFingerprints) SetSHA256RSA(val OptString) {
	s.SHA256RSA = val
}

// SetSHA256DSA sets the value of SHA256DSA.
func (s *APIOverviewSSHKeyFingerprints) SetSHA256DSA(val OptString) {
	s.SHA256DSA = val
}

// SetSHA256ECDSA sets the value of SHA256ECDSA.
func (s *APIOverviewSSHKeyFingerprints) SetSHA256ECDSA(val OptString) {
	s.SHA256ECDSA = val
}

// SetSHA256ED25519 sets the value of SHA256ED25519.
func (s *APIOverviewSSHKeyFingerprints) SetSHA256ED25519(val OptString) {
	s.SHA256ED25519 = val
}

type Accepted struct{}

func (*Accepted) appsRedeliverWebhookDeliveryRes()  {}
func (*Accepted) orgsRedeliverWebhookDeliveryRes()  {}
func (*Accepted) reposEnableLfsForRepoRes()         {}
func (*Accepted) reposGetCodeFrequencyStatsRes()    {}
func (*Accepted) reposGetCommitActivityStatsRes()   {}
func (*Accepted) reposGetContributorsStatsRes()     {}
func (*Accepted) reposRedeliverWebhookDeliveryRes() {}
func (*Accepted) usersGetByUsernameRes()            {}

// ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent is response for ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg operation.
type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgNoContent struct{}

// ActionsAddSelectedRepoToOrgSecretConflict is response for ActionsAddSelectedRepoToOrgSecret operation.
type ActionsAddSelectedRepoToOrgSecretConflict struct{}

func (*ActionsAddSelectedRepoToOrgSecretConflict) actionsAddSelectedRepoToOrgSecretRes() {}

// ActionsAddSelectedRepoToOrgSecretNoContent is response for ActionsAddSelectedRepoToOrgSecret operation.
type ActionsAddSelectedRepoToOrgSecretNoContent struct{}

func (*ActionsAddSelectedRepoToOrgSecretNoContent) actionsAddSelectedRepoToOrgSecretRes() {}

// ActionsAddSelfHostedRunnerToGroupForOrgNoContent is response for ActionsAddSelfHostedRunnerToGroupForOrg operation.
type ActionsAddSelfHostedRunnerToGroupForOrgNoContent struct{}

type ActionsApproveWorkflowRunForbidden BasicError

func (*ActionsApproveWorkflowRunForbidden) actionsApproveWorkflowRunRes() {}

type ActionsApproveWorkflowRunNotFound BasicError

func (*ActionsApproveWorkflowRunNotFound) actionsApproveWorkflowRunRes() {}

// Ref: #/components/schemas/actions-billing-usage
type ActionsBillingUsage struct {
	// The sum of the free and paid GitHub Actions minutes used.
	TotalMinutesUsed int `json:"total_minutes_used"`
	// The total paid GitHub Actions minutes used.
	TotalPaidMinutesUsed int `json:"total_paid_minutes_used"`
	// The amount of free GitHub Actions minutes available.
	IncludedMinutes      int                                     `json:"included_minutes"`
	MinutesUsedBreakdown ActionsBillingUsageMinutesUsedBreakdown `json:"minutes_used_breakdown"`
}

// GetTotalMinutesUsed returns the value of TotalMinutesUsed.
func (s *ActionsBillingUsage) GetTotalMinutesUsed() int {
	return s.TotalMinutesUsed
}

// GetTotalPaidMinutesUsed returns the value of TotalPaidMinutesUsed.
func (s *ActionsBillingUsage) GetTotalPaidMinutesUsed() int {
	return s.TotalPaidMinutesUsed
}

// GetIncludedMinutes returns the value of IncludedMinutes.
func (s *ActionsBillingUsage) GetIncludedMinutes() int {
	return s.IncludedMinutes
}

// GetMinutesUsedBreakdown returns the value of MinutesUsedBreakdown.
func (s *ActionsBillingUsage) GetMinutesUsedBreakdown() ActionsBillingUsageMinutesUsedBreakdown {
	return s.MinutesUsedBreakdown
}

// SetTotalMinutesUsed sets the value of TotalMinutesUsed.
func (s *ActionsBillingUsage) SetTotalMinutesUsed(val int) {
	s.TotalMinutesUsed = val
}

// SetTotalPaidMinutesUsed sets the value of TotalPaidMinutesUsed.
func (s *ActionsBillingUsage) SetTotalPaidMinutesUsed(val int) {
	s.TotalPaidMinutesUsed = val
}

// SetIncludedMinutes sets the value of IncludedMinutes.
func (s *ActionsBillingUsage) SetIncludedMinutes(val int) {
	s.IncludedMinutes = val
}

// SetMinutesUsedBreakdown sets the value of MinutesUsedBreakdown.
func (s *ActionsBillingUsage) SetMinutesUsedBreakdown(val ActionsBillingUsageMinutesUsedBreakdown) {
	s.MinutesUsedBreakdown = val
}

type ActionsBillingUsageMinutesUsedBreakdown struct {
	// Total minutes used on Ubuntu runner machines.
	UBUNTU OptInt `json:"UBUNTU"`
	// Total minutes used on macOS runner machines.
	MACOS OptInt `json:"MACOS"`
	// Total minutes used on Windows runner machines.
	WINDOWS OptInt `json:"WINDOWS"`
}

// GetUBUNTU returns the value of UBUNTU.
func (s *ActionsBillingUsageMinutesUsedBreakdown) GetUBUNTU() OptInt {
	return s.UBUNTU
}

// GetMACOS returns the value of MACOS.
func (s *ActionsBillingUsageMinutesUsedBreakdown) GetMACOS() OptInt {
	return s.MACOS
}

// GetWINDOWS returns the value of WINDOWS.
func (s *ActionsBillingUsageMinutesUsedBreakdown) GetWINDOWS() OptInt {
	return s.WINDOWS
}

// SetUBUNTU sets the value of UBUNTU.
func (s *ActionsBillingUsageMinutesUsedBreakdown) SetUBUNTU(val OptInt) {
	s.UBUNTU = val
}

// SetMACOS sets the value of MACOS.
func (s *ActionsBillingUsageMinutesUsedBreakdown) SetMACOS(val OptInt) {
	s.MACOS = val
}

// SetWINDOWS sets the value of WINDOWS.
func (s *ActionsBillingUsageMinutesUsedBreakdown) SetWINDOWS(val OptInt) {
	s.WINDOWS = val
}

type ActionsCancelWorkflowRunAccepted struct{}

// ActionsCreateOrUpdateEnvironmentSecretNoContent is response for ActionsCreateOrUpdateEnvironmentSecret operation.
type ActionsCreateOrUpdateEnvironmentSecretNoContent struct{}

func (*ActionsCreateOrUpdateEnvironmentSecretNoContent) actionsCreateOrUpdateEnvironmentSecretRes() {}

type ActionsCreateOrUpdateEnvironmentSecretReq struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.
	// io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment
	// public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
	EncryptedValue string `json:"encrypted_value"`
	// ID of the key you used to encrypt the secret.
	KeyID string `json:"key_id"`
}

// GetEncryptedValue returns the value of EncryptedValue.
func (s *ActionsCreateOrUpdateEnvironmentSecretReq) GetEncryptedValue() string {
	return s.EncryptedValue
}

// GetKeyID returns the value of KeyID.
func (s *ActionsCreateOrUpdateEnvironmentSecretReq) GetKeyID() string {
	return s.KeyID
}

// SetEncryptedValue sets the value of EncryptedValue.
func (s *ActionsCreateOrUpdateEnvironmentSecretReq) SetEncryptedValue(val string) {
	s.EncryptedValue = val
}

// SetKeyID sets the value of KeyID.
func (s *ActionsCreateOrUpdateEnvironmentSecretReq) SetKeyID(val string) {
	s.KeyID = val
}

// ActionsCreateOrUpdateOrgSecretNoContent is response for ActionsCreateOrUpdateOrgSecret operation.
type ActionsCreateOrUpdateOrgSecretNoContent struct{}

func (*ActionsCreateOrUpdateOrgSecretNoContent) actionsCreateOrUpdateOrgSecretRes() {}

type ActionsCreateOrUpdateOrgSecretReq struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.
	// io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization
	// public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key)
	// endpoint.
	EncryptedValue OptString `json:"encrypted_value"`
	// ID of the key you used to encrypt the secret.
	KeyID OptString `json:"key_id"`
	// Configures the access that repositories have to the organization secret. Can be one of:
	// \- `all` - All repositories in an organization can access the secret.
	// \- `private` - Private repositories in an organization can access the secret.
	// \- `selected` - Only specific repositories can access the secret.
	Visibility ActionsCreateOrUpdateOrgSecretReqVisibility `json:"visibility"`
	// An array of repository ids that can access the organization secret. You can only provide a list of
	// repository ids when the `visibility` is set to `selected`. You can manage the list of selected
	// repositories using the [List selected repositories for an organization secret](https://docs.github.
	// com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected
	// repositories for an organization secret](https://docs.github.
	// com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove
	// selected repository from an organization secret](https://docs.github.
	// com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []string `json:"selected_repository_ids"`
}

// GetEncryptedValue returns the value of EncryptedValue.
func (s *ActionsCreateOrUpdateOrgSecretReq) GetEncryptedValue() OptString {
	return s.EncryptedValue
}

// GetKeyID returns the value of KeyID.
func (s *ActionsCreateOrUpdateOrgSecretReq) GetKeyID() OptString {
	return s.KeyID
}

// GetVisibility returns the value of Visibility.
func (s *ActionsCreateOrUpdateOrgSecretReq) GetVisibility() ActionsCreateOrUpdateOrgSecretReqVisibility {
	return s.Visibility
}

// GetSelectedRepositoryIds returns the value of SelectedRepositoryIds.
func (s *ActionsCreateOrUpdateOrgSecretReq) GetSelectedRepositoryIds() []string {
	return s.SelectedRepositoryIds
}

// SetEncryptedValue sets the value of EncryptedValue.
func (s *ActionsCreateOrUpdateOrgSecretReq) SetEncryptedValue(val OptString) {
	s.EncryptedValue = val
}

// SetKeyID sets the value of KeyID.
func (s *ActionsCreateOrUpdateOrgSecretReq) SetKeyID(val OptString) {
	s.KeyID = val
}

// SetVisibility sets the value of Visibility.
func (s *ActionsCreateOrUpdateOrgSecretReq) SetVisibility(val ActionsCreateOrUpdateOrgSecretReqVisibility) {
	s.Visibility = val
}

// SetSelectedRepositoryIds sets the value of SelectedRepositoryIds.
func (s *ActionsCreateOrUpdateOrgSecretReq) SetSelectedRepositoryIds(val []string) {
	s.SelectedRepositoryIds = val
}

// Configures the access that repositories have to the organization secret. Can be one of:
// \- `all` - All repositories in an organization can access the secret.
// \- `private` - Private repositories in an organization can access the secret.
// \- `selected` - Only specific repositories can access the secret.
type ActionsCreateOrUpdateOrgSecretReqVisibility string

const (
	ActionsCreateOrUpdateOrgSecretReqVisibilityAll      ActionsCreateOrUpdateOrgSecretReqVisibility = "all"
	ActionsCreateOrUpdateOrgSecretReqVisibilityPrivate  ActionsCreateOrUpdateOrgSecretReqVisibility = "private"
	ActionsCreateOrUpdateOrgSecretReqVisibilitySelected ActionsCreateOrUpdateOrgSecretReqVisibility = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActionsCreateOrUpdateOrgSecretReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ActionsCreateOrUpdateOrgSecretReqVisibilityAll:
		return []byte(s), nil
	case ActionsCreateOrUpdateOrgSecretReqVisibilityPrivate:
		return []byte(s), nil
	case ActionsCreateOrUpdateOrgSecretReqVisibilitySelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionsCreateOrUpdateOrgSecretReqVisibility) UnmarshalText(data []byte) error {
	switch ActionsCreateOrUpdateOrgSecretReqVisibility(data) {
	case ActionsCreateOrUpdateOrgSecretReqVisibilityAll:
		*s = ActionsCreateOrUpdateOrgSecretReqVisibilityAll
		return nil
	case ActionsCreateOrUpdateOrgSecretReqVisibilityPrivate:
		*s = ActionsCreateOrUpdateOrgSecretReqVisibilityPrivate
		return nil
	case ActionsCreateOrUpdateOrgSecretReqVisibilitySelected:
		*s = ActionsCreateOrUpdateOrgSecretReqVisibilitySelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActionsCreateOrUpdateRepoSecretCreated struct{}

func (*ActionsCreateOrUpdateRepoSecretCreated) actionsCreateOrUpdateRepoSecretRes() {}

// ActionsCreateOrUpdateRepoSecretNoContent is response for ActionsCreateOrUpdateRepoSecret operation.
type ActionsCreateOrUpdateRepoSecretNoContent struct{}

func (*ActionsCreateOrUpdateRepoSecretNoContent) actionsCreateOrUpdateRepoSecretRes() {}

type ActionsCreateOrUpdateRepoSecretReq struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.
	// io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository
	// public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
	EncryptedValue OptString `json:"encrypted_value"`
	// ID of the key you used to encrypt the secret.
	KeyID OptString `json:"key_id"`
}

// GetEncryptedValue returns the value of EncryptedValue.
func (s *ActionsCreateOrUpdateRepoSecretReq) GetEncryptedValue() OptString {
	return s.EncryptedValue
}

// GetKeyID returns the value of KeyID.
func (s *ActionsCreateOrUpdateRepoSecretReq) GetKeyID() OptString {
	return s.KeyID
}

// SetEncryptedValue sets the value of EncryptedValue.
func (s *ActionsCreateOrUpdateRepoSecretReq) SetEncryptedValue(val OptString) {
	s.EncryptedValue = val
}

// SetKeyID sets the value of KeyID.
func (s *ActionsCreateOrUpdateRepoSecretReq) SetKeyID(val OptString) {
	s.KeyID = val
}

type ActionsCreateSelfHostedRunnerGroupForOrgReq struct {
	// Name of the runner group.
	Name string `json:"name"`
	// Visibility of a runner group. You can select all repositories, select individual repositories, or
	// limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
	Visibility OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility `json:"visibility"`
	// List of repository IDs that can access the runner group.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
	// List of runner IDs to add to the runner group.
	Runners []int `json:"runners"`
}

// GetName returns the value of Name.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) GetVisibility() OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility {
	return s.Visibility
}

// GetSelectedRepositoryIds returns the value of SelectedRepositoryIds.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) GetSelectedRepositoryIds() []int {
	return s.SelectedRepositoryIds
}

// GetRunners returns the value of Runners.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) GetRunners() []int {
	return s.Runners
}

// SetName sets the value of Name.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) SetVisibility(val OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) {
	s.Visibility = val
}

// SetSelectedRepositoryIds sets the value of SelectedRepositoryIds.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) SetSelectedRepositoryIds(val []int) {
	s.SelectedRepositoryIds = val
}

// SetRunners sets the value of Runners.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReq) SetRunners(val []int) {
	s.Runners = val
}

// Visibility of a runner group. You can select all repositories, select individual repositories, or
// limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
type ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility string

const (
	ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilitySelected ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility = "selected"
	ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityAll      ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility = "all"
	ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityPrivate  ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility = "private"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilitySelected:
		return []byte(s), nil
	case ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityAll:
		return []byte(s), nil
	case ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityPrivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) UnmarshalText(data []byte) error {
	switch ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility(data) {
	case ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilitySelected:
		*s = ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilitySelected
		return nil
	case ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityAll:
		*s = ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityAll
		return nil
	case ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityPrivate:
		*s = ActionsCreateSelfHostedRunnerGroupForOrgReqVisibilityPrivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ActionsDeleteArtifactNoContent is response for ActionsDeleteArtifact operation.
type ActionsDeleteArtifactNoContent struct{}

// ActionsDeleteEnvironmentSecretNoContent is response for ActionsDeleteEnvironmentSecret operation.
type ActionsDeleteEnvironmentSecretNoContent struct{}

// ActionsDeleteOrgSecretNoContent is response for ActionsDeleteOrgSecret operation.
type ActionsDeleteOrgSecretNoContent struct{}

// ActionsDeleteRepoSecretNoContent is response for ActionsDeleteRepoSecret operation.
type ActionsDeleteRepoSecretNoContent struct{}

// ActionsDeleteSelfHostedRunnerFromOrgNoContent is response for ActionsDeleteSelfHostedRunnerFromOrg operation.
type ActionsDeleteSelfHostedRunnerFromOrgNoContent struct{}

// ActionsDeleteSelfHostedRunnerFromRepoNoContent is response for ActionsDeleteSelfHostedRunnerFromRepo operation.
type ActionsDeleteSelfHostedRunnerFromRepoNoContent struct{}

// ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent is response for ActionsDeleteSelfHostedRunnerGroupFromOrg operation.
type ActionsDeleteSelfHostedRunnerGroupFromOrgNoContent struct{}

// ActionsDeleteWorkflowRunLogsNoContent is response for ActionsDeleteWorkflowRunLogs operation.
type ActionsDeleteWorkflowRunLogsNoContent struct{}

// ActionsDeleteWorkflowRunNoContent is response for ActionsDeleteWorkflowRun operation.
type ActionsDeleteWorkflowRunNoContent struct{}

// ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent is response for ActionsDisableSelectedRepositoryGithubActionsOrganization operation.
type ActionsDisableSelectedRepositoryGithubActionsOrganizationNoContent struct{}

// ActionsDownloadArtifactFound is response for ActionsDownloadArtifact operation.
type ActionsDownloadArtifactFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *ActionsDownloadArtifactFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *ActionsDownloadArtifactFound) SetLocation(val OptString) {
	s.Location = val
}

// ActionsDownloadJobLogsForWorkflowRunFound is response for ActionsDownloadJobLogsForWorkflowRun operation.
type ActionsDownloadJobLogsForWorkflowRunFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *ActionsDownloadJobLogsForWorkflowRunFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *ActionsDownloadJobLogsForWorkflowRunFound) SetLocation(val OptString) {
	s.Location = val
}

// ActionsDownloadWorkflowRunLogsFound is response for ActionsDownloadWorkflowRunLogs operation.
type ActionsDownloadWorkflowRunLogsFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *ActionsDownloadWorkflowRunLogsFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *ActionsDownloadWorkflowRunLogsFound) SetLocation(val OptString) {
	s.Location = val
}

// ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent is response for ActionsEnableSelectedRepositoryGithubActionsOrganization operation.
type ActionsEnableSelectedRepositoryGithubActionsOrganizationNoContent struct{}

type ActionsEnabled bool

// Ref: #/components/schemas/actions-enterprise-permissions
type ActionsEnterprisePermissions struct {
	EnabledOrganizations EnabledOrganizations `json:"enabled_organizations"`
	// The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions,
	//  when `enabled_organizations` is set to `selected`.
	SelectedOrganizationsURL OptString             `json:"selected_organizations_url"`
	AllowedActions           OptAllowedActions     `json:"allowed_actions"`
	SelectedActionsURL       OptSelectedActionsURL `json:"selected_actions_url"`
}

// GetEnabledOrganizations returns the value of EnabledOrganizations.
func (s *ActionsEnterprisePermissions) GetEnabledOrganizations() EnabledOrganizations {
	return s.EnabledOrganizations
}

// GetSelectedOrganizationsURL returns the value of SelectedOrganizationsURL.
func (s *ActionsEnterprisePermissions) GetSelectedOrganizationsURL() OptString {
	return s.SelectedOrganizationsURL
}

// GetAllowedActions returns the value of AllowedActions.
func (s *ActionsEnterprisePermissions) GetAllowedActions() OptAllowedActions {
	return s.AllowedActions
}

// GetSelectedActionsURL returns the value of SelectedActionsURL.
func (s *ActionsEnterprisePermissions) GetSelectedActionsURL() OptSelectedActionsURL {
	return s.SelectedActionsURL
}

// SetEnabledOrganizations sets the value of EnabledOrganizations.
func (s *ActionsEnterprisePermissions) SetEnabledOrganizations(val EnabledOrganizations) {
	s.EnabledOrganizations = val
}

// SetSelectedOrganizationsURL sets the value of SelectedOrganizationsURL.
func (s *ActionsEnterprisePermissions) SetSelectedOrganizationsURL(val OptString) {
	s.SelectedOrganizationsURL = val
}

// SetAllowedActions sets the value of AllowedActions.
func (s *ActionsEnterprisePermissions) SetAllowedActions(val OptAllowedActions) {
	s.AllowedActions = val
}

// SetSelectedActionsURL sets the value of SelectedActionsURL.
func (s *ActionsEnterprisePermissions) SetSelectedActionsURL(val OptSelectedActionsURL) {
	s.SelectedActionsURL = val
}

type ActionsListArtifactsForRepoOK struct {
	TotalCount int        `json:"total_count"`
	Artifacts  []Artifact `json:"artifacts"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListArtifactsForRepoOK) GetTotalCount() int {
	return s.TotalCount
}

// GetArtifacts returns the value of Artifacts.
func (s *ActionsListArtifactsForRepoOK) GetArtifacts() []Artifact {
	return s.Artifacts
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListArtifactsForRepoOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetArtifacts sets the value of Artifacts.
func (s *ActionsListArtifactsForRepoOK) SetArtifacts(val []Artifact) {
	s.Artifacts = val
}

// ActionsListArtifactsForRepoOKHeaders wraps ActionsListArtifactsForRepoOK with response headers.
type ActionsListArtifactsForRepoOKHeaders struct {
	Link     OptString
	Response ActionsListArtifactsForRepoOK
}

// GetLink returns the value of Link.
func (s *ActionsListArtifactsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListArtifactsForRepoOKHeaders) GetResponse() ActionsListArtifactsForRepoOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListArtifactsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListArtifactsForRepoOKHeaders) SetResponse(val ActionsListArtifactsForRepoOK) {
	s.Response = val
}

type ActionsListEnvironmentSecretsOK struct {
	TotalCount int             `json:"total_count"`
	Secrets    []ActionsSecret `json:"secrets"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListEnvironmentSecretsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetSecrets returns the value of Secrets.
func (s *ActionsListEnvironmentSecretsOK) GetSecrets() []ActionsSecret {
	return s.Secrets
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListEnvironmentSecretsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetSecrets sets the value of Secrets.
func (s *ActionsListEnvironmentSecretsOK) SetSecrets(val []ActionsSecret) {
	s.Secrets = val
}

// ActionsListEnvironmentSecretsOKHeaders wraps ActionsListEnvironmentSecretsOK with response headers.
type ActionsListEnvironmentSecretsOKHeaders struct {
	Link     OptString
	Response ActionsListEnvironmentSecretsOK
}

// GetLink returns the value of Link.
func (s *ActionsListEnvironmentSecretsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListEnvironmentSecretsOKHeaders) GetResponse() ActionsListEnvironmentSecretsOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListEnvironmentSecretsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListEnvironmentSecretsOKHeaders) SetResponse(val ActionsListEnvironmentSecretsOK) {
	s.Response = val
}

type ActionsListJobsForWorkflowRunFilter string

const (
	ActionsListJobsForWorkflowRunFilterLatest ActionsListJobsForWorkflowRunFilter = "latest"
	ActionsListJobsForWorkflowRunFilterAll    ActionsListJobsForWorkflowRunFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActionsListJobsForWorkflowRunFilter) MarshalText() ([]byte, error) {
	switch s {
	case ActionsListJobsForWorkflowRunFilterLatest:
		return []byte(s), nil
	case ActionsListJobsForWorkflowRunFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionsListJobsForWorkflowRunFilter) UnmarshalText(data []byte) error {
	switch ActionsListJobsForWorkflowRunFilter(data) {
	case ActionsListJobsForWorkflowRunFilterLatest:
		*s = ActionsListJobsForWorkflowRunFilterLatest
		return nil
	case ActionsListJobsForWorkflowRunFilterAll:
		*s = ActionsListJobsForWorkflowRunFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActionsListJobsForWorkflowRunOK struct {
	TotalCount int   `json:"total_count"`
	Jobs       []Job `json:"jobs"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListJobsForWorkflowRunOK) GetTotalCount() int {
	return s.TotalCount
}

// GetJobs returns the value of Jobs.
func (s *ActionsListJobsForWorkflowRunOK) GetJobs() []Job {
	return s.Jobs
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListJobsForWorkflowRunOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetJobs sets the value of Jobs.
func (s *ActionsListJobsForWorkflowRunOK) SetJobs(val []Job) {
	s.Jobs = val
}

// ActionsListJobsForWorkflowRunOKHeaders wraps ActionsListJobsForWorkflowRunOK with response headers.
type ActionsListJobsForWorkflowRunOKHeaders struct {
	Link     OptString
	Response ActionsListJobsForWorkflowRunOK
}

// GetLink returns the value of Link.
func (s *ActionsListJobsForWorkflowRunOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListJobsForWorkflowRunOKHeaders) GetResponse() ActionsListJobsForWorkflowRunOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListJobsForWorkflowRunOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListJobsForWorkflowRunOKHeaders) SetResponse(val ActionsListJobsForWorkflowRunOK) {
	s.Response = val
}

type ActionsListOrgSecretsOK struct {
	TotalCount int                         `json:"total_count"`
	Secrets    []OrganizationActionsSecret `json:"secrets"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListOrgSecretsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetSecrets returns the value of Secrets.
func (s *ActionsListOrgSecretsOK) GetSecrets() []OrganizationActionsSecret {
	return s.Secrets
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListOrgSecretsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetSecrets sets the value of Secrets.
func (s *ActionsListOrgSecretsOK) SetSecrets(val []OrganizationActionsSecret) {
	s.Secrets = val
}

// ActionsListOrgSecretsOKHeaders wraps ActionsListOrgSecretsOK with response headers.
type ActionsListOrgSecretsOKHeaders struct {
	Link     OptString
	Response ActionsListOrgSecretsOK
}

// GetLink returns the value of Link.
func (s *ActionsListOrgSecretsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListOrgSecretsOKHeaders) GetResponse() ActionsListOrgSecretsOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListOrgSecretsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListOrgSecretsOKHeaders) SetResponse(val ActionsListOrgSecretsOK) {
	s.Response = val
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK struct {
	TotalCount   float64             `json:"total_count"`
	Repositories []MinimalRepository `json:"repositories"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetRepositories returns the value of Repositories.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) GetRepositories() []MinimalRepository {
	return s.Repositories
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetRepositories sets the value of Repositories.
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) SetRepositories(val []MinimalRepository) {
	s.Repositories = val
}

type ActionsListRepoSecretsOK struct {
	TotalCount int             `json:"total_count"`
	Secrets    []ActionsSecret `json:"secrets"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListRepoSecretsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetSecrets returns the value of Secrets.
func (s *ActionsListRepoSecretsOK) GetSecrets() []ActionsSecret {
	return s.Secrets
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListRepoSecretsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetSecrets sets the value of Secrets.
func (s *ActionsListRepoSecretsOK) SetSecrets(val []ActionsSecret) {
	s.Secrets = val
}

// ActionsListRepoSecretsOKHeaders wraps ActionsListRepoSecretsOK with response headers.
type ActionsListRepoSecretsOKHeaders struct {
	Link     OptString
	Response ActionsListRepoSecretsOK
}

// GetLink returns the value of Link.
func (s *ActionsListRepoSecretsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListRepoSecretsOKHeaders) GetResponse() ActionsListRepoSecretsOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListRepoSecretsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListRepoSecretsOKHeaders) SetResponse(val ActionsListRepoSecretsOK) {
	s.Response = val
}

type ActionsListRepoWorkflowsOK struct {
	TotalCount int        `json:"total_count"`
	Workflows  []Workflow `json:"workflows"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListRepoWorkflowsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetWorkflows returns the value of Workflows.
func (s *ActionsListRepoWorkflowsOK) GetWorkflows() []Workflow {
	return s.Workflows
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListRepoWorkflowsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetWorkflows sets the value of Workflows.
func (s *ActionsListRepoWorkflowsOK) SetWorkflows(val []Workflow) {
	s.Workflows = val
}

// ActionsListRepoWorkflowsOKHeaders wraps ActionsListRepoWorkflowsOK with response headers.
type ActionsListRepoWorkflowsOKHeaders struct {
	Link     OptString
	Response ActionsListRepoWorkflowsOK
}

// GetLink returns the value of Link.
func (s *ActionsListRepoWorkflowsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListRepoWorkflowsOKHeaders) GetResponse() ActionsListRepoWorkflowsOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListRepoWorkflowsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListRepoWorkflowsOKHeaders) SetResponse(val ActionsListRepoWorkflowsOK) {
	s.Response = val
}

type ActionsListSelectedReposForOrgSecretOK struct {
	TotalCount   int                 `json:"total_count"`
	Repositories []MinimalRepository `json:"repositories"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListSelectedReposForOrgSecretOK) GetTotalCount() int {
	return s.TotalCount
}

// GetRepositories returns the value of Repositories.
func (s *ActionsListSelectedReposForOrgSecretOK) GetRepositories() []MinimalRepository {
	return s.Repositories
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListSelectedReposForOrgSecretOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetRepositories sets the value of Repositories.
func (s *ActionsListSelectedReposForOrgSecretOK) SetRepositories(val []MinimalRepository) {
	s.Repositories = val
}

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK struct {
	TotalCount   float64      `json:"total_count"`
	Repositories []Repository `json:"repositories"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetRepositories returns the value of Repositories.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) GetRepositories() []Repository {
	return s.Repositories
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetRepositories sets the value of Repositories.
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) SetRepositories(val []Repository) {
	s.Repositories = val
}

type ActionsListSelfHostedRunnerGroupsForOrgOK struct {
	TotalCount   float64           `json:"total_count"`
	RunnerGroups []RunnerGroupsOrg `json:"runner_groups"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListSelfHostedRunnerGroupsForOrgOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetRunnerGroups returns the value of RunnerGroups.
func (s *ActionsListSelfHostedRunnerGroupsForOrgOK) GetRunnerGroups() []RunnerGroupsOrg {
	return s.RunnerGroups
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListSelfHostedRunnerGroupsForOrgOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetRunnerGroups sets the value of RunnerGroups.
func (s *ActionsListSelfHostedRunnerGroupsForOrgOK) SetRunnerGroups(val []RunnerGroupsOrg) {
	s.RunnerGroups = val
}

type ActionsListSelfHostedRunnersForOrgOK struct {
	TotalCount int      `json:"total_count"`
	Runners    []Runner `json:"runners"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListSelfHostedRunnersForOrgOK) GetTotalCount() int {
	return s.TotalCount
}

// GetRunners returns the value of Runners.
func (s *ActionsListSelfHostedRunnersForOrgOK) GetRunners() []Runner {
	return s.Runners
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListSelfHostedRunnersForOrgOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetRunners sets the value of Runners.
func (s *ActionsListSelfHostedRunnersForOrgOK) SetRunners(val []Runner) {
	s.Runners = val
}

// ActionsListSelfHostedRunnersForOrgOKHeaders wraps ActionsListSelfHostedRunnersForOrgOK with response headers.
type ActionsListSelfHostedRunnersForOrgOKHeaders struct {
	Link     OptString
	Response ActionsListSelfHostedRunnersForOrgOK
}

// GetLink returns the value of Link.
func (s *ActionsListSelfHostedRunnersForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListSelfHostedRunnersForOrgOKHeaders) GetResponse() ActionsListSelfHostedRunnersForOrgOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListSelfHostedRunnersForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListSelfHostedRunnersForOrgOKHeaders) SetResponse(val ActionsListSelfHostedRunnersForOrgOK) {
	s.Response = val
}

type ActionsListSelfHostedRunnersForRepoOK struct {
	TotalCount int      `json:"total_count"`
	Runners    []Runner `json:"runners"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListSelfHostedRunnersForRepoOK) GetTotalCount() int {
	return s.TotalCount
}

// GetRunners returns the value of Runners.
func (s *ActionsListSelfHostedRunnersForRepoOK) GetRunners() []Runner {
	return s.Runners
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListSelfHostedRunnersForRepoOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetRunners sets the value of Runners.
func (s *ActionsListSelfHostedRunnersForRepoOK) SetRunners(val []Runner) {
	s.Runners = val
}

// ActionsListSelfHostedRunnersForRepoOKHeaders wraps ActionsListSelfHostedRunnersForRepoOK with response headers.
type ActionsListSelfHostedRunnersForRepoOKHeaders struct {
	Link     OptString
	Response ActionsListSelfHostedRunnersForRepoOK
}

// GetLink returns the value of Link.
func (s *ActionsListSelfHostedRunnersForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListSelfHostedRunnersForRepoOKHeaders) GetResponse() ActionsListSelfHostedRunnersForRepoOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListSelfHostedRunnersForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListSelfHostedRunnersForRepoOKHeaders) SetResponse(val ActionsListSelfHostedRunnersForRepoOK) {
	s.Response = val
}

type ActionsListSelfHostedRunnersInGroupForOrgOK struct {
	TotalCount float64  `json:"total_count"`
	Runners    []Runner `json:"runners"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetRunners returns the value of Runners.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOK) GetRunners() []Runner {
	return s.Runners
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetRunners sets the value of Runners.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOK) SetRunners(val []Runner) {
	s.Runners = val
}

// ActionsListSelfHostedRunnersInGroupForOrgOKHeaders wraps ActionsListSelfHostedRunnersInGroupForOrgOK with response headers.
type ActionsListSelfHostedRunnersInGroupForOrgOKHeaders struct {
	Link     OptString
	Response ActionsListSelfHostedRunnersInGroupForOrgOK
}

// GetLink returns the value of Link.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOKHeaders) GetResponse() ActionsListSelfHostedRunnersInGroupForOrgOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListSelfHostedRunnersInGroupForOrgOKHeaders) SetResponse(val ActionsListSelfHostedRunnersInGroupForOrgOK) {
	s.Response = val
}

type ActionsListWorkflowRunArtifactsOK struct {
	TotalCount int        `json:"total_count"`
	Artifacts  []Artifact `json:"artifacts"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListWorkflowRunArtifactsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetArtifacts returns the value of Artifacts.
func (s *ActionsListWorkflowRunArtifactsOK) GetArtifacts() []Artifact {
	return s.Artifacts
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListWorkflowRunArtifactsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetArtifacts sets the value of Artifacts.
func (s *ActionsListWorkflowRunArtifactsOK) SetArtifacts(val []Artifact) {
	s.Artifacts = val
}

// ActionsListWorkflowRunArtifactsOKHeaders wraps ActionsListWorkflowRunArtifactsOK with response headers.
type ActionsListWorkflowRunArtifactsOKHeaders struct {
	Link     OptString
	Response ActionsListWorkflowRunArtifactsOK
}

// GetLink returns the value of Link.
func (s *ActionsListWorkflowRunArtifactsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListWorkflowRunArtifactsOKHeaders) GetResponse() ActionsListWorkflowRunArtifactsOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListWorkflowRunArtifactsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListWorkflowRunArtifactsOKHeaders) SetResponse(val ActionsListWorkflowRunArtifactsOK) {
	s.Response = val
}

type ActionsListWorkflowRunsForRepoOK struct {
	TotalCount   int           `json:"total_count"`
	WorkflowRuns []WorkflowRun `json:"workflow_runs"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ActionsListWorkflowRunsForRepoOK) GetTotalCount() int {
	return s.TotalCount
}

// GetWorkflowRuns returns the value of WorkflowRuns.
func (s *ActionsListWorkflowRunsForRepoOK) GetWorkflowRuns() []WorkflowRun {
	return s.WorkflowRuns
}

// SetTotalCount sets the value of TotalCount.
func (s *ActionsListWorkflowRunsForRepoOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetWorkflowRuns sets the value of WorkflowRuns.
func (s *ActionsListWorkflowRunsForRepoOK) SetWorkflowRuns(val []WorkflowRun) {
	s.WorkflowRuns = val
}

// ActionsListWorkflowRunsForRepoOKHeaders wraps ActionsListWorkflowRunsForRepoOK with response headers.
type ActionsListWorkflowRunsForRepoOKHeaders struct {
	Link     OptString
	Response ActionsListWorkflowRunsForRepoOK
}

// GetLink returns the value of Link.
func (s *ActionsListWorkflowRunsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActionsListWorkflowRunsForRepoOKHeaders) GetResponse() ActionsListWorkflowRunsForRepoOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActionsListWorkflowRunsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActionsListWorkflowRunsForRepoOKHeaders) SetResponse(val ActionsListWorkflowRunsForRepoOK) {
	s.Response = val
}

type ActionsListWorkflowRunsForRepoStatus string

const (
	ActionsListWorkflowRunsForRepoStatusCompleted      ActionsListWorkflowRunsForRepoStatus = "completed"
	ActionsListWorkflowRunsForRepoStatusActionRequired ActionsListWorkflowRunsForRepoStatus = "action_required"
	ActionsListWorkflowRunsForRepoStatusCancelled      ActionsListWorkflowRunsForRepoStatus = "cancelled"
	ActionsListWorkflowRunsForRepoStatusFailure        ActionsListWorkflowRunsForRepoStatus = "failure"
	ActionsListWorkflowRunsForRepoStatusNeutral        ActionsListWorkflowRunsForRepoStatus = "neutral"
	ActionsListWorkflowRunsForRepoStatusSkipped        ActionsListWorkflowRunsForRepoStatus = "skipped"
	ActionsListWorkflowRunsForRepoStatusStale          ActionsListWorkflowRunsForRepoStatus = "stale"
	ActionsListWorkflowRunsForRepoStatusSuccess        ActionsListWorkflowRunsForRepoStatus = "success"
	ActionsListWorkflowRunsForRepoStatusTimedOut       ActionsListWorkflowRunsForRepoStatus = "timed_out"
	ActionsListWorkflowRunsForRepoStatusInProgress     ActionsListWorkflowRunsForRepoStatus = "in_progress"
	ActionsListWorkflowRunsForRepoStatusQueued         ActionsListWorkflowRunsForRepoStatus = "queued"
	ActionsListWorkflowRunsForRepoStatusRequested      ActionsListWorkflowRunsForRepoStatus = "requested"
	ActionsListWorkflowRunsForRepoStatusWaiting        ActionsListWorkflowRunsForRepoStatus = "waiting"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActionsListWorkflowRunsForRepoStatus) MarshalText() ([]byte, error) {
	switch s {
	case ActionsListWorkflowRunsForRepoStatusCompleted:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusActionRequired:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusCancelled:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusFailure:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusNeutral:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusSkipped:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusStale:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusSuccess:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusTimedOut:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusInProgress:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusQueued:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusRequested:
		return []byte(s), nil
	case ActionsListWorkflowRunsForRepoStatusWaiting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionsListWorkflowRunsForRepoStatus) UnmarshalText(data []byte) error {
	switch ActionsListWorkflowRunsForRepoStatus(data) {
	case ActionsListWorkflowRunsForRepoStatusCompleted:
		*s = ActionsListWorkflowRunsForRepoStatusCompleted
		return nil
	case ActionsListWorkflowRunsForRepoStatusActionRequired:
		*s = ActionsListWorkflowRunsForRepoStatusActionRequired
		return nil
	case ActionsListWorkflowRunsForRepoStatusCancelled:
		*s = ActionsListWorkflowRunsForRepoStatusCancelled
		return nil
	case ActionsListWorkflowRunsForRepoStatusFailure:
		*s = ActionsListWorkflowRunsForRepoStatusFailure
		return nil
	case ActionsListWorkflowRunsForRepoStatusNeutral:
		*s = ActionsListWorkflowRunsForRepoStatusNeutral
		return nil
	case ActionsListWorkflowRunsForRepoStatusSkipped:
		*s = ActionsListWorkflowRunsForRepoStatusSkipped
		return nil
	case ActionsListWorkflowRunsForRepoStatusStale:
		*s = ActionsListWorkflowRunsForRepoStatusStale
		return nil
	case ActionsListWorkflowRunsForRepoStatusSuccess:
		*s = ActionsListWorkflowRunsForRepoStatusSuccess
		return nil
	case ActionsListWorkflowRunsForRepoStatusTimedOut:
		*s = ActionsListWorkflowRunsForRepoStatusTimedOut
		return nil
	case ActionsListWorkflowRunsForRepoStatusInProgress:
		*s = ActionsListWorkflowRunsForRepoStatusInProgress
		return nil
	case ActionsListWorkflowRunsForRepoStatusQueued:
		*s = ActionsListWorkflowRunsForRepoStatusQueued
		return nil
	case ActionsListWorkflowRunsForRepoStatusRequested:
		*s = ActionsListWorkflowRunsForRepoStatusRequested
		return nil
	case ActionsListWorkflowRunsForRepoStatusWaiting:
		*s = ActionsListWorkflowRunsForRepoStatusWaiting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/actions-organization-permissions
type ActionsOrganizationPermissions struct {
	EnabledRepositories EnabledRepositories `json:"enabled_repositories"`
	// The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions,
	// when `enabled_repositories` is set to `selected`.
	SelectedRepositoriesURL OptString             `json:"selected_repositories_url"`
	AllowedActions          OptAllowedActions     `json:"allowed_actions"`
	SelectedActionsURL      OptSelectedActionsURL `json:"selected_actions_url"`
}

// GetEnabledRepositories returns the value of EnabledRepositories.
func (s *ActionsOrganizationPermissions) GetEnabledRepositories() EnabledRepositories {
	return s.EnabledRepositories
}

// GetSelectedRepositoriesURL returns the value of SelectedRepositoriesURL.
func (s *ActionsOrganizationPermissions) GetSelectedRepositoriesURL() OptString {
	return s.SelectedRepositoriesURL
}

// GetAllowedActions returns the value of AllowedActions.
func (s *ActionsOrganizationPermissions) GetAllowedActions() OptAllowedActions {
	return s.AllowedActions
}

// GetSelectedActionsURL returns the value of SelectedActionsURL.
func (s *ActionsOrganizationPermissions) GetSelectedActionsURL() OptSelectedActionsURL {
	return s.SelectedActionsURL
}

// SetEnabledRepositories sets the value of EnabledRepositories.
func (s *ActionsOrganizationPermissions) SetEnabledRepositories(val EnabledRepositories) {
	s.EnabledRepositories = val
}

// SetSelectedRepositoriesURL sets the value of SelectedRepositoriesURL.
func (s *ActionsOrganizationPermissions) SetSelectedRepositoriesURL(val OptString) {
	s.SelectedRepositoriesURL = val
}

// SetAllowedActions sets the value of AllowedActions.
func (s *ActionsOrganizationPermissions) SetAllowedActions(val OptAllowedActions) {
	s.AllowedActions = val
}

// SetSelectedActionsURL sets the value of SelectedActionsURL.
func (s *ActionsOrganizationPermissions) SetSelectedActionsURL(val OptSelectedActionsURL) {
	s.SelectedActionsURL = val
}

// The public key used for setting Actions Secrets.
// Ref: #/components/schemas/actions-public-key
type ActionsPublicKey struct {
	// The identifier for the key.
	KeyID string `json:"key_id"`
	// The Base64 encoded public key.
	Key       string    `json:"key"`
	ID        OptInt    `json:"id"`
	URL       OptString `json:"url"`
	Title     OptString `json:"title"`
	CreatedAt OptString `json:"created_at"`
}

// GetKeyID returns the value of KeyID.
func (s *ActionsPublicKey) GetKeyID() string {
	return s.KeyID
}

// GetKey returns the value of Key.
func (s *ActionsPublicKey) GetKey() string {
	return s.Key
}

// GetID returns the value of ID.
func (s *ActionsPublicKey) GetID() OptInt {
	return s.ID
}

// GetURL returns the value of URL.
func (s *ActionsPublicKey) GetURL() OptString {
	return s.URL
}

// GetTitle returns the value of Title.
func (s *ActionsPublicKey) GetTitle() OptString {
	return s.Title
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ActionsPublicKey) GetCreatedAt() OptString {
	return s.CreatedAt
}

// SetKeyID sets the value of KeyID.
func (s *ActionsPublicKey) SetKeyID(val string) {
	s.KeyID = val
}

// SetKey sets the value of Key.
func (s *ActionsPublicKey) SetKey(val string) {
	s.Key = val
}

// SetID sets the value of ID.
func (s *ActionsPublicKey) SetID(val OptInt) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *ActionsPublicKey) SetURL(val OptString) {
	s.URL = val
}

// SetTitle sets the value of Title.
func (s *ActionsPublicKey) SetTitle(val OptString) {
	s.Title = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ActionsPublicKey) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

type ActionsReRunWorkflowCreated struct{}

// ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent is response for ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg operation.
type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgNoContent struct{}

// ActionsRemoveSelectedRepoFromOrgSecretConflict is response for ActionsRemoveSelectedRepoFromOrgSecret operation.
type ActionsRemoveSelectedRepoFromOrgSecretConflict struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretConflict) actionsRemoveSelectedRepoFromOrgSecretRes() {}

// ActionsRemoveSelectedRepoFromOrgSecretNoContent is response for ActionsRemoveSelectedRepoFromOrgSecret operation.
type ActionsRemoveSelectedRepoFromOrgSecretNoContent struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretNoContent) actionsRemoveSelectedRepoFromOrgSecretRes() {}

// ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent is response for ActionsRemoveSelfHostedRunnerFromGroupForOrg operation.
type ActionsRemoveSelfHostedRunnerFromGroupForOrgNoContent struct{}

// Ref: #/components/schemas/actions-repository-permissions
type ActionsRepositoryPermissions struct {
	Enabled            ActionsEnabled        `json:"enabled"`
	AllowedActions     OptAllowedActions     `json:"allowed_actions"`
	SelectedActionsURL OptSelectedActionsURL `json:"selected_actions_url"`
}

// GetEnabled returns the value of Enabled.
func (s *ActionsRepositoryPermissions) GetEnabled() ActionsEnabled {
	return s.Enabled
}

// GetAllowedActions returns the value of AllowedActions.
func (s *ActionsRepositoryPermissions) GetAllowedActions() OptAllowedActions {
	return s.AllowedActions
}

// GetSelectedActionsURL returns the value of SelectedActionsURL.
func (s *ActionsRepositoryPermissions) GetSelectedActionsURL() OptSelectedActionsURL {
	return s.SelectedActionsURL
}

// SetEnabled sets the value of Enabled.
func (s *ActionsRepositoryPermissions) SetEnabled(val ActionsEnabled) {
	s.Enabled = val
}

// SetAllowedActions sets the value of AllowedActions.
func (s *ActionsRepositoryPermissions) SetAllowedActions(val OptAllowedActions) {
	s.AllowedActions = val
}

// SetSelectedActionsURL sets the value of SelectedActionsURL.
func (s *ActionsRepositoryPermissions) SetSelectedActionsURL(val OptSelectedActionsURL) {
	s.SelectedActionsURL = val
}

type ActionsRetryWorkflowCreated struct{}

type ActionsReviewPendingDeploymentsForRunReq struct {
	// The list of environment ids to approve or reject.
	EnvironmentIds []int `json:"environment_ids"`
	// Whether to approve or reject deployment to the specified environments. Must be one of: `approved`
	// or `rejected`.
	State ActionsReviewPendingDeploymentsForRunReqState `json:"state"`
	// A comment to accompany the deployment review.
	Comment string `json:"comment"`
}

// GetEnvironmentIds returns the value of EnvironmentIds.
func (s *ActionsReviewPendingDeploymentsForRunReq) GetEnvironmentIds() []int {
	return s.EnvironmentIds
}

// GetState returns the value of State.
func (s *ActionsReviewPendingDeploymentsForRunReq) GetState() ActionsReviewPendingDeploymentsForRunReqState {
	return s.State
}

// GetComment returns the value of Comment.
func (s *ActionsReviewPendingDeploymentsForRunReq) GetComment() string {
	return s.Comment
}

// SetEnvironmentIds sets the value of EnvironmentIds.
func (s *ActionsReviewPendingDeploymentsForRunReq) SetEnvironmentIds(val []int) {
	s.EnvironmentIds = val
}

// SetState sets the value of State.
func (s *ActionsReviewPendingDeploymentsForRunReq) SetState(val ActionsReviewPendingDeploymentsForRunReqState) {
	s.State = val
}

// SetComment sets the value of Comment.
func (s *ActionsReviewPendingDeploymentsForRunReq) SetComment(val string) {
	s.Comment = val
}

// Whether to approve or reject deployment to the specified environments. Must be one of: `approved`
// or `rejected`.
type ActionsReviewPendingDeploymentsForRunReqState string

const (
	ActionsReviewPendingDeploymentsForRunReqStateApproved ActionsReviewPendingDeploymentsForRunReqState = "approved"
	ActionsReviewPendingDeploymentsForRunReqStateRejected ActionsReviewPendingDeploymentsForRunReqState = "rejected"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActionsReviewPendingDeploymentsForRunReqState) MarshalText() ([]byte, error) {
	switch s {
	case ActionsReviewPendingDeploymentsForRunReqStateApproved:
		return []byte(s), nil
	case ActionsReviewPendingDeploymentsForRunReqStateRejected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionsReviewPendingDeploymentsForRunReqState) UnmarshalText(data []byte) error {
	switch ActionsReviewPendingDeploymentsForRunReqState(data) {
	case ActionsReviewPendingDeploymentsForRunReqStateApproved:
		*s = ActionsReviewPendingDeploymentsForRunReqStateApproved
		return nil
	case ActionsReviewPendingDeploymentsForRunReqStateRejected:
		*s = ActionsReviewPendingDeploymentsForRunReqStateRejected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Set secrets for GitHub Actions.
// Ref: #/components/schemas/actions-secret
type ActionsSecret struct {
	// The name of the secret.
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetName returns the value of Name.
func (s *ActionsSecret) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ActionsSecret) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ActionsSecret) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetName sets the value of Name.
func (s *ActionsSecret) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ActionsSecret) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ActionsSecret) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// ActionsSetAllowedActionsOrganizationNoContent is response for ActionsSetAllowedActionsOrganization operation.
type ActionsSetAllowedActionsOrganizationNoContent struct{}

// ActionsSetAllowedActionsRepositoryNoContent is response for ActionsSetAllowedActionsRepository operation.
type ActionsSetAllowedActionsRepositoryNoContent struct{}

// ActionsSetGithubActionsPermissionsOrganizationNoContent is response for ActionsSetGithubActionsPermissionsOrganization operation.
type ActionsSetGithubActionsPermissionsOrganizationNoContent struct{}

type ActionsSetGithubActionsPermissionsOrganizationReq struct {
	EnabledRepositories EnabledRepositories `json:"enabled_repositories"`
	AllowedActions      OptAllowedActions   `json:"allowed_actions"`
}

// GetEnabledRepositories returns the value of EnabledRepositories.
func (s *ActionsSetGithubActionsPermissionsOrganizationReq) GetEnabledRepositories() EnabledRepositories {
	return s.EnabledRepositories
}

// GetAllowedActions returns the value of AllowedActions.
func (s *ActionsSetGithubActionsPermissionsOrganizationReq) GetAllowedActions() OptAllowedActions {
	return s.AllowedActions
}

// SetEnabledRepositories sets the value of EnabledRepositories.
func (s *ActionsSetGithubActionsPermissionsOrganizationReq) SetEnabledRepositories(val EnabledRepositories) {
	s.EnabledRepositories = val
}

// SetAllowedActions sets the value of AllowedActions.
func (s *ActionsSetGithubActionsPermissionsOrganizationReq) SetAllowedActions(val OptAllowedActions) {
	s.AllowedActions = val
}

// ActionsSetGithubActionsPermissionsRepositoryNoContent is response for ActionsSetGithubActionsPermissionsRepository operation.
type ActionsSetGithubActionsPermissionsRepositoryNoContent struct{}

type ActionsSetGithubActionsPermissionsRepositoryReq struct {
	Enabled        ActionsEnabled    `json:"enabled"`
	AllowedActions OptAllowedActions `json:"allowed_actions"`
}

// GetEnabled returns the value of Enabled.
func (s *ActionsSetGithubActionsPermissionsRepositoryReq) GetEnabled() ActionsEnabled {
	return s.Enabled
}

// GetAllowedActions returns the value of AllowedActions.
func (s *ActionsSetGithubActionsPermissionsRepositoryReq) GetAllowedActions() OptAllowedActions {
	return s.AllowedActions
}

// SetEnabled sets the value of Enabled.
func (s *ActionsSetGithubActionsPermissionsRepositoryReq) SetEnabled(val ActionsEnabled) {
	s.Enabled = val
}

// SetAllowedActions sets the value of AllowedActions.
func (s *ActionsSetGithubActionsPermissionsRepositoryReq) SetAllowedActions(val OptAllowedActions) {
	s.AllowedActions = val
}

// ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent is response for ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg operation.
type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgNoContent struct{}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq struct {
	// List of repository IDs that can access the runner group.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// GetSelectedRepositoryIds returns the value of SelectedRepositoryIds.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) GetSelectedRepositoryIds() []int {
	return s.SelectedRepositoryIds
}

// SetSelectedRepositoryIds sets the value of SelectedRepositoryIds.
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) SetSelectedRepositoryIds(val []int) {
	s.SelectedRepositoryIds = val
}

// ActionsSetSelectedReposForOrgSecretNoContent is response for ActionsSetSelectedReposForOrgSecret operation.
type ActionsSetSelectedReposForOrgSecretNoContent struct{}

type ActionsSetSelectedReposForOrgSecretReq struct {
	// An array of repository ids that can access the organization secret. You can only provide a list of
	// repository ids when the `visibility` is set to `selected`. You can add and remove individual
	// repositories using the [Set selected repositories for an organization secret](https://docs.github.
	// com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove
	// selected repository from an organization secret](https://docs.github.
	// com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// GetSelectedRepositoryIds returns the value of SelectedRepositoryIds.
func (s *ActionsSetSelectedReposForOrgSecretReq) GetSelectedRepositoryIds() []int {
	return s.SelectedRepositoryIds
}

// SetSelectedRepositoryIds sets the value of SelectedRepositoryIds.
func (s *ActionsSetSelectedReposForOrgSecretReq) SetSelectedRepositoryIds(val []int) {
	s.SelectedRepositoryIds = val
}

// ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent is response for ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization operation.
type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationNoContent struct{}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq struct {
	// List of repository IDs to enable for GitHub Actions.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// GetSelectedRepositoryIds returns the value of SelectedRepositoryIds.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) GetSelectedRepositoryIds() []int {
	return s.SelectedRepositoryIds
}

// SetSelectedRepositoryIds sets the value of SelectedRepositoryIds.
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) SetSelectedRepositoryIds(val []int) {
	s.SelectedRepositoryIds = val
}

// ActionsSetSelfHostedRunnersInGroupForOrgNoContent is response for ActionsSetSelfHostedRunnersInGroupForOrg operation.
type ActionsSetSelfHostedRunnersInGroupForOrgNoContent struct{}

type ActionsSetSelfHostedRunnersInGroupForOrgReq struct {
	// List of runner IDs to add to the runner group.
	Runners []int `json:"runners"`
}

// GetRunners returns the value of Runners.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgReq) GetRunners() []int {
	return s.Runners
}

// SetRunners sets the value of Runners.
func (s *ActionsSetSelfHostedRunnersInGroupForOrgReq) SetRunners(val []int) {
	s.Runners = val
}

type ActionsUpdateSelfHostedRunnerGroupForOrgReq struct {
	// Name of the runner group.
	Name string `json:"name"`
	// Visibility of a runner group. You can select all repositories, select individual repositories, or
	// all private repositories. Can be one of: `all`, `selected`, or `private`.
	Visibility OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility `json:"visibility"`
}

// GetName returns the value of Name.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReq) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReq) GetVisibility() OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility {
	return s.Visibility
}

// SetName sets the value of Name.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReq) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReq) SetVisibility(val OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) {
	s.Visibility = val
}

// Visibility of a runner group. You can select all repositories, select individual repositories, or
// all private repositories. Can be one of: `all`, `selected`, or `private`.
type ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility string

const (
	ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilitySelected ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility = "selected"
	ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityAll      ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility = "all"
	ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityPrivate  ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility = "private"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilitySelected:
		return []byte(s), nil
	case ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityAll:
		return []byte(s), nil
	case ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityPrivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) UnmarshalText(data []byte) error {
	switch ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility(data) {
	case ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilitySelected:
		*s = ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilitySelected
		return nil
	case ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityAll:
		*s = ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityAll
		return nil
	case ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityPrivate:
		*s = ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibilityPrivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActivityCheckRepoIsStarredByAuthenticatedUserForbidden BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserForbidden) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

// ActivityCheckRepoIsStarredByAuthenticatedUserNoContent is response for ActivityCheckRepoIsStarredByAuthenticatedUser operation.
type ActivityCheckRepoIsStarredByAuthenticatedUserNoContent struct{}

func (*ActivityCheckRepoIsStarredByAuthenticatedUserNoContent) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserNotFound BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserNotFound) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserUnauthorized BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserUnauthorized) activityCheckRepoIsStarredByAuthenticatedUserRes() {
}

// ActivityDeleteRepoSubscriptionNoContent is response for ActivityDeleteRepoSubscription operation.
type ActivityDeleteRepoSubscriptionNoContent struct{}

type ActivityDeleteThreadSubscriptionForbidden BasicError

func (*ActivityDeleteThreadSubscriptionForbidden) activityDeleteThreadSubscriptionRes() {}

// ActivityDeleteThreadSubscriptionNoContent is response for ActivityDeleteThreadSubscription operation.
type ActivityDeleteThreadSubscriptionNoContent struct{}

func (*ActivityDeleteThreadSubscriptionNoContent) activityDeleteThreadSubscriptionRes() {}

type ActivityDeleteThreadSubscriptionUnauthorized BasicError

func (*ActivityDeleteThreadSubscriptionUnauthorized) activityDeleteThreadSubscriptionRes() {}

// ActivityGetRepoSubscriptionNotFound is response for ActivityGetRepoSubscription operation.
type ActivityGetRepoSubscriptionNotFound struct{}

func (*ActivityGetRepoSubscriptionNotFound) activityGetRepoSubscriptionRes() {}

type ActivityGetThreadForbidden BasicError

func (*ActivityGetThreadForbidden) activityGetThreadRes() {}

type ActivityGetThreadSubscriptionForAuthenticatedUserForbidden BasicError

func (*ActivityGetThreadSubscriptionForAuthenticatedUserForbidden) activityGetThreadSubscriptionForAuthenticatedUserRes() {
}

type ActivityGetThreadSubscriptionForAuthenticatedUserUnauthorized BasicError

func (*ActivityGetThreadSubscriptionForAuthenticatedUserUnauthorized) activityGetThreadSubscriptionForAuthenticatedUserRes() {
}

type ActivityGetThreadUnauthorized BasicError

func (*ActivityGetThreadUnauthorized) activityGetThreadRes() {}

type ActivityListNotificationsForAuthenticatedUserForbidden BasicError

func (*ActivityListNotificationsForAuthenticatedUserForbidden) activityListNotificationsForAuthenticatedUserRes() {
}

// ActivityListNotificationsForAuthenticatedUserOKHeaders wraps []Thread with response headers.
type ActivityListNotificationsForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []Thread
}

// GetLink returns the value of Link.
func (s *ActivityListNotificationsForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActivityListNotificationsForAuthenticatedUserOKHeaders) GetResponse() []Thread {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActivityListNotificationsForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActivityListNotificationsForAuthenticatedUserOKHeaders) SetResponse(val []Thread) {
	s.Response = val
}

func (*ActivityListNotificationsForAuthenticatedUserOKHeaders) activityListNotificationsForAuthenticatedUserRes() {
}

type ActivityListNotificationsForAuthenticatedUserUnauthorized BasicError

func (*ActivityListNotificationsForAuthenticatedUserUnauthorized) activityListNotificationsForAuthenticatedUserRes() {
}

type ActivityListPublicEventsForRepoNetworkForbidden BasicError

func (*ActivityListPublicEventsForRepoNetworkForbidden) activityListPublicEventsForRepoNetworkRes() {}

type ActivityListPublicEventsForRepoNetworkMovedPermanently BasicError

func (*ActivityListPublicEventsForRepoNetworkMovedPermanently) activityListPublicEventsForRepoNetworkRes() {
}

type ActivityListPublicEventsForRepoNetworkNotFound BasicError

func (*ActivityListPublicEventsForRepoNetworkNotFound) activityListPublicEventsForRepoNetworkRes() {}

type ActivityListPublicEventsForRepoNetworkOKApplicationJSON []Event

func (*ActivityListPublicEventsForRepoNetworkOKApplicationJSON) activityListPublicEventsForRepoNetworkRes() {
}

type ActivityListPublicEventsOKApplicationJSON []Event

func (*ActivityListPublicEventsOKApplicationJSON) activityListPublicEventsRes() {}

// ActivityListRepoNotificationsForAuthenticatedUserOKHeaders wraps []Thread with response headers.
type ActivityListRepoNotificationsForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []Thread
}

// GetLink returns the value of Link.
func (s *ActivityListRepoNotificationsForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActivityListRepoNotificationsForAuthenticatedUserOKHeaders) GetResponse() []Thread {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActivityListRepoNotificationsForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActivityListRepoNotificationsForAuthenticatedUserOKHeaders) SetResponse(val []Thread) {
	s.Response = val
}

type ActivityListReposStarredByAuthenticatedUserDirection string

const (
	ActivityListReposStarredByAuthenticatedUserDirectionAsc  ActivityListReposStarredByAuthenticatedUserDirection = "asc"
	ActivityListReposStarredByAuthenticatedUserDirectionDesc ActivityListReposStarredByAuthenticatedUserDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActivityListReposStarredByAuthenticatedUserDirection) MarshalText() ([]byte, error) {
	switch s {
	case ActivityListReposStarredByAuthenticatedUserDirectionAsc:
		return []byte(s), nil
	case ActivityListReposStarredByAuthenticatedUserDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActivityListReposStarredByAuthenticatedUserDirection) UnmarshalText(data []byte) error {
	switch ActivityListReposStarredByAuthenticatedUserDirection(data) {
	case ActivityListReposStarredByAuthenticatedUserDirectionAsc:
		*s = ActivityListReposStarredByAuthenticatedUserDirectionAsc
		return nil
	case ActivityListReposStarredByAuthenticatedUserDirectionDesc:
		*s = ActivityListReposStarredByAuthenticatedUserDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActivityListReposStarredByAuthenticatedUserForbidden BasicError

func (*ActivityListReposStarredByAuthenticatedUserForbidden) activityListReposStarredByAuthenticatedUserRes() {
}

// ActivityListReposStarredByAuthenticatedUserOKHeaders wraps []Repository with response headers.
type ActivityListReposStarredByAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []Repository
}

// GetLink returns the value of Link.
func (s *ActivityListReposStarredByAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActivityListReposStarredByAuthenticatedUserOKHeaders) GetResponse() []Repository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActivityListReposStarredByAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActivityListReposStarredByAuthenticatedUserOKHeaders) SetResponse(val []Repository) {
	s.Response = val
}

func (*ActivityListReposStarredByAuthenticatedUserOKHeaders) activityListReposStarredByAuthenticatedUserRes() {
}

type ActivityListReposStarredByAuthenticatedUserSort string

const (
	ActivityListReposStarredByAuthenticatedUserSortCreated ActivityListReposStarredByAuthenticatedUserSort = "created"
	ActivityListReposStarredByAuthenticatedUserSortUpdated ActivityListReposStarredByAuthenticatedUserSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s ActivityListReposStarredByAuthenticatedUserSort) MarshalText() ([]byte, error) {
	switch s {
	case ActivityListReposStarredByAuthenticatedUserSortCreated:
		return []byte(s), nil
	case ActivityListReposStarredByAuthenticatedUserSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActivityListReposStarredByAuthenticatedUserSort) UnmarshalText(data []byte) error {
	switch ActivityListReposStarredByAuthenticatedUserSort(data) {
	case ActivityListReposStarredByAuthenticatedUserSortCreated:
		*s = ActivityListReposStarredByAuthenticatedUserSortCreated
		return nil
	case ActivityListReposStarredByAuthenticatedUserSortUpdated:
		*s = ActivityListReposStarredByAuthenticatedUserSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActivityListReposStarredByAuthenticatedUserUnauthorized BasicError

func (*ActivityListReposStarredByAuthenticatedUserUnauthorized) activityListReposStarredByAuthenticatedUserRes() {
}

// ActivityListReposWatchedByUserOKHeaders wraps []MinimalRepository with response headers.
type ActivityListReposWatchedByUserOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *ActivityListReposWatchedByUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActivityListReposWatchedByUserOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActivityListReposWatchedByUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActivityListReposWatchedByUserOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

type ActivityListWatchedReposForAuthenticatedUserForbidden BasicError

func (*ActivityListWatchedReposForAuthenticatedUserForbidden) activityListWatchedReposForAuthenticatedUserRes() {
}

// ActivityListWatchedReposForAuthenticatedUserOKHeaders wraps []MinimalRepository with response headers.
type ActivityListWatchedReposForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *ActivityListWatchedReposForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActivityListWatchedReposForAuthenticatedUserOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActivityListWatchedReposForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActivityListWatchedReposForAuthenticatedUserOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

func (*ActivityListWatchedReposForAuthenticatedUserOKHeaders) activityListWatchedReposForAuthenticatedUserRes() {
}

type ActivityListWatchedReposForAuthenticatedUserUnauthorized BasicError

func (*ActivityListWatchedReposForAuthenticatedUserUnauthorized) activityListWatchedReposForAuthenticatedUserRes() {
}

// ActivityListWatchersForRepoOKHeaders wraps []SimpleUser with response headers.
type ActivityListWatchersForRepoOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *ActivityListWatchersForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ActivityListWatchersForRepoOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ActivityListWatchersForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ActivityListWatchersForRepoOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

type ActivityMarkNotificationsAsReadAccepted struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ActivityMarkNotificationsAsReadAccepted) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ActivityMarkNotificationsAsReadAccepted) SetMessage(val OptString) {
	s.Message = val
}

func (*ActivityMarkNotificationsAsReadAccepted) activityMarkNotificationsAsReadRes() {}

type ActivityMarkNotificationsAsReadForbidden BasicError

func (*ActivityMarkNotificationsAsReadForbidden) activityMarkNotificationsAsReadRes() {}

type ActivityMarkNotificationsAsReadReq struct {
	// Describes the last point that notifications were checked.
	LastReadAt OptDateTime `json:"last_read_at"`
	// Whether the notification has been read.
	Read OptBool `json:"read"`
}

// GetLastReadAt returns the value of LastReadAt.
func (s *ActivityMarkNotificationsAsReadReq) GetLastReadAt() OptDateTime {
	return s.LastReadAt
}

// GetRead returns the value of Read.
func (s *ActivityMarkNotificationsAsReadReq) GetRead() OptBool {
	return s.Read
}

// SetLastReadAt sets the value of LastReadAt.
func (s *ActivityMarkNotificationsAsReadReq) SetLastReadAt(val OptDateTime) {
	s.LastReadAt = val
}

// SetRead sets the value of Read.
func (s *ActivityMarkNotificationsAsReadReq) SetRead(val OptBool) {
	s.Read = val
}

// ActivityMarkNotificationsAsReadResetContent is response for ActivityMarkNotificationsAsRead operation.
type ActivityMarkNotificationsAsReadResetContent struct{}

func (*ActivityMarkNotificationsAsReadResetContent) activityMarkNotificationsAsReadRes() {}

type ActivityMarkNotificationsAsReadUnauthorized BasicError

func (*ActivityMarkNotificationsAsReadUnauthorized) activityMarkNotificationsAsReadRes() {}

type ActivityMarkRepoNotificationsAsReadAccepted struct {
	Message OptString `json:"message"`
	URL     OptString `json:"url"`
}

// GetMessage returns the value of Message.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) GetMessage() OptString {
	return s.Message
}

// GetURL returns the value of URL.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) GetURL() OptString {
	return s.URL
}

// SetMessage sets the value of Message.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) SetMessage(val OptString) {
	s.Message = val
}

// SetURL sets the value of URL.
func (s *ActivityMarkRepoNotificationsAsReadAccepted) SetURL(val OptString) {
	s.URL = val
}

func (*ActivityMarkRepoNotificationsAsReadAccepted) activityMarkRepoNotificationsAsReadRes() {}

type ActivityMarkRepoNotificationsAsReadReq struct {
	// Describes the last point that notifications were checked. Anything updated since this time will
	// not be marked as read. If you omit this parameter, all notifications are marked as read. This is a
	// timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	// Default: The current timestamp.
	LastReadAt OptDateTime `json:"last_read_at"`
}

// GetLastReadAt returns the value of LastReadAt.
func (s *ActivityMarkRepoNotificationsAsReadReq) GetLastReadAt() OptDateTime {
	return s.LastReadAt
}

// SetLastReadAt sets the value of LastReadAt.
func (s *ActivityMarkRepoNotificationsAsReadReq) SetLastReadAt(val OptDateTime) {
	s.LastReadAt = val
}

// ActivityMarkRepoNotificationsAsReadResetContent is response for ActivityMarkRepoNotificationsAsRead operation.
type ActivityMarkRepoNotificationsAsReadResetContent struct{}

func (*ActivityMarkRepoNotificationsAsReadResetContent) activityMarkRepoNotificationsAsReadRes() {}

// ActivityMarkThreadAsReadResetContent is response for ActivityMarkThreadAsRead operation.
type ActivityMarkThreadAsReadResetContent struct{}

func (*ActivityMarkThreadAsReadResetContent) activityMarkThreadAsReadRes() {}

type ActivitySetRepoSubscriptionReq struct {
	// Determines if notifications should be received from this repository.
	Subscribed OptBool `json:"subscribed"`
	// Determines if all notifications should be blocked from this repository.
	Ignored OptBool `json:"ignored"`
}

// GetSubscribed returns the value of Subscribed.
func (s *ActivitySetRepoSubscriptionReq) GetSubscribed() OptBool {
	return s.Subscribed
}

// GetIgnored returns the value of Ignored.
func (s *ActivitySetRepoSubscriptionReq) GetIgnored() OptBool {
	return s.Ignored
}

// SetSubscribed sets the value of Subscribed.
func (s *ActivitySetRepoSubscriptionReq) SetSubscribed(val OptBool) {
	s.Subscribed = val
}

// SetIgnored sets the value of Ignored.
func (s *ActivitySetRepoSubscriptionReq) SetIgnored(val OptBool) {
	s.Ignored = val
}

type ActivitySetThreadSubscriptionForbidden BasicError

func (*ActivitySetThreadSubscriptionForbidden) activitySetThreadSubscriptionRes() {}

type ActivitySetThreadSubscriptionReq struct {
	// Whether to block all notifications from a thread.
	Ignored OptBool `json:"ignored"`
}

// GetIgnored returns the value of Ignored.
func (s *ActivitySetThreadSubscriptionReq) GetIgnored() OptBool {
	return s.Ignored
}

// SetIgnored sets the value of Ignored.
func (s *ActivitySetThreadSubscriptionReq) SetIgnored(val OptBool) {
	s.Ignored = val
}

type ActivitySetThreadSubscriptionUnauthorized BasicError

func (*ActivitySetThreadSubscriptionUnauthorized) activitySetThreadSubscriptionRes() {}

type ActivityStarRepoForAuthenticatedUserForbidden BasicError

func (*ActivityStarRepoForAuthenticatedUserForbidden) activityStarRepoForAuthenticatedUserRes() {}

// ActivityStarRepoForAuthenticatedUserNoContent is response for ActivityStarRepoForAuthenticatedUser operation.
type ActivityStarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityStarRepoForAuthenticatedUserNoContent) activityStarRepoForAuthenticatedUserRes() {}

type ActivityStarRepoForAuthenticatedUserNotFound BasicError

func (*ActivityStarRepoForAuthenticatedUserNotFound) activityStarRepoForAuthenticatedUserRes() {}

type ActivityStarRepoForAuthenticatedUserUnauthorized BasicError

func (*ActivityStarRepoForAuthenticatedUserUnauthorized) activityStarRepoForAuthenticatedUserRes() {}

type ActivityUnstarRepoForAuthenticatedUserForbidden BasicError

func (*ActivityUnstarRepoForAuthenticatedUserForbidden) activityUnstarRepoForAuthenticatedUserRes() {}

// ActivityUnstarRepoForAuthenticatedUserNoContent is response for ActivityUnstarRepoForAuthenticatedUser operation.
type ActivityUnstarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityUnstarRepoForAuthenticatedUserNoContent) activityUnstarRepoForAuthenticatedUserRes() {}

type ActivityUnstarRepoForAuthenticatedUserNotFound BasicError

func (*ActivityUnstarRepoForAuthenticatedUserNotFound) activityUnstarRepoForAuthenticatedUserRes() {}

type ActivityUnstarRepoForAuthenticatedUserUnauthorized BasicError

func (*ActivityUnstarRepoForAuthenticatedUserUnauthorized) activityUnstarRepoForAuthenticatedUserRes() {
}

// Actor.
// Ref: #/components/schemas/actor
type Actor struct {
	ID           int       `json:"id"`
	Login        string    `json:"login"`
	DisplayLogin OptString `json:"display_login"`
	GravatarID   NilString `json:"gravatar_id"`
	URL          url.URL   `json:"url"`
	AvatarURL    url.URL   `json:"avatar_url"`
}

// GetID returns the value of ID.
func (s *Actor) GetID() int {
	return s.ID
}

// GetLogin returns the value of Login.
func (s *Actor) GetLogin() string {
	return s.Login
}

// GetDisplayLogin returns the value of DisplayLogin.
func (s *Actor) GetDisplayLogin() OptString {
	return s.DisplayLogin
}

// GetGravatarID returns the value of GravatarID.
func (s *Actor) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *Actor) GetURL() url.URL {
	return s.URL
}

// GetAvatarURL returns the value of AvatarURL.
func (s *Actor) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// SetID sets the value of ID.
func (s *Actor) SetID(val int) {
	s.ID = val
}

// SetLogin sets the value of Login.
func (s *Actor) SetLogin(val string) {
	s.Login = val
}

// SetDisplayLogin sets the value of DisplayLogin.
func (s *Actor) SetDisplayLogin(val OptString) {
	s.DisplayLogin = val
}

// SetGravatarID sets the value of GravatarID.
func (s *Actor) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *Actor) SetURL(val url.URL) {
	s.URL = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *Actor) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

type AlertCreatedAt time.Time

type AlertHTMLURL url.URL

type AlertInstancesURL url.URL

type AlertNumber int

type AlertURL url.URL

// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`,
// `local_only`, or `selected`.
// Ref: #/components/schemas/allowed-actions
type AllowedActions string

const (
	AllowedActionsAll       AllowedActions = "all"
	AllowedActionsLocalOnly AllowedActions = "local_only"
	AllowedActionsSelected  AllowedActions = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s AllowedActions) MarshalText() ([]byte, error) {
	switch s {
	case AllowedActionsAll:
		return []byte(s), nil
	case AllowedActionsLocalOnly:
		return []byte(s), nil
	case AllowedActionsSelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AllowedActions) UnmarshalText(data []byte) error {
	switch AllowedActions(data) {
	case AllowedActionsAll:
		*s = AllowedActionsAll
		return nil
	case AllowedActionsLocalOnly:
		*s = AllowedActionsLocalOnly
		return nil
	case AllowedActionsSelected:
		*s = AllowedActionsSelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The permissions granted to the user-to-server access token.
// Ref: #/components/schemas/app-permissions
type AppPermissions struct {
	// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and
	// artifacts. Can be one of: `read` or `write`.
	Actions OptAppPermissionsActions `json:"actions"`
	// The level of permission to grant the access token for repository creation, deletion, settings,
	// teams, and collaborators creation. Can be one of: `read` or `write`.
	Administration OptAppPermissionsAdministration `json:"administration"`
	// The level of permission to grant the access token for checks on code. Can be one of: `read` or
	// `write`.
	Checks OptAppPermissionsChecks `json:"checks"`
	// The level of permission to grant the access token for notification of content references and
	// creation content attachments. Can be one of: `read` or `write`.
	ContentReferences OptAppPermissionsContentReferences `json:"content_references"`
	// The level of permission to grant the access token for repository contents, commits, branches,
	// downloads, releases, and merges. Can be one of: `read` or `write`.
	Contents OptAppPermissionsContents `json:"contents"`
	// The level of permission to grant the access token for deployments and deployment statuses. Can be
	// one of: `read` or `write`.
	Deployments OptAppPermissionsDeployments `json:"deployments"`
	// The level of permission to grant the access token for managing repository environments. Can be one
	// of: `read` or `write`.
	Environments OptAppPermissionsEnvironments `json:"environments"`
	// The level of permission to grant the access token for issues and related comments, assignees,
	// labels, and milestones. Can be one of: `read` or `write`.
	Issues OptAppPermissionsIssues `json:"issues"`
	// The level of permission to grant the access token to search repositories, list collaborators, and
	// access repository metadata. Can be one of: `read` or `write`.
	Metadata OptAppPermissionsMetadata `json:"metadata"`
	// The level of permission to grant the access token for packages published to GitHub Packages. Can
	// be one of: `read` or `write`.
	Packages OptAppPermissionsPackages `json:"packages"`
	// The level of permission to grant the access token to retrieve Pages statuses, configuration, and
	// builds, as well as create new builds. Can be one of: `read` or `write`.
	Pages OptAppPermissionsPages `json:"pages"`
	// The level of permission to grant the access token for pull requests and related comments,
	// assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
	PullRequests OptAppPermissionsPullRequests `json:"pull_requests"`
	// The level of permission to grant the access token to manage the post-receive hooks for a
	// repository. Can be one of: `read` or `write`.
	RepositoryHooks OptAppPermissionsRepositoryHooks `json:"repository_hooks"`
	// The level of permission to grant the access token to manage repository projects, columns, and
	// cards. Can be one of: `read`, `write`, or `admin`.
	RepositoryProjects OptAppPermissionsRepositoryProjects `json:"repository_projects"`
	// The level of permission to grant the access token to view and manage secret scanning alerts. Can
	// be one of: `read` or `write`.
	SecretScanningAlerts OptAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts"`
	// The level of permission to grant the access token to manage repository secrets. Can be one of:
	// `read` or `write`.
	Secrets OptAppPermissionsSecrets `json:"secrets"`
	// The level of permission to grant the access token to view and manage security events like code
	// scanning alerts. Can be one of: `read` or `write`.
	SecurityEvents OptAppPermissionsSecurityEvents `json:"security_events"`
	// The level of permission to grant the access token to manage just a single file. Can be one of:
	// `read` or `write`.
	SingleFile OptAppPermissionsSingleFile `json:"single_file"`
	// The level of permission to grant the access token for commit statuses. Can be one of: `read` or
	// `write`.
	Statuses OptAppPermissionsStatuses `json:"statuses"`
	// The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of:
	// `read`.
	VulnerabilityAlerts OptAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts"`
	// The level of permission to grant the access token to update GitHub Actions workflow files. Can be
	// one of: `write`.
	Workflows OptAppPermissionsWorkflows `json:"workflows"`
	// The level of permission to grant the access token for organization teams and members. Can be one
	// of: `read` or `write`.
	Members OptAppPermissionsMembers `json:"members"`
	// The level of permission to grant the access token to manage access to an organization. Can be one
	// of: `read` or `write`.
	OrganizationAdministration OptAppPermissionsOrganizationAdministration `json:"organization_administration"`
	// The level of permission to grant the access token to manage the post-receive hooks for an
	// organization. Can be one of: `read` or `write`.
	OrganizationHooks OptAppPermissionsOrganizationHooks `json:"organization_hooks"`
	// The level of permission to grant the access token for viewing an organization's plan. Can be one
	// of: `read`.
	OrganizationPlan OptAppPermissionsOrganizationPlan `json:"organization_plan"`
	// The level of permission to grant the access token to manage organization projects, columns, and
	// cards. Can be one of: `read`, `write`, or `admin`.
	OrganizationProjects OptAppPermissionsOrganizationProjects `json:"organization_projects"`
	// The level of permission to grant the access token for organization packages published to GitHub
	// Packages. Can be one of: `read` or `write`.
	OrganizationPackages OptAppPermissionsOrganizationPackages `json:"organization_packages"`
	// The level of permission to grant the access token to manage organization secrets. Can be one of:
	// `read` or `write`.
	OrganizationSecrets OptAppPermissionsOrganizationSecrets `json:"organization_secrets"`
	// The level of permission to grant the access token to view and manage GitHub Actions self-hosted
	// runners available to an organization. Can be one of: `read` or `write`.
	OrganizationSelfHostedRunners OptAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners"`
	// The level of permission to grant the access token to view and manage users blocked by the
	// organization. Can be one of: `read` or `write`.
	OrganizationUserBlocking OptAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking"`
	// The level of permission to grant the access token to manage team discussions and related comments.
	// Can be one of: `read` or `write`.
	TeamDiscussions OptAppPermissionsTeamDiscussions `json:"team_discussions"`
}

// GetActions returns the value of Actions.
func (s *AppPermissions) GetActions() OptAppPermissionsActions {
	return s.Actions
}

// GetAdministration returns the value of Administration.
func (s *AppPermissions) GetAdministration() OptAppPermissionsAdministration {
	return s.Administration
}

// GetChecks returns the value of Checks.
func (s *AppPermissions) GetChecks() OptAppPermissionsChecks {
	return s.Checks
}

// GetContentReferences returns the value of ContentReferences.
func (s *AppPermissions) GetContentReferences() OptAppPermissionsContentReferences {
	return s.ContentReferences
}

// GetContents returns the value of Contents.
func (s *AppPermissions) GetContents() OptAppPermissionsContents {
	return s.Contents
}

// GetDeployments returns the value of Deployments.
func (s *AppPermissions) GetDeployments() OptAppPermissionsDeployments {
	return s.Deployments
}

// GetEnvironments returns the value of Environments.
func (s *AppPermissions) GetEnvironments() OptAppPermissionsEnvironments {
	return s.Environments
}

// GetIssues returns the value of Issues.
func (s *AppPermissions) GetIssues() OptAppPermissionsIssues {
	return s.Issues
}

// GetMetadata returns the value of Metadata.
func (s *AppPermissions) GetMetadata() OptAppPermissionsMetadata {
	return s.Metadata
}

// GetPackages returns the value of Packages.
func (s *AppPermissions) GetPackages() OptAppPermissionsPackages {
	return s.Packages
}

// GetPages returns the value of Pages.
func (s *AppPermissions) GetPages() OptAppPermissionsPages {
	return s.Pages
}

// GetPullRequests returns the value of PullRequests.
func (s *AppPermissions) GetPullRequests() OptAppPermissionsPullRequests {
	return s.PullRequests
}

// GetRepositoryHooks returns the value of RepositoryHooks.
func (s *AppPermissions) GetRepositoryHooks() OptAppPermissionsRepositoryHooks {
	return s.RepositoryHooks
}

// GetRepositoryProjects returns the value of RepositoryProjects.
func (s *AppPermissions) GetRepositoryProjects() OptAppPermissionsRepositoryProjects {
	return s.RepositoryProjects
}

// GetSecretScanningAlerts returns the value of SecretScanningAlerts.
func (s *AppPermissions) GetSecretScanningAlerts() OptAppPermissionsSecretScanningAlerts {
	return s.SecretScanningAlerts
}

// GetSecrets returns the value of Secrets.
func (s *AppPermissions) GetSecrets() OptAppPermissionsSecrets {
	return s.Secrets
}

// GetSecurityEvents returns the value of SecurityEvents.
func (s *AppPermissions) GetSecurityEvents() OptAppPermissionsSecurityEvents {
	return s.SecurityEvents
}

// GetSingleFile returns the value of SingleFile.
func (s *AppPermissions) GetSingleFile() OptAppPermissionsSingleFile {
	return s.SingleFile
}

// GetStatuses returns the value of Statuses.
func (s *AppPermissions) GetStatuses() OptAppPermissionsStatuses {
	return s.Statuses
}

// GetVulnerabilityAlerts returns the value of VulnerabilityAlerts.
func (s *AppPermissions) GetVulnerabilityAlerts() OptAppPermissionsVulnerabilityAlerts {
	return s.VulnerabilityAlerts
}

// GetWorkflows returns the value of Workflows.
func (s *AppPermissions) GetWorkflows() OptAppPermissionsWorkflows {
	return s.Workflows
}

// GetMembers returns the value of Members.
func (s *AppPermissions) GetMembers() OptAppPermissionsMembers {
	return s.Members
}

// GetOrganizationAdministration returns the value of OrganizationAdministration.
func (s *AppPermissions) GetOrganizationAdministration() OptAppPermissionsOrganizationAdministration {
	return s.OrganizationAdministration
}

// GetOrganizationHooks returns the value of OrganizationHooks.
func (s *AppPermissions) GetOrganizationHooks() OptAppPermissionsOrganizationHooks {
	return s.OrganizationHooks
}

// GetOrganizationPlan returns the value of OrganizationPlan.
func (s *AppPermissions) GetOrganizationPlan() OptAppPermissionsOrganizationPlan {
	return s.OrganizationPlan
}

// GetOrganizationProjects returns the value of OrganizationProjects.
func (s *AppPermissions) GetOrganizationProjects() OptAppPermissionsOrganizationProjects {
	return s.OrganizationProjects
}

// GetOrganizationPackages returns the value of OrganizationPackages.
func (s *AppPermissions) GetOrganizationPackages() OptAppPermissionsOrganizationPackages {
	return s.OrganizationPackages
}

// GetOrganizationSecrets returns the value of OrganizationSecrets.
func (s *AppPermissions) GetOrganizationSecrets() OptAppPermissionsOrganizationSecrets {
	return s.OrganizationSecrets
}

// GetOrganizationSelfHostedRunners returns the value of OrganizationSelfHostedRunners.
func (s *AppPermissions) GetOrganizationSelfHostedRunners() OptAppPermissionsOrganizationSelfHostedRunners {
	return s.OrganizationSelfHostedRunners
}

// GetOrganizationUserBlocking returns the value of OrganizationUserBlocking.
func (s *AppPermissions) GetOrganizationUserBlocking() OptAppPermissionsOrganizationUserBlocking {
	return s.OrganizationUserBlocking
}

// GetTeamDiscussions returns the value of TeamDiscussions.
func (s *AppPermissions) GetTeamDiscussions() OptAppPermissionsTeamDiscussions {
	return s.TeamDiscussions
}

// SetActions sets the value of Actions.
func (s *AppPermissions) SetActions(val OptAppPermissionsActions) {
	s.Actions = val
}

// SetAdministration sets the value of Administration.
func (s *AppPermissions) SetAdministration(val OptAppPermissionsAdministration) {
	s.Administration = val
}

// SetChecks sets the value of Checks.
func (s *AppPermissions) SetChecks(val OptAppPermissionsChecks) {
	s.Checks = val
}

// SetContentReferences sets the value of ContentReferences.
func (s *AppPermissions) SetContentReferences(val OptAppPermissionsContentReferences) {
	s.ContentReferences = val
}

// SetContents sets the value of Contents.
func (s *AppPermissions) SetContents(val OptAppPermissionsContents) {
	s.Contents = val
}

// SetDeployments sets the value of Deployments.
func (s *AppPermissions) SetDeployments(val OptAppPermissionsDeployments) {
	s.Deployments = val
}

// SetEnvironments sets the value of Environments.
func (s *AppPermissions) SetEnvironments(val OptAppPermissionsEnvironments) {
	s.Environments = val
}

// SetIssues sets the value of Issues.
func (s *AppPermissions) SetIssues(val OptAppPermissionsIssues) {
	s.Issues = val
}

// SetMetadata sets the value of Metadata.
func (s *AppPermissions) SetMetadata(val OptAppPermissionsMetadata) {
	s.Metadata = val
}

// SetPackages sets the value of Packages.
func (s *AppPermissions) SetPackages(val OptAppPermissionsPackages) {
	s.Packages = val
}

// SetPages sets the value of Pages.
func (s *AppPermissions) SetPages(val OptAppPermissionsPages) {
	s.Pages = val
}

// SetPullRequests sets the value of PullRequests.
func (s *AppPermissions) SetPullRequests(val OptAppPermissionsPullRequests) {
	s.PullRequests = val
}

// SetRepositoryHooks sets the value of RepositoryHooks.
func (s *AppPermissions) SetRepositoryHooks(val OptAppPermissionsRepositoryHooks) {
	s.RepositoryHooks = val
}

// SetRepositoryProjects sets the value of RepositoryProjects.
func (s *AppPermissions) SetRepositoryProjects(val OptAppPermissionsRepositoryProjects) {
	s.RepositoryProjects = val
}

// SetSecretScanningAlerts sets the value of SecretScanningAlerts.
func (s *AppPermissions) SetSecretScanningAlerts(val OptAppPermissionsSecretScanningAlerts) {
	s.SecretScanningAlerts = val
}

// SetSecrets sets the value of Secrets.
func (s *AppPermissions) SetSecrets(val OptAppPermissionsSecrets) {
	s.Secrets = val
}

// SetSecurityEvents sets the value of SecurityEvents.
func (s *AppPermissions) SetSecurityEvents(val OptAppPermissionsSecurityEvents) {
	s.SecurityEvents = val
}

// SetSingleFile sets the value of SingleFile.
func (s *AppPermissions) SetSingleFile(val OptAppPermissionsSingleFile) {
	s.SingleFile = val
}

// SetStatuses sets the value of Statuses.
func (s *AppPermissions) SetStatuses(val OptAppPermissionsStatuses) {
	s.Statuses = val
}

// SetVulnerabilityAlerts sets the value of VulnerabilityAlerts.
func (s *AppPermissions) SetVulnerabilityAlerts(val OptAppPermissionsVulnerabilityAlerts) {
	s.VulnerabilityAlerts = val
}

// SetWorkflows sets the value of Workflows.
func (s *AppPermissions) SetWorkflows(val OptAppPermissionsWorkflows) {
	s.Workflows = val
}

// SetMembers sets the value of Members.
func (s *AppPermissions) SetMembers(val OptAppPermissionsMembers) {
	s.Members = val
}

// SetOrganizationAdministration sets the value of OrganizationAdministration.
func (s *AppPermissions) SetOrganizationAdministration(val OptAppPermissionsOrganizationAdministration) {
	s.OrganizationAdministration = val
}

// SetOrganizationHooks sets the value of OrganizationHooks.
func (s *AppPermissions) SetOrganizationHooks(val OptAppPermissionsOrganizationHooks) {
	s.OrganizationHooks = val
}

// SetOrganizationPlan sets the value of OrganizationPlan.
func (s *AppPermissions) SetOrganizationPlan(val OptAppPermissionsOrganizationPlan) {
	s.OrganizationPlan = val
}

// SetOrganizationProjects sets the value of OrganizationProjects.
func (s *AppPermissions) SetOrganizationProjects(val OptAppPermissionsOrganizationProjects) {
	s.OrganizationProjects = val
}

// SetOrganizationPackages sets the value of OrganizationPackages.
func (s *AppPermissions) SetOrganizationPackages(val OptAppPermissionsOrganizationPackages) {
	s.OrganizationPackages = val
}

// SetOrganizationSecrets sets the value of OrganizationSecrets.
func (s *AppPermissions) SetOrganizationSecrets(val OptAppPermissionsOrganizationSecrets) {
	s.OrganizationSecrets = val
}

// SetOrganizationSelfHostedRunners sets the value of OrganizationSelfHostedRunners.
func (s *AppPermissions) SetOrganizationSelfHostedRunners(val OptAppPermissionsOrganizationSelfHostedRunners) {
	s.OrganizationSelfHostedRunners = val
}

// SetOrganizationUserBlocking sets the value of OrganizationUserBlocking.
func (s *AppPermissions) SetOrganizationUserBlocking(val OptAppPermissionsOrganizationUserBlocking) {
	s.OrganizationUserBlocking = val
}

// SetTeamDiscussions sets the value of TeamDiscussions.
func (s *AppPermissions) SetTeamDiscussions(val OptAppPermissionsTeamDiscussions) {
	s.TeamDiscussions = val
}

// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and
// artifacts. Can be one of: `read` or `write`.
type AppPermissionsActions string

const (
	AppPermissionsActionsRead  AppPermissionsActions = "read"
	AppPermissionsActionsWrite AppPermissionsActions = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsActions) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsActionsRead:
		return []byte(s), nil
	case AppPermissionsActionsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsActions) UnmarshalText(data []byte) error {
	switch AppPermissionsActions(data) {
	case AppPermissionsActionsRead:
		*s = AppPermissionsActionsRead
		return nil
	case AppPermissionsActionsWrite:
		*s = AppPermissionsActionsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for repository creation, deletion, settings,
// teams, and collaborators creation. Can be one of: `read` or `write`.
type AppPermissionsAdministration string

const (
	AppPermissionsAdministrationRead  AppPermissionsAdministration = "read"
	AppPermissionsAdministrationWrite AppPermissionsAdministration = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsAdministration) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsAdministrationRead:
		return []byte(s), nil
	case AppPermissionsAdministrationWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsAdministration) UnmarshalText(data []byte) error {
	switch AppPermissionsAdministration(data) {
	case AppPermissionsAdministrationRead:
		*s = AppPermissionsAdministrationRead
		return nil
	case AppPermissionsAdministrationWrite:
		*s = AppPermissionsAdministrationWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for checks on code. Can be one of: `read` or
// `write`.
type AppPermissionsChecks string

const (
	AppPermissionsChecksRead  AppPermissionsChecks = "read"
	AppPermissionsChecksWrite AppPermissionsChecks = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsChecks) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsChecksRead:
		return []byte(s), nil
	case AppPermissionsChecksWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsChecks) UnmarshalText(data []byte) error {
	switch AppPermissionsChecks(data) {
	case AppPermissionsChecksRead:
		*s = AppPermissionsChecksRead
		return nil
	case AppPermissionsChecksWrite:
		*s = AppPermissionsChecksWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for notification of content references and
// creation content attachments. Can be one of: `read` or `write`.
type AppPermissionsContentReferences string

const (
	AppPermissionsContentReferencesRead  AppPermissionsContentReferences = "read"
	AppPermissionsContentReferencesWrite AppPermissionsContentReferences = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsContentReferences) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsContentReferencesRead:
		return []byte(s), nil
	case AppPermissionsContentReferencesWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsContentReferences) UnmarshalText(data []byte) error {
	switch AppPermissionsContentReferences(data) {
	case AppPermissionsContentReferencesRead:
		*s = AppPermissionsContentReferencesRead
		return nil
	case AppPermissionsContentReferencesWrite:
		*s = AppPermissionsContentReferencesWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for repository contents, commits, branches,
// downloads, releases, and merges. Can be one of: `read` or `write`.
type AppPermissionsContents string

const (
	AppPermissionsContentsRead  AppPermissionsContents = "read"
	AppPermissionsContentsWrite AppPermissionsContents = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsContents) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsContentsRead:
		return []byte(s), nil
	case AppPermissionsContentsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsContents) UnmarshalText(data []byte) error {
	switch AppPermissionsContents(data) {
	case AppPermissionsContentsRead:
		*s = AppPermissionsContentsRead
		return nil
	case AppPermissionsContentsWrite:
		*s = AppPermissionsContentsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for deployments and deployment statuses. Can be
// one of: `read` or `write`.
type AppPermissionsDeployments string

const (
	AppPermissionsDeploymentsRead  AppPermissionsDeployments = "read"
	AppPermissionsDeploymentsWrite AppPermissionsDeployments = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsDeployments) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsDeploymentsRead:
		return []byte(s), nil
	case AppPermissionsDeploymentsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsDeployments) UnmarshalText(data []byte) error {
	switch AppPermissionsDeployments(data) {
	case AppPermissionsDeploymentsRead:
		*s = AppPermissionsDeploymentsRead
		return nil
	case AppPermissionsDeploymentsWrite:
		*s = AppPermissionsDeploymentsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for managing repository environments. Can be one
// of: `read` or `write`.
type AppPermissionsEnvironments string

const (
	AppPermissionsEnvironmentsRead  AppPermissionsEnvironments = "read"
	AppPermissionsEnvironmentsWrite AppPermissionsEnvironments = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsEnvironments) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsEnvironmentsRead:
		return []byte(s), nil
	case AppPermissionsEnvironmentsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsEnvironments) UnmarshalText(data []byte) error {
	switch AppPermissionsEnvironments(data) {
	case AppPermissionsEnvironmentsRead:
		*s = AppPermissionsEnvironmentsRead
		return nil
	case AppPermissionsEnvironmentsWrite:
		*s = AppPermissionsEnvironmentsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for issues and related comments, assignees,
// labels, and milestones. Can be one of: `read` or `write`.
type AppPermissionsIssues string

const (
	AppPermissionsIssuesRead  AppPermissionsIssues = "read"
	AppPermissionsIssuesWrite AppPermissionsIssues = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsIssues) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsIssuesRead:
		return []byte(s), nil
	case AppPermissionsIssuesWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsIssues) UnmarshalText(data []byte) error {
	switch AppPermissionsIssues(data) {
	case AppPermissionsIssuesRead:
		*s = AppPermissionsIssuesRead
		return nil
	case AppPermissionsIssuesWrite:
		*s = AppPermissionsIssuesWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for organization teams and members. Can be one
// of: `read` or `write`.
type AppPermissionsMembers string

const (
	AppPermissionsMembersRead  AppPermissionsMembers = "read"
	AppPermissionsMembersWrite AppPermissionsMembers = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsMembers) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsMembersRead:
		return []byte(s), nil
	case AppPermissionsMembersWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsMembers) UnmarshalText(data []byte) error {
	switch AppPermissionsMembers(data) {
	case AppPermissionsMembersRead:
		*s = AppPermissionsMembersRead
		return nil
	case AppPermissionsMembersWrite:
		*s = AppPermissionsMembersWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to search repositories, list collaborators, and
// access repository metadata. Can be one of: `read` or `write`.
type AppPermissionsMetadata string

const (
	AppPermissionsMetadataRead  AppPermissionsMetadata = "read"
	AppPermissionsMetadataWrite AppPermissionsMetadata = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsMetadata) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsMetadataRead:
		return []byte(s), nil
	case AppPermissionsMetadataWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsMetadata) UnmarshalText(data []byte) error {
	switch AppPermissionsMetadata(data) {
	case AppPermissionsMetadataRead:
		*s = AppPermissionsMetadataRead
		return nil
	case AppPermissionsMetadataWrite:
		*s = AppPermissionsMetadataWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage access to an organization. Can be one
// of: `read` or `write`.
type AppPermissionsOrganizationAdministration string

const (
	AppPermissionsOrganizationAdministrationRead  AppPermissionsOrganizationAdministration = "read"
	AppPermissionsOrganizationAdministrationWrite AppPermissionsOrganizationAdministration = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationAdministration) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationAdministrationRead:
		return []byte(s), nil
	case AppPermissionsOrganizationAdministrationWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationAdministration) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationAdministration(data) {
	case AppPermissionsOrganizationAdministrationRead:
		*s = AppPermissionsOrganizationAdministrationRead
		return nil
	case AppPermissionsOrganizationAdministrationWrite:
		*s = AppPermissionsOrganizationAdministrationWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage the post-receive hooks for an
// organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationHooks string

const (
	AppPermissionsOrganizationHooksRead  AppPermissionsOrganizationHooks = "read"
	AppPermissionsOrganizationHooksWrite AppPermissionsOrganizationHooks = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationHooks) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationHooksRead:
		return []byte(s), nil
	case AppPermissionsOrganizationHooksWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationHooks) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationHooks(data) {
	case AppPermissionsOrganizationHooksRead:
		*s = AppPermissionsOrganizationHooksRead
		return nil
	case AppPermissionsOrganizationHooksWrite:
		*s = AppPermissionsOrganizationHooksWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for organization packages published to GitHub
// Packages. Can be one of: `read` or `write`.
type AppPermissionsOrganizationPackages string

const (
	AppPermissionsOrganizationPackagesRead  AppPermissionsOrganizationPackages = "read"
	AppPermissionsOrganizationPackagesWrite AppPermissionsOrganizationPackages = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationPackages) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationPackagesRead:
		return []byte(s), nil
	case AppPermissionsOrganizationPackagesWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationPackages) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationPackages(data) {
	case AppPermissionsOrganizationPackagesRead:
		*s = AppPermissionsOrganizationPackagesRead
		return nil
	case AppPermissionsOrganizationPackagesWrite:
		*s = AppPermissionsOrganizationPackagesWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for viewing an organization's plan. Can be one
// of: `read`.
type AppPermissionsOrganizationPlan string

const (
	AppPermissionsOrganizationPlanRead AppPermissionsOrganizationPlan = "read"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationPlan) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationPlanRead:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationPlan) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationPlan(data) {
	case AppPermissionsOrganizationPlanRead:
		*s = AppPermissionsOrganizationPlanRead
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage organization projects, columns, and
// cards. Can be one of: `read`, `write`, or `admin`.
type AppPermissionsOrganizationProjects string

const (
	AppPermissionsOrganizationProjectsRead  AppPermissionsOrganizationProjects = "read"
	AppPermissionsOrganizationProjectsWrite AppPermissionsOrganizationProjects = "write"
	AppPermissionsOrganizationProjectsAdmin AppPermissionsOrganizationProjects = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationProjects) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationProjectsRead:
		return []byte(s), nil
	case AppPermissionsOrganizationProjectsWrite:
		return []byte(s), nil
	case AppPermissionsOrganizationProjectsAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationProjects) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationProjects(data) {
	case AppPermissionsOrganizationProjectsRead:
		*s = AppPermissionsOrganizationProjectsRead
		return nil
	case AppPermissionsOrganizationProjectsWrite:
		*s = AppPermissionsOrganizationProjectsWrite
		return nil
	case AppPermissionsOrganizationProjectsAdmin:
		*s = AppPermissionsOrganizationProjectsAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage organization secrets. Can be one of:
// `read` or `write`.
type AppPermissionsOrganizationSecrets string

const (
	AppPermissionsOrganizationSecretsRead  AppPermissionsOrganizationSecrets = "read"
	AppPermissionsOrganizationSecretsWrite AppPermissionsOrganizationSecrets = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationSecrets) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationSecretsRead:
		return []byte(s), nil
	case AppPermissionsOrganizationSecretsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationSecrets) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationSecrets(data) {
	case AppPermissionsOrganizationSecretsRead:
		*s = AppPermissionsOrganizationSecretsRead
		return nil
	case AppPermissionsOrganizationSecretsWrite:
		*s = AppPermissionsOrganizationSecretsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to view and manage GitHub Actions self-hosted
// runners available to an organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationSelfHostedRunners string

const (
	AppPermissionsOrganizationSelfHostedRunnersRead  AppPermissionsOrganizationSelfHostedRunners = "read"
	AppPermissionsOrganizationSelfHostedRunnersWrite AppPermissionsOrganizationSelfHostedRunners = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationSelfHostedRunners) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationSelfHostedRunnersRead:
		return []byte(s), nil
	case AppPermissionsOrganizationSelfHostedRunnersWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationSelfHostedRunners) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationSelfHostedRunners(data) {
	case AppPermissionsOrganizationSelfHostedRunnersRead:
		*s = AppPermissionsOrganizationSelfHostedRunnersRead
		return nil
	case AppPermissionsOrganizationSelfHostedRunnersWrite:
		*s = AppPermissionsOrganizationSelfHostedRunnersWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to view and manage users blocked by the
// organization. Can be one of: `read` or `write`.
type AppPermissionsOrganizationUserBlocking string

const (
	AppPermissionsOrganizationUserBlockingRead  AppPermissionsOrganizationUserBlocking = "read"
	AppPermissionsOrganizationUserBlockingWrite AppPermissionsOrganizationUserBlocking = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsOrganizationUserBlocking) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsOrganizationUserBlockingRead:
		return []byte(s), nil
	case AppPermissionsOrganizationUserBlockingWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsOrganizationUserBlocking) UnmarshalText(data []byte) error {
	switch AppPermissionsOrganizationUserBlocking(data) {
	case AppPermissionsOrganizationUserBlockingRead:
		*s = AppPermissionsOrganizationUserBlockingRead
		return nil
	case AppPermissionsOrganizationUserBlockingWrite:
		*s = AppPermissionsOrganizationUserBlockingWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for packages published to GitHub Packages. Can
// be one of: `read` or `write`.
type AppPermissionsPackages string

const (
	AppPermissionsPackagesRead  AppPermissionsPackages = "read"
	AppPermissionsPackagesWrite AppPermissionsPackages = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsPackages) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsPackagesRead:
		return []byte(s), nil
	case AppPermissionsPackagesWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsPackages) UnmarshalText(data []byte) error {
	switch AppPermissionsPackages(data) {
	case AppPermissionsPackagesRead:
		*s = AppPermissionsPackagesRead
		return nil
	case AppPermissionsPackagesWrite:
		*s = AppPermissionsPackagesWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to retrieve Pages statuses, configuration, and
// builds, as well as create new builds. Can be one of: `read` or `write`.
type AppPermissionsPages string

const (
	AppPermissionsPagesRead  AppPermissionsPages = "read"
	AppPermissionsPagesWrite AppPermissionsPages = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsPages) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsPagesRead:
		return []byte(s), nil
	case AppPermissionsPagesWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsPages) UnmarshalText(data []byte) error {
	switch AppPermissionsPages(data) {
	case AppPermissionsPagesRead:
		*s = AppPermissionsPagesRead
		return nil
	case AppPermissionsPagesWrite:
		*s = AppPermissionsPagesWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for pull requests and related comments,
// assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
type AppPermissionsPullRequests string

const (
	AppPermissionsPullRequestsRead  AppPermissionsPullRequests = "read"
	AppPermissionsPullRequestsWrite AppPermissionsPullRequests = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsPullRequests) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsPullRequestsRead:
		return []byte(s), nil
	case AppPermissionsPullRequestsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsPullRequests) UnmarshalText(data []byte) error {
	switch AppPermissionsPullRequests(data) {
	case AppPermissionsPullRequestsRead:
		*s = AppPermissionsPullRequestsRead
		return nil
	case AppPermissionsPullRequestsWrite:
		*s = AppPermissionsPullRequestsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage the post-receive hooks for a
// repository. Can be one of: `read` or `write`.
type AppPermissionsRepositoryHooks string

const (
	AppPermissionsRepositoryHooksRead  AppPermissionsRepositoryHooks = "read"
	AppPermissionsRepositoryHooksWrite AppPermissionsRepositoryHooks = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsRepositoryHooks) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsRepositoryHooksRead:
		return []byte(s), nil
	case AppPermissionsRepositoryHooksWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsRepositoryHooks) UnmarshalText(data []byte) error {
	switch AppPermissionsRepositoryHooks(data) {
	case AppPermissionsRepositoryHooksRead:
		*s = AppPermissionsRepositoryHooksRead
		return nil
	case AppPermissionsRepositoryHooksWrite:
		*s = AppPermissionsRepositoryHooksWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage repository projects, columns, and
// cards. Can be one of: `read`, `write`, or `admin`.
type AppPermissionsRepositoryProjects string

const (
	AppPermissionsRepositoryProjectsRead  AppPermissionsRepositoryProjects = "read"
	AppPermissionsRepositoryProjectsWrite AppPermissionsRepositoryProjects = "write"
	AppPermissionsRepositoryProjectsAdmin AppPermissionsRepositoryProjects = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsRepositoryProjects) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsRepositoryProjectsRead:
		return []byte(s), nil
	case AppPermissionsRepositoryProjectsWrite:
		return []byte(s), nil
	case AppPermissionsRepositoryProjectsAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsRepositoryProjects) UnmarshalText(data []byte) error {
	switch AppPermissionsRepositoryProjects(data) {
	case AppPermissionsRepositoryProjectsRead:
		*s = AppPermissionsRepositoryProjectsRead
		return nil
	case AppPermissionsRepositoryProjectsWrite:
		*s = AppPermissionsRepositoryProjectsWrite
		return nil
	case AppPermissionsRepositoryProjectsAdmin:
		*s = AppPermissionsRepositoryProjectsAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to view and manage secret scanning alerts. Can
// be one of: `read` or `write`.
type AppPermissionsSecretScanningAlerts string

const (
	AppPermissionsSecretScanningAlertsRead  AppPermissionsSecretScanningAlerts = "read"
	AppPermissionsSecretScanningAlertsWrite AppPermissionsSecretScanningAlerts = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsSecretScanningAlerts) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsSecretScanningAlertsRead:
		return []byte(s), nil
	case AppPermissionsSecretScanningAlertsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsSecretScanningAlerts) UnmarshalText(data []byte) error {
	switch AppPermissionsSecretScanningAlerts(data) {
	case AppPermissionsSecretScanningAlertsRead:
		*s = AppPermissionsSecretScanningAlertsRead
		return nil
	case AppPermissionsSecretScanningAlertsWrite:
		*s = AppPermissionsSecretScanningAlertsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage repository secrets. Can be one of:
// `read` or `write`.
type AppPermissionsSecrets string

const (
	AppPermissionsSecretsRead  AppPermissionsSecrets = "read"
	AppPermissionsSecretsWrite AppPermissionsSecrets = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsSecrets) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsSecretsRead:
		return []byte(s), nil
	case AppPermissionsSecretsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsSecrets) UnmarshalText(data []byte) error {
	switch AppPermissionsSecrets(data) {
	case AppPermissionsSecretsRead:
		*s = AppPermissionsSecretsRead
		return nil
	case AppPermissionsSecretsWrite:
		*s = AppPermissionsSecretsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to view and manage security events like code
// scanning alerts. Can be one of: `read` or `write`.
type AppPermissionsSecurityEvents string

const (
	AppPermissionsSecurityEventsRead  AppPermissionsSecurityEvents = "read"
	AppPermissionsSecurityEventsWrite AppPermissionsSecurityEvents = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsSecurityEvents) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsSecurityEventsRead:
		return []byte(s), nil
	case AppPermissionsSecurityEventsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsSecurityEvents) UnmarshalText(data []byte) error {
	switch AppPermissionsSecurityEvents(data) {
	case AppPermissionsSecurityEventsRead:
		*s = AppPermissionsSecurityEventsRead
		return nil
	case AppPermissionsSecurityEventsWrite:
		*s = AppPermissionsSecurityEventsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage just a single file. Can be one of:
// `read` or `write`.
type AppPermissionsSingleFile string

const (
	AppPermissionsSingleFileRead  AppPermissionsSingleFile = "read"
	AppPermissionsSingleFileWrite AppPermissionsSingleFile = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsSingleFile) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsSingleFileRead:
		return []byte(s), nil
	case AppPermissionsSingleFileWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsSingleFile) UnmarshalText(data []byte) error {
	switch AppPermissionsSingleFile(data) {
	case AppPermissionsSingleFileRead:
		*s = AppPermissionsSingleFileRead
		return nil
	case AppPermissionsSingleFileWrite:
		*s = AppPermissionsSingleFileWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token for commit statuses. Can be one of: `read` or
// `write`.
type AppPermissionsStatuses string

const (
	AppPermissionsStatusesRead  AppPermissionsStatuses = "read"
	AppPermissionsStatusesWrite AppPermissionsStatuses = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsStatuses) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsStatusesRead:
		return []byte(s), nil
	case AppPermissionsStatusesWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsStatuses) UnmarshalText(data []byte) error {
	switch AppPermissionsStatuses(data) {
	case AppPermissionsStatusesRead:
		*s = AppPermissionsStatusesRead
		return nil
	case AppPermissionsStatusesWrite:
		*s = AppPermissionsStatusesWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to manage team discussions and related comments.
// Can be one of: `read` or `write`.
type AppPermissionsTeamDiscussions string

const (
	AppPermissionsTeamDiscussionsRead  AppPermissionsTeamDiscussions = "read"
	AppPermissionsTeamDiscussionsWrite AppPermissionsTeamDiscussions = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsTeamDiscussions) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsTeamDiscussionsRead:
		return []byte(s), nil
	case AppPermissionsTeamDiscussionsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsTeamDiscussions) UnmarshalText(data []byte) error {
	switch AppPermissionsTeamDiscussions(data) {
	case AppPermissionsTeamDiscussionsRead:
		*s = AppPermissionsTeamDiscussionsRead
		return nil
	case AppPermissionsTeamDiscussionsWrite:
		*s = AppPermissionsTeamDiscussionsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of:
// `read`.
type AppPermissionsVulnerabilityAlerts string

const (
	AppPermissionsVulnerabilityAlertsRead AppPermissionsVulnerabilityAlerts = "read"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsVulnerabilityAlerts) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsVulnerabilityAlertsRead:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsVulnerabilityAlerts) UnmarshalText(data []byte) error {
	switch AppPermissionsVulnerabilityAlerts(data) {
	case AppPermissionsVulnerabilityAlertsRead:
		*s = AppPermissionsVulnerabilityAlertsRead
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of permission to grant the access token to update GitHub Actions workflow files. Can be
// one of: `write`.
type AppPermissionsWorkflows string

const (
	AppPermissionsWorkflowsWrite AppPermissionsWorkflows = "write"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppPermissionsWorkflows) MarshalText() ([]byte, error) {
	switch s {
	case AppPermissionsWorkflowsWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppPermissionsWorkflows) UnmarshalText(data []byte) error {
	switch AppPermissionsWorkflows(data) {
	case AppPermissionsWorkflowsWrite:
		*s = AppPermissionsWorkflowsWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The authorization associated with an OAuth Access.
// Ref: #/components/schemas/application-grant
type ApplicationGrant struct {
	ID        int                      `json:"id"`
	URL       url.URL                  `json:"url"`
	App       ApplicationGrantApp      `json:"app"`
	CreatedAt time.Time                `json:"created_at"`
	UpdatedAt time.Time                `json:"updated_at"`
	Scopes    []string                 `json:"scopes"`
	User      OptNilNullableSimpleUser `json:"user"`
}

// GetID returns the value of ID.
func (s *ApplicationGrant) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *ApplicationGrant) GetURL() url.URL {
	return s.URL
}

// GetApp returns the value of App.
func (s *ApplicationGrant) GetApp() ApplicationGrantApp {
	return s.App
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ApplicationGrant) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ApplicationGrant) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetScopes returns the value of Scopes.
func (s *ApplicationGrant) GetScopes() []string {
	return s.Scopes
}

// GetUser returns the value of User.
func (s *ApplicationGrant) GetUser() OptNilNullableSimpleUser {
	return s.User
}

// SetID sets the value of ID.
func (s *ApplicationGrant) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *ApplicationGrant) SetURL(val url.URL) {
	s.URL = val
}

// SetApp sets the value of App.
func (s *ApplicationGrant) SetApp(val ApplicationGrantApp) {
	s.App = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ApplicationGrant) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ApplicationGrant) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetScopes sets the value of Scopes.
func (s *ApplicationGrant) SetScopes(val []string) {
	s.Scopes = val
}

// SetUser sets the value of User.
func (s *ApplicationGrant) SetUser(val OptNilNullableSimpleUser) {
	s.User = val
}

func (*ApplicationGrant) oAuthAuthorizationsGetGrantRes() {}

type ApplicationGrantApp struct {
	ClientID string  `json:"client_id"`
	Name     string  `json:"name"`
	URL      url.URL `json:"url"`
}

// GetClientID returns the value of ClientID.
func (s *ApplicationGrantApp) GetClientID() string {
	return s.ClientID
}

// GetName returns the value of Name.
func (s *ApplicationGrantApp) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *ApplicationGrantApp) GetURL() url.URL {
	return s.URL
}

// SetClientID sets the value of ClientID.
func (s *ApplicationGrantApp) SetClientID(val string) {
	s.ClientID = val
}

// SetName sets the value of Name.
func (s *ApplicationGrantApp) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *ApplicationGrantApp) SetURL(val url.URL) {
	s.URL = val
}

type AppsAddRepoToInstallationForbidden BasicError

func (*AppsAddRepoToInstallationForbidden) appsAddRepoToInstallationRes() {}

// AppsAddRepoToInstallationNoContent is response for AppsAddRepoToInstallation operation.
type AppsAddRepoToInstallationNoContent struct{}

func (*AppsAddRepoToInstallationNoContent) appsAddRepoToInstallationRes() {}

type AppsAddRepoToInstallationNotFound BasicError

func (*AppsAddRepoToInstallationNotFound) appsAddRepoToInstallationRes() {}

type AppsCheckTokenReq struct {
	// The access_token of the OAuth application.
	AccessToken string `json:"access_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AppsCheckTokenReq) GetAccessToken() string {
	return s.AccessToken
}

// SetAccessToken sets the value of AccessToken.
func (s *AppsCheckTokenReq) SetAccessToken(val string) {
	s.AccessToken = val
}

type AppsCreateContentAttachmentForbidden BasicError

func (*AppsCreateContentAttachmentForbidden) appsCreateContentAttachmentRes() {}

type AppsCreateContentAttachmentGone BasicError

func (*AppsCreateContentAttachmentGone) appsCreateContentAttachmentRes() {}

type AppsCreateContentAttachmentNotFound BasicError

func (*AppsCreateContentAttachmentNotFound) appsCreateContentAttachmentRes() {}

type AppsCreateContentAttachmentReq struct {
	// The title of the attachment.
	Title string `json:"title"`
	// The body of the attachment.
	Body string `json:"body"`
}

// GetTitle returns the value of Title.
func (s *AppsCreateContentAttachmentReq) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *AppsCreateContentAttachmentReq) GetBody() string {
	return s.Body
}

// SetTitle sets the value of Title.
func (s *AppsCreateContentAttachmentReq) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *AppsCreateContentAttachmentReq) SetBody(val string) {
	s.Body = val
}

// Merged schema.
type AppsCreateFromManifestCreated struct {
	// Unique identifier of the GitHub app.
	ID int `json:"id"`
	// The slug name of the GitHub app.
	Slug   OptString             `json:"slug"`
	NodeID string                `json:"node_id"`
	Owner  NilNullableSimpleUser `json:"owner"`
	// The name of the GitHub app.
	Name        string    `json:"name"`
	Description NilString `json:"description"`
	ExternalURL url.URL   `json:"external_url"`
	HTMLURL     url.URL   `json:"html_url"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	// The set of permissions for the GitHub app.
	Permissions AppsCreateFromManifestCreatedPermissions `json:"permissions"`
	// The list of events for the GitHub app.
	Events []string `json:"events"`
	// The number of installations associated with the GitHub app.
	InstallationsCount OptInt `json:"installations_count"`
	// Merged property.
	ClientID string `json:"client_id"`
	// Merged property.
	ClientSecret string `json:"client_secret"`
	// Merged property.
	WebhookSecret NilString `json:"webhook_secret"`
	// Merged property.
	Pem             string `json:"pem"`
	AdditionalProps AppsCreateFromManifestCreatedAdditional
}

// GetID returns the value of ID.
func (s *AppsCreateFromManifestCreated) GetID() int {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *AppsCreateFromManifestCreated) GetSlug() OptString {
	return s.Slug
}

// GetNodeID returns the value of NodeID.
func (s *AppsCreateFromManifestCreated) GetNodeID() string {
	return s.NodeID
}

// GetOwner returns the value of Owner.
func (s *AppsCreateFromManifestCreated) GetOwner() NilNullableSimpleUser {
	return s.Owner
}

// GetName returns the value of Name.
func (s *AppsCreateFromManifestCreated) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AppsCreateFromManifestCreated) GetDescription() NilString {
	return s.Description
}

// GetExternalURL returns the value of ExternalURL.
func (s *AppsCreateFromManifestCreated) GetExternalURL() url.URL {
	return s.ExternalURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *AppsCreateFromManifestCreated) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AppsCreateFromManifestCreated) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AppsCreateFromManifestCreated) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *AppsCreateFromManifestCreated) GetPermissions() AppsCreateFromManifestCreatedPermissions {
	return s.Permissions
}

// GetEvents returns the value of Events.
func (s *AppsCreateFromManifestCreated) GetEvents() []string {
	return s.Events
}

// GetInstallationsCount returns the value of InstallationsCount.
func (s *AppsCreateFromManifestCreated) GetInstallationsCount() OptInt {
	return s.InstallationsCount
}

// GetClientID returns the value of ClientID.
func (s *AppsCreateFromManifestCreated) GetClientID() string {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *AppsCreateFromManifestCreated) GetClientSecret() string {
	return s.ClientSecret
}

// GetWebhookSecret returns the value of WebhookSecret.
func (s *AppsCreateFromManifestCreated) GetWebhookSecret() NilString {
	return s.WebhookSecret
}

// GetPem returns the value of Pem.
func (s *AppsCreateFromManifestCreated) GetPem() string {
	return s.Pem
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *AppsCreateFromManifestCreated) GetAdditionalProps() AppsCreateFromManifestCreatedAdditional {
	return s.AdditionalProps
}

// SetID sets the value of ID.
func (s *AppsCreateFromManifestCreated) SetID(val int) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *AppsCreateFromManifestCreated) SetSlug(val OptString) {
	s.Slug = val
}

// SetNodeID sets the value of NodeID.
func (s *AppsCreateFromManifestCreated) SetNodeID(val string) {
	s.NodeID = val
}

// SetOwner sets the value of Owner.
func (s *AppsCreateFromManifestCreated) SetOwner(val NilNullableSimpleUser) {
	s.Owner = val
}

// SetName sets the value of Name.
func (s *AppsCreateFromManifestCreated) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AppsCreateFromManifestCreated) SetDescription(val NilString) {
	s.Description = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *AppsCreateFromManifestCreated) SetExternalURL(val url.URL) {
	s.ExternalURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *AppsCreateFromManifestCreated) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AppsCreateFromManifestCreated) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AppsCreateFromManifestCreated) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *AppsCreateFromManifestCreated) SetPermissions(val AppsCreateFromManifestCreatedPermissions) {
	s.Permissions = val
}

// SetEvents sets the value of Events.
func (s *AppsCreateFromManifestCreated) SetEvents(val []string) {
	s.Events = val
}

// SetInstallationsCount sets the value of InstallationsCount.
func (s *AppsCreateFromManifestCreated) SetInstallationsCount(val OptInt) {
	s.InstallationsCount = val
}

// SetClientID sets the value of ClientID.
func (s *AppsCreateFromManifestCreated) SetClientID(val string) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *AppsCreateFromManifestCreated) SetClientSecret(val string) {
	s.ClientSecret = val
}

// SetWebhookSecret sets the value of WebhookSecret.
func (s *AppsCreateFromManifestCreated) SetWebhookSecret(val NilString) {
	s.WebhookSecret = val
}

// SetPem sets the value of Pem.
func (s *AppsCreateFromManifestCreated) SetPem(val string) {
	s.Pem = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *AppsCreateFromManifestCreated) SetAdditionalProps(val AppsCreateFromManifestCreatedAdditional) {
	s.AdditionalProps = val
}

func (*AppsCreateFromManifestCreated) appsCreateFromManifestRes() {}

type AppsCreateFromManifestCreatedAdditional map[string]jx.Raw

func (s *AppsCreateFromManifestCreatedAdditional) init() AppsCreateFromManifestCreatedAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The set of permissions for the GitHub app.
type AppsCreateFromManifestCreatedPermissions struct {
	Issues          OptString `json:"issues"`
	Checks          OptString `json:"checks"`
	Metadata        OptString `json:"metadata"`
	Contents        OptString `json:"contents"`
	Deployments     OptString `json:"deployments"`
	AdditionalProps AppsCreateFromManifestCreatedPermissionsAdditional
}

// GetIssues returns the value of Issues.
func (s *AppsCreateFromManifestCreatedPermissions) GetIssues() OptString {
	return s.Issues
}

// GetChecks returns the value of Checks.
func (s *AppsCreateFromManifestCreatedPermissions) GetChecks() OptString {
	return s.Checks
}

// GetMetadata returns the value of Metadata.
func (s *AppsCreateFromManifestCreatedPermissions) GetMetadata() OptString {
	return s.Metadata
}

// GetContents returns the value of Contents.
func (s *AppsCreateFromManifestCreatedPermissions) GetContents() OptString {
	return s.Contents
}

// GetDeployments returns the value of Deployments.
func (s *AppsCreateFromManifestCreatedPermissions) GetDeployments() OptString {
	return s.Deployments
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *AppsCreateFromManifestCreatedPermissions) GetAdditionalProps() AppsCreateFromManifestCreatedPermissionsAdditional {
	return s.AdditionalProps
}

// SetIssues sets the value of Issues.
func (s *AppsCreateFromManifestCreatedPermissions) SetIssues(val OptString) {
	s.Issues = val
}

// SetChecks sets the value of Checks.
func (s *AppsCreateFromManifestCreatedPermissions) SetChecks(val OptString) {
	s.Checks = val
}

// SetMetadata sets the value of Metadata.
func (s *AppsCreateFromManifestCreatedPermissions) SetMetadata(val OptString) {
	s.Metadata = val
}

// SetContents sets the value of Contents.
func (s *AppsCreateFromManifestCreatedPermissions) SetContents(val OptString) {
	s.Contents = val
}

// SetDeployments sets the value of Deployments.
func (s *AppsCreateFromManifestCreatedPermissions) SetDeployments(val OptString) {
	s.Deployments = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *AppsCreateFromManifestCreatedPermissions) SetAdditionalProps(val AppsCreateFromManifestCreatedPermissionsAdditional) {
	s.AdditionalProps = val
}

type AppsCreateFromManifestCreatedPermissionsAdditional map[string]string

func (s *AppsCreateFromManifestCreatedPermissionsAdditional) init() AppsCreateFromManifestCreatedPermissionsAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type AppsCreateFromManifestReq struct{}

type AppsCreateInstallationAccessTokenForbidden BasicError

func (*AppsCreateInstallationAccessTokenForbidden) appsCreateInstallationAccessTokenRes() {}

type AppsCreateInstallationAccessTokenNotFound BasicError

func (*AppsCreateInstallationAccessTokenNotFound) appsCreateInstallationAccessTokenRes() {}

type AppsCreateInstallationAccessTokenReq struct {
	// List of repository names that the token should have access to.
	Repositories []string `json:"repositories"`
	// List of repository IDs that the token should have access to.
	RepositoryIds []int             `json:"repository_ids"`
	Permissions   OptAppPermissions `json:"permissions"`
}

// GetRepositories returns the value of Repositories.
func (s *AppsCreateInstallationAccessTokenReq) GetRepositories() []string {
	return s.Repositories
}

// GetRepositoryIds returns the value of RepositoryIds.
func (s *AppsCreateInstallationAccessTokenReq) GetRepositoryIds() []int {
	return s.RepositoryIds
}

// GetPermissions returns the value of Permissions.
func (s *AppsCreateInstallationAccessTokenReq) GetPermissions() OptAppPermissions {
	return s.Permissions
}

// SetRepositories sets the value of Repositories.
func (s *AppsCreateInstallationAccessTokenReq) SetRepositories(val []string) {
	s.Repositories = val
}

// SetRepositoryIds sets the value of RepositoryIds.
func (s *AppsCreateInstallationAccessTokenReq) SetRepositoryIds(val []int) {
	s.RepositoryIds = val
}

// SetPermissions sets the value of Permissions.
func (s *AppsCreateInstallationAccessTokenReq) SetPermissions(val OptAppPermissions) {
	s.Permissions = val
}

type AppsCreateInstallationAccessTokenUnauthorized BasicError

func (*AppsCreateInstallationAccessTokenUnauthorized) appsCreateInstallationAccessTokenRes() {}

// AppsDeleteAuthorizationNoContent is response for AppsDeleteAuthorization operation.
type AppsDeleteAuthorizationNoContent struct{}

func (*AppsDeleteAuthorizationNoContent) appsDeleteAuthorizationRes() {}

type AppsDeleteAuthorizationReq struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string `json:"access_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AppsDeleteAuthorizationReq) GetAccessToken() string {
	return s.AccessToken
}

// SetAccessToken sets the value of AccessToken.
func (s *AppsDeleteAuthorizationReq) SetAccessToken(val string) {
	s.AccessToken = val
}

// AppsDeleteInstallationNoContent is response for AppsDeleteInstallation operation.
type AppsDeleteInstallationNoContent struct{}

func (*AppsDeleteInstallationNoContent) appsDeleteInstallationRes() {}

// AppsDeleteTokenNoContent is response for AppsDeleteToken operation.
type AppsDeleteTokenNoContent struct{}

func (*AppsDeleteTokenNoContent) appsDeleteTokenRes() {}

type AppsDeleteTokenReq struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string `json:"access_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AppsDeleteTokenReq) GetAccessToken() string {
	return s.AccessToken
}

// SetAccessToken sets the value of AccessToken.
func (s *AppsDeleteTokenReq) SetAccessToken(val string) {
	s.AccessToken = val
}

type AppsGetBySlugForbidden BasicError

func (*AppsGetBySlugForbidden) appsGetBySlugRes() {}

type AppsGetBySlugNotFound BasicError

func (*AppsGetBySlugNotFound) appsGetBySlugRes() {}

type AppsGetSubscriptionPlanForAccountNotFound BasicError

func (*AppsGetSubscriptionPlanForAccountNotFound) appsGetSubscriptionPlanForAccountRes() {}

// AppsGetSubscriptionPlanForAccountStubbedNotFound is response for AppsGetSubscriptionPlanForAccountStubbed operation.
type AppsGetSubscriptionPlanForAccountStubbedNotFound struct{}

func (*AppsGetSubscriptionPlanForAccountStubbedNotFound) appsGetSubscriptionPlanForAccountStubbedRes() {
}

type AppsGetSubscriptionPlanForAccountUnauthorized BasicError

func (*AppsGetSubscriptionPlanForAccountUnauthorized) appsGetSubscriptionPlanForAccountRes() {}

type AppsListAccountsForPlanDirection string

const (
	AppsListAccountsForPlanDirectionAsc  AppsListAccountsForPlanDirection = "asc"
	AppsListAccountsForPlanDirectionDesc AppsListAccountsForPlanDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppsListAccountsForPlanDirection) MarshalText() ([]byte, error) {
	switch s {
	case AppsListAccountsForPlanDirectionAsc:
		return []byte(s), nil
	case AppsListAccountsForPlanDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppsListAccountsForPlanDirection) UnmarshalText(data []byte) error {
	switch AppsListAccountsForPlanDirection(data) {
	case AppsListAccountsForPlanDirectionAsc:
		*s = AppsListAccountsForPlanDirectionAsc
		return nil
	case AppsListAccountsForPlanDirectionDesc:
		*s = AppsListAccountsForPlanDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AppsListAccountsForPlanNotFound BasicError

func (*AppsListAccountsForPlanNotFound) appsListAccountsForPlanRes() {}

// AppsListAccountsForPlanOKHeaders wraps []MarketplacePurchase with response headers.
type AppsListAccountsForPlanOKHeaders struct {
	Link     OptString
	Response []MarketplacePurchase
}

// GetLink returns the value of Link.
func (s *AppsListAccountsForPlanOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListAccountsForPlanOKHeaders) GetResponse() []MarketplacePurchase {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListAccountsForPlanOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListAccountsForPlanOKHeaders) SetResponse(val []MarketplacePurchase) {
	s.Response = val
}

func (*AppsListAccountsForPlanOKHeaders) appsListAccountsForPlanRes() {}

type AppsListAccountsForPlanSort string

const (
	AppsListAccountsForPlanSortCreated AppsListAccountsForPlanSort = "created"
	AppsListAccountsForPlanSortUpdated AppsListAccountsForPlanSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppsListAccountsForPlanSort) MarshalText() ([]byte, error) {
	switch s {
	case AppsListAccountsForPlanSortCreated:
		return []byte(s), nil
	case AppsListAccountsForPlanSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppsListAccountsForPlanSort) UnmarshalText(data []byte) error {
	switch AppsListAccountsForPlanSort(data) {
	case AppsListAccountsForPlanSortCreated:
		*s = AppsListAccountsForPlanSortCreated
		return nil
	case AppsListAccountsForPlanSortUpdated:
		*s = AppsListAccountsForPlanSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AppsListAccountsForPlanStubbedDirection string

const (
	AppsListAccountsForPlanStubbedDirectionAsc  AppsListAccountsForPlanStubbedDirection = "asc"
	AppsListAccountsForPlanStubbedDirectionDesc AppsListAccountsForPlanStubbedDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppsListAccountsForPlanStubbedDirection) MarshalText() ([]byte, error) {
	switch s {
	case AppsListAccountsForPlanStubbedDirectionAsc:
		return []byte(s), nil
	case AppsListAccountsForPlanStubbedDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppsListAccountsForPlanStubbedDirection) UnmarshalText(data []byte) error {
	switch AppsListAccountsForPlanStubbedDirection(data) {
	case AppsListAccountsForPlanStubbedDirectionAsc:
		*s = AppsListAccountsForPlanStubbedDirectionAsc
		return nil
	case AppsListAccountsForPlanStubbedDirectionDesc:
		*s = AppsListAccountsForPlanStubbedDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AppsListAccountsForPlanStubbedOKHeaders wraps []MarketplacePurchase with response headers.
type AppsListAccountsForPlanStubbedOKHeaders struct {
	Link     OptString
	Response []MarketplacePurchase
}

// GetLink returns the value of Link.
func (s *AppsListAccountsForPlanStubbedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListAccountsForPlanStubbedOKHeaders) GetResponse() []MarketplacePurchase {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListAccountsForPlanStubbedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListAccountsForPlanStubbedOKHeaders) SetResponse(val []MarketplacePurchase) {
	s.Response = val
}

func (*AppsListAccountsForPlanStubbedOKHeaders) appsListAccountsForPlanStubbedRes() {}

type AppsListAccountsForPlanStubbedSort string

const (
	AppsListAccountsForPlanStubbedSortCreated AppsListAccountsForPlanStubbedSort = "created"
	AppsListAccountsForPlanStubbedSortUpdated AppsListAccountsForPlanStubbedSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s AppsListAccountsForPlanStubbedSort) MarshalText() ([]byte, error) {
	switch s {
	case AppsListAccountsForPlanStubbedSortCreated:
		return []byte(s), nil
	case AppsListAccountsForPlanStubbedSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppsListAccountsForPlanStubbedSort) UnmarshalText(data []byte) error {
	switch AppsListAccountsForPlanStubbedSort(data) {
	case AppsListAccountsForPlanStubbedSortCreated:
		*s = AppsListAccountsForPlanStubbedSortCreated
		return nil
	case AppsListAccountsForPlanStubbedSortUpdated:
		*s = AppsListAccountsForPlanStubbedSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AppsListAccountsForPlanUnauthorized BasicError

func (*AppsListAccountsForPlanUnauthorized) appsListAccountsForPlanRes() {}

type AppsListInstallationReposForAuthenticatedUserForbidden BasicError

func (*AppsListInstallationReposForAuthenticatedUserForbidden) appsListInstallationReposForAuthenticatedUserRes() {
}

type AppsListInstallationReposForAuthenticatedUserNotFound BasicError

func (*AppsListInstallationReposForAuthenticatedUserNotFound) appsListInstallationReposForAuthenticatedUserRes() {
}

type AppsListInstallationReposForAuthenticatedUserOK struct {
	TotalCount          int          `json:"total_count"`
	RepositorySelection OptString    `json:"repository_selection"`
	Repositories        []Repository `json:"repositories"`
}

// GetTotalCount returns the value of TotalCount.
func (s *AppsListInstallationReposForAuthenticatedUserOK) GetTotalCount() int {
	return s.TotalCount
}

// GetRepositorySelection returns the value of RepositorySelection.
func (s *AppsListInstallationReposForAuthenticatedUserOK) GetRepositorySelection() OptString {
	return s.RepositorySelection
}

// GetRepositories returns the value of Repositories.
func (s *AppsListInstallationReposForAuthenticatedUserOK) GetRepositories() []Repository {
	return s.Repositories
}

// SetTotalCount sets the value of TotalCount.
func (s *AppsListInstallationReposForAuthenticatedUserOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetRepositorySelection sets the value of RepositorySelection.
func (s *AppsListInstallationReposForAuthenticatedUserOK) SetRepositorySelection(val OptString) {
	s.RepositorySelection = val
}

// SetRepositories sets the value of Repositories.
func (s *AppsListInstallationReposForAuthenticatedUserOK) SetRepositories(val []Repository) {
	s.Repositories = val
}

// AppsListInstallationReposForAuthenticatedUserOKHeaders wraps AppsListInstallationReposForAuthenticatedUserOK with response headers.
type AppsListInstallationReposForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response AppsListInstallationReposForAuthenticatedUserOK
}

// GetLink returns the value of Link.
func (s *AppsListInstallationReposForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListInstallationReposForAuthenticatedUserOKHeaders) GetResponse() AppsListInstallationReposForAuthenticatedUserOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListInstallationReposForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListInstallationReposForAuthenticatedUserOKHeaders) SetResponse(val AppsListInstallationReposForAuthenticatedUserOK) {
	s.Response = val
}

func (*AppsListInstallationReposForAuthenticatedUserOKHeaders) appsListInstallationReposForAuthenticatedUserRes() {
}

type AppsListPlansNotFound BasicError

func (*AppsListPlansNotFound) appsListPlansRes() {}

// AppsListPlansOKHeaders wraps []MarketplaceListingPlan with response headers.
type AppsListPlansOKHeaders struct {
	Link     OptString
	Response []MarketplaceListingPlan
}

// GetLink returns the value of Link.
func (s *AppsListPlansOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListPlansOKHeaders) GetResponse() []MarketplaceListingPlan {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListPlansOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListPlansOKHeaders) SetResponse(val []MarketplaceListingPlan) {
	s.Response = val
}

func (*AppsListPlansOKHeaders) appsListPlansRes() {}

// AppsListPlansStubbedOKHeaders wraps []MarketplaceListingPlan with response headers.
type AppsListPlansStubbedOKHeaders struct {
	Link     OptString
	Response []MarketplaceListingPlan
}

// GetLink returns the value of Link.
func (s *AppsListPlansStubbedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListPlansStubbedOKHeaders) GetResponse() []MarketplaceListingPlan {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListPlansStubbedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListPlansStubbedOKHeaders) SetResponse(val []MarketplaceListingPlan) {
	s.Response = val
}

func (*AppsListPlansStubbedOKHeaders) appsListPlansStubbedRes() {}

type AppsListPlansUnauthorized BasicError

func (*AppsListPlansUnauthorized) appsListPlansRes() {}

type AppsListReposAccessibleToInstallationForbidden BasicError

func (*AppsListReposAccessibleToInstallationForbidden) appsListReposAccessibleToInstallationRes() {}

type AppsListReposAccessibleToInstallationOK struct {
	TotalCount          int          `json:"total_count"`
	Repositories        []Repository `json:"repositories"`
	RepositorySelection OptString    `json:"repository_selection"`
}

// GetTotalCount returns the value of TotalCount.
func (s *AppsListReposAccessibleToInstallationOK) GetTotalCount() int {
	return s.TotalCount
}

// GetRepositories returns the value of Repositories.
func (s *AppsListReposAccessibleToInstallationOK) GetRepositories() []Repository {
	return s.Repositories
}

// GetRepositorySelection returns the value of RepositorySelection.
func (s *AppsListReposAccessibleToInstallationOK) GetRepositorySelection() OptString {
	return s.RepositorySelection
}

// SetTotalCount sets the value of TotalCount.
func (s *AppsListReposAccessibleToInstallationOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetRepositories sets the value of Repositories.
func (s *AppsListReposAccessibleToInstallationOK) SetRepositories(val []Repository) {
	s.Repositories = val
}

// SetRepositorySelection sets the value of RepositorySelection.
func (s *AppsListReposAccessibleToInstallationOK) SetRepositorySelection(val OptString) {
	s.RepositorySelection = val
}

// AppsListReposAccessibleToInstallationOKHeaders wraps AppsListReposAccessibleToInstallationOK with response headers.
type AppsListReposAccessibleToInstallationOKHeaders struct {
	Link     OptString
	Response AppsListReposAccessibleToInstallationOK
}

// GetLink returns the value of Link.
func (s *AppsListReposAccessibleToInstallationOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListReposAccessibleToInstallationOKHeaders) GetResponse() AppsListReposAccessibleToInstallationOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListReposAccessibleToInstallationOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListReposAccessibleToInstallationOKHeaders) SetResponse(val AppsListReposAccessibleToInstallationOK) {
	s.Response = val
}

func (*AppsListReposAccessibleToInstallationOKHeaders) appsListReposAccessibleToInstallationRes() {}

type AppsListReposAccessibleToInstallationUnauthorized BasicError

func (*AppsListReposAccessibleToInstallationUnauthorized) appsListReposAccessibleToInstallationRes() {
}

type AppsListSubscriptionsForAuthenticatedUserNotFound BasicError

func (*AppsListSubscriptionsForAuthenticatedUserNotFound) appsListSubscriptionsForAuthenticatedUserRes() {
}

// AppsListSubscriptionsForAuthenticatedUserOKHeaders wraps []UserMarketplacePurchase with response headers.
type AppsListSubscriptionsForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []UserMarketplacePurchase
}

// GetLink returns the value of Link.
func (s *AppsListSubscriptionsForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListSubscriptionsForAuthenticatedUserOKHeaders) GetResponse() []UserMarketplacePurchase {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListSubscriptionsForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListSubscriptionsForAuthenticatedUserOKHeaders) SetResponse(val []UserMarketplacePurchase) {
	s.Response = val
}

func (*AppsListSubscriptionsForAuthenticatedUserOKHeaders) appsListSubscriptionsForAuthenticatedUserRes() {
}

// AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders wraps []UserMarketplacePurchase with response headers.
type AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders struct {
	Link     OptString
	Response []UserMarketplacePurchase
}

// GetLink returns the value of Link.
func (s *AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders) GetResponse() []UserMarketplacePurchase {
	return s.Response
}

// SetLink sets the value of Link.
func (s *AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders) SetResponse(val []UserMarketplacePurchase) {
	s.Response = val
}

func (*AppsListSubscriptionsForAuthenticatedUserStubbedOKHeaders) appsListSubscriptionsForAuthenticatedUserStubbedRes() {
}

type AppsListSubscriptionsForAuthenticatedUserUnauthorized BasicError

func (*AppsListSubscriptionsForAuthenticatedUserUnauthorized) appsListSubscriptionsForAuthenticatedUserRes() {
}

type AppsListWebhookDeliveriesOKApplicationJSON []HookDeliveryItem

func (*AppsListWebhookDeliveriesOKApplicationJSON) appsListWebhookDeliveriesRes() {}

type AppsRemoveRepoFromInstallationForbidden BasicError

func (*AppsRemoveRepoFromInstallationForbidden) appsRemoveRepoFromInstallationRes() {}

// AppsRemoveRepoFromInstallationNoContent is response for AppsRemoveRepoFromInstallation operation.
type AppsRemoveRepoFromInstallationNoContent struct{}

func (*AppsRemoveRepoFromInstallationNoContent) appsRemoveRepoFromInstallationRes() {}

type AppsRemoveRepoFromInstallationNotFound BasicError

func (*AppsRemoveRepoFromInstallationNotFound) appsRemoveRepoFromInstallationRes() {}

type AppsResetTokenReq struct {
	// The access_token of the OAuth application.
	AccessToken string `json:"access_token"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AppsResetTokenReq) GetAccessToken() string {
	return s.AccessToken
}

// SetAccessToken sets the value of AccessToken.
func (s *AppsResetTokenReq) SetAccessToken(val string) {
	s.AccessToken = val
}

// AppsRevokeInstallationAccessTokenNoContent is response for AppsRevokeInstallationAccessToken operation.
type AppsRevokeInstallationAccessTokenNoContent struct{}

type AppsScopeTokenForbidden BasicError

func (*AppsScopeTokenForbidden) appsScopeTokenRes() {}

type AppsScopeTokenNotFound BasicError

func (*AppsScopeTokenNotFound) appsScopeTokenRes() {}

type AppsScopeTokenReq struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string `json:"access_token"`
	// The name of the user or organization to scope the user-to-server access token to. **Required**
	// unless `target_id` is specified.
	Target OptString `json:"target"`
	// The ID of the user or organization to scope the user-to-server access token to. **Required**
	// unless `target` is specified.
	TargetID OptInt `json:"target_id"`
	// The list of repository names to scope the user-to-server access token to. `repositories` may not
	// be specified if `repository_ids` is specified.
	Repositories []string `json:"repositories"`
	// The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not
	// be specified if `repositories` is specified.
	RepositoryIds []int             `json:"repository_ids"`
	Permissions   OptAppPermissions `json:"permissions"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AppsScopeTokenReq) GetAccessToken() string {
	return s.AccessToken
}

// GetTarget returns the value of Target.
func (s *AppsScopeTokenReq) GetTarget() OptString {
	return s.Target
}

// GetTargetID returns the value of TargetID.
func (s *AppsScopeTokenReq) GetTargetID() OptInt {
	return s.TargetID
}

// GetRepositories returns the value of Repositories.
func (s *AppsScopeTokenReq) GetRepositories() []string {
	return s.Repositories
}

// GetRepositoryIds returns the value of RepositoryIds.
func (s *AppsScopeTokenReq) GetRepositoryIds() []int {
	return s.RepositoryIds
}

// GetPermissions returns the value of Permissions.
func (s *AppsScopeTokenReq) GetPermissions() OptAppPermissions {
	return s.Permissions
}

// SetAccessToken sets the value of AccessToken.
func (s *AppsScopeTokenReq) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetTarget sets the value of Target.
func (s *AppsScopeTokenReq) SetTarget(val OptString) {
	s.Target = val
}

// SetTargetID sets the value of TargetID.
func (s *AppsScopeTokenReq) SetTargetID(val OptInt) {
	s.TargetID = val
}

// SetRepositories sets the value of Repositories.
func (s *AppsScopeTokenReq) SetRepositories(val []string) {
	s.Repositories = val
}

// SetRepositoryIds sets the value of RepositoryIds.
func (s *AppsScopeTokenReq) SetRepositoryIds(val []int) {
	s.RepositoryIds = val
}

// SetPermissions sets the value of Permissions.
func (s *AppsScopeTokenReq) SetPermissions(val OptAppPermissions) {
	s.Permissions = val
}

type AppsScopeTokenUnauthorized BasicError

func (*AppsScopeTokenUnauthorized) appsScopeTokenRes() {}

// AppsSuspendInstallationNoContent is response for AppsSuspendInstallation operation.
type AppsSuspendInstallationNoContent struct{}

func (*AppsSuspendInstallationNoContent) appsSuspendInstallationRes() {}

// AppsUnsuspendInstallationNoContent is response for AppsUnsuspendInstallation operation.
type AppsUnsuspendInstallationNoContent struct{}

func (*AppsUnsuspendInstallationNoContent) appsUnsuspendInstallationRes() {}

type AppsUpdateWebhookConfigForAppReq struct {
	URL         OptWebhookConfigURL         `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
}

// GetURL returns the value of URL.
func (s *AppsUpdateWebhookConfigForAppReq) GetURL() OptWebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *AppsUpdateWebhookConfigForAppReq) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *AppsUpdateWebhookConfigForAppReq) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *AppsUpdateWebhookConfigForAppReq) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// SetURL sets the value of URL.
func (s *AppsUpdateWebhookConfigForAppReq) SetURL(val OptWebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *AppsUpdateWebhookConfigForAppReq) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *AppsUpdateWebhookConfigForAppReq) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *AppsUpdateWebhookConfigForAppReq) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

// An artifact.
// Ref: #/components/schemas/artifact
type Artifact struct {
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// The name of the artifact.
	Name string `json:"name"`
	// The size in bytes of the artifact.
	SizeInBytes        int    `json:"size_in_bytes"`
	URL                string `json:"url"`
	ArchiveDownloadURL string `json:"archive_download_url"`
	// Whether or not the artifact has expired.
	Expired   bool        `json:"expired"`
	CreatedAt NilDateTime `json:"created_at"`
	ExpiresAt NilDateTime `json:"expires_at"`
	UpdatedAt NilDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Artifact) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Artifact) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *Artifact) GetName() string {
	return s.Name
}

// GetSizeInBytes returns the value of SizeInBytes.
func (s *Artifact) GetSizeInBytes() int {
	return s.SizeInBytes
}

// GetURL returns the value of URL.
func (s *Artifact) GetURL() string {
	return s.URL
}

// GetArchiveDownloadURL returns the value of ArchiveDownloadURL.
func (s *Artifact) GetArchiveDownloadURL() string {
	return s.ArchiveDownloadURL
}

// GetExpired returns the value of Expired.
func (s *Artifact) GetExpired() bool {
	return s.Expired
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Artifact) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *Artifact) GetExpiresAt() NilDateTime {
	return s.ExpiresAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Artifact) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Artifact) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Artifact) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *Artifact) SetName(val string) {
	s.Name = val
}

// SetSizeInBytes sets the value of SizeInBytes.
func (s *Artifact) SetSizeInBytes(val int) {
	s.SizeInBytes = val
}

// SetURL sets the value of URL.
func (s *Artifact) SetURL(val string) {
	s.URL = val
}

// SetArchiveDownloadURL sets the value of ArchiveDownloadURL.
func (s *Artifact) SetArchiveDownloadURL(val string) {
	s.ArchiveDownloadURL = val
}

// SetExpired sets the value of Expired.
func (s *Artifact) SetExpired(val bool) {
	s.Expired = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Artifact) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *Artifact) SetExpiresAt(val NilDateTime) {
	s.ExpiresAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Artifact) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/audit-log-event
type AuditLogEvent struct {
	// The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.
	// org/wiki/Unix_time).
	Timestamp OptInt `json:"@timestamp"`
	// The name of the action that was performed, for example `user.login` or `repo.create`.
	Action    OptString `json:"action"`
	Active    OptBool   `json:"active"`
	ActiveWas OptBool   `json:"active_was"`
	// The actor who performed the action.
	Actor OptString `json:"actor"`
	// The id of the actor who performed the action.
	ActorID       OptInt                        `json:"actor_id"`
	ActorLocation OptAuditLogEventActorLocation `json:"actor_location"`
	Data          OptAuditLogEventData          `json:"data"`
	OrgID         OptInt                        `json:"org_id"`
	// The username of the account being blocked.
	BlockedUser OptString `json:"blocked_user"`
	Business    OptString `json:"business"`
	Config      []jx.Raw  `json:"config"`
	ConfigWas   []jx.Raw  `json:"config_was"`
	ContentType OptString `json:"content_type"`
	// The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.
	// org/wiki/Unix_time).
	CreatedAt            OptInt    `json:"created_at"`
	DeployKeyFingerprint OptString `json:"deploy_key_fingerprint"`
	// A unique identifier for an audit event.
	DocumentID          OptString `json:"_document_id"`
	Emoji               OptString `json:"emoji"`
	Events              []jx.Raw  `json:"events"`
	EventsWere          []jx.Raw  `json:"events_were"`
	Explanation         OptString `json:"explanation"`
	Fingerprint         OptString `json:"fingerprint"`
	HookID              OptInt    `json:"hook_id"`
	LimitedAvailability OptBool   `json:"limited_availability"`
	Message             OptString `json:"message"`
	Name                OptString `json:"name"`
	OldUser             OptString `json:"old_user"`
	OpensshPublicKey    OptString `json:"openssh_public_key"`
	Org                 OptString `json:"org"`
	PreviousVisibility  OptString `json:"previous_visibility"`
	ReadOnly            OptBool   `json:"read_only"`
	// The name of the repository.
	Repo OptString `json:"repo"`
	// The name of the repository.
	Repository       OptString `json:"repository"`
	RepositoryPublic OptBool   `json:"repository_public"`
	TargetLogin      OptString `json:"target_login"`
	Team             OptString `json:"team"`
	// The type of protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocol OptInt `json:"transport_protocol"`
	// A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocolName OptString `json:"transport_protocol_name"`
	// The user that was affected by the action performed (if available).
	User OptString `json:"user"`
	// The repository visibility, for example `public` or `private`.
	Visibility OptString `json:"visibility"`
}

// GetTimestamp returns the value of Timestamp.
func (s *AuditLogEvent) GetTimestamp() OptInt {
	return s.Timestamp
}

// GetAction returns the value of Action.
func (s *AuditLogEvent) GetAction() OptString {
	return s.Action
}

// GetActive returns the value of Active.
func (s *AuditLogEvent) GetActive() OptBool {
	return s.Active
}

// GetActiveWas returns the value of ActiveWas.
func (s *AuditLogEvent) GetActiveWas() OptBool {
	return s.ActiveWas
}

// GetActor returns the value of Actor.
func (s *AuditLogEvent) GetActor() OptString {
	return s.Actor
}

// GetActorID returns the value of ActorID.
func (s *AuditLogEvent) GetActorID() OptInt {
	return s.ActorID
}

// GetActorLocation returns the value of ActorLocation.
func (s *AuditLogEvent) GetActorLocation() OptAuditLogEventActorLocation {
	return s.ActorLocation
}

// GetData returns the value of Data.
func (s *AuditLogEvent) GetData() OptAuditLogEventData {
	return s.Data
}

// GetOrgID returns the value of OrgID.
func (s *AuditLogEvent) GetOrgID() OptInt {
	return s.OrgID
}

// GetBlockedUser returns the value of BlockedUser.
func (s *AuditLogEvent) GetBlockedUser() OptString {
	return s.BlockedUser
}

// GetBusiness returns the value of Business.
func (s *AuditLogEvent) GetBusiness() OptString {
	return s.Business
}

// GetConfig returns the value of Config.
func (s *AuditLogEvent) GetConfig() []jx.Raw {
	return s.Config
}

// GetConfigWas returns the value of ConfigWas.
func (s *AuditLogEvent) GetConfigWas() []jx.Raw {
	return s.ConfigWas
}

// GetContentType returns the value of ContentType.
func (s *AuditLogEvent) GetContentType() OptString {
	return s.ContentType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AuditLogEvent) GetCreatedAt() OptInt {
	return s.CreatedAt
}

// GetDeployKeyFingerprint returns the value of DeployKeyFingerprint.
func (s *AuditLogEvent) GetDeployKeyFingerprint() OptString {
	return s.DeployKeyFingerprint
}

// GetDocumentID returns the value of DocumentID.
func (s *AuditLogEvent) GetDocumentID() OptString {
	return s.DocumentID
}

// GetEmoji returns the value of Emoji.
func (s *AuditLogEvent) GetEmoji() OptString {
	return s.Emoji
}

// GetEvents returns the value of Events.
func (s *AuditLogEvent) GetEvents() []jx.Raw {
	return s.Events
}

// GetEventsWere returns the value of EventsWere.
func (s *AuditLogEvent) GetEventsWere() []jx.Raw {
	return s.EventsWere
}

// GetExplanation returns the value of Explanation.
func (s *AuditLogEvent) GetExplanation() OptString {
	return s.Explanation
}

// GetFingerprint returns the value of Fingerprint.
func (s *AuditLogEvent) GetFingerprint() OptString {
	return s.Fingerprint
}

// GetHookID returns the value of HookID.
func (s *AuditLogEvent) GetHookID() OptInt {
	return s.HookID
}

// GetLimitedAvailability returns the value of LimitedAvailability.
func (s *AuditLogEvent) GetLimitedAvailability() OptBool {
	return s.LimitedAvailability
}

// GetMessage returns the value of Message.
func (s *AuditLogEvent) GetMessage() OptString {
	return s.Message
}

// GetName returns the value of Name.
func (s *AuditLogEvent) GetName() OptString {
	return s.Name
}

// GetOldUser returns the value of OldUser.
func (s *AuditLogEvent) GetOldUser() OptString {
	return s.OldUser
}

// GetOpensshPublicKey returns the value of OpensshPublicKey.
func (s *AuditLogEvent) GetOpensshPublicKey() OptString {
	return s.OpensshPublicKey
}

// GetOrg returns the value of Org.
func (s *AuditLogEvent) GetOrg() OptString {
	return s.Org
}

// GetPreviousVisibility returns the value of PreviousVisibility.
func (s *AuditLogEvent) GetPreviousVisibility() OptString {
	return s.PreviousVisibility
}

// GetReadOnly returns the value of ReadOnly.
func (s *AuditLogEvent) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetRepo returns the value of Repo.
func (s *AuditLogEvent) GetRepo() OptString {
	return s.Repo
}

// GetRepository returns the value of Repository.
func (s *AuditLogEvent) GetRepository() OptString {
	return s.Repository
}

// GetRepositoryPublic returns the value of RepositoryPublic.
func (s *AuditLogEvent) GetRepositoryPublic() OptBool {
	return s.RepositoryPublic
}

// GetTargetLogin returns the value of TargetLogin.
func (s *AuditLogEvent) GetTargetLogin() OptString {
	return s.TargetLogin
}

// GetTeam returns the value of Team.
func (s *AuditLogEvent) GetTeam() OptString {
	return s.Team
}

// GetTransportProtocol returns the value of TransportProtocol.
func (s *AuditLogEvent) GetTransportProtocol() OptInt {
	return s.TransportProtocol
}

// GetTransportProtocolName returns the value of TransportProtocolName.
func (s *AuditLogEvent) GetTransportProtocolName() OptString {
	return s.TransportProtocolName
}

// GetUser returns the value of User.
func (s *AuditLogEvent) GetUser() OptString {
	return s.User
}

// GetVisibility returns the value of Visibility.
func (s *AuditLogEvent) GetVisibility() OptString {
	return s.Visibility
}

// SetTimestamp sets the value of Timestamp.
func (s *AuditLogEvent) SetTimestamp(val OptInt) {
	s.Timestamp = val
}

// SetAction sets the value of Action.
func (s *AuditLogEvent) SetAction(val OptString) {
	s.Action = val
}

// SetActive sets the value of Active.
func (s *AuditLogEvent) SetActive(val OptBool) {
	s.Active = val
}

// SetActiveWas sets the value of ActiveWas.
func (s *AuditLogEvent) SetActiveWas(val OptBool) {
	s.ActiveWas = val
}

// SetActor sets the value of Actor.
func (s *AuditLogEvent) SetActor(val OptString) {
	s.Actor = val
}

// SetActorID sets the value of ActorID.
func (s *AuditLogEvent) SetActorID(val OptInt) {
	s.ActorID = val
}

// SetActorLocation sets the value of ActorLocation.
func (s *AuditLogEvent) SetActorLocation(val OptAuditLogEventActorLocation) {
	s.ActorLocation = val
}

// SetData sets the value of Data.
func (s *AuditLogEvent) SetData(val OptAuditLogEventData) {
	s.Data = val
}

// SetOrgID sets the value of OrgID.
func (s *AuditLogEvent) SetOrgID(val OptInt) {
	s.OrgID = val
}

// SetBlockedUser sets the value of BlockedUser.
func (s *AuditLogEvent) SetBlockedUser(val OptString) {
	s.BlockedUser = val
}

// SetBusiness sets the value of Business.
func (s *AuditLogEvent) SetBusiness(val OptString) {
	s.Business = val
}

// SetConfig sets the value of Config.
func (s *AuditLogEvent) SetConfig(val []jx.Raw) {
	s.Config = val
}

// SetConfigWas sets the value of ConfigWas.
func (s *AuditLogEvent) SetConfigWas(val []jx.Raw) {
	s.ConfigWas = val
}

// SetContentType sets the value of ContentType.
func (s *AuditLogEvent) SetContentType(val OptString) {
	s.ContentType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AuditLogEvent) SetCreatedAt(val OptInt) {
	s.CreatedAt = val
}

// SetDeployKeyFingerprint sets the value of DeployKeyFingerprint.
func (s *AuditLogEvent) SetDeployKeyFingerprint(val OptString) {
	s.DeployKeyFingerprint = val
}

// SetDocumentID sets the value of DocumentID.
func (s *AuditLogEvent) SetDocumentID(val OptString) {
	s.DocumentID = val
}

// SetEmoji sets the value of Emoji.
func (s *AuditLogEvent) SetEmoji(val OptString) {
	s.Emoji = val
}

// SetEvents sets the value of Events.
func (s *AuditLogEvent) SetEvents(val []jx.Raw) {
	s.Events = val
}

// SetEventsWere sets the value of EventsWere.
func (s *AuditLogEvent) SetEventsWere(val []jx.Raw) {
	s.EventsWere = val
}

// SetExplanation sets the value of Explanation.
func (s *AuditLogEvent) SetExplanation(val OptString) {
	s.Explanation = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *AuditLogEvent) SetFingerprint(val OptString) {
	s.Fingerprint = val
}

// SetHookID sets the value of HookID.
func (s *AuditLogEvent) SetHookID(val OptInt) {
	s.HookID = val
}

// SetLimitedAvailability sets the value of LimitedAvailability.
func (s *AuditLogEvent) SetLimitedAvailability(val OptBool) {
	s.LimitedAvailability = val
}

// SetMessage sets the value of Message.
func (s *AuditLogEvent) SetMessage(val OptString) {
	s.Message = val
}

// SetName sets the value of Name.
func (s *AuditLogEvent) SetName(val OptString) {
	s.Name = val
}

// SetOldUser sets the value of OldUser.
func (s *AuditLogEvent) SetOldUser(val OptString) {
	s.OldUser = val
}

// SetOpensshPublicKey sets the value of OpensshPublicKey.
func (s *AuditLogEvent) SetOpensshPublicKey(val OptString) {
	s.OpensshPublicKey = val
}

// SetOrg sets the value of Org.
func (s *AuditLogEvent) SetOrg(val OptString) {
	s.Org = val
}

// SetPreviousVisibility sets the value of PreviousVisibility.
func (s *AuditLogEvent) SetPreviousVisibility(val OptString) {
	s.PreviousVisibility = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *AuditLogEvent) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetRepo sets the value of Repo.
func (s *AuditLogEvent) SetRepo(val OptString) {
	s.Repo = val
}

// SetRepository sets the value of Repository.
func (s *AuditLogEvent) SetRepository(val OptString) {
	s.Repository = val
}

// SetRepositoryPublic sets the value of RepositoryPublic.
func (s *AuditLogEvent) SetRepositoryPublic(val OptBool) {
	s.RepositoryPublic = val
}

// SetTargetLogin sets the value of TargetLogin.
func (s *AuditLogEvent) SetTargetLogin(val OptString) {
	s.TargetLogin = val
}

// SetTeam sets the value of Team.
func (s *AuditLogEvent) SetTeam(val OptString) {
	s.Team = val
}

// SetTransportProtocol sets the value of TransportProtocol.
func (s *AuditLogEvent) SetTransportProtocol(val OptInt) {
	s.TransportProtocol = val
}

// SetTransportProtocolName sets the value of TransportProtocolName.
func (s *AuditLogEvent) SetTransportProtocolName(val OptString) {
	s.TransportProtocolName = val
}

// SetUser sets the value of User.
func (s *AuditLogEvent) SetUser(val OptString) {
	s.User = val
}

// SetVisibility sets the value of Visibility.
func (s *AuditLogEvent) SetVisibility(val OptString) {
	s.Visibility = val
}

type AuditLogEventActorLocation struct {
	CountryName OptString `json:"country_name"`
}

// GetCountryName returns the value of CountryName.
func (s *AuditLogEventActorLocation) GetCountryName() OptString {
	return s.CountryName
}

// SetCountryName sets the value of CountryName.
func (s *AuditLogEventActorLocation) SetCountryName(val OptString) {
	s.CountryName = val
}

type AuditLogEventData map[string]jx.Raw

func (s *AuditLogEventData) init() AuditLogEventData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Authentication Token.
// Ref: #/components/schemas/authentication-token
type AuthenticationToken struct {
	// The token used for authentication.
	Token string `json:"token"`
	// The time this token expires.
	ExpiresAt   time.Time                       `json:"expires_at"`
	Permissions *AuthenticationTokenPermissions `json:"permissions"`
	// The repositories this token has access to.
	Repositories []Repository `json:"repositories"`
	SingleFile   OptNilString `json:"single_file"`
	// Describe whether all repositories have been selected or there's a selection involved.
	RepositorySelection OptAuthenticationTokenRepositorySelection `json:"repository_selection"`
}

// GetToken returns the value of Token.
func (s *AuthenticationToken) GetToken() string {
	return s.Token
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *AuthenticationToken) GetExpiresAt() time.Time {
	return s.ExpiresAt
}

// GetPermissions returns the value of Permissions.
func (s *AuthenticationToken) GetPermissions() *AuthenticationTokenPermissions {
	return s.Permissions
}

// GetRepositories returns the value of Repositories.
func (s *AuthenticationToken) GetRepositories() []Repository {
	return s.Repositories
}

// GetSingleFile returns the value of SingleFile.
func (s *AuthenticationToken) GetSingleFile() OptNilString {
	return s.SingleFile
}

// GetRepositorySelection returns the value of RepositorySelection.
func (s *AuthenticationToken) GetRepositorySelection() OptAuthenticationTokenRepositorySelection {
	return s.RepositorySelection
}

// SetToken sets the value of Token.
func (s *AuthenticationToken) SetToken(val string) {
	s.Token = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *AuthenticationToken) SetExpiresAt(val time.Time) {
	s.ExpiresAt = val
}

// SetPermissions sets the value of Permissions.
func (s *AuthenticationToken) SetPermissions(val *AuthenticationTokenPermissions) {
	s.Permissions = val
}

// SetRepositories sets the value of Repositories.
func (s *AuthenticationToken) SetRepositories(val []Repository) {
	s.Repositories = val
}

// SetSingleFile sets the value of SingleFile.
func (s *AuthenticationToken) SetSingleFile(val OptNilString) {
	s.SingleFile = val
}

// SetRepositorySelection sets the value of RepositorySelection.
func (s *AuthenticationToken) SetRepositorySelection(val OptAuthenticationTokenRepositorySelection) {
	s.RepositorySelection = val
}

type AuthenticationTokenPermissions struct{}

// Describe whether all repositories have been selected or there's a selection involved.
type AuthenticationTokenRepositorySelection string

const (
	AuthenticationTokenRepositorySelectionAll      AuthenticationTokenRepositorySelection = "all"
	AuthenticationTokenRepositorySelectionSelected AuthenticationTokenRepositorySelection = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s AuthenticationTokenRepositorySelection) MarshalText() ([]byte, error) {
	switch s {
	case AuthenticationTokenRepositorySelectionAll:
		return []byte(s), nil
	case AuthenticationTokenRepositorySelectionSelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthenticationTokenRepositorySelection) UnmarshalText(data []byte) error {
	switch AuthenticationTokenRepositorySelection(data) {
	case AuthenticationTokenRepositorySelectionAll:
		*s = AuthenticationTokenRepositorySelectionAll
		return nil
	case AuthenticationTokenRepositorySelectionSelected:
		*s = AuthenticationTokenRepositorySelectionSelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// How the author is associated with the repository.
// Ref: #/components/schemas/author_association
type AuthorAssociation string

const (
	AuthorAssociationCOLLABORATOR         AuthorAssociation = "COLLABORATOR"
	AuthorAssociationCONTRIBUTOR          AuthorAssociation = "CONTRIBUTOR"
	AuthorAssociationFIRSTTIMER           AuthorAssociation = "FIRST_TIMER"
	AuthorAssociationFIRSTTIMECONTRIBUTOR AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	AuthorAssociationMANNEQUIN            AuthorAssociation = "MANNEQUIN"
	AuthorAssociationMEMBER               AuthorAssociation = "MEMBER"
	AuthorAssociationNONE                 AuthorAssociation = "NONE"
	AuthorAssociationOWNER                AuthorAssociation = "OWNER"
)

// MarshalText implements encoding.TextMarshaler.
func (s AuthorAssociation) MarshalText() ([]byte, error) {
	switch s {
	case AuthorAssociationCOLLABORATOR:
		return []byte(s), nil
	case AuthorAssociationCONTRIBUTOR:
		return []byte(s), nil
	case AuthorAssociationFIRSTTIMER:
		return []byte(s), nil
	case AuthorAssociationFIRSTTIMECONTRIBUTOR:
		return []byte(s), nil
	case AuthorAssociationMANNEQUIN:
		return []byte(s), nil
	case AuthorAssociationMEMBER:
		return []byte(s), nil
	case AuthorAssociationNONE:
		return []byte(s), nil
	case AuthorAssociationOWNER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorAssociation) UnmarshalText(data []byte) error {
	switch AuthorAssociation(data) {
	case AuthorAssociationCOLLABORATOR:
		*s = AuthorAssociationCOLLABORATOR
		return nil
	case AuthorAssociationCONTRIBUTOR:
		*s = AuthorAssociationCONTRIBUTOR
		return nil
	case AuthorAssociationFIRSTTIMER:
		*s = AuthorAssociationFIRSTTIMER
		return nil
	case AuthorAssociationFIRSTTIMECONTRIBUTOR:
		*s = AuthorAssociationFIRSTTIMECONTRIBUTOR
		return nil
	case AuthorAssociationMANNEQUIN:
		*s = AuthorAssociationMANNEQUIN
		return nil
	case AuthorAssociationMEMBER:
		*s = AuthorAssociationMEMBER
		return nil
	case AuthorAssociationNONE:
		*s = AuthorAssociationNONE
		return nil
	case AuthorAssociationOWNER:
		*s = AuthorAssociationOWNER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The authorization for an OAuth app, GitHub App, or a Personal Access Token.
// Ref: #/components/schemas/authorization
type Authorization struct {
	ID  int     `json:"id"`
	URL url.URL `json:"url"`
	// A list of scopes that this authorization is in.
	Scopes         []string                         `json:"scopes"`
	Token          string                           `json:"token"`
	TokenLastEight NilString                        `json:"token_last_eight"`
	HashedToken    NilString                        `json:"hashed_token"`
	App            AuthorizationApp                 `json:"app"`
	Note           NilString                        `json:"note"`
	NoteURL        NilURI                           `json:"note_url"`
	UpdatedAt      time.Time                        `json:"updated_at"`
	CreatedAt      time.Time                        `json:"created_at"`
	Fingerprint    NilString                        `json:"fingerprint"`
	User           OptNilNullableSimpleUser         `json:"user"`
	Installation   OptNilNullableScopedInstallation `json:"installation"`
	ExpiresAt      NilDateTime                      `json:"expires_at"`
}

// GetID returns the value of ID.
func (s *Authorization) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *Authorization) GetURL() url.URL {
	return s.URL
}

// GetScopes returns the value of Scopes.
func (s *Authorization) GetScopes() []string {
	return s.Scopes
}

// GetToken returns the value of Token.
func (s *Authorization) GetToken() string {
	return s.Token
}

// GetTokenLastEight returns the value of TokenLastEight.
func (s *Authorization) GetTokenLastEight() NilString {
	return s.TokenLastEight
}

// GetHashedToken returns the value of HashedToken.
func (s *Authorization) GetHashedToken() NilString {
	return s.HashedToken
}

// GetApp returns the value of App.
func (s *Authorization) GetApp() AuthorizationApp {
	return s.App
}

// GetNote returns the value of Note.
func (s *Authorization) GetNote() NilString {
	return s.Note
}

// GetNoteURL returns the value of NoteURL.
func (s *Authorization) GetNoteURL() NilURI {
	return s.NoteURL
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Authorization) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Authorization) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetFingerprint returns the value of Fingerprint.
func (s *Authorization) GetFingerprint() NilString {
	return s.Fingerprint
}

// GetUser returns the value of User.
func (s *Authorization) GetUser() OptNilNullableSimpleUser {
	return s.User
}

// GetInstallation returns the value of Installation.
func (s *Authorization) GetInstallation() OptNilNullableScopedInstallation {
	return s.Installation
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *Authorization) GetExpiresAt() NilDateTime {
	return s.ExpiresAt
}

// SetID sets the value of ID.
func (s *Authorization) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *Authorization) SetURL(val url.URL) {
	s.URL = val
}

// SetScopes sets the value of Scopes.
func (s *Authorization) SetScopes(val []string) {
	s.Scopes = val
}

// SetToken sets the value of Token.
func (s *Authorization) SetToken(val string) {
	s.Token = val
}

// SetTokenLastEight sets the value of TokenLastEight.
func (s *Authorization) SetTokenLastEight(val NilString) {
	s.TokenLastEight = val
}

// SetHashedToken sets the value of HashedToken.
func (s *Authorization) SetHashedToken(val NilString) {
	s.HashedToken = val
}

// SetApp sets the value of App.
func (s *Authorization) SetApp(val AuthorizationApp) {
	s.App = val
}

// SetNote sets the value of Note.
func (s *Authorization) SetNote(val NilString) {
	s.Note = val
}

// SetNoteURL sets the value of NoteURL.
func (s *Authorization) SetNoteURL(val NilURI) {
	s.NoteURL = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Authorization) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Authorization) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *Authorization) SetFingerprint(val NilString) {
	s.Fingerprint = val
}

// SetUser sets the value of User.
func (s *Authorization) SetUser(val OptNilNullableSimpleUser) {
	s.User = val
}

// SetInstallation sets the value of Installation.
func (s *Authorization) SetInstallation(val OptNilNullableScopedInstallation) {
	s.Installation = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *Authorization) SetExpiresAt(val NilDateTime) {
	s.ExpiresAt = val
}

func (*Authorization) appsCheckTokenRes()                         {}
func (*Authorization) appsResetTokenRes()                         {}
func (*Authorization) appsScopeTokenRes()                         {}
func (*Authorization) oAuthAuthorizationsGetAuthorizationRes()    {}
func (*Authorization) oAuthAuthorizationsUpdateAuthorizationRes() {}

type AuthorizationApp struct {
	ClientID string  `json:"client_id"`
	Name     string  `json:"name"`
	URL      url.URL `json:"url"`
}

// GetClientID returns the value of ClientID.
func (s *AuthorizationApp) GetClientID() string {
	return s.ClientID
}

// GetName returns the value of Name.
func (s *AuthorizationApp) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *AuthorizationApp) GetURL() url.URL {
	return s.URL
}

// SetClientID sets the value of ClientID.
func (s *AuthorizationApp) SetClientID(val string) {
	s.ClientID = val
}

// SetName sets the value of Name.
func (s *AuthorizationApp) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *AuthorizationApp) SetURL(val url.URL) {
	s.URL = val
}

// AuthorizationHeaders wraps Authorization with response headers.
type AuthorizationHeaders struct {
	Location OptString
	Response Authorization
}

// GetLocation returns the value of Location.
func (s *AuthorizationHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *AuthorizationHeaders) GetResponse() Authorization {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *AuthorizationHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *AuthorizationHeaders) SetResponse(val Authorization) {
	s.Response = val
}

func (*AuthorizationHeaders) oAuthAuthorizationsCreateAuthorizationRes() {}

// The status of auto merging a pull request.
// Ref: #/components/schemas/auto_merge
type AutoMerge struct {
	EnabledBy SimpleUser `json:"enabled_by"`
	// The merge method to use.
	MergeMethod AutoMergeMergeMethod `json:"merge_method"`
	// Title for the merge commit message.
	CommitTitle string `json:"commit_title"`
	// Commit message for the merge commit.
	CommitMessage string `json:"commit_message"`
}

// GetEnabledBy returns the value of EnabledBy.
func (s *AutoMerge) GetEnabledBy() SimpleUser {
	return s.EnabledBy
}

// GetMergeMethod returns the value of MergeMethod.
func (s *AutoMerge) GetMergeMethod() AutoMergeMergeMethod {
	return s.MergeMethod
}

// GetCommitTitle returns the value of CommitTitle.
func (s *AutoMerge) GetCommitTitle() string {
	return s.CommitTitle
}

// GetCommitMessage returns the value of CommitMessage.
func (s *AutoMerge) GetCommitMessage() string {
	return s.CommitMessage
}

// SetEnabledBy sets the value of EnabledBy.
func (s *AutoMerge) SetEnabledBy(val SimpleUser) {
	s.EnabledBy = val
}

// SetMergeMethod sets the value of MergeMethod.
func (s *AutoMerge) SetMergeMethod(val AutoMergeMergeMethod) {
	s.MergeMethod = val
}

// SetCommitTitle sets the value of CommitTitle.
func (s *AutoMerge) SetCommitTitle(val string) {
	s.CommitTitle = val
}

// SetCommitMessage sets the value of CommitMessage.
func (s *AutoMerge) SetCommitMessage(val string) {
	s.CommitMessage = val
}

// The merge method to use.
type AutoMergeMergeMethod string

const (
	AutoMergeMergeMethodMerge  AutoMergeMergeMethod = "merge"
	AutoMergeMergeMethodSquash AutoMergeMergeMethod = "squash"
	AutoMergeMergeMethodRebase AutoMergeMergeMethod = "rebase"
)

// MarshalText implements encoding.TextMarshaler.
func (s AutoMergeMergeMethod) MarshalText() ([]byte, error) {
	switch s {
	case AutoMergeMergeMethodMerge:
		return []byte(s), nil
	case AutoMergeMergeMethodSquash:
		return []byte(s), nil
	case AutoMergeMergeMethodRebase:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AutoMergeMergeMethod) UnmarshalText(data []byte) error {
	switch AutoMergeMergeMethod(data) {
	case AutoMergeMergeMethodMerge:
		*s = AutoMergeMergeMethodMerge
		return nil
	case AutoMergeMergeMethodSquash:
		*s = AutoMergeMergeMethodSquash
		return nil
	case AutoMergeMergeMethodRebase:
		*s = AutoMergeMergeMethodRebase
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An autolink reference.
// Ref: #/components/schemas/autolink
type Autolink struct {
	ID int `json:"id"`
	// The prefix of a key that is linkified.
	KeyPrefix string `json:"key_prefix"`
	// A template for the target URL that is generated if a key was found.
	URLTemplate string `json:"url_template"`
}

// GetID returns the value of ID.
func (s *Autolink) GetID() int {
	return s.ID
}

// GetKeyPrefix returns the value of KeyPrefix.
func (s *Autolink) GetKeyPrefix() string {
	return s.KeyPrefix
}

// GetURLTemplate returns the value of URLTemplate.
func (s *Autolink) GetURLTemplate() string {
	return s.URLTemplate
}

// SetID sets the value of ID.
func (s *Autolink) SetID(val int) {
	s.ID = val
}

// SetKeyPrefix sets the value of KeyPrefix.
func (s *Autolink) SetKeyPrefix(val string) {
	s.KeyPrefix = val
}

// SetURLTemplate sets the value of URLTemplate.
func (s *Autolink) SetURLTemplate(val string) {
	s.URLTemplate = val
}

func (*Autolink) reposGetAutolinkRes() {}

// AutolinkHeaders wraps Autolink with response headers.
type AutolinkHeaders struct {
	Location OptString
	Response Autolink
}

// GetLocation returns the value of Location.
func (s *AutolinkHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *AutolinkHeaders) GetResponse() Autolink {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *AutolinkHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *AutolinkHeaders) SetResponse(val Autolink) {
	s.Response = val
}

func (*AutolinkHeaders) reposCreateAutolinkRes() {}

// Base Gist.
// Ref: #/components/schemas/base-gist
type BaseGist struct {
	URL         url.URL               `json:"url"`
	ForksURL    url.URL               `json:"forks_url"`
	CommitsURL  url.URL               `json:"commits_url"`
	ID          string                `json:"id"`
	NodeID      string                `json:"node_id"`
	GitPullURL  url.URL               `json:"git_pull_url"`
	GitPushURL  url.URL               `json:"git_push_url"`
	HTMLURL     url.URL               `json:"html_url"`
	Files       BaseGistFiles         `json:"files"`
	Public      bool                  `json:"public"`
	CreatedAt   time.Time             `json:"created_at"`
	UpdatedAt   time.Time             `json:"updated_at"`
	Description NilString             `json:"description"`
	Comments    int                   `json:"comments"`
	User        NilNullableSimpleUser `json:"user"`
	CommentsURL url.URL               `json:"comments_url"`
	Owner       OptSimpleUser         `json:"owner"`
	Truncated   OptBool               `json:"truncated"`
	Forks       []jx.Raw              `json:"forks"`
	History     []jx.Raw              `json:"history"`
}

// GetURL returns the value of URL.
func (s *BaseGist) GetURL() url.URL {
	return s.URL
}

// GetForksURL returns the value of ForksURL.
func (s *BaseGist) GetForksURL() url.URL {
	return s.ForksURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *BaseGist) GetCommitsURL() url.URL {
	return s.CommitsURL
}

// GetID returns the value of ID.
func (s *BaseGist) GetID() string {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *BaseGist) GetNodeID() string {
	return s.NodeID
}

// GetGitPullURL returns the value of GitPullURL.
func (s *BaseGist) GetGitPullURL() url.URL {
	return s.GitPullURL
}

// GetGitPushURL returns the value of GitPushURL.
func (s *BaseGist) GetGitPushURL() url.URL {
	return s.GitPushURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *BaseGist) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFiles returns the value of Files.
func (s *BaseGist) GetFiles() BaseGistFiles {
	return s.Files
}

// GetPublic returns the value of Public.
func (s *BaseGist) GetPublic() bool {
	return s.Public
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BaseGist) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BaseGist) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDescription returns the value of Description.
func (s *BaseGist) GetDescription() NilString {
	return s.Description
}

// GetComments returns the value of Comments.
func (s *BaseGist) GetComments() int {
	return s.Comments
}

// GetUser returns the value of User.
func (s *BaseGist) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetCommentsURL returns the value of CommentsURL.
func (s *BaseGist) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetOwner returns the value of Owner.
func (s *BaseGist) GetOwner() OptSimpleUser {
	return s.Owner
}

// GetTruncated returns the value of Truncated.
func (s *BaseGist) GetTruncated() OptBool {
	return s.Truncated
}

// GetForks returns the value of Forks.
func (s *BaseGist) GetForks() []jx.Raw {
	return s.Forks
}

// GetHistory returns the value of History.
func (s *BaseGist) GetHistory() []jx.Raw {
	return s.History
}

// SetURL sets the value of URL.
func (s *BaseGist) SetURL(val url.URL) {
	s.URL = val
}

// SetForksURL sets the value of ForksURL.
func (s *BaseGist) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *BaseGist) SetCommitsURL(val url.URL) {
	s.CommitsURL = val
}

// SetID sets the value of ID.
func (s *BaseGist) SetID(val string) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *BaseGist) SetNodeID(val string) {
	s.NodeID = val
}

// SetGitPullURL sets the value of GitPullURL.
func (s *BaseGist) SetGitPullURL(val url.URL) {
	s.GitPullURL = val
}

// SetGitPushURL sets the value of GitPushURL.
func (s *BaseGist) SetGitPushURL(val url.URL) {
	s.GitPushURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *BaseGist) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFiles sets the value of Files.
func (s *BaseGist) SetFiles(val BaseGistFiles) {
	s.Files = val
}

// SetPublic sets the value of Public.
func (s *BaseGist) SetPublic(val bool) {
	s.Public = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BaseGist) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BaseGist) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDescription sets the value of Description.
func (s *BaseGist) SetDescription(val NilString) {
	s.Description = val
}

// SetComments sets the value of Comments.
func (s *BaseGist) SetComments(val int) {
	s.Comments = val
}

// SetUser sets the value of User.
func (s *BaseGist) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *BaseGist) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetOwner sets the value of Owner.
func (s *BaseGist) SetOwner(val OptSimpleUser) {
	s.Owner = val
}

// SetTruncated sets the value of Truncated.
func (s *BaseGist) SetTruncated(val OptBool) {
	s.Truncated = val
}

// SetForks sets the value of Forks.
func (s *BaseGist) SetForks(val []jx.Raw) {
	s.Forks = val
}

// SetHistory sets the value of History.
func (s *BaseGist) SetHistory(val []jx.Raw) {
	s.History = val
}

type BaseGistFiles map[string]BaseGistFilesItem

func (s *BaseGistFiles) init() BaseGistFiles {
	m := *s
	if m == nil {
		m = map[string]BaseGistFilesItem{}
		*s = m
	}
	return m
}

type BaseGistFilesItem struct {
	Filename OptString `json:"filename"`
	Type     OptString `json:"type"`
	Language OptString `json:"language"`
	RawURL   OptString `json:"raw_url"`
	Size     OptInt    `json:"size"`
}

// GetFilename returns the value of Filename.
func (s *BaseGistFilesItem) GetFilename() OptString {
	return s.Filename
}

// GetType returns the value of Type.
func (s *BaseGistFilesItem) GetType() OptString {
	return s.Type
}

// GetLanguage returns the value of Language.
func (s *BaseGistFilesItem) GetLanguage() OptString {
	return s.Language
}

// GetRawURL returns the value of RawURL.
func (s *BaseGistFilesItem) GetRawURL() OptString {
	return s.RawURL
}

// GetSize returns the value of Size.
func (s *BaseGistFilesItem) GetSize() OptInt {
	return s.Size
}

// SetFilename sets the value of Filename.
func (s *BaseGistFilesItem) SetFilename(val OptString) {
	s.Filename = val
}

// SetType sets the value of Type.
func (s *BaseGistFilesItem) SetType(val OptString) {
	s.Type = val
}

// SetLanguage sets the value of Language.
func (s *BaseGistFilesItem) SetLanguage(val OptString) {
	s.Language = val
}

// SetRawURL sets the value of RawURL.
func (s *BaseGistFilesItem) SetRawURL(val OptString) {
	s.RawURL = val
}

// SetSize sets the value of Size.
func (s *BaseGistFilesItem) SetSize(val OptInt) {
	s.Size = val
}

// BaseGistHeaders wraps BaseGist with response headers.
type BaseGistHeaders struct {
	Location OptString
	Response BaseGist
}

// GetLocation returns the value of Location.
func (s *BaseGistHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *BaseGistHeaders) GetResponse() BaseGist {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *BaseGistHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *BaseGistHeaders) SetResponse(val BaseGist) {
	s.Response = val
}

func (*BaseGistHeaders) gistsForkRes() {}

// Basic Error.
// Ref: #/components/schemas/basic-error
type BasicError struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
	URL              OptString `json:"url"`
	Status           OptString `json:"status"`
}

// GetMessage returns the value of Message.
func (s *BasicError) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *BasicError) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// GetURL returns the value of URL.
func (s *BasicError) GetURL() OptString {
	return s.URL
}

// GetStatus returns the value of Status.
func (s *BasicError) GetStatus() OptString {
	return s.Status
}

// SetMessage sets the value of Message.
func (s *BasicError) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *BasicError) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

// SetURL sets the value of URL.
func (s *BasicError) SetURL(val OptString) {
	s.URL = val
}

// SetStatus sets the value of Status.
func (s *BasicError) SetStatus(val OptString) {
	s.Status = val
}

func (*BasicError) activityGetRepoSubscriptionRes()                      {}
func (*BasicError) activityListPublicEventsRes()                         {}
func (*BasicError) activityMarkThreadAsReadRes()                         {}
func (*BasicError) appsCheckTokenRes()                                   {}
func (*BasicError) appsCreateFromManifestRes()                           {}
func (*BasicError) appsDeleteInstallationRes()                           {}
func (*BasicError) appsGetSubscriptionPlanForAccountStubbedRes()         {}
func (*BasicError) appsGetWebhookDeliveryRes()                           {}
func (*BasicError) appsListAccountsForPlanStubbedRes()                   {}
func (*BasicError) appsListPlansStubbedRes()                             {}
func (*BasicError) appsListSubscriptionsForAuthenticatedUserStubbedRes() {}
func (*BasicError) appsListWebhookDeliveriesRes()                        {}
func (*BasicError) appsRedeliverWebhookDeliveryRes()                     {}
func (*BasicError) appsSuspendInstallationRes()                          {}
func (*BasicError) appsUnsuspendInstallationRes()                        {}
func (*BasicError) codeScanningGetSarifRes()                             {}
func (*BasicError) codesOfConductGetConductCodeRes()                     {}
func (*BasicError) gistsCheckIsStarredRes()                              {}
func (*BasicError) gistsGetCommentRes()                                  {}
func (*BasicError) gistsGetRes()                                         {}
func (*BasicError) gistsListPublicRes()                                  {}
func (*BasicError) gistsListRes()                                        {}
func (*BasicError) gistsUpdateCommentRes()                               {}
func (*BasicError) gitCreateCommitRes()                                  {}
func (*BasicError) gitGetCommitRes()                                     {}
func (*BasicError) gitGetRefRes()                                        {}
func (*BasicError) gitGetTagRes()                                        {}
func (*BasicError) gitGetTreeRes()                                       {}
func (*BasicError) issuesCheckUserCanBeAssignedRes()                     {}
func (*BasicError) issuesCreateLabelRes()                                {}
func (*BasicError) issuesCreateMilestoneRes()                            {}
func (*BasicError) issuesDeleteMilestoneRes()                            {}
func (*BasicError) issuesGetCommentRes()                                 {}
func (*BasicError) issuesGetLabelRes()                                   {}
func (*BasicError) issuesGetMilestoneRes()                               {}
func (*BasicError) issuesListAssigneesRes()                              {}
func (*BasicError) issuesListCommentsForRepoRes()                        {}
func (*BasicError) issuesListForAuthenticatedUserRes()                   {}
func (*BasicError) issuesListForOrgRes()                                 {}
func (*BasicError) issuesListLabelsForRepoRes()                          {}
func (*BasicError) issuesListLabelsOnIssueRes()                          {}
func (*BasicError) issuesListMilestonesRes()                             {}
func (*BasicError) issuesListRes()                                       {}
func (*BasicError) issuesRemoveAllLabelsRes()                            {}
func (*BasicError) migrationsDeleteArchiveForOrgRes()                    {}
func (*BasicError) migrationsDownloadArchiveForOrgRes()                  {}
func (*BasicError) migrationsGetCommitAuthorsRes()                       {}
func (*BasicError) migrationsGetImportStatusRes()                        {}
func (*BasicError) migrationsGetStatusForOrgRes()                        {}
func (*BasicError) migrationsListReposForOrgRes()                        {}
func (*BasicError) migrationsListReposForUserRes()                       {}
func (*BasicError) migrationsMapCommitAuthorRes()                        {}
func (*BasicError) migrationsStartForOrgRes()                            {}
func (*BasicError) migrationsStartImportRes()                            {}
func (*BasicError) migrationsUnlockRepoForOrgRes()                       {}
func (*BasicError) orgsCancelInvitationRes()                             {}
func (*BasicError) orgsCheckBlockedUserRes()                             {}
func (*BasicError) orgsConvertMemberToOutsideCollaboratorRes()           {}
func (*BasicError) orgsCreateInvitationRes()                             {}
func (*BasicError) orgsCreateWebhookRes()                                {}
func (*BasicError) orgsDeleteWebhookRes()                                {}
func (*BasicError) orgsGetRes()                                          {}
func (*BasicError) orgsGetWebhookDeliveryRes()                           {}
func (*BasicError) orgsGetWebhookRes()                                   {}
func (*BasicError) orgsListFailedInvitationsRes()                        {}
func (*BasicError) orgsListInvitationTeamsRes()                          {}
func (*BasicError) orgsListPendingInvitationsRes()                       {}
func (*BasicError) orgsListWebhookDeliveriesRes()                        {}
func (*BasicError) orgsListWebhooksRes()                                 {}
func (*BasicError) orgsPingWebhookRes()                                  {}
func (*BasicError) orgsRedeliverWebhookDeliveryRes()                     {}
func (*BasicError) orgsRemoveMemberRes()                                 {}
func (*BasicError) orgsRemoveSamlSSOAuthorizationRes()                   {}
func (*BasicError) orgsSetMembershipForUserRes()                         {}
func (*BasicError) orgsSetPublicMembershipForAuthenticatedUserRes()      {}
func (*BasicError) orgsUpdateWebhookRes()                                {}
func (*BasicError) projectsMoveCardRes()                                 {}
func (*BasicError) pullsCreateReplyForReviewCommentRes()                 {}
func (*BasicError) pullsCreateRes()                                      {}
func (*BasicError) pullsCreateReviewCommentRes()                         {}
func (*BasicError) pullsCreateReviewRes()                                {}
func (*BasicError) pullsDeletePendingReviewRes()                         {}
func (*BasicError) pullsDeleteReviewCommentRes()                         {}
func (*BasicError) pullsDismissReviewRes()                               {}
func (*BasicError) pullsGetReviewCommentRes()                            {}
func (*BasicError) pullsGetReviewRes()                                   {}
func (*BasicError) pullsListCommentsForReviewRes()                       {}
func (*BasicError) pullsListFilesRes()                                   {}
func (*BasicError) pullsUpdateBranchRes()                                {}
func (*BasicError) pullsUpdateRes()                                      {}
func (*BasicError) rateLimitGetRes()                                     {}
func (*BasicError) reactionsListForCommitCommentRes()                    {}
func (*BasicError) reactionsListForIssueCommentRes()                     {}
func (*BasicError) reactionsListForPullRequestReviewCommentRes()         {}
func (*BasicError) reposAddCollaboratorRes()                             {}
func (*BasicError) reposCreateCommitCommentRes()                         {}
func (*BasicError) reposCreateCommitSignatureProtectionRes()             {}
func (*BasicError) reposCreateInOrgRes()                                 {}
func (*BasicError) reposCreatePagesSiteRes()                             {}
func (*BasicError) reposCreateReleaseRes()                               {}
func (*BasicError) reposDeleteAdminBranchProtectionRes()                 {}
func (*BasicError) reposDeleteAutolinkRes()                              {}
func (*BasicError) reposDeleteBranchProtectionRes()                      {}
func (*BasicError) reposDeleteCommitCommentRes()                         {}
func (*BasicError) reposDeleteCommitSignatureProtectionRes()             {}
func (*BasicError) reposDeleteDeploymentRes()                            {}
func (*BasicError) reposDeletePagesSiteRes()                             {}
func (*BasicError) reposDeletePullRequestReviewProtectionRes()           {}
func (*BasicError) reposDeleteWebhookRes()                               {}
func (*BasicError) reposGetAccessRestrictionsRes()                       {}
func (*BasicError) reposGetAllStatusCheckContextsRes()                   {}
func (*BasicError) reposGetAllTopicsRes()                                {}
func (*BasicError) reposGetAppsWithAccessToProtectedBranchRes()          {}
func (*BasicError) reposGetAutolinkRes()                                 {}
func (*BasicError) reposGetBranchProtectionRes()                         {}
func (*BasicError) reposGetClonesRes()                                   {}
func (*BasicError) reposGetCollaboratorPermissionLevelRes()              {}
func (*BasicError) reposGetCombinedStatusForRefRes()                     {}
func (*BasicError) reposGetCommitCommentRes()                            {}
func (*BasicError) reposGetCommitSignatureProtectionRes()                {}
func (*BasicError) reposGetDeployKeyRes()                                {}
func (*BasicError) reposGetDeploymentRes()                               {}
func (*BasicError) reposGetDeploymentStatusRes()                         {}
func (*BasicError) reposGetPagesHealthCheckRes()                         {}
func (*BasicError) reposGetPagesRes()                                    {}
func (*BasicError) reposGetParticipationStatsRes()                       {}
func (*BasicError) reposGetReadmeInDirectoryRes()                        {}
func (*BasicError) reposGetReadmeRes()                                   {}
func (*BasicError) reposGetReleaseAssetRes()                             {}
func (*BasicError) reposGetReleaseByTagRes()                             {}
func (*BasicError) reposGetReleaseRes()                                  {}
func (*BasicError) reposGetStatusChecksProtectionRes()                   {}
func (*BasicError) reposGetTeamsWithAccessToProtectedBranchRes()         {}
func (*BasicError) reposGetTopPathsRes()                                 {}
func (*BasicError) reposGetTopReferrersRes()                             {}
func (*BasicError) reposGetUsersWithAccessToProtectedBranchRes()         {}
func (*BasicError) reposGetViewsRes()                                    {}
func (*BasicError) reposGetWebhookDeliveryRes()                          {}
func (*BasicError) reposGetWebhookRes()                                  {}
func (*BasicError) reposListBranchesRes()                                {}
func (*BasicError) reposListCollaboratorsRes()                           {}
func (*BasicError) reposListCommitStatusesForRefRes()                    {}
func (*BasicError) reposListDeploymentStatusesRes()                      {}
func (*BasicError) reposListForksRes()                                   {}
func (*BasicError) reposListReleasesRes()                                {}
func (*BasicError) reposListWebhookDeliveriesRes()                       {}
func (*BasicError) reposListWebhooksRes()                                {}
func (*BasicError) reposMergeRes()                                       {}
func (*BasicError) reposPingWebhookRes()                                 {}
func (*BasicError) reposRedeliverWebhookDeliveryRes()                    {}
func (*BasicError) reposRemoveStatusCheckContextsRes()                   {}
func (*BasicError) reposReplaceAllTopicsRes()                            {}
func (*BasicError) reposSetStatusCheckContextsRes()                      {}
func (*BasicError) reposTestPushWebhookRes()                             {}
func (*BasicError) reposUpdateCommitCommentRes()                         {}
func (*BasicError) reposUpdateReleaseRes()                               {}
func (*BasicError) reposUpdateStatusCheckProtectionRes()                 {}
func (*BasicError) reposUpdateWebhookRes()                               {}
func (*BasicError) searchCodeRes()                                       {}
func (*BasicError) searchIssuesAndPullRequestsRes()                      {}
func (*BasicError) secretScanningListAlertsForOrgRes()                   {}
func (*BasicError) teamsAddMemberLegacyRes()                             {}
func (*BasicError) teamsAddOrUpdateMembershipForUserLegacyRes()          {}
func (*BasicError) teamsAddOrUpdateProjectPermissionsLegacyRes()         {}
func (*BasicError) teamsAddOrUpdateRepoPermissionsLegacyRes()            {}
func (*BasicError) teamsCreateOrUpdateIdpGroupConnectionsLegacyRes()     {}
func (*BasicError) teamsCreateRes()                                      {}
func (*BasicError) teamsDeleteLegacyRes()                                {}
func (*BasicError) teamsGetByNameRes()                                   {}
func (*BasicError) teamsGetLegacyRes()                                   {}
func (*BasicError) teamsGetMembershipForUserLegacyRes()                  {}
func (*BasicError) teamsListMembersLegacyRes()                           {}
func (*BasicError) teamsListProjectsLegacyRes()                          {}
func (*BasicError) teamsListReposLegacyRes()                             {}
func (*BasicError) teamsListRes()                                        {}
func (*BasicError) teamsRemoveProjectLegacyRes()                         {}
func (*BasicError) usersGetByUsernameRes()                               {}
func (*BasicError) usersGetContextForUserRes()                           {}

// Blob.
// Ref: #/components/schemas/blob
type Blob struct {
	Content            string    `json:"content"`
	Encoding           string    `json:"encoding"`
	URL                url.URL   `json:"url"`
	Sha                string    `json:"sha"`
	Size               NilInt    `json:"size"`
	NodeID             string    `json:"node_id"`
	HighlightedContent OptString `json:"highlighted_content"`
}

// GetContent returns the value of Content.
func (s *Blob) GetContent() string {
	return s.Content
}

// GetEncoding returns the value of Encoding.
func (s *Blob) GetEncoding() string {
	return s.Encoding
}

// GetURL returns the value of URL.
func (s *Blob) GetURL() url.URL {
	return s.URL
}

// GetSha returns the value of Sha.
func (s *Blob) GetSha() string {
	return s.Sha
}

// GetSize returns the value of Size.
func (s *Blob) GetSize() NilInt {
	return s.Size
}

// GetNodeID returns the value of NodeID.
func (s *Blob) GetNodeID() string {
	return s.NodeID
}

// GetHighlightedContent returns the value of HighlightedContent.
func (s *Blob) GetHighlightedContent() OptString {
	return s.HighlightedContent
}

// SetContent sets the value of Content.
func (s *Blob) SetContent(val string) {
	s.Content = val
}

// SetEncoding sets the value of Encoding.
func (s *Blob) SetEncoding(val string) {
	s.Encoding = val
}

// SetURL sets the value of URL.
func (s *Blob) SetURL(val url.URL) {
	s.URL = val
}

// SetSha sets the value of Sha.
func (s *Blob) SetSha(val string) {
	s.Sha = val
}

// SetSize sets the value of Size.
func (s *Blob) SetSize(val NilInt) {
	s.Size = val
}

// SetNodeID sets the value of NodeID.
func (s *Blob) SetNodeID(val string) {
	s.NodeID = val
}

// SetHighlightedContent sets the value of HighlightedContent.
func (s *Blob) SetHighlightedContent(val OptString) {
	s.HighlightedContent = val
}

func (*Blob) gitGetBlobRes() {}

// Branch Protection.
// Ref: #/components/schemas/branch-protection
type BranchProtection struct {
	URL                            OptString                                         `json:"url"`
	Enabled                        OptBool                                           `json:"enabled"`
	RequiredStatusChecks           OptBranchProtectionRequiredStatusChecks           `json:"required_status_checks"`
	EnforceAdmins                  OptProtectedBranchAdminEnforced                   `json:"enforce_admins"`
	RequiredPullRequestReviews     OptProtectedBranchPullRequestReview               `json:"required_pull_request_reviews"`
	Restrictions                   OptBranchRestrictionPolicy                        `json:"restrictions"`
	RequiredLinearHistory          OptBranchProtectionRequiredLinearHistory          `json:"required_linear_history"`
	AllowForcePushes               OptBranchProtectionAllowForcePushes               `json:"allow_force_pushes"`
	AllowDeletions                 OptBranchProtectionAllowDeletions                 `json:"allow_deletions"`
	RequiredConversationResolution OptBranchProtectionRequiredConversationResolution `json:"required_conversation_resolution"`
	Name                           OptString                                         `json:"name"`
	ProtectionURL                  OptString                                         `json:"protection_url"`
	RequiredSignatures             OptBranchProtectionRequiredSignatures             `json:"required_signatures"`
}

// GetURL returns the value of URL.
func (s *BranchProtection) GetURL() OptString {
	return s.URL
}

// GetEnabled returns the value of Enabled.
func (s *BranchProtection) GetEnabled() OptBool {
	return s.Enabled
}

// GetRequiredStatusChecks returns the value of RequiredStatusChecks.
func (s *BranchProtection) GetRequiredStatusChecks() OptBranchProtectionRequiredStatusChecks {
	return s.RequiredStatusChecks
}

// GetEnforceAdmins returns the value of EnforceAdmins.
func (s *BranchProtection) GetEnforceAdmins() OptProtectedBranchAdminEnforced {
	return s.EnforceAdmins
}

// GetRequiredPullRequestReviews returns the value of RequiredPullRequestReviews.
func (s *BranchProtection) GetRequiredPullRequestReviews() OptProtectedBranchPullRequestReview {
	return s.RequiredPullRequestReviews
}

// GetRestrictions returns the value of Restrictions.
func (s *BranchProtection) GetRestrictions() OptBranchRestrictionPolicy {
	return s.Restrictions
}

// GetRequiredLinearHistory returns the value of RequiredLinearHistory.
func (s *BranchProtection) GetRequiredLinearHistory() OptBranchProtectionRequiredLinearHistory {
	return s.RequiredLinearHistory
}

// GetAllowForcePushes returns the value of AllowForcePushes.
func (s *BranchProtection) GetAllowForcePushes() OptBranchProtectionAllowForcePushes {
	return s.AllowForcePushes
}

// GetAllowDeletions returns the value of AllowDeletions.
func (s *BranchProtection) GetAllowDeletions() OptBranchProtectionAllowDeletions {
	return s.AllowDeletions
}

// GetRequiredConversationResolution returns the value of RequiredConversationResolution.
func (s *BranchProtection) GetRequiredConversationResolution() OptBranchProtectionRequiredConversationResolution {
	return s.RequiredConversationResolution
}

// GetName returns the value of Name.
func (s *BranchProtection) GetName() OptString {
	return s.Name
}

// GetProtectionURL returns the value of ProtectionURL.
func (s *BranchProtection) GetProtectionURL() OptString {
	return s.ProtectionURL
}

// GetRequiredSignatures returns the value of RequiredSignatures.
func (s *BranchProtection) GetRequiredSignatures() OptBranchProtectionRequiredSignatures {
	return s.RequiredSignatures
}

// SetURL sets the value of URL.
func (s *BranchProtection) SetURL(val OptString) {
	s.URL = val
}

// SetEnabled sets the value of Enabled.
func (s *BranchProtection) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetRequiredStatusChecks sets the value of RequiredStatusChecks.
func (s *BranchProtection) SetRequiredStatusChecks(val OptBranchProtectionRequiredStatusChecks) {
	s.RequiredStatusChecks = val
}

// SetEnforceAdmins sets the value of EnforceAdmins.
func (s *BranchProtection) SetEnforceAdmins(val OptProtectedBranchAdminEnforced) {
	s.EnforceAdmins = val
}

// SetRequiredPullRequestReviews sets the value of RequiredPullRequestReviews.
func (s *BranchProtection) SetRequiredPullRequestReviews(val OptProtectedBranchPullRequestReview) {
	s.RequiredPullRequestReviews = val
}

// SetRestrictions sets the value of Restrictions.
func (s *BranchProtection) SetRestrictions(val OptBranchRestrictionPolicy) {
	s.Restrictions = val
}

// SetRequiredLinearHistory sets the value of RequiredLinearHistory.
func (s *BranchProtection) SetRequiredLinearHistory(val OptBranchProtectionRequiredLinearHistory) {
	s.RequiredLinearHistory = val
}

// SetAllowForcePushes sets the value of AllowForcePushes.
func (s *BranchProtection) SetAllowForcePushes(val OptBranchProtectionAllowForcePushes) {
	s.AllowForcePushes = val
}

// SetAllowDeletions sets the value of AllowDeletions.
func (s *BranchProtection) SetAllowDeletions(val OptBranchProtectionAllowDeletions) {
	s.AllowDeletions = val
}

// SetRequiredConversationResolution sets the value of RequiredConversationResolution.
func (s *BranchProtection) SetRequiredConversationResolution(val OptBranchProtectionRequiredConversationResolution) {
	s.RequiredConversationResolution = val
}

// SetName sets the value of Name.
func (s *BranchProtection) SetName(val OptString) {
	s.Name = val
}

// SetProtectionURL sets the value of ProtectionURL.
func (s *BranchProtection) SetProtectionURL(val OptString) {
	s.ProtectionURL = val
}

// SetRequiredSignatures sets the value of RequiredSignatures.
func (s *BranchProtection) SetRequiredSignatures(val OptBranchProtectionRequiredSignatures) {
	s.RequiredSignatures = val
}

func (*BranchProtection) reposGetBranchProtectionRes() {}

type BranchProtectionAllowDeletions struct {
	Enabled OptBool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *BranchProtectionAllowDeletions) GetEnabled() OptBool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *BranchProtectionAllowDeletions) SetEnabled(val OptBool) {
	s.Enabled = val
}

type BranchProtectionAllowForcePushes struct {
	Enabled OptBool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *BranchProtectionAllowForcePushes) GetEnabled() OptBool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *BranchProtectionAllowForcePushes) SetEnabled(val OptBool) {
	s.Enabled = val
}

type BranchProtectionRequiredConversationResolution struct {
	Enabled OptBool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *BranchProtectionRequiredConversationResolution) GetEnabled() OptBool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *BranchProtectionRequiredConversationResolution) SetEnabled(val OptBool) {
	s.Enabled = val
}

type BranchProtectionRequiredLinearHistory struct {
	Enabled OptBool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *BranchProtectionRequiredLinearHistory) GetEnabled() OptBool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *BranchProtectionRequiredLinearHistory) SetEnabled(val OptBool) {
	s.Enabled = val
}

type BranchProtectionRequiredSignatures struct {
	URL     url.URL `json:"url"`
	Enabled bool    `json:"enabled"`
}

// GetURL returns the value of URL.
func (s *BranchProtectionRequiredSignatures) GetURL() url.URL {
	return s.URL
}

// GetEnabled returns the value of Enabled.
func (s *BranchProtectionRequiredSignatures) GetEnabled() bool {
	return s.Enabled
}

// SetURL sets the value of URL.
func (s *BranchProtectionRequiredSignatures) SetURL(val url.URL) {
	s.URL = val
}

// SetEnabled sets the value of Enabled.
func (s *BranchProtectionRequiredSignatures) SetEnabled(val bool) {
	s.Enabled = val
}

type BranchProtectionRequiredStatusChecks struct {
	URL              OptString `json:"url"`
	EnforcementLevel OptString `json:"enforcement_level"`
	Contexts         []string  `json:"contexts"`
	ContextsURL      OptString `json:"contexts_url"`
	Strict           OptBool   `json:"strict"`
}

// GetURL returns the value of URL.
func (s *BranchProtectionRequiredStatusChecks) GetURL() OptString {
	return s.URL
}

// GetEnforcementLevel returns the value of EnforcementLevel.
func (s *BranchProtectionRequiredStatusChecks) GetEnforcementLevel() OptString {
	return s.EnforcementLevel
}

// GetContexts returns the value of Contexts.
func (s *BranchProtectionRequiredStatusChecks) GetContexts() []string {
	return s.Contexts
}

// GetContextsURL returns the value of ContextsURL.
func (s *BranchProtectionRequiredStatusChecks) GetContextsURL() OptString {
	return s.ContextsURL
}

// GetStrict returns the value of Strict.
func (s *BranchProtectionRequiredStatusChecks) GetStrict() OptBool {
	return s.Strict
}

// SetURL sets the value of URL.
func (s *BranchProtectionRequiredStatusChecks) SetURL(val OptString) {
	s.URL = val
}

// SetEnforcementLevel sets the value of EnforcementLevel.
func (s *BranchProtectionRequiredStatusChecks) SetEnforcementLevel(val OptString) {
	s.EnforcementLevel = val
}

// SetContexts sets the value of Contexts.
func (s *BranchProtectionRequiredStatusChecks) SetContexts(val []string) {
	s.Contexts = val
}

// SetContextsURL sets the value of ContextsURL.
func (s *BranchProtectionRequiredStatusChecks) SetContextsURL(val OptString) {
	s.ContextsURL = val
}

// SetStrict sets the value of Strict.
func (s *BranchProtectionRequiredStatusChecks) SetStrict(val OptBool) {
	s.Strict = val
}

// Branch Restriction Policy.
// Ref: #/components/schemas/branch-restriction-policy
type BranchRestrictionPolicy struct {
	URL      url.URL                            `json:"url"`
	UsersURL url.URL                            `json:"users_url"`
	TeamsURL url.URL                            `json:"teams_url"`
	AppsURL  url.URL                            `json:"apps_url"`
	Users    []BranchRestrictionPolicyUsersItem `json:"users"`
	Teams    []BranchRestrictionPolicyTeamsItem `json:"teams"`
	Apps     []BranchRestrictionPolicyAppsItem  `json:"apps"`
}

// GetURL returns the value of URL.
func (s *BranchRestrictionPolicy) GetURL() url.URL {
	return s.URL
}

// GetUsersURL returns the value of UsersURL.
func (s *BranchRestrictionPolicy) GetUsersURL() url.URL {
	return s.UsersURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *BranchRestrictionPolicy) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetAppsURL returns the value of AppsURL.
func (s *BranchRestrictionPolicy) GetAppsURL() url.URL {
	return s.AppsURL
}

// GetUsers returns the value of Users.
func (s *BranchRestrictionPolicy) GetUsers() []BranchRestrictionPolicyUsersItem {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *BranchRestrictionPolicy) GetTeams() []BranchRestrictionPolicyTeamsItem {
	return s.Teams
}

// GetApps returns the value of Apps.
func (s *BranchRestrictionPolicy) GetApps() []BranchRestrictionPolicyAppsItem {
	return s.Apps
}

// SetURL sets the value of URL.
func (s *BranchRestrictionPolicy) SetURL(val url.URL) {
	s.URL = val
}

// SetUsersURL sets the value of UsersURL.
func (s *BranchRestrictionPolicy) SetUsersURL(val url.URL) {
	s.UsersURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *BranchRestrictionPolicy) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetAppsURL sets the value of AppsURL.
func (s *BranchRestrictionPolicy) SetAppsURL(val url.URL) {
	s.AppsURL = val
}

// SetUsers sets the value of Users.
func (s *BranchRestrictionPolicy) SetUsers(val []BranchRestrictionPolicyUsersItem) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *BranchRestrictionPolicy) SetTeams(val []BranchRestrictionPolicyTeamsItem) {
	s.Teams = val
}

// SetApps sets the value of Apps.
func (s *BranchRestrictionPolicy) SetApps(val []BranchRestrictionPolicyAppsItem) {
	s.Apps = val
}

func (*BranchRestrictionPolicy) reposGetAccessRestrictionsRes() {}

type BranchRestrictionPolicyAppsItem struct {
	ID          OptInt                                        `json:"id"`
	Slug        OptString                                     `json:"slug"`
	NodeID      OptString                                     `json:"node_id"`
	Owner       OptBranchRestrictionPolicyAppsItemOwner       `json:"owner"`
	Name        OptString                                     `json:"name"`
	Description OptString                                     `json:"description"`
	ExternalURL OptString                                     `json:"external_url"`
	HTMLURL     OptString                                     `json:"html_url"`
	CreatedAt   OptString                                     `json:"created_at"`
	UpdatedAt   OptString                                     `json:"updated_at"`
	Permissions OptBranchRestrictionPolicyAppsItemPermissions `json:"permissions"`
	Events      []string                                      `json:"events"`
}

// GetID returns the value of ID.
func (s *BranchRestrictionPolicyAppsItem) GetID() OptInt {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *BranchRestrictionPolicyAppsItem) GetSlug() OptString {
	return s.Slug
}

// GetNodeID returns the value of NodeID.
func (s *BranchRestrictionPolicyAppsItem) GetNodeID() OptString {
	return s.NodeID
}

// GetOwner returns the value of Owner.
func (s *BranchRestrictionPolicyAppsItem) GetOwner() OptBranchRestrictionPolicyAppsItemOwner {
	return s.Owner
}

// GetName returns the value of Name.
func (s *BranchRestrictionPolicyAppsItem) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *BranchRestrictionPolicyAppsItem) GetDescription() OptString {
	return s.Description
}

// GetExternalURL returns the value of ExternalURL.
func (s *BranchRestrictionPolicyAppsItem) GetExternalURL() OptString {
	return s.ExternalURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *BranchRestrictionPolicyAppsItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BranchRestrictionPolicyAppsItem) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BranchRestrictionPolicyAppsItem) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *BranchRestrictionPolicyAppsItem) GetPermissions() OptBranchRestrictionPolicyAppsItemPermissions {
	return s.Permissions
}

// GetEvents returns the value of Events.
func (s *BranchRestrictionPolicyAppsItem) GetEvents() []string {
	return s.Events
}

// SetID sets the value of ID.
func (s *BranchRestrictionPolicyAppsItem) SetID(val OptInt) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *BranchRestrictionPolicyAppsItem) SetSlug(val OptString) {
	s.Slug = val
}

// SetNodeID sets the value of NodeID.
func (s *BranchRestrictionPolicyAppsItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetOwner sets the value of Owner.
func (s *BranchRestrictionPolicyAppsItem) SetOwner(val OptBranchRestrictionPolicyAppsItemOwner) {
	s.Owner = val
}

// SetName sets the value of Name.
func (s *BranchRestrictionPolicyAppsItem) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *BranchRestrictionPolicyAppsItem) SetDescription(val OptString) {
	s.Description = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *BranchRestrictionPolicyAppsItem) SetExternalURL(val OptString) {
	s.ExternalURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *BranchRestrictionPolicyAppsItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BranchRestrictionPolicyAppsItem) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BranchRestrictionPolicyAppsItem) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *BranchRestrictionPolicyAppsItem) SetPermissions(val OptBranchRestrictionPolicyAppsItemPermissions) {
	s.Permissions = val
}

// SetEvents sets the value of Events.
func (s *BranchRestrictionPolicyAppsItem) SetEvents(val []string) {
	s.Events = val
}

type BranchRestrictionPolicyAppsItemOwner struct {
	Login             OptString `json:"login"`
	ID                OptInt    `json:"id"`
	NodeID            OptString `json:"node_id"`
	URL               OptString `json:"url"`
	ReposURL          OptString `json:"repos_url"`
	EventsURL         OptString `json:"events_url"`
	HooksURL          OptString `json:"hooks_url"`
	IssuesURL         OptString `json:"issues_url"`
	MembersURL        OptString `json:"members_url"`
	PublicMembersURL  OptString `json:"public_members_url"`
	AvatarURL         OptString `json:"avatar_url"`
	Description       OptString `json:"description"`
	GravatarID        OptString `json:"gravatar_id"`
	HTMLURL           OptString `json:"html_url"`
	FollowersURL      OptString `json:"followers_url"`
	FollowingURL      OptString `json:"following_url"`
	GistsURL          OptString `json:"gists_url"`
	StarredURL        OptString `json:"starred_url"`
	SubscriptionsURL  OptString `json:"subscriptions_url"`
	OrganizationsURL  OptString `json:"organizations_url"`
	ReceivedEventsURL OptString `json:"received_events_url"`
	Type              OptString `json:"type"`
	SiteAdmin         OptBool   `json:"site_admin"`
}

// GetLogin returns the value of Login.
func (s *BranchRestrictionPolicyAppsItemOwner) GetLogin() OptString {
	return s.Login
}

// GetID returns the value of ID.
func (s *BranchRestrictionPolicyAppsItemOwner) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *BranchRestrictionPolicyAppsItemOwner) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetURL() OptString {
	return s.URL
}

// GetReposURL returns the value of ReposURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetReposURL() OptString {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetEventsURL() OptString {
	return s.EventsURL
}

// GetHooksURL returns the value of HooksURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetHooksURL() OptString {
	return s.HooksURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetIssuesURL() OptString {
	return s.IssuesURL
}

// GetMembersURL returns the value of MembersURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetMembersURL() OptString {
	return s.MembersURL
}

// GetPublicMembersURL returns the value of PublicMembersURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetPublicMembersURL() OptString {
	return s.PublicMembersURL
}

// GetAvatarURL returns the value of AvatarURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetAvatarURL() OptString {
	return s.AvatarURL
}

// GetDescription returns the value of Description.
func (s *BranchRestrictionPolicyAppsItemOwner) GetDescription() OptString {
	return s.Description
}

// GetGravatarID returns the value of GravatarID.
func (s *BranchRestrictionPolicyAppsItemOwner) GetGravatarID() OptString {
	return s.GravatarID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetFollowersURL() OptString {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetFollowingURL() OptString {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetGistsURL() OptString {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetStarredURL() OptString {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetSubscriptionsURL() OptString {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetOrganizationsURL() OptString {
	return s.OrganizationsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) GetReceivedEventsURL() OptString {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *BranchRestrictionPolicyAppsItemOwner) GetType() OptString {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *BranchRestrictionPolicyAppsItemOwner) GetSiteAdmin() OptBool {
	return s.SiteAdmin
}

// SetLogin sets the value of Login.
func (s *BranchRestrictionPolicyAppsItemOwner) SetLogin(val OptString) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *BranchRestrictionPolicyAppsItemOwner) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *BranchRestrictionPolicyAppsItemOwner) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetURL(val OptString) {
	s.URL = val
}

// SetReposURL sets the value of ReposURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetReposURL(val OptString) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetHooksURL(val OptString) {
	s.HooksURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetIssuesURL(val OptString) {
	s.IssuesURL = val
}

// SetMembersURL sets the value of MembersURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetMembersURL(val OptString) {
	s.MembersURL = val
}

// SetPublicMembersURL sets the value of PublicMembersURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetPublicMembersURL(val OptString) {
	s.PublicMembersURL = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetAvatarURL(val OptString) {
	s.AvatarURL = val
}

// SetDescription sets the value of Description.
func (s *BranchRestrictionPolicyAppsItemOwner) SetDescription(val OptString) {
	s.Description = val
}

// SetGravatarID sets the value of GravatarID.
func (s *BranchRestrictionPolicyAppsItemOwner) SetGravatarID(val OptString) {
	s.GravatarID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetFollowersURL(val OptString) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetFollowingURL(val OptString) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetGistsURL(val OptString) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetStarredURL(val OptString) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetSubscriptionsURL(val OptString) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetOrganizationsURL(val OptString) {
	s.OrganizationsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *BranchRestrictionPolicyAppsItemOwner) SetReceivedEventsURL(val OptString) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *BranchRestrictionPolicyAppsItemOwner) SetType(val OptString) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *BranchRestrictionPolicyAppsItemOwner) SetSiteAdmin(val OptBool) {
	s.SiteAdmin = val
}

type BranchRestrictionPolicyAppsItemPermissions struct {
	Metadata   OptString `json:"metadata"`
	Contents   OptString `json:"contents"`
	Issues     OptString `json:"issues"`
	SingleFile OptString `json:"single_file"`
}

// GetMetadata returns the value of Metadata.
func (s *BranchRestrictionPolicyAppsItemPermissions) GetMetadata() OptString {
	return s.Metadata
}

// GetContents returns the value of Contents.
func (s *BranchRestrictionPolicyAppsItemPermissions) GetContents() OptString {
	return s.Contents
}

// GetIssues returns the value of Issues.
func (s *BranchRestrictionPolicyAppsItemPermissions) GetIssues() OptString {
	return s.Issues
}

// GetSingleFile returns the value of SingleFile.
func (s *BranchRestrictionPolicyAppsItemPermissions) GetSingleFile() OptString {
	return s.SingleFile
}

// SetMetadata sets the value of Metadata.
func (s *BranchRestrictionPolicyAppsItemPermissions) SetMetadata(val OptString) {
	s.Metadata = val
}

// SetContents sets the value of Contents.
func (s *BranchRestrictionPolicyAppsItemPermissions) SetContents(val OptString) {
	s.Contents = val
}

// SetIssues sets the value of Issues.
func (s *BranchRestrictionPolicyAppsItemPermissions) SetIssues(val OptString) {
	s.Issues = val
}

// SetSingleFile sets the value of SingleFile.
func (s *BranchRestrictionPolicyAppsItemPermissions) SetSingleFile(val OptString) {
	s.SingleFile = val
}

type BranchRestrictionPolicyTeamsItem struct {
	ID              OptInt       `json:"id"`
	NodeID          OptString    `json:"node_id"`
	URL             OptString    `json:"url"`
	HTMLURL         OptString    `json:"html_url"`
	Name            OptString    `json:"name"`
	Slug            OptString    `json:"slug"`
	Description     OptNilString `json:"description"`
	Privacy         OptString    `json:"privacy"`
	Permission      OptString    `json:"permission"`
	MembersURL      OptString    `json:"members_url"`
	RepositoriesURL OptString    `json:"repositories_url"`
	Parent          OptNilString `json:"parent"`
}

// GetID returns the value of ID.
func (s *BranchRestrictionPolicyTeamsItem) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *BranchRestrictionPolicyTeamsItem) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *BranchRestrictionPolicyTeamsItem) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *BranchRestrictionPolicyTeamsItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetName returns the value of Name.
func (s *BranchRestrictionPolicyTeamsItem) GetName() OptString {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *BranchRestrictionPolicyTeamsItem) GetSlug() OptString {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *BranchRestrictionPolicyTeamsItem) GetDescription() OptNilString {
	return s.Description
}

// GetPrivacy returns the value of Privacy.
func (s *BranchRestrictionPolicyTeamsItem) GetPrivacy() OptString {
	return s.Privacy
}

// GetPermission returns the value of Permission.
func (s *BranchRestrictionPolicyTeamsItem) GetPermission() OptString {
	return s.Permission
}

// GetMembersURL returns the value of MembersURL.
func (s *BranchRestrictionPolicyTeamsItem) GetMembersURL() OptString {
	return s.MembersURL
}

// GetRepositoriesURL returns the value of RepositoriesURL.
func (s *BranchRestrictionPolicyTeamsItem) GetRepositoriesURL() OptString {
	return s.RepositoriesURL
}

// GetParent returns the value of Parent.
func (s *BranchRestrictionPolicyTeamsItem) GetParent() OptNilString {
	return s.Parent
}

// SetID sets the value of ID.
func (s *BranchRestrictionPolicyTeamsItem) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *BranchRestrictionPolicyTeamsItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *BranchRestrictionPolicyTeamsItem) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *BranchRestrictionPolicyTeamsItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetName sets the value of Name.
func (s *BranchRestrictionPolicyTeamsItem) SetName(val OptString) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *BranchRestrictionPolicyTeamsItem) SetSlug(val OptString) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *BranchRestrictionPolicyTeamsItem) SetDescription(val OptNilString) {
	s.Description = val
}

// SetPrivacy sets the value of Privacy.
func (s *BranchRestrictionPolicyTeamsItem) SetPrivacy(val OptString) {
	s.Privacy = val
}

// SetPermission sets the value of Permission.
func (s *BranchRestrictionPolicyTeamsItem) SetPermission(val OptString) {
	s.Permission = val
}

// SetMembersURL sets the value of MembersURL.
func (s *BranchRestrictionPolicyTeamsItem) SetMembersURL(val OptString) {
	s.MembersURL = val
}

// SetRepositoriesURL sets the value of RepositoriesURL.
func (s *BranchRestrictionPolicyTeamsItem) SetRepositoriesURL(val OptString) {
	s.RepositoriesURL = val
}

// SetParent sets the value of Parent.
func (s *BranchRestrictionPolicyTeamsItem) SetParent(val OptNilString) {
	s.Parent = val
}

type BranchRestrictionPolicyUsersItem struct {
	Login             OptString `json:"login"`
	ID                OptInt    `json:"id"`
	NodeID            OptString `json:"node_id"`
	AvatarURL         OptString `json:"avatar_url"`
	GravatarID        OptString `json:"gravatar_id"`
	URL               OptString `json:"url"`
	HTMLURL           OptString `json:"html_url"`
	FollowersURL      OptString `json:"followers_url"`
	FollowingURL      OptString `json:"following_url"`
	GistsURL          OptString `json:"gists_url"`
	StarredURL        OptString `json:"starred_url"`
	SubscriptionsURL  OptString `json:"subscriptions_url"`
	OrganizationsURL  OptString `json:"organizations_url"`
	ReposURL          OptString `json:"repos_url"`
	EventsURL         OptString `json:"events_url"`
	ReceivedEventsURL OptString `json:"received_events_url"`
	Type              OptString `json:"type"`
	SiteAdmin         OptBool   `json:"site_admin"`
}

// GetLogin returns the value of Login.
func (s *BranchRestrictionPolicyUsersItem) GetLogin() OptString {
	return s.Login
}

// GetID returns the value of ID.
func (s *BranchRestrictionPolicyUsersItem) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *BranchRestrictionPolicyUsersItem) GetNodeID() OptString {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *BranchRestrictionPolicyUsersItem) GetAvatarURL() OptString {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *BranchRestrictionPolicyUsersItem) GetGravatarID() OptString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *BranchRestrictionPolicyUsersItem) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *BranchRestrictionPolicyUsersItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *BranchRestrictionPolicyUsersItem) GetFollowersURL() OptString {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *BranchRestrictionPolicyUsersItem) GetFollowingURL() OptString {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *BranchRestrictionPolicyUsersItem) GetGistsURL() OptString {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *BranchRestrictionPolicyUsersItem) GetStarredURL() OptString {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *BranchRestrictionPolicyUsersItem) GetSubscriptionsURL() OptString {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *BranchRestrictionPolicyUsersItem) GetOrganizationsURL() OptString {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *BranchRestrictionPolicyUsersItem) GetReposURL() OptString {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *BranchRestrictionPolicyUsersItem) GetEventsURL() OptString {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *BranchRestrictionPolicyUsersItem) GetReceivedEventsURL() OptString {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *BranchRestrictionPolicyUsersItem) GetType() OptString {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *BranchRestrictionPolicyUsersItem) GetSiteAdmin() OptBool {
	return s.SiteAdmin
}

// SetLogin sets the value of Login.
func (s *BranchRestrictionPolicyUsersItem) SetLogin(val OptString) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *BranchRestrictionPolicyUsersItem) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *BranchRestrictionPolicyUsersItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *BranchRestrictionPolicyUsersItem) SetAvatarURL(val OptString) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *BranchRestrictionPolicyUsersItem) SetGravatarID(val OptString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *BranchRestrictionPolicyUsersItem) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *BranchRestrictionPolicyUsersItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *BranchRestrictionPolicyUsersItem) SetFollowersURL(val OptString) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *BranchRestrictionPolicyUsersItem) SetFollowingURL(val OptString) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *BranchRestrictionPolicyUsersItem) SetGistsURL(val OptString) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *BranchRestrictionPolicyUsersItem) SetStarredURL(val OptString) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *BranchRestrictionPolicyUsersItem) SetSubscriptionsURL(val OptString) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *BranchRestrictionPolicyUsersItem) SetOrganizationsURL(val OptString) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *BranchRestrictionPolicyUsersItem) SetReposURL(val OptString) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *BranchRestrictionPolicyUsersItem) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *BranchRestrictionPolicyUsersItem) SetReceivedEventsURL(val OptString) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *BranchRestrictionPolicyUsersItem) SetType(val OptString) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *BranchRestrictionPolicyUsersItem) SetSiteAdmin(val OptBool) {
	s.SiteAdmin = val
}

// Branch Short.
// Ref: #/components/schemas/branch-short
type BranchShort struct {
	Name      string            `json:"name"`
	Commit    BranchShortCommit `json:"commit"`
	Protected bool              `json:"protected"`
}

// GetName returns the value of Name.
func (s *BranchShort) GetName() string {
	return s.Name
}

// GetCommit returns the value of Commit.
func (s *BranchShort) GetCommit() BranchShortCommit {
	return s.Commit
}

// GetProtected returns the value of Protected.
func (s *BranchShort) GetProtected() bool {
	return s.Protected
}

// SetName sets the value of Name.
func (s *BranchShort) SetName(val string) {
	s.Name = val
}

// SetCommit sets the value of Commit.
func (s *BranchShort) SetCommit(val BranchShortCommit) {
	s.Commit = val
}

// SetProtected sets the value of Protected.
func (s *BranchShort) SetProtected(val bool) {
	s.Protected = val
}

type BranchShortCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

// GetSha returns the value of Sha.
func (s *BranchShortCommit) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *BranchShortCommit) GetURL() string {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *BranchShortCommit) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *BranchShortCommit) SetURL(val string) {
	s.URL = val
}

// Branch With Protection.
// Ref: #/components/schemas/branch-with-protection
type BranchWithProtection struct {
	Name                         string                    `json:"name"`
	Commit                       Commit                    `json:"commit"`
	Links                        BranchWithProtectionLinks `json:"_links"`
	Protected                    bool                      `json:"protected"`
	Protection                   BranchProtection          `json:"protection"`
	ProtectionURL                url.URL                   `json:"protection_url"`
	Pattern                      OptString                 `json:"pattern"`
	RequiredApprovingReviewCount OptInt                    `json:"required_approving_review_count"`
}

// GetName returns the value of Name.
func (s *BranchWithProtection) GetName() string {
	return s.Name
}

// GetCommit returns the value of Commit.
func (s *BranchWithProtection) GetCommit() Commit {
	return s.Commit
}

// GetLinks returns the value of Links.
func (s *BranchWithProtection) GetLinks() BranchWithProtectionLinks {
	return s.Links
}

// GetProtected returns the value of Protected.
func (s *BranchWithProtection) GetProtected() bool {
	return s.Protected
}

// GetProtection returns the value of Protection.
func (s *BranchWithProtection) GetProtection() BranchProtection {
	return s.Protection
}

// GetProtectionURL returns the value of ProtectionURL.
func (s *BranchWithProtection) GetProtectionURL() url.URL {
	return s.ProtectionURL
}

// GetPattern returns the value of Pattern.
func (s *BranchWithProtection) GetPattern() OptString {
	return s.Pattern
}

// GetRequiredApprovingReviewCount returns the value of RequiredApprovingReviewCount.
func (s *BranchWithProtection) GetRequiredApprovingReviewCount() OptInt {
	return s.RequiredApprovingReviewCount
}

// SetName sets the value of Name.
func (s *BranchWithProtection) SetName(val string) {
	s.Name = val
}

// SetCommit sets the value of Commit.
func (s *BranchWithProtection) SetCommit(val Commit) {
	s.Commit = val
}

// SetLinks sets the value of Links.
func (s *BranchWithProtection) SetLinks(val BranchWithProtectionLinks) {
	s.Links = val
}

// SetProtected sets the value of Protected.
func (s *BranchWithProtection) SetProtected(val bool) {
	s.Protected = val
}

// SetProtection sets the value of Protection.
func (s *BranchWithProtection) SetProtection(val BranchProtection) {
	s.Protection = val
}

// SetProtectionURL sets the value of ProtectionURL.
func (s *BranchWithProtection) SetProtectionURL(val url.URL) {
	s.ProtectionURL = val
}

// SetPattern sets the value of Pattern.
func (s *BranchWithProtection) SetPattern(val OptString) {
	s.Pattern = val
}

// SetRequiredApprovingReviewCount sets the value of RequiredApprovingReviewCount.
func (s *BranchWithProtection) SetRequiredApprovingReviewCount(val OptInt) {
	s.RequiredApprovingReviewCount = val
}

func (*BranchWithProtection) reposGetBranchRes()    {}
func (*BranchWithProtection) reposRenameBranchRes() {}

type BranchWithProtectionLinks struct {
	HTML string  `json:"html"`
	Self url.URL `json:"self"`
}

// GetHTML returns the value of HTML.
func (s *BranchWithProtectionLinks) GetHTML() string {
	return s.HTML
}

// GetSelf returns the value of Self.
func (s *BranchWithProtectionLinks) GetSelf() url.URL {
	return s.Self
}

// SetHTML sets the value of HTML.
func (s *BranchWithProtectionLinks) SetHTML(val string) {
	s.HTML = val
}

// SetSelf sets the value of Self.
func (s *BranchWithProtectionLinks) SetSelf(val url.URL) {
	s.Self = val
}

// Check Annotation.
// Ref: #/components/schemas/check-annotation
type CheckAnnotation struct {
	Path            string    `json:"path"`
	StartLine       int       `json:"start_line"`
	EndLine         int       `json:"end_line"`
	StartColumn     NilInt    `json:"start_column"`
	EndColumn       NilInt    `json:"end_column"`
	AnnotationLevel NilString `json:"annotation_level"`
	Title           NilString `json:"title"`
	Message         NilString `json:"message"`
	RawDetails      NilString `json:"raw_details"`
	BlobHref        string    `json:"blob_href"`
}

// GetPath returns the value of Path.
func (s *CheckAnnotation) GetPath() string {
	return s.Path
}

// GetStartLine returns the value of StartLine.
func (s *CheckAnnotation) GetStartLine() int {
	return s.StartLine
}

// GetEndLine returns the value of EndLine.
func (s *CheckAnnotation) GetEndLine() int {
	return s.EndLine
}

// GetStartColumn returns the value of StartColumn.
func (s *CheckAnnotation) GetStartColumn() NilInt {
	return s.StartColumn
}

// GetEndColumn returns the value of EndColumn.
func (s *CheckAnnotation) GetEndColumn() NilInt {
	return s.EndColumn
}

// GetAnnotationLevel returns the value of AnnotationLevel.
func (s *CheckAnnotation) GetAnnotationLevel() NilString {
	return s.AnnotationLevel
}

// GetTitle returns the value of Title.
func (s *CheckAnnotation) GetTitle() NilString {
	return s.Title
}

// GetMessage returns the value of Message.
func (s *CheckAnnotation) GetMessage() NilString {
	return s.Message
}

// GetRawDetails returns the value of RawDetails.
func (s *CheckAnnotation) GetRawDetails() NilString {
	return s.RawDetails
}

// GetBlobHref returns the value of BlobHref.
func (s *CheckAnnotation) GetBlobHref() string {
	return s.BlobHref
}

// SetPath sets the value of Path.
func (s *CheckAnnotation) SetPath(val string) {
	s.Path = val
}

// SetStartLine sets the value of StartLine.
func (s *CheckAnnotation) SetStartLine(val int) {
	s.StartLine = val
}

// SetEndLine sets the value of EndLine.
func (s *CheckAnnotation) SetEndLine(val int) {
	s.EndLine = val
}

// SetStartColumn sets the value of StartColumn.
func (s *CheckAnnotation) SetStartColumn(val NilInt) {
	s.StartColumn = val
}

// SetEndColumn sets the value of EndColumn.
func (s *CheckAnnotation) SetEndColumn(val NilInt) {
	s.EndColumn = val
}

// SetAnnotationLevel sets the value of AnnotationLevel.
func (s *CheckAnnotation) SetAnnotationLevel(val NilString) {
	s.AnnotationLevel = val
}

// SetTitle sets the value of Title.
func (s *CheckAnnotation) SetTitle(val NilString) {
	s.Title = val
}

// SetMessage sets the value of Message.
func (s *CheckAnnotation) SetMessage(val NilString) {
	s.Message = val
}

// SetRawDetails sets the value of RawDetails.
func (s *CheckAnnotation) SetRawDetails(val NilString) {
	s.RawDetails = val
}

// SetBlobHref sets the value of BlobHref.
func (s *CheckAnnotation) SetBlobHref(val string) {
	s.BlobHref = val
}

// A check performed on the code of a given code change.
// Ref: #/components/schemas/check-run
type CheckRun struct {
	// The id of the check.
	ID int `json:"id"`
	// The SHA of the commit that is being checked.
	HeadSha    string    `json:"head_sha"`
	NodeID     string    `json:"node_id"`
	ExternalID NilString `json:"external_id"`
	URL        string    `json:"url"`
	HTMLURL    NilString `json:"html_url"`
	DetailsURL NilString `json:"details_url"`
	// The phase of the lifecycle that the check is currently in.
	Status      CheckRunStatus        `json:"status"`
	Conclusion  NilCheckRunConclusion `json:"conclusion"`
	StartedAt   NilDateTime           `json:"started_at"`
	CompletedAt NilDateTime           `json:"completed_at"`
	Output      CheckRunOutput        `json:"output"`
	// The name of the check.
	Name         string                 `json:"name"`
	CheckSuite   NilCheckRunCheckSuite  `json:"check_suite"`
	App          NilNullableIntegration `json:"app"`
	PullRequests []PullRequestMinimal   `json:"pull_requests"`
	Deployment   OptDeploymentSimple    `json:"deployment"`
}

// GetID returns the value of ID.
func (s *CheckRun) GetID() int {
	return s.ID
}

// GetHeadSha returns the value of HeadSha.
func (s *CheckRun) GetHeadSha() string {
	return s.HeadSha
}

// GetNodeID returns the value of NodeID.
func (s *CheckRun) GetNodeID() string {
	return s.NodeID
}

// GetExternalID returns the value of ExternalID.
func (s *CheckRun) GetExternalID() NilString {
	return s.ExternalID
}

// GetURL returns the value of URL.
func (s *CheckRun) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CheckRun) GetHTMLURL() NilString {
	return s.HTMLURL
}

// GetDetailsURL returns the value of DetailsURL.
func (s *CheckRun) GetDetailsURL() NilString {
	return s.DetailsURL
}

// GetStatus returns the value of Status.
func (s *CheckRun) GetStatus() CheckRunStatus {
	return s.Status
}

// GetConclusion returns the value of Conclusion.
func (s *CheckRun) GetConclusion() NilCheckRunConclusion {
	return s.Conclusion
}

// GetStartedAt returns the value of StartedAt.
func (s *CheckRun) GetStartedAt() NilDateTime {
	return s.StartedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *CheckRun) GetCompletedAt() NilDateTime {
	return s.CompletedAt
}

// GetOutput returns the value of Output.
func (s *CheckRun) GetOutput() CheckRunOutput {
	return s.Output
}

// GetName returns the value of Name.
func (s *CheckRun) GetName() string {
	return s.Name
}

// GetCheckSuite returns the value of CheckSuite.
func (s *CheckRun) GetCheckSuite() NilCheckRunCheckSuite {
	return s.CheckSuite
}

// GetApp returns the value of App.
func (s *CheckRun) GetApp() NilNullableIntegration {
	return s.App
}

// GetPullRequests returns the value of PullRequests.
func (s *CheckRun) GetPullRequests() []PullRequestMinimal {
	return s.PullRequests
}

// GetDeployment returns the value of Deployment.
func (s *CheckRun) GetDeployment() OptDeploymentSimple {
	return s.Deployment
}

// SetID sets the value of ID.
func (s *CheckRun) SetID(val int) {
	s.ID = val
}

// SetHeadSha sets the value of HeadSha.
func (s *CheckRun) SetHeadSha(val string) {
	s.HeadSha = val
}

// SetNodeID sets the value of NodeID.
func (s *CheckRun) SetNodeID(val string) {
	s.NodeID = val
}

// SetExternalID sets the value of ExternalID.
func (s *CheckRun) SetExternalID(val NilString) {
	s.ExternalID = val
}

// SetURL sets the value of URL.
func (s *CheckRun) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CheckRun) SetHTMLURL(val NilString) {
	s.HTMLURL = val
}

// SetDetailsURL sets the value of DetailsURL.
func (s *CheckRun) SetDetailsURL(val NilString) {
	s.DetailsURL = val
}

// SetStatus sets the value of Status.
func (s *CheckRun) SetStatus(val CheckRunStatus) {
	s.Status = val
}

// SetConclusion sets the value of Conclusion.
func (s *CheckRun) SetConclusion(val NilCheckRunConclusion) {
	s.Conclusion = val
}

// SetStartedAt sets the value of StartedAt.
func (s *CheckRun) SetStartedAt(val NilDateTime) {
	s.StartedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *CheckRun) SetCompletedAt(val NilDateTime) {
	s.CompletedAt = val
}

// SetOutput sets the value of Output.
func (s *CheckRun) SetOutput(val CheckRunOutput) {
	s.Output = val
}

// SetName sets the value of Name.
func (s *CheckRun) SetName(val string) {
	s.Name = val
}

// SetCheckSuite sets the value of CheckSuite.
func (s *CheckRun) SetCheckSuite(val NilCheckRunCheckSuite) {
	s.CheckSuite = val
}

// SetApp sets the value of App.
func (s *CheckRun) SetApp(val NilNullableIntegration) {
	s.App = val
}

// SetPullRequests sets the value of PullRequests.
func (s *CheckRun) SetPullRequests(val []PullRequestMinimal) {
	s.PullRequests = val
}

// SetDeployment sets the value of Deployment.
func (s *CheckRun) SetDeployment(val OptDeploymentSimple) {
	s.Deployment = val
}

type CheckRunCheckSuite struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *CheckRunCheckSuite) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *CheckRunCheckSuite) SetID(val int) {
	s.ID = val
}

type CheckRunConclusion string

const (
	CheckRunConclusionSuccess        CheckRunConclusion = "success"
	CheckRunConclusionFailure        CheckRunConclusion = "failure"
	CheckRunConclusionNeutral        CheckRunConclusion = "neutral"
	CheckRunConclusionCancelled      CheckRunConclusion = "cancelled"
	CheckRunConclusionSkipped        CheckRunConclusion = "skipped"
	CheckRunConclusionTimedOut       CheckRunConclusion = "timed_out"
	CheckRunConclusionActionRequired CheckRunConclusion = "action_required"
)

// MarshalText implements encoding.TextMarshaler.
func (s CheckRunConclusion) MarshalText() ([]byte, error) {
	switch s {
	case CheckRunConclusionSuccess:
		return []byte(s), nil
	case CheckRunConclusionFailure:
		return []byte(s), nil
	case CheckRunConclusionNeutral:
		return []byte(s), nil
	case CheckRunConclusionCancelled:
		return []byte(s), nil
	case CheckRunConclusionSkipped:
		return []byte(s), nil
	case CheckRunConclusionTimedOut:
		return []byte(s), nil
	case CheckRunConclusionActionRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckRunConclusion) UnmarshalText(data []byte) error {
	switch CheckRunConclusion(data) {
	case CheckRunConclusionSuccess:
		*s = CheckRunConclusionSuccess
		return nil
	case CheckRunConclusionFailure:
		*s = CheckRunConclusionFailure
		return nil
	case CheckRunConclusionNeutral:
		*s = CheckRunConclusionNeutral
		return nil
	case CheckRunConclusionCancelled:
		*s = CheckRunConclusionCancelled
		return nil
	case CheckRunConclusionSkipped:
		*s = CheckRunConclusionSkipped
		return nil
	case CheckRunConclusionTimedOut:
		*s = CheckRunConclusionTimedOut
		return nil
	case CheckRunConclusionActionRequired:
		*s = CheckRunConclusionActionRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CheckRunOutput struct {
	Title            NilString `json:"title"`
	Summary          NilString `json:"summary"`
	Text             NilString `json:"text"`
	AnnotationsCount int       `json:"annotations_count"`
	AnnotationsURL   url.URL   `json:"annotations_url"`
}

// GetTitle returns the value of Title.
func (s *CheckRunOutput) GetTitle() NilString {
	return s.Title
}

// GetSummary returns the value of Summary.
func (s *CheckRunOutput) GetSummary() NilString {
	return s.Summary
}

// GetText returns the value of Text.
func (s *CheckRunOutput) GetText() NilString {
	return s.Text
}

// GetAnnotationsCount returns the value of AnnotationsCount.
func (s *CheckRunOutput) GetAnnotationsCount() int {
	return s.AnnotationsCount
}

// GetAnnotationsURL returns the value of AnnotationsURL.
func (s *CheckRunOutput) GetAnnotationsURL() url.URL {
	return s.AnnotationsURL
}

// SetTitle sets the value of Title.
func (s *CheckRunOutput) SetTitle(val NilString) {
	s.Title = val
}

// SetSummary sets the value of Summary.
func (s *CheckRunOutput) SetSummary(val NilString) {
	s.Summary = val
}

// SetText sets the value of Text.
func (s *CheckRunOutput) SetText(val NilString) {
	s.Text = val
}

// SetAnnotationsCount sets the value of AnnotationsCount.
func (s *CheckRunOutput) SetAnnotationsCount(val int) {
	s.AnnotationsCount = val
}

// SetAnnotationsURL sets the value of AnnotationsURL.
func (s *CheckRunOutput) SetAnnotationsURL(val url.URL) {
	s.AnnotationsURL = val
}

// The phase of the lifecycle that the check is currently in.
type CheckRunStatus string

const (
	CheckRunStatusQueued     CheckRunStatus = "queued"
	CheckRunStatusInProgress CheckRunStatus = "in_progress"
	CheckRunStatusCompleted  CheckRunStatus = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s CheckRunStatus) MarshalText() ([]byte, error) {
	switch s {
	case CheckRunStatusQueued:
		return []byte(s), nil
	case CheckRunStatusInProgress:
		return []byte(s), nil
	case CheckRunStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckRunStatus) UnmarshalText(data []byte) error {
	switch CheckRunStatus(data) {
	case CheckRunStatusQueued:
		*s = CheckRunStatusQueued
		return nil
	case CheckRunStatusInProgress:
		*s = CheckRunStatusInProgress
		return nil
	case CheckRunStatusCompleted:
		*s = CheckRunStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A suite of checks performed on the code of a given code change.
// Ref: #/components/schemas/check-suite
type CheckSuite struct {
	ID         int       `json:"id"`
	NodeID     string    `json:"node_id"`
	HeadBranch NilString `json:"head_branch"`
	// The SHA of the head commit that is being checked.
	HeadSha              string                  `json:"head_sha"`
	Status               NilCheckSuiteStatus     `json:"status"`
	Conclusion           NilCheckSuiteConclusion `json:"conclusion"`
	URL                  NilString               `json:"url"`
	Before               NilString               `json:"before"`
	After                NilString               `json:"after"`
	PullRequests         []PullRequestMinimal    `json:"pull_requests"`
	App                  NilNullableIntegration  `json:"app"`
	Repository           MinimalRepository       `json:"repository"`
	CreatedAt            NilDateTime             `json:"created_at"`
	UpdatedAt            NilDateTime             `json:"updated_at"`
	HeadCommit           SimpleCommit            `json:"head_commit"`
	LatestCheckRunsCount int                     `json:"latest_check_runs_count"`
	CheckRunsURL         string                  `json:"check_runs_url"`
}

// GetID returns the value of ID.
func (s *CheckSuite) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *CheckSuite) GetNodeID() string {
	return s.NodeID
}

// GetHeadBranch returns the value of HeadBranch.
func (s *CheckSuite) GetHeadBranch() NilString {
	return s.HeadBranch
}

// GetHeadSha returns the value of HeadSha.
func (s *CheckSuite) GetHeadSha() string {
	return s.HeadSha
}

// GetStatus returns the value of Status.
func (s *CheckSuite) GetStatus() NilCheckSuiteStatus {
	return s.Status
}

// GetConclusion returns the value of Conclusion.
func (s *CheckSuite) GetConclusion() NilCheckSuiteConclusion {
	return s.Conclusion
}

// GetURL returns the value of URL.
func (s *CheckSuite) GetURL() NilString {
	return s.URL
}

// GetBefore returns the value of Before.
func (s *CheckSuite) GetBefore() NilString {
	return s.Before
}

// GetAfter returns the value of After.
func (s *CheckSuite) GetAfter() NilString {
	return s.After
}

// GetPullRequests returns the value of PullRequests.
func (s *CheckSuite) GetPullRequests() []PullRequestMinimal {
	return s.PullRequests
}

// GetApp returns the value of App.
func (s *CheckSuite) GetApp() NilNullableIntegration {
	return s.App
}

// GetRepository returns the value of Repository.
func (s *CheckSuite) GetRepository() MinimalRepository {
	return s.Repository
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CheckSuite) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CheckSuite) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// GetHeadCommit returns the value of HeadCommit.
func (s *CheckSuite) GetHeadCommit() SimpleCommit {
	return s.HeadCommit
}

// GetLatestCheckRunsCount returns the value of LatestCheckRunsCount.
func (s *CheckSuite) GetLatestCheckRunsCount() int {
	return s.LatestCheckRunsCount
}

// GetCheckRunsURL returns the value of CheckRunsURL.
func (s *CheckSuite) GetCheckRunsURL() string {
	return s.CheckRunsURL
}

// SetID sets the value of ID.
func (s *CheckSuite) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *CheckSuite) SetNodeID(val string) {
	s.NodeID = val
}

// SetHeadBranch sets the value of HeadBranch.
func (s *CheckSuite) SetHeadBranch(val NilString) {
	s.HeadBranch = val
}

// SetHeadSha sets the value of HeadSha.
func (s *CheckSuite) SetHeadSha(val string) {
	s.HeadSha = val
}

// SetStatus sets the value of Status.
func (s *CheckSuite) SetStatus(val NilCheckSuiteStatus) {
	s.Status = val
}

// SetConclusion sets the value of Conclusion.
func (s *CheckSuite) SetConclusion(val NilCheckSuiteConclusion) {
	s.Conclusion = val
}

// SetURL sets the value of URL.
func (s *CheckSuite) SetURL(val NilString) {
	s.URL = val
}

// SetBefore sets the value of Before.
func (s *CheckSuite) SetBefore(val NilString) {
	s.Before = val
}

// SetAfter sets the value of After.
func (s *CheckSuite) SetAfter(val NilString) {
	s.After = val
}

// SetPullRequests sets the value of PullRequests.
func (s *CheckSuite) SetPullRequests(val []PullRequestMinimal) {
	s.PullRequests = val
}

// SetApp sets the value of App.
func (s *CheckSuite) SetApp(val NilNullableIntegration) {
	s.App = val
}

// SetRepository sets the value of Repository.
func (s *CheckSuite) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CheckSuite) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CheckSuite) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// SetHeadCommit sets the value of HeadCommit.
func (s *CheckSuite) SetHeadCommit(val SimpleCommit) {
	s.HeadCommit = val
}

// SetLatestCheckRunsCount sets the value of LatestCheckRunsCount.
func (s *CheckSuite) SetLatestCheckRunsCount(val int) {
	s.LatestCheckRunsCount = val
}

// SetCheckRunsURL sets the value of CheckRunsURL.
func (s *CheckSuite) SetCheckRunsURL(val string) {
	s.CheckRunsURL = val
}

type CheckSuiteConclusion string

const (
	CheckSuiteConclusionSuccess        CheckSuiteConclusion = "success"
	CheckSuiteConclusionFailure        CheckSuiteConclusion = "failure"
	CheckSuiteConclusionNeutral        CheckSuiteConclusion = "neutral"
	CheckSuiteConclusionCancelled      CheckSuiteConclusion = "cancelled"
	CheckSuiteConclusionSkipped        CheckSuiteConclusion = "skipped"
	CheckSuiteConclusionTimedOut       CheckSuiteConclusion = "timed_out"
	CheckSuiteConclusionActionRequired CheckSuiteConclusion = "action_required"
)

// MarshalText implements encoding.TextMarshaler.
func (s CheckSuiteConclusion) MarshalText() ([]byte, error) {
	switch s {
	case CheckSuiteConclusionSuccess:
		return []byte(s), nil
	case CheckSuiteConclusionFailure:
		return []byte(s), nil
	case CheckSuiteConclusionNeutral:
		return []byte(s), nil
	case CheckSuiteConclusionCancelled:
		return []byte(s), nil
	case CheckSuiteConclusionSkipped:
		return []byte(s), nil
	case CheckSuiteConclusionTimedOut:
		return []byte(s), nil
	case CheckSuiteConclusionActionRequired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckSuiteConclusion) UnmarshalText(data []byte) error {
	switch CheckSuiteConclusion(data) {
	case CheckSuiteConclusionSuccess:
		*s = CheckSuiteConclusionSuccess
		return nil
	case CheckSuiteConclusionFailure:
		*s = CheckSuiteConclusionFailure
		return nil
	case CheckSuiteConclusionNeutral:
		*s = CheckSuiteConclusionNeutral
		return nil
	case CheckSuiteConclusionCancelled:
		*s = CheckSuiteConclusionCancelled
		return nil
	case CheckSuiteConclusionSkipped:
		*s = CheckSuiteConclusionSkipped
		return nil
	case CheckSuiteConclusionTimedOut:
		*s = CheckSuiteConclusionTimedOut
		return nil
	case CheckSuiteConclusionActionRequired:
		*s = CheckSuiteConclusionActionRequired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Check suite configuration preferences for a repository.
// Ref: #/components/schemas/check-suite-preference
type CheckSuitePreference struct {
	Preferences CheckSuitePreferencePreferences `json:"preferences"`
	Repository  MinimalRepository               `json:"repository"`
}

// GetPreferences returns the value of Preferences.
func (s *CheckSuitePreference) GetPreferences() CheckSuitePreferencePreferences {
	return s.Preferences
}

// GetRepository returns the value of Repository.
func (s *CheckSuitePreference) GetRepository() MinimalRepository {
	return s.Repository
}

// SetPreferences sets the value of Preferences.
func (s *CheckSuitePreference) SetPreferences(val CheckSuitePreferencePreferences) {
	s.Preferences = val
}

// SetRepository sets the value of Repository.
func (s *CheckSuitePreference) SetRepository(val MinimalRepository) {
	s.Repository = val
}

type CheckSuitePreferencePreferences struct {
	AutoTriggerChecks []CheckSuitePreferencePreferencesAutoTriggerChecksItem `json:"auto_trigger_checks"`
}

// GetAutoTriggerChecks returns the value of AutoTriggerChecks.
func (s *CheckSuitePreferencePreferences) GetAutoTriggerChecks() []CheckSuitePreferencePreferencesAutoTriggerChecksItem {
	return s.AutoTriggerChecks
}

// SetAutoTriggerChecks sets the value of AutoTriggerChecks.
func (s *CheckSuitePreferencePreferences) SetAutoTriggerChecks(val []CheckSuitePreferencePreferencesAutoTriggerChecksItem) {
	s.AutoTriggerChecks = val
}

type CheckSuitePreferencePreferencesAutoTriggerChecksItem struct {
	AppID   int  `json:"app_id"`
	Setting bool `json:"setting"`
}

// GetAppID returns the value of AppID.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) GetAppID() int {
	return s.AppID
}

// GetSetting returns the value of Setting.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) GetSetting() bool {
	return s.Setting
}

// SetAppID sets the value of AppID.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) SetAppID(val int) {
	s.AppID = val
}

// SetSetting sets the value of Setting.
func (s *CheckSuitePreferencePreferencesAutoTriggerChecksItem) SetSetting(val bool) {
	s.Setting = val
}

type CheckSuiteStatus string

const (
	CheckSuiteStatusQueued     CheckSuiteStatus = "queued"
	CheckSuiteStatusInProgress CheckSuiteStatus = "in_progress"
	CheckSuiteStatusCompleted  CheckSuiteStatus = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s CheckSuiteStatus) MarshalText() ([]byte, error) {
	switch s {
	case CheckSuiteStatusQueued:
		return []byte(s), nil
	case CheckSuiteStatusInProgress:
		return []byte(s), nil
	case CheckSuiteStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckSuiteStatus) UnmarshalText(data []byte) error {
	switch CheckSuiteStatus(data) {
	case CheckSuiteStatusQueued:
		*s = CheckSuiteStatusQueued
		return nil
	case CheckSuiteStatusInProgress:
		*s = CheckSuiteStatusInProgress
		return nil
	case CheckSuiteStatusCompleted:
		*s = CheckSuiteStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChecksCreateSuiteCreated CheckSuite

func (*ChecksCreateSuiteCreated) checksCreateSuiteRes() {}

type ChecksCreateSuiteOK CheckSuite

func (*ChecksCreateSuiteOK) checksCreateSuiteRes() {}

type ChecksCreateSuiteReq struct {
	// The sha of the head commit.
	HeadSha string `json:"head_sha"`
}

// GetHeadSha returns the value of HeadSha.
func (s *ChecksCreateSuiteReq) GetHeadSha() string {
	return s.HeadSha
}

// SetHeadSha sets the value of HeadSha.
func (s *ChecksCreateSuiteReq) SetHeadSha(val string) {
	s.HeadSha = val
}

// ChecksListAnnotationsOKHeaders wraps []CheckAnnotation with response headers.
type ChecksListAnnotationsOKHeaders struct {
	Link     OptString
	Response []CheckAnnotation
}

// GetLink returns the value of Link.
func (s *ChecksListAnnotationsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ChecksListAnnotationsOKHeaders) GetResponse() []CheckAnnotation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ChecksListAnnotationsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ChecksListAnnotationsOKHeaders) SetResponse(val []CheckAnnotation) {
	s.Response = val
}

type ChecksListForRefFilter string

const (
	ChecksListForRefFilterLatest ChecksListForRefFilter = "latest"
	ChecksListForRefFilterAll    ChecksListForRefFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ChecksListForRefFilter) MarshalText() ([]byte, error) {
	switch s {
	case ChecksListForRefFilterLatest:
		return []byte(s), nil
	case ChecksListForRefFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChecksListForRefFilter) UnmarshalText(data []byte) error {
	switch ChecksListForRefFilter(data) {
	case ChecksListForRefFilterLatest:
		*s = ChecksListForRefFilterLatest
		return nil
	case ChecksListForRefFilterAll:
		*s = ChecksListForRefFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChecksListForRefOK struct {
	TotalCount int        `json:"total_count"`
	CheckRuns  []CheckRun `json:"check_runs"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ChecksListForRefOK) GetTotalCount() int {
	return s.TotalCount
}

// GetCheckRuns returns the value of CheckRuns.
func (s *ChecksListForRefOK) GetCheckRuns() []CheckRun {
	return s.CheckRuns
}

// SetTotalCount sets the value of TotalCount.
func (s *ChecksListForRefOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetCheckRuns sets the value of CheckRuns.
func (s *ChecksListForRefOK) SetCheckRuns(val []CheckRun) {
	s.CheckRuns = val
}

// ChecksListForRefOKHeaders wraps ChecksListForRefOK with response headers.
type ChecksListForRefOKHeaders struct {
	Link     OptString
	Response ChecksListForRefOK
}

// GetLink returns the value of Link.
func (s *ChecksListForRefOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ChecksListForRefOKHeaders) GetResponse() ChecksListForRefOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ChecksListForRefOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ChecksListForRefOKHeaders) SetResponse(val ChecksListForRefOK) {
	s.Response = val
}

type ChecksListForRefStatus string

const (
	ChecksListForRefStatusQueued     ChecksListForRefStatus = "queued"
	ChecksListForRefStatusInProgress ChecksListForRefStatus = "in_progress"
	ChecksListForRefStatusCompleted  ChecksListForRefStatus = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s ChecksListForRefStatus) MarshalText() ([]byte, error) {
	switch s {
	case ChecksListForRefStatusQueued:
		return []byte(s), nil
	case ChecksListForRefStatusInProgress:
		return []byte(s), nil
	case ChecksListForRefStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChecksListForRefStatus) UnmarshalText(data []byte) error {
	switch ChecksListForRefStatus(data) {
	case ChecksListForRefStatusQueued:
		*s = ChecksListForRefStatusQueued
		return nil
	case ChecksListForRefStatusInProgress:
		*s = ChecksListForRefStatusInProgress
		return nil
	case ChecksListForRefStatusCompleted:
		*s = ChecksListForRefStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChecksListForSuiteFilter string

const (
	ChecksListForSuiteFilterLatest ChecksListForSuiteFilter = "latest"
	ChecksListForSuiteFilterAll    ChecksListForSuiteFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ChecksListForSuiteFilter) MarshalText() ([]byte, error) {
	switch s {
	case ChecksListForSuiteFilterLatest:
		return []byte(s), nil
	case ChecksListForSuiteFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChecksListForSuiteFilter) UnmarshalText(data []byte) error {
	switch ChecksListForSuiteFilter(data) {
	case ChecksListForSuiteFilterLatest:
		*s = ChecksListForSuiteFilterLatest
		return nil
	case ChecksListForSuiteFilterAll:
		*s = ChecksListForSuiteFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChecksListForSuiteOK struct {
	TotalCount int        `json:"total_count"`
	CheckRuns  []CheckRun `json:"check_runs"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ChecksListForSuiteOK) GetTotalCount() int {
	return s.TotalCount
}

// GetCheckRuns returns the value of CheckRuns.
func (s *ChecksListForSuiteOK) GetCheckRuns() []CheckRun {
	return s.CheckRuns
}

// SetTotalCount sets the value of TotalCount.
func (s *ChecksListForSuiteOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetCheckRuns sets the value of CheckRuns.
func (s *ChecksListForSuiteOK) SetCheckRuns(val []CheckRun) {
	s.CheckRuns = val
}

// ChecksListForSuiteOKHeaders wraps ChecksListForSuiteOK with response headers.
type ChecksListForSuiteOKHeaders struct {
	Link     OptString
	Response ChecksListForSuiteOK
}

// GetLink returns the value of Link.
func (s *ChecksListForSuiteOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ChecksListForSuiteOKHeaders) GetResponse() ChecksListForSuiteOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ChecksListForSuiteOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ChecksListForSuiteOKHeaders) SetResponse(val ChecksListForSuiteOK) {
	s.Response = val
}

type ChecksListForSuiteStatus string

const (
	ChecksListForSuiteStatusQueued     ChecksListForSuiteStatus = "queued"
	ChecksListForSuiteStatusInProgress ChecksListForSuiteStatus = "in_progress"
	ChecksListForSuiteStatusCompleted  ChecksListForSuiteStatus = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s ChecksListForSuiteStatus) MarshalText() ([]byte, error) {
	switch s {
	case ChecksListForSuiteStatusQueued:
		return []byte(s), nil
	case ChecksListForSuiteStatusInProgress:
		return []byte(s), nil
	case ChecksListForSuiteStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChecksListForSuiteStatus) UnmarshalText(data []byte) error {
	switch ChecksListForSuiteStatus(data) {
	case ChecksListForSuiteStatusQueued:
		*s = ChecksListForSuiteStatusQueued
		return nil
	case ChecksListForSuiteStatusInProgress:
		*s = ChecksListForSuiteStatusInProgress
		return nil
	case ChecksListForSuiteStatusCompleted:
		*s = ChecksListForSuiteStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChecksListSuitesForRefOK struct {
	TotalCount  int          `json:"total_count"`
	CheckSuites []CheckSuite `json:"check_suites"`
}

// GetTotalCount returns the value of TotalCount.
func (s *ChecksListSuitesForRefOK) GetTotalCount() int {
	return s.TotalCount
}

// GetCheckSuites returns the value of CheckSuites.
func (s *ChecksListSuitesForRefOK) GetCheckSuites() []CheckSuite {
	return s.CheckSuites
}

// SetTotalCount sets the value of TotalCount.
func (s *ChecksListSuitesForRefOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetCheckSuites sets the value of CheckSuites.
func (s *ChecksListSuitesForRefOK) SetCheckSuites(val []CheckSuite) {
	s.CheckSuites = val
}

// ChecksListSuitesForRefOKHeaders wraps ChecksListSuitesForRefOK with response headers.
type ChecksListSuitesForRefOKHeaders struct {
	Link     OptString
	Response ChecksListSuitesForRefOK
}

// GetLink returns the value of Link.
func (s *ChecksListSuitesForRefOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ChecksListSuitesForRefOKHeaders) GetResponse() ChecksListSuitesForRefOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ChecksListSuitesForRefOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ChecksListSuitesForRefOKHeaders) SetResponse(val ChecksListSuitesForRefOK) {
	s.Response = val
}

type ChecksRerequestSuiteCreated struct{}

type ChecksSetSuitesPreferencesReq struct {
	// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled
	// by default. See the [`auto_trigger_checks` object](https://docs.github.
	// com/rest/reference/checks#auto_trigger_checks-object) description for details.
	AutoTriggerChecks []ChecksSetSuitesPreferencesReqAutoTriggerChecksItem `json:"auto_trigger_checks"`
}

// GetAutoTriggerChecks returns the value of AutoTriggerChecks.
func (s *ChecksSetSuitesPreferencesReq) GetAutoTriggerChecks() []ChecksSetSuitesPreferencesReqAutoTriggerChecksItem {
	return s.AutoTriggerChecks
}

// SetAutoTriggerChecks sets the value of AutoTriggerChecks.
func (s *ChecksSetSuitesPreferencesReq) SetAutoTriggerChecks(val []ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) {
	s.AutoTriggerChecks = val
}

type ChecksSetSuitesPreferencesReqAutoTriggerChecksItem struct {
	// The `id` of the GitHub App.
	AppID int `json:"app_id"`
	// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or
	// `false` to disable them.
	Setting bool `json:"setting"`
}

// GetAppID returns the value of AppID.
func (s *ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) GetAppID() int {
	return s.AppID
}

// GetSetting returns the value of Setting.
func (s *ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) GetSetting() bool {
	return s.Setting
}

// SetAppID sets the value of AppID.
func (s *ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) SetAppID(val int) {
	s.AppID = val
}

// SetSetting sets the value of Setting.
func (s *ChecksSetSuitesPreferencesReqAutoTriggerChecksItem) SetSetting(val bool) {
	s.Setting = val
}

// Clone Traffic.
// Ref: #/components/schemas/clone-traffic
type CloneTraffic struct {
	Count   int       `json:"count"`
	Uniques int       `json:"uniques"`
	Clones  []Traffic `json:"clones"`
}

// GetCount returns the value of Count.
func (s *CloneTraffic) GetCount() int {
	return s.Count
}

// GetUniques returns the value of Uniques.
func (s *CloneTraffic) GetUniques() int {
	return s.Uniques
}

// GetClones returns the value of Clones.
func (s *CloneTraffic) GetClones() []Traffic {
	return s.Clones
}

// SetCount sets the value of Count.
func (s *CloneTraffic) SetCount(val int) {
	s.Count = val
}

// SetUniques sets the value of Uniques.
func (s *CloneTraffic) SetUniques(val int) {
	s.Uniques = val
}

// SetClones sets the value of Clones.
func (s *CloneTraffic) SetClones(val []Traffic) {
	s.Clones = val
}

func (*CloneTraffic) reposGetClonesRes() {}

type CodeFrequencyStat []int

// Code Of Conduct.
// Ref: #/components/schemas/code-of-conduct
type CodeOfConduct struct {
	Key     string    `json:"key"`
	Name    string    `json:"name"`
	URL     url.URL   `json:"url"`
	Body    OptString `json:"body"`
	HTMLURL NilURI    `json:"html_url"`
}

// GetKey returns the value of Key.
func (s *CodeOfConduct) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *CodeOfConduct) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *CodeOfConduct) GetURL() url.URL {
	return s.URL
}

// GetBody returns the value of Body.
func (s *CodeOfConduct) GetBody() OptString {
	return s.Body
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CodeOfConduct) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// SetKey sets the value of Key.
func (s *CodeOfConduct) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *CodeOfConduct) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *CodeOfConduct) SetURL(val url.URL) {
	s.URL = val
}

// SetBody sets the value of Body.
func (s *CodeOfConduct) SetBody(val OptString) {
	s.Body = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CodeOfConduct) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

func (*CodeOfConduct) codesOfConductGetConductCodeRes() {}

// Code of Conduct Simple.
// Ref: #/components/schemas/code-of-conduct-simple
type CodeOfConductSimple struct {
	URL     url.URL `json:"url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	HTMLURL NilURI  `json:"html_url"`
}

// GetURL returns the value of URL.
func (s *CodeOfConductSimple) GetURL() url.URL {
	return s.URL
}

// GetKey returns the value of Key.
func (s *CodeOfConductSimple) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *CodeOfConductSimple) GetName() string {
	return s.Name
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CodeOfConductSimple) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// SetURL sets the value of URL.
func (s *CodeOfConductSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetKey sets the value of Key.
func (s *CodeOfConductSimple) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *CodeOfConductSimple) SetName(val string) {
	s.Name = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CodeOfConductSimple) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// Ref: #/components/schemas/code-scanning-alert
type CodeScanningAlert struct {
	Number    AlertNumber    `json:"number"`
	CreatedAt AlertCreatedAt `json:"created_at"`
	URL       AlertURL       `json:"url"`
	HTMLURL   AlertHTMLURL   `json:"html_url"`
	// Deprecated: schema marks this property as deprecated.
	Instances          jx.Raw                              `json:"instances"`
	InstancesURL       AlertInstancesURL                   `json:"instances_url"`
	State              CodeScanningAlertState              `json:"state"`
	DismissedBy        NilNullableSimpleUser               `json:"dismissed_by"`
	DismissedAt        NilCodeScanningAlertDismissedAt     `json:"dismissed_at"`
	DismissedReason    NilCodeScanningAlertDismissedReason `json:"dismissed_reason"`
	Rule               CodeScanningAlertRule               `json:"rule"`
	Tool               CodeScanningAnalysisTool            `json:"tool"`
	MostRecentInstance CodeScanningAlertInstance           `json:"most_recent_instance"`
}

// GetNumber returns the value of Number.
func (s *CodeScanningAlert) GetNumber() AlertNumber {
	return s.Number
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CodeScanningAlert) GetCreatedAt() AlertCreatedAt {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *CodeScanningAlert) GetURL() AlertURL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CodeScanningAlert) GetHTMLURL() AlertHTMLURL {
	return s.HTMLURL
}

// GetInstances returns the value of Instances.
func (s *CodeScanningAlert) GetInstances() jx.Raw {
	return s.Instances
}

// GetInstancesURL returns the value of InstancesURL.
func (s *CodeScanningAlert) GetInstancesURL() AlertInstancesURL {
	return s.InstancesURL
}

// GetState returns the value of State.
func (s *CodeScanningAlert) GetState() CodeScanningAlertState {
	return s.State
}

// GetDismissedBy returns the value of DismissedBy.
func (s *CodeScanningAlert) GetDismissedBy() NilNullableSimpleUser {
	return s.DismissedBy
}

// GetDismissedAt returns the value of DismissedAt.
func (s *CodeScanningAlert) GetDismissedAt() NilCodeScanningAlertDismissedAt {
	return s.DismissedAt
}

// GetDismissedReason returns the value of DismissedReason.
func (s *CodeScanningAlert) GetDismissedReason() NilCodeScanningAlertDismissedReason {
	return s.DismissedReason
}

// GetRule returns the value of Rule.
func (s *CodeScanningAlert) GetRule() CodeScanningAlertRule {
	return s.Rule
}

// GetTool returns the value of Tool.
func (s *CodeScanningAlert) GetTool() CodeScanningAnalysisTool {
	return s.Tool
}

// GetMostRecentInstance returns the value of MostRecentInstance.
func (s *CodeScanningAlert) GetMostRecentInstance() CodeScanningAlertInstance {
	return s.MostRecentInstance
}

// SetNumber sets the value of Number.
func (s *CodeScanningAlert) SetNumber(val AlertNumber) {
	s.Number = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CodeScanningAlert) SetCreatedAt(val AlertCreatedAt) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *CodeScanningAlert) SetURL(val AlertURL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CodeScanningAlert) SetHTMLURL(val AlertHTMLURL) {
	s.HTMLURL = val
}

// SetInstances sets the value of Instances.
func (s *CodeScanningAlert) SetInstances(val jx.Raw) {
	s.Instances = val
}

// SetInstancesURL sets the value of InstancesURL.
func (s *CodeScanningAlert) SetInstancesURL(val AlertInstancesURL) {
	s.InstancesURL = val
}

// SetState sets the value of State.
func (s *CodeScanningAlert) SetState(val CodeScanningAlertState) {
	s.State = val
}

// SetDismissedBy sets the value of DismissedBy.
func (s *CodeScanningAlert) SetDismissedBy(val NilNullableSimpleUser) {
	s.DismissedBy = val
}

// SetDismissedAt sets the value of DismissedAt.
func (s *CodeScanningAlert) SetDismissedAt(val NilCodeScanningAlertDismissedAt) {
	s.DismissedAt = val
}

// SetDismissedReason sets the value of DismissedReason.
func (s *CodeScanningAlert) SetDismissedReason(val NilCodeScanningAlertDismissedReason) {
	s.DismissedReason = val
}

// SetRule sets the value of Rule.
func (s *CodeScanningAlert) SetRule(val CodeScanningAlertRule) {
	s.Rule = val
}

// SetTool sets the value of Tool.
func (s *CodeScanningAlert) SetTool(val CodeScanningAnalysisTool) {
	s.Tool = val
}

// SetMostRecentInstance sets the value of MostRecentInstance.
func (s *CodeScanningAlert) SetMostRecentInstance(val CodeScanningAlertInstance) {
	s.MostRecentInstance = val
}

func (*CodeScanningAlert) codeScanningGetAlertRes()    {}
func (*CodeScanningAlert) codeScanningUpdateAlertRes() {}

// A classification of the file. For example to identify it as generated.
// Ref: #/components/schemas/code-scanning-alert-classification
type CodeScanningAlertClassification string

const (
	CodeScanningAlertClassificationSource    CodeScanningAlertClassification = "source"
	CodeScanningAlertClassificationGenerated CodeScanningAlertClassification = "generated"
	CodeScanningAlertClassificationTest      CodeScanningAlertClassification = "test"
	CodeScanningAlertClassificationLibrary   CodeScanningAlertClassification = "library"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertClassification) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertClassificationSource:
		return []byte(s), nil
	case CodeScanningAlertClassificationGenerated:
		return []byte(s), nil
	case CodeScanningAlertClassificationTest:
		return []byte(s), nil
	case CodeScanningAlertClassificationLibrary:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertClassification) UnmarshalText(data []byte) error {
	switch CodeScanningAlertClassification(data) {
	case CodeScanningAlertClassificationSource:
		*s = CodeScanningAlertClassificationSource
		return nil
	case CodeScanningAlertClassificationGenerated:
		*s = CodeScanningAlertClassificationGenerated
		return nil
	case CodeScanningAlertClassificationTest:
		*s = CodeScanningAlertClassificationTest
		return nil
	case CodeScanningAlertClassificationLibrary:
		*s = CodeScanningAlertClassificationLibrary
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CodeScanningAlertDismissedAt time.Time

// **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be
// one of: `false positive`, `won't fix`, and `used in tests`.
// Ref: #/components/schemas/code-scanning-alert-dismissed-reason
type CodeScanningAlertDismissedReason string

const (
	CodeScanningAlertDismissedReasonFalsePositive CodeScanningAlertDismissedReason = "false positive"
	CodeScanningAlertDismissedReasonWonTFix       CodeScanningAlertDismissedReason = "won't fix"
	CodeScanningAlertDismissedReasonUsedInTests   CodeScanningAlertDismissedReason = "used in tests"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertDismissedReason) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertDismissedReasonFalsePositive:
		return []byte(s), nil
	case CodeScanningAlertDismissedReasonWonTFix:
		return []byte(s), nil
	case CodeScanningAlertDismissedReasonUsedInTests:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertDismissedReason) UnmarshalText(data []byte) error {
	switch CodeScanningAlertDismissedReason(data) {
	case CodeScanningAlertDismissedReasonFalsePositive:
		*s = CodeScanningAlertDismissedReasonFalsePositive
		return nil
	case CodeScanningAlertDismissedReasonWonTFix:
		*s = CodeScanningAlertDismissedReasonWonTFix
		return nil
	case CodeScanningAlertDismissedReasonUsedInTests:
		*s = CodeScanningAlertDismissedReasonUsedInTests
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CodeScanningAlertEnvironment string

// Ref: #/components/schemas/code-scanning-alert-instance
type CodeScanningAlertInstance struct {
	Ref         OptCodeScanningRef                  `json:"ref"`
	AnalysisKey OptCodeScanningAnalysisAnalysisKey  `json:"analysis_key"`
	Environment OptCodeScanningAlertEnvironment     `json:"environment"`
	Category    OptCodeScanningAnalysisCategory     `json:"category"`
	State       OptCodeScanningAlertState           `json:"state"`
	CommitSha   OptString                           `json:"commit_sha"`
	Message     OptCodeScanningAlertInstanceMessage `json:"message"`
	Location    OptCodeScanningAlertLocation        `json:"location"`
	HTMLURL     OptString                           `json:"html_url"`
	// Classifications that have been applied to the file that triggered the alert.
	// For example identifying it as documentation, or a generated file.
	Classifications []NilCodeScanningAlertClassification `json:"classifications"`
}

// GetRef returns the value of Ref.
func (s *CodeScanningAlertInstance) GetRef() OptCodeScanningRef {
	return s.Ref
}

// GetAnalysisKey returns the value of AnalysisKey.
func (s *CodeScanningAlertInstance) GetAnalysisKey() OptCodeScanningAnalysisAnalysisKey {
	return s.AnalysisKey
}

// GetEnvironment returns the value of Environment.
func (s *CodeScanningAlertInstance) GetEnvironment() OptCodeScanningAlertEnvironment {
	return s.Environment
}

// GetCategory returns the value of Category.
func (s *CodeScanningAlertInstance) GetCategory() OptCodeScanningAnalysisCategory {
	return s.Category
}

// GetState returns the value of State.
func (s *CodeScanningAlertInstance) GetState() OptCodeScanningAlertState {
	return s.State
}

// GetCommitSha returns the value of CommitSha.
func (s *CodeScanningAlertInstance) GetCommitSha() OptString {
	return s.CommitSha
}

// GetMessage returns the value of Message.
func (s *CodeScanningAlertInstance) GetMessage() OptCodeScanningAlertInstanceMessage {
	return s.Message
}

// GetLocation returns the value of Location.
func (s *CodeScanningAlertInstance) GetLocation() OptCodeScanningAlertLocation {
	return s.Location
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CodeScanningAlertInstance) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetClassifications returns the value of Classifications.
func (s *CodeScanningAlertInstance) GetClassifications() []NilCodeScanningAlertClassification {
	return s.Classifications
}

// SetRef sets the value of Ref.
func (s *CodeScanningAlertInstance) SetRef(val OptCodeScanningRef) {
	s.Ref = val
}

// SetAnalysisKey sets the value of AnalysisKey.
func (s *CodeScanningAlertInstance) SetAnalysisKey(val OptCodeScanningAnalysisAnalysisKey) {
	s.AnalysisKey = val
}

// SetEnvironment sets the value of Environment.
func (s *CodeScanningAlertInstance) SetEnvironment(val OptCodeScanningAlertEnvironment) {
	s.Environment = val
}

// SetCategory sets the value of Category.
func (s *CodeScanningAlertInstance) SetCategory(val OptCodeScanningAnalysisCategory) {
	s.Category = val
}

// SetState sets the value of State.
func (s *CodeScanningAlertInstance) SetState(val OptCodeScanningAlertState) {
	s.State = val
}

// SetCommitSha sets the value of CommitSha.
func (s *CodeScanningAlertInstance) SetCommitSha(val OptString) {
	s.CommitSha = val
}

// SetMessage sets the value of Message.
func (s *CodeScanningAlertInstance) SetMessage(val OptCodeScanningAlertInstanceMessage) {
	s.Message = val
}

// SetLocation sets the value of Location.
func (s *CodeScanningAlertInstance) SetLocation(val OptCodeScanningAlertLocation) {
	s.Location = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CodeScanningAlertInstance) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetClassifications sets the value of Classifications.
func (s *CodeScanningAlertInstance) SetClassifications(val []NilCodeScanningAlertClassification) {
	s.Classifications = val
}

type CodeScanningAlertInstanceMessage struct {
	Text OptString `json:"text"`
}

// GetText returns the value of Text.
func (s *CodeScanningAlertInstanceMessage) GetText() OptString {
	return s.Text
}

// SetText sets the value of Text.
func (s *CodeScanningAlertInstanceMessage) SetText(val OptString) {
	s.Text = val
}

// Ref: #/components/schemas/code-scanning-alert-items
type CodeScanningAlertItems struct {
	Number             AlertNumber                         `json:"number"`
	CreatedAt          AlertCreatedAt                      `json:"created_at"`
	URL                AlertURL                            `json:"url"`
	HTMLURL            AlertHTMLURL                        `json:"html_url"`
	InstancesURL       AlertInstancesURL                   `json:"instances_url"`
	State              CodeScanningAlertState              `json:"state"`
	DismissedBy        NilNullableSimpleUser               `json:"dismissed_by"`
	DismissedAt        NilCodeScanningAlertDismissedAt     `json:"dismissed_at"`
	DismissedReason    NilCodeScanningAlertDismissedReason `json:"dismissed_reason"`
	Rule               CodeScanningAlertRuleSummary        `json:"rule"`
	Tool               CodeScanningAnalysisTool            `json:"tool"`
	MostRecentInstance CodeScanningAlertInstance           `json:"most_recent_instance"`
}

// GetNumber returns the value of Number.
func (s *CodeScanningAlertItems) GetNumber() AlertNumber {
	return s.Number
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CodeScanningAlertItems) GetCreatedAt() AlertCreatedAt {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *CodeScanningAlertItems) GetURL() AlertURL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CodeScanningAlertItems) GetHTMLURL() AlertHTMLURL {
	return s.HTMLURL
}

// GetInstancesURL returns the value of InstancesURL.
func (s *CodeScanningAlertItems) GetInstancesURL() AlertInstancesURL {
	return s.InstancesURL
}

// GetState returns the value of State.
func (s *CodeScanningAlertItems) GetState() CodeScanningAlertState {
	return s.State
}

// GetDismissedBy returns the value of DismissedBy.
func (s *CodeScanningAlertItems) GetDismissedBy() NilNullableSimpleUser {
	return s.DismissedBy
}

// GetDismissedAt returns the value of DismissedAt.
func (s *CodeScanningAlertItems) GetDismissedAt() NilCodeScanningAlertDismissedAt {
	return s.DismissedAt
}

// GetDismissedReason returns the value of DismissedReason.
func (s *CodeScanningAlertItems) GetDismissedReason() NilCodeScanningAlertDismissedReason {
	return s.DismissedReason
}

// GetRule returns the value of Rule.
func (s *CodeScanningAlertItems) GetRule() CodeScanningAlertRuleSummary {
	return s.Rule
}

// GetTool returns the value of Tool.
func (s *CodeScanningAlertItems) GetTool() CodeScanningAnalysisTool {
	return s.Tool
}

// GetMostRecentInstance returns the value of MostRecentInstance.
func (s *CodeScanningAlertItems) GetMostRecentInstance() CodeScanningAlertInstance {
	return s.MostRecentInstance
}

// SetNumber sets the value of Number.
func (s *CodeScanningAlertItems) SetNumber(val AlertNumber) {
	s.Number = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CodeScanningAlertItems) SetCreatedAt(val AlertCreatedAt) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *CodeScanningAlertItems) SetURL(val AlertURL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CodeScanningAlertItems) SetHTMLURL(val AlertHTMLURL) {
	s.HTMLURL = val
}

// SetInstancesURL sets the value of InstancesURL.
func (s *CodeScanningAlertItems) SetInstancesURL(val AlertInstancesURL) {
	s.InstancesURL = val
}

// SetState sets the value of State.
func (s *CodeScanningAlertItems) SetState(val CodeScanningAlertState) {
	s.State = val
}

// SetDismissedBy sets the value of DismissedBy.
func (s *CodeScanningAlertItems) SetDismissedBy(val NilNullableSimpleUser) {
	s.DismissedBy = val
}

// SetDismissedAt sets the value of DismissedAt.
func (s *CodeScanningAlertItems) SetDismissedAt(val NilCodeScanningAlertDismissedAt) {
	s.DismissedAt = val
}

// SetDismissedReason sets the value of DismissedReason.
func (s *CodeScanningAlertItems) SetDismissedReason(val NilCodeScanningAlertDismissedReason) {
	s.DismissedReason = val
}

// SetRule sets the value of Rule.
func (s *CodeScanningAlertItems) SetRule(val CodeScanningAlertRuleSummary) {
	s.Rule = val
}

// SetTool sets the value of Tool.
func (s *CodeScanningAlertItems) SetTool(val CodeScanningAnalysisTool) {
	s.Tool = val
}

// SetMostRecentInstance sets the value of MostRecentInstance.
func (s *CodeScanningAlertItems) SetMostRecentInstance(val CodeScanningAlertInstance) {
	s.MostRecentInstance = val
}

// Describe a region within a file for the alert.
// Ref: #/components/schemas/code-scanning-alert-location
type CodeScanningAlertLocation struct {
	Path        OptString `json:"path"`
	StartLine   OptInt    `json:"start_line"`
	EndLine     OptInt    `json:"end_line"`
	StartColumn OptInt    `json:"start_column"`
	EndColumn   OptInt    `json:"end_column"`
}

// GetPath returns the value of Path.
func (s *CodeScanningAlertLocation) GetPath() OptString {
	return s.Path
}

// GetStartLine returns the value of StartLine.
func (s *CodeScanningAlertLocation) GetStartLine() OptInt {
	return s.StartLine
}

// GetEndLine returns the value of EndLine.
func (s *CodeScanningAlertLocation) GetEndLine() OptInt {
	return s.EndLine
}

// GetStartColumn returns the value of StartColumn.
func (s *CodeScanningAlertLocation) GetStartColumn() OptInt {
	return s.StartColumn
}

// GetEndColumn returns the value of EndColumn.
func (s *CodeScanningAlertLocation) GetEndColumn() OptInt {
	return s.EndColumn
}

// SetPath sets the value of Path.
func (s *CodeScanningAlertLocation) SetPath(val OptString) {
	s.Path = val
}

// SetStartLine sets the value of StartLine.
func (s *CodeScanningAlertLocation) SetStartLine(val OptInt) {
	s.StartLine = val
}

// SetEndLine sets the value of EndLine.
func (s *CodeScanningAlertLocation) SetEndLine(val OptInt) {
	s.EndLine = val
}

// SetStartColumn sets the value of StartColumn.
func (s *CodeScanningAlertLocation) SetStartColumn(val OptInt) {
	s.StartColumn = val
}

// SetEndColumn sets the value of EndColumn.
func (s *CodeScanningAlertLocation) SetEndColumn(val OptInt) {
	s.EndColumn = val
}

// Ref: #/components/schemas/code-scanning-alert-rule
type CodeScanningAlertRule struct {
	// A unique identifier for the rule used to detect the alert.
	ID OptNilString `json:"id"`
	// The name of the rule used to detect the alert.
	Name OptString `json:"name"`
	// The severity of the alert.
	Severity OptNilCodeScanningAlertRuleSeverity `json:"severity"`
	// The security severity of the alert.
	SecuritySeverityLevel OptNilCodeScanningAlertRuleSecuritySeverityLevel `json:"security_severity_level"`
	// A short description of the rule used to detect the alert.
	Description OptString `json:"description"`
	// Description of the rule used to detect the alert.
	FullDescription OptString `json:"full_description"`
	// A set of tags applicable for the rule.
	Tags OptNilStringArray `json:"tags"`
	// Detailed documentation for the rule as GitHub Flavored Markdown.
	Help OptNilString `json:"help"`
}

// GetID returns the value of ID.
func (s *CodeScanningAlertRule) GetID() OptNilString {
	return s.ID
}

// GetName returns the value of Name.
func (s *CodeScanningAlertRule) GetName() OptString {
	return s.Name
}

// GetSeverity returns the value of Severity.
func (s *CodeScanningAlertRule) GetSeverity() OptNilCodeScanningAlertRuleSeverity {
	return s.Severity
}

// GetSecuritySeverityLevel returns the value of SecuritySeverityLevel.
func (s *CodeScanningAlertRule) GetSecuritySeverityLevel() OptNilCodeScanningAlertRuleSecuritySeverityLevel {
	return s.SecuritySeverityLevel
}

// GetDescription returns the value of Description.
func (s *CodeScanningAlertRule) GetDescription() OptString {
	return s.Description
}

// GetFullDescription returns the value of FullDescription.
func (s *CodeScanningAlertRule) GetFullDescription() OptString {
	return s.FullDescription
}

// GetTags returns the value of Tags.
func (s *CodeScanningAlertRule) GetTags() OptNilStringArray {
	return s.Tags
}

// GetHelp returns the value of Help.
func (s *CodeScanningAlertRule) GetHelp() OptNilString {
	return s.Help
}

// SetID sets the value of ID.
func (s *CodeScanningAlertRule) SetID(val OptNilString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CodeScanningAlertRule) SetName(val OptString) {
	s.Name = val
}

// SetSeverity sets the value of Severity.
func (s *CodeScanningAlertRule) SetSeverity(val OptNilCodeScanningAlertRuleSeverity) {
	s.Severity = val
}

// SetSecuritySeverityLevel sets the value of SecuritySeverityLevel.
func (s *CodeScanningAlertRule) SetSecuritySeverityLevel(val OptNilCodeScanningAlertRuleSecuritySeverityLevel) {
	s.SecuritySeverityLevel = val
}

// SetDescription sets the value of Description.
func (s *CodeScanningAlertRule) SetDescription(val OptString) {
	s.Description = val
}

// SetFullDescription sets the value of FullDescription.
func (s *CodeScanningAlertRule) SetFullDescription(val OptString) {
	s.FullDescription = val
}

// SetTags sets the value of Tags.
func (s *CodeScanningAlertRule) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetHelp sets the value of Help.
func (s *CodeScanningAlertRule) SetHelp(val OptNilString) {
	s.Help = val
}

// The security severity of the alert.
type CodeScanningAlertRuleSecuritySeverityLevel string

const (
	CodeScanningAlertRuleSecuritySeverityLevelLow      CodeScanningAlertRuleSecuritySeverityLevel = "low"
	CodeScanningAlertRuleSecuritySeverityLevelMedium   CodeScanningAlertRuleSecuritySeverityLevel = "medium"
	CodeScanningAlertRuleSecuritySeverityLevelHigh     CodeScanningAlertRuleSecuritySeverityLevel = "high"
	CodeScanningAlertRuleSecuritySeverityLevelCritical CodeScanningAlertRuleSecuritySeverityLevel = "critical"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertRuleSecuritySeverityLevel) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertRuleSecuritySeverityLevelLow:
		return []byte(s), nil
	case CodeScanningAlertRuleSecuritySeverityLevelMedium:
		return []byte(s), nil
	case CodeScanningAlertRuleSecuritySeverityLevelHigh:
		return []byte(s), nil
	case CodeScanningAlertRuleSecuritySeverityLevelCritical:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertRuleSecuritySeverityLevel) UnmarshalText(data []byte) error {
	switch CodeScanningAlertRuleSecuritySeverityLevel(data) {
	case CodeScanningAlertRuleSecuritySeverityLevelLow:
		*s = CodeScanningAlertRuleSecuritySeverityLevelLow
		return nil
	case CodeScanningAlertRuleSecuritySeverityLevelMedium:
		*s = CodeScanningAlertRuleSecuritySeverityLevelMedium
		return nil
	case CodeScanningAlertRuleSecuritySeverityLevelHigh:
		*s = CodeScanningAlertRuleSecuritySeverityLevelHigh
		return nil
	case CodeScanningAlertRuleSecuritySeverityLevelCritical:
		*s = CodeScanningAlertRuleSecuritySeverityLevelCritical
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The severity of the alert.
type CodeScanningAlertRuleSeverity string

const (
	CodeScanningAlertRuleSeverityNone    CodeScanningAlertRuleSeverity = "none"
	CodeScanningAlertRuleSeverityNote    CodeScanningAlertRuleSeverity = "note"
	CodeScanningAlertRuleSeverityWarning CodeScanningAlertRuleSeverity = "warning"
	CodeScanningAlertRuleSeverityError   CodeScanningAlertRuleSeverity = "error"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertRuleSeverity) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertRuleSeverityNone:
		return []byte(s), nil
	case CodeScanningAlertRuleSeverityNote:
		return []byte(s), nil
	case CodeScanningAlertRuleSeverityWarning:
		return []byte(s), nil
	case CodeScanningAlertRuleSeverityError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertRuleSeverity) UnmarshalText(data []byte) error {
	switch CodeScanningAlertRuleSeverity(data) {
	case CodeScanningAlertRuleSeverityNone:
		*s = CodeScanningAlertRuleSeverityNone
		return nil
	case CodeScanningAlertRuleSeverityNote:
		*s = CodeScanningAlertRuleSeverityNote
		return nil
	case CodeScanningAlertRuleSeverityWarning:
		*s = CodeScanningAlertRuleSeverityWarning
		return nil
	case CodeScanningAlertRuleSeverityError:
		*s = CodeScanningAlertRuleSeverityError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/code-scanning-alert-rule-summary
type CodeScanningAlertRuleSummary struct {
	// A unique identifier for the rule used to detect the alert.
	ID OptNilString `json:"id"`
	// The name of the rule used to detect the alert.
	Name OptString `json:"name"`
	// The severity of the alert.
	Severity OptNilCodeScanningAlertRuleSummarySeverity `json:"severity"`
	// A short description of the rule used to detect the alert.
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *CodeScanningAlertRuleSummary) GetID() OptNilString {
	return s.ID
}

// GetName returns the value of Name.
func (s *CodeScanningAlertRuleSummary) GetName() OptString {
	return s.Name
}

// GetSeverity returns the value of Severity.
func (s *CodeScanningAlertRuleSummary) GetSeverity() OptNilCodeScanningAlertRuleSummarySeverity {
	return s.Severity
}

// GetDescription returns the value of Description.
func (s *CodeScanningAlertRuleSummary) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *CodeScanningAlertRuleSummary) SetID(val OptNilString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CodeScanningAlertRuleSummary) SetName(val OptString) {
	s.Name = val
}

// SetSeverity sets the value of Severity.
func (s *CodeScanningAlertRuleSummary) SetSeverity(val OptNilCodeScanningAlertRuleSummarySeverity) {
	s.Severity = val
}

// SetDescription sets the value of Description.
func (s *CodeScanningAlertRuleSummary) SetDescription(val OptString) {
	s.Description = val
}

// The severity of the alert.
type CodeScanningAlertRuleSummarySeverity string

const (
	CodeScanningAlertRuleSummarySeverityNone    CodeScanningAlertRuleSummarySeverity = "none"
	CodeScanningAlertRuleSummarySeverityNote    CodeScanningAlertRuleSummarySeverity = "note"
	CodeScanningAlertRuleSummarySeverityWarning CodeScanningAlertRuleSummarySeverity = "warning"
	CodeScanningAlertRuleSummarySeverityError   CodeScanningAlertRuleSummarySeverity = "error"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertRuleSummarySeverity) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertRuleSummarySeverityNone:
		return []byte(s), nil
	case CodeScanningAlertRuleSummarySeverityNote:
		return []byte(s), nil
	case CodeScanningAlertRuleSummarySeverityWarning:
		return []byte(s), nil
	case CodeScanningAlertRuleSummarySeverityError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertRuleSummarySeverity) UnmarshalText(data []byte) error {
	switch CodeScanningAlertRuleSummarySeverity(data) {
	case CodeScanningAlertRuleSummarySeverityNone:
		*s = CodeScanningAlertRuleSummarySeverityNone
		return nil
	case CodeScanningAlertRuleSummarySeverityNote:
		*s = CodeScanningAlertRuleSummarySeverityNote
		return nil
	case CodeScanningAlertRuleSummarySeverityWarning:
		*s = CodeScanningAlertRuleSummarySeverityWarning
		return nil
	case CodeScanningAlertRuleSummarySeverityError:
		*s = CodeScanningAlertRuleSummarySeverityError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide
// `dismissed_reason` when you set the state to `dismissed`.
// Ref: #/components/schemas/code-scanning-alert-set-state
type CodeScanningAlertSetState string

const (
	CodeScanningAlertSetStateOpen      CodeScanningAlertSetState = "open"
	CodeScanningAlertSetStateDismissed CodeScanningAlertSetState = "dismissed"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertSetState) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertSetStateOpen:
		return []byte(s), nil
	case CodeScanningAlertSetStateDismissed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertSetState) UnmarshalText(data []byte) error {
	switch CodeScanningAlertSetState(data) {
	case CodeScanningAlertSetStateOpen:
		*s = CodeScanningAlertSetStateOpen
		return nil
	case CodeScanningAlertSetStateDismissed:
		*s = CodeScanningAlertSetStateDismissed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// State of a code scanning alert.
// Ref: #/components/schemas/code-scanning-alert-state
type CodeScanningAlertState string

const (
	CodeScanningAlertStateOpen      CodeScanningAlertState = "open"
	CodeScanningAlertStateClosed    CodeScanningAlertState = "closed"
	CodeScanningAlertStateDismissed CodeScanningAlertState = "dismissed"
	CodeScanningAlertStateFixed     CodeScanningAlertState = "fixed"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningAlertState) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningAlertStateOpen:
		return []byte(s), nil
	case CodeScanningAlertStateClosed:
		return []byte(s), nil
	case CodeScanningAlertStateDismissed:
		return []byte(s), nil
	case CodeScanningAlertStateFixed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningAlertState) UnmarshalText(data []byte) error {
	switch CodeScanningAlertState(data) {
	case CodeScanningAlertStateOpen:
		*s = CodeScanningAlertStateOpen
		return nil
	case CodeScanningAlertStateClosed:
		*s = CodeScanningAlertStateClosed
		return nil
	case CodeScanningAlertStateDismissed:
		*s = CodeScanningAlertStateDismissed
		return nil
	case CodeScanningAlertStateFixed:
		*s = CodeScanningAlertStateFixed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/code-scanning-analysis
type CodeScanningAnalysis struct {
	Ref         CodeScanningRef                 `json:"ref"`
	CommitSha   CodeScanningAnalysisCommitSha   `json:"commit_sha"`
	AnalysisKey CodeScanningAnalysisAnalysisKey `json:"analysis_key"`
	Environment CodeScanningAnalysisEnvironment `json:"environment"`
	Category    OptCodeScanningAnalysisCategory `json:"category"`
	Error       string                          `json:"error"`
	CreatedAt   CodeScanningAnalysisCreatedAt   `json:"created_at"`
	// The total number of results in the analysis.
	ResultsCount int `json:"results_count"`
	// The total number of rules used in the analysis.
	RulesCount int `json:"rules_count"`
	// Unique identifier for this analysis.
	ID        int                         `json:"id"`
	URL       CodeScanningAnalysisURL     `json:"url"`
	SarifID   CodeScanningAnalysisSarifID `json:"sarif_id"`
	Tool      CodeScanningAnalysisTool    `json:"tool"`
	Deletable bool                        `json:"deletable"`
	// Warning generated when processing the analysis.
	Warning  string    `json:"warning"`
	ToolName OptString `json:"tool_name"`
}

// GetRef returns the value of Ref.
func (s *CodeScanningAnalysis) GetRef() CodeScanningRef {
	return s.Ref
}

// GetCommitSha returns the value of CommitSha.
func (s *CodeScanningAnalysis) GetCommitSha() CodeScanningAnalysisCommitSha {
	return s.CommitSha
}

// GetAnalysisKey returns the value of AnalysisKey.
func (s *CodeScanningAnalysis) GetAnalysisKey() CodeScanningAnalysisAnalysisKey {
	return s.AnalysisKey
}

// GetEnvironment returns the value of Environment.
func (s *CodeScanningAnalysis) GetEnvironment() CodeScanningAnalysisEnvironment {
	return s.Environment
}

// GetCategory returns the value of Category.
func (s *CodeScanningAnalysis) GetCategory() OptCodeScanningAnalysisCategory {
	return s.Category
}

// GetError returns the value of Error.
func (s *CodeScanningAnalysis) GetError() string {
	return s.Error
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CodeScanningAnalysis) GetCreatedAt() CodeScanningAnalysisCreatedAt {
	return s.CreatedAt
}

// GetResultsCount returns the value of ResultsCount.
func (s *CodeScanningAnalysis) GetResultsCount() int {
	return s.ResultsCount
}

// GetRulesCount returns the value of RulesCount.
func (s *CodeScanningAnalysis) GetRulesCount() int {
	return s.RulesCount
}

// GetID returns the value of ID.
func (s *CodeScanningAnalysis) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *CodeScanningAnalysis) GetURL() CodeScanningAnalysisURL {
	return s.URL
}

// GetSarifID returns the value of SarifID.
func (s *CodeScanningAnalysis) GetSarifID() CodeScanningAnalysisSarifID {
	return s.SarifID
}

// GetTool returns the value of Tool.
func (s *CodeScanningAnalysis) GetTool() CodeScanningAnalysisTool {
	return s.Tool
}

// GetDeletable returns the value of Deletable.
func (s *CodeScanningAnalysis) GetDeletable() bool {
	return s.Deletable
}

// GetWarning returns the value of Warning.
func (s *CodeScanningAnalysis) GetWarning() string {
	return s.Warning
}

// GetToolName returns the value of ToolName.
func (s *CodeScanningAnalysis) GetToolName() OptString {
	return s.ToolName
}

// SetRef sets the value of Ref.
func (s *CodeScanningAnalysis) SetRef(val CodeScanningRef) {
	s.Ref = val
}

// SetCommitSha sets the value of CommitSha.
func (s *CodeScanningAnalysis) SetCommitSha(val CodeScanningAnalysisCommitSha) {
	s.CommitSha = val
}

// SetAnalysisKey sets the value of AnalysisKey.
func (s *CodeScanningAnalysis) SetAnalysisKey(val CodeScanningAnalysisAnalysisKey) {
	s.AnalysisKey = val
}

// SetEnvironment sets the value of Environment.
func (s *CodeScanningAnalysis) SetEnvironment(val CodeScanningAnalysisEnvironment) {
	s.Environment = val
}

// SetCategory sets the value of Category.
func (s *CodeScanningAnalysis) SetCategory(val OptCodeScanningAnalysisCategory) {
	s.Category = val
}

// SetError sets the value of Error.
func (s *CodeScanningAnalysis) SetError(val string) {
	s.Error = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CodeScanningAnalysis) SetCreatedAt(val CodeScanningAnalysisCreatedAt) {
	s.CreatedAt = val
}

// SetResultsCount sets the value of ResultsCount.
func (s *CodeScanningAnalysis) SetResultsCount(val int) {
	s.ResultsCount = val
}

// SetRulesCount sets the value of RulesCount.
func (s *CodeScanningAnalysis) SetRulesCount(val int) {
	s.RulesCount = val
}

// SetID sets the value of ID.
func (s *CodeScanningAnalysis) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *CodeScanningAnalysis) SetURL(val CodeScanningAnalysisURL) {
	s.URL = val
}

// SetSarifID sets the value of SarifID.
func (s *CodeScanningAnalysis) SetSarifID(val CodeScanningAnalysisSarifID) {
	s.SarifID = val
}

// SetTool sets the value of Tool.
func (s *CodeScanningAnalysis) SetTool(val CodeScanningAnalysisTool) {
	s.Tool = val
}

// SetDeletable sets the value of Deletable.
func (s *CodeScanningAnalysis) SetDeletable(val bool) {
	s.Deletable = val
}

// SetWarning sets the value of Warning.
func (s *CodeScanningAnalysis) SetWarning(val string) {
	s.Warning = val
}

// SetToolName sets the value of ToolName.
func (s *CodeScanningAnalysis) SetToolName(val OptString) {
	s.ToolName = val
}

func (*CodeScanningAnalysis) codeScanningGetAnalysisRes() {}

type CodeScanningAnalysisAnalysisKey string

type CodeScanningAnalysisCategory string

type CodeScanningAnalysisCommitSha string

type CodeScanningAnalysisCreatedAt time.Time

// Successful deletion of a code scanning analysis.
// Ref: #/components/schemas/code-scanning-analysis-deletion
type CodeScanningAnalysisDeletion struct {
	// Next deletable analysis in chain, without last analysis deletion confirmation.
	NextAnalysisURL NilURI `json:"next_analysis_url"`
	// Next deletable analysis in chain, with last analysis deletion confirmation.
	ConfirmDeleteURL NilURI `json:"confirm_delete_url"`
}

// GetNextAnalysisURL returns the value of NextAnalysisURL.
func (s *CodeScanningAnalysisDeletion) GetNextAnalysisURL() NilURI {
	return s.NextAnalysisURL
}

// GetConfirmDeleteURL returns the value of ConfirmDeleteURL.
func (s *CodeScanningAnalysisDeletion) GetConfirmDeleteURL() NilURI {
	return s.ConfirmDeleteURL
}

// SetNextAnalysisURL sets the value of NextAnalysisURL.
func (s *CodeScanningAnalysisDeletion) SetNextAnalysisURL(val NilURI) {
	s.NextAnalysisURL = val
}

// SetConfirmDeleteURL sets the value of ConfirmDeleteURL.
func (s *CodeScanningAnalysisDeletion) SetConfirmDeleteURL(val NilURI) {
	s.ConfirmDeleteURL = val
}

func (*CodeScanningAnalysisDeletion) codeScanningDeleteAnalysisRes() {}

type CodeScanningAnalysisEnvironment string

type CodeScanningAnalysisSarifFile string

type CodeScanningAnalysisSarifID string

// Ref: #/components/schemas/code-scanning-analysis-tool
type CodeScanningAnalysisTool struct {
	Name    OptCodeScanningAnalysisToolName       `json:"name"`
	Version OptNilCodeScanningAnalysisToolVersion `json:"version"`
	GUID    OptNilCodeScanningAnalysisToolGUID    `json:"guid"`
}

// GetName returns the value of Name.
func (s *CodeScanningAnalysisTool) GetName() OptCodeScanningAnalysisToolName {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *CodeScanningAnalysisTool) GetVersion() OptNilCodeScanningAnalysisToolVersion {
	return s.Version
}

// GetGUID returns the value of GUID.
func (s *CodeScanningAnalysisTool) GetGUID() OptNilCodeScanningAnalysisToolGUID {
	return s.GUID
}

// SetName sets the value of Name.
func (s *CodeScanningAnalysisTool) SetName(val OptCodeScanningAnalysisToolName) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *CodeScanningAnalysisTool) SetVersion(val OptNilCodeScanningAnalysisToolVersion) {
	s.Version = val
}

// SetGUID sets the value of GUID.
func (s *CodeScanningAnalysisTool) SetGUID(val OptNilCodeScanningAnalysisToolGUID) {
	s.GUID = val
}

type CodeScanningAnalysisToolGUID string

type CodeScanningAnalysisToolName string

type CodeScanningAnalysisToolVersion string

type CodeScanningAnalysisURL url.URL

type CodeScanningDeleteAnalysisBadRequest BasicError

func (*CodeScanningDeleteAnalysisBadRequest) codeScanningDeleteAnalysisRes() {}

type CodeScanningDeleteAnalysisForbidden BasicError

func (*CodeScanningDeleteAnalysisForbidden) codeScanningDeleteAnalysisRes() {}

type CodeScanningDeleteAnalysisNotFound BasicError

func (*CodeScanningDeleteAnalysisNotFound) codeScanningDeleteAnalysisRes() {}

type CodeScanningGetAlertForbidden BasicError

func (*CodeScanningGetAlertForbidden) codeScanningGetAlertRes() {}

type CodeScanningGetAlertNotFound BasicError

func (*CodeScanningGetAlertNotFound) codeScanningGetAlertRes() {}

type CodeScanningGetAnalysisForbidden BasicError

func (*CodeScanningGetAnalysisForbidden) codeScanningGetAnalysisRes() {}

type CodeScanningGetAnalysisNotFound BasicError

func (*CodeScanningGetAnalysisNotFound) codeScanningGetAnalysisRes() {}

type CodeScanningGetAnalysisOKApplicationJSONSarif struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CodeScanningGetAnalysisOKApplicationJSONSarif) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

func (*CodeScanningGetAnalysisOKApplicationJSONSarif) codeScanningGetAnalysisRes() {}

// CodeScanningGetSarifNotFound is response for CodeScanningGetSarif operation.
type CodeScanningGetSarifNotFound struct{}

func (*CodeScanningGetSarifNotFound) codeScanningGetSarifRes() {}

type CodeScanningListAlertInstancesForbidden BasicError

func (*CodeScanningListAlertInstancesForbidden) codeScanningListAlertInstancesRes() {}

type CodeScanningListAlertInstancesNotFound BasicError

func (*CodeScanningListAlertInstancesNotFound) codeScanningListAlertInstancesRes() {}

type CodeScanningListAlertInstancesOKApplicationJSON []CodeScanningAlertInstance

func (*CodeScanningListAlertInstancesOKApplicationJSON) codeScanningListAlertInstancesRes() {}

type CodeScanningListAlertsForRepoForbidden BasicError

func (*CodeScanningListAlertsForRepoForbidden) codeScanningListAlertsForRepoRes() {}

type CodeScanningListAlertsForRepoNotFound BasicError

func (*CodeScanningListAlertsForRepoNotFound) codeScanningListAlertsForRepoRes() {}

type CodeScanningListAlertsForRepoOKApplicationJSON []CodeScanningAlertItems

func (*CodeScanningListAlertsForRepoOKApplicationJSON) codeScanningListAlertsForRepoRes() {}

type CodeScanningListRecentAnalysesForbidden BasicError

func (*CodeScanningListRecentAnalysesForbidden) codeScanningListRecentAnalysesRes() {}

type CodeScanningListRecentAnalysesNotFound BasicError

func (*CodeScanningListRecentAnalysesNotFound) codeScanningListRecentAnalysesRes() {}

type CodeScanningListRecentAnalysesOKApplicationJSON []CodeScanningAnalysis

func (*CodeScanningListRecentAnalysesOKApplicationJSON) codeScanningListRecentAnalysesRes() {}

type CodeScanningRef string

// Ref: #/components/schemas/code-scanning-sarifs-receipt
type CodeScanningSarifsReceipt struct {
	ID OptCodeScanningAnalysisSarifID `json:"id"`
	// The REST API URL for checking the status of the upload.
	URL OptURI `json:"url"`
}

// GetID returns the value of ID.
func (s *CodeScanningSarifsReceipt) GetID() OptCodeScanningAnalysisSarifID {
	return s.ID
}

// GetURL returns the value of URL.
func (s *CodeScanningSarifsReceipt) GetURL() OptURI {
	return s.URL
}

// SetID sets the value of ID.
func (s *CodeScanningSarifsReceipt) SetID(val OptCodeScanningAnalysisSarifID) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *CodeScanningSarifsReceipt) SetURL(val OptURI) {
	s.URL = val
}

func (*CodeScanningSarifsReceipt) codeScanningUploadSarifRes() {}

// Ref: #/components/schemas/code-scanning-sarifs-status
type CodeScanningSarifsStatus struct {
	// `pending` files have not yet been processed, while `complete` means all results in the SARIF have
	// been stored.
	ProcessingStatus OptCodeScanningSarifsStatusProcessingStatus `json:"processing_status"`
	// The REST API URL for getting the analyses associated with the upload.
	AnalysesURL OptNilURI `json:"analyses_url"`
}

// GetProcessingStatus returns the value of ProcessingStatus.
func (s *CodeScanningSarifsStatus) GetProcessingStatus() OptCodeScanningSarifsStatusProcessingStatus {
	return s.ProcessingStatus
}

// GetAnalysesURL returns the value of AnalysesURL.
func (s *CodeScanningSarifsStatus) GetAnalysesURL() OptNilURI {
	return s.AnalysesURL
}

// SetProcessingStatus sets the value of ProcessingStatus.
func (s *CodeScanningSarifsStatus) SetProcessingStatus(val OptCodeScanningSarifsStatusProcessingStatus) {
	s.ProcessingStatus = val
}

// SetAnalysesURL sets the value of AnalysesURL.
func (s *CodeScanningSarifsStatus) SetAnalysesURL(val OptNilURI) {
	s.AnalysesURL = val
}

func (*CodeScanningSarifsStatus) codeScanningGetSarifRes() {}

// `pending` files have not yet been processed, while `complete` means all results in the SARIF have
// been stored.
type CodeScanningSarifsStatusProcessingStatus string

const (
	CodeScanningSarifsStatusProcessingStatusPending  CodeScanningSarifsStatusProcessingStatus = "pending"
	CodeScanningSarifsStatusProcessingStatusComplete CodeScanningSarifsStatusProcessingStatus = "complete"
)

// MarshalText implements encoding.TextMarshaler.
func (s CodeScanningSarifsStatusProcessingStatus) MarshalText() ([]byte, error) {
	switch s {
	case CodeScanningSarifsStatusProcessingStatusPending:
		return []byte(s), nil
	case CodeScanningSarifsStatusProcessingStatusComplete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeScanningSarifsStatusProcessingStatus) UnmarshalText(data []byte) error {
	switch CodeScanningSarifsStatusProcessingStatus(data) {
	case CodeScanningSarifsStatusProcessingStatusPending:
		*s = CodeScanningSarifsStatusProcessingStatusPending
		return nil
	case CodeScanningSarifsStatusProcessingStatusComplete:
		*s = CodeScanningSarifsStatusProcessingStatusComplete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CodeScanningUpdateAlertForbidden BasicError

func (*CodeScanningUpdateAlertForbidden) codeScanningUpdateAlertRes() {}

type CodeScanningUpdateAlertNotFound BasicError

func (*CodeScanningUpdateAlertNotFound) codeScanningUpdateAlertRes() {}

type CodeScanningUpdateAlertReq struct {
	State           CodeScanningAlertSetState              `json:"state"`
	DismissedReason OptNilCodeScanningAlertDismissedReason `json:"dismissed_reason"`
}

// GetState returns the value of State.
func (s *CodeScanningUpdateAlertReq) GetState() CodeScanningAlertSetState {
	return s.State
}

// GetDismissedReason returns the value of DismissedReason.
func (s *CodeScanningUpdateAlertReq) GetDismissedReason() OptNilCodeScanningAlertDismissedReason {
	return s.DismissedReason
}

// SetState sets the value of State.
func (s *CodeScanningUpdateAlertReq) SetState(val CodeScanningAlertSetState) {
	s.State = val
}

// SetDismissedReason sets the value of DismissedReason.
func (s *CodeScanningUpdateAlertReq) SetDismissedReason(val OptNilCodeScanningAlertDismissedReason) {
	s.DismissedReason = val
}

// CodeScanningUploadSarifBadRequest is response for CodeScanningUploadSarif operation.
type CodeScanningUploadSarifBadRequest struct{}

func (*CodeScanningUploadSarifBadRequest) codeScanningUploadSarifRes() {}

type CodeScanningUploadSarifForbidden BasicError

func (*CodeScanningUploadSarifForbidden) codeScanningUploadSarifRes() {}

type CodeScanningUploadSarifNotFound BasicError

func (*CodeScanningUploadSarifNotFound) codeScanningUploadSarifRes() {}

type CodeScanningUploadSarifReq struct {
	CommitSha CodeScanningAnalysisCommitSha `json:"commit_sha"`
	Ref       CodeScanningRef               `json:"ref"`
	Sarif     CodeScanningAnalysisSarifFile `json:"sarif"`
	// The base directory used in the analysis, as it appears in the SARIF file.
	// This property is used to convert file paths from absolute to relative, so that alerts can be
	// mapped to their correct location in the repository.
	CheckoutURI OptURI `json:"checkout_uri"`
	// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.
	// org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	StartedAt OptDateTime `json:"started_at"`
	// The name of the tool used to generate the code scanning analysis. If this parameter is not used,
	// the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be
	// available for filtering using the `tool_guid` parameter of operations such as `GET
	// /repos/{owner}/{repo}/code-scanning/alerts`.
	ToolName OptString `json:"tool_name"`
}

// GetCommitSha returns the value of CommitSha.
func (s *CodeScanningUploadSarifReq) GetCommitSha() CodeScanningAnalysisCommitSha {
	return s.CommitSha
}

// GetRef returns the value of Ref.
func (s *CodeScanningUploadSarifReq) GetRef() CodeScanningRef {
	return s.Ref
}

// GetSarif returns the value of Sarif.
func (s *CodeScanningUploadSarifReq) GetSarif() CodeScanningAnalysisSarifFile {
	return s.Sarif
}

// GetCheckoutURI returns the value of CheckoutURI.
func (s *CodeScanningUploadSarifReq) GetCheckoutURI() OptURI {
	return s.CheckoutURI
}

// GetStartedAt returns the value of StartedAt.
func (s *CodeScanningUploadSarifReq) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetToolName returns the value of ToolName.
func (s *CodeScanningUploadSarifReq) GetToolName() OptString {
	return s.ToolName
}

// SetCommitSha sets the value of CommitSha.
func (s *CodeScanningUploadSarifReq) SetCommitSha(val CodeScanningAnalysisCommitSha) {
	s.CommitSha = val
}

// SetRef sets the value of Ref.
func (s *CodeScanningUploadSarifReq) SetRef(val CodeScanningRef) {
	s.Ref = val
}

// SetSarif sets the value of Sarif.
func (s *CodeScanningUploadSarifReq) SetSarif(val CodeScanningAnalysisSarifFile) {
	s.Sarif = val
}

// SetCheckoutURI sets the value of CheckoutURI.
func (s *CodeScanningUploadSarifReq) SetCheckoutURI(val OptURI) {
	s.CheckoutURI = val
}

// SetStartedAt sets the value of StartedAt.
func (s *CodeScanningUploadSarifReq) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetToolName sets the value of ToolName.
func (s *CodeScanningUploadSarifReq) SetToolName(val OptString) {
	s.ToolName = val
}

// CodeScanningUploadSarifRequestEntityTooLarge is response for CodeScanningUploadSarif operation.
type CodeScanningUploadSarifRequestEntityTooLarge struct{}

func (*CodeScanningUploadSarifRequestEntityTooLarge) codeScanningUploadSarifRes() {}

// Code Search Result Item.
// Ref: #/components/schemas/code-search-result-item
type CodeSearchResultItem struct {
	Name           string                   `json:"name"`
	Path           string                   `json:"path"`
	Sha            string                   `json:"sha"`
	URL            url.URL                  `json:"url"`
	GitURL         url.URL                  `json:"git_url"`
	HTMLURL        url.URL                  `json:"html_url"`
	Repository     MinimalRepository        `json:"repository"`
	Score          float64                  `json:"score"`
	FileSize       OptInt                   `json:"file_size"`
	Language       OptNilString             `json:"language"`
	LastModifiedAt OptDateTime              `json:"last_modified_at"`
	LineNumbers    []string                 `json:"line_numbers"`
	TextMatches    *SearchResultTextMatches `json:"text_matches"`
}

// GetName returns the value of Name.
func (s *CodeSearchResultItem) GetName() string {
	return s.Name
}

// GetPath returns the value of Path.
func (s *CodeSearchResultItem) GetPath() string {
	return s.Path
}

// GetSha returns the value of Sha.
func (s *CodeSearchResultItem) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *CodeSearchResultItem) GetURL() url.URL {
	return s.URL
}

// GetGitURL returns the value of GitURL.
func (s *CodeSearchResultItem) GetGitURL() url.URL {
	return s.GitURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CodeSearchResultItem) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetRepository returns the value of Repository.
func (s *CodeSearchResultItem) GetRepository() MinimalRepository {
	return s.Repository
}

// GetScore returns the value of Score.
func (s *CodeSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetFileSize returns the value of FileSize.
func (s *CodeSearchResultItem) GetFileSize() OptInt {
	return s.FileSize
}

// GetLanguage returns the value of Language.
func (s *CodeSearchResultItem) GetLanguage() OptNilString {
	return s.Language
}

// GetLastModifiedAt returns the value of LastModifiedAt.
func (s *CodeSearchResultItem) GetLastModifiedAt() OptDateTime {
	return s.LastModifiedAt
}

// GetLineNumbers returns the value of LineNumbers.
func (s *CodeSearchResultItem) GetLineNumbers() []string {
	return s.LineNumbers
}

// GetTextMatches returns the value of TextMatches.
func (s *CodeSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// SetName sets the value of Name.
func (s *CodeSearchResultItem) SetName(val string) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *CodeSearchResultItem) SetPath(val string) {
	s.Path = val
}

// SetSha sets the value of Sha.
func (s *CodeSearchResultItem) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *CodeSearchResultItem) SetURL(val url.URL) {
	s.URL = val
}

// SetGitURL sets the value of GitURL.
func (s *CodeSearchResultItem) SetGitURL(val url.URL) {
	s.GitURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CodeSearchResultItem) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetRepository sets the value of Repository.
func (s *CodeSearchResultItem) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetScore sets the value of Score.
func (s *CodeSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetFileSize sets the value of FileSize.
func (s *CodeSearchResultItem) SetFileSize(val OptInt) {
	s.FileSize = val
}

// SetLanguage sets the value of Language.
func (s *CodeSearchResultItem) SetLanguage(val OptNilString) {
	s.Language = val
}

// SetLastModifiedAt sets the value of LastModifiedAt.
func (s *CodeSearchResultItem) SetLastModifiedAt(val OptDateTime) {
	s.LastModifiedAt = val
}

// SetLineNumbers sets the value of LineNumbers.
func (s *CodeSearchResultItem) SetLineNumbers(val []string) {
	s.LineNumbers = val
}

// SetTextMatches sets the value of TextMatches.
func (s *CodeSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

type CodesOfConductGetAllCodesOfConductOKApplicationJSON []CodeOfConduct

func (*CodesOfConductGetAllCodesOfConductOKApplicationJSON) codesOfConductGetAllCodesOfConductRes() {}

// Collaborator.
// Ref: #/components/schemas/collaborator
type Collaborator struct {
	Login             string                     `json:"login"`
	ID                int                        `json:"id"`
	Email             OptNilString               `json:"email"`
	Name              OptNilString               `json:"name"`
	NodeID            string                     `json:"node_id"`
	AvatarURL         url.URL                    `json:"avatar_url"`
	GravatarID        NilString                  `json:"gravatar_id"`
	URL               url.URL                    `json:"url"`
	HTMLURL           url.URL                    `json:"html_url"`
	FollowersURL      url.URL                    `json:"followers_url"`
	FollowingURL      string                     `json:"following_url"`
	GistsURL          string                     `json:"gists_url"`
	StarredURL        string                     `json:"starred_url"`
	SubscriptionsURL  url.URL                    `json:"subscriptions_url"`
	OrganizationsURL  url.URL                    `json:"organizations_url"`
	ReposURL          url.URL                    `json:"repos_url"`
	EventsURL         string                     `json:"events_url"`
	ReceivedEventsURL url.URL                    `json:"received_events_url"`
	Type              string                     `json:"type"`
	SiteAdmin         bool                       `json:"site_admin"`
	Permissions       OptCollaboratorPermissions `json:"permissions"`
}

// GetLogin returns the value of Login.
func (s *Collaborator) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *Collaborator) GetID() int {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *Collaborator) GetEmail() OptNilString {
	return s.Email
}

// GetName returns the value of Name.
func (s *Collaborator) GetName() OptNilString {
	return s.Name
}

// GetNodeID returns the value of NodeID.
func (s *Collaborator) GetNodeID() string {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *Collaborator) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *Collaborator) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *Collaborator) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Collaborator) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *Collaborator) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *Collaborator) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *Collaborator) GetGistsURL() string {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *Collaborator) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *Collaborator) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *Collaborator) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *Collaborator) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *Collaborator) GetEventsURL() string {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *Collaborator) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *Collaborator) GetType() string {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *Collaborator) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetPermissions returns the value of Permissions.
func (s *Collaborator) GetPermissions() OptCollaboratorPermissions {
	return s.Permissions
}

// SetLogin sets the value of Login.
func (s *Collaborator) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *Collaborator) SetID(val int) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *Collaborator) SetEmail(val OptNilString) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *Collaborator) SetName(val OptNilString) {
	s.Name = val
}

// SetNodeID sets the value of NodeID.
func (s *Collaborator) SetNodeID(val string) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *Collaborator) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *Collaborator) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *Collaborator) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Collaborator) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *Collaborator) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *Collaborator) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *Collaborator) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *Collaborator) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *Collaborator) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *Collaborator) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *Collaborator) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *Collaborator) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *Collaborator) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *Collaborator) SetType(val string) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *Collaborator) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetPermissions sets the value of Permissions.
func (s *Collaborator) SetPermissions(val OptCollaboratorPermissions) {
	s.Permissions = val
}

type CollaboratorPermissions struct {
	Pull     bool    `json:"pull"`
	Triage   OptBool `json:"triage"`
	Push     bool    `json:"push"`
	Maintain OptBool `json:"maintain"`
	Admin    bool    `json:"admin"`
}

// GetPull returns the value of Pull.
func (s *CollaboratorPermissions) GetPull() bool {
	return s.Pull
}

// GetTriage returns the value of Triage.
func (s *CollaboratorPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPush returns the value of Push.
func (s *CollaboratorPermissions) GetPush() bool {
	return s.Push
}

// GetMaintain returns the value of Maintain.
func (s *CollaboratorPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetAdmin returns the value of Admin.
func (s *CollaboratorPermissions) GetAdmin() bool {
	return s.Admin
}

// SetPull sets the value of Pull.
func (s *CollaboratorPermissions) SetPull(val bool) {
	s.Pull = val
}

// SetTriage sets the value of Triage.
func (s *CollaboratorPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPush sets the value of Push.
func (s *CollaboratorPermissions) SetPush(val bool) {
	s.Push = val
}

// SetMaintain sets the value of Maintain.
func (s *CollaboratorPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetAdmin sets the value of Admin.
func (s *CollaboratorPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// Ref: #/components/schemas/combined-billing-usage
type CombinedBillingUsage struct {
	// Numbers of days left in billing cycle.
	DaysLeftInBillingCycle int `json:"days_left_in_billing_cycle"`
	// Estimated storage space (GB) used in billing cycle.
	EstimatedPaidStorageForMonth int `json:"estimated_paid_storage_for_month"`
	// Estimated sum of free and paid storage space (GB) used in billing cycle.
	EstimatedStorageForMonth int `json:"estimated_storage_for_month"`
}

// GetDaysLeftInBillingCycle returns the value of DaysLeftInBillingCycle.
func (s *CombinedBillingUsage) GetDaysLeftInBillingCycle() int {
	return s.DaysLeftInBillingCycle
}

// GetEstimatedPaidStorageForMonth returns the value of EstimatedPaidStorageForMonth.
func (s *CombinedBillingUsage) GetEstimatedPaidStorageForMonth() int {
	return s.EstimatedPaidStorageForMonth
}

// GetEstimatedStorageForMonth returns the value of EstimatedStorageForMonth.
func (s *CombinedBillingUsage) GetEstimatedStorageForMonth() int {
	return s.EstimatedStorageForMonth
}

// SetDaysLeftInBillingCycle sets the value of DaysLeftInBillingCycle.
func (s *CombinedBillingUsage) SetDaysLeftInBillingCycle(val int) {
	s.DaysLeftInBillingCycle = val
}

// SetEstimatedPaidStorageForMonth sets the value of EstimatedPaidStorageForMonth.
func (s *CombinedBillingUsage) SetEstimatedPaidStorageForMonth(val int) {
	s.EstimatedPaidStorageForMonth = val
}

// SetEstimatedStorageForMonth sets the value of EstimatedStorageForMonth.
func (s *CombinedBillingUsage) SetEstimatedStorageForMonth(val int) {
	s.EstimatedStorageForMonth = val
}

// Combined Commit Status.
// Ref: #/components/schemas/combined-commit-status
type CombinedCommitStatus struct {
	State      string               `json:"state"`
	Statuses   []SimpleCommitStatus `json:"statuses"`
	Sha        string               `json:"sha"`
	TotalCount int                  `json:"total_count"`
	Repository MinimalRepository    `json:"repository"`
	CommitURL  url.URL              `json:"commit_url"`
	URL        url.URL              `json:"url"`
}

// GetState returns the value of State.
func (s *CombinedCommitStatus) GetState() string {
	return s.State
}

// GetStatuses returns the value of Statuses.
func (s *CombinedCommitStatus) GetStatuses() []SimpleCommitStatus {
	return s.Statuses
}

// GetSha returns the value of Sha.
func (s *CombinedCommitStatus) GetSha() string {
	return s.Sha
}

// GetTotalCount returns the value of TotalCount.
func (s *CombinedCommitStatus) GetTotalCount() int {
	return s.TotalCount
}

// GetRepository returns the value of Repository.
func (s *CombinedCommitStatus) GetRepository() MinimalRepository {
	return s.Repository
}

// GetCommitURL returns the value of CommitURL.
func (s *CombinedCommitStatus) GetCommitURL() url.URL {
	return s.CommitURL
}

// GetURL returns the value of URL.
func (s *CombinedCommitStatus) GetURL() url.URL {
	return s.URL
}

// SetState sets the value of State.
func (s *CombinedCommitStatus) SetState(val string) {
	s.State = val
}

// SetStatuses sets the value of Statuses.
func (s *CombinedCommitStatus) SetStatuses(val []SimpleCommitStatus) {
	s.Statuses = val
}

// SetSha sets the value of Sha.
func (s *CombinedCommitStatus) SetSha(val string) {
	s.Sha = val
}

// SetTotalCount sets the value of TotalCount.
func (s *CombinedCommitStatus) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetRepository sets the value of Repository.
func (s *CombinedCommitStatus) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetCommitURL sets the value of CommitURL.
func (s *CombinedCommitStatus) SetCommitURL(val url.URL) {
	s.CommitURL = val
}

// SetURL sets the value of URL.
func (s *CombinedCommitStatus) SetURL(val url.URL) {
	s.URL = val
}

func (*CombinedCommitStatus) reposGetCombinedStatusForRefRes() {}

// Commit.
// Ref: #/components/schemas/commit
type Commit struct {
	URL         url.URL               `json:"url"`
	Sha         string                `json:"sha"`
	NodeID      string                `json:"node_id"`
	HTMLURL     url.URL               `json:"html_url"`
	CommentsURL url.URL               `json:"comments_url"`
	Commit      CommitCommit          `json:"commit"`
	Author      NilNullableSimpleUser `json:"author"`
	Committer   NilNullableSimpleUser `json:"committer"`
	Parents     []CommitParentsItem   `json:"parents"`
	Stats       OptCommitStats        `json:"stats"`
	Files       []CommitFilesItem     `json:"files"`
}

// GetURL returns the value of URL.
func (s *Commit) GetURL() url.URL {
	return s.URL
}

// GetSha returns the value of Sha.
func (s *Commit) GetSha() string {
	return s.Sha
}

// GetNodeID returns the value of NodeID.
func (s *Commit) GetNodeID() string {
	return s.NodeID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Commit) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *Commit) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetCommit returns the value of Commit.
func (s *Commit) GetCommit() CommitCommit {
	return s.Commit
}

// GetAuthor returns the value of Author.
func (s *Commit) GetAuthor() NilNullableSimpleUser {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *Commit) GetCommitter() NilNullableSimpleUser {
	return s.Committer
}

// GetParents returns the value of Parents.
func (s *Commit) GetParents() []CommitParentsItem {
	return s.Parents
}

// GetStats returns the value of Stats.
func (s *Commit) GetStats() OptCommitStats {
	return s.Stats
}

// GetFiles returns the value of Files.
func (s *Commit) GetFiles() []CommitFilesItem {
	return s.Files
}

// SetURL sets the value of URL.
func (s *Commit) SetURL(val url.URL) {
	s.URL = val
}

// SetSha sets the value of Sha.
func (s *Commit) SetSha(val string) {
	s.Sha = val
}

// SetNodeID sets the value of NodeID.
func (s *Commit) SetNodeID(val string) {
	s.NodeID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Commit) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *Commit) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetCommit sets the value of Commit.
func (s *Commit) SetCommit(val CommitCommit) {
	s.Commit = val
}

// SetAuthor sets the value of Author.
func (s *Commit) SetAuthor(val NilNullableSimpleUser) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *Commit) SetCommitter(val NilNullableSimpleUser) {
	s.Committer = val
}

// SetParents sets the value of Parents.
func (s *Commit) SetParents(val []CommitParentsItem) {
	s.Parents = val
}

// SetStats sets the value of Stats.
func (s *Commit) SetStats(val OptCommitStats) {
	s.Stats = val
}

// SetFiles sets the value of Files.
func (s *Commit) SetFiles(val []CommitFilesItem) {
	s.Files = val
}

func (*Commit) reposGetCommitRes() {}
func (*Commit) reposMergeRes()     {}

// Commit Activity.
// Ref: #/components/schemas/commit-activity
type CommitActivity struct {
	Days  []int `json:"days"`
	Total int   `json:"total"`
	Week  int   `json:"week"`
}

// GetDays returns the value of Days.
func (s *CommitActivity) GetDays() []int {
	return s.Days
}

// GetTotal returns the value of Total.
func (s *CommitActivity) GetTotal() int {
	return s.Total
}

// GetWeek returns the value of Week.
func (s *CommitActivity) GetWeek() int {
	return s.Week
}

// SetDays sets the value of Days.
func (s *CommitActivity) SetDays(val []int) {
	s.Days = val
}

// SetTotal sets the value of Total.
func (s *CommitActivity) SetTotal(val int) {
	s.Total = val
}

// SetWeek sets the value of Week.
func (s *CommitActivity) SetWeek(val int) {
	s.Week = val
}

// Commit Comment.
// Ref: #/components/schemas/commit-comment
type CommitComment struct {
	HTMLURL           url.URL               `json:"html_url"`
	URL               url.URL               `json:"url"`
	ID                int                   `json:"id"`
	NodeID            string                `json:"node_id"`
	Body              string                `json:"body"`
	Path              NilString             `json:"path"`
	Position          NilInt                `json:"position"`
	Line              NilInt                `json:"line"`
	CommitID          string                `json:"commit_id"`
	User              NilNullableSimpleUser `json:"user"`
	CreatedAt         time.Time             `json:"created_at"`
	UpdatedAt         time.Time             `json:"updated_at"`
	AuthorAssociation AuthorAssociation     `json:"author_association"`
	Reactions         OptReactionRollup     `json:"reactions"`
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CommitComment) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetURL returns the value of URL.
func (s *CommitComment) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *CommitComment) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *CommitComment) GetNodeID() string {
	return s.NodeID
}

// GetBody returns the value of Body.
func (s *CommitComment) GetBody() string {
	return s.Body
}

// GetPath returns the value of Path.
func (s *CommitComment) GetPath() NilString {
	return s.Path
}

// GetPosition returns the value of Position.
func (s *CommitComment) GetPosition() NilInt {
	return s.Position
}

// GetLine returns the value of Line.
func (s *CommitComment) GetLine() NilInt {
	return s.Line
}

// GetCommitID returns the value of CommitID.
func (s *CommitComment) GetCommitID() string {
	return s.CommitID
}

// GetUser returns the value of User.
func (s *CommitComment) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CommitComment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CommitComment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *CommitComment) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetReactions returns the value of Reactions.
func (s *CommitComment) GetReactions() OptReactionRollup {
	return s.Reactions
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CommitComment) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetURL sets the value of URL.
func (s *CommitComment) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *CommitComment) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *CommitComment) SetNodeID(val string) {
	s.NodeID = val
}

// SetBody sets the value of Body.
func (s *CommitComment) SetBody(val string) {
	s.Body = val
}

// SetPath sets the value of Path.
func (s *CommitComment) SetPath(val NilString) {
	s.Path = val
}

// SetPosition sets the value of Position.
func (s *CommitComment) SetPosition(val NilInt) {
	s.Position = val
}

// SetLine sets the value of Line.
func (s *CommitComment) SetLine(val NilInt) {
	s.Line = val
}

// SetCommitID sets the value of CommitID.
func (s *CommitComment) SetCommitID(val string) {
	s.CommitID = val
}

// SetUser sets the value of User.
func (s *CommitComment) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CommitComment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CommitComment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *CommitComment) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetReactions sets the value of Reactions.
func (s *CommitComment) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

func (*CommitComment) reposGetCommitCommentRes()    {}
func (*CommitComment) reposUpdateCommitCommentRes() {}

// CommitCommentHeaders wraps CommitComment with response headers.
type CommitCommentHeaders struct {
	Location OptString
	Response CommitComment
}

// GetLocation returns the value of Location.
func (s *CommitCommentHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *CommitCommentHeaders) GetResponse() CommitComment {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *CommitCommentHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *CommitCommentHeaders) SetResponse(val CommitComment) {
	s.Response = val
}

func (*CommitCommentHeaders) reposCreateCommitCommentRes() {}

type CommitCommit struct {
	URL          url.URL            `json:"url"`
	Author       NilNullableGitUser `json:"author"`
	Committer    NilNullableGitUser `json:"committer"`
	Message      string             `json:"message"`
	CommentCount int                `json:"comment_count"`
	Tree         CommitCommitTree   `json:"tree"`
	Verification OptVerification    `json:"verification"`
}

// GetURL returns the value of URL.
func (s *CommitCommit) GetURL() url.URL {
	return s.URL
}

// GetAuthor returns the value of Author.
func (s *CommitCommit) GetAuthor() NilNullableGitUser {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *CommitCommit) GetCommitter() NilNullableGitUser {
	return s.Committer
}

// GetMessage returns the value of Message.
func (s *CommitCommit) GetMessage() string {
	return s.Message
}

// GetCommentCount returns the value of CommentCount.
func (s *CommitCommit) GetCommentCount() int {
	return s.CommentCount
}

// GetTree returns the value of Tree.
func (s *CommitCommit) GetTree() CommitCommitTree {
	return s.Tree
}

// GetVerification returns the value of Verification.
func (s *CommitCommit) GetVerification() OptVerification {
	return s.Verification
}

// SetURL sets the value of URL.
func (s *CommitCommit) SetURL(val url.URL) {
	s.URL = val
}

// SetAuthor sets the value of Author.
func (s *CommitCommit) SetAuthor(val NilNullableGitUser) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *CommitCommit) SetCommitter(val NilNullableGitUser) {
	s.Committer = val
}

// SetMessage sets the value of Message.
func (s *CommitCommit) SetMessage(val string) {
	s.Message = val
}

// SetCommentCount sets the value of CommentCount.
func (s *CommitCommit) SetCommentCount(val int) {
	s.CommentCount = val
}

// SetTree sets the value of Tree.
func (s *CommitCommit) SetTree(val CommitCommitTree) {
	s.Tree = val
}

// SetVerification sets the value of Verification.
func (s *CommitCommit) SetVerification(val OptVerification) {
	s.Verification = val
}

type CommitCommitTree struct {
	Sha string  `json:"sha"`
	URL url.URL `json:"url"`
}

// GetSha returns the value of Sha.
func (s *CommitCommitTree) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *CommitCommitTree) GetURL() url.URL {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *CommitCommitTree) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *CommitCommitTree) SetURL(val url.URL) {
	s.URL = val
}

// Commit Comparison.
// Ref: #/components/schemas/commit-comparison
type CommitComparison struct {
	URL             url.URL                `json:"url"`
	HTMLURL         url.URL                `json:"html_url"`
	PermalinkURL    url.URL                `json:"permalink_url"`
	DiffURL         url.URL                `json:"diff_url"`
	PatchURL        url.URL                `json:"patch_url"`
	BaseCommit      Commit                 `json:"base_commit"`
	MergeBaseCommit Commit                 `json:"merge_base_commit"`
	Status          CommitComparisonStatus `json:"status"`
	AheadBy         int                    `json:"ahead_by"`
	BehindBy        int                    `json:"behind_by"`
	TotalCommits    int                    `json:"total_commits"`
	Commits         []Commit               `json:"commits"`
	Files           []DiffEntry            `json:"files"`
}

// GetURL returns the value of URL.
func (s *CommitComparison) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CommitComparison) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetPermalinkURL returns the value of PermalinkURL.
func (s *CommitComparison) GetPermalinkURL() url.URL {
	return s.PermalinkURL
}

// GetDiffURL returns the value of DiffURL.
func (s *CommitComparison) GetDiffURL() url.URL {
	return s.DiffURL
}

// GetPatchURL returns the value of PatchURL.
func (s *CommitComparison) GetPatchURL() url.URL {
	return s.PatchURL
}

// GetBaseCommit returns the value of BaseCommit.
func (s *CommitComparison) GetBaseCommit() Commit {
	return s.BaseCommit
}

// GetMergeBaseCommit returns the value of MergeBaseCommit.
func (s *CommitComparison) GetMergeBaseCommit() Commit {
	return s.MergeBaseCommit
}

// GetStatus returns the value of Status.
func (s *CommitComparison) GetStatus() CommitComparisonStatus {
	return s.Status
}

// GetAheadBy returns the value of AheadBy.
func (s *CommitComparison) GetAheadBy() int {
	return s.AheadBy
}

// GetBehindBy returns the value of BehindBy.
func (s *CommitComparison) GetBehindBy() int {
	return s.BehindBy
}

// GetTotalCommits returns the value of TotalCommits.
func (s *CommitComparison) GetTotalCommits() int {
	return s.TotalCommits
}

// GetCommits returns the value of Commits.
func (s *CommitComparison) GetCommits() []Commit {
	return s.Commits
}

// GetFiles returns the value of Files.
func (s *CommitComparison) GetFiles() []DiffEntry {
	return s.Files
}

// SetURL sets the value of URL.
func (s *CommitComparison) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CommitComparison) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetPermalinkURL sets the value of PermalinkURL.
func (s *CommitComparison) SetPermalinkURL(val url.URL) {
	s.PermalinkURL = val
}

// SetDiffURL sets the value of DiffURL.
func (s *CommitComparison) SetDiffURL(val url.URL) {
	s.DiffURL = val
}

// SetPatchURL sets the value of PatchURL.
func (s *CommitComparison) SetPatchURL(val url.URL) {
	s.PatchURL = val
}

// SetBaseCommit sets the value of BaseCommit.
func (s *CommitComparison) SetBaseCommit(val Commit) {
	s.BaseCommit = val
}

// SetMergeBaseCommit sets the value of MergeBaseCommit.
func (s *CommitComparison) SetMergeBaseCommit(val Commit) {
	s.MergeBaseCommit = val
}

// SetStatus sets the value of Status.
func (s *CommitComparison) SetStatus(val CommitComparisonStatus) {
	s.Status = val
}

// SetAheadBy sets the value of AheadBy.
func (s *CommitComparison) SetAheadBy(val int) {
	s.AheadBy = val
}

// SetBehindBy sets the value of BehindBy.
func (s *CommitComparison) SetBehindBy(val int) {
	s.BehindBy = val
}

// SetTotalCommits sets the value of TotalCommits.
func (s *CommitComparison) SetTotalCommits(val int) {
	s.TotalCommits = val
}

// SetCommits sets the value of Commits.
func (s *CommitComparison) SetCommits(val []Commit) {
	s.Commits = val
}

// SetFiles sets the value of Files.
func (s *CommitComparison) SetFiles(val []DiffEntry) {
	s.Files = val
}

func (*CommitComparison) reposCompareCommitsRes() {}

type CommitComparisonStatus string

const (
	CommitComparisonStatusDiverged  CommitComparisonStatus = "diverged"
	CommitComparisonStatusAhead     CommitComparisonStatus = "ahead"
	CommitComparisonStatusBehind    CommitComparisonStatus = "behind"
	CommitComparisonStatusIdentical CommitComparisonStatus = "identical"
)

// MarshalText implements encoding.TextMarshaler.
func (s CommitComparisonStatus) MarshalText() ([]byte, error) {
	switch s {
	case CommitComparisonStatusDiverged:
		return []byte(s), nil
	case CommitComparisonStatusAhead:
		return []byte(s), nil
	case CommitComparisonStatusBehind:
		return []byte(s), nil
	case CommitComparisonStatusIdentical:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CommitComparisonStatus) UnmarshalText(data []byte) error {
	switch CommitComparisonStatus(data) {
	case CommitComparisonStatusDiverged:
		*s = CommitComparisonStatusDiverged
		return nil
	case CommitComparisonStatusAhead:
		*s = CommitComparisonStatusAhead
		return nil
	case CommitComparisonStatusBehind:
		*s = CommitComparisonStatusBehind
		return nil
	case CommitComparisonStatusIdentical:
		*s = CommitComparisonStatusIdentical
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CommitFilesItem struct {
	Filename         OptString `json:"filename"`
	Additions        OptInt    `json:"additions"`
	Deletions        OptInt    `json:"deletions"`
	Changes          OptInt    `json:"changes"`
	Status           OptString `json:"status"`
	RawURL           OptString `json:"raw_url"`
	BlobURL          OptString `json:"blob_url"`
	Patch            OptString `json:"patch"`
	Sha              OptString `json:"sha"`
	ContentsURL      OptString `json:"contents_url"`
	PreviousFilename OptString `json:"previous_filename"`
}

// GetFilename returns the value of Filename.
func (s *CommitFilesItem) GetFilename() OptString {
	return s.Filename
}

// GetAdditions returns the value of Additions.
func (s *CommitFilesItem) GetAdditions() OptInt {
	return s.Additions
}

// GetDeletions returns the value of Deletions.
func (s *CommitFilesItem) GetDeletions() OptInt {
	return s.Deletions
}

// GetChanges returns the value of Changes.
func (s *CommitFilesItem) GetChanges() OptInt {
	return s.Changes
}

// GetStatus returns the value of Status.
func (s *CommitFilesItem) GetStatus() OptString {
	return s.Status
}

// GetRawURL returns the value of RawURL.
func (s *CommitFilesItem) GetRawURL() OptString {
	return s.RawURL
}

// GetBlobURL returns the value of BlobURL.
func (s *CommitFilesItem) GetBlobURL() OptString {
	return s.BlobURL
}

// GetPatch returns the value of Patch.
func (s *CommitFilesItem) GetPatch() OptString {
	return s.Patch
}

// GetSha returns the value of Sha.
func (s *CommitFilesItem) GetSha() OptString {
	return s.Sha
}

// GetContentsURL returns the value of ContentsURL.
func (s *CommitFilesItem) GetContentsURL() OptString {
	return s.ContentsURL
}

// GetPreviousFilename returns the value of PreviousFilename.
func (s *CommitFilesItem) GetPreviousFilename() OptString {
	return s.PreviousFilename
}

// SetFilename sets the value of Filename.
func (s *CommitFilesItem) SetFilename(val OptString) {
	s.Filename = val
}

// SetAdditions sets the value of Additions.
func (s *CommitFilesItem) SetAdditions(val OptInt) {
	s.Additions = val
}

// SetDeletions sets the value of Deletions.
func (s *CommitFilesItem) SetDeletions(val OptInt) {
	s.Deletions = val
}

// SetChanges sets the value of Changes.
func (s *CommitFilesItem) SetChanges(val OptInt) {
	s.Changes = val
}

// SetStatus sets the value of Status.
func (s *CommitFilesItem) SetStatus(val OptString) {
	s.Status = val
}

// SetRawURL sets the value of RawURL.
func (s *CommitFilesItem) SetRawURL(val OptString) {
	s.RawURL = val
}

// SetBlobURL sets the value of BlobURL.
func (s *CommitFilesItem) SetBlobURL(val OptString) {
	s.BlobURL = val
}

// SetPatch sets the value of Patch.
func (s *CommitFilesItem) SetPatch(val OptString) {
	s.Patch = val
}

// SetSha sets the value of Sha.
func (s *CommitFilesItem) SetSha(val OptString) {
	s.Sha = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *CommitFilesItem) SetContentsURL(val OptString) {
	s.ContentsURL = val
}

// SetPreviousFilename sets the value of PreviousFilename.
func (s *CommitFilesItem) SetPreviousFilename(val OptString) {
	s.PreviousFilename = val
}

type CommitParentsItem struct {
	Sha     string  `json:"sha"`
	URL     url.URL `json:"url"`
	HTMLURL OptURI  `json:"html_url"`
}

// GetSha returns the value of Sha.
func (s *CommitParentsItem) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *CommitParentsItem) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CommitParentsItem) GetHTMLURL() OptURI {
	return s.HTMLURL
}

// SetSha sets the value of Sha.
func (s *CommitParentsItem) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *CommitParentsItem) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CommitParentsItem) SetHTMLURL(val OptURI) {
	s.HTMLURL = val
}

// Commit Search Result Item.
// Ref: #/components/schemas/commit-search-result-item
type CommitSearchResultItem struct {
	URL         url.URL                             `json:"url"`
	Sha         string                              `json:"sha"`
	HTMLURL     url.URL                             `json:"html_url"`
	CommentsURL url.URL                             `json:"comments_url"`
	Commit      CommitSearchResultItemCommit        `json:"commit"`
	Author      NilNullableSimpleUser               `json:"author"`
	Committer   NilNullableGitUser                  `json:"committer"`
	Parents     []CommitSearchResultItemParentsItem `json:"parents"`
	Repository  MinimalRepository                   `json:"repository"`
	Score       float64                             `json:"score"`
	NodeID      string                              `json:"node_id"`
	TextMatches *SearchResultTextMatches            `json:"text_matches"`
}

// GetURL returns the value of URL.
func (s *CommitSearchResultItem) GetURL() url.URL {
	return s.URL
}

// GetSha returns the value of Sha.
func (s *CommitSearchResultItem) GetSha() string {
	return s.Sha
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CommitSearchResultItem) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *CommitSearchResultItem) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetCommit returns the value of Commit.
func (s *CommitSearchResultItem) GetCommit() CommitSearchResultItemCommit {
	return s.Commit
}

// GetAuthor returns the value of Author.
func (s *CommitSearchResultItem) GetAuthor() NilNullableSimpleUser {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *CommitSearchResultItem) GetCommitter() NilNullableGitUser {
	return s.Committer
}

// GetParents returns the value of Parents.
func (s *CommitSearchResultItem) GetParents() []CommitSearchResultItemParentsItem {
	return s.Parents
}

// GetRepository returns the value of Repository.
func (s *CommitSearchResultItem) GetRepository() MinimalRepository {
	return s.Repository
}

// GetScore returns the value of Score.
func (s *CommitSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetNodeID returns the value of NodeID.
func (s *CommitSearchResultItem) GetNodeID() string {
	return s.NodeID
}

// GetTextMatches returns the value of TextMatches.
func (s *CommitSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// SetURL sets the value of URL.
func (s *CommitSearchResultItem) SetURL(val url.URL) {
	s.URL = val
}

// SetSha sets the value of Sha.
func (s *CommitSearchResultItem) SetSha(val string) {
	s.Sha = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CommitSearchResultItem) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *CommitSearchResultItem) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetCommit sets the value of Commit.
func (s *CommitSearchResultItem) SetCommit(val CommitSearchResultItemCommit) {
	s.Commit = val
}

// SetAuthor sets the value of Author.
func (s *CommitSearchResultItem) SetAuthor(val NilNullableSimpleUser) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *CommitSearchResultItem) SetCommitter(val NilNullableGitUser) {
	s.Committer = val
}

// SetParents sets the value of Parents.
func (s *CommitSearchResultItem) SetParents(val []CommitSearchResultItemParentsItem) {
	s.Parents = val
}

// SetRepository sets the value of Repository.
func (s *CommitSearchResultItem) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetScore sets the value of Score.
func (s *CommitSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetNodeID sets the value of NodeID.
func (s *CommitSearchResultItem) SetNodeID(val string) {
	s.NodeID = val
}

// SetTextMatches sets the value of TextMatches.
func (s *CommitSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

type CommitSearchResultItemCommit struct {
	Author       CommitSearchResultItemCommitAuthor `json:"author"`
	Committer    NilNullableGitUser                 `json:"committer"`
	CommentCount int                                `json:"comment_count"`
	Message      string                             `json:"message"`
	Tree         CommitSearchResultItemCommitTree   `json:"tree"`
	URL          url.URL                            `json:"url"`
	Verification OptVerification                    `json:"verification"`
}

// GetAuthor returns the value of Author.
func (s *CommitSearchResultItemCommit) GetAuthor() CommitSearchResultItemCommitAuthor {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *CommitSearchResultItemCommit) GetCommitter() NilNullableGitUser {
	return s.Committer
}

// GetCommentCount returns the value of CommentCount.
func (s *CommitSearchResultItemCommit) GetCommentCount() int {
	return s.CommentCount
}

// GetMessage returns the value of Message.
func (s *CommitSearchResultItemCommit) GetMessage() string {
	return s.Message
}

// GetTree returns the value of Tree.
func (s *CommitSearchResultItemCommit) GetTree() CommitSearchResultItemCommitTree {
	return s.Tree
}

// GetURL returns the value of URL.
func (s *CommitSearchResultItemCommit) GetURL() url.URL {
	return s.URL
}

// GetVerification returns the value of Verification.
func (s *CommitSearchResultItemCommit) GetVerification() OptVerification {
	return s.Verification
}

// SetAuthor sets the value of Author.
func (s *CommitSearchResultItemCommit) SetAuthor(val CommitSearchResultItemCommitAuthor) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *CommitSearchResultItemCommit) SetCommitter(val NilNullableGitUser) {
	s.Committer = val
}

// SetCommentCount sets the value of CommentCount.
func (s *CommitSearchResultItemCommit) SetCommentCount(val int) {
	s.CommentCount = val
}

// SetMessage sets the value of Message.
func (s *CommitSearchResultItemCommit) SetMessage(val string) {
	s.Message = val
}

// SetTree sets the value of Tree.
func (s *CommitSearchResultItemCommit) SetTree(val CommitSearchResultItemCommitTree) {
	s.Tree = val
}

// SetURL sets the value of URL.
func (s *CommitSearchResultItemCommit) SetURL(val url.URL) {
	s.URL = val
}

// SetVerification sets the value of Verification.
func (s *CommitSearchResultItemCommit) SetVerification(val OptVerification) {
	s.Verification = val
}

type CommitSearchResultItemCommitAuthor struct {
	Name  string    `json:"name"`
	Email string    `json:"email"`
	Date  time.Time `json:"date"`
}

// GetName returns the value of Name.
func (s *CommitSearchResultItemCommitAuthor) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CommitSearchResultItemCommitAuthor) GetEmail() string {
	return s.Email
}

// GetDate returns the value of Date.
func (s *CommitSearchResultItemCommitAuthor) GetDate() time.Time {
	return s.Date
}

// SetName sets the value of Name.
func (s *CommitSearchResultItemCommitAuthor) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CommitSearchResultItemCommitAuthor) SetEmail(val string) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *CommitSearchResultItemCommitAuthor) SetDate(val time.Time) {
	s.Date = val
}

type CommitSearchResultItemCommitTree struct {
	Sha string  `json:"sha"`
	URL url.URL `json:"url"`
}

// GetSha returns the value of Sha.
func (s *CommitSearchResultItemCommitTree) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *CommitSearchResultItemCommitTree) GetURL() url.URL {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *CommitSearchResultItemCommitTree) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *CommitSearchResultItemCommitTree) SetURL(val url.URL) {
	s.URL = val
}

type CommitSearchResultItemParentsItem struct {
	URL     OptString `json:"url"`
	HTMLURL OptString `json:"html_url"`
	Sha     OptString `json:"sha"`
}

// GetURL returns the value of URL.
func (s *CommitSearchResultItemParentsItem) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *CommitSearchResultItemParentsItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetSha returns the value of Sha.
func (s *CommitSearchResultItemParentsItem) GetSha() OptString {
	return s.Sha
}

// SetURL sets the value of URL.
func (s *CommitSearchResultItemParentsItem) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *CommitSearchResultItemParentsItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetSha sets the value of Sha.
func (s *CommitSearchResultItemParentsItem) SetSha(val OptString) {
	s.Sha = val
}

type CommitStats struct {
	Additions OptInt `json:"additions"`
	Deletions OptInt `json:"deletions"`
	Total     OptInt `json:"total"`
}

// GetAdditions returns the value of Additions.
func (s *CommitStats) GetAdditions() OptInt {
	return s.Additions
}

// GetDeletions returns the value of Deletions.
func (s *CommitStats) GetDeletions() OptInt {
	return s.Deletions
}

// GetTotal returns the value of Total.
func (s *CommitStats) GetTotal() OptInt {
	return s.Total
}

// SetAdditions sets the value of Additions.
func (s *CommitStats) SetAdditions(val OptInt) {
	s.Additions = val
}

// SetDeletions sets the value of Deletions.
func (s *CommitStats) SetDeletions(val OptInt) {
	s.Deletions = val
}

// SetTotal sets the value of Total.
func (s *CommitStats) SetTotal(val OptInt) {
	s.Total = val
}

// Community Profile.
// Ref: #/components/schemas/community-profile
type CommunityProfile struct {
	HealthPercentage      int                   `json:"health_percentage"`
	Description           NilString             `json:"description"`
	Documentation         NilString             `json:"documentation"`
	Files                 CommunityProfileFiles `json:"files"`
	UpdatedAt             NilDateTime           `json:"updated_at"`
	ContentReportsEnabled OptBool               `json:"content_reports_enabled"`
}

// GetHealthPercentage returns the value of HealthPercentage.
func (s *CommunityProfile) GetHealthPercentage() int {
	return s.HealthPercentage
}

// GetDescription returns the value of Description.
func (s *CommunityProfile) GetDescription() NilString {
	return s.Description
}

// GetDocumentation returns the value of Documentation.
func (s *CommunityProfile) GetDocumentation() NilString {
	return s.Documentation
}

// GetFiles returns the value of Files.
func (s *CommunityProfile) GetFiles() CommunityProfileFiles {
	return s.Files
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CommunityProfile) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// GetContentReportsEnabled returns the value of ContentReportsEnabled.
func (s *CommunityProfile) GetContentReportsEnabled() OptBool {
	return s.ContentReportsEnabled
}

// SetHealthPercentage sets the value of HealthPercentage.
func (s *CommunityProfile) SetHealthPercentage(val int) {
	s.HealthPercentage = val
}

// SetDescription sets the value of Description.
func (s *CommunityProfile) SetDescription(val NilString) {
	s.Description = val
}

// SetDocumentation sets the value of Documentation.
func (s *CommunityProfile) SetDocumentation(val NilString) {
	s.Documentation = val
}

// SetFiles sets the value of Files.
func (s *CommunityProfile) SetFiles(val CommunityProfileFiles) {
	s.Files = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CommunityProfile) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// SetContentReportsEnabled sets the value of ContentReportsEnabled.
func (s *CommunityProfile) SetContentReportsEnabled(val OptBool) {
	s.ContentReportsEnabled = val
}

type CommunityProfileFiles struct {
	CodeOfConduct       NilNullableCodeOfConductSimple `json:"code_of_conduct"`
	CodeOfConductFile   NilNullableCommunityHealthFile `json:"code_of_conduct_file"`
	License             NilNullableLicenseSimple       `json:"license"`
	Contributing        NilNullableCommunityHealthFile `json:"contributing"`
	Readme              NilNullableCommunityHealthFile `json:"readme"`
	IssueTemplate       NilNullableCommunityHealthFile `json:"issue_template"`
	PullRequestTemplate NilNullableCommunityHealthFile `json:"pull_request_template"`
}

// GetCodeOfConduct returns the value of CodeOfConduct.
func (s *CommunityProfileFiles) GetCodeOfConduct() NilNullableCodeOfConductSimple {
	return s.CodeOfConduct
}

// GetCodeOfConductFile returns the value of CodeOfConductFile.
func (s *CommunityProfileFiles) GetCodeOfConductFile() NilNullableCommunityHealthFile {
	return s.CodeOfConductFile
}

// GetLicense returns the value of License.
func (s *CommunityProfileFiles) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetContributing returns the value of Contributing.
func (s *CommunityProfileFiles) GetContributing() NilNullableCommunityHealthFile {
	return s.Contributing
}

// GetReadme returns the value of Readme.
func (s *CommunityProfileFiles) GetReadme() NilNullableCommunityHealthFile {
	return s.Readme
}

// GetIssueTemplate returns the value of IssueTemplate.
func (s *CommunityProfileFiles) GetIssueTemplate() NilNullableCommunityHealthFile {
	return s.IssueTemplate
}

// GetPullRequestTemplate returns the value of PullRequestTemplate.
func (s *CommunityProfileFiles) GetPullRequestTemplate() NilNullableCommunityHealthFile {
	return s.PullRequestTemplate
}

// SetCodeOfConduct sets the value of CodeOfConduct.
func (s *CommunityProfileFiles) SetCodeOfConduct(val NilNullableCodeOfConductSimple) {
	s.CodeOfConduct = val
}

// SetCodeOfConductFile sets the value of CodeOfConductFile.
func (s *CommunityProfileFiles) SetCodeOfConductFile(val NilNullableCommunityHealthFile) {
	s.CodeOfConductFile = val
}

// SetLicense sets the value of License.
func (s *CommunityProfileFiles) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetContributing sets the value of Contributing.
func (s *CommunityProfileFiles) SetContributing(val NilNullableCommunityHealthFile) {
	s.Contributing = val
}

// SetReadme sets the value of Readme.
func (s *CommunityProfileFiles) SetReadme(val NilNullableCommunityHealthFile) {
	s.Readme = val
}

// SetIssueTemplate sets the value of IssueTemplate.
func (s *CommunityProfileFiles) SetIssueTemplate(val NilNullableCommunityHealthFile) {
	s.IssueTemplate = val
}

// SetPullRequestTemplate sets the value of PullRequestTemplate.
func (s *CommunityProfileFiles) SetPullRequestTemplate(val NilNullableCommunityHealthFile) {
	s.PullRequestTemplate = val
}

// Content File.
// Ref: #/components/schemas/content-file
type ContentFile struct {
	Type            string           `json:"type"`
	Encoding        string           `json:"encoding"`
	Size            int              `json:"size"`
	Name            string           `json:"name"`
	Path            string           `json:"path"`
	Content         string           `json:"content"`
	Sha             string           `json:"sha"`
	URL             url.URL          `json:"url"`
	GitURL          NilURI           `json:"git_url"`
	HTMLURL         NilURI           `json:"html_url"`
	DownloadURL     NilURI           `json:"download_url"`
	Links           ContentFileLinks `json:"_links"`
	Target          OptString        `json:"target"`
	SubmoduleGitURL OptString        `json:"submodule_git_url"`
}

// GetType returns the value of Type.
func (s *ContentFile) GetType() string {
	return s.Type
}

// GetEncoding returns the value of Encoding.
func (s *ContentFile) GetEncoding() string {
	return s.Encoding
}

// GetSize returns the value of Size.
func (s *ContentFile) GetSize() int {
	return s.Size
}

// GetName returns the value of Name.
func (s *ContentFile) GetName() string {
	return s.Name
}

// GetPath returns the value of Path.
func (s *ContentFile) GetPath() string {
	return s.Path
}

// GetContent returns the value of Content.
func (s *ContentFile) GetContent() string {
	return s.Content
}

// GetSha returns the value of Sha.
func (s *ContentFile) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *ContentFile) GetURL() url.URL {
	return s.URL
}

// GetGitURL returns the value of GitURL.
func (s *ContentFile) GetGitURL() NilURI {
	return s.GitURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *ContentFile) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// GetDownloadURL returns the value of DownloadURL.
func (s *ContentFile) GetDownloadURL() NilURI {
	return s.DownloadURL
}

// GetLinks returns the value of Links.
func (s *ContentFile) GetLinks() ContentFileLinks {
	return s.Links
}

// GetTarget returns the value of Target.
func (s *ContentFile) GetTarget() OptString {
	return s.Target
}

// GetSubmoduleGitURL returns the value of SubmoduleGitURL.
func (s *ContentFile) GetSubmoduleGitURL() OptString {
	return s.SubmoduleGitURL
}

// SetType sets the value of Type.
func (s *ContentFile) SetType(val string) {
	s.Type = val
}

// SetEncoding sets the value of Encoding.
func (s *ContentFile) SetEncoding(val string) {
	s.Encoding = val
}

// SetSize sets the value of Size.
func (s *ContentFile) SetSize(val int) {
	s.Size = val
}

// SetName sets the value of Name.
func (s *ContentFile) SetName(val string) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *ContentFile) SetPath(val string) {
	s.Path = val
}

// SetContent sets the value of Content.
func (s *ContentFile) SetContent(val string) {
	s.Content = val
}

// SetSha sets the value of Sha.
func (s *ContentFile) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *ContentFile) SetURL(val url.URL) {
	s.URL = val
}

// SetGitURL sets the value of GitURL.
func (s *ContentFile) SetGitURL(val NilURI) {
	s.GitURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *ContentFile) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *ContentFile) SetDownloadURL(val NilURI) {
	s.DownloadURL = val
}

// SetLinks sets the value of Links.
func (s *ContentFile) SetLinks(val ContentFileLinks) {
	s.Links = val
}

// SetTarget sets the value of Target.
func (s *ContentFile) SetTarget(val OptString) {
	s.Target = val
}

// SetSubmoduleGitURL sets the value of SubmoduleGitURL.
func (s *ContentFile) SetSubmoduleGitURL(val OptString) {
	s.SubmoduleGitURL = val
}

func (*ContentFile) reposGetReadmeInDirectoryRes() {}
func (*ContentFile) reposGetReadmeRes()            {}

type ContentFileLinks struct {
	Git  NilURI  `json:"git"`
	HTML NilURI  `json:"html"`
	Self url.URL `json:"self"`
}

// GetGit returns the value of Git.
func (s *ContentFileLinks) GetGit() NilURI {
	return s.Git
}

// GetHTML returns the value of HTML.
func (s *ContentFileLinks) GetHTML() NilURI {
	return s.HTML
}

// GetSelf returns the value of Self.
func (s *ContentFileLinks) GetSelf() url.URL {
	return s.Self
}

// SetGit sets the value of Git.
func (s *ContentFileLinks) SetGit(val NilURI) {
	s.Git = val
}

// SetHTML sets the value of HTML.
func (s *ContentFileLinks) SetHTML(val NilURI) {
	s.HTML = val
}

// SetSelf sets the value of Self.
func (s *ContentFileLinks) SetSelf(val url.URL) {
	s.Self = val
}

// Content Reference attachments allow you to provide context around URLs posted in comments.
// Ref: #/components/schemas/content-reference-attachment
type ContentReferenceAttachment struct {
	// The ID of the attachment.
	ID int `json:"id"`
	// The title of the attachment.
	Title string `json:"title"`
	// The body of the attachment.
	Body string `json:"body"`
	// The node_id of the content attachment.
	NodeID OptString `json:"node_id"`
}

// GetID returns the value of ID.
func (s *ContentReferenceAttachment) GetID() int {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *ContentReferenceAttachment) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *ContentReferenceAttachment) GetBody() string {
	return s.Body
}

// GetNodeID returns the value of NodeID.
func (s *ContentReferenceAttachment) GetNodeID() OptString {
	return s.NodeID
}

// SetID sets the value of ID.
func (s *ContentReferenceAttachment) SetID(val int) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ContentReferenceAttachment) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *ContentReferenceAttachment) SetBody(val string) {
	s.Body = val
}

// SetNodeID sets the value of NodeID.
func (s *ContentReferenceAttachment) SetNodeID(val OptString) {
	s.NodeID = val
}

func (*ContentReferenceAttachment) appsCreateContentAttachmentRes() {}

// Content Traffic.
// Ref: #/components/schemas/content-traffic
type ContentTraffic struct {
	Path    string `json:"path"`
	Title   string `json:"title"`
	Count   int    `json:"count"`
	Uniques int    `json:"uniques"`
}

// GetPath returns the value of Path.
func (s *ContentTraffic) GetPath() string {
	return s.Path
}

// GetTitle returns the value of Title.
func (s *ContentTraffic) GetTitle() string {
	return s.Title
}

// GetCount returns the value of Count.
func (s *ContentTraffic) GetCount() int {
	return s.Count
}

// GetUniques returns the value of Uniques.
func (s *ContentTraffic) GetUniques() int {
	return s.Uniques
}

// SetPath sets the value of Path.
func (s *ContentTraffic) SetPath(val string) {
	s.Path = val
}

// SetTitle sets the value of Title.
func (s *ContentTraffic) SetTitle(val string) {
	s.Title = val
}

// SetCount sets the value of Count.
func (s *ContentTraffic) SetCount(val int) {
	s.Count = val
}

// SetUniques sets the value of Uniques.
func (s *ContentTraffic) SetUniques(val int) {
	s.Uniques = val
}

// Contributor.
// Ref: #/components/schemas/contributor
type Contributor struct {
	Login             OptString    `json:"login"`
	ID                OptInt       `json:"id"`
	NodeID            OptString    `json:"node_id"`
	AvatarURL         OptURI       `json:"avatar_url"`
	GravatarID        OptNilString `json:"gravatar_id"`
	URL               OptURI       `json:"url"`
	HTMLURL           OptURI       `json:"html_url"`
	FollowersURL      OptURI       `json:"followers_url"`
	FollowingURL      OptString    `json:"following_url"`
	GistsURL          OptString    `json:"gists_url"`
	StarredURL        OptString    `json:"starred_url"`
	SubscriptionsURL  OptURI       `json:"subscriptions_url"`
	OrganizationsURL  OptURI       `json:"organizations_url"`
	ReposURL          OptURI       `json:"repos_url"`
	EventsURL         OptString    `json:"events_url"`
	ReceivedEventsURL OptURI       `json:"received_events_url"`
	Type              string       `json:"type"`
	SiteAdmin         OptBool      `json:"site_admin"`
	Contributions     int          `json:"contributions"`
	Email             OptString    `json:"email"`
	Name              OptString    `json:"name"`
}

// GetLogin returns the value of Login.
func (s *Contributor) GetLogin() OptString {
	return s.Login
}

// GetID returns the value of ID.
func (s *Contributor) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Contributor) GetNodeID() OptString {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *Contributor) GetAvatarURL() OptURI {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *Contributor) GetGravatarID() OptNilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *Contributor) GetURL() OptURI {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Contributor) GetHTMLURL() OptURI {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *Contributor) GetFollowersURL() OptURI {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *Contributor) GetFollowingURL() OptString {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *Contributor) GetGistsURL() OptString {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *Contributor) GetStarredURL() OptString {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *Contributor) GetSubscriptionsURL() OptURI {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *Contributor) GetOrganizationsURL() OptURI {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *Contributor) GetReposURL() OptURI {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *Contributor) GetEventsURL() OptString {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *Contributor) GetReceivedEventsURL() OptURI {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *Contributor) GetType() string {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *Contributor) GetSiteAdmin() OptBool {
	return s.SiteAdmin
}

// GetContributions returns the value of Contributions.
func (s *Contributor) GetContributions() int {
	return s.Contributions
}

// GetEmail returns the value of Email.
func (s *Contributor) GetEmail() OptString {
	return s.Email
}

// GetName returns the value of Name.
func (s *Contributor) GetName() OptString {
	return s.Name
}

// SetLogin sets the value of Login.
func (s *Contributor) SetLogin(val OptString) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *Contributor) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Contributor) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *Contributor) SetAvatarURL(val OptURI) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *Contributor) SetGravatarID(val OptNilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *Contributor) SetURL(val OptURI) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Contributor) SetHTMLURL(val OptURI) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *Contributor) SetFollowersURL(val OptURI) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *Contributor) SetFollowingURL(val OptString) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *Contributor) SetGistsURL(val OptString) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *Contributor) SetStarredURL(val OptString) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *Contributor) SetSubscriptionsURL(val OptURI) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *Contributor) SetOrganizationsURL(val OptURI) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *Contributor) SetReposURL(val OptURI) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *Contributor) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *Contributor) SetReceivedEventsURL(val OptURI) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *Contributor) SetType(val string) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *Contributor) SetSiteAdmin(val OptBool) {
	s.SiteAdmin = val
}

// SetContributions sets the value of Contributions.
func (s *Contributor) SetContributions(val int) {
	s.Contributions = val
}

// SetEmail sets the value of Email.
func (s *Contributor) SetEmail(val OptString) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *Contributor) SetName(val OptString) {
	s.Name = val
}

// Contributor Activity.
// Ref: #/components/schemas/contributor-activity
type ContributorActivity struct {
	Author NilNullableSimpleUser          `json:"author"`
	Total  int                            `json:"total"`
	Weeks  []ContributorActivityWeeksItem `json:"weeks"`
}

// GetAuthor returns the value of Author.
func (s *ContributorActivity) GetAuthor() NilNullableSimpleUser {
	return s.Author
}

// GetTotal returns the value of Total.
func (s *ContributorActivity) GetTotal() int {
	return s.Total
}

// GetWeeks returns the value of Weeks.
func (s *ContributorActivity) GetWeeks() []ContributorActivityWeeksItem {
	return s.Weeks
}

// SetAuthor sets the value of Author.
func (s *ContributorActivity) SetAuthor(val NilNullableSimpleUser) {
	s.Author = val
}

// SetTotal sets the value of Total.
func (s *ContributorActivity) SetTotal(val int) {
	s.Total = val
}

// SetWeeks sets the value of Weeks.
func (s *ContributorActivity) SetWeeks(val []ContributorActivityWeeksItem) {
	s.Weeks = val
}

type ContributorActivityWeeksItem struct {
	W OptInt `json:"w"`
	A OptInt `json:"a"`
	D OptInt `json:"d"`
	C OptInt `json:"c"`
}

// GetW returns the value of W.
func (s *ContributorActivityWeeksItem) GetW() OptInt {
	return s.W
}

// GetA returns the value of A.
func (s *ContributorActivityWeeksItem) GetA() OptInt {
	return s.A
}

// GetD returns the value of D.
func (s *ContributorActivityWeeksItem) GetD() OptInt {
	return s.D
}

// GetC returns the value of C.
func (s *ContributorActivityWeeksItem) GetC() OptInt {
	return s.C
}

// SetW sets the value of W.
func (s *ContributorActivityWeeksItem) SetW(val OptInt) {
	s.W = val
}

// SetA sets the value of A.
func (s *ContributorActivityWeeksItem) SetA(val OptInt) {
	s.A = val
}

// SetD sets the value of D.
func (s *ContributorActivityWeeksItem) SetD(val OptInt) {
	s.D = val
}

// SetC sets the value of C.
func (s *ContributorActivityWeeksItem) SetC(val OptInt) {
	s.C = val
}

// Credential Authorization.
// Ref: #/components/schemas/credential-authorization
type CredentialAuthorization struct {
	// User login that owns the underlying credential.
	Login string `json:"login"`
	// Unique identifier for the credential.
	CredentialID int `json:"credential_id"`
	// Human-readable description of the credential type.
	CredentialType string `json:"credential_type"`
	// Last eight characters of the credential. Only included in responses with credential_type of
	// personal access token.
	TokenLastEight OptString `json:"token_last_eight"`
	// Date when the credential was authorized for use.
	CredentialAuthorizedAt time.Time `json:"credential_authorized_at"`
	// List of oauth scopes the token has been granted.
	Scopes []string `json:"scopes"`
	// Unique string to distinguish the credential. Only included in responses with credential_type of
	// SSH Key.
	Fingerprint OptString `json:"fingerprint"`
	// Date when the credential was last accessed. May be null if it was never accessed.
	CredentialAccessedAt   OptNilDateTime `json:"credential_accessed_at"`
	AuthorizedCredentialID OptNilInt      `json:"authorized_credential_id"`
	// The title given to the ssh key. This will only be present when the credential is an ssh key.
	AuthorizedCredentialTitle OptNilString `json:"authorized_credential_title"`
	// The note given to the token. This will only be present when the credential is a token.
	AuthorizedCredentialNote OptNilString `json:"authorized_credential_note"`
}

// GetLogin returns the value of Login.
func (s *CredentialAuthorization) GetLogin() string {
	return s.Login
}

// GetCredentialID returns the value of CredentialID.
func (s *CredentialAuthorization) GetCredentialID() int {
	return s.CredentialID
}

// GetCredentialType returns the value of CredentialType.
func (s *CredentialAuthorization) GetCredentialType() string {
	return s.CredentialType
}

// GetTokenLastEight returns the value of TokenLastEight.
func (s *CredentialAuthorization) GetTokenLastEight() OptString {
	return s.TokenLastEight
}

// GetCredentialAuthorizedAt returns the value of CredentialAuthorizedAt.
func (s *CredentialAuthorization) GetCredentialAuthorizedAt() time.Time {
	return s.CredentialAuthorizedAt
}

// GetScopes returns the value of Scopes.
func (s *CredentialAuthorization) GetScopes() []string {
	return s.Scopes
}

// GetFingerprint returns the value of Fingerprint.
func (s *CredentialAuthorization) GetFingerprint() OptString {
	return s.Fingerprint
}

// GetCredentialAccessedAt returns the value of CredentialAccessedAt.
func (s *CredentialAuthorization) GetCredentialAccessedAt() OptNilDateTime {
	return s.CredentialAccessedAt
}

// GetAuthorizedCredentialID returns the value of AuthorizedCredentialID.
func (s *CredentialAuthorization) GetAuthorizedCredentialID() OptNilInt {
	return s.AuthorizedCredentialID
}

// GetAuthorizedCredentialTitle returns the value of AuthorizedCredentialTitle.
func (s *CredentialAuthorization) GetAuthorizedCredentialTitle() OptNilString {
	return s.AuthorizedCredentialTitle
}

// GetAuthorizedCredentialNote returns the value of AuthorizedCredentialNote.
func (s *CredentialAuthorization) GetAuthorizedCredentialNote() OptNilString {
	return s.AuthorizedCredentialNote
}

// SetLogin sets the value of Login.
func (s *CredentialAuthorization) SetLogin(val string) {
	s.Login = val
}

// SetCredentialID sets the value of CredentialID.
func (s *CredentialAuthorization) SetCredentialID(val int) {
	s.CredentialID = val
}

// SetCredentialType sets the value of CredentialType.
func (s *CredentialAuthorization) SetCredentialType(val string) {
	s.CredentialType = val
}

// SetTokenLastEight sets the value of TokenLastEight.
func (s *CredentialAuthorization) SetTokenLastEight(val OptString) {
	s.TokenLastEight = val
}

// SetCredentialAuthorizedAt sets the value of CredentialAuthorizedAt.
func (s *CredentialAuthorization) SetCredentialAuthorizedAt(val time.Time) {
	s.CredentialAuthorizedAt = val
}

// SetScopes sets the value of Scopes.
func (s *CredentialAuthorization) SetScopes(val []string) {
	s.Scopes = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *CredentialAuthorization) SetFingerprint(val OptString) {
	s.Fingerprint = val
}

// SetCredentialAccessedAt sets the value of CredentialAccessedAt.
func (s *CredentialAuthorization) SetCredentialAccessedAt(val OptNilDateTime) {
	s.CredentialAccessedAt = val
}

// SetAuthorizedCredentialID sets the value of AuthorizedCredentialID.
func (s *CredentialAuthorization) SetAuthorizedCredentialID(val OptNilInt) {
	s.AuthorizedCredentialID = val
}

// SetAuthorizedCredentialTitle sets the value of AuthorizedCredentialTitle.
func (s *CredentialAuthorization) SetAuthorizedCredentialTitle(val OptNilString) {
	s.AuthorizedCredentialTitle = val
}

// SetAuthorizedCredentialNote sets the value of AuthorizedCredentialNote.
func (s *CredentialAuthorization) SetAuthorizedCredentialNote(val OptNilString) {
	s.AuthorizedCredentialNote = val
}

// An SSH key granting access to a single repository.
// Ref: #/components/schemas/deploy-key
type DeployKey struct {
	ID        int    `json:"id"`
	Key       string `json:"key"`
	URL       string `json:"url"`
	Title     string `json:"title"`
	Verified  bool   `json:"verified"`
	CreatedAt string `json:"created_at"`
	ReadOnly  bool   `json:"read_only"`
}

// GetID returns the value of ID.
func (s *DeployKey) GetID() int {
	return s.ID
}

// GetKey returns the value of Key.
func (s *DeployKey) GetKey() string {
	return s.Key
}

// GetURL returns the value of URL.
func (s *DeployKey) GetURL() string {
	return s.URL
}

// GetTitle returns the value of Title.
func (s *DeployKey) GetTitle() string {
	return s.Title
}

// GetVerified returns the value of Verified.
func (s *DeployKey) GetVerified() bool {
	return s.Verified
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DeployKey) GetCreatedAt() string {
	return s.CreatedAt
}

// GetReadOnly returns the value of ReadOnly.
func (s *DeployKey) GetReadOnly() bool {
	return s.ReadOnly
}

// SetID sets the value of ID.
func (s *DeployKey) SetID(val int) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *DeployKey) SetKey(val string) {
	s.Key = val
}

// SetURL sets the value of URL.
func (s *DeployKey) SetURL(val string) {
	s.URL = val
}

// SetTitle sets the value of Title.
func (s *DeployKey) SetTitle(val string) {
	s.Title = val
}

// SetVerified sets the value of Verified.
func (s *DeployKey) SetVerified(val bool) {
	s.Verified = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DeployKey) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *DeployKey) SetReadOnly(val bool) {
	s.ReadOnly = val
}

func (*DeployKey) reposGetDeployKeyRes() {}

// DeployKeyHeaders wraps DeployKey with response headers.
type DeployKeyHeaders struct {
	Location OptString
	Response DeployKey
}

// GetLocation returns the value of Location.
func (s *DeployKeyHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *DeployKeyHeaders) GetResponse() DeployKey {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *DeployKeyHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *DeployKeyHeaders) SetResponse(val DeployKey) {
	s.Response = val
}

func (*DeployKeyHeaders) reposCreateDeployKeyRes() {}

// A request for a specific ref(branch,sha,tag) to be deployed.
// Ref: #/components/schemas/deployment
type Deployment struct {
	URL url.URL `json:"url"`
	// Unique identifier of the deployment.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	Sha    string `json:"sha"`
	// The ref to deploy. This can be a branch, tag, or sha.
	Ref string `json:"ref"`
	// Parameter to specify a task to execute.
	Task                string            `json:"task"`
	Payload             DeploymentPayload `json:"payload"`
	OriginalEnvironment OptString         `json:"original_environment"`
	// Name for the target deployment environment.
	Environment   string                `json:"environment"`
	Description   NilString             `json:"description"`
	Creator       NilNullableSimpleUser `json:"creator"`
	CreatedAt     time.Time             `json:"created_at"`
	UpdatedAt     time.Time             `json:"updated_at"`
	StatusesURL   url.URL               `json:"statuses_url"`
	RepositoryURL url.URL               `json:"repository_url"`
	// Specifies if the given environment is will no longer exist at some point in the future. Default:
	// false.
	TransientEnvironment OptBool `json:"transient_environment"`
	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment OptBool                   `json:"production_environment"`
	PerformedViaGithubApp OptNilNullableIntegration `json:"performed_via_github_app"`
}

// GetURL returns the value of URL.
func (s *Deployment) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *Deployment) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Deployment) GetNodeID() string {
	return s.NodeID
}

// GetSha returns the value of Sha.
func (s *Deployment) GetSha() string {
	return s.Sha
}

// GetRef returns the value of Ref.
func (s *Deployment) GetRef() string {
	return s.Ref
}

// GetTask returns the value of Task.
func (s *Deployment) GetTask() string {
	return s.Task
}

// GetPayload returns the value of Payload.
func (s *Deployment) GetPayload() DeploymentPayload {
	return s.Payload
}

// GetOriginalEnvironment returns the value of OriginalEnvironment.
func (s *Deployment) GetOriginalEnvironment() OptString {
	return s.OriginalEnvironment
}

// GetEnvironment returns the value of Environment.
func (s *Deployment) GetEnvironment() string {
	return s.Environment
}

// GetDescription returns the value of Description.
func (s *Deployment) GetDescription() NilString {
	return s.Description
}

// GetCreator returns the value of Creator.
func (s *Deployment) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Deployment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Deployment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatusesURL returns the value of StatusesURL.
func (s *Deployment) GetStatusesURL() url.URL {
	return s.StatusesURL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *Deployment) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetTransientEnvironment returns the value of TransientEnvironment.
func (s *Deployment) GetTransientEnvironment() OptBool {
	return s.TransientEnvironment
}

// GetProductionEnvironment returns the value of ProductionEnvironment.
func (s *Deployment) GetProductionEnvironment() OptBool {
	return s.ProductionEnvironment
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *Deployment) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// SetURL sets the value of URL.
func (s *Deployment) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *Deployment) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Deployment) SetNodeID(val string) {
	s.NodeID = val
}

// SetSha sets the value of Sha.
func (s *Deployment) SetSha(val string) {
	s.Sha = val
}

// SetRef sets the value of Ref.
func (s *Deployment) SetRef(val string) {
	s.Ref = val
}

// SetTask sets the value of Task.
func (s *Deployment) SetTask(val string) {
	s.Task = val
}

// SetPayload sets the value of Payload.
func (s *Deployment) SetPayload(val DeploymentPayload) {
	s.Payload = val
}

// SetOriginalEnvironment sets the value of OriginalEnvironment.
func (s *Deployment) SetOriginalEnvironment(val OptString) {
	s.OriginalEnvironment = val
}

// SetEnvironment sets the value of Environment.
func (s *Deployment) SetEnvironment(val string) {
	s.Environment = val
}

// SetDescription sets the value of Description.
func (s *Deployment) SetDescription(val NilString) {
	s.Description = val
}

// SetCreator sets the value of Creator.
func (s *Deployment) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Deployment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Deployment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *Deployment) SetStatusesURL(val url.URL) {
	s.StatusesURL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *Deployment) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetTransientEnvironment sets the value of TransientEnvironment.
func (s *Deployment) SetTransientEnvironment(val OptBool) {
	s.TransientEnvironment = val
}

// SetProductionEnvironment sets the value of ProductionEnvironment.
func (s *Deployment) SetProductionEnvironment(val OptBool) {
	s.ProductionEnvironment = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *Deployment) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

func (*Deployment) reposCreateDeploymentRes() {}
func (*Deployment) reposGetDeploymentRes()    {}

// DeploymentPayload represents sum type.
type DeploymentPayload struct {
	Type               DeploymentPayloadType // switch on this field
	DeploymentPayload0 DeploymentPayload0
	String             string
}

// DeploymentPayloadType is oneOf type of DeploymentPayload.
type DeploymentPayloadType string

// Possible values for DeploymentPayloadType.
const (
	DeploymentPayload0DeploymentPayload DeploymentPayloadType = "DeploymentPayload0"
	StringDeploymentPayload             DeploymentPayloadType = "string"
)

// IsDeploymentPayload0 reports whether DeploymentPayload is DeploymentPayload0.
func (s DeploymentPayload) IsDeploymentPayload0() bool {
	return s.Type == DeploymentPayload0DeploymentPayload
}

// IsString reports whether DeploymentPayload is string.
func (s DeploymentPayload) IsString() bool { return s.Type == StringDeploymentPayload }

// SetDeploymentPayload0 sets DeploymentPayload to DeploymentPayload0.
func (s *DeploymentPayload) SetDeploymentPayload0(v DeploymentPayload0) {
	s.Type = DeploymentPayload0DeploymentPayload
	s.DeploymentPayload0 = v
}

// GetDeploymentPayload0 returns DeploymentPayload0 and true boolean if DeploymentPayload is DeploymentPayload0.
func (s DeploymentPayload) GetDeploymentPayload0() (v DeploymentPayload0, ok bool) {
	if !s.IsDeploymentPayload0() {
		return v, false
	}
	return s.DeploymentPayload0, true
}

// NewDeploymentPayload0DeploymentPayload returns new DeploymentPayload from DeploymentPayload0.
func NewDeploymentPayload0DeploymentPayload(v DeploymentPayload0) DeploymentPayload {
	var s DeploymentPayload
	s.SetDeploymentPayload0(v)
	return s
}

// SetString sets DeploymentPayload to string.
func (s *DeploymentPayload) SetString(v string) {
	s.Type = StringDeploymentPayload
	s.String = v
}

// GetString returns string and true boolean if DeploymentPayload is string.
func (s DeploymentPayload) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDeploymentPayload returns new DeploymentPayload from string.
func NewStringDeploymentPayload(v string) DeploymentPayload {
	var s DeploymentPayload
	s.SetString(v)
	return s
}

type DeploymentPayload0 map[string]jx.Raw

func (s *DeploymentPayload0) init() DeploymentPayload0 {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A deployment created as the result of an Actions check run from a workflow that references an
// environment.
// Ref: #/components/schemas/deployment-simple
type DeploymentSimple struct {
	URL url.URL `json:"url"`
	// Unique identifier of the deployment.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// Parameter to specify a task to execute.
	Task                string    `json:"task"`
	OriginalEnvironment OptString `json:"original_environment"`
	// Name for the target deployment environment.
	Environment   string    `json:"environment"`
	Description   NilString `json:"description"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	StatusesURL   url.URL   `json:"statuses_url"`
	RepositoryURL url.URL   `json:"repository_url"`
	// Specifies if the given environment is will no longer exist at some point in the future. Default:
	// false.
	TransientEnvironment OptBool `json:"transient_environment"`
	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment OptBool                   `json:"production_environment"`
	PerformedViaGithubApp OptNilNullableIntegration `json:"performed_via_github_app"`
}

// GetURL returns the value of URL.
func (s *DeploymentSimple) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *DeploymentSimple) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *DeploymentSimple) GetNodeID() string {
	return s.NodeID
}

// GetTask returns the value of Task.
func (s *DeploymentSimple) GetTask() string {
	return s.Task
}

// GetOriginalEnvironment returns the value of OriginalEnvironment.
func (s *DeploymentSimple) GetOriginalEnvironment() OptString {
	return s.OriginalEnvironment
}

// GetEnvironment returns the value of Environment.
func (s *DeploymentSimple) GetEnvironment() string {
	return s.Environment
}

// GetDescription returns the value of Description.
func (s *DeploymentSimple) GetDescription() NilString {
	return s.Description
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DeploymentSimple) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DeploymentSimple) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatusesURL returns the value of StatusesURL.
func (s *DeploymentSimple) GetStatusesURL() url.URL {
	return s.StatusesURL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *DeploymentSimple) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetTransientEnvironment returns the value of TransientEnvironment.
func (s *DeploymentSimple) GetTransientEnvironment() OptBool {
	return s.TransientEnvironment
}

// GetProductionEnvironment returns the value of ProductionEnvironment.
func (s *DeploymentSimple) GetProductionEnvironment() OptBool {
	return s.ProductionEnvironment
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *DeploymentSimple) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// SetURL sets the value of URL.
func (s *DeploymentSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *DeploymentSimple) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *DeploymentSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetTask sets the value of Task.
func (s *DeploymentSimple) SetTask(val string) {
	s.Task = val
}

// SetOriginalEnvironment sets the value of OriginalEnvironment.
func (s *DeploymentSimple) SetOriginalEnvironment(val OptString) {
	s.OriginalEnvironment = val
}

// SetEnvironment sets the value of Environment.
func (s *DeploymentSimple) SetEnvironment(val string) {
	s.Environment = val
}

// SetDescription sets the value of Description.
func (s *DeploymentSimple) SetDescription(val NilString) {
	s.Description = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DeploymentSimple) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DeploymentSimple) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *DeploymentSimple) SetStatusesURL(val url.URL) {
	s.StatusesURL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *DeploymentSimple) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetTransientEnvironment sets the value of TransientEnvironment.
func (s *DeploymentSimple) SetTransientEnvironment(val OptBool) {
	s.TransientEnvironment = val
}

// SetProductionEnvironment sets the value of ProductionEnvironment.
func (s *DeploymentSimple) SetProductionEnvironment(val OptBool) {
	s.ProductionEnvironment = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *DeploymentSimple) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

// The status of a deployment.
// Ref: #/components/schemas/deployment-status
type DeploymentStatus struct {
	URL    url.URL `json:"url"`
	ID     int     `json:"id"`
	NodeID string  `json:"node_id"`
	// The state of the status.
	State   DeploymentStatusState `json:"state"`
	Creator NilNullableSimpleUser `json:"creator"`
	// A short description of the status.
	Description string `json:"description"`
	// The environment of the deployment that the status is for.
	Environment OptString `json:"environment"`
	// Deprecated: the URL to associate with this status.
	TargetURL     url.URL   `json:"target_url"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	DeploymentURL url.URL   `json:"deployment_url"`
	RepositoryURL url.URL   `json:"repository_url"`
	// The URL for accessing your environment.
	EnvironmentURL OptURI `json:"environment_url"`
	// The URL to associate with this status.
	LogURL                OptURI                    `json:"log_url"`
	PerformedViaGithubApp OptNilNullableIntegration `json:"performed_via_github_app"`
}

// GetURL returns the value of URL.
func (s *DeploymentStatus) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *DeploymentStatus) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *DeploymentStatus) GetNodeID() string {
	return s.NodeID
}

// GetState returns the value of State.
func (s *DeploymentStatus) GetState() DeploymentStatusState {
	return s.State
}

// GetCreator returns the value of Creator.
func (s *DeploymentStatus) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// GetDescription returns the value of Description.
func (s *DeploymentStatus) GetDescription() string {
	return s.Description
}

// GetEnvironment returns the value of Environment.
func (s *DeploymentStatus) GetEnvironment() OptString {
	return s.Environment
}

// GetTargetURL returns the value of TargetURL.
func (s *DeploymentStatus) GetTargetURL() url.URL {
	return s.TargetURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DeploymentStatus) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DeploymentStatus) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeploymentURL returns the value of DeploymentURL.
func (s *DeploymentStatus) GetDeploymentURL() url.URL {
	return s.DeploymentURL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *DeploymentStatus) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetEnvironmentURL returns the value of EnvironmentURL.
func (s *DeploymentStatus) GetEnvironmentURL() OptURI {
	return s.EnvironmentURL
}

// GetLogURL returns the value of LogURL.
func (s *DeploymentStatus) GetLogURL() OptURI {
	return s.LogURL
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *DeploymentStatus) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// SetURL sets the value of URL.
func (s *DeploymentStatus) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *DeploymentStatus) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *DeploymentStatus) SetNodeID(val string) {
	s.NodeID = val
}

// SetState sets the value of State.
func (s *DeploymentStatus) SetState(val DeploymentStatusState) {
	s.State = val
}

// SetCreator sets the value of Creator.
func (s *DeploymentStatus) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// SetDescription sets the value of Description.
func (s *DeploymentStatus) SetDescription(val string) {
	s.Description = val
}

// SetEnvironment sets the value of Environment.
func (s *DeploymentStatus) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetTargetURL sets the value of TargetURL.
func (s *DeploymentStatus) SetTargetURL(val url.URL) {
	s.TargetURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DeploymentStatus) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DeploymentStatus) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeploymentURL sets the value of DeploymentURL.
func (s *DeploymentStatus) SetDeploymentURL(val url.URL) {
	s.DeploymentURL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *DeploymentStatus) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetEnvironmentURL sets the value of EnvironmentURL.
func (s *DeploymentStatus) SetEnvironmentURL(val OptURI) {
	s.EnvironmentURL = val
}

// SetLogURL sets the value of LogURL.
func (s *DeploymentStatus) SetLogURL(val OptURI) {
	s.LogURL = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *DeploymentStatus) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

func (*DeploymentStatus) reposGetDeploymentStatusRes() {}

// DeploymentStatusHeaders wraps DeploymentStatus with response headers.
type DeploymentStatusHeaders struct {
	Location OptString
	Response DeploymentStatus
}

// GetLocation returns the value of Location.
func (s *DeploymentStatusHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *DeploymentStatusHeaders) GetResponse() DeploymentStatus {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *DeploymentStatusHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *DeploymentStatusHeaders) SetResponse(val DeploymentStatus) {
	s.Response = val
}

func (*DeploymentStatusHeaders) reposCreateDeploymentStatusRes() {}

// The state of the status.
type DeploymentStatusState string

const (
	DeploymentStatusStateError      DeploymentStatusState = "error"
	DeploymentStatusStateFailure    DeploymentStatusState = "failure"
	DeploymentStatusStateInactive   DeploymentStatusState = "inactive"
	DeploymentStatusStatePending    DeploymentStatusState = "pending"
	DeploymentStatusStateSuccess    DeploymentStatusState = "success"
	DeploymentStatusStateQueued     DeploymentStatusState = "queued"
	DeploymentStatusStateInProgress DeploymentStatusState = "in_progress"
)

// MarshalText implements encoding.TextMarshaler.
func (s DeploymentStatusState) MarshalText() ([]byte, error) {
	switch s {
	case DeploymentStatusStateError:
		return []byte(s), nil
	case DeploymentStatusStateFailure:
		return []byte(s), nil
	case DeploymentStatusStateInactive:
		return []byte(s), nil
	case DeploymentStatusStatePending:
		return []byte(s), nil
	case DeploymentStatusStateSuccess:
		return []byte(s), nil
	case DeploymentStatusStateQueued:
		return []byte(s), nil
	case DeploymentStatusStateInProgress:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeploymentStatusState) UnmarshalText(data []byte) error {
	switch DeploymentStatusState(data) {
	case DeploymentStatusStateError:
		*s = DeploymentStatusStateError
		return nil
	case DeploymentStatusStateFailure:
		*s = DeploymentStatusStateFailure
		return nil
	case DeploymentStatusStateInactive:
		*s = DeploymentStatusStateInactive
		return nil
	case DeploymentStatusStatePending:
		*s = DeploymentStatusStatePending
		return nil
	case DeploymentStatusStateSuccess:
		*s = DeploymentStatusStateSuccess
		return nil
	case DeploymentStatusStateQueued:
		*s = DeploymentStatusStateQueued
		return nil
	case DeploymentStatusStateInProgress:
		*s = DeploymentStatusStateInProgress
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Diff Entry.
// Ref: #/components/schemas/diff-entry
type DiffEntry struct {
	Sha              string          `json:"sha"`
	Filename         string          `json:"filename"`
	Status           DiffEntryStatus `json:"status"`
	Additions        int             `json:"additions"`
	Deletions        int             `json:"deletions"`
	Changes          int             `json:"changes"`
	BlobURL          url.URL         `json:"blob_url"`
	RawURL           url.URL         `json:"raw_url"`
	ContentsURL      url.URL         `json:"contents_url"`
	Patch            OptString       `json:"patch"`
	PreviousFilename OptString       `json:"previous_filename"`
}

// GetSha returns the value of Sha.
func (s *DiffEntry) GetSha() string {
	return s.Sha
}

// GetFilename returns the value of Filename.
func (s *DiffEntry) GetFilename() string {
	return s.Filename
}

// GetStatus returns the value of Status.
func (s *DiffEntry) GetStatus() DiffEntryStatus {
	return s.Status
}

// GetAdditions returns the value of Additions.
func (s *DiffEntry) GetAdditions() int {
	return s.Additions
}

// GetDeletions returns the value of Deletions.
func (s *DiffEntry) GetDeletions() int {
	return s.Deletions
}

// GetChanges returns the value of Changes.
func (s *DiffEntry) GetChanges() int {
	return s.Changes
}

// GetBlobURL returns the value of BlobURL.
func (s *DiffEntry) GetBlobURL() url.URL {
	return s.BlobURL
}

// GetRawURL returns the value of RawURL.
func (s *DiffEntry) GetRawURL() url.URL {
	return s.RawURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *DiffEntry) GetContentsURL() url.URL {
	return s.ContentsURL
}

// GetPatch returns the value of Patch.
func (s *DiffEntry) GetPatch() OptString {
	return s.Patch
}

// GetPreviousFilename returns the value of PreviousFilename.
func (s *DiffEntry) GetPreviousFilename() OptString {
	return s.PreviousFilename
}

// SetSha sets the value of Sha.
func (s *DiffEntry) SetSha(val string) {
	s.Sha = val
}

// SetFilename sets the value of Filename.
func (s *DiffEntry) SetFilename(val string) {
	s.Filename = val
}

// SetStatus sets the value of Status.
func (s *DiffEntry) SetStatus(val DiffEntryStatus) {
	s.Status = val
}

// SetAdditions sets the value of Additions.
func (s *DiffEntry) SetAdditions(val int) {
	s.Additions = val
}

// SetDeletions sets the value of Deletions.
func (s *DiffEntry) SetDeletions(val int) {
	s.Deletions = val
}

// SetChanges sets the value of Changes.
func (s *DiffEntry) SetChanges(val int) {
	s.Changes = val
}

// SetBlobURL sets the value of BlobURL.
func (s *DiffEntry) SetBlobURL(val url.URL) {
	s.BlobURL = val
}

// SetRawURL sets the value of RawURL.
func (s *DiffEntry) SetRawURL(val url.URL) {
	s.RawURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *DiffEntry) SetContentsURL(val url.URL) {
	s.ContentsURL = val
}

// SetPatch sets the value of Patch.
func (s *DiffEntry) SetPatch(val OptString) {
	s.Patch = val
}

// SetPreviousFilename sets the value of PreviousFilename.
func (s *DiffEntry) SetPreviousFilename(val OptString) {
	s.PreviousFilename = val
}

type DiffEntryStatus string

const (
	DiffEntryStatusAdded     DiffEntryStatus = "added"
	DiffEntryStatusRemoved   DiffEntryStatus = "removed"
	DiffEntryStatusModified  DiffEntryStatus = "modified"
	DiffEntryStatusRenamed   DiffEntryStatus = "renamed"
	DiffEntryStatusCopied    DiffEntryStatus = "copied"
	DiffEntryStatusChanged   DiffEntryStatus = "changed"
	DiffEntryStatusUnchanged DiffEntryStatus = "unchanged"
)

// MarshalText implements encoding.TextMarshaler.
func (s DiffEntryStatus) MarshalText() ([]byte, error) {
	switch s {
	case DiffEntryStatusAdded:
		return []byte(s), nil
	case DiffEntryStatusRemoved:
		return []byte(s), nil
	case DiffEntryStatusModified:
		return []byte(s), nil
	case DiffEntryStatusRenamed:
		return []byte(s), nil
	case DiffEntryStatusCopied:
		return []byte(s), nil
	case DiffEntryStatusChanged:
		return []byte(s), nil
	case DiffEntryStatusUnchanged:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DiffEntryStatus) UnmarshalText(data []byte) error {
	switch DiffEntryStatus(data) {
	case DiffEntryStatusAdded:
		*s = DiffEntryStatusAdded
		return nil
	case DiffEntryStatusRemoved:
		*s = DiffEntryStatusRemoved
		return nil
	case DiffEntryStatusModified:
		*s = DiffEntryStatusModified
		return nil
	case DiffEntryStatusRenamed:
		*s = DiffEntryStatusRenamed
		return nil
	case DiffEntryStatusCopied:
		*s = DiffEntryStatusCopied
		return nil
	case DiffEntryStatusChanged:
		*s = DiffEntryStatusChanged
		return nil
	case DiffEntryStatusUnchanged:
		*s = DiffEntryStatusUnchanged
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Email.
// Ref: #/components/schemas/email
type Email struct {
	Email      string    `json:"email"`
	Primary    bool      `json:"primary"`
	Verified   bool      `json:"verified"`
	Visibility NilString `json:"visibility"`
}

// GetEmail returns the value of Email.
func (s *Email) GetEmail() string {
	return s.Email
}

// GetPrimary returns the value of Primary.
func (s *Email) GetPrimary() bool {
	return s.Primary
}

// GetVerified returns the value of Verified.
func (s *Email) GetVerified() bool {
	return s.Verified
}

// GetVisibility returns the value of Visibility.
func (s *Email) GetVisibility() NilString {
	return s.Visibility
}

// SetEmail sets the value of Email.
func (s *Email) SetEmail(val string) {
	s.Email = val
}

// SetPrimary sets the value of Primary.
func (s *Email) SetPrimary(val bool) {
	s.Primary = val
}

// SetVerified sets the value of Verified.
func (s *Email) SetVerified(val bool) {
	s.Verified = val
}

// SetVisibility sets the value of Visibility.
func (s *Email) SetVisibility(val NilString) {
	s.Visibility = val
}

type EmojisGetOK map[string]string

func (s *EmojisGetOK) init() EmojisGetOK {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

func (*EmojisGetOK) emojisGetRes() {}

// An object without any properties.
// Ref: #/components/schemas/empty-object
type EmptyObject struct{}

func (*EmptyObject) actionsApproveWorkflowRunRes()              {}
func (*EmptyObject) actionsCreateOrUpdateEnvironmentSecretRes() {}
func (*EmptyObject) actionsCreateOrUpdateOrgSecretRes()         {}
func (*EmptyObject) reposGetPagesHealthCheckRes()               {}

// The policy that controls the organizations in the enterprise that are allowed to run GitHub
// Actions. Can be one of: `all`, `none`, or `selected`.
// Ref: #/components/schemas/enabled-organizations
type EnabledOrganizations string

const (
	EnabledOrganizationsAll      EnabledOrganizations = "all"
	EnabledOrganizationsNone     EnabledOrganizations = "none"
	EnabledOrganizationsSelected EnabledOrganizations = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnabledOrganizations) MarshalText() ([]byte, error) {
	switch s {
	case EnabledOrganizationsAll:
		return []byte(s), nil
	case EnabledOrganizationsNone:
		return []byte(s), nil
	case EnabledOrganizationsSelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnabledOrganizations) UnmarshalText(data []byte) error {
	switch EnabledOrganizations(data) {
	case EnabledOrganizationsAll:
		*s = EnabledOrganizationsAll
		return nil
	case EnabledOrganizationsNone:
		*s = EnabledOrganizationsNone
		return nil
	case EnabledOrganizationsSelected:
		*s = EnabledOrganizationsSelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The policy that controls the repositories in the organization that are allowed to run GitHub
// Actions. Can be one of: `all`, `none`, or `selected`.
// Ref: #/components/schemas/enabled-repositories
type EnabledRepositories string

const (
	EnabledRepositoriesAll      EnabledRepositories = "all"
	EnabledRepositoriesNone     EnabledRepositories = "none"
	EnabledRepositoriesSelected EnabledRepositories = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnabledRepositories) MarshalText() ([]byte, error) {
	switch s {
	case EnabledRepositoriesAll:
		return []byte(s), nil
	case EnabledRepositoriesNone:
		return []byte(s), nil
	case EnabledRepositoriesSelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnabledRepositories) UnmarshalText(data []byte) error {
	switch EnabledRepositories(data) {
	case EnabledRepositoriesAll:
		*s = EnabledRepositoriesAll
		return nil
	case EnabledRepositoriesNone:
		*s = EnabledRepositoriesNone
		return nil
	case EnabledRepositoriesSelected:
		*s = EnabledRepositoriesSelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent is response for EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise operation.
type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent struct{}

// EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent is response for EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise operation.
type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseNoContent struct{}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq struct {
	// Name of the runner group.
	Name string `json:"name"`
	// Visibility of a runner group. You can select all organizations or select individual organization.
	// Can be one of: `all` or `selected`.
	Visibility OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility `json:"visibility"`
	// List of organization IDs that can access the runner group.
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
	// List of runner IDs to add to the runner group.
	Runners []int `json:"runners"`
}

// GetName returns the value of Name.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) GetVisibility() OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	return s.Visibility
}

// GetSelectedOrganizationIds returns the value of SelectedOrganizationIds.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) GetSelectedOrganizationIds() []int {
	return s.SelectedOrganizationIds
}

// GetRunners returns the value of Runners.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) GetRunners() []int {
	return s.Runners
}

// SetName sets the value of Name.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) SetVisibility(val OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) {
	s.Visibility = val
}

// SetSelectedOrganizationIds sets the value of SelectedOrganizationIds.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) SetSelectedOrganizationIds(val []int) {
	s.SelectedOrganizationIds = val
}

// SetRunners sets the value of Runners.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) SetRunners(val []int) {
	s.Runners = val
}

// Visibility of a runner group. You can select all organizations or select individual organization.
// Can be one of: `all` or `selected`.
type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility string

const (
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility = "selected"
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected:
		return []byte(s), nil
	case EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) UnmarshalText(data []byte) error {
	switch EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility(data) {
	case EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected:
		*s = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected
		return nil
	case EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll:
		*s = EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent is response for EnterpriseAdminDeleteScimGroupFromEnterprise operation.
type EnterpriseAdminDeleteScimGroupFromEnterpriseNoContent struct{}

// EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent is response for EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise operation.
type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseNoContent struct{}

// EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent is response for EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise operation.
type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseNoContent struct{}

// EnterpriseAdminDeleteUserFromEnterpriseNoContent is response for EnterpriseAdminDeleteUserFromEnterprise operation.
type EnterpriseAdminDeleteUserFromEnterpriseNoContent struct{}

// EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent is response for EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise operation.
type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseNoContent struct{}

// EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent is response for EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise operation.
type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseNoContent struct{}

type EnterpriseAdminGetAuditLogInclude string

const (
	EnterpriseAdminGetAuditLogIncludeWeb EnterpriseAdminGetAuditLogInclude = "web"
	EnterpriseAdminGetAuditLogIncludeGit EnterpriseAdminGetAuditLogInclude = "git"
	EnterpriseAdminGetAuditLogIncludeAll EnterpriseAdminGetAuditLogInclude = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnterpriseAdminGetAuditLogInclude) MarshalText() ([]byte, error) {
	switch s {
	case EnterpriseAdminGetAuditLogIncludeWeb:
		return []byte(s), nil
	case EnterpriseAdminGetAuditLogIncludeGit:
		return []byte(s), nil
	case EnterpriseAdminGetAuditLogIncludeAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnterpriseAdminGetAuditLogInclude) UnmarshalText(data []byte) error {
	switch EnterpriseAdminGetAuditLogInclude(data) {
	case EnterpriseAdminGetAuditLogIncludeWeb:
		*s = EnterpriseAdminGetAuditLogIncludeWeb
		return nil
	case EnterpriseAdminGetAuditLogIncludeGit:
		*s = EnterpriseAdminGetAuditLogIncludeGit
		return nil
	case EnterpriseAdminGetAuditLogIncludeAll:
		*s = EnterpriseAdminGetAuditLogIncludeAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnterpriseAdminGetAuditLogOrder string

const (
	EnterpriseAdminGetAuditLogOrderDesc EnterpriseAdminGetAuditLogOrder = "desc"
	EnterpriseAdminGetAuditLogOrderAsc  EnterpriseAdminGetAuditLogOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnterpriseAdminGetAuditLogOrder) MarshalText() ([]byte, error) {
	switch s {
	case EnterpriseAdminGetAuditLogOrderDesc:
		return []byte(s), nil
	case EnterpriseAdminGetAuditLogOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnterpriseAdminGetAuditLogOrder) UnmarshalText(data []byte) error {
	switch EnterpriseAdminGetAuditLogOrder(data) {
	case EnterpriseAdminGetAuditLogOrderDesc:
		*s = EnterpriseAdminGetAuditLogOrderDesc
		return nil
	case EnterpriseAdminGetAuditLogOrderAsc:
		*s = EnterpriseAdminGetAuditLogOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK struct {
	TotalCount    float64              `json:"total_count"`
	Organizations []OrganizationSimple `json:"organizations"`
}

// GetTotalCount returns the value of TotalCount.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetOrganizations returns the value of Organizations.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) GetOrganizations() []OrganizationSimple {
	return s.Organizations
}

// SetTotalCount sets the value of TotalCount.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetOrganizations sets the value of Organizations.
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) SetOrganizations(val []OrganizationSimple) {
	s.Organizations = val
}

type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK struct {
	TotalCount    float64              `json:"total_count"`
	Organizations []OrganizationSimple `json:"organizations"`
}

// GetTotalCount returns the value of TotalCount.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetOrganizations returns the value of Organizations.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) GetOrganizations() []OrganizationSimple {
	return s.Organizations
}

// SetTotalCount sets the value of TotalCount.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetOrganizations sets the value of Organizations.
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) SetOrganizations(val []OrganizationSimple) {
	s.Organizations = val
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK struct {
	TotalCount   float64                  `json:"total_count"`
	RunnerGroups []RunnerGroupsEnterprise `json:"runner_groups"`
}

// GetTotalCount returns the value of TotalCount.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetRunnerGroups returns the value of RunnerGroups.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) GetRunnerGroups() []RunnerGroupsEnterprise {
	return s.RunnerGroups
}

// SetTotalCount sets the value of TotalCount.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetRunnerGroups sets the value of RunnerGroups.
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) SetRunnerGroups(val []RunnerGroupsEnterprise) {
	s.RunnerGroups = val
}

type EnterpriseAdminListSelfHostedRunnersForEnterpriseOK struct {
	TotalCount OptFloat64 `json:"total_count"`
	Runners    []Runner   `json:"runners"`
}

// GetTotalCount returns the value of TotalCount.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) GetTotalCount() OptFloat64 {
	return s.TotalCount
}

// GetRunners returns the value of Runners.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) GetRunners() []Runner {
	return s.Runners
}

// SetTotalCount sets the value of TotalCount.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) SetTotalCount(val OptFloat64) {
	s.TotalCount = val
}

// SetRunners sets the value of Runners.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) SetRunners(val []Runner) {
	s.Runners = val
}

// EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders wraps EnterpriseAdminListSelfHostedRunnersForEnterpriseOK with response headers.
type EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders struct {
	Link     OptString
	Response EnterpriseAdminListSelfHostedRunnersForEnterpriseOK
}

// GetLink returns the value of Link.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders) GetResponse() EnterpriseAdminListSelfHostedRunnersForEnterpriseOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *EnterpriseAdminListSelfHostedRunnersForEnterpriseOKHeaders) SetResponse(val EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) {
	s.Response = val
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK struct {
	TotalCount float64  `json:"total_count"`
	Runners    []Runner `json:"runners"`
}

// GetTotalCount returns the value of TotalCount.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) GetTotalCount() float64 {
	return s.TotalCount
}

// GetRunners returns the value of Runners.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) GetRunners() []Runner {
	return s.Runners
}

// SetTotalCount sets the value of TotalCount.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) SetTotalCount(val float64) {
	s.TotalCount = val
}

// SetRunners sets the value of Runners.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) SetRunners(val []Runner) {
	s.Runners = val
}

// EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders wraps EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK with response headers.
type EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders struct {
	Link     OptString
	Response EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK
}

// GetLink returns the value of Link.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders) GetResponse() EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK {
	return s.Response
}

// SetLink sets the value of Link.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOKHeaders) SetResponse(val EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) {
	s.Response = val
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupReq struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string                                                           `json:"displayName"`
	Members     []EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem `json:"members"`
}

// GetSchemas returns the value of Schemas.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) GetSchemas() []string {
	return s.Schemas
}

// GetDisplayName returns the value of DisplayName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) GetDisplayName() string {
	return s.DisplayName
}

// GetMembers returns the value of Members.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) GetMembers() []EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem {
	return s.Members
}

// SetSchemas sets the value of Schemas.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) SetSchemas(val []string) {
	s.Schemas = val
}

// SetDisplayName sets the value of DisplayName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetMembers sets the value of Members.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) SetMembers(val []EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem) {
	s.Members = val
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem struct {
	// The SCIM user ID for a user.
	Value string `json:"value"`
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem) GetValue() string {
	return s.Value
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupReqMembersItem) SetValue(val string) {
	s.Value = val
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReq struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// The username for the user.
	UserName string                                                 `json:"userName"`
	Name     EnterpriseAdminProvisionAndInviteEnterpriseUserReqName `json:"name"`
	// List of user emails.
	Emails []EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem `json:"emails"`
	// List of SCIM group IDs the user is a member of.
	Groups []EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem `json:"groups"`
}

// GetSchemas returns the value of Schemas.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) GetSchemas() []string {
	return s.Schemas
}

// GetUserName returns the value of UserName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) GetUserName() string {
	return s.UserName
}

// GetName returns the value of Name.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) GetName() EnterpriseAdminProvisionAndInviteEnterpriseUserReqName {
	return s.Name
}

// GetEmails returns the value of Emails.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) GetEmails() []EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem {
	return s.Emails
}

// GetGroups returns the value of Groups.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) GetGroups() []EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem {
	return s.Groups
}

// SetSchemas sets the value of Schemas.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) SetSchemas(val []string) {
	s.Schemas = val
}

// SetUserName sets the value of UserName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) SetUserName(val string) {
	s.UserName = val
}

// SetName sets the value of Name.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) SetName(val EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) {
	s.Name = val
}

// SetEmails sets the value of Emails.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) SetEmails(val []EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) {
	s.Emails = val
}

// SetGroups sets the value of Groups.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReq) SetGroups(val []EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem) {
	s.Groups = val
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem struct {
	// The email address.
	Value string `json:"value"`
	// The type of email address.
	Type string `json:"type"`
	// Whether this email address is the primary address.
	Primary bool `json:"primary"`
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) GetValue() string {
	return s.Value
}

// GetType returns the value of Type.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) GetType() string {
	return s.Type
}

// GetPrimary returns the value of Primary.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) GetPrimary() bool {
	return s.Primary
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) SetValue(val string) {
	s.Value = val
}

// SetType sets the value of Type.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) SetType(val string) {
	s.Type = val
}

// SetPrimary sets the value of Primary.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqEmailsItem) SetPrimary(val bool) {
	s.Primary = val
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem struct {
	Value OptString `json:"value"`
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem) GetValue() OptString {
	return s.Value
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqGroupsItem) SetValue(val OptString) {
	s.Value = val
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserReqName struct {
	// The first name of the user.
	GivenName string `json:"givenName"`
	// The last name of the user.
	FamilyName string `json:"familyName"`
}

// GetGivenName returns the value of GivenName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) GetGivenName() string {
	return s.GivenName
}

// GetFamilyName returns the value of FamilyName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) GetFamilyName() string {
	return s.FamilyName
}

// SetGivenName sets the value of GivenName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) SetGivenName(val string) {
	s.GivenName = val
}

// SetFamilyName sets the value of FamilyName.
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserReqName) SetFamilyName(val string) {
	s.FamilyName = val
}

// EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent is response for EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise operation.
type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent struct{}

// EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent is response for EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise operation.
type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseNoContent struct{}

// EnterpriseAdminSetAllowedActionsEnterpriseNoContent is response for EnterpriseAdminSetAllowedActionsEnterprise operation.
type EnterpriseAdminSetAllowedActionsEnterpriseNoContent struct{}

// EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent is response for EnterpriseAdminSetGithubActionsPermissionsEnterprise operation.
type EnterpriseAdminSetGithubActionsPermissionsEnterpriseNoContent struct{}

type EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq struct {
	EnabledOrganizations EnabledOrganizations `json:"enabled_organizations"`
	AllowedActions       OptAllowedActions    `json:"allowed_actions"`
}

// GetEnabledOrganizations returns the value of EnabledOrganizations.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) GetEnabledOrganizations() EnabledOrganizations {
	return s.EnabledOrganizations
}

// GetAllowedActions returns the value of AllowedActions.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) GetAllowedActions() OptAllowedActions {
	return s.AllowedActions
}

// SetEnabledOrganizations sets the value of EnabledOrganizations.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) SetEnabledOrganizations(val EnabledOrganizations) {
	s.EnabledOrganizations = val
}

// SetAllowedActions sets the value of AllowedActions.
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) SetAllowedActions(val OptAllowedActions) {
	s.AllowedActions = val
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string                                                                     `json:"displayName"`
	Members     []EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem `json:"members"`
}

// GetSchemas returns the value of Schemas.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) GetSchemas() []string {
	return s.Schemas
}

// GetDisplayName returns the value of DisplayName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) GetDisplayName() string {
	return s.DisplayName
}

// GetMembers returns the value of Members.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) GetMembers() []EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem {
	return s.Members
}

// SetSchemas sets the value of Schemas.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) SetSchemas(val []string) {
	s.Schemas = val
}

// SetDisplayName sets the value of DisplayName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) SetDisplayName(val string) {
	s.DisplayName = val
}

// SetMembers sets the value of Members.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) SetMembers(val []EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem) {
	s.Members = val
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem struct {
	// The SCIM user ID for a user.
	Value string `json:"value"`
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem) GetValue() string {
	return s.Value
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReqMembersItem) SetValue(val string) {
	s.Value = val
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// The username for the user.
	UserName string                                                           `json:"userName"`
	Name     EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName `json:"name"`
	// List of user emails.
	Emails []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem `json:"emails"`
	// List of SCIM group IDs the user is a member of.
	Groups []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem `json:"groups"`
}

// GetSchemas returns the value of Schemas.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) GetSchemas() []string {
	return s.Schemas
}

// GetUserName returns the value of UserName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) GetUserName() string {
	return s.UserName
}

// GetName returns the value of Name.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) GetName() EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName {
	return s.Name
}

// GetEmails returns the value of Emails.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) GetEmails() []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem {
	return s.Emails
}

// GetGroups returns the value of Groups.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) GetGroups() []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem {
	return s.Groups
}

// SetSchemas sets the value of Schemas.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) SetSchemas(val []string) {
	s.Schemas = val
}

// SetUserName sets the value of UserName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) SetUserName(val string) {
	s.UserName = val
}

// SetName sets the value of Name.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) SetName(val EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) {
	s.Name = val
}

// SetEmails sets the value of Emails.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) SetEmails(val []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) {
	s.Emails = val
}

// SetGroups sets the value of Groups.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) SetGroups(val []EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem) {
	s.Groups = val
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem struct {
	// The email address.
	Value string `json:"value"`
	// The type of email address.
	Type string `json:"type"`
	// Whether this email address is the primary address.
	Primary bool `json:"primary"`
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) GetValue() string {
	return s.Value
}

// GetType returns the value of Type.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) GetType() string {
	return s.Type
}

// GetPrimary returns the value of Primary.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) GetPrimary() bool {
	return s.Primary
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) SetValue(val string) {
	s.Value = val
}

// SetType sets the value of Type.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) SetType(val string) {
	s.Type = val
}

// SetPrimary sets the value of Primary.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqEmailsItem) SetPrimary(val bool) {
	s.Primary = val
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem struct {
	Value OptString `json:"value"`
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem) GetValue() OptString {
	return s.Value
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqGroupsItem) SetValue(val OptString) {
	s.Value = val
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName struct {
	// The first name of the user.
	GivenName string `json:"givenName"`
	// The last name of the user.
	FamilyName string `json:"familyName"`
}

// GetGivenName returns the value of GivenName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) GetGivenName() string {
	return s.GivenName
}

// GetFamilyName returns the value of FamilyName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) GetFamilyName() string {
	return s.FamilyName
}

// SetGivenName sets the value of GivenName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) SetGivenName(val string) {
	s.GivenName = val
}

// SetFamilyName sets the value of FamilyName.
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserReqName) SetFamilyName(val string) {
	s.FamilyName = val
}

// EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent is response for EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise operation.
type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseNoContent struct{}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq struct {
	// List of organization IDs that can access the runner group.
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

// GetSelectedOrganizationIds returns the value of SelectedOrganizationIds.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) GetSelectedOrganizationIds() []int {
	return s.SelectedOrganizationIds
}

// SetSelectedOrganizationIds sets the value of SelectedOrganizationIds.
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) SetSelectedOrganizationIds(val []int) {
	s.SelectedOrganizationIds = val
}

// EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent is response for EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise operation.
type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseNoContent struct{}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq struct {
	// List of organization IDs to enable for GitHub Actions.
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

// GetSelectedOrganizationIds returns the value of SelectedOrganizationIds.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) GetSelectedOrganizationIds() []int {
	return s.SelectedOrganizationIds
}

// SetSelectedOrganizationIds sets the value of SelectedOrganizationIds.
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) SetSelectedOrganizationIds(val []int) {
	s.SelectedOrganizationIds = val
}

// EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent is response for EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise operation.
type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseNoContent struct{}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq struct {
	// List of runner IDs to add to the runner group.
	Runners []int `json:"runners"`
}

// GetRunners returns the value of Runners.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) GetRunners() []int {
	return s.Runners
}

// SetRunners sets the value of Runners.
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) SetRunners(val []int) {
	s.Runners = val
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReq struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem `json:"Operations"`
}

// GetSchemas returns the value of Schemas.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReq) GetSchemas() []string {
	return s.Schemas
}

// GetOperations returns the value of Operations.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReq) GetOperations() []EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem {
	return s.Operations
}

// SetSchemas sets the value of Schemas.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReq) SetSchemas(val []string) {
	s.Schemas = val
}

// SetOperations sets the value of Operations.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReq) SetOperations(val []EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) {
	s.Operations = val
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem struct {
	Op    EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp       `json:"op"`
	Path  OptString                                                                 `json:"path"`
	Value OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue `json:"value"`
}

// GetOp returns the value of Op.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) GetOp() EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp {
	return s.Op
}

// GetPath returns the value of Path.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) GetPath() OptString {
	return s.Path
}

// GetValue returns the value of Value.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) GetValue() OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	return s.Value
}

// SetOp sets the value of Op.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) SetOp(val EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp) {
	s.Op = val
}

// SetPath sets the value of Path.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) SetPath(val OptString) {
	s.Path = val
}

// SetValue sets the value of Value.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) SetValue(val OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) {
	s.Value = val
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp string

const (
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_add     EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "add"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Add     EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "Add"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_remove  EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "remove"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Remove  EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "Remove"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_replace EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "replace"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Replace EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp = "Replace"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp) MarshalText() ([]byte, error) {
	switch s {
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_add:
		return []byte(s), nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Add:
		return []byte(s), nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_remove:
		return []byte(s), nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Remove:
		return []byte(s), nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_replace:
		return []byte(s), nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Replace:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp) UnmarshalText(data []byte) error {
	switch EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp(data) {
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_add:
		*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_add
		return nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Add:
		*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Add
		return nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_remove:
		*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_remove
		return nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Remove:
		*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Remove
		return nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_replace:
		*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_replace
		return nil
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Replace:
		*s = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp_Replace
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue represents sum type.
type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue struct {
	Type                                                                    EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType // switch on this field
	String                                                                  string
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1
	AnyArray                                                                []jx.Raw
}

// EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType is oneOf type of EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue.
type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType string

// Possible values for EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType.
const (
	StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue                                                                  EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType = "string"
	EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType = "EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1"
	AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue                                                                EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValueType = "[]jx.Raw"
)

// IsString reports whether EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is string.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsString() bool {
	return s.Type == StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
}

// IsEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 reports whether EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1() bool {
	return s.Type == EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
}

// IsAnyArray reports whether EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is []jx.Raw.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsAnyArray() bool {
	return s.Type == AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
}

// SetString sets EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue to string.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetString(v string) {
	s.Type = StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.String = v
}

// GetString returns string and true boolean if EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is string.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue from string.
func NewStringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v string) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	var s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.SetString(v)
	return s
}

// SetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 sets EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue to EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1) {
	s.Type = EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 = v
}

// GetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 returns EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 and true boolean if EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) GetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1() (v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1, ok bool) {
	if !s.IsEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1() {
		return v, false
	}
	return s.EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1, true
}

// NewEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue from EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1.
func NewEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	var s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.SetEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1(v)
	return s
}

// SetAnyArray sets EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue to []jx.Raw.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetAnyArray(v []jx.Raw) {
	s.Type = AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.AnyArray = v
}

// GetAnyArray returns []jx.Raw and true boolean if EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is []jx.Raw.
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) GetAnyArray() (v []jx.Raw, ok bool) {
	if !s.IsAnyArray() {
		return v, false
	}
	return s.AnyArray, true
}

// NewAnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue from []jx.Raw.
func NewAnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v []jx.Raw) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	var s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	s.SetAnyArray(v)
	return s
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1 struct{}

type EnterpriseAdminUpdateAttributeForEnterpriseUserReq struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem `json:"Operations"`
}

// GetSchemas returns the value of Schemas.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReq) GetSchemas() []string {
	return s.Schemas
}

// GetOperations returns the value of Operations.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReq) GetOperations() []EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem {
	return s.Operations
}

// SetSchemas sets the value of Schemas.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReq) SetSchemas(val []string) {
	s.Schemas = val
}

// SetOperations sets the value of Operations.
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserReq) SetOperations(val []EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem) {
	s.Operations = val
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserReqOperationsItem struct{}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq struct {
	// Name of the runner group.
	Name OptString `json:"name"`
	// Visibility of a runner group. You can select all organizations or select individual organizations.
	// Can be one of: `all` or `selected`.
	Visibility OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility `json:"visibility"`
}

// GetName returns the value of Name.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) GetName() OptString {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) GetVisibility() OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	return s.Visibility
}

// SetName sets the value of Name.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) SetName(val OptString) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) SetVisibility(val OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) {
	s.Visibility = val
}

// Visibility of a runner group. You can select all organizations or select individual organizations.
// Can be one of: `all` or `selected`.
type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility string

const (
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility = "selected"
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected:
		return []byte(s), nil
	case EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) UnmarshalText(data []byte) error {
	switch EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility(data) {
	case EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected:
		*s = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilitySelected
		return nil
	case EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll:
		*s = EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibilityAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An entry in the reviews log for environment deployments.
// Ref: #/components/schemas/environment-approvals
type EnvironmentApprovals struct {
	// The list of environments that were approved or rejected.
	Environments []EnvironmentApprovalsEnvironmentsItem `json:"environments"`
	// Whether deployment to the environment(s) was approved or rejected.
	State EnvironmentApprovalsState `json:"state"`
	User  SimpleUser                `json:"user"`
	// The comment submitted with the deployment review.
	Comment string `json:"comment"`
}

// GetEnvironments returns the value of Environments.
func (s *EnvironmentApprovals) GetEnvironments() []EnvironmentApprovalsEnvironmentsItem {
	return s.Environments
}

// GetState returns the value of State.
func (s *EnvironmentApprovals) GetState() EnvironmentApprovalsState {
	return s.State
}

// GetUser returns the value of User.
func (s *EnvironmentApprovals) GetUser() SimpleUser {
	return s.User
}

// GetComment returns the value of Comment.
func (s *EnvironmentApprovals) GetComment() string {
	return s.Comment
}

// SetEnvironments sets the value of Environments.
func (s *EnvironmentApprovals) SetEnvironments(val []EnvironmentApprovalsEnvironmentsItem) {
	s.Environments = val
}

// SetState sets the value of State.
func (s *EnvironmentApprovals) SetState(val EnvironmentApprovalsState) {
	s.State = val
}

// SetUser sets the value of User.
func (s *EnvironmentApprovals) SetUser(val SimpleUser) {
	s.User = val
}

// SetComment sets the value of Comment.
func (s *EnvironmentApprovals) SetComment(val string) {
	s.Comment = val
}

type EnvironmentApprovalsEnvironmentsItem struct {
	// The id of the environment.
	ID     OptInt    `json:"id"`
	NodeID OptString `json:"node_id"`
	// The name of the environment.
	Name    OptString `json:"name"`
	URL     OptString `json:"url"`
	HTMLURL OptString `json:"html_url"`
	// The time that the environment was created, in ISO 8601 format.
	CreatedAt OptDateTime `json:"created_at"`
	// The time that the environment was last updated, in ISO 8601 format.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *EnvironmentApprovalsEnvironmentsItem) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *EnvironmentApprovalsEnvironmentsItem) GetNodeID() OptString {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *EnvironmentApprovalsEnvironmentsItem) GetName() OptString {
	return s.Name
}

// GetURL returns the value of URL.
func (s *EnvironmentApprovalsEnvironmentsItem) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *EnvironmentApprovalsEnvironmentsItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *EnvironmentApprovalsEnvironmentsItem) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *EnvironmentApprovalsEnvironmentsItem) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *EnvironmentApprovalsEnvironmentsItem) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *EnvironmentApprovalsEnvironmentsItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *EnvironmentApprovalsEnvironmentsItem) SetName(val OptString) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *EnvironmentApprovalsEnvironmentsItem) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *EnvironmentApprovalsEnvironmentsItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *EnvironmentApprovalsEnvironmentsItem) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *EnvironmentApprovalsEnvironmentsItem) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Whether deployment to the environment(s) was approved or rejected.
type EnvironmentApprovalsState string

const (
	EnvironmentApprovalsStateApproved EnvironmentApprovalsState = "approved"
	EnvironmentApprovalsStateRejected EnvironmentApprovalsState = "rejected"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentApprovalsState) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentApprovalsStateApproved:
		return []byte(s), nil
	case EnvironmentApprovalsStateRejected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentApprovalsState) UnmarshalText(data []byte) error {
	switch EnvironmentApprovalsState(data) {
	case EnvironmentApprovalsStateApproved:
		*s = EnvironmentApprovalsStateApproved
		return nil
	case EnvironmentApprovalsStateRejected:
		*s = EnvironmentApprovalsStateRejected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Event.
// Ref: #/components/schemas/event
type Event struct {
	ID        string       `json:"id"`
	Type      NilString    `json:"type"`
	Actor     Actor        `json:"actor"`
	Repo      EventRepo    `json:"repo"`
	Org       OptActor     `json:"org"`
	Payload   EventPayload `json:"payload"`
	Public    bool         `json:"public"`
	CreatedAt NilDateTime  `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Event) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *Event) GetType() NilString {
	return s.Type
}

// GetActor returns the value of Actor.
func (s *Event) GetActor() Actor {
	return s.Actor
}

// GetRepo returns the value of Repo.
func (s *Event) GetRepo() EventRepo {
	return s.Repo
}

// GetOrg returns the value of Org.
func (s *Event) GetOrg() OptActor {
	return s.Org
}

// GetPayload returns the value of Payload.
func (s *Event) GetPayload() EventPayload {
	return s.Payload
}

// GetPublic returns the value of Public.
func (s *Event) GetPublic() bool {
	return s.Public
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Event) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Event) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Event) SetType(val NilString) {
	s.Type = val
}

// SetActor sets the value of Actor.
func (s *Event) SetActor(val Actor) {
	s.Actor = val
}

// SetRepo sets the value of Repo.
func (s *Event) SetRepo(val EventRepo) {
	s.Repo = val
}

// SetOrg sets the value of Org.
func (s *Event) SetOrg(val OptActor) {
	s.Org = val
}

// SetPayload sets the value of Payload.
func (s *Event) SetPayload(val EventPayload) {
	s.Payload = val
}

// SetPublic sets the value of Public.
func (s *Event) SetPublic(val bool) {
	s.Public = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Event) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

type EventPayload struct {
	Action  OptString               `json:"action"`
	Issue   OptIssueSimple          `json:"issue"`
	Comment OptIssueComment         `json:"comment"`
	Pages   []EventPayloadPagesItem `json:"pages"`
}

// GetAction returns the value of Action.
func (s *EventPayload) GetAction() OptString {
	return s.Action
}

// GetIssue returns the value of Issue.
func (s *EventPayload) GetIssue() OptIssueSimple {
	return s.Issue
}

// GetComment returns the value of Comment.
func (s *EventPayload) GetComment() OptIssueComment {
	return s.Comment
}

// GetPages returns the value of Pages.
func (s *EventPayload) GetPages() []EventPayloadPagesItem {
	return s.Pages
}

// SetAction sets the value of Action.
func (s *EventPayload) SetAction(val OptString) {
	s.Action = val
}

// SetIssue sets the value of Issue.
func (s *EventPayload) SetIssue(val OptIssueSimple) {
	s.Issue = val
}

// SetComment sets the value of Comment.
func (s *EventPayload) SetComment(val OptIssueComment) {
	s.Comment = val
}

// SetPages sets the value of Pages.
func (s *EventPayload) SetPages(val []EventPayloadPagesItem) {
	s.Pages = val
}

type EventPayloadPagesItem struct {
	PageName OptString    `json:"page_name"`
	Title    OptString    `json:"title"`
	Summary  OptNilString `json:"summary"`
	Action   OptString    `json:"action"`
	Sha      OptString    `json:"sha"`
	HTMLURL  OptString    `json:"html_url"`
}

// GetPageName returns the value of PageName.
func (s *EventPayloadPagesItem) GetPageName() OptString {
	return s.PageName
}

// GetTitle returns the value of Title.
func (s *EventPayloadPagesItem) GetTitle() OptString {
	return s.Title
}

// GetSummary returns the value of Summary.
func (s *EventPayloadPagesItem) GetSummary() OptNilString {
	return s.Summary
}

// GetAction returns the value of Action.
func (s *EventPayloadPagesItem) GetAction() OptString {
	return s.Action
}

// GetSha returns the value of Sha.
func (s *EventPayloadPagesItem) GetSha() OptString {
	return s.Sha
}

// GetHTMLURL returns the value of HTMLURL.
func (s *EventPayloadPagesItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// SetPageName sets the value of PageName.
func (s *EventPayloadPagesItem) SetPageName(val OptString) {
	s.PageName = val
}

// SetTitle sets the value of Title.
func (s *EventPayloadPagesItem) SetTitle(val OptString) {
	s.Title = val
}

// SetSummary sets the value of Summary.
func (s *EventPayloadPagesItem) SetSummary(val OptNilString) {
	s.Summary = val
}

// SetAction sets the value of Action.
func (s *EventPayloadPagesItem) SetAction(val OptString) {
	s.Action = val
}

// SetSha sets the value of Sha.
func (s *EventPayloadPagesItem) SetSha(val OptString) {
	s.Sha = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *EventPayloadPagesItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

type EventRepo struct {
	ID   int     `json:"id"`
	Name string  `json:"name"`
	URL  url.URL `json:"url"`
}

// GetID returns the value of ID.
func (s *EventRepo) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *EventRepo) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *EventRepo) GetURL() url.URL {
	return s.URL
}

// SetID sets the value of ID.
func (s *EventRepo) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *EventRepo) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *EventRepo) SetURL(val url.URL) {
	s.URL = val
}

// Feed.
// Ref: #/components/schemas/feed
type Feed struct {
	TimelineURL                 string    `json:"timeline_url"`
	UserURL                     string    `json:"user_url"`
	CurrentUserPublicURL        OptString `json:"current_user_public_url"`
	CurrentUserURL              OptString `json:"current_user_url"`
	CurrentUserActorURL         OptString `json:"current_user_actor_url"`
	CurrentUserOrganizationURL  OptString `json:"current_user_organization_url"`
	CurrentUserOrganizationUrls []url.URL `json:"current_user_organization_urls"`
	SecurityAdvisoriesURL       OptString `json:"security_advisories_url"`
	Links                       FeedLinks `json:"_links"`
}

// GetTimelineURL returns the value of TimelineURL.
func (s *Feed) GetTimelineURL() string {
	return s.TimelineURL
}

// GetUserURL returns the value of UserURL.
func (s *Feed) GetUserURL() string {
	return s.UserURL
}

// GetCurrentUserPublicURL returns the value of CurrentUserPublicURL.
func (s *Feed) GetCurrentUserPublicURL() OptString {
	return s.CurrentUserPublicURL
}

// GetCurrentUserURL returns the value of CurrentUserURL.
func (s *Feed) GetCurrentUserURL() OptString {
	return s.CurrentUserURL
}

// GetCurrentUserActorURL returns the value of CurrentUserActorURL.
func (s *Feed) GetCurrentUserActorURL() OptString {
	return s.CurrentUserActorURL
}

// GetCurrentUserOrganizationURL returns the value of CurrentUserOrganizationURL.
func (s *Feed) GetCurrentUserOrganizationURL() OptString {
	return s.CurrentUserOrganizationURL
}

// GetCurrentUserOrganizationUrls returns the value of CurrentUserOrganizationUrls.
func (s *Feed) GetCurrentUserOrganizationUrls() []url.URL {
	return s.CurrentUserOrganizationUrls
}

// GetSecurityAdvisoriesURL returns the value of SecurityAdvisoriesURL.
func (s *Feed) GetSecurityAdvisoriesURL() OptString {
	return s.SecurityAdvisoriesURL
}

// GetLinks returns the value of Links.
func (s *Feed) GetLinks() FeedLinks {
	return s.Links
}

// SetTimelineURL sets the value of TimelineURL.
func (s *Feed) SetTimelineURL(val string) {
	s.TimelineURL = val
}

// SetUserURL sets the value of UserURL.
func (s *Feed) SetUserURL(val string) {
	s.UserURL = val
}

// SetCurrentUserPublicURL sets the value of CurrentUserPublicURL.
func (s *Feed) SetCurrentUserPublicURL(val OptString) {
	s.CurrentUserPublicURL = val
}

// SetCurrentUserURL sets the value of CurrentUserURL.
func (s *Feed) SetCurrentUserURL(val OptString) {
	s.CurrentUserURL = val
}

// SetCurrentUserActorURL sets the value of CurrentUserActorURL.
func (s *Feed) SetCurrentUserActorURL(val OptString) {
	s.CurrentUserActorURL = val
}

// SetCurrentUserOrganizationURL sets the value of CurrentUserOrganizationURL.
func (s *Feed) SetCurrentUserOrganizationURL(val OptString) {
	s.CurrentUserOrganizationURL = val
}

// SetCurrentUserOrganizationUrls sets the value of CurrentUserOrganizationUrls.
func (s *Feed) SetCurrentUserOrganizationUrls(val []url.URL) {
	s.CurrentUserOrganizationUrls = val
}

// SetSecurityAdvisoriesURL sets the value of SecurityAdvisoriesURL.
func (s *Feed) SetSecurityAdvisoriesURL(val OptString) {
	s.SecurityAdvisoriesURL = val
}

// SetLinks sets the value of Links.
func (s *Feed) SetLinks(val FeedLinks) {
	s.Links = val
}

type FeedLinks struct {
	Timeline                 LinkWithType    `json:"timeline"`
	User                     LinkWithType    `json:"user"`
	SecurityAdvisories       OptLinkWithType `json:"security_advisories"`
	CurrentUser              OptLinkWithType `json:"current_user"`
	CurrentUserPublic        OptLinkWithType `json:"current_user_public"`
	CurrentUserActor         OptLinkWithType `json:"current_user_actor"`
	CurrentUserOrganization  OptLinkWithType `json:"current_user_organization"`
	CurrentUserOrganizations []LinkWithType  `json:"current_user_organizations"`
}

// GetTimeline returns the value of Timeline.
func (s *FeedLinks) GetTimeline() LinkWithType {
	return s.Timeline
}

// GetUser returns the value of User.
func (s *FeedLinks) GetUser() LinkWithType {
	return s.User
}

// GetSecurityAdvisories returns the value of SecurityAdvisories.
func (s *FeedLinks) GetSecurityAdvisories() OptLinkWithType {
	return s.SecurityAdvisories
}

// GetCurrentUser returns the value of CurrentUser.
func (s *FeedLinks) GetCurrentUser() OptLinkWithType {
	return s.CurrentUser
}

// GetCurrentUserPublic returns the value of CurrentUserPublic.
func (s *FeedLinks) GetCurrentUserPublic() OptLinkWithType {
	return s.CurrentUserPublic
}

// GetCurrentUserActor returns the value of CurrentUserActor.
func (s *FeedLinks) GetCurrentUserActor() OptLinkWithType {
	return s.CurrentUserActor
}

// GetCurrentUserOrganization returns the value of CurrentUserOrganization.
func (s *FeedLinks) GetCurrentUserOrganization() OptLinkWithType {
	return s.CurrentUserOrganization
}

// GetCurrentUserOrganizations returns the value of CurrentUserOrganizations.
func (s *FeedLinks) GetCurrentUserOrganizations() []LinkWithType {
	return s.CurrentUserOrganizations
}

// SetTimeline sets the value of Timeline.
func (s *FeedLinks) SetTimeline(val LinkWithType) {
	s.Timeline = val
}

// SetUser sets the value of User.
func (s *FeedLinks) SetUser(val LinkWithType) {
	s.User = val
}

// SetSecurityAdvisories sets the value of SecurityAdvisories.
func (s *FeedLinks) SetSecurityAdvisories(val OptLinkWithType) {
	s.SecurityAdvisories = val
}

// SetCurrentUser sets the value of CurrentUser.
func (s *FeedLinks) SetCurrentUser(val OptLinkWithType) {
	s.CurrentUser = val
}

// SetCurrentUserPublic sets the value of CurrentUserPublic.
func (s *FeedLinks) SetCurrentUserPublic(val OptLinkWithType) {
	s.CurrentUserPublic = val
}

// SetCurrentUserActor sets the value of CurrentUserActor.
func (s *FeedLinks) SetCurrentUserActor(val OptLinkWithType) {
	s.CurrentUserActor = val
}

// SetCurrentUserOrganization sets the value of CurrentUserOrganization.
func (s *FeedLinks) SetCurrentUserOrganization(val OptLinkWithType) {
	s.CurrentUserOrganization = val
}

// SetCurrentUserOrganizations sets the value of CurrentUserOrganizations.
func (s *FeedLinks) SetCurrentUserOrganizations(val []LinkWithType) {
	s.CurrentUserOrganizations = val
}

// File Commit.
// Ref: #/components/schemas/file-commit
type FileCommit struct {
	Content NilFileCommitContent `json:"content"`
	Commit  FileCommitCommit     `json:"commit"`
}

// GetContent returns the value of Content.
func (s *FileCommit) GetContent() NilFileCommitContent {
	return s.Content
}

// GetCommit returns the value of Commit.
func (s *FileCommit) GetCommit() FileCommitCommit {
	return s.Commit
}

// SetContent sets the value of Content.
func (s *FileCommit) SetContent(val NilFileCommitContent) {
	s.Content = val
}

// SetCommit sets the value of Commit.
func (s *FileCommit) SetCommit(val FileCommitCommit) {
	s.Commit = val
}

func (*FileCommit) reposDeleteFileRes() {}

type FileCommitCommit struct {
	Sha          OptString                       `json:"sha"`
	NodeID       OptString                       `json:"node_id"`
	URL          OptString                       `json:"url"`
	HTMLURL      OptString                       `json:"html_url"`
	Author       OptFileCommitCommitAuthor       `json:"author"`
	Committer    OptFileCommitCommitCommitter    `json:"committer"`
	Message      OptString                       `json:"message"`
	Tree         OptFileCommitCommitTree         `json:"tree"`
	Parents      []FileCommitCommitParentsItem   `json:"parents"`
	Verification OptFileCommitCommitVerification `json:"verification"`
}

// GetSha returns the value of Sha.
func (s *FileCommitCommit) GetSha() OptString {
	return s.Sha
}

// GetNodeID returns the value of NodeID.
func (s *FileCommitCommit) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *FileCommitCommit) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *FileCommitCommit) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetAuthor returns the value of Author.
func (s *FileCommitCommit) GetAuthor() OptFileCommitCommitAuthor {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *FileCommitCommit) GetCommitter() OptFileCommitCommitCommitter {
	return s.Committer
}

// GetMessage returns the value of Message.
func (s *FileCommitCommit) GetMessage() OptString {
	return s.Message
}

// GetTree returns the value of Tree.
func (s *FileCommitCommit) GetTree() OptFileCommitCommitTree {
	return s.Tree
}

// GetParents returns the value of Parents.
func (s *FileCommitCommit) GetParents() []FileCommitCommitParentsItem {
	return s.Parents
}

// GetVerification returns the value of Verification.
func (s *FileCommitCommit) GetVerification() OptFileCommitCommitVerification {
	return s.Verification
}

// SetSha sets the value of Sha.
func (s *FileCommitCommit) SetSha(val OptString) {
	s.Sha = val
}

// SetNodeID sets the value of NodeID.
func (s *FileCommitCommit) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *FileCommitCommit) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *FileCommitCommit) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetAuthor sets the value of Author.
func (s *FileCommitCommit) SetAuthor(val OptFileCommitCommitAuthor) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *FileCommitCommit) SetCommitter(val OptFileCommitCommitCommitter) {
	s.Committer = val
}

// SetMessage sets the value of Message.
func (s *FileCommitCommit) SetMessage(val OptString) {
	s.Message = val
}

// SetTree sets the value of Tree.
func (s *FileCommitCommit) SetTree(val OptFileCommitCommitTree) {
	s.Tree = val
}

// SetParents sets the value of Parents.
func (s *FileCommitCommit) SetParents(val []FileCommitCommitParentsItem) {
	s.Parents = val
}

// SetVerification sets the value of Verification.
func (s *FileCommitCommit) SetVerification(val OptFileCommitCommitVerification) {
	s.Verification = val
}

type FileCommitCommitAuthor struct {
	Date  OptString `json:"date"`
	Name  OptString `json:"name"`
	Email OptString `json:"email"`
}

// GetDate returns the value of Date.
func (s *FileCommitCommitAuthor) GetDate() OptString {
	return s.Date
}

// GetName returns the value of Name.
func (s *FileCommitCommitAuthor) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *FileCommitCommitAuthor) GetEmail() OptString {
	return s.Email
}

// SetDate sets the value of Date.
func (s *FileCommitCommitAuthor) SetDate(val OptString) {
	s.Date = val
}

// SetName sets the value of Name.
func (s *FileCommitCommitAuthor) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *FileCommitCommitAuthor) SetEmail(val OptString) {
	s.Email = val
}

type FileCommitCommitCommitter struct {
	Date  OptString `json:"date"`
	Name  OptString `json:"name"`
	Email OptString `json:"email"`
}

// GetDate returns the value of Date.
func (s *FileCommitCommitCommitter) GetDate() OptString {
	return s.Date
}

// GetName returns the value of Name.
func (s *FileCommitCommitCommitter) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *FileCommitCommitCommitter) GetEmail() OptString {
	return s.Email
}

// SetDate sets the value of Date.
func (s *FileCommitCommitCommitter) SetDate(val OptString) {
	s.Date = val
}

// SetName sets the value of Name.
func (s *FileCommitCommitCommitter) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *FileCommitCommitCommitter) SetEmail(val OptString) {
	s.Email = val
}

type FileCommitCommitParentsItem struct {
	URL     OptString `json:"url"`
	HTMLURL OptString `json:"html_url"`
	Sha     OptString `json:"sha"`
}

// GetURL returns the value of URL.
func (s *FileCommitCommitParentsItem) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *FileCommitCommitParentsItem) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetSha returns the value of Sha.
func (s *FileCommitCommitParentsItem) GetSha() OptString {
	return s.Sha
}

// SetURL sets the value of URL.
func (s *FileCommitCommitParentsItem) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *FileCommitCommitParentsItem) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetSha sets the value of Sha.
func (s *FileCommitCommitParentsItem) SetSha(val OptString) {
	s.Sha = val
}

type FileCommitCommitTree struct {
	URL OptString `json:"url"`
	Sha OptString `json:"sha"`
}

// GetURL returns the value of URL.
func (s *FileCommitCommitTree) GetURL() OptString {
	return s.URL
}

// GetSha returns the value of Sha.
func (s *FileCommitCommitTree) GetSha() OptString {
	return s.Sha
}

// SetURL sets the value of URL.
func (s *FileCommitCommitTree) SetURL(val OptString) {
	s.URL = val
}

// SetSha sets the value of Sha.
func (s *FileCommitCommitTree) SetSha(val OptString) {
	s.Sha = val
}

type FileCommitCommitVerification struct {
	Verified  OptBool      `json:"verified"`
	Reason    OptString    `json:"reason"`
	Signature OptNilString `json:"signature"`
	Payload   OptNilString `json:"payload"`
}

// GetVerified returns the value of Verified.
func (s *FileCommitCommitVerification) GetVerified() OptBool {
	return s.Verified
}

// GetReason returns the value of Reason.
func (s *FileCommitCommitVerification) GetReason() OptString {
	return s.Reason
}

// GetSignature returns the value of Signature.
func (s *FileCommitCommitVerification) GetSignature() OptNilString {
	return s.Signature
}

// GetPayload returns the value of Payload.
func (s *FileCommitCommitVerification) GetPayload() OptNilString {
	return s.Payload
}

// SetVerified sets the value of Verified.
func (s *FileCommitCommitVerification) SetVerified(val OptBool) {
	s.Verified = val
}

// SetReason sets the value of Reason.
func (s *FileCommitCommitVerification) SetReason(val OptString) {
	s.Reason = val
}

// SetSignature sets the value of Signature.
func (s *FileCommitCommitVerification) SetSignature(val OptNilString) {
	s.Signature = val
}

// SetPayload sets the value of Payload.
func (s *FileCommitCommitVerification) SetPayload(val OptNilString) {
	s.Payload = val
}

type FileCommitContent struct {
	Name        OptString                 `json:"name"`
	Path        OptString                 `json:"path"`
	Sha         OptString                 `json:"sha"`
	Size        OptInt                    `json:"size"`
	URL         OptString                 `json:"url"`
	HTMLURL     OptString                 `json:"html_url"`
	GitURL      OptString                 `json:"git_url"`
	DownloadURL OptString                 `json:"download_url"`
	Type        OptString                 `json:"type"`
	Links       OptFileCommitContentLinks `json:"_links"`
}

// GetName returns the value of Name.
func (s *FileCommitContent) GetName() OptString {
	return s.Name
}

// GetPath returns the value of Path.
func (s *FileCommitContent) GetPath() OptString {
	return s.Path
}

// GetSha returns the value of Sha.
func (s *FileCommitContent) GetSha() OptString {
	return s.Sha
}

// GetSize returns the value of Size.
func (s *FileCommitContent) GetSize() OptInt {
	return s.Size
}

// GetURL returns the value of URL.
func (s *FileCommitContent) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *FileCommitContent) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetGitURL returns the value of GitURL.
func (s *FileCommitContent) GetGitURL() OptString {
	return s.GitURL
}

// GetDownloadURL returns the value of DownloadURL.
func (s *FileCommitContent) GetDownloadURL() OptString {
	return s.DownloadURL
}

// GetType returns the value of Type.
func (s *FileCommitContent) GetType() OptString {
	return s.Type
}

// GetLinks returns the value of Links.
func (s *FileCommitContent) GetLinks() OptFileCommitContentLinks {
	return s.Links
}

// SetName sets the value of Name.
func (s *FileCommitContent) SetName(val OptString) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *FileCommitContent) SetPath(val OptString) {
	s.Path = val
}

// SetSha sets the value of Sha.
func (s *FileCommitContent) SetSha(val OptString) {
	s.Sha = val
}

// SetSize sets the value of Size.
func (s *FileCommitContent) SetSize(val OptInt) {
	s.Size = val
}

// SetURL sets the value of URL.
func (s *FileCommitContent) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *FileCommitContent) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetGitURL sets the value of GitURL.
func (s *FileCommitContent) SetGitURL(val OptString) {
	s.GitURL = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *FileCommitContent) SetDownloadURL(val OptString) {
	s.DownloadURL = val
}

// SetType sets the value of Type.
func (s *FileCommitContent) SetType(val OptString) {
	s.Type = val
}

// SetLinks sets the value of Links.
func (s *FileCommitContent) SetLinks(val OptFileCommitContentLinks) {
	s.Links = val
}

type FileCommitContentLinks struct {
	Self OptString `json:"self"`
	Git  OptString `json:"git"`
	HTML OptString `json:"html"`
}

// GetSelf returns the value of Self.
func (s *FileCommitContentLinks) GetSelf() OptString {
	return s.Self
}

// GetGit returns the value of Git.
func (s *FileCommitContentLinks) GetGit() OptString {
	return s.Git
}

// GetHTML returns the value of HTML.
func (s *FileCommitContentLinks) GetHTML() OptString {
	return s.HTML
}

// SetSelf sets the value of Self.
func (s *FileCommitContentLinks) SetSelf(val OptString) {
	s.Self = val
}

// SetGit sets the value of Git.
func (s *FileCommitContentLinks) SetGit(val OptString) {
	s.Git = val
}

// SetHTML sets the value of HTML.
func (s *FileCommitContentLinks) SetHTML(val OptString) {
	s.HTML = val
}

type ForbiddenGist struct {
	Block            OptForbiddenGistBlock `json:"block"`
	Message          OptString             `json:"message"`
	DocumentationURL OptString             `json:"documentation_url"`
}

// GetBlock returns the value of Block.
func (s *ForbiddenGist) GetBlock() OptForbiddenGistBlock {
	return s.Block
}

// GetMessage returns the value of Message.
func (s *ForbiddenGist) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ForbiddenGist) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetBlock sets the value of Block.
func (s *ForbiddenGist) SetBlock(val OptForbiddenGistBlock) {
	s.Block = val
}

// SetMessage sets the value of Message.
func (s *ForbiddenGist) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ForbiddenGist) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*ForbiddenGist) gistsGetCommentRes() {}
func (*ForbiddenGist) gistsGetRes()        {}

type ForbiddenGistBlock struct {
	Reason    OptString    `json:"reason"`
	CreatedAt OptString    `json:"created_at"`
	HTMLURL   OptNilString `json:"html_url"`
}

// GetReason returns the value of Reason.
func (s *ForbiddenGistBlock) GetReason() OptString {
	return s.Reason
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ForbiddenGistBlock) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetHTMLURL returns the value of HTMLURL.
func (s *ForbiddenGistBlock) GetHTMLURL() OptNilString {
	return s.HTMLURL
}

// SetReason sets the value of Reason.
func (s *ForbiddenGistBlock) SetReason(val OptString) {
	s.Reason = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ForbiddenGistBlock) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *ForbiddenGistBlock) SetHTMLURL(val OptNilString) {
	s.HTMLURL = val
}

// Ref: #/components/responses/found
type Found struct{}

func (*Found) reposGetReleaseAssetRes() {}

// Full Repository.
// Ref: #/components/schemas/full-repository
type FullRepository struct {
	ID               int        `json:"id"`
	NodeID           string     `json:"node_id"`
	Name             string     `json:"name"`
	FullName         string     `json:"full_name"`
	Owner            SimpleUser `json:"owner"`
	Private          bool       `json:"private"`
	HTMLURL          url.URL    `json:"html_url"`
	Description      NilString  `json:"description"`
	Fork             bool       `json:"fork"`
	URL              url.URL    `json:"url"`
	ArchiveURL       string     `json:"archive_url"`
	AssigneesURL     string     `json:"assignees_url"`
	BlobsURL         string     `json:"blobs_url"`
	BranchesURL      string     `json:"branches_url"`
	CollaboratorsURL string     `json:"collaborators_url"`
	CommentsURL      string     `json:"comments_url"`
	CommitsURL       string     `json:"commits_url"`
	CompareURL       string     `json:"compare_url"`
	ContentsURL      string     `json:"contents_url"`
	ContributorsURL  url.URL    `json:"contributors_url"`
	DeploymentsURL   url.URL    `json:"deployments_url"`
	DownloadsURL     url.URL    `json:"downloads_url"`
	EventsURL        url.URL    `json:"events_url"`
	ForksURL         url.URL    `json:"forks_url"`
	GitCommitsURL    string     `json:"git_commits_url"`
	GitRefsURL       string     `json:"git_refs_url"`
	GitTagsURL       string     `json:"git_tags_url"`
	GitURL           string     `json:"git_url"`
	IssueCommentURL  string     `json:"issue_comment_url"`
	IssueEventsURL   string     `json:"issue_events_url"`
	IssuesURL        string     `json:"issues_url"`
	KeysURL          string     `json:"keys_url"`
	LabelsURL        string     `json:"labels_url"`
	LanguagesURL     url.URL    `json:"languages_url"`
	MergesURL        url.URL    `json:"merges_url"`
	MilestonesURL    string     `json:"milestones_url"`
	NotificationsURL string     `json:"notifications_url"`
	PullsURL         string     `json:"pulls_url"`
	ReleasesURL      string     `json:"releases_url"`
	SSHURL           string     `json:"ssh_url"`
	StargazersURL    url.URL    `json:"stargazers_url"`
	StatusesURL      string     `json:"statuses_url"`
	SubscribersURL   url.URL    `json:"subscribers_url"`
	SubscriptionURL  url.URL    `json:"subscription_url"`
	TagsURL          url.URL    `json:"tags_url"`
	TeamsURL         url.URL    `json:"teams_url"`
	TreesURL         string     `json:"trees_url"`
	CloneURL         string     `json:"clone_url"`
	MirrorURL        NilURI     `json:"mirror_url"`
	HooksURL         url.URL    `json:"hooks_url"`
	SvnURL           url.URL    `json:"svn_url"`
	Homepage         NilURI     `json:"homepage"`
	Language         NilString  `json:"language"`
	ForksCount       int        `json:"forks_count"`
	StargazersCount  int        `json:"stargazers_count"`
	WatchersCount    int        `json:"watchers_count"`
	Size             int        `json:"size"`
	DefaultBranch    string     `json:"default_branch"`
	OpenIssuesCount  int        `json:"open_issues_count"`
	IsTemplate       OptBool    `json:"is_template"`
	Topics           []string   `json:"topics"`
	HasIssues        bool       `json:"has_issues"`
	HasProjects      bool       `json:"has_projects"`
	HasWiki          bool       `json:"has_wiki"`
	HasPages         bool       `json:"has_pages"`
	HasDownloads     bool       `json:"has_downloads"`
	Archived         bool       `json:"archived"`
	// Returns whether or not this repository disabled.
	Disabled bool `json:"disabled"`
	// The repository visibility: public, private, or internal.
	Visibility          OptString                    `json:"visibility"`
	PushedAt            time.Time                    `json:"pushed_at"`
	CreatedAt           time.Time                    `json:"created_at"`
	UpdatedAt           time.Time                    `json:"updated_at"`
	Permissions         OptFullRepositoryPermissions `json:"permissions"`
	AllowRebaseMerge    OptBool                      `json:"allow_rebase_merge"`
	TemplateRepository  OptNilNullableRepository     `json:"template_repository"`
	TempCloneToken      OptNilString                 `json:"temp_clone_token"`
	AllowSquashMerge    OptBool                      `json:"allow_squash_merge"`
	AllowAutoMerge      OptBool                      `json:"allow_auto_merge"`
	DeleteBranchOnMerge OptBool                      `json:"delete_branch_on_merge"`
	AllowMergeCommit    OptBool                      `json:"allow_merge_commit"`
	AllowForking        OptBool                      `json:"allow_forking"`
	SubscribersCount    int                          `json:"subscribers_count"`
	NetworkCount        int                          `json:"network_count"`
	License             NilNullableLicenseSimple     `json:"license"`
	Organization        OptNilNullableSimpleUser     `json:"organization"`
	Parent              OptRepository                `json:"parent"`
	Source              OptRepository                `json:"source"`
	Forks               int                          `json:"forks"`
	MasterBranch        OptString                    `json:"master_branch"`
	OpenIssues          int                          `json:"open_issues"`
	Watchers            int                          `json:"watchers"`
	// Whether anonymous git access is allowed.
	AnonymousAccessEnabled OptBool                                 `json:"anonymous_access_enabled"`
	CodeOfConduct          OptCodeOfConductSimple                  `json:"code_of_conduct"`
	SecurityAndAnalysis    OptNilFullRepositorySecurityAndAnalysis `json:"security_and_analysis"`
}

// GetID returns the value of ID.
func (s *FullRepository) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *FullRepository) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *FullRepository) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *FullRepository) GetFullName() string {
	return s.FullName
}

// GetOwner returns the value of Owner.
func (s *FullRepository) GetOwner() SimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *FullRepository) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *FullRepository) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *FullRepository) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *FullRepository) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *FullRepository) GetURL() url.URL {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *FullRepository) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *FullRepository) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *FullRepository) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *FullRepository) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *FullRepository) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *FullRepository) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *FullRepository) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *FullRepository) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *FullRepository) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *FullRepository) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *FullRepository) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *FullRepository) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *FullRepository) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *FullRepository) GetForksURL() url.URL {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *FullRepository) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *FullRepository) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *FullRepository) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *FullRepository) GetGitURL() string {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *FullRepository) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *FullRepository) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *FullRepository) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *FullRepository) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *FullRepository) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *FullRepository) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *FullRepository) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *FullRepository) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *FullRepository) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *FullRepository) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *FullRepository) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *FullRepository) GetSSHURL() string {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *FullRepository) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *FullRepository) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *FullRepository) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *FullRepository) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *FullRepository) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *FullRepository) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *FullRepository) GetTreesURL() string {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *FullRepository) GetCloneURL() string {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *FullRepository) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *FullRepository) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *FullRepository) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *FullRepository) GetHomepage() NilURI {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *FullRepository) GetLanguage() NilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *FullRepository) GetForksCount() int {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *FullRepository) GetStargazersCount() int {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *FullRepository) GetWatchersCount() int {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *FullRepository) GetSize() int {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *FullRepository) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *FullRepository) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *FullRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *FullRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *FullRepository) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *FullRepository) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *FullRepository) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *FullRepository) GetHasPages() bool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *FullRepository) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *FullRepository) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *FullRepository) GetDisabled() bool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *FullRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *FullRepository) GetPushedAt() time.Time {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FullRepository) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FullRepository) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *FullRepository) GetPermissions() OptFullRepositoryPermissions {
	return s.Permissions
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *FullRepository) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetTemplateRepository returns the value of TemplateRepository.
func (s *FullRepository) GetTemplateRepository() OptNilNullableRepository {
	return s.TemplateRepository
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *FullRepository) GetTempCloneToken() OptNilString {
	return s.TempCloneToken
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *FullRepository) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *FullRepository) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *FullRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *FullRepository) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowForking returns the value of AllowForking.
func (s *FullRepository) GetAllowForking() OptBool {
	return s.AllowForking
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *FullRepository) GetSubscribersCount() int {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *FullRepository) GetNetworkCount() int {
	return s.NetworkCount
}

// GetLicense returns the value of License.
func (s *FullRepository) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetOrganization returns the value of Organization.
func (s *FullRepository) GetOrganization() OptNilNullableSimpleUser {
	return s.Organization
}

// GetParent returns the value of Parent.
func (s *FullRepository) GetParent() OptRepository {
	return s.Parent
}

// GetSource returns the value of Source.
func (s *FullRepository) GetSource() OptRepository {
	return s.Source
}

// GetForks returns the value of Forks.
func (s *FullRepository) GetForks() int {
	return s.Forks
}

// GetMasterBranch returns the value of MasterBranch.
func (s *FullRepository) GetMasterBranch() OptString {
	return s.MasterBranch
}

// GetOpenIssues returns the value of OpenIssues.
func (s *FullRepository) GetOpenIssues() int {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *FullRepository) GetWatchers() int {
	return s.Watchers
}

// GetAnonymousAccessEnabled returns the value of AnonymousAccessEnabled.
func (s *FullRepository) GetAnonymousAccessEnabled() OptBool {
	return s.AnonymousAccessEnabled
}

// GetCodeOfConduct returns the value of CodeOfConduct.
func (s *FullRepository) GetCodeOfConduct() OptCodeOfConductSimple {
	return s.CodeOfConduct
}

// GetSecurityAndAnalysis returns the value of SecurityAndAnalysis.
func (s *FullRepository) GetSecurityAndAnalysis() OptNilFullRepositorySecurityAndAnalysis {
	return s.SecurityAndAnalysis
}

// SetID sets the value of ID.
func (s *FullRepository) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *FullRepository) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *FullRepository) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *FullRepository) SetFullName(val string) {
	s.FullName = val
}

// SetOwner sets the value of Owner.
func (s *FullRepository) SetOwner(val SimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *FullRepository) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *FullRepository) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *FullRepository) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *FullRepository) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *FullRepository) SetURL(val url.URL) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *FullRepository) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *FullRepository) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *FullRepository) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *FullRepository) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *FullRepository) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *FullRepository) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *FullRepository) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *FullRepository) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *FullRepository) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *FullRepository) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *FullRepository) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *FullRepository) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *FullRepository) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *FullRepository) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *FullRepository) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *FullRepository) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *FullRepository) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *FullRepository) SetGitURL(val string) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *FullRepository) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *FullRepository) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *FullRepository) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *FullRepository) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *FullRepository) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *FullRepository) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *FullRepository) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *FullRepository) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *FullRepository) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *FullRepository) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *FullRepository) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *FullRepository) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *FullRepository) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *FullRepository) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *FullRepository) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *FullRepository) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *FullRepository) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *FullRepository) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *FullRepository) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *FullRepository) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *FullRepository) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *FullRepository) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *FullRepository) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *FullRepository) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *FullRepository) SetLanguage(val NilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *FullRepository) SetForksCount(val int) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *FullRepository) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *FullRepository) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *FullRepository) SetSize(val int) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *FullRepository) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *FullRepository) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *FullRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *FullRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *FullRepository) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *FullRepository) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *FullRepository) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *FullRepository) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *FullRepository) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *FullRepository) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *FullRepository) SetDisabled(val bool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *FullRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *FullRepository) SetPushedAt(val time.Time) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FullRepository) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FullRepository) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *FullRepository) SetPermissions(val OptFullRepositoryPermissions) {
	s.Permissions = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *FullRepository) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetTemplateRepository sets the value of TemplateRepository.
func (s *FullRepository) SetTemplateRepository(val OptNilNullableRepository) {
	s.TemplateRepository = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *FullRepository) SetTempCloneToken(val OptNilString) {
	s.TempCloneToken = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *FullRepository) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *FullRepository) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *FullRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *FullRepository) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowForking sets the value of AllowForking.
func (s *FullRepository) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *FullRepository) SetSubscribersCount(val int) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *FullRepository) SetNetworkCount(val int) {
	s.NetworkCount = val
}

// SetLicense sets the value of License.
func (s *FullRepository) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetOrganization sets the value of Organization.
func (s *FullRepository) SetOrganization(val OptNilNullableSimpleUser) {
	s.Organization = val
}

// SetParent sets the value of Parent.
func (s *FullRepository) SetParent(val OptRepository) {
	s.Parent = val
}

// SetSource sets the value of Source.
func (s *FullRepository) SetSource(val OptRepository) {
	s.Source = val
}

// SetForks sets the value of Forks.
func (s *FullRepository) SetForks(val int) {
	s.Forks = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *FullRepository) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *FullRepository) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *FullRepository) SetWatchers(val int) {
	s.Watchers = val
}

// SetAnonymousAccessEnabled sets the value of AnonymousAccessEnabled.
func (s *FullRepository) SetAnonymousAccessEnabled(val OptBool) {
	s.AnonymousAccessEnabled = val
}

// SetCodeOfConduct sets the value of CodeOfConduct.
func (s *FullRepository) SetCodeOfConduct(val OptCodeOfConductSimple) {
	s.CodeOfConduct = val
}

// SetSecurityAndAnalysis sets the value of SecurityAndAnalysis.
func (s *FullRepository) SetSecurityAndAnalysis(val OptNilFullRepositorySecurityAndAnalysis) {
	s.SecurityAndAnalysis = val
}

func (*FullRepository) reposCreateForkRes() {}
func (*FullRepository) reposGetRes()        {}
func (*FullRepository) reposUpdateRes()     {}

type FullRepositoryPermissions struct {
	Admin    bool    `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     bool    `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     bool    `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *FullRepositoryPermissions) GetAdmin() bool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *FullRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *FullRepositoryPermissions) GetPush() bool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *FullRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *FullRepositoryPermissions) GetPull() bool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *FullRepositoryPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *FullRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *FullRepositoryPermissions) SetPush(val bool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *FullRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *FullRepositoryPermissions) SetPull(val bool) {
	s.Pull = val
}

type FullRepositorySecurityAndAnalysis struct {
	AdvancedSecurity OptFullRepositorySecurityAndAnalysisAdvancedSecurity `json:"advanced_security"`
	SecretScanning   OptFullRepositorySecurityAndAnalysisSecretScanning   `json:"secret_scanning"`
}

// GetAdvancedSecurity returns the value of AdvancedSecurity.
func (s *FullRepositorySecurityAndAnalysis) GetAdvancedSecurity() OptFullRepositorySecurityAndAnalysisAdvancedSecurity {
	return s.AdvancedSecurity
}

// GetSecretScanning returns the value of SecretScanning.
func (s *FullRepositorySecurityAndAnalysis) GetSecretScanning() OptFullRepositorySecurityAndAnalysisSecretScanning {
	return s.SecretScanning
}

// SetAdvancedSecurity sets the value of AdvancedSecurity.
func (s *FullRepositorySecurityAndAnalysis) SetAdvancedSecurity(val OptFullRepositorySecurityAndAnalysisAdvancedSecurity) {
	s.AdvancedSecurity = val
}

// SetSecretScanning sets the value of SecretScanning.
func (s *FullRepositorySecurityAndAnalysis) SetSecretScanning(val OptFullRepositorySecurityAndAnalysisSecretScanning) {
	s.SecretScanning = val
}

type FullRepositorySecurityAndAnalysisAdvancedSecurity struct {
	Status OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) GetStatus() OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) SetStatus(val OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) {
	s.Status = val
}

type FullRepositorySecurityAndAnalysisAdvancedSecurityStatus string

const (
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled  FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "enabled"
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "disabled"
)

// MarshalText implements encoding.TextMarshaler.
func (s FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) MarshalText() ([]byte, error) {
	switch s {
	case FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled:
		return []byte(s), nil
	case FullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) UnmarshalText(data []byte) error {
	switch FullRepositorySecurityAndAnalysisAdvancedSecurityStatus(data) {
	case FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled:
		*s = FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled
		return nil
	case FullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled:
		*s = FullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FullRepositorySecurityAndAnalysisSecretScanning struct {
	Status OptFullRepositorySecurityAndAnalysisSecretScanningStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *FullRepositorySecurityAndAnalysisSecretScanning) GetStatus() OptFullRepositorySecurityAndAnalysisSecretScanningStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *FullRepositorySecurityAndAnalysisSecretScanning) SetStatus(val OptFullRepositorySecurityAndAnalysisSecretScanningStatus) {
	s.Status = val
}

type FullRepositorySecurityAndAnalysisSecretScanningStatus string

const (
	FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled  FullRepositorySecurityAndAnalysisSecretScanningStatus = "enabled"
	FullRepositorySecurityAndAnalysisSecretScanningStatusDisabled FullRepositorySecurityAndAnalysisSecretScanningStatus = "disabled"
)

// MarshalText implements encoding.TextMarshaler.
func (s FullRepositorySecurityAndAnalysisSecretScanningStatus) MarshalText() ([]byte, error) {
	switch s {
	case FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled:
		return []byte(s), nil
	case FullRepositorySecurityAndAnalysisSecretScanningStatusDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FullRepositorySecurityAndAnalysisSecretScanningStatus) UnmarshalText(data []byte) error {
	switch FullRepositorySecurityAndAnalysisSecretScanningStatus(data) {
	case FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled:
		*s = FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled
		return nil
	case FullRepositorySecurityAndAnalysisSecretScanningStatusDisabled:
		*s = FullRepositorySecurityAndAnalysisSecretScanningStatusDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A comment made to a gist.
// Ref: #/components/schemas/gist-comment
type GistComment struct {
	ID     int     `json:"id"`
	NodeID string  `json:"node_id"`
	URL    url.URL `json:"url"`
	// The comment text.
	Body              string                `json:"body"`
	User              NilNullableSimpleUser `json:"user"`
	CreatedAt         time.Time             `json:"created_at"`
	UpdatedAt         time.Time             `json:"updated_at"`
	AuthorAssociation AuthorAssociation     `json:"author_association"`
}

// GetID returns the value of ID.
func (s *GistComment) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *GistComment) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *GistComment) GetURL() url.URL {
	return s.URL
}

// GetBody returns the value of Body.
func (s *GistComment) GetBody() string {
	return s.Body
}

// GetUser returns the value of User.
func (s *GistComment) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GistComment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *GistComment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *GistComment) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// SetID sets the value of ID.
func (s *GistComment) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *GistComment) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *GistComment) SetURL(val url.URL) {
	s.URL = val
}

// SetBody sets the value of Body.
func (s *GistComment) SetBody(val string) {
	s.Body = val
}

// SetUser sets the value of User.
func (s *GistComment) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GistComment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *GistComment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *GistComment) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

func (*GistComment) gistsGetCommentRes()    {}
func (*GistComment) gistsUpdateCommentRes() {}

// GistCommentHeaders wraps GistComment with response headers.
type GistCommentHeaders struct {
	Location OptString
	Response GistComment
}

// GetLocation returns the value of Location.
func (s *GistCommentHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *GistCommentHeaders) GetResponse() GistComment {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *GistCommentHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *GistCommentHeaders) SetResponse(val GistComment) {
	s.Response = val
}

func (*GistCommentHeaders) gistsCreateCommentRes() {}

// Gist Commit.
// Ref: #/components/schemas/gist-commit
type GistCommit struct {
	URL          url.URL                `json:"url"`
	Version      string                 `json:"version"`
	User         NilNullableSimpleUser  `json:"user"`
	ChangeStatus GistCommitChangeStatus `json:"change_status"`
	CommittedAt  time.Time              `json:"committed_at"`
}

// GetURL returns the value of URL.
func (s *GistCommit) GetURL() url.URL {
	return s.URL
}

// GetVersion returns the value of Version.
func (s *GistCommit) GetVersion() string {
	return s.Version
}

// GetUser returns the value of User.
func (s *GistCommit) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetChangeStatus returns the value of ChangeStatus.
func (s *GistCommit) GetChangeStatus() GistCommitChangeStatus {
	return s.ChangeStatus
}

// GetCommittedAt returns the value of CommittedAt.
func (s *GistCommit) GetCommittedAt() time.Time {
	return s.CommittedAt
}

// SetURL sets the value of URL.
func (s *GistCommit) SetURL(val url.URL) {
	s.URL = val
}

// SetVersion sets the value of Version.
func (s *GistCommit) SetVersion(val string) {
	s.Version = val
}

// SetUser sets the value of User.
func (s *GistCommit) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetChangeStatus sets the value of ChangeStatus.
func (s *GistCommit) SetChangeStatus(val GistCommitChangeStatus) {
	s.ChangeStatus = val
}

// SetCommittedAt sets the value of CommittedAt.
func (s *GistCommit) SetCommittedAt(val time.Time) {
	s.CommittedAt = val
}

type GistCommitChangeStatus struct {
	Total     OptInt `json:"total"`
	Additions OptInt `json:"additions"`
	Deletions OptInt `json:"deletions"`
}

// GetTotal returns the value of Total.
func (s *GistCommitChangeStatus) GetTotal() OptInt {
	return s.Total
}

// GetAdditions returns the value of Additions.
func (s *GistCommitChangeStatus) GetAdditions() OptInt {
	return s.Additions
}

// GetDeletions returns the value of Deletions.
func (s *GistCommitChangeStatus) GetDeletions() OptInt {
	return s.Deletions
}

// SetTotal sets the value of Total.
func (s *GistCommitChangeStatus) SetTotal(val OptInt) {
	s.Total = val
}

// SetAdditions sets the value of Additions.
func (s *GistCommitChangeStatus) SetAdditions(val OptInt) {
	s.Additions = val
}

// SetDeletions sets the value of Deletions.
func (s *GistCommitChangeStatus) SetDeletions(val OptInt) {
	s.Deletions = val
}

// Gist History.
// Ref: #/components/schemas/gist-history
type GistHistory struct {
	User         OptNilNullableSimpleUser   `json:"user"`
	Version      OptString                  `json:"version"`
	CommittedAt  OptDateTime                `json:"committed_at"`
	ChangeStatus OptGistHistoryChangeStatus `json:"change_status"`
	URL          OptURI                     `json:"url"`
}

// GetUser returns the value of User.
func (s *GistHistory) GetUser() OptNilNullableSimpleUser {
	return s.User
}

// GetVersion returns the value of Version.
func (s *GistHistory) GetVersion() OptString {
	return s.Version
}

// GetCommittedAt returns the value of CommittedAt.
func (s *GistHistory) GetCommittedAt() OptDateTime {
	return s.CommittedAt
}

// GetChangeStatus returns the value of ChangeStatus.
func (s *GistHistory) GetChangeStatus() OptGistHistoryChangeStatus {
	return s.ChangeStatus
}

// GetURL returns the value of URL.
func (s *GistHistory) GetURL() OptURI {
	return s.URL
}

// SetUser sets the value of User.
func (s *GistHistory) SetUser(val OptNilNullableSimpleUser) {
	s.User = val
}

// SetVersion sets the value of Version.
func (s *GistHistory) SetVersion(val OptString) {
	s.Version = val
}

// SetCommittedAt sets the value of CommittedAt.
func (s *GistHistory) SetCommittedAt(val OptDateTime) {
	s.CommittedAt = val
}

// SetChangeStatus sets the value of ChangeStatus.
func (s *GistHistory) SetChangeStatus(val OptGistHistoryChangeStatus) {
	s.ChangeStatus = val
}

// SetURL sets the value of URL.
func (s *GistHistory) SetURL(val OptURI) {
	s.URL = val
}

type GistHistoryChangeStatus struct {
	Total     OptInt `json:"total"`
	Additions OptInt `json:"additions"`
	Deletions OptInt `json:"deletions"`
}

// GetTotal returns the value of Total.
func (s *GistHistoryChangeStatus) GetTotal() OptInt {
	return s.Total
}

// GetAdditions returns the value of Additions.
func (s *GistHistoryChangeStatus) GetAdditions() OptInt {
	return s.Additions
}

// GetDeletions returns the value of Deletions.
func (s *GistHistoryChangeStatus) GetDeletions() OptInt {
	return s.Deletions
}

// SetTotal sets the value of Total.
func (s *GistHistoryChangeStatus) SetTotal(val OptInt) {
	s.Total = val
}

// SetAdditions sets the value of Additions.
func (s *GistHistoryChangeStatus) SetAdditions(val OptInt) {
	s.Additions = val
}

// SetDeletions sets the value of Deletions.
func (s *GistHistoryChangeStatus) SetDeletions(val OptInt) {
	s.Deletions = val
}

// Gist Simple.
// Ref: #/components/schemas/gist-simple
type GistSimple struct {
	// Deprecated: schema marks this property as deprecated.
	Forks OptNilGistSimpleForksItemArray `json:"forks"`
	// Deprecated: schema marks this property as deprecated.
	History OptNilGistHistoryArray `json:"history"`
	// Gist.
	ForkOf      OptNilGistSimpleForkOf `json:"fork_of"`
	URL         OptString              `json:"url"`
	ForksURL    OptString              `json:"forks_url"`
	CommitsURL  OptString              `json:"commits_url"`
	ID          OptString              `json:"id"`
	NodeID      OptString              `json:"node_id"`
	GitPullURL  OptString              `json:"git_pull_url"`
	GitPushURL  OptString              `json:"git_push_url"`
	HTMLURL     OptString              `json:"html_url"`
	Files       OptGistSimpleFiles     `json:"files"`
	Public      OptBool                `json:"public"`
	CreatedAt   OptString              `json:"created_at"`
	UpdatedAt   OptString              `json:"updated_at"`
	Description OptNilString           `json:"description"`
	Comments    OptInt                 `json:"comments"`
	User        OptNilString           `json:"user"`
	CommentsURL OptString              `json:"comments_url"`
	Owner       OptSimpleUser          `json:"owner"`
	Truncated   OptBool                `json:"truncated"`
}

// GetForks returns the value of Forks.
func (s *GistSimple) GetForks() OptNilGistSimpleForksItemArray {
	return s.Forks
}

// GetHistory returns the value of History.
func (s *GistSimple) GetHistory() OptNilGistHistoryArray {
	return s.History
}

// GetForkOf returns the value of ForkOf.
func (s *GistSimple) GetForkOf() OptNilGistSimpleForkOf {
	return s.ForkOf
}

// GetURL returns the value of URL.
func (s *GistSimple) GetURL() OptString {
	return s.URL
}

// GetForksURL returns the value of ForksURL.
func (s *GistSimple) GetForksURL() OptString {
	return s.ForksURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *GistSimple) GetCommitsURL() OptString {
	return s.CommitsURL
}

// GetID returns the value of ID.
func (s *GistSimple) GetID() OptString {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *GistSimple) GetNodeID() OptString {
	return s.NodeID
}

// GetGitPullURL returns the value of GitPullURL.
func (s *GistSimple) GetGitPullURL() OptString {
	return s.GitPullURL
}

// GetGitPushURL returns the value of GitPushURL.
func (s *GistSimple) GetGitPushURL() OptString {
	return s.GitPushURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *GistSimple) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetFiles returns the value of Files.
func (s *GistSimple) GetFiles() OptGistSimpleFiles {
	return s.Files
}

// GetPublic returns the value of Public.
func (s *GistSimple) GetPublic() OptBool {
	return s.Public
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GistSimple) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *GistSimple) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetDescription returns the value of Description.
func (s *GistSimple) GetDescription() OptNilString {
	return s.Description
}

// GetComments returns the value of Comments.
func (s *GistSimple) GetComments() OptInt {
	return s.Comments
}

// GetUser returns the value of User.
func (s *GistSimple) GetUser() OptNilString {
	return s.User
}

// GetCommentsURL returns the value of CommentsURL.
func (s *GistSimple) GetCommentsURL() OptString {
	return s.CommentsURL
}

// GetOwner returns the value of Owner.
func (s *GistSimple) GetOwner() OptSimpleUser {
	return s.Owner
}

// GetTruncated returns the value of Truncated.
func (s *GistSimple) GetTruncated() OptBool {
	return s.Truncated
}

// SetForks sets the value of Forks.
func (s *GistSimple) SetForks(val OptNilGistSimpleForksItemArray) {
	s.Forks = val
}

// SetHistory sets the value of History.
func (s *GistSimple) SetHistory(val OptNilGistHistoryArray) {
	s.History = val
}

// SetForkOf sets the value of ForkOf.
func (s *GistSimple) SetForkOf(val OptNilGistSimpleForkOf) {
	s.ForkOf = val
}

// SetURL sets the value of URL.
func (s *GistSimple) SetURL(val OptString) {
	s.URL = val
}

// SetForksURL sets the value of ForksURL.
func (s *GistSimple) SetForksURL(val OptString) {
	s.ForksURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *GistSimple) SetCommitsURL(val OptString) {
	s.CommitsURL = val
}

// SetID sets the value of ID.
func (s *GistSimple) SetID(val OptString) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *GistSimple) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetGitPullURL sets the value of GitPullURL.
func (s *GistSimple) SetGitPullURL(val OptString) {
	s.GitPullURL = val
}

// SetGitPushURL sets the value of GitPushURL.
func (s *GistSimple) SetGitPushURL(val OptString) {
	s.GitPushURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *GistSimple) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetFiles sets the value of Files.
func (s *GistSimple) SetFiles(val OptGistSimpleFiles) {
	s.Files = val
}

// SetPublic sets the value of Public.
func (s *GistSimple) SetPublic(val OptBool) {
	s.Public = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GistSimple) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *GistSimple) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetDescription sets the value of Description.
func (s *GistSimple) SetDescription(val OptNilString) {
	s.Description = val
}

// SetComments sets the value of Comments.
func (s *GistSimple) SetComments(val OptInt) {
	s.Comments = val
}

// SetUser sets the value of User.
func (s *GistSimple) SetUser(val OptNilString) {
	s.User = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *GistSimple) SetCommentsURL(val OptString) {
	s.CommentsURL = val
}

// SetOwner sets the value of Owner.
func (s *GistSimple) SetOwner(val OptSimpleUser) {
	s.Owner = val
}

// SetTruncated sets the value of Truncated.
func (s *GistSimple) SetTruncated(val OptBool) {
	s.Truncated = val
}

func (*GistSimple) gistsGetRes()         {}
func (*GistSimple) gistsGetRevisionRes() {}

type GistSimpleFiles map[string]NilGistSimpleFilesItem

func (s *GistSimpleFiles) init() GistSimpleFiles {
	m := *s
	if m == nil {
		m = map[string]NilGistSimpleFilesItem{}
		*s = m
	}
	return m
}

type GistSimpleFilesItem struct {
	Filename  OptString `json:"filename"`
	Type      OptString `json:"type"`
	Language  OptString `json:"language"`
	RawURL    OptString `json:"raw_url"`
	Size      OptInt    `json:"size"`
	Truncated OptBool   `json:"truncated"`
	Content   OptString `json:"content"`
}

// GetFilename returns the value of Filename.
func (s *GistSimpleFilesItem) GetFilename() OptString {
	return s.Filename
}

// GetType returns the value of Type.
func (s *GistSimpleFilesItem) GetType() OptString {
	return s.Type
}

// GetLanguage returns the value of Language.
func (s *GistSimpleFilesItem) GetLanguage() OptString {
	return s.Language
}

// GetRawURL returns the value of RawURL.
func (s *GistSimpleFilesItem) GetRawURL() OptString {
	return s.RawURL
}

// GetSize returns the value of Size.
func (s *GistSimpleFilesItem) GetSize() OptInt {
	return s.Size
}

// GetTruncated returns the value of Truncated.
func (s *GistSimpleFilesItem) GetTruncated() OptBool {
	return s.Truncated
}

// GetContent returns the value of Content.
func (s *GistSimpleFilesItem) GetContent() OptString {
	return s.Content
}

// SetFilename sets the value of Filename.
func (s *GistSimpleFilesItem) SetFilename(val OptString) {
	s.Filename = val
}

// SetType sets the value of Type.
func (s *GistSimpleFilesItem) SetType(val OptString) {
	s.Type = val
}

// SetLanguage sets the value of Language.
func (s *GistSimpleFilesItem) SetLanguage(val OptString) {
	s.Language = val
}

// SetRawURL sets the value of RawURL.
func (s *GistSimpleFilesItem) SetRawURL(val OptString) {
	s.RawURL = val
}

// SetSize sets the value of Size.
func (s *GistSimpleFilesItem) SetSize(val OptInt) {
	s.Size = val
}

// SetTruncated sets the value of Truncated.
func (s *GistSimpleFilesItem) SetTruncated(val OptBool) {
	s.Truncated = val
}

// SetContent sets the value of Content.
func (s *GistSimpleFilesItem) SetContent(val OptString) {
	s.Content = val
}

// Gist.
type GistSimpleForkOf struct {
	URL         url.URL                  `json:"url"`
	ForksURL    url.URL                  `json:"forks_url"`
	CommitsURL  url.URL                  `json:"commits_url"`
	ID          string                   `json:"id"`
	NodeID      string                   `json:"node_id"`
	GitPullURL  url.URL                  `json:"git_pull_url"`
	GitPushURL  url.URL                  `json:"git_push_url"`
	HTMLURL     url.URL                  `json:"html_url"`
	Files       GistSimpleForkOfFiles    `json:"files"`
	Public      bool                     `json:"public"`
	CreatedAt   time.Time                `json:"created_at"`
	UpdatedAt   time.Time                `json:"updated_at"`
	Description NilString                `json:"description"`
	Comments    int                      `json:"comments"`
	User        NilNullableSimpleUser    `json:"user"`
	CommentsURL url.URL                  `json:"comments_url"`
	Owner       OptNilNullableSimpleUser `json:"owner"`
	Truncated   OptBool                  `json:"truncated"`
	Forks       []jx.Raw                 `json:"forks"`
	History     []jx.Raw                 `json:"history"`
}

// GetURL returns the value of URL.
func (s *GistSimpleForkOf) GetURL() url.URL {
	return s.URL
}

// GetForksURL returns the value of ForksURL.
func (s *GistSimpleForkOf) GetForksURL() url.URL {
	return s.ForksURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *GistSimpleForkOf) GetCommitsURL() url.URL {
	return s.CommitsURL
}

// GetID returns the value of ID.
func (s *GistSimpleForkOf) GetID() string {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *GistSimpleForkOf) GetNodeID() string {
	return s.NodeID
}

// GetGitPullURL returns the value of GitPullURL.
func (s *GistSimpleForkOf) GetGitPullURL() url.URL {
	return s.GitPullURL
}

// GetGitPushURL returns the value of GitPushURL.
func (s *GistSimpleForkOf) GetGitPushURL() url.URL {
	return s.GitPushURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *GistSimpleForkOf) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFiles returns the value of Files.
func (s *GistSimpleForkOf) GetFiles() GistSimpleForkOfFiles {
	return s.Files
}

// GetPublic returns the value of Public.
func (s *GistSimpleForkOf) GetPublic() bool {
	return s.Public
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GistSimpleForkOf) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *GistSimpleForkOf) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDescription returns the value of Description.
func (s *GistSimpleForkOf) GetDescription() NilString {
	return s.Description
}

// GetComments returns the value of Comments.
func (s *GistSimpleForkOf) GetComments() int {
	return s.Comments
}

// GetUser returns the value of User.
func (s *GistSimpleForkOf) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetCommentsURL returns the value of CommentsURL.
func (s *GistSimpleForkOf) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetOwner returns the value of Owner.
func (s *GistSimpleForkOf) GetOwner() OptNilNullableSimpleUser {
	return s.Owner
}

// GetTruncated returns the value of Truncated.
func (s *GistSimpleForkOf) GetTruncated() OptBool {
	return s.Truncated
}

// GetForks returns the value of Forks.
func (s *GistSimpleForkOf) GetForks() []jx.Raw {
	return s.Forks
}

// GetHistory returns the value of History.
func (s *GistSimpleForkOf) GetHistory() []jx.Raw {
	return s.History
}

// SetURL sets the value of URL.
func (s *GistSimpleForkOf) SetURL(val url.URL) {
	s.URL = val
}

// SetForksURL sets the value of ForksURL.
func (s *GistSimpleForkOf) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *GistSimpleForkOf) SetCommitsURL(val url.URL) {
	s.CommitsURL = val
}

// SetID sets the value of ID.
func (s *GistSimpleForkOf) SetID(val string) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *GistSimpleForkOf) SetNodeID(val string) {
	s.NodeID = val
}

// SetGitPullURL sets the value of GitPullURL.
func (s *GistSimpleForkOf) SetGitPullURL(val url.URL) {
	s.GitPullURL = val
}

// SetGitPushURL sets the value of GitPushURL.
func (s *GistSimpleForkOf) SetGitPushURL(val url.URL) {
	s.GitPushURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *GistSimpleForkOf) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFiles sets the value of Files.
func (s *GistSimpleForkOf) SetFiles(val GistSimpleForkOfFiles) {
	s.Files = val
}

// SetPublic sets the value of Public.
func (s *GistSimpleForkOf) SetPublic(val bool) {
	s.Public = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GistSimpleForkOf) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *GistSimpleForkOf) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDescription sets the value of Description.
func (s *GistSimpleForkOf) SetDescription(val NilString) {
	s.Description = val
}

// SetComments sets the value of Comments.
func (s *GistSimpleForkOf) SetComments(val int) {
	s.Comments = val
}

// SetUser sets the value of User.
func (s *GistSimpleForkOf) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *GistSimpleForkOf) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetOwner sets the value of Owner.
func (s *GistSimpleForkOf) SetOwner(val OptNilNullableSimpleUser) {
	s.Owner = val
}

// SetTruncated sets the value of Truncated.
func (s *GistSimpleForkOf) SetTruncated(val OptBool) {
	s.Truncated = val
}

// SetForks sets the value of Forks.
func (s *GistSimpleForkOf) SetForks(val []jx.Raw) {
	s.Forks = val
}

// SetHistory sets the value of History.
func (s *GistSimpleForkOf) SetHistory(val []jx.Raw) {
	s.History = val
}

type GistSimpleForkOfFiles map[string]GistSimpleForkOfFilesItem

func (s *GistSimpleForkOfFiles) init() GistSimpleForkOfFiles {
	m := *s
	if m == nil {
		m = map[string]GistSimpleForkOfFilesItem{}
		*s = m
	}
	return m
}

type GistSimpleForkOfFilesItem struct {
	Filename OptString `json:"filename"`
	Type     OptString `json:"type"`
	Language OptString `json:"language"`
	RawURL   OptString `json:"raw_url"`
	Size     OptInt    `json:"size"`
}

// GetFilename returns the value of Filename.
func (s *GistSimpleForkOfFilesItem) GetFilename() OptString {
	return s.Filename
}

// GetType returns the value of Type.
func (s *GistSimpleForkOfFilesItem) GetType() OptString {
	return s.Type
}

// GetLanguage returns the value of Language.
func (s *GistSimpleForkOfFilesItem) GetLanguage() OptString {
	return s.Language
}

// GetRawURL returns the value of RawURL.
func (s *GistSimpleForkOfFilesItem) GetRawURL() OptString {
	return s.RawURL
}

// GetSize returns the value of Size.
func (s *GistSimpleForkOfFilesItem) GetSize() OptInt {
	return s.Size
}

// SetFilename sets the value of Filename.
func (s *GistSimpleForkOfFilesItem) SetFilename(val OptString) {
	s.Filename = val
}

// SetType sets the value of Type.
func (s *GistSimpleForkOfFilesItem) SetType(val OptString) {
	s.Type = val
}

// SetLanguage sets the value of Language.
func (s *GistSimpleForkOfFilesItem) SetLanguage(val OptString) {
	s.Language = val
}

// SetRawURL sets the value of RawURL.
func (s *GistSimpleForkOfFilesItem) SetRawURL(val OptString) {
	s.RawURL = val
}

// SetSize sets the value of Size.
func (s *GistSimpleForkOfFilesItem) SetSize(val OptInt) {
	s.Size = val
}

type GistSimpleForksItem struct {
	ID        OptString     `json:"id"`
	URL       OptURI        `json:"url"`
	User      OptPublicUser `json:"user"`
	CreatedAt OptDateTime   `json:"created_at"`
	UpdatedAt OptDateTime   `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *GistSimpleForksItem) GetID() OptString {
	return s.ID
}

// GetURL returns the value of URL.
func (s *GistSimpleForksItem) GetURL() OptURI {
	return s.URL
}

// GetUser returns the value of User.
func (s *GistSimpleForksItem) GetUser() OptPublicUser {
	return s.User
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GistSimpleForksItem) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *GistSimpleForksItem) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *GistSimpleForksItem) SetID(val OptString) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *GistSimpleForksItem) SetURL(val OptURI) {
	s.URL = val
}

// SetUser sets the value of User.
func (s *GistSimpleForksItem) SetUser(val OptPublicUser) {
	s.User = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GistSimpleForksItem) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *GistSimpleForksItem) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// GistSimpleHeaders wraps GistSimple with response headers.
type GistSimpleHeaders struct {
	Location OptString
	Response GistSimple
}

// GetLocation returns the value of Location.
func (s *GistSimpleHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *GistSimpleHeaders) GetResponse() GistSimple {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *GistSimpleHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *GistSimpleHeaders) SetResponse(val GistSimple) {
	s.Response = val
}

func (*GistSimpleHeaders) gistsCreateRes() {}

// GistsCheckIsStarredNoContent is response for GistsCheckIsStarred operation.
type GistsCheckIsStarredNoContent struct{}

func (*GistsCheckIsStarredNoContent) gistsCheckIsStarredRes() {}

type GistsCheckIsStarredNotFound struct{}

func (*GistsCheckIsStarredNotFound) gistsCheckIsStarredRes() {}

type GistsCreateCommentForbidden BasicError

func (*GistsCreateCommentForbidden) gistsCreateCommentRes() {}

type GistsCreateCommentNotFound BasicError

func (*GistsCreateCommentNotFound) gistsCreateCommentRes() {}

type GistsCreateCommentReq struct {
	// The comment text.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *GistsCreateCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *GistsCreateCommentReq) SetBody(val string) {
	s.Body = val
}

type GistsCreateForbidden BasicError

func (*GistsCreateForbidden) gistsCreateRes() {}

type GistsCreateNotFound BasicError

func (*GistsCreateNotFound) gistsCreateRes() {}

type GistsCreateReq struct {
	// Description of the gist.
	Description OptString `json:"description"`
	// Names and content for the files that make up the gist.
	Files  GistsCreateReqFiles     `json:"files"`
	Public OptGistsCreateReqPublic `json:"public"`
}

// GetDescription returns the value of Description.
func (s *GistsCreateReq) GetDescription() OptString {
	return s.Description
}

// GetFiles returns the value of Files.
func (s *GistsCreateReq) GetFiles() GistsCreateReqFiles {
	return s.Files
}

// GetPublic returns the value of Public.
func (s *GistsCreateReq) GetPublic() OptGistsCreateReqPublic {
	return s.Public
}

// SetDescription sets the value of Description.
func (s *GistsCreateReq) SetDescription(val OptString) {
	s.Description = val
}

// SetFiles sets the value of Files.
func (s *GistsCreateReq) SetFiles(val GistsCreateReqFiles) {
	s.Files = val
}

// SetPublic sets the value of Public.
func (s *GistsCreateReq) SetPublic(val OptGistsCreateReqPublic) {
	s.Public = val
}

// Names and content for the files that make up the gist.
type GistsCreateReqFiles map[string]GistsCreateReqFilesItem

func (s *GistsCreateReqFiles) init() GistsCreateReqFiles {
	m := *s
	if m == nil {
		m = map[string]GistsCreateReqFilesItem{}
		*s = m
	}
	return m
}

type GistsCreateReqFilesItem struct {
	// Content of the file.
	Content string `json:"content"`
}

// GetContent returns the value of Content.
func (s *GistsCreateReqFilesItem) GetContent() string {
	return s.Content
}

// SetContent sets the value of Content.
func (s *GistsCreateReqFilesItem) SetContent(val string) {
	s.Content = val
}

// GistsCreateReqPublic represents sum type.
type GistsCreateReqPublic struct {
	Type                  GistsCreateReqPublicType // switch on this field
	Bool                  bool
	GistsCreateReqPublic1 GistsCreateReqPublic1
}

// GistsCreateReqPublicType is oneOf type of GistsCreateReqPublic.
type GistsCreateReqPublicType string

// Possible values for GistsCreateReqPublicType.
const (
	BoolGistsCreateReqPublic                  GistsCreateReqPublicType = "bool"
	GistsCreateReqPublic1GistsCreateReqPublic GistsCreateReqPublicType = "GistsCreateReqPublic1"
)

// IsBool reports whether GistsCreateReqPublic is bool.
func (s GistsCreateReqPublic) IsBool() bool { return s.Type == BoolGistsCreateReqPublic }

// IsGistsCreateReqPublic1 reports whether GistsCreateReqPublic is GistsCreateReqPublic1.
func (s GistsCreateReqPublic) IsGistsCreateReqPublic1() bool {
	return s.Type == GistsCreateReqPublic1GistsCreateReqPublic
}

// SetBool sets GistsCreateReqPublic to bool.
func (s *GistsCreateReqPublic) SetBool(v bool) {
	s.Type = BoolGistsCreateReqPublic
	s.Bool = v
}

// GetBool returns bool and true boolean if GistsCreateReqPublic is bool.
func (s GistsCreateReqPublic) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolGistsCreateReqPublic returns new GistsCreateReqPublic from bool.
func NewBoolGistsCreateReqPublic(v bool) GistsCreateReqPublic {
	var s GistsCreateReqPublic
	s.SetBool(v)
	return s
}

// SetGistsCreateReqPublic1 sets GistsCreateReqPublic to GistsCreateReqPublic1.
func (s *GistsCreateReqPublic) SetGistsCreateReqPublic1(v GistsCreateReqPublic1) {
	s.Type = GistsCreateReqPublic1GistsCreateReqPublic
	s.GistsCreateReqPublic1 = v
}

// GetGistsCreateReqPublic1 returns GistsCreateReqPublic1 and true boolean if GistsCreateReqPublic is GistsCreateReqPublic1.
func (s GistsCreateReqPublic) GetGistsCreateReqPublic1() (v GistsCreateReqPublic1, ok bool) {
	if !s.IsGistsCreateReqPublic1() {
		return v, false
	}
	return s.GistsCreateReqPublic1, true
}

// NewGistsCreateReqPublic1GistsCreateReqPublic returns new GistsCreateReqPublic from GistsCreateReqPublic1.
func NewGistsCreateReqPublic1GistsCreateReqPublic(v GistsCreateReqPublic1) GistsCreateReqPublic {
	var s GistsCreateReqPublic
	s.SetGistsCreateReqPublic1(v)
	return s
}

type GistsCreateReqPublic1 string

const (
	GistsCreateReqPublic1True  GistsCreateReqPublic1 = "true"
	GistsCreateReqPublic1False GistsCreateReqPublic1 = "false"
)

// MarshalText implements encoding.TextMarshaler.
func (s GistsCreateReqPublic1) MarshalText() ([]byte, error) {
	switch s {
	case GistsCreateReqPublic1True:
		return []byte(s), nil
	case GistsCreateReqPublic1False:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GistsCreateReqPublic1) UnmarshalText(data []byte) error {
	switch GistsCreateReqPublic1(data) {
	case GistsCreateReqPublic1True:
		*s = GistsCreateReqPublic1True
		return nil
	case GistsCreateReqPublic1False:
		*s = GistsCreateReqPublic1False
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GistsDeleteCommentForbidden BasicError

func (*GistsDeleteCommentForbidden) gistsDeleteCommentRes() {}

// GistsDeleteCommentNoContent is response for GistsDeleteComment operation.
type GistsDeleteCommentNoContent struct{}

func (*GistsDeleteCommentNoContent) gistsDeleteCommentRes() {}

type GistsDeleteCommentNotFound BasicError

func (*GistsDeleteCommentNotFound) gistsDeleteCommentRes() {}

type GistsDeleteForbidden BasicError

func (*GistsDeleteForbidden) gistsDeleteRes() {}

// GistsDeleteNoContent is response for GistsDelete operation.
type GistsDeleteNoContent struct{}

func (*GistsDeleteNoContent) gistsDeleteRes() {}

type GistsDeleteNotFound BasicError

func (*GistsDeleteNotFound) gistsDeleteRes() {}

type GistsForkForbidden BasicError

func (*GistsForkForbidden) gistsForkRes() {}

type GistsForkNotFound BasicError

func (*GistsForkNotFound) gistsForkRes() {}

type GistsGetRevisionForbidden BasicError

func (*GistsGetRevisionForbidden) gistsGetRevisionRes() {}

type GistsGetRevisionNotFound BasicError

func (*GistsGetRevisionNotFound) gistsGetRevisionRes() {}

type GistsListCommentsForbidden BasicError

func (*GistsListCommentsForbidden) gistsListCommentsRes() {}

type GistsListCommentsNotFound BasicError

func (*GistsListCommentsNotFound) gistsListCommentsRes() {}

// GistsListCommentsOKHeaders wraps []GistComment with response headers.
type GistsListCommentsOKHeaders struct {
	Link     OptString
	Response []GistComment
}

// GetLink returns the value of Link.
func (s *GistsListCommentsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListCommentsOKHeaders) GetResponse() []GistComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListCommentsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListCommentsOKHeaders) SetResponse(val []GistComment) {
	s.Response = val
}

func (*GistsListCommentsOKHeaders) gistsListCommentsRes() {}

type GistsListCommitsForbidden BasicError

func (*GistsListCommitsForbidden) gistsListCommitsRes() {}

type GistsListCommitsNotFound BasicError

func (*GistsListCommitsNotFound) gistsListCommitsRes() {}

// GistsListCommitsOKHeaders wraps []GistCommit with response headers.
type GistsListCommitsOKHeaders struct {
	Link     OptString
	Response []GistCommit
}

// GetLink returns the value of Link.
func (s *GistsListCommitsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListCommitsOKHeaders) GetResponse() []GistCommit {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListCommitsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListCommitsOKHeaders) SetResponse(val []GistCommit) {
	s.Response = val
}

func (*GistsListCommitsOKHeaders) gistsListCommitsRes() {}

// GistsListForUserOKHeaders wraps []BaseGist with response headers.
type GistsListForUserOKHeaders struct {
	Link     OptString
	Response []BaseGist
}

// GetLink returns the value of Link.
func (s *GistsListForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListForUserOKHeaders) GetResponse() []BaseGist {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListForUserOKHeaders) SetResponse(val []BaseGist) {
	s.Response = val
}

func (*GistsListForUserOKHeaders) gistsListForUserRes() {}

type GistsListForksForbidden BasicError

func (*GistsListForksForbidden) gistsListForksRes() {}

type GistsListForksNotFound BasicError

func (*GistsListForksNotFound) gistsListForksRes() {}

// GistsListForksOKHeaders wraps []GistSimple with response headers.
type GistsListForksOKHeaders struct {
	Link     OptString
	Response []GistSimple
}

// GetLink returns the value of Link.
func (s *GistsListForksOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListForksOKHeaders) GetResponse() []GistSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListForksOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListForksOKHeaders) SetResponse(val []GistSimple) {
	s.Response = val
}

func (*GistsListForksOKHeaders) gistsListForksRes() {}

// GistsListOKHeaders wraps []BaseGist with response headers.
type GistsListOKHeaders struct {
	Link     OptString
	Response []BaseGist
}

// GetLink returns the value of Link.
func (s *GistsListOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListOKHeaders) GetResponse() []BaseGist {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListOKHeaders) SetResponse(val []BaseGist) {
	s.Response = val
}

func (*GistsListOKHeaders) gistsListRes() {}

// GistsListPublicOKHeaders wraps []BaseGist with response headers.
type GistsListPublicOKHeaders struct {
	Link     OptString
	Response []BaseGist
}

// GetLink returns the value of Link.
func (s *GistsListPublicOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListPublicOKHeaders) GetResponse() []BaseGist {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListPublicOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListPublicOKHeaders) SetResponse(val []BaseGist) {
	s.Response = val
}

func (*GistsListPublicOKHeaders) gistsListPublicRes() {}

type GistsListStarredForbidden BasicError

func (*GistsListStarredForbidden) gistsListStarredRes() {}

// GistsListStarredOKHeaders wraps []BaseGist with response headers.
type GistsListStarredOKHeaders struct {
	Link     OptString
	Response []BaseGist
}

// GetLink returns the value of Link.
func (s *GistsListStarredOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GistsListStarredOKHeaders) GetResponse() []BaseGist {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GistsListStarredOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GistsListStarredOKHeaders) SetResponse(val []BaseGist) {
	s.Response = val
}

func (*GistsListStarredOKHeaders) gistsListStarredRes() {}

type GistsListStarredUnauthorized BasicError

func (*GistsListStarredUnauthorized) gistsListStarredRes() {}

type GistsStarForbidden BasicError

func (*GistsStarForbidden) gistsStarRes() {}

// GistsStarNoContent is response for GistsStar operation.
type GistsStarNoContent struct{}

func (*GistsStarNoContent) gistsStarRes() {}

type GistsStarNotFound BasicError

func (*GistsStarNotFound) gistsStarRes() {}

type GistsUnstarForbidden BasicError

func (*GistsUnstarForbidden) gistsUnstarRes() {}

// GistsUnstarNoContent is response for GistsUnstar operation.
type GistsUnstarNoContent struct{}

func (*GistsUnstarNoContent) gistsUnstarRes() {}

type GistsUnstarNotFound BasicError

func (*GistsUnstarNotFound) gistsUnstarRes() {}

type GistsUpdateCommentReq struct {
	// The comment text.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *GistsUpdateCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *GistsUpdateCommentReq) SetBody(val string) {
	s.Body = val
}

// Low-level Git commit operations within a repository.
// Ref: #/components/schemas/git-commit
type GitCommit struct {
	// SHA for the commit.
	Sha    string  `json:"sha"`
	NodeID string  `json:"node_id"`
	URL    url.URL `json:"url"`
	// Identifying information for the git-user.
	Author GitCommitAuthor `json:"author"`
	// Identifying information for the git-user.
	Committer GitCommitCommitter `json:"committer"`
	// Message describing the purpose of the commit.
	Message      string                 `json:"message"`
	Tree         GitCommitTree          `json:"tree"`
	Parents      []GitCommitParentsItem `json:"parents"`
	Verification GitCommitVerification  `json:"verification"`
	HTMLURL      url.URL                `json:"html_url"`
}

// GetSha returns the value of Sha.
func (s *GitCommit) GetSha() string {
	return s.Sha
}

// GetNodeID returns the value of NodeID.
func (s *GitCommit) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *GitCommit) GetURL() url.URL {
	return s.URL
}

// GetAuthor returns the value of Author.
func (s *GitCommit) GetAuthor() GitCommitAuthor {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *GitCommit) GetCommitter() GitCommitCommitter {
	return s.Committer
}

// GetMessage returns the value of Message.
func (s *GitCommit) GetMessage() string {
	return s.Message
}

// GetTree returns the value of Tree.
func (s *GitCommit) GetTree() GitCommitTree {
	return s.Tree
}

// GetParents returns the value of Parents.
func (s *GitCommit) GetParents() []GitCommitParentsItem {
	return s.Parents
}

// GetVerification returns the value of Verification.
func (s *GitCommit) GetVerification() GitCommitVerification {
	return s.Verification
}

// GetHTMLURL returns the value of HTMLURL.
func (s *GitCommit) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// SetSha sets the value of Sha.
func (s *GitCommit) SetSha(val string) {
	s.Sha = val
}

// SetNodeID sets the value of NodeID.
func (s *GitCommit) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *GitCommit) SetURL(val url.URL) {
	s.URL = val
}

// SetAuthor sets the value of Author.
func (s *GitCommit) SetAuthor(val GitCommitAuthor) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *GitCommit) SetCommitter(val GitCommitCommitter) {
	s.Committer = val
}

// SetMessage sets the value of Message.
func (s *GitCommit) SetMessage(val string) {
	s.Message = val
}

// SetTree sets the value of Tree.
func (s *GitCommit) SetTree(val GitCommitTree) {
	s.Tree = val
}

// SetParents sets the value of Parents.
func (s *GitCommit) SetParents(val []GitCommitParentsItem) {
	s.Parents = val
}

// SetVerification sets the value of Verification.
func (s *GitCommit) SetVerification(val GitCommitVerification) {
	s.Verification = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *GitCommit) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

func (*GitCommit) gitGetCommitRes() {}

// Identifying information for the git-user.
type GitCommitAuthor struct {
	// Timestamp of the commit.
	Date time.Time `json:"date"`
	// Git email address of the user.
	Email string `json:"email"`
	// Name of the git user.
	Name string `json:"name"`
}

// GetDate returns the value of Date.
func (s *GitCommitAuthor) GetDate() time.Time {
	return s.Date
}

// GetEmail returns the value of Email.
func (s *GitCommitAuthor) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *GitCommitAuthor) GetName() string {
	return s.Name
}

// SetDate sets the value of Date.
func (s *GitCommitAuthor) SetDate(val time.Time) {
	s.Date = val
}

// SetEmail sets the value of Email.
func (s *GitCommitAuthor) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *GitCommitAuthor) SetName(val string) {
	s.Name = val
}

// Identifying information for the git-user.
type GitCommitCommitter struct {
	// Timestamp of the commit.
	Date time.Time `json:"date"`
	// Git email address of the user.
	Email string `json:"email"`
	// Name of the git user.
	Name string `json:"name"`
}

// GetDate returns the value of Date.
func (s *GitCommitCommitter) GetDate() time.Time {
	return s.Date
}

// GetEmail returns the value of Email.
func (s *GitCommitCommitter) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *GitCommitCommitter) GetName() string {
	return s.Name
}

// SetDate sets the value of Date.
func (s *GitCommitCommitter) SetDate(val time.Time) {
	s.Date = val
}

// SetEmail sets the value of Email.
func (s *GitCommitCommitter) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *GitCommitCommitter) SetName(val string) {
	s.Name = val
}

// GitCommitHeaders wraps GitCommit with response headers.
type GitCommitHeaders struct {
	Location OptString
	Response GitCommit
}

// GetLocation returns the value of Location.
func (s *GitCommitHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *GitCommitHeaders) GetResponse() GitCommit {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *GitCommitHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *GitCommitHeaders) SetResponse(val GitCommit) {
	s.Response = val
}

func (*GitCommitHeaders) gitCreateCommitRes() {}

type GitCommitParentsItem struct {
	// SHA for the commit.
	Sha     string  `json:"sha"`
	URL     url.URL `json:"url"`
	HTMLURL url.URL `json:"html_url"`
}

// GetSha returns the value of Sha.
func (s *GitCommitParentsItem) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *GitCommitParentsItem) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *GitCommitParentsItem) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// SetSha sets the value of Sha.
func (s *GitCommitParentsItem) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *GitCommitParentsItem) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *GitCommitParentsItem) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

type GitCommitTree struct {
	// SHA for the commit.
	Sha string  `json:"sha"`
	URL url.URL `json:"url"`
}

// GetSha returns the value of Sha.
func (s *GitCommitTree) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *GitCommitTree) GetURL() url.URL {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *GitCommitTree) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *GitCommitTree) SetURL(val url.URL) {
	s.URL = val
}

type GitCommitVerification struct {
	Verified  bool      `json:"verified"`
	Reason    string    `json:"reason"`
	Signature NilString `json:"signature"`
	Payload   NilString `json:"payload"`
}

// GetVerified returns the value of Verified.
func (s *GitCommitVerification) GetVerified() bool {
	return s.Verified
}

// GetReason returns the value of Reason.
func (s *GitCommitVerification) GetReason() string {
	return s.Reason
}

// GetSignature returns the value of Signature.
func (s *GitCommitVerification) GetSignature() NilString {
	return s.Signature
}

// GetPayload returns the value of Payload.
func (s *GitCommitVerification) GetPayload() NilString {
	return s.Payload
}

// SetVerified sets the value of Verified.
func (s *GitCommitVerification) SetVerified(val bool) {
	s.Verified = val
}

// SetReason sets the value of Reason.
func (s *GitCommitVerification) SetReason(val string) {
	s.Reason = val
}

// SetSignature sets the value of Signature.
func (s *GitCommitVerification) SetSignature(val NilString) {
	s.Signature = val
}

// SetPayload sets the value of Payload.
func (s *GitCommitVerification) SetPayload(val NilString) {
	s.Payload = val
}

type GitCreateBlobConflict BasicError

func (*GitCreateBlobConflict) gitCreateBlobRes() {}

type GitCreateBlobForbidden BasicError

func (*GitCreateBlobForbidden) gitCreateBlobRes() {}

type GitCreateBlobNotFound BasicError

func (*GitCreateBlobNotFound) gitCreateBlobRes() {}

type GitCreateBlobReq struct {
	// The new blob's content.
	Content string `json:"content"`
	// The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
	Encoding OptString `json:"encoding"`
}

// GetContent returns the value of Content.
func (s *GitCreateBlobReq) GetContent() string {
	return s.Content
}

// GetEncoding returns the value of Encoding.
func (s *GitCreateBlobReq) GetEncoding() OptString {
	return s.Encoding
}

// SetContent sets the value of Content.
func (s *GitCreateBlobReq) SetContent(val string) {
	s.Content = val
}

// SetEncoding sets the value of Encoding.
func (s *GitCreateBlobReq) SetEncoding(val OptString) {
	s.Encoding = val
}

type GitCreateCommitReq struct {
	// The commit message.
	Message string `json:"message"`
	// The SHA of the tree object this commit points to.
	Tree string `json:"tree"`
	// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will
	// be written as a root commit. For a single parent, an array of one SHA should be provided; for a
	// merge commit, an array of more than one should be provided.
	Parents []string `json:"parents"`
	// Information about the author of the commit. By default, the `author` will be the authenticated
	// user and the current date. See the `author` and `committer` object below for details.
	Author OptGitCreateCommitReqAuthor `json:"author"`
	// Information about the person who is making the commit. By default, `committer` will use the
	// information set in `author`. See the `author` and `committer` object below for details.
	Committer OptGitCreateCommitReqCommitter `json:"committer"`
	// The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds
	// the signature to the `gpgsig` header of the created commit. For a commit signature to be
	// verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string
	// commit as it would be written to the object database. To pass a `signature` parameter, you need to
	// first manually create a valid PGP signature, which can be complicated. You may find it easier to
	// [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create
	// signed commits.
	Signature OptString `json:"signature"`
}

// GetMessage returns the value of Message.
func (s *GitCreateCommitReq) GetMessage() string {
	return s.Message
}

// GetTree returns the value of Tree.
func (s *GitCreateCommitReq) GetTree() string {
	return s.Tree
}

// GetParents returns the value of Parents.
func (s *GitCreateCommitReq) GetParents() []string {
	return s.Parents
}

// GetAuthor returns the value of Author.
func (s *GitCreateCommitReq) GetAuthor() OptGitCreateCommitReqAuthor {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *GitCreateCommitReq) GetCommitter() OptGitCreateCommitReqCommitter {
	return s.Committer
}

// GetSignature returns the value of Signature.
func (s *GitCreateCommitReq) GetSignature() OptString {
	return s.Signature
}

// SetMessage sets the value of Message.
func (s *GitCreateCommitReq) SetMessage(val string) {
	s.Message = val
}

// SetTree sets the value of Tree.
func (s *GitCreateCommitReq) SetTree(val string) {
	s.Tree = val
}

// SetParents sets the value of Parents.
func (s *GitCreateCommitReq) SetParents(val []string) {
	s.Parents = val
}

// SetAuthor sets the value of Author.
func (s *GitCreateCommitReq) SetAuthor(val OptGitCreateCommitReqAuthor) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *GitCreateCommitReq) SetCommitter(val OptGitCreateCommitReqCommitter) {
	s.Committer = val
}

// SetSignature sets the value of Signature.
func (s *GitCreateCommitReq) SetSignature(val OptString) {
	s.Signature = val
}

// Information about the author of the commit. By default, the `author` will be the authenticated
// user and the current date. See the `author` and `committer` object below for details.
type GitCreateCommitReqAuthor struct {
	// The name of the author (or committer) of the commit.
	Name string `json:"name"`
	// The email of the author (or committer) of the commit.
	Email string `json:"email"`
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date OptDateTime `json:"date"`
}

// GetName returns the value of Name.
func (s *GitCreateCommitReqAuthor) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *GitCreateCommitReqAuthor) GetEmail() string {
	return s.Email
}

// GetDate returns the value of Date.
func (s *GitCreateCommitReqAuthor) GetDate() OptDateTime {
	return s.Date
}

// SetName sets the value of Name.
func (s *GitCreateCommitReqAuthor) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *GitCreateCommitReqAuthor) SetEmail(val string) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *GitCreateCommitReqAuthor) SetDate(val OptDateTime) {
	s.Date = val
}

// Information about the person who is making the commit. By default, `committer` will use the
// information set in `author`. See the `author` and `committer` object below for details.
type GitCreateCommitReqCommitter struct {
	// The name of the author (or committer) of the commit.
	Name OptString `json:"name"`
	// The email of the author (or committer) of the commit.
	Email OptString `json:"email"`
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO
	// 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date OptDateTime `json:"date"`
}

// GetName returns the value of Name.
func (s *GitCreateCommitReqCommitter) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *GitCreateCommitReqCommitter) GetEmail() OptString {
	return s.Email
}

// GetDate returns the value of Date.
func (s *GitCreateCommitReqCommitter) GetDate() OptDateTime {
	return s.Date
}

// SetName sets the value of Name.
func (s *GitCreateCommitReqCommitter) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *GitCreateCommitReqCommitter) SetEmail(val OptString) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *GitCreateCommitReqCommitter) SetDate(val OptDateTime) {
	s.Date = val
}

type GitCreateRefReq struct {
	// The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with
	// 'refs' and have at least two slashes, it will be rejected.
	Ref string `json:"ref"`
	// The SHA1 value for this reference.
	Sha string    `json:"sha"`
	Key OptString `json:"key"`
}

// GetRef returns the value of Ref.
func (s *GitCreateRefReq) GetRef() string {
	return s.Ref
}

// GetSha returns the value of Sha.
func (s *GitCreateRefReq) GetSha() string {
	return s.Sha
}

// GetKey returns the value of Key.
func (s *GitCreateRefReq) GetKey() OptString {
	return s.Key
}

// SetRef sets the value of Ref.
func (s *GitCreateRefReq) SetRef(val string) {
	s.Ref = val
}

// SetSha sets the value of Sha.
func (s *GitCreateRefReq) SetSha(val string) {
	s.Sha = val
}

// SetKey sets the value of Key.
func (s *GitCreateRefReq) SetKey(val OptString) {
	s.Key = val
}

type GitCreateTagReq struct {
	// The tag's name. This is typically a version (e.g., "v0.0.1").
	Tag string `json:"tag"`
	// The tag message.
	Message string `json:"message"`
	// The SHA of the git object this is tagging.
	Object string `json:"object"`
	// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a
	// `blob`.
	Type GitCreateTagReqType `json:"type"`
	// An object with information about the individual creating the tag.
	Tagger OptGitCreateTagReqTagger `json:"tagger"`
}

// GetTag returns the value of Tag.
func (s *GitCreateTagReq) GetTag() string {
	return s.Tag
}

// GetMessage returns the value of Message.
func (s *GitCreateTagReq) GetMessage() string {
	return s.Message
}

// GetObject returns the value of Object.
func (s *GitCreateTagReq) GetObject() string {
	return s.Object
}

// GetType returns the value of Type.
func (s *GitCreateTagReq) GetType() GitCreateTagReqType {
	return s.Type
}

// GetTagger returns the value of Tagger.
func (s *GitCreateTagReq) GetTagger() OptGitCreateTagReqTagger {
	return s.Tagger
}

// SetTag sets the value of Tag.
func (s *GitCreateTagReq) SetTag(val string) {
	s.Tag = val
}

// SetMessage sets the value of Message.
func (s *GitCreateTagReq) SetMessage(val string) {
	s.Message = val
}

// SetObject sets the value of Object.
func (s *GitCreateTagReq) SetObject(val string) {
	s.Object = val
}

// SetType sets the value of Type.
func (s *GitCreateTagReq) SetType(val GitCreateTagReqType) {
	s.Type = val
}

// SetTagger sets the value of Tagger.
func (s *GitCreateTagReq) SetTagger(val OptGitCreateTagReqTagger) {
	s.Tagger = val
}

// An object with information about the individual creating the tag.
type GitCreateTagReqTagger struct {
	// The name of the author of the tag.
	Name string `json:"name"`
	// The email of the author of the tag.
	Email string `json:"email"`
	// When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.
	// org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date OptDateTime `json:"date"`
}

// GetName returns the value of Name.
func (s *GitCreateTagReqTagger) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *GitCreateTagReqTagger) GetEmail() string {
	return s.Email
}

// GetDate returns the value of Date.
func (s *GitCreateTagReqTagger) GetDate() OptDateTime {
	return s.Date
}

// SetName sets the value of Name.
func (s *GitCreateTagReqTagger) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *GitCreateTagReqTagger) SetEmail(val string) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *GitCreateTagReqTagger) SetDate(val OptDateTime) {
	s.Date = val
}

// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a
// `blob`.
type GitCreateTagReqType string

const (
	GitCreateTagReqTypeCommit GitCreateTagReqType = "commit"
	GitCreateTagReqTypeTree   GitCreateTagReqType = "tree"
	GitCreateTagReqTypeBlob   GitCreateTagReqType = "blob"
)

// MarshalText implements encoding.TextMarshaler.
func (s GitCreateTagReqType) MarshalText() ([]byte, error) {
	switch s {
	case GitCreateTagReqTypeCommit:
		return []byte(s), nil
	case GitCreateTagReqTypeTree:
		return []byte(s), nil
	case GitCreateTagReqTypeBlob:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GitCreateTagReqType) UnmarshalText(data []byte) error {
	switch GitCreateTagReqType(data) {
	case GitCreateTagReqTypeCommit:
		*s = GitCreateTagReqTypeCommit
		return nil
	case GitCreateTagReqTypeTree:
		*s = GitCreateTagReqTypeTree
		return nil
	case GitCreateTagReqTypeBlob:
		*s = GitCreateTagReqTypeBlob
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GitCreateTreeForbidden BasicError

func (*GitCreateTreeForbidden) gitCreateTreeRes() {}

type GitCreateTreeNotFound BasicError

func (*GitCreateTreeNotFound) gitCreateTreeRes() {}

type GitCreateTreeReq struct {
	// Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
	Tree []GitCreateTreeReqTreeItem `json:"tree"`
	// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If
	// provided, a new Git tree object will be created from entries in the Git tree object pointed to by
	// `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter
	// will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a
	// branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current
	// latest commit on the branch you're working on.
	// If not provided, GitHub will create a new Git tree object from only the entries defined in the
	// `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a
	// part of the parent commit's tree and were not defined in the `tree` parameter will be listed as
	// deleted by the new commit.
	BaseTree OptString `json:"base_tree"`
}

// GetTree returns the value of Tree.
func (s *GitCreateTreeReq) GetTree() []GitCreateTreeReqTreeItem {
	return s.Tree
}

// GetBaseTree returns the value of BaseTree.
func (s *GitCreateTreeReq) GetBaseTree() OptString {
	return s.BaseTree
}

// SetTree sets the value of Tree.
func (s *GitCreateTreeReq) SetTree(val []GitCreateTreeReqTreeItem) {
	s.Tree = val
}

// SetBaseTree sets the value of BaseTree.
func (s *GitCreateTreeReq) SetBaseTree(val OptString) {
	s.BaseTree = val
}

type GitCreateTreeReqTreeItem struct {
	// The file referenced in the tree.
	Path OptString `json:"path"`
	// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for
	// subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the
	// path of a symlink.
	Mode OptGitCreateTreeReqTreeItemMode `json:"mode"`
	// Either `blob`, `tree`, or `commit`.
	Type OptGitCreateTreeReqTreeItemType `json:"type"`
	// The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null`
	// then the file will be deleted.
	// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both
	// `tree.sha` and `content` will return an error.
	Sha OptNilString `json:"sha"`
	// The content you want this file to have. GitHub will write this blob out and use that SHA for this
	// entry. Use either this, or `tree.sha`.
	// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both
	// `tree.sha` and `content` will return an error.
	Content OptString `json:"content"`
}

// GetPath returns the value of Path.
func (s *GitCreateTreeReqTreeItem) GetPath() OptString {
	return s.Path
}

// GetMode returns the value of Mode.
func (s *GitCreateTreeReqTreeItem) GetMode() OptGitCreateTreeReqTreeItemMode {
	return s.Mode
}

// GetType returns the value of Type.
func (s *GitCreateTreeReqTreeItem) GetType() OptGitCreateTreeReqTreeItemType {
	return s.Type
}

// GetSha returns the value of Sha.
func (s *GitCreateTreeReqTreeItem) GetSha() OptNilString {
	return s.Sha
}

// GetContent returns the value of Content.
func (s *GitCreateTreeReqTreeItem) GetContent() OptString {
	return s.Content
}

// SetPath sets the value of Path.
func (s *GitCreateTreeReqTreeItem) SetPath(val OptString) {
	s.Path = val
}

// SetMode sets the value of Mode.
func (s *GitCreateTreeReqTreeItem) SetMode(val OptGitCreateTreeReqTreeItemMode) {
	s.Mode = val
}

// SetType sets the value of Type.
func (s *GitCreateTreeReqTreeItem) SetType(val OptGitCreateTreeReqTreeItemType) {
	s.Type = val
}

// SetSha sets the value of Sha.
func (s *GitCreateTreeReqTreeItem) SetSha(val OptNilString) {
	s.Sha = val
}

// SetContent sets the value of Content.
func (s *GitCreateTreeReqTreeItem) SetContent(val OptString) {
	s.Content = val
}

// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for
// subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the
// path of a symlink.
type GitCreateTreeReqTreeItemMode string

const (
	GitCreateTreeReqTreeItemMode100644 GitCreateTreeReqTreeItemMode = "100644"
	GitCreateTreeReqTreeItemMode100755 GitCreateTreeReqTreeItemMode = "100755"
	GitCreateTreeReqTreeItemMode040000 GitCreateTreeReqTreeItemMode = "040000"
	GitCreateTreeReqTreeItemMode160000 GitCreateTreeReqTreeItemMode = "160000"
	GitCreateTreeReqTreeItemMode120000 GitCreateTreeReqTreeItemMode = "120000"
)

// MarshalText implements encoding.TextMarshaler.
func (s GitCreateTreeReqTreeItemMode) MarshalText() ([]byte, error) {
	switch s {
	case GitCreateTreeReqTreeItemMode100644:
		return []byte(s), nil
	case GitCreateTreeReqTreeItemMode100755:
		return []byte(s), nil
	case GitCreateTreeReqTreeItemMode040000:
		return []byte(s), nil
	case GitCreateTreeReqTreeItemMode160000:
		return []byte(s), nil
	case GitCreateTreeReqTreeItemMode120000:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GitCreateTreeReqTreeItemMode) UnmarshalText(data []byte) error {
	switch GitCreateTreeReqTreeItemMode(data) {
	case GitCreateTreeReqTreeItemMode100644:
		*s = GitCreateTreeReqTreeItemMode100644
		return nil
	case GitCreateTreeReqTreeItemMode100755:
		*s = GitCreateTreeReqTreeItemMode100755
		return nil
	case GitCreateTreeReqTreeItemMode040000:
		*s = GitCreateTreeReqTreeItemMode040000
		return nil
	case GitCreateTreeReqTreeItemMode160000:
		*s = GitCreateTreeReqTreeItemMode160000
		return nil
	case GitCreateTreeReqTreeItemMode120000:
		*s = GitCreateTreeReqTreeItemMode120000
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Either `blob`, `tree`, or `commit`.
type GitCreateTreeReqTreeItemType string

const (
	GitCreateTreeReqTreeItemTypeBlob   GitCreateTreeReqTreeItemType = "blob"
	GitCreateTreeReqTreeItemTypeTree   GitCreateTreeReqTreeItemType = "tree"
	GitCreateTreeReqTreeItemTypeCommit GitCreateTreeReqTreeItemType = "commit"
)

// MarshalText implements encoding.TextMarshaler.
func (s GitCreateTreeReqTreeItemType) MarshalText() ([]byte, error) {
	switch s {
	case GitCreateTreeReqTreeItemTypeBlob:
		return []byte(s), nil
	case GitCreateTreeReqTreeItemTypeTree:
		return []byte(s), nil
	case GitCreateTreeReqTreeItemTypeCommit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GitCreateTreeReqTreeItemType) UnmarshalText(data []byte) error {
	switch GitCreateTreeReqTreeItemType(data) {
	case GitCreateTreeReqTreeItemTypeBlob:
		*s = GitCreateTreeReqTreeItemTypeBlob
		return nil
	case GitCreateTreeReqTreeItemTypeTree:
		*s = GitCreateTreeReqTreeItemTypeTree
		return nil
	case GitCreateTreeReqTreeItemTypeCommit:
		*s = GitCreateTreeReqTreeItemTypeCommit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GitDeleteRefNoContent is response for GitDeleteRef operation.
type GitDeleteRefNoContent struct{}

func (*GitDeleteRefNoContent) gitDeleteRefRes() {}

type GitGetBlobForbidden BasicError

func (*GitGetBlobForbidden) gitGetBlobRes() {}

type GitGetBlobNotFound BasicError

func (*GitGetBlobNotFound) gitGetBlobRes() {}

// GitListMatchingRefsOKHeaders wraps []GitRef with response headers.
type GitListMatchingRefsOKHeaders struct {
	Link     OptString
	Response []GitRef
}

// GetLink returns the value of Link.
func (s *GitListMatchingRefsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GitListMatchingRefsOKHeaders) GetResponse() []GitRef {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GitListMatchingRefsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GitListMatchingRefsOKHeaders) SetResponse(val []GitRef) {
	s.Response = val
}

// Git references within a repository.
// Ref: #/components/schemas/git-ref
type GitRef struct {
	Ref    string       `json:"ref"`
	NodeID string       `json:"node_id"`
	URL    url.URL      `json:"url"`
	Object GitRefObject `json:"object"`
}

// GetRef returns the value of Ref.
func (s *GitRef) GetRef() string {
	return s.Ref
}

// GetNodeID returns the value of NodeID.
func (s *GitRef) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *GitRef) GetURL() url.URL {
	return s.URL
}

// GetObject returns the value of Object.
func (s *GitRef) GetObject() GitRefObject {
	return s.Object
}

// SetRef sets the value of Ref.
func (s *GitRef) SetRef(val string) {
	s.Ref = val
}

// SetNodeID sets the value of NodeID.
func (s *GitRef) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *GitRef) SetURL(val url.URL) {
	s.URL = val
}

// SetObject sets the value of Object.
func (s *GitRef) SetObject(val GitRefObject) {
	s.Object = val
}

func (*GitRef) gitGetRefRes()    {}
func (*GitRef) gitUpdateRefRes() {}

// GitRefHeaders wraps GitRef with response headers.
type GitRefHeaders struct {
	Location OptString
	Response GitRef
}

// GetLocation returns the value of Location.
func (s *GitRefHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *GitRefHeaders) GetResponse() GitRef {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *GitRefHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *GitRefHeaders) SetResponse(val GitRef) {
	s.Response = val
}

func (*GitRefHeaders) gitCreateRefRes() {}

type GitRefObject struct {
	Type string `json:"type"`
	// SHA for the reference.
	Sha string  `json:"sha"`
	URL url.URL `json:"url"`
}

// GetType returns the value of Type.
func (s *GitRefObject) GetType() string {
	return s.Type
}

// GetSha returns the value of Sha.
func (s *GitRefObject) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *GitRefObject) GetURL() url.URL {
	return s.URL
}

// SetType sets the value of Type.
func (s *GitRefObject) SetType(val string) {
	s.Type = val
}

// SetSha sets the value of Sha.
func (s *GitRefObject) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *GitRefObject) SetURL(val url.URL) {
	s.URL = val
}

// Metadata for a Git tag.
// Ref: #/components/schemas/git-tag
type GitTag struct {
	NodeID string `json:"node_id"`
	// Name of the tag.
	Tag string `json:"tag"`
	Sha string `json:"sha"`
	// URL for the tag.
	URL url.URL `json:"url"`
	// Message describing the purpose of the tag.
	Message      string          `json:"message"`
	Tagger       GitTagTagger    `json:"tagger"`
	Object       GitTagObject    `json:"object"`
	Verification OptVerification `json:"verification"`
}

// GetNodeID returns the value of NodeID.
func (s *GitTag) GetNodeID() string {
	return s.NodeID
}

// GetTag returns the value of Tag.
func (s *GitTag) GetTag() string {
	return s.Tag
}

// GetSha returns the value of Sha.
func (s *GitTag) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *GitTag) GetURL() url.URL {
	return s.URL
}

// GetMessage returns the value of Message.
func (s *GitTag) GetMessage() string {
	return s.Message
}

// GetTagger returns the value of Tagger.
func (s *GitTag) GetTagger() GitTagTagger {
	return s.Tagger
}

// GetObject returns the value of Object.
func (s *GitTag) GetObject() GitTagObject {
	return s.Object
}

// GetVerification returns the value of Verification.
func (s *GitTag) GetVerification() OptVerification {
	return s.Verification
}

// SetNodeID sets the value of NodeID.
func (s *GitTag) SetNodeID(val string) {
	s.NodeID = val
}

// SetTag sets the value of Tag.
func (s *GitTag) SetTag(val string) {
	s.Tag = val
}

// SetSha sets the value of Sha.
func (s *GitTag) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *GitTag) SetURL(val url.URL) {
	s.URL = val
}

// SetMessage sets the value of Message.
func (s *GitTag) SetMessage(val string) {
	s.Message = val
}

// SetTagger sets the value of Tagger.
func (s *GitTag) SetTagger(val GitTagTagger) {
	s.Tagger = val
}

// SetObject sets the value of Object.
func (s *GitTag) SetObject(val GitTagObject) {
	s.Object = val
}

// SetVerification sets the value of Verification.
func (s *GitTag) SetVerification(val OptVerification) {
	s.Verification = val
}

func (*GitTag) gitGetTagRes() {}

// GitTagHeaders wraps GitTag with response headers.
type GitTagHeaders struct {
	Location OptString
	Response GitTag
}

// GetLocation returns the value of Location.
func (s *GitTagHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *GitTagHeaders) GetResponse() GitTag {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *GitTagHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *GitTagHeaders) SetResponse(val GitTag) {
	s.Response = val
}

func (*GitTagHeaders) gitCreateTagRes() {}

type GitTagObject struct {
	Sha  string  `json:"sha"`
	Type string  `json:"type"`
	URL  url.URL `json:"url"`
}

// GetSha returns the value of Sha.
func (s *GitTagObject) GetSha() string {
	return s.Sha
}

// GetType returns the value of Type.
func (s *GitTagObject) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *GitTagObject) GetURL() url.URL {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *GitTagObject) SetSha(val string) {
	s.Sha = val
}

// SetType sets the value of Type.
func (s *GitTagObject) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *GitTagObject) SetURL(val url.URL) {
	s.URL = val
}

type GitTagTagger struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

// GetDate returns the value of Date.
func (s *GitTagTagger) GetDate() string {
	return s.Date
}

// GetEmail returns the value of Email.
func (s *GitTagTagger) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *GitTagTagger) GetName() string {
	return s.Name
}

// SetDate sets the value of Date.
func (s *GitTagTagger) SetDate(val string) {
	s.Date = val
}

// SetEmail sets the value of Email.
func (s *GitTagTagger) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *GitTagTagger) SetName(val string) {
	s.Name = val
}

// The hierarchy between files in a Git repository.
// Ref: #/components/schemas/git-tree
type GitTree struct {
	Sha       string  `json:"sha"`
	URL       url.URL `json:"url"`
	Truncated bool    `json:"truncated"`
	// Objects specifying a tree structure.
	Tree []GitTreeTreeItem `json:"tree"`
}

// GetSha returns the value of Sha.
func (s *GitTree) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *GitTree) GetURL() url.URL {
	return s.URL
}

// GetTruncated returns the value of Truncated.
func (s *GitTree) GetTruncated() bool {
	return s.Truncated
}

// GetTree returns the value of Tree.
func (s *GitTree) GetTree() []GitTreeTreeItem {
	return s.Tree
}

// SetSha sets the value of Sha.
func (s *GitTree) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *GitTree) SetURL(val url.URL) {
	s.URL = val
}

// SetTruncated sets the value of Truncated.
func (s *GitTree) SetTruncated(val bool) {
	s.Truncated = val
}

// SetTree sets the value of Tree.
func (s *GitTree) SetTree(val []GitTreeTreeItem) {
	s.Tree = val
}

func (*GitTree) gitGetTreeRes() {}

// GitTreeHeaders wraps GitTree with response headers.
type GitTreeHeaders struct {
	Location OptString
	Response GitTree
}

// GetLocation returns the value of Location.
func (s *GitTreeHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *GitTreeHeaders) GetResponse() GitTree {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *GitTreeHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *GitTreeHeaders) SetResponse(val GitTree) {
	s.Response = val
}

func (*GitTreeHeaders) gitCreateTreeRes() {}

type GitTreeTreeItem struct {
	Path OptString `json:"path"`
	Mode OptString `json:"mode"`
	Type OptString `json:"type"`
	Sha  OptString `json:"sha"`
	Size OptInt    `json:"size"`
	URL  OptString `json:"url"`
}

// GetPath returns the value of Path.
func (s *GitTreeTreeItem) GetPath() OptString {
	return s.Path
}

// GetMode returns the value of Mode.
func (s *GitTreeTreeItem) GetMode() OptString {
	return s.Mode
}

// GetType returns the value of Type.
func (s *GitTreeTreeItem) GetType() OptString {
	return s.Type
}

// GetSha returns the value of Sha.
func (s *GitTreeTreeItem) GetSha() OptString {
	return s.Sha
}

// GetSize returns the value of Size.
func (s *GitTreeTreeItem) GetSize() OptInt {
	return s.Size
}

// GetURL returns the value of URL.
func (s *GitTreeTreeItem) GetURL() OptString {
	return s.URL
}

// SetPath sets the value of Path.
func (s *GitTreeTreeItem) SetPath(val OptString) {
	s.Path = val
}

// SetMode sets the value of Mode.
func (s *GitTreeTreeItem) SetMode(val OptString) {
	s.Mode = val
}

// SetType sets the value of Type.
func (s *GitTreeTreeItem) SetType(val OptString) {
	s.Type = val
}

// SetSha sets the value of Sha.
func (s *GitTreeTreeItem) SetSha(val OptString) {
	s.Sha = val
}

// SetSize sets the value of Size.
func (s *GitTreeTreeItem) SetSize(val OptInt) {
	s.Size = val
}

// SetURL sets the value of URL.
func (s *GitTreeTreeItem) SetURL(val OptString) {
	s.URL = val
}

type GitUpdateRefReq struct {
	// The SHA1 value to set this reference to.
	Sha string `json:"sha"`
	// Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving
	// this out or setting it to `false` will make sure you're not overwriting work.
	Force OptBool `json:"force"`
}

// GetSha returns the value of Sha.
func (s *GitUpdateRefReq) GetSha() string {
	return s.Sha
}

// GetForce returns the value of Force.
func (s *GitUpdateRefReq) GetForce() OptBool {
	return s.Force
}

// SetSha sets the value of Sha.
func (s *GitUpdateRefReq) SetSha(val string) {
	s.Sha = val
}

// SetForce sets the value of Force.
func (s *GitUpdateRefReq) SetForce(val OptBool) {
	s.Force = val
}

type GitignoreGetAllTemplatesOKApplicationJSON []string

func (*GitignoreGetAllTemplatesOKApplicationJSON) gitignoreGetAllTemplatesRes() {}

// Gitignore Template.
// Ref: #/components/schemas/gitignore-template
type GitignoreTemplate struct {
	Name   string `json:"name"`
	Source string `json:"source"`
}

// GetName returns the value of Name.
func (s *GitignoreTemplate) GetName() string {
	return s.Name
}

// GetSource returns the value of Source.
func (s *GitignoreTemplate) GetSource() string {
	return s.Source
}

// SetName sets the value of Name.
func (s *GitignoreTemplate) SetName(val string) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *GitignoreTemplate) SetSource(val string) {
	s.Source = val
}

func (*GitignoreTemplate) gitignoreGetTemplateRes() {}

// A unique encryption key.
// Ref: #/components/schemas/gpg-key
type GpgKey struct {
	ID                int                 `json:"id"`
	PrimaryKeyID      NilInt              `json:"primary_key_id"`
	KeyID             string              `json:"key_id"`
	PublicKey         string              `json:"public_key"`
	Emails            []GpgKeyEmailsItem  `json:"emails"`
	Subkeys           []GpgKeySubkeysItem `json:"subkeys"`
	CanSign           bool                `json:"can_sign"`
	CanEncryptComms   bool                `json:"can_encrypt_comms"`
	CanEncryptStorage bool                `json:"can_encrypt_storage"`
	CanCertify        bool                `json:"can_certify"`
	CreatedAt         time.Time           `json:"created_at"`
	ExpiresAt         NilDateTime         `json:"expires_at"`
	RawKey            NilString           `json:"raw_key"`
}

// GetID returns the value of ID.
func (s *GpgKey) GetID() int {
	return s.ID
}

// GetPrimaryKeyID returns the value of PrimaryKeyID.
func (s *GpgKey) GetPrimaryKeyID() NilInt {
	return s.PrimaryKeyID
}

// GetKeyID returns the value of KeyID.
func (s *GpgKey) GetKeyID() string {
	return s.KeyID
}

// GetPublicKey returns the value of PublicKey.
func (s *GpgKey) GetPublicKey() string {
	return s.PublicKey
}

// GetEmails returns the value of Emails.
func (s *GpgKey) GetEmails() []GpgKeyEmailsItem {
	return s.Emails
}

// GetSubkeys returns the value of Subkeys.
func (s *GpgKey) GetSubkeys() []GpgKeySubkeysItem {
	return s.Subkeys
}

// GetCanSign returns the value of CanSign.
func (s *GpgKey) GetCanSign() bool {
	return s.CanSign
}

// GetCanEncryptComms returns the value of CanEncryptComms.
func (s *GpgKey) GetCanEncryptComms() bool {
	return s.CanEncryptComms
}

// GetCanEncryptStorage returns the value of CanEncryptStorage.
func (s *GpgKey) GetCanEncryptStorage() bool {
	return s.CanEncryptStorage
}

// GetCanCertify returns the value of CanCertify.
func (s *GpgKey) GetCanCertify() bool {
	return s.CanCertify
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GpgKey) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *GpgKey) GetExpiresAt() NilDateTime {
	return s.ExpiresAt
}

// GetRawKey returns the value of RawKey.
func (s *GpgKey) GetRawKey() NilString {
	return s.RawKey
}

// SetID sets the value of ID.
func (s *GpgKey) SetID(val int) {
	s.ID = val
}

// SetPrimaryKeyID sets the value of PrimaryKeyID.
func (s *GpgKey) SetPrimaryKeyID(val NilInt) {
	s.PrimaryKeyID = val
}

// SetKeyID sets the value of KeyID.
func (s *GpgKey) SetKeyID(val string) {
	s.KeyID = val
}

// SetPublicKey sets the value of PublicKey.
func (s *GpgKey) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetEmails sets the value of Emails.
func (s *GpgKey) SetEmails(val []GpgKeyEmailsItem) {
	s.Emails = val
}

// SetSubkeys sets the value of Subkeys.
func (s *GpgKey) SetSubkeys(val []GpgKeySubkeysItem) {
	s.Subkeys = val
}

// SetCanSign sets the value of CanSign.
func (s *GpgKey) SetCanSign(val bool) {
	s.CanSign = val
}

// SetCanEncryptComms sets the value of CanEncryptComms.
func (s *GpgKey) SetCanEncryptComms(val bool) {
	s.CanEncryptComms = val
}

// SetCanEncryptStorage sets the value of CanEncryptStorage.
func (s *GpgKey) SetCanEncryptStorage(val bool) {
	s.CanEncryptStorage = val
}

// SetCanCertify sets the value of CanCertify.
func (s *GpgKey) SetCanCertify(val bool) {
	s.CanCertify = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GpgKey) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *GpgKey) SetExpiresAt(val NilDateTime) {
	s.ExpiresAt = val
}

// SetRawKey sets the value of RawKey.
func (s *GpgKey) SetRawKey(val NilString) {
	s.RawKey = val
}

func (*GpgKey) usersCreateGpgKeyForAuthenticatedRes() {}
func (*GpgKey) usersGetGpgKeyForAuthenticatedRes()    {}

type GpgKeyEmailsItem struct {
	Email    OptString `json:"email"`
	Verified OptBool   `json:"verified"`
}

// GetEmail returns the value of Email.
func (s *GpgKeyEmailsItem) GetEmail() OptString {
	return s.Email
}

// GetVerified returns the value of Verified.
func (s *GpgKeyEmailsItem) GetVerified() OptBool {
	return s.Verified
}

// SetEmail sets the value of Email.
func (s *GpgKeyEmailsItem) SetEmail(val OptString) {
	s.Email = val
}

// SetVerified sets the value of Verified.
func (s *GpgKeyEmailsItem) SetVerified(val OptBool) {
	s.Verified = val
}

type GpgKeySubkeysItem struct {
	ID                OptInt       `json:"id"`
	PrimaryKeyID      OptInt       `json:"primary_key_id"`
	KeyID             OptString    `json:"key_id"`
	PublicKey         OptString    `json:"public_key"`
	Emails            []jx.Raw     `json:"emails"`
	Subkeys           []jx.Raw     `json:"subkeys"`
	CanSign           OptBool      `json:"can_sign"`
	CanEncryptComms   OptBool      `json:"can_encrypt_comms"`
	CanEncryptStorage OptBool      `json:"can_encrypt_storage"`
	CanCertify        OptBool      `json:"can_certify"`
	CreatedAt         OptString    `json:"created_at"`
	ExpiresAt         OptNilString `json:"expires_at"`
	RawKey            OptNilString `json:"raw_key"`
}

// GetID returns the value of ID.
func (s *GpgKeySubkeysItem) GetID() OptInt {
	return s.ID
}

// GetPrimaryKeyID returns the value of PrimaryKeyID.
func (s *GpgKeySubkeysItem) GetPrimaryKeyID() OptInt {
	return s.PrimaryKeyID
}

// GetKeyID returns the value of KeyID.
func (s *GpgKeySubkeysItem) GetKeyID() OptString {
	return s.KeyID
}

// GetPublicKey returns the value of PublicKey.
func (s *GpgKeySubkeysItem) GetPublicKey() OptString {
	return s.PublicKey
}

// GetEmails returns the value of Emails.
func (s *GpgKeySubkeysItem) GetEmails() []jx.Raw {
	return s.Emails
}

// GetSubkeys returns the value of Subkeys.
func (s *GpgKeySubkeysItem) GetSubkeys() []jx.Raw {
	return s.Subkeys
}

// GetCanSign returns the value of CanSign.
func (s *GpgKeySubkeysItem) GetCanSign() OptBool {
	return s.CanSign
}

// GetCanEncryptComms returns the value of CanEncryptComms.
func (s *GpgKeySubkeysItem) GetCanEncryptComms() OptBool {
	return s.CanEncryptComms
}

// GetCanEncryptStorage returns the value of CanEncryptStorage.
func (s *GpgKeySubkeysItem) GetCanEncryptStorage() OptBool {
	return s.CanEncryptStorage
}

// GetCanCertify returns the value of CanCertify.
func (s *GpgKeySubkeysItem) GetCanCertify() OptBool {
	return s.CanCertify
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GpgKeySubkeysItem) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *GpgKeySubkeysItem) GetExpiresAt() OptNilString {
	return s.ExpiresAt
}

// GetRawKey returns the value of RawKey.
func (s *GpgKeySubkeysItem) GetRawKey() OptNilString {
	return s.RawKey
}

// SetID sets the value of ID.
func (s *GpgKeySubkeysItem) SetID(val OptInt) {
	s.ID = val
}

// SetPrimaryKeyID sets the value of PrimaryKeyID.
func (s *GpgKeySubkeysItem) SetPrimaryKeyID(val OptInt) {
	s.PrimaryKeyID = val
}

// SetKeyID sets the value of KeyID.
func (s *GpgKeySubkeysItem) SetKeyID(val OptString) {
	s.KeyID = val
}

// SetPublicKey sets the value of PublicKey.
func (s *GpgKeySubkeysItem) SetPublicKey(val OptString) {
	s.PublicKey = val
}

// SetEmails sets the value of Emails.
func (s *GpgKeySubkeysItem) SetEmails(val []jx.Raw) {
	s.Emails = val
}

// SetSubkeys sets the value of Subkeys.
func (s *GpgKeySubkeysItem) SetSubkeys(val []jx.Raw) {
	s.Subkeys = val
}

// SetCanSign sets the value of CanSign.
func (s *GpgKeySubkeysItem) SetCanSign(val OptBool) {
	s.CanSign = val
}

// SetCanEncryptComms sets the value of CanEncryptComms.
func (s *GpgKeySubkeysItem) SetCanEncryptComms(val OptBool) {
	s.CanEncryptComms = val
}

// SetCanEncryptStorage sets the value of CanEncryptStorage.
func (s *GpgKeySubkeysItem) SetCanEncryptStorage(val OptBool) {
	s.CanEncryptStorage = val
}

// SetCanCertify sets the value of CanCertify.
func (s *GpgKeySubkeysItem) SetCanCertify(val OptBool) {
	s.CanCertify = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GpgKeySubkeysItem) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *GpgKeySubkeysItem) SetExpiresAt(val OptNilString) {
	s.ExpiresAt = val
}

// SetRawKey sets the value of RawKey.
func (s *GpgKeySubkeysItem) SetRawKey(val OptNilString) {
	s.RawKey = val
}

// External Groups to be mapped to a team for membership.
// Ref: #/components/schemas/group-mapping
type GroupMapping struct {
	// Array of groups to be mapped to this team.
	Groups []GroupMappingGroupsItem `json:"groups"`
}

// GetGroups returns the value of Groups.
func (s *GroupMapping) GetGroups() []GroupMappingGroupsItem {
	return s.Groups
}

// SetGroups sets the value of Groups.
func (s *GroupMapping) SetGroups(val []GroupMappingGroupsItem) {
	s.Groups = val
}

func (*GroupMapping) teamsCreateOrUpdateIdpGroupConnectionsLegacyRes() {}
func (*GroupMapping) teamsListIdpGroupsForLegacyRes()                  {}

type GroupMappingGroupsItem struct {
	// The ID of the group.
	GroupID string `json:"group_id"`
	// The name of the group.
	GroupName string `json:"group_name"`
	// A description of the group.
	GroupDescription string `json:"group_description"`
	// Synchronization status for this group mapping.
	Status OptString `json:"status"`
	// The time of the last sync for this group-mapping.
	SyncedAt OptNilString `json:"synced_at"`
}

// GetGroupID returns the value of GroupID.
func (s *GroupMappingGroupsItem) GetGroupID() string {
	return s.GroupID
}

// GetGroupName returns the value of GroupName.
func (s *GroupMappingGroupsItem) GetGroupName() string {
	return s.GroupName
}

// GetGroupDescription returns the value of GroupDescription.
func (s *GroupMappingGroupsItem) GetGroupDescription() string {
	return s.GroupDescription
}

// GetStatus returns the value of Status.
func (s *GroupMappingGroupsItem) GetStatus() OptString {
	return s.Status
}

// GetSyncedAt returns the value of SyncedAt.
func (s *GroupMappingGroupsItem) GetSyncedAt() OptNilString {
	return s.SyncedAt
}

// SetGroupID sets the value of GroupID.
func (s *GroupMappingGroupsItem) SetGroupID(val string) {
	s.GroupID = val
}

// SetGroupName sets the value of GroupName.
func (s *GroupMappingGroupsItem) SetGroupName(val string) {
	s.GroupName = val
}

// SetGroupDescription sets the value of GroupDescription.
func (s *GroupMappingGroupsItem) SetGroupDescription(val string) {
	s.GroupDescription = val
}

// SetStatus sets the value of Status.
func (s *GroupMappingGroupsItem) SetStatus(val OptString) {
	s.Status = val
}

// SetSyncedAt sets the value of SyncedAt.
func (s *GroupMappingGroupsItem) SetSyncedAt(val OptNilString) {
	s.SyncedAt = val
}

// GroupMappingHeaders wraps GroupMapping with response headers.
type GroupMappingHeaders struct {
	Link     OptString
	Response GroupMapping
}

// GetLink returns the value of Link.
func (s *GroupMappingHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *GroupMappingHeaders) GetResponse() GroupMapping {
	return s.Response
}

// SetLink sets the value of Link.
func (s *GroupMappingHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *GroupMappingHeaders) SetResponse(val GroupMapping) {
	s.Response = val
}

// Webhooks for repositories.
// Ref: #/components/schemas/hook
type Hook struct {
	Type string `json:"type"`
	// Unique identifier of the webhook.
	ID int `json:"id"`
	// The name of a valid service, use 'web' for a webhook.
	Name string `json:"name"`
	// Determines whether the hook is actually triggered on pushes.
	Active bool `json:"active"`
	// Determines what events the hook is triggered for. Default: ['push'].
	Events        []string     `json:"events"`
	Config        HookConfig   `json:"config"`
	UpdatedAt     time.Time    `json:"updated_at"`
	CreatedAt     time.Time    `json:"created_at"`
	URL           url.URL      `json:"url"`
	TestURL       url.URL      `json:"test_url"`
	PingURL       url.URL      `json:"ping_url"`
	DeliveriesURL OptURI       `json:"deliveries_url"`
	LastResponse  HookResponse `json:"last_response"`
}

// GetType returns the value of Type.
func (s *Hook) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *Hook) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Hook) GetName() string {
	return s.Name
}

// GetActive returns the value of Active.
func (s *Hook) GetActive() bool {
	return s.Active
}

// GetEvents returns the value of Events.
func (s *Hook) GetEvents() []string {
	return s.Events
}

// GetConfig returns the value of Config.
func (s *Hook) GetConfig() HookConfig {
	return s.Config
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Hook) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Hook) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *Hook) GetURL() url.URL {
	return s.URL
}

// GetTestURL returns the value of TestURL.
func (s *Hook) GetTestURL() url.URL {
	return s.TestURL
}

// GetPingURL returns the value of PingURL.
func (s *Hook) GetPingURL() url.URL {
	return s.PingURL
}

// GetDeliveriesURL returns the value of DeliveriesURL.
func (s *Hook) GetDeliveriesURL() OptURI {
	return s.DeliveriesURL
}

// GetLastResponse returns the value of LastResponse.
func (s *Hook) GetLastResponse() HookResponse {
	return s.LastResponse
}

// SetType sets the value of Type.
func (s *Hook) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *Hook) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Hook) SetName(val string) {
	s.Name = val
}

// SetActive sets the value of Active.
func (s *Hook) SetActive(val bool) {
	s.Active = val
}

// SetEvents sets the value of Events.
func (s *Hook) SetEvents(val []string) {
	s.Events = val
}

// SetConfig sets the value of Config.
func (s *Hook) SetConfig(val HookConfig) {
	s.Config = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Hook) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Hook) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *Hook) SetURL(val url.URL) {
	s.URL = val
}

// SetTestURL sets the value of TestURL.
func (s *Hook) SetTestURL(val url.URL) {
	s.TestURL = val
}

// SetPingURL sets the value of PingURL.
func (s *Hook) SetPingURL(val url.URL) {
	s.PingURL = val
}

// SetDeliveriesURL sets the value of DeliveriesURL.
func (s *Hook) SetDeliveriesURL(val OptURI) {
	s.DeliveriesURL = val
}

// SetLastResponse sets the value of LastResponse.
func (s *Hook) SetLastResponse(val HookResponse) {
	s.LastResponse = val
}

func (*Hook) reposGetWebhookRes()    {}
func (*Hook) reposUpdateWebhookRes() {}

type HookConfig struct {
	Email       OptString                   `json:"email"`
	Password    OptString                   `json:"password"`
	Room        OptString                   `json:"room"`
	Subdomain   OptString                   `json:"subdomain"`
	URL         OptWebhookConfigURL         `json:"url"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Digest      OptString                   `json:"digest"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	Token       OptString                   `json:"token"`
}

// GetEmail returns the value of Email.
func (s *HookConfig) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *HookConfig) GetPassword() OptString {
	return s.Password
}

// GetRoom returns the value of Room.
func (s *HookConfig) GetRoom() OptString {
	return s.Room
}

// GetSubdomain returns the value of Subdomain.
func (s *HookConfig) GetSubdomain() OptString {
	return s.Subdomain
}

// GetURL returns the value of URL.
func (s *HookConfig) GetURL() OptWebhookConfigURL {
	return s.URL
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *HookConfig) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// GetContentType returns the value of ContentType.
func (s *HookConfig) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetDigest returns the value of Digest.
func (s *HookConfig) GetDigest() OptString {
	return s.Digest
}

// GetSecret returns the value of Secret.
func (s *HookConfig) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetToken returns the value of Token.
func (s *HookConfig) GetToken() OptString {
	return s.Token
}

// SetEmail sets the value of Email.
func (s *HookConfig) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *HookConfig) SetPassword(val OptString) {
	s.Password = val
}

// SetRoom sets the value of Room.
func (s *HookConfig) SetRoom(val OptString) {
	s.Room = val
}

// SetSubdomain sets the value of Subdomain.
func (s *HookConfig) SetSubdomain(val OptString) {
	s.Subdomain = val
}

// SetURL sets the value of URL.
func (s *HookConfig) SetURL(val OptWebhookConfigURL) {
	s.URL = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *HookConfig) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

// SetContentType sets the value of ContentType.
func (s *HookConfig) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetDigest sets the value of Digest.
func (s *HookConfig) SetDigest(val OptString) {
	s.Digest = val
}

// SetSecret sets the value of Secret.
func (s *HookConfig) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetToken sets the value of Token.
func (s *HookConfig) SetToken(val OptString) {
	s.Token = val
}

// Delivery made by a webhook.
// Ref: #/components/schemas/hook-delivery
type HookDelivery struct {
	// Unique identifier of the delivery.
	ID int `json:"id"`
	// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to
	// this event).
	GUID string `json:"guid"`
	// Time when the delivery was delivered.
	DeliveredAt time.Time `json:"delivered_at"`
	// Whether the delivery is a redelivery.
	Redelivery bool `json:"redelivery"`
	// Time spent delivering.
	Duration float64 `json:"duration"`
	// Description of the status of the attempted delivery.
	Status string `json:"status"`
	// Status code received when delivery was made.
	StatusCode int `json:"status_code"`
	// The event that triggered the delivery.
	Event string `json:"event"`
	// The type of activity for the event that triggered the delivery.
	Action NilString `json:"action"`
	// The id of the GitHub App installation associated with this event.
	InstallationID NilInt `json:"installation_id"`
	// The id of the repository associated with this event.
	RepositoryID NilInt `json:"repository_id"`
	// The URL target of the delivery.
	URL      OptString            `json:"url"`
	Request  HookDeliveryRequest  `json:"request"`
	Response HookDeliveryResponse `json:"response"`
}

// GetID returns the value of ID.
func (s *HookDelivery) GetID() int {
	return s.ID
}

// GetGUID returns the value of GUID.
func (s *HookDelivery) GetGUID() string {
	return s.GUID
}

// GetDeliveredAt returns the value of DeliveredAt.
func (s *HookDelivery) GetDeliveredAt() time.Time {
	return s.DeliveredAt
}

// GetRedelivery returns the value of Redelivery.
func (s *HookDelivery) GetRedelivery() bool {
	return s.Redelivery
}

// GetDuration returns the value of Duration.
func (s *HookDelivery) GetDuration() float64 {
	return s.Duration
}

// GetStatus returns the value of Status.
func (s *HookDelivery) GetStatus() string {
	return s.Status
}

// GetStatusCode returns the value of StatusCode.
func (s *HookDelivery) GetStatusCode() int {
	return s.StatusCode
}

// GetEvent returns the value of Event.
func (s *HookDelivery) GetEvent() string {
	return s.Event
}

// GetAction returns the value of Action.
func (s *HookDelivery) GetAction() NilString {
	return s.Action
}

// GetInstallationID returns the value of InstallationID.
func (s *HookDelivery) GetInstallationID() NilInt {
	return s.InstallationID
}

// GetRepositoryID returns the value of RepositoryID.
func (s *HookDelivery) GetRepositoryID() NilInt {
	return s.RepositoryID
}

// GetURL returns the value of URL.
func (s *HookDelivery) GetURL() OptString {
	return s.URL
}

// GetRequest returns the value of Request.
func (s *HookDelivery) GetRequest() HookDeliveryRequest {
	return s.Request
}

// GetResponse returns the value of Response.
func (s *HookDelivery) GetResponse() HookDeliveryResponse {
	return s.Response
}

// SetID sets the value of ID.
func (s *HookDelivery) SetID(val int) {
	s.ID = val
}

// SetGUID sets the value of GUID.
func (s *HookDelivery) SetGUID(val string) {
	s.GUID = val
}

// SetDeliveredAt sets the value of DeliveredAt.
func (s *HookDelivery) SetDeliveredAt(val time.Time) {
	s.DeliveredAt = val
}

// SetRedelivery sets the value of Redelivery.
func (s *HookDelivery) SetRedelivery(val bool) {
	s.Redelivery = val
}

// SetDuration sets the value of Duration.
func (s *HookDelivery) SetDuration(val float64) {
	s.Duration = val
}

// SetStatus sets the value of Status.
func (s *HookDelivery) SetStatus(val string) {
	s.Status = val
}

// SetStatusCode sets the value of StatusCode.
func (s *HookDelivery) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetEvent sets the value of Event.
func (s *HookDelivery) SetEvent(val string) {
	s.Event = val
}

// SetAction sets the value of Action.
func (s *HookDelivery) SetAction(val NilString) {
	s.Action = val
}

// SetInstallationID sets the value of InstallationID.
func (s *HookDelivery) SetInstallationID(val NilInt) {
	s.InstallationID = val
}

// SetRepositoryID sets the value of RepositoryID.
func (s *HookDelivery) SetRepositoryID(val NilInt) {
	s.RepositoryID = val
}

// SetURL sets the value of URL.
func (s *HookDelivery) SetURL(val OptString) {
	s.URL = val
}

// SetRequest sets the value of Request.
func (s *HookDelivery) SetRequest(val HookDeliveryRequest) {
	s.Request = val
}

// SetResponse sets the value of Response.
func (s *HookDelivery) SetResponse(val HookDeliveryResponse) {
	s.Response = val
}

func (*HookDelivery) appsGetWebhookDeliveryRes()  {}
func (*HookDelivery) orgsGetWebhookDeliveryRes()  {}
func (*HookDelivery) reposGetWebhookDeliveryRes() {}

// Delivery made by a webhook, without request and response information.
// Ref: #/components/schemas/hook-delivery-item
type HookDeliveryItem struct {
	// Unique identifier of the webhook delivery.
	ID int `json:"id"`
	// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to
	// this event).
	GUID string `json:"guid"`
	// Time when the webhook delivery occurred.
	DeliveredAt time.Time `json:"delivered_at"`
	// Whether the webhook delivery is a redelivery.
	Redelivery bool `json:"redelivery"`
	// Time spent delivering.
	Duration float64 `json:"duration"`
	// Describes the response returned after attempting the delivery.
	Status string `json:"status"`
	// Status code received when delivery was made.
	StatusCode int `json:"status_code"`
	// The event that triggered the delivery.
	Event string `json:"event"`
	// The type of activity for the event that triggered the delivery.
	Action NilString `json:"action"`
	// The id of the GitHub App installation associated with this event.
	InstallationID NilInt `json:"installation_id"`
	// The id of the repository associated with this event.
	RepositoryID NilInt `json:"repository_id"`
}

// GetID returns the value of ID.
func (s *HookDeliveryItem) GetID() int {
	return s.ID
}

// GetGUID returns the value of GUID.
func (s *HookDeliveryItem) GetGUID() string {
	return s.GUID
}

// GetDeliveredAt returns the value of DeliveredAt.
func (s *HookDeliveryItem) GetDeliveredAt() time.Time {
	return s.DeliveredAt
}

// GetRedelivery returns the value of Redelivery.
func (s *HookDeliveryItem) GetRedelivery() bool {
	return s.Redelivery
}

// GetDuration returns the value of Duration.
func (s *HookDeliveryItem) GetDuration() float64 {
	return s.Duration
}

// GetStatus returns the value of Status.
func (s *HookDeliveryItem) GetStatus() string {
	return s.Status
}

// GetStatusCode returns the value of StatusCode.
func (s *HookDeliveryItem) GetStatusCode() int {
	return s.StatusCode
}

// GetEvent returns the value of Event.
func (s *HookDeliveryItem) GetEvent() string {
	return s.Event
}

// GetAction returns the value of Action.
func (s *HookDeliveryItem) GetAction() NilString {
	return s.Action
}

// GetInstallationID returns the value of InstallationID.
func (s *HookDeliveryItem) GetInstallationID() NilInt {
	return s.InstallationID
}

// GetRepositoryID returns the value of RepositoryID.
func (s *HookDeliveryItem) GetRepositoryID() NilInt {
	return s.RepositoryID
}

// SetID sets the value of ID.
func (s *HookDeliveryItem) SetID(val int) {
	s.ID = val
}

// SetGUID sets the value of GUID.
func (s *HookDeliveryItem) SetGUID(val string) {
	s.GUID = val
}

// SetDeliveredAt sets the value of DeliveredAt.
func (s *HookDeliveryItem) SetDeliveredAt(val time.Time) {
	s.DeliveredAt = val
}

// SetRedelivery sets the value of Redelivery.
func (s *HookDeliveryItem) SetRedelivery(val bool) {
	s.Redelivery = val
}

// SetDuration sets the value of Duration.
func (s *HookDeliveryItem) SetDuration(val float64) {
	s.Duration = val
}

// SetStatus sets the value of Status.
func (s *HookDeliveryItem) SetStatus(val string) {
	s.Status = val
}

// SetStatusCode sets the value of StatusCode.
func (s *HookDeliveryItem) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetEvent sets the value of Event.
func (s *HookDeliveryItem) SetEvent(val string) {
	s.Event = val
}

// SetAction sets the value of Action.
func (s *HookDeliveryItem) SetAction(val NilString) {
	s.Action = val
}

// SetInstallationID sets the value of InstallationID.
func (s *HookDeliveryItem) SetInstallationID(val NilInt) {
	s.InstallationID = val
}

// SetRepositoryID sets the value of RepositoryID.
func (s *HookDeliveryItem) SetRepositoryID(val NilInt) {
	s.RepositoryID = val
}

type HookDeliveryRequest struct {
	// The request headers sent with the webhook delivery.
	Headers NilHookDeliveryRequestHeaders `json:"headers"`
	// The webhook payload.
	Payload NilHookDeliveryRequestPayload `json:"payload"`
}

// GetHeaders returns the value of Headers.
func (s *HookDeliveryRequest) GetHeaders() NilHookDeliveryRequestHeaders {
	return s.Headers
}

// GetPayload returns the value of Payload.
func (s *HookDeliveryRequest) GetPayload() NilHookDeliveryRequestPayload {
	return s.Payload
}

// SetHeaders sets the value of Headers.
func (s *HookDeliveryRequest) SetHeaders(val NilHookDeliveryRequestHeaders) {
	s.Headers = val
}

// SetPayload sets the value of Payload.
func (s *HookDeliveryRequest) SetPayload(val NilHookDeliveryRequestPayload) {
	s.Payload = val
}

// The request headers sent with the webhook delivery.
type HookDeliveryRequestHeaders map[string]jx.Raw

func (s *HookDeliveryRequestHeaders) init() HookDeliveryRequestHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The webhook payload.
type HookDeliveryRequestPayload map[string]jx.Raw

func (s *HookDeliveryRequestPayload) init() HookDeliveryRequestPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type HookDeliveryResponse struct {
	// The response headers received when the delivery was made.
	Headers NilHookDeliveryResponseHeaders `json:"headers"`
	// The response payload received.
	Payload NilString `json:"payload"`
}

// GetHeaders returns the value of Headers.
func (s *HookDeliveryResponse) GetHeaders() NilHookDeliveryResponseHeaders {
	return s.Headers
}

// GetPayload returns the value of Payload.
func (s *HookDeliveryResponse) GetPayload() NilString {
	return s.Payload
}

// SetHeaders sets the value of Headers.
func (s *HookDeliveryResponse) SetHeaders(val NilHookDeliveryResponseHeaders) {
	s.Headers = val
}

// SetPayload sets the value of Payload.
func (s *HookDeliveryResponse) SetPayload(val NilString) {
	s.Payload = val
}

// The response headers received when the delivery was made.
type HookDeliveryResponseHeaders map[string]jx.Raw

func (s *HookDeliveryResponseHeaders) init() HookDeliveryResponseHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// HookHeaders wraps Hook with response headers.
type HookHeaders struct {
	Location OptString
	Response Hook
}

// GetLocation returns the value of Location.
func (s *HookHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *HookHeaders) GetResponse() Hook {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *HookHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *HookHeaders) SetResponse(val Hook) {
	s.Response = val
}

func (*HookHeaders) reposCreateWebhookRes() {}

// Ref: #/components/schemas/hook-response
type HookResponse struct {
	Code    NilInt    `json:"code"`
	Status  NilString `json:"status"`
	Message NilString `json:"message"`
}

// GetCode returns the value of Code.
func (s *HookResponse) GetCode() NilInt {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *HookResponse) GetStatus() NilString {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *HookResponse) GetMessage() NilString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *HookResponse) SetCode(val NilInt) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *HookResponse) SetStatus(val NilString) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *HookResponse) SetMessage(val NilString) {
	s.Message = val
}

// Hovercard.
// Ref: #/components/schemas/hovercard
type Hovercard struct {
	Contexts []HovercardContextsItem `json:"contexts"`
}

// GetContexts returns the value of Contexts.
func (s *Hovercard) GetContexts() []HovercardContextsItem {
	return s.Contexts
}

// SetContexts sets the value of Contexts.
func (s *Hovercard) SetContexts(val []HovercardContextsItem) {
	s.Contexts = val
}

func (*Hovercard) usersGetContextForUserRes() {}

type HovercardContextsItem struct {
	Message string `json:"message"`
	Octicon string `json:"octicon"`
}

// GetMessage returns the value of Message.
func (s *HovercardContextsItem) GetMessage() string {
	return s.Message
}

// GetOcticon returns the value of Octicon.
func (s *HovercardContextsItem) GetOcticon() string {
	return s.Octicon
}

// SetMessage sets the value of Message.
func (s *HovercardContextsItem) SetMessage(val string) {
	s.Message = val
}

// SetOcticon sets the value of Octicon.
func (s *HovercardContextsItem) SetOcticon(val string) {
	s.Octicon = val
}

// A repository import from an external source.
// Ref: #/components/schemas/import
type Import struct {
	Vcs    NilString `json:"vcs"`
	UseLfs OptBool   `json:"use_lfs"`
	// The URL of the originating repository.
	VcsURL          string                     `json:"vcs_url"`
	SvcRoot         OptString                  `json:"svc_root"`
	TfvcProject     OptString                  `json:"tfvc_project"`
	Status          ImportStatus               `json:"status"`
	StatusText      OptNilString               `json:"status_text"`
	FailedStep      OptNilString               `json:"failed_step"`
	ErrorMessage    OptNilString               `json:"error_message"`
	ImportPercent   OptNilInt                  `json:"import_percent"`
	CommitCount     OptNilInt                  `json:"commit_count"`
	PushPercent     OptNilInt                  `json:"push_percent"`
	HasLargeFiles   OptBool                    `json:"has_large_files"`
	LargeFilesSize  OptInt                     `json:"large_files_size"`
	LargeFilesCount OptInt                     `json:"large_files_count"`
	ProjectChoices  []ImportProjectChoicesItem `json:"project_choices"`
	Message         OptString                  `json:"message"`
	AuthorsCount    OptNilInt                  `json:"authors_count"`
	URL             url.URL                    `json:"url"`
	HTMLURL         url.URL                    `json:"html_url"`
	AuthorsURL      url.URL                    `json:"authors_url"`
	RepositoryURL   url.URL                    `json:"repository_url"`
	SvnRoot         OptString                  `json:"svn_root"`
}

// GetVcs returns the value of Vcs.
func (s *Import) GetVcs() NilString {
	return s.Vcs
}

// GetUseLfs returns the value of UseLfs.
func (s *Import) GetUseLfs() OptBool {
	return s.UseLfs
}

// GetVcsURL returns the value of VcsURL.
func (s *Import) GetVcsURL() string {
	return s.VcsURL
}

// GetSvcRoot returns the value of SvcRoot.
func (s *Import) GetSvcRoot() OptString {
	return s.SvcRoot
}

// GetTfvcProject returns the value of TfvcProject.
func (s *Import) GetTfvcProject() OptString {
	return s.TfvcProject
}

// GetStatus returns the value of Status.
func (s *Import) GetStatus() ImportStatus {
	return s.Status
}

// GetStatusText returns the value of StatusText.
func (s *Import) GetStatusText() OptNilString {
	return s.StatusText
}

// GetFailedStep returns the value of FailedStep.
func (s *Import) GetFailedStep() OptNilString {
	return s.FailedStep
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Import) GetErrorMessage() OptNilString {
	return s.ErrorMessage
}

// GetImportPercent returns the value of ImportPercent.
func (s *Import) GetImportPercent() OptNilInt {
	return s.ImportPercent
}

// GetCommitCount returns the value of CommitCount.
func (s *Import) GetCommitCount() OptNilInt {
	return s.CommitCount
}

// GetPushPercent returns the value of PushPercent.
func (s *Import) GetPushPercent() OptNilInt {
	return s.PushPercent
}

// GetHasLargeFiles returns the value of HasLargeFiles.
func (s *Import) GetHasLargeFiles() OptBool {
	return s.HasLargeFiles
}

// GetLargeFilesSize returns the value of LargeFilesSize.
func (s *Import) GetLargeFilesSize() OptInt {
	return s.LargeFilesSize
}

// GetLargeFilesCount returns the value of LargeFilesCount.
func (s *Import) GetLargeFilesCount() OptInt {
	return s.LargeFilesCount
}

// GetProjectChoices returns the value of ProjectChoices.
func (s *Import) GetProjectChoices() []ImportProjectChoicesItem {
	return s.ProjectChoices
}

// GetMessage returns the value of Message.
func (s *Import) GetMessage() OptString {
	return s.Message
}

// GetAuthorsCount returns the value of AuthorsCount.
func (s *Import) GetAuthorsCount() OptNilInt {
	return s.AuthorsCount
}

// GetURL returns the value of URL.
func (s *Import) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Import) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetAuthorsURL returns the value of AuthorsURL.
func (s *Import) GetAuthorsURL() url.URL {
	return s.AuthorsURL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *Import) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetSvnRoot returns the value of SvnRoot.
func (s *Import) GetSvnRoot() OptString {
	return s.SvnRoot
}

// SetVcs sets the value of Vcs.
func (s *Import) SetVcs(val NilString) {
	s.Vcs = val
}

// SetUseLfs sets the value of UseLfs.
func (s *Import) SetUseLfs(val OptBool) {
	s.UseLfs = val
}

// SetVcsURL sets the value of VcsURL.
func (s *Import) SetVcsURL(val string) {
	s.VcsURL = val
}

// SetSvcRoot sets the value of SvcRoot.
func (s *Import) SetSvcRoot(val OptString) {
	s.SvcRoot = val
}

// SetTfvcProject sets the value of TfvcProject.
func (s *Import) SetTfvcProject(val OptString) {
	s.TfvcProject = val
}

// SetStatus sets the value of Status.
func (s *Import) SetStatus(val ImportStatus) {
	s.Status = val
}

// SetStatusText sets the value of StatusText.
func (s *Import) SetStatusText(val OptNilString) {
	s.StatusText = val
}

// SetFailedStep sets the value of FailedStep.
func (s *Import) SetFailedStep(val OptNilString) {
	s.FailedStep = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Import) SetErrorMessage(val OptNilString) {
	s.ErrorMessage = val
}

// SetImportPercent sets the value of ImportPercent.
func (s *Import) SetImportPercent(val OptNilInt) {
	s.ImportPercent = val
}

// SetCommitCount sets the value of CommitCount.
func (s *Import) SetCommitCount(val OptNilInt) {
	s.CommitCount = val
}

// SetPushPercent sets the value of PushPercent.
func (s *Import) SetPushPercent(val OptNilInt) {
	s.PushPercent = val
}

// SetHasLargeFiles sets the value of HasLargeFiles.
func (s *Import) SetHasLargeFiles(val OptBool) {
	s.HasLargeFiles = val
}

// SetLargeFilesSize sets the value of LargeFilesSize.
func (s *Import) SetLargeFilesSize(val OptInt) {
	s.LargeFilesSize = val
}

// SetLargeFilesCount sets the value of LargeFilesCount.
func (s *Import) SetLargeFilesCount(val OptInt) {
	s.LargeFilesCount = val
}

// SetProjectChoices sets the value of ProjectChoices.
func (s *Import) SetProjectChoices(val []ImportProjectChoicesItem) {
	s.ProjectChoices = val
}

// SetMessage sets the value of Message.
func (s *Import) SetMessage(val OptString) {
	s.Message = val
}

// SetAuthorsCount sets the value of AuthorsCount.
func (s *Import) SetAuthorsCount(val OptNilInt) {
	s.AuthorsCount = val
}

// SetURL sets the value of URL.
func (s *Import) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Import) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetAuthorsURL sets the value of AuthorsURL.
func (s *Import) SetAuthorsURL(val url.URL) {
	s.AuthorsURL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *Import) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetSvnRoot sets the value of SvnRoot.
func (s *Import) SetSvnRoot(val OptString) {
	s.SvnRoot = val
}

func (*Import) migrationsGetImportStatusRes()  {}
func (*Import) migrationsSetLfsPreferenceRes() {}

// ImportHeaders wraps Import with response headers.
type ImportHeaders struct {
	Location OptString
	Response Import
}

// GetLocation returns the value of Location.
func (s *ImportHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *ImportHeaders) GetResponse() Import {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *ImportHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *ImportHeaders) SetResponse(val Import) {
	s.Response = val
}

func (*ImportHeaders) migrationsStartImportRes() {}

type ImportProjectChoicesItem struct {
	Vcs         OptString `json:"vcs"`
	TfvcProject OptString `json:"tfvc_project"`
	HumanName   OptString `json:"human_name"`
}

// GetVcs returns the value of Vcs.
func (s *ImportProjectChoicesItem) GetVcs() OptString {
	return s.Vcs
}

// GetTfvcProject returns the value of TfvcProject.
func (s *ImportProjectChoicesItem) GetTfvcProject() OptString {
	return s.TfvcProject
}

// GetHumanName returns the value of HumanName.
func (s *ImportProjectChoicesItem) GetHumanName() OptString {
	return s.HumanName
}

// SetVcs sets the value of Vcs.
func (s *ImportProjectChoicesItem) SetVcs(val OptString) {
	s.Vcs = val
}

// SetTfvcProject sets the value of TfvcProject.
func (s *ImportProjectChoicesItem) SetTfvcProject(val OptString) {
	s.TfvcProject = val
}

// SetHumanName sets the value of HumanName.
func (s *ImportProjectChoicesItem) SetHumanName(val OptString) {
	s.HumanName = val
}

type ImportStatus string

const (
	ImportStatusAuth                   ImportStatus = "auth"
	ImportStatusError                  ImportStatus = "error"
	ImportStatusNone                   ImportStatus = "none"
	ImportStatusDetecting              ImportStatus = "detecting"
	ImportStatusChoose                 ImportStatus = "choose"
	ImportStatusAuthFailed             ImportStatus = "auth_failed"
	ImportStatusImporting              ImportStatus = "importing"
	ImportStatusMapping                ImportStatus = "mapping"
	ImportStatusWaitingToPush          ImportStatus = "waiting_to_push"
	ImportStatusPushing                ImportStatus = "pushing"
	ImportStatusComplete               ImportStatus = "complete"
	ImportStatusSetup                  ImportStatus = "setup"
	ImportStatusUnknown                ImportStatus = "unknown"
	ImportStatusDetectionFoundMultiple ImportStatus = "detection_found_multiple"
	ImportStatusDetectionFoundNothing  ImportStatus = "detection_found_nothing"
	ImportStatusDetectionNeedsAuth     ImportStatus = "detection_needs_auth"
)

// MarshalText implements encoding.TextMarshaler.
func (s ImportStatus) MarshalText() ([]byte, error) {
	switch s {
	case ImportStatusAuth:
		return []byte(s), nil
	case ImportStatusError:
		return []byte(s), nil
	case ImportStatusNone:
		return []byte(s), nil
	case ImportStatusDetecting:
		return []byte(s), nil
	case ImportStatusChoose:
		return []byte(s), nil
	case ImportStatusAuthFailed:
		return []byte(s), nil
	case ImportStatusImporting:
		return []byte(s), nil
	case ImportStatusMapping:
		return []byte(s), nil
	case ImportStatusWaitingToPush:
		return []byte(s), nil
	case ImportStatusPushing:
		return []byte(s), nil
	case ImportStatusComplete:
		return []byte(s), nil
	case ImportStatusSetup:
		return []byte(s), nil
	case ImportStatusUnknown:
		return []byte(s), nil
	case ImportStatusDetectionFoundMultiple:
		return []byte(s), nil
	case ImportStatusDetectionFoundNothing:
		return []byte(s), nil
	case ImportStatusDetectionNeedsAuth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImportStatus) UnmarshalText(data []byte) error {
	switch ImportStatus(data) {
	case ImportStatusAuth:
		*s = ImportStatusAuth
		return nil
	case ImportStatusError:
		*s = ImportStatusError
		return nil
	case ImportStatusNone:
		*s = ImportStatusNone
		return nil
	case ImportStatusDetecting:
		*s = ImportStatusDetecting
		return nil
	case ImportStatusChoose:
		*s = ImportStatusChoose
		return nil
	case ImportStatusAuthFailed:
		*s = ImportStatusAuthFailed
		return nil
	case ImportStatusImporting:
		*s = ImportStatusImporting
		return nil
	case ImportStatusMapping:
		*s = ImportStatusMapping
		return nil
	case ImportStatusWaitingToPush:
		*s = ImportStatusWaitingToPush
		return nil
	case ImportStatusPushing:
		*s = ImportStatusPushing
		return nil
	case ImportStatusComplete:
		*s = ImportStatusComplete
		return nil
	case ImportStatusSetup:
		*s = ImportStatusSetup
		return nil
	case ImportStatusUnknown:
		*s = ImportStatusUnknown
		return nil
	case ImportStatusDetectionFoundMultiple:
		*s = ImportStatusDetectionFoundMultiple
		return nil
	case ImportStatusDetectionFoundNothing:
		*s = ImportStatusDetectionFoundNothing
		return nil
	case ImportStatusDetectionNeedsAuth:
		*s = ImportStatusDetectionNeedsAuth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Authentication token for a GitHub App installed on a user or org.
// Ref: #/components/schemas/installation-token
type InstallationToken struct {
	Token                  string                                  `json:"token"`
	ExpiresAt              string                                  `json:"expires_at"`
	Permissions            OptAppPermissions                       `json:"permissions"`
	RepositorySelection    OptInstallationTokenRepositorySelection `json:"repository_selection"`
	Repositories           []Repository                            `json:"repositories"`
	SingleFile             OptString                               `json:"single_file"`
	HasMultipleSingleFiles OptBool                                 `json:"has_multiple_single_files"`
	SingleFilePaths        []string                                `json:"single_file_paths"`
}

// GetToken returns the value of Token.
func (s *InstallationToken) GetToken() string {
	return s.Token
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *InstallationToken) GetExpiresAt() string {
	return s.ExpiresAt
}

// GetPermissions returns the value of Permissions.
func (s *InstallationToken) GetPermissions() OptAppPermissions {
	return s.Permissions
}

// GetRepositorySelection returns the value of RepositorySelection.
func (s *InstallationToken) GetRepositorySelection() OptInstallationTokenRepositorySelection {
	return s.RepositorySelection
}

// GetRepositories returns the value of Repositories.
func (s *InstallationToken) GetRepositories() []Repository {
	return s.Repositories
}

// GetSingleFile returns the value of SingleFile.
func (s *InstallationToken) GetSingleFile() OptString {
	return s.SingleFile
}

// GetHasMultipleSingleFiles returns the value of HasMultipleSingleFiles.
func (s *InstallationToken) GetHasMultipleSingleFiles() OptBool {
	return s.HasMultipleSingleFiles
}

// GetSingleFilePaths returns the value of SingleFilePaths.
func (s *InstallationToken) GetSingleFilePaths() []string {
	return s.SingleFilePaths
}

// SetToken sets the value of Token.
func (s *InstallationToken) SetToken(val string) {
	s.Token = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *InstallationToken) SetExpiresAt(val string) {
	s.ExpiresAt = val
}

// SetPermissions sets the value of Permissions.
func (s *InstallationToken) SetPermissions(val OptAppPermissions) {
	s.Permissions = val
}

// SetRepositorySelection sets the value of RepositorySelection.
func (s *InstallationToken) SetRepositorySelection(val OptInstallationTokenRepositorySelection) {
	s.RepositorySelection = val
}

// SetRepositories sets the value of Repositories.
func (s *InstallationToken) SetRepositories(val []Repository) {
	s.Repositories = val
}

// SetSingleFile sets the value of SingleFile.
func (s *InstallationToken) SetSingleFile(val OptString) {
	s.SingleFile = val
}

// SetHasMultipleSingleFiles sets the value of HasMultipleSingleFiles.
func (s *InstallationToken) SetHasMultipleSingleFiles(val OptBool) {
	s.HasMultipleSingleFiles = val
}

// SetSingleFilePaths sets the value of SingleFilePaths.
func (s *InstallationToken) SetSingleFilePaths(val []string) {
	s.SingleFilePaths = val
}

func (*InstallationToken) appsCreateInstallationAccessTokenRes() {}

type InstallationTokenRepositorySelection string

const (
	InstallationTokenRepositorySelectionAll      InstallationTokenRepositorySelection = "all"
	InstallationTokenRepositorySelectionSelected InstallationTokenRepositorySelection = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s InstallationTokenRepositorySelection) MarshalText() ([]byte, error) {
	switch s {
	case InstallationTokenRepositorySelectionAll:
		return []byte(s), nil
	case InstallationTokenRepositorySelectionSelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstallationTokenRepositorySelection) UnmarshalText(data []byte) error {
	switch InstallationTokenRepositorySelection(data) {
	case InstallationTokenRepositorySelectionAll:
		*s = InstallationTokenRepositorySelectionAll
		return nil
	case InstallationTokenRepositorySelectionSelected:
		*s = InstallationTokenRepositorySelectionSelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and
// user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
// Ref: #/components/schemas/integration
type Integration struct {
	// Unique identifier of the GitHub app.
	ID int `json:"id"`
	// The slug name of the GitHub app.
	Slug   OptString             `json:"slug"`
	NodeID string                `json:"node_id"`
	Owner  NilNullableSimpleUser `json:"owner"`
	// The name of the GitHub app.
	Name        string    `json:"name"`
	Description NilString `json:"description"`
	ExternalURL url.URL   `json:"external_url"`
	HTMLURL     url.URL   `json:"html_url"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	// The set of permissions for the GitHub app.
	Permissions IntegrationPermissions `json:"permissions"`
	// The list of events for the GitHub app.
	Events []string `json:"events"`
	// The number of installations associated with the GitHub app.
	InstallationsCount OptInt       `json:"installations_count"`
	ClientID           OptString    `json:"client_id"`
	ClientSecret       OptString    `json:"client_secret"`
	WebhookSecret      OptNilString `json:"webhook_secret"`
	Pem                OptString    `json:"pem"`
}

// GetID returns the value of ID.
func (s *Integration) GetID() int {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *Integration) GetSlug() OptString {
	return s.Slug
}

// GetNodeID returns the value of NodeID.
func (s *Integration) GetNodeID() string {
	return s.NodeID
}

// GetOwner returns the value of Owner.
func (s *Integration) GetOwner() NilNullableSimpleUser {
	return s.Owner
}

// GetName returns the value of Name.
func (s *Integration) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Integration) GetDescription() NilString {
	return s.Description
}

// GetExternalURL returns the value of ExternalURL.
func (s *Integration) GetExternalURL() url.URL {
	return s.ExternalURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Integration) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Integration) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Integration) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *Integration) GetPermissions() IntegrationPermissions {
	return s.Permissions
}

// GetEvents returns the value of Events.
func (s *Integration) GetEvents() []string {
	return s.Events
}

// GetInstallationsCount returns the value of InstallationsCount.
func (s *Integration) GetInstallationsCount() OptInt {
	return s.InstallationsCount
}

// GetClientID returns the value of ClientID.
func (s *Integration) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *Integration) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetWebhookSecret returns the value of WebhookSecret.
func (s *Integration) GetWebhookSecret() OptNilString {
	return s.WebhookSecret
}

// GetPem returns the value of Pem.
func (s *Integration) GetPem() OptString {
	return s.Pem
}

// SetID sets the value of ID.
func (s *Integration) SetID(val int) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *Integration) SetSlug(val OptString) {
	s.Slug = val
}

// SetNodeID sets the value of NodeID.
func (s *Integration) SetNodeID(val string) {
	s.NodeID = val
}

// SetOwner sets the value of Owner.
func (s *Integration) SetOwner(val NilNullableSimpleUser) {
	s.Owner = val
}

// SetName sets the value of Name.
func (s *Integration) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Integration) SetDescription(val NilString) {
	s.Description = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *Integration) SetExternalURL(val url.URL) {
	s.ExternalURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Integration) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Integration) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Integration) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *Integration) SetPermissions(val IntegrationPermissions) {
	s.Permissions = val
}

// SetEvents sets the value of Events.
func (s *Integration) SetEvents(val []string) {
	s.Events = val
}

// SetInstallationsCount sets the value of InstallationsCount.
func (s *Integration) SetInstallationsCount(val OptInt) {
	s.InstallationsCount = val
}

// SetClientID sets the value of ClientID.
func (s *Integration) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *Integration) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetWebhookSecret sets the value of WebhookSecret.
func (s *Integration) SetWebhookSecret(val OptNilString) {
	s.WebhookSecret = val
}

// SetPem sets the value of Pem.
func (s *Integration) SetPem(val OptString) {
	s.Pem = val
}

func (*Integration) appsGetBySlugRes() {}

// The set of permissions for the GitHub app.
type IntegrationPermissions struct {
	Issues          OptString `json:"issues"`
	Checks          OptString `json:"checks"`
	Metadata        OptString `json:"metadata"`
	Contents        OptString `json:"contents"`
	Deployments     OptString `json:"deployments"`
	AdditionalProps IntegrationPermissionsAdditional
}

// GetIssues returns the value of Issues.
func (s *IntegrationPermissions) GetIssues() OptString {
	return s.Issues
}

// GetChecks returns the value of Checks.
func (s *IntegrationPermissions) GetChecks() OptString {
	return s.Checks
}

// GetMetadata returns the value of Metadata.
func (s *IntegrationPermissions) GetMetadata() OptString {
	return s.Metadata
}

// GetContents returns the value of Contents.
func (s *IntegrationPermissions) GetContents() OptString {
	return s.Contents
}

// GetDeployments returns the value of Deployments.
func (s *IntegrationPermissions) GetDeployments() OptString {
	return s.Deployments
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *IntegrationPermissions) GetAdditionalProps() IntegrationPermissionsAdditional {
	return s.AdditionalProps
}

// SetIssues sets the value of Issues.
func (s *IntegrationPermissions) SetIssues(val OptString) {
	s.Issues = val
}

// SetChecks sets the value of Checks.
func (s *IntegrationPermissions) SetChecks(val OptString) {
	s.Checks = val
}

// SetMetadata sets the value of Metadata.
func (s *IntegrationPermissions) SetMetadata(val OptString) {
	s.Metadata = val
}

// SetContents sets the value of Contents.
func (s *IntegrationPermissions) SetContents(val OptString) {
	s.Contents = val
}

// SetDeployments sets the value of Deployments.
func (s *IntegrationPermissions) SetDeployments(val OptString) {
	s.Deployments = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *IntegrationPermissions) SetAdditionalProps(val IntegrationPermissionsAdditional) {
	s.AdditionalProps = val
}

type IntegrationPermissionsAdditional map[string]string

func (s *IntegrationPermissionsAdditional) init() IntegrationPermissionsAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`,
// `one_month`, `six_months`. Default: `one_day`.
// Ref: #/components/schemas/interaction-expiry
type InteractionExpiry string

const (
	InteractionExpiryOneDay    InteractionExpiry = "one_day"
	InteractionExpiryThreeDays InteractionExpiry = "three_days"
	InteractionExpiryOneWeek   InteractionExpiry = "one_week"
	InteractionExpiryOneMonth  InteractionExpiry = "one_month"
	InteractionExpirySixMonths InteractionExpiry = "six_months"
)

// MarshalText implements encoding.TextMarshaler.
func (s InteractionExpiry) MarshalText() ([]byte, error) {
	switch s {
	case InteractionExpiryOneDay:
		return []byte(s), nil
	case InteractionExpiryThreeDays:
		return []byte(s), nil
	case InteractionExpiryOneWeek:
		return []byte(s), nil
	case InteractionExpiryOneMonth:
		return []byte(s), nil
	case InteractionExpirySixMonths:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InteractionExpiry) UnmarshalText(data []byte) error {
	switch InteractionExpiry(data) {
	case InteractionExpiryOneDay:
		*s = InteractionExpiryOneDay
		return nil
	case InteractionExpiryThreeDays:
		*s = InteractionExpiryThreeDays
		return nil
	case InteractionExpiryOneWeek:
		*s = InteractionExpiryOneWeek
		return nil
	case InteractionExpiryOneMonth:
		*s = InteractionExpiryOneMonth
		return nil
	case InteractionExpirySixMonths:
		*s = InteractionExpirySixMonths
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of GitHub user that can comment, open issues, or create pull requests while the
// interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`,
// `collaborators_only`.
// Ref: #/components/schemas/interaction-group
type InteractionGroup string

const (
	InteractionGroupExistingUsers     InteractionGroup = "existing_users"
	InteractionGroupContributorsOnly  InteractionGroup = "contributors_only"
	InteractionGroupCollaboratorsOnly InteractionGroup = "collaborators_only"
)

// MarshalText implements encoding.TextMarshaler.
func (s InteractionGroup) MarshalText() ([]byte, error) {
	switch s {
	case InteractionGroupExistingUsers:
		return []byte(s), nil
	case InteractionGroupContributorsOnly:
		return []byte(s), nil
	case InteractionGroupCollaboratorsOnly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InteractionGroup) UnmarshalText(data []byte) error {
	switch InteractionGroup(data) {
	case InteractionGroupExistingUsers:
		*s = InteractionGroupExistingUsers
		return nil
	case InteractionGroupContributorsOnly:
		*s = InteractionGroupContributorsOnly
		return nil
	case InteractionGroupCollaboratorsOnly:
		*s = InteractionGroupCollaboratorsOnly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Limit interactions to a specific type of user for a specified duration.
// Ref: #/components/schemas/interaction-limit
type InteractionLimit struct {
	Limit  InteractionGroup     `json:"limit"`
	Expiry OptInteractionExpiry `json:"expiry"`
}

// GetLimit returns the value of Limit.
func (s *InteractionLimit) GetLimit() InteractionGroup {
	return s.Limit
}

// GetExpiry returns the value of Expiry.
func (s *InteractionLimit) GetExpiry() OptInteractionExpiry {
	return s.Expiry
}

// SetLimit sets the value of Limit.
func (s *InteractionLimit) SetLimit(val InteractionGroup) {
	s.Limit = val
}

// SetExpiry sets the value of Expiry.
func (s *InteractionLimit) SetExpiry(val OptInteractionExpiry) {
	s.Expiry = val
}

// Interaction limit settings.
// Ref: #/components/schemas/interaction-limit-response
type InteractionLimitResponse struct {
	Limit     InteractionGroup `json:"limit"`
	Origin    string           `json:"origin"`
	ExpiresAt time.Time        `json:"expires_at"`
}

// GetLimit returns the value of Limit.
func (s *InteractionLimitResponse) GetLimit() InteractionGroup {
	return s.Limit
}

// GetOrigin returns the value of Origin.
func (s *InteractionLimitResponse) GetOrigin() string {
	return s.Origin
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *InteractionLimitResponse) GetExpiresAt() time.Time {
	return s.ExpiresAt
}

// SetLimit sets the value of Limit.
func (s *InteractionLimitResponse) SetLimit(val InteractionGroup) {
	s.Limit = val
}

// SetOrigin sets the value of Origin.
func (s *InteractionLimitResponse) SetOrigin(val string) {
	s.Origin = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *InteractionLimitResponse) SetExpiresAt(val time.Time) {
	s.ExpiresAt = val
}

func (*InteractionLimitResponse) interactionsSetRestrictionsForAuthenticatedUserRes() {}
func (*InteractionLimitResponse) interactionsSetRestrictionsForOrgRes()               {}
func (*InteractionLimitResponse) interactionsSetRestrictionsForRepoRes()              {}

// InteractionsRemoveRestrictionsForAuthenticatedUserNoContent is response for InteractionsRemoveRestrictionsForAuthenticatedUser operation.
type InteractionsRemoveRestrictionsForAuthenticatedUserNoContent struct{}

// InteractionsRemoveRestrictionsForOrgNoContent is response for InteractionsRemoveRestrictionsForOrg operation.
type InteractionsRemoveRestrictionsForOrgNoContent struct{}

// InteractionsRemoveRestrictionsForRepoConflict is response for InteractionsRemoveRestrictionsForRepo operation.
type InteractionsRemoveRestrictionsForRepoConflict struct{}

func (*InteractionsRemoveRestrictionsForRepoConflict) interactionsRemoveRestrictionsForRepoRes() {}

// InteractionsRemoveRestrictionsForRepoNoContent is response for InteractionsRemoveRestrictionsForRepo operation.
type InteractionsRemoveRestrictionsForRepoNoContent struct{}

func (*InteractionsRemoveRestrictionsForRepoNoContent) interactionsRemoveRestrictionsForRepoRes() {}

// InteractionsSetRestrictionsForRepoConflict is response for InteractionsSetRestrictionsForRepo operation.
type InteractionsSetRestrictionsForRepoConflict struct{}

func (*InteractionsSetRestrictionsForRepoConflict) interactionsSetRestrictionsForRepoRes() {}

// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
// Ref: #/components/schemas/issue
type Issue struct {
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// URL for the issue.
	URL           url.URL `json:"url"`
	RepositoryURL url.URL `json:"repository_url"`
	LabelsURL     string  `json:"labels_url"`
	CommentsURL   url.URL `json:"comments_url"`
	EventsURL     url.URL `json:"events_url"`
	HTMLURL       url.URL `json:"html_url"`
	// Number uniquely identifying the issue within its repository.
	Number int `json:"number"`
	// State of the issue; either 'open' or 'closed'.
	State string `json:"state"`
	// Title of the issue.
	Title string `json:"title"`
	// Contents of the issue.
	Body OptNilString          `json:"body"`
	User NilNullableSimpleUser `json:"user"`
	// Labels to associate with this issue; pass one or more label names to replace the set of labels on
	// this issue; send an empty array to clear all labels from the issue; note that the labels are
	// silently dropped for users without push access to the repository.
	Labels                []IssueLabelsItem         `json:"labels"`
	Assignee              NilNullableSimpleUser     `json:"assignee"`
	Assignees             OptNilSimpleUserArray     `json:"assignees"`
	Milestone             NilNullableMilestone      `json:"milestone"`
	Locked                bool                      `json:"locked"`
	ActiveLockReason      OptNilString              `json:"active_lock_reason"`
	Comments              int                       `json:"comments"`
	PullRequest           OptIssuePullRequest       `json:"pull_request"`
	ClosedAt              NilDateTime               `json:"closed_at"`
	CreatedAt             time.Time                 `json:"created_at"`
	UpdatedAt             time.Time                 `json:"updated_at"`
	ClosedBy              OptNilNullableSimpleUser  `json:"closed_by"`
	BodyHTML              OptString                 `json:"body_html"`
	BodyText              OptString                 `json:"body_text"`
	TimelineURL           OptURI                    `json:"timeline_url"`
	Repository            OptRepository             `json:"repository"`
	PerformedViaGithubApp OptNilNullableIntegration `json:"performed_via_github_app"`
	AuthorAssociation     AuthorAssociation         `json:"author_association"`
	Reactions             OptReactionRollup         `json:"reactions"`
}

// GetID returns the value of ID.
func (s *Issue) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Issue) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *Issue) GetURL() url.URL {
	return s.URL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *Issue) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *Issue) GetLabelsURL() string {
	return s.LabelsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *Issue) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *Issue) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Issue) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetNumber returns the value of Number.
func (s *Issue) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *Issue) GetState() string {
	return s.State
}

// GetTitle returns the value of Title.
func (s *Issue) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *Issue) GetBody() OptNilString {
	return s.Body
}

// GetUser returns the value of User.
func (s *Issue) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetLabels returns the value of Labels.
func (s *Issue) GetLabels() []IssueLabelsItem {
	return s.Labels
}

// GetAssignee returns the value of Assignee.
func (s *Issue) GetAssignee() NilNullableSimpleUser {
	return s.Assignee
}

// GetAssignees returns the value of Assignees.
func (s *Issue) GetAssignees() OptNilSimpleUserArray {
	return s.Assignees
}

// GetMilestone returns the value of Milestone.
func (s *Issue) GetMilestone() NilNullableMilestone {
	return s.Milestone
}

// GetLocked returns the value of Locked.
func (s *Issue) GetLocked() bool {
	return s.Locked
}

// GetActiveLockReason returns the value of ActiveLockReason.
func (s *Issue) GetActiveLockReason() OptNilString {
	return s.ActiveLockReason
}

// GetComments returns the value of Comments.
func (s *Issue) GetComments() int {
	return s.Comments
}

// GetPullRequest returns the value of PullRequest.
func (s *Issue) GetPullRequest() OptIssuePullRequest {
	return s.PullRequest
}

// GetClosedAt returns the value of ClosedAt.
func (s *Issue) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Issue) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Issue) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetClosedBy returns the value of ClosedBy.
func (s *Issue) GetClosedBy() OptNilNullableSimpleUser {
	return s.ClosedBy
}

// GetBodyHTML returns the value of BodyHTML.
func (s *Issue) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetBodyText returns the value of BodyText.
func (s *Issue) GetBodyText() OptString {
	return s.BodyText
}

// GetTimelineURL returns the value of TimelineURL.
func (s *Issue) GetTimelineURL() OptURI {
	return s.TimelineURL
}

// GetRepository returns the value of Repository.
func (s *Issue) GetRepository() OptRepository {
	return s.Repository
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *Issue) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *Issue) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetReactions returns the value of Reactions.
func (s *Issue) GetReactions() OptReactionRollup {
	return s.Reactions
}

// SetID sets the value of ID.
func (s *Issue) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Issue) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *Issue) SetURL(val url.URL) {
	s.URL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *Issue) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *Issue) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *Issue) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *Issue) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Issue) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetNumber sets the value of Number.
func (s *Issue) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *Issue) SetState(val string) {
	s.State = val
}

// SetTitle sets the value of Title.
func (s *Issue) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *Issue) SetBody(val OptNilString) {
	s.Body = val
}

// SetUser sets the value of User.
func (s *Issue) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetLabels sets the value of Labels.
func (s *Issue) SetLabels(val []IssueLabelsItem) {
	s.Labels = val
}

// SetAssignee sets the value of Assignee.
func (s *Issue) SetAssignee(val NilNullableSimpleUser) {
	s.Assignee = val
}

// SetAssignees sets the value of Assignees.
func (s *Issue) SetAssignees(val OptNilSimpleUserArray) {
	s.Assignees = val
}

// SetMilestone sets the value of Milestone.
func (s *Issue) SetMilestone(val NilNullableMilestone) {
	s.Milestone = val
}

// SetLocked sets the value of Locked.
func (s *Issue) SetLocked(val bool) {
	s.Locked = val
}

// SetActiveLockReason sets the value of ActiveLockReason.
func (s *Issue) SetActiveLockReason(val OptNilString) {
	s.ActiveLockReason = val
}

// SetComments sets the value of Comments.
func (s *Issue) SetComments(val int) {
	s.Comments = val
}

// SetPullRequest sets the value of PullRequest.
func (s *Issue) SetPullRequest(val OptIssuePullRequest) {
	s.PullRequest = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *Issue) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Issue) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Issue) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetClosedBy sets the value of ClosedBy.
func (s *Issue) SetClosedBy(val OptNilNullableSimpleUser) {
	s.ClosedBy = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *Issue) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetBodyText sets the value of BodyText.
func (s *Issue) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetTimelineURL sets the value of TimelineURL.
func (s *Issue) SetTimelineURL(val OptURI) {
	s.TimelineURL = val
}

// SetRepository sets the value of Repository.
func (s *Issue) SetRepository(val OptRepository) {
	s.Repository = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *Issue) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *Issue) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetReactions sets the value of Reactions.
func (s *Issue) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

func (*Issue) issuesGetRes()    {}
func (*Issue) issuesUpdateRes() {}

// Comments provide a way for people to collaborate on an issue.
// Ref: #/components/schemas/issue-comment
type IssueComment struct {
	// Unique identifier of the issue comment.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// URL for the issue comment.
	URL url.URL `json:"url"`
	// Contents of the issue comment.
	Body                  OptString                 `json:"body"`
	BodyText              OptString                 `json:"body_text"`
	BodyHTML              OptString                 `json:"body_html"`
	HTMLURL               url.URL                   `json:"html_url"`
	User                  NilNullableSimpleUser     `json:"user"`
	CreatedAt             time.Time                 `json:"created_at"`
	UpdatedAt             time.Time                 `json:"updated_at"`
	IssueURL              url.URL                   `json:"issue_url"`
	AuthorAssociation     AuthorAssociation         `json:"author_association"`
	PerformedViaGithubApp OptNilNullableIntegration `json:"performed_via_github_app"`
	Reactions             OptReactionRollup         `json:"reactions"`
}

// GetID returns the value of ID.
func (s *IssueComment) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *IssueComment) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *IssueComment) GetURL() url.URL {
	return s.URL
}

// GetBody returns the value of Body.
func (s *IssueComment) GetBody() OptString {
	return s.Body
}

// GetBodyText returns the value of BodyText.
func (s *IssueComment) GetBodyText() OptString {
	return s.BodyText
}

// GetBodyHTML returns the value of BodyHTML.
func (s *IssueComment) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetHTMLURL returns the value of HTMLURL.
func (s *IssueComment) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetUser returns the value of User.
func (s *IssueComment) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetCreatedAt returns the value of CreatedAt.
func (s *IssueComment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *IssueComment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetIssueURL returns the value of IssueURL.
func (s *IssueComment) GetIssueURL() url.URL {
	return s.IssueURL
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *IssueComment) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *IssueComment) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// GetReactions returns the value of Reactions.
func (s *IssueComment) GetReactions() OptReactionRollup {
	return s.Reactions
}

// SetID sets the value of ID.
func (s *IssueComment) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *IssueComment) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *IssueComment) SetURL(val url.URL) {
	s.URL = val
}

// SetBody sets the value of Body.
func (s *IssueComment) SetBody(val OptString) {
	s.Body = val
}

// SetBodyText sets the value of BodyText.
func (s *IssueComment) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *IssueComment) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *IssueComment) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetUser sets the value of User.
func (s *IssueComment) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *IssueComment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *IssueComment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetIssueURL sets the value of IssueURL.
func (s *IssueComment) SetIssueURL(val url.URL) {
	s.IssueURL = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *IssueComment) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *IssueComment) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

// SetReactions sets the value of Reactions.
func (s *IssueComment) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

func (*IssueComment) issuesGetCommentRes()    {}
func (*IssueComment) issuesUpdateCommentRes() {}

// IssueCommentHeaders wraps IssueComment with response headers.
type IssueCommentHeaders struct {
	Location OptString
	Response IssueComment
}

// GetLocation returns the value of Location.
func (s *IssueCommentHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *IssueCommentHeaders) GetResponse() IssueComment {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *IssueCommentHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *IssueCommentHeaders) SetResponse(val IssueComment) {
	s.Response = val
}

func (*IssueCommentHeaders) issuesCreateCommentRes() {}

// Issue Event.
// Ref: #/components/schemas/issue-event
type IssueEvent struct {
	ID                    int                          `json:"id"`
	NodeID                string                       `json:"node_id"`
	URL                   url.URL                      `json:"url"`
	Actor                 NilNullableSimpleUser        `json:"actor"`
	Event                 string                       `json:"event"`
	CommitID              NilString                    `json:"commit_id"`
	CommitURL             NilString                    `json:"commit_url"`
	CreatedAt             time.Time                    `json:"created_at"`
	Issue                 OptIssueSimple               `json:"issue"`
	Label                 OptIssueEventLabel           `json:"label"`
	Assignee              OptNilNullableSimpleUser     `json:"assignee"`
	Assigner              OptNilNullableSimpleUser     `json:"assigner"`
	ReviewRequester       OptNilNullableSimpleUser     `json:"review_requester"`
	RequestedReviewer     OptNilNullableSimpleUser     `json:"requested_reviewer"`
	RequestedTeam         OptTeam                      `json:"requested_team"`
	DismissedReview       OptIssueEventDismissedReview `json:"dismissed_review"`
	Milestone             OptIssueEventMilestone       `json:"milestone"`
	ProjectCard           OptIssueEventProjectCard     `json:"project_card"`
	Rename                OptIssueEventRename          `json:"rename"`
	AuthorAssociation     OptAuthorAssociation         `json:"author_association"`
	LockReason            OptNilString                 `json:"lock_reason"`
	PerformedViaGithubApp OptNilNullableIntegration    `json:"performed_via_github_app"`
}

// GetID returns the value of ID.
func (s *IssueEvent) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *IssueEvent) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *IssueEvent) GetURL() url.URL {
	return s.URL
}

// GetActor returns the value of Actor.
func (s *IssueEvent) GetActor() NilNullableSimpleUser {
	return s.Actor
}

// GetEvent returns the value of Event.
func (s *IssueEvent) GetEvent() string {
	return s.Event
}

// GetCommitID returns the value of CommitID.
func (s *IssueEvent) GetCommitID() NilString {
	return s.CommitID
}

// GetCommitURL returns the value of CommitURL.
func (s *IssueEvent) GetCommitURL() NilString {
	return s.CommitURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *IssueEvent) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetIssue returns the value of Issue.
func (s *IssueEvent) GetIssue() OptIssueSimple {
	return s.Issue
}

// GetLabel returns the value of Label.
func (s *IssueEvent) GetLabel() OptIssueEventLabel {
	return s.Label
}

// GetAssignee returns the value of Assignee.
func (s *IssueEvent) GetAssignee() OptNilNullableSimpleUser {
	return s.Assignee
}

// GetAssigner returns the value of Assigner.
func (s *IssueEvent) GetAssigner() OptNilNullableSimpleUser {
	return s.Assigner
}

// GetReviewRequester returns the value of ReviewRequester.
func (s *IssueEvent) GetReviewRequester() OptNilNullableSimpleUser {
	return s.ReviewRequester
}

// GetRequestedReviewer returns the value of RequestedReviewer.
func (s *IssueEvent) GetRequestedReviewer() OptNilNullableSimpleUser {
	return s.RequestedReviewer
}

// GetRequestedTeam returns the value of RequestedTeam.
func (s *IssueEvent) GetRequestedTeam() OptTeam {
	return s.RequestedTeam
}

// GetDismissedReview returns the value of DismissedReview.
func (s *IssueEvent) GetDismissedReview() OptIssueEventDismissedReview {
	return s.DismissedReview
}

// GetMilestone returns the value of Milestone.
func (s *IssueEvent) GetMilestone() OptIssueEventMilestone {
	return s.Milestone
}

// GetProjectCard returns the value of ProjectCard.
func (s *IssueEvent) GetProjectCard() OptIssueEventProjectCard {
	return s.ProjectCard
}

// GetRename returns the value of Rename.
func (s *IssueEvent) GetRename() OptIssueEventRename {
	return s.Rename
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *IssueEvent) GetAuthorAssociation() OptAuthorAssociation {
	return s.AuthorAssociation
}

// GetLockReason returns the value of LockReason.
func (s *IssueEvent) GetLockReason() OptNilString {
	return s.LockReason
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *IssueEvent) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// SetID sets the value of ID.
func (s *IssueEvent) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *IssueEvent) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *IssueEvent) SetURL(val url.URL) {
	s.URL = val
}

// SetActor sets the value of Actor.
func (s *IssueEvent) SetActor(val NilNullableSimpleUser) {
	s.Actor = val
}

// SetEvent sets the value of Event.
func (s *IssueEvent) SetEvent(val string) {
	s.Event = val
}

// SetCommitID sets the value of CommitID.
func (s *IssueEvent) SetCommitID(val NilString) {
	s.CommitID = val
}

// SetCommitURL sets the value of CommitURL.
func (s *IssueEvent) SetCommitURL(val NilString) {
	s.CommitURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *IssueEvent) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetIssue sets the value of Issue.
func (s *IssueEvent) SetIssue(val OptIssueSimple) {
	s.Issue = val
}

// SetLabel sets the value of Label.
func (s *IssueEvent) SetLabel(val OptIssueEventLabel) {
	s.Label = val
}

// SetAssignee sets the value of Assignee.
func (s *IssueEvent) SetAssignee(val OptNilNullableSimpleUser) {
	s.Assignee = val
}

// SetAssigner sets the value of Assigner.
func (s *IssueEvent) SetAssigner(val OptNilNullableSimpleUser) {
	s.Assigner = val
}

// SetReviewRequester sets the value of ReviewRequester.
func (s *IssueEvent) SetReviewRequester(val OptNilNullableSimpleUser) {
	s.ReviewRequester = val
}

// SetRequestedReviewer sets the value of RequestedReviewer.
func (s *IssueEvent) SetRequestedReviewer(val OptNilNullableSimpleUser) {
	s.RequestedReviewer = val
}

// SetRequestedTeam sets the value of RequestedTeam.
func (s *IssueEvent) SetRequestedTeam(val OptTeam) {
	s.RequestedTeam = val
}

// SetDismissedReview sets the value of DismissedReview.
func (s *IssueEvent) SetDismissedReview(val OptIssueEventDismissedReview) {
	s.DismissedReview = val
}

// SetMilestone sets the value of Milestone.
func (s *IssueEvent) SetMilestone(val OptIssueEventMilestone) {
	s.Milestone = val
}

// SetProjectCard sets the value of ProjectCard.
func (s *IssueEvent) SetProjectCard(val OptIssueEventProjectCard) {
	s.ProjectCard = val
}

// SetRename sets the value of Rename.
func (s *IssueEvent) SetRename(val OptIssueEventRename) {
	s.Rename = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *IssueEvent) SetAuthorAssociation(val OptAuthorAssociation) {
	s.AuthorAssociation = val
}

// SetLockReason sets the value of LockReason.
func (s *IssueEvent) SetLockReason(val OptNilString) {
	s.LockReason = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *IssueEvent) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

func (*IssueEvent) issuesGetEventRes() {}

// Ref: #/components/schemas/issue-event-dismissed-review
type IssueEventDismissedReview struct {
	State             string       `json:"state"`
	ReviewID          int          `json:"review_id"`
	DismissalMessage  NilString    `json:"dismissal_message"`
	DismissalCommitID OptNilString `json:"dismissal_commit_id"`
}

// GetState returns the value of State.
func (s *IssueEventDismissedReview) GetState() string {
	return s.State
}

// GetReviewID returns the value of ReviewID.
func (s *IssueEventDismissedReview) GetReviewID() int {
	return s.ReviewID
}

// GetDismissalMessage returns the value of DismissalMessage.
func (s *IssueEventDismissedReview) GetDismissalMessage() NilString {
	return s.DismissalMessage
}

// GetDismissalCommitID returns the value of DismissalCommitID.
func (s *IssueEventDismissedReview) GetDismissalCommitID() OptNilString {
	return s.DismissalCommitID
}

// SetState sets the value of State.
func (s *IssueEventDismissedReview) SetState(val string) {
	s.State = val
}

// SetReviewID sets the value of ReviewID.
func (s *IssueEventDismissedReview) SetReviewID(val int) {
	s.ReviewID = val
}

// SetDismissalMessage sets the value of DismissalMessage.
func (s *IssueEventDismissedReview) SetDismissalMessage(val NilString) {
	s.DismissalMessage = val
}

// SetDismissalCommitID sets the value of DismissalCommitID.
func (s *IssueEventDismissedReview) SetDismissalCommitID(val OptNilString) {
	s.DismissalCommitID = val
}

// Issue Event Label.
// Ref: #/components/schemas/issue-event-label
type IssueEventLabel struct {
	Name  NilString `json:"name"`
	Color NilString `json:"color"`
}

// GetName returns the value of Name.
func (s *IssueEventLabel) GetName() NilString {
	return s.Name
}

// GetColor returns the value of Color.
func (s *IssueEventLabel) GetColor() NilString {
	return s.Color
}

// SetName sets the value of Name.
func (s *IssueEventLabel) SetName(val NilString) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *IssueEventLabel) SetColor(val NilString) {
	s.Color = val
}

// Issue Event Milestone.
// Ref: #/components/schemas/issue-event-milestone
type IssueEventMilestone struct {
	Title string `json:"title"`
}

// GetTitle returns the value of Title.
func (s *IssueEventMilestone) GetTitle() string {
	return s.Title
}

// SetTitle sets the value of Title.
func (s *IssueEventMilestone) SetTitle(val string) {
	s.Title = val
}

// Issue Event Project Card.
// Ref: #/components/schemas/issue-event-project-card
type IssueEventProjectCard struct {
	URL                url.URL   `json:"url"`
	ID                 int       `json:"id"`
	ProjectURL         url.URL   `json:"project_url"`
	ProjectID          int       `json:"project_id"`
	ColumnName         string    `json:"column_name"`
	PreviousColumnName OptString `json:"previous_column_name"`
}

// GetURL returns the value of URL.
func (s *IssueEventProjectCard) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *IssueEventProjectCard) GetID() int {
	return s.ID
}

// GetProjectURL returns the value of ProjectURL.
func (s *IssueEventProjectCard) GetProjectURL() url.URL {
	return s.ProjectURL
}

// GetProjectID returns the value of ProjectID.
func (s *IssueEventProjectCard) GetProjectID() int {
	return s.ProjectID
}

// GetColumnName returns the value of ColumnName.
func (s *IssueEventProjectCard) GetColumnName() string {
	return s.ColumnName
}

// GetPreviousColumnName returns the value of PreviousColumnName.
func (s *IssueEventProjectCard) GetPreviousColumnName() OptString {
	return s.PreviousColumnName
}

// SetURL sets the value of URL.
func (s *IssueEventProjectCard) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *IssueEventProjectCard) SetID(val int) {
	s.ID = val
}

// SetProjectURL sets the value of ProjectURL.
func (s *IssueEventProjectCard) SetProjectURL(val url.URL) {
	s.ProjectURL = val
}

// SetProjectID sets the value of ProjectID.
func (s *IssueEventProjectCard) SetProjectID(val int) {
	s.ProjectID = val
}

// SetColumnName sets the value of ColumnName.
func (s *IssueEventProjectCard) SetColumnName(val string) {
	s.ColumnName = val
}

// SetPreviousColumnName sets the value of PreviousColumnName.
func (s *IssueEventProjectCard) SetPreviousColumnName(val OptString) {
	s.PreviousColumnName = val
}

// Issue Event Rename.
// Ref: #/components/schemas/issue-event-rename
type IssueEventRename struct {
	From string `json:"from"`
	To   string `json:"to"`
}

// GetFrom returns the value of From.
func (s *IssueEventRename) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *IssueEventRename) GetTo() string {
	return s.To
}

// SetFrom sets the value of From.
func (s *IssueEventRename) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *IssueEventRename) SetTo(val string) {
	s.To = val
}

// IssueHeaders wraps Issue with response headers.
type IssueHeaders struct {
	Location OptString
	Response Issue
}

// GetLocation returns the value of Location.
func (s *IssueHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *IssueHeaders) GetResponse() Issue {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *IssueHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *IssueHeaders) SetResponse(val Issue) {
	s.Response = val
}

func (*IssueHeaders) issuesCreateRes() {}

// IssueLabelsItem represents sum type.
type IssueLabelsItem struct {
	Type             IssueLabelsItemType // switch on this field
	String           string
	IssueLabelsItem1 IssueLabelsItem1
}

// IssueLabelsItemType is oneOf type of IssueLabelsItem.
type IssueLabelsItemType string

// Possible values for IssueLabelsItemType.
const (
	StringIssueLabelsItem           IssueLabelsItemType = "string"
	IssueLabelsItem1IssueLabelsItem IssueLabelsItemType = "IssueLabelsItem1"
)

// IsString reports whether IssueLabelsItem is string.
func (s IssueLabelsItem) IsString() bool { return s.Type == StringIssueLabelsItem }

// IsIssueLabelsItem1 reports whether IssueLabelsItem is IssueLabelsItem1.
func (s IssueLabelsItem) IsIssueLabelsItem1() bool { return s.Type == IssueLabelsItem1IssueLabelsItem }

// SetString sets IssueLabelsItem to string.
func (s *IssueLabelsItem) SetString(v string) {
	s.Type = StringIssueLabelsItem
	s.String = v
}

// GetString returns string and true boolean if IssueLabelsItem is string.
func (s IssueLabelsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssueLabelsItem returns new IssueLabelsItem from string.
func NewStringIssueLabelsItem(v string) IssueLabelsItem {
	var s IssueLabelsItem
	s.SetString(v)
	return s
}

// SetIssueLabelsItem1 sets IssueLabelsItem to IssueLabelsItem1.
func (s *IssueLabelsItem) SetIssueLabelsItem1(v IssueLabelsItem1) {
	s.Type = IssueLabelsItem1IssueLabelsItem
	s.IssueLabelsItem1 = v
}

// GetIssueLabelsItem1 returns IssueLabelsItem1 and true boolean if IssueLabelsItem is IssueLabelsItem1.
func (s IssueLabelsItem) GetIssueLabelsItem1() (v IssueLabelsItem1, ok bool) {
	if !s.IsIssueLabelsItem1() {
		return v, false
	}
	return s.IssueLabelsItem1, true
}

// NewIssueLabelsItem1IssueLabelsItem returns new IssueLabelsItem from IssueLabelsItem1.
func NewIssueLabelsItem1IssueLabelsItem(v IssueLabelsItem1) IssueLabelsItem {
	var s IssueLabelsItem
	s.SetIssueLabelsItem1(v)
	return s
}

type IssueLabelsItem1 struct {
	ID          OptInt64     `json:"id"`
	NodeID      OptString    `json:"node_id"`
	URL         OptURI       `json:"url"`
	Name        OptString    `json:"name"`
	Description OptNilString `json:"description"`
	Color       OptNilString `json:"color"`
	Default     OptBool      `json:"default"`
}

// GetID returns the value of ID.
func (s *IssueLabelsItem1) GetID() OptInt64 {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *IssueLabelsItem1) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *IssueLabelsItem1) GetURL() OptURI {
	return s.URL
}

// GetName returns the value of Name.
func (s *IssueLabelsItem1) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *IssueLabelsItem1) GetDescription() OptNilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *IssueLabelsItem1) GetColor() OptNilString {
	return s.Color
}

// GetDefault returns the value of Default.
func (s *IssueLabelsItem1) GetDefault() OptBool {
	return s.Default
}

// SetID sets the value of ID.
func (s *IssueLabelsItem1) SetID(val OptInt64) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *IssueLabelsItem1) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *IssueLabelsItem1) SetURL(val OptURI) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *IssueLabelsItem1) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *IssueLabelsItem1) SetDescription(val OptNilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *IssueLabelsItem1) SetColor(val OptNilString) {
	s.Color = val
}

// SetDefault sets the value of Default.
func (s *IssueLabelsItem1) SetDefault(val OptBool) {
	s.Default = val
}

type IssuePullRequest struct {
	MergedAt OptNilDateTime `json:"merged_at"`
	DiffURL  NilURI         `json:"diff_url"`
	HTMLURL  NilURI         `json:"html_url"`
	PatchURL NilURI         `json:"patch_url"`
	URL      NilURI         `json:"url"`
}

// GetMergedAt returns the value of MergedAt.
func (s *IssuePullRequest) GetMergedAt() OptNilDateTime {
	return s.MergedAt
}

// GetDiffURL returns the value of DiffURL.
func (s *IssuePullRequest) GetDiffURL() NilURI {
	return s.DiffURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *IssuePullRequest) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// GetPatchURL returns the value of PatchURL.
func (s *IssuePullRequest) GetPatchURL() NilURI {
	return s.PatchURL
}

// GetURL returns the value of URL.
func (s *IssuePullRequest) GetURL() NilURI {
	return s.URL
}

// SetMergedAt sets the value of MergedAt.
func (s *IssuePullRequest) SetMergedAt(val OptNilDateTime) {
	s.MergedAt = val
}

// SetDiffURL sets the value of DiffURL.
func (s *IssuePullRequest) SetDiffURL(val NilURI) {
	s.DiffURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *IssuePullRequest) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// SetPatchURL sets the value of PatchURL.
func (s *IssuePullRequest) SetPatchURL(val NilURI) {
	s.PatchURL = val
}

// SetURL sets the value of URL.
func (s *IssuePullRequest) SetURL(val NilURI) {
	s.URL = val
}

// Issue Search Result Item.
// Ref: #/components/schemas/issue-search-result-item
type IssueSearchResultItem struct {
	URL                   url.URL                             `json:"url"`
	RepositoryURL         url.URL                             `json:"repository_url"`
	LabelsURL             string                              `json:"labels_url"`
	CommentsURL           url.URL                             `json:"comments_url"`
	EventsURL             url.URL                             `json:"events_url"`
	HTMLURL               url.URL                             `json:"html_url"`
	ID                    int                                 `json:"id"`
	NodeID                string                              `json:"node_id"`
	Number                int                                 `json:"number"`
	Title                 string                              `json:"title"`
	Locked                bool                                `json:"locked"`
	ActiveLockReason      OptNilString                        `json:"active_lock_reason"`
	Assignees             OptNilSimpleUserArray               `json:"assignees"`
	User                  NilNullableSimpleUser               `json:"user"`
	Labels                []IssueSearchResultItemLabelsItem   `json:"labels"`
	State                 string                              `json:"state"`
	Assignee              NilNullableSimpleUser               `json:"assignee"`
	Milestone             NilNullableMilestone                `json:"milestone"`
	Comments              int                                 `json:"comments"`
	CreatedAt             time.Time                           `json:"created_at"`
	UpdatedAt             time.Time                           `json:"updated_at"`
	ClosedAt              NilDateTime                         `json:"closed_at"`
	TextMatches           *SearchResultTextMatches            `json:"text_matches"`
	PullRequest           OptIssueSearchResultItemPullRequest `json:"pull_request"`
	Body                  OptString                           `json:"body"`
	Score                 float64                             `json:"score"`
	AuthorAssociation     AuthorAssociation                   `json:"author_association"`
	Draft                 OptBool                             `json:"draft"`
	Repository            OptRepository                       `json:"repository"`
	BodyHTML              OptString                           `json:"body_html"`
	BodyText              OptString                           `json:"body_text"`
	TimelineURL           OptURI                              `json:"timeline_url"`
	PerformedViaGithubApp OptNilNullableIntegration           `json:"performed_via_github_app"`
}

// GetURL returns the value of URL.
func (s *IssueSearchResultItem) GetURL() url.URL {
	return s.URL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *IssueSearchResultItem) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *IssueSearchResultItem) GetLabelsURL() string {
	return s.LabelsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *IssueSearchResultItem) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *IssueSearchResultItem) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *IssueSearchResultItem) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *IssueSearchResultItem) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *IssueSearchResultItem) GetNodeID() string {
	return s.NodeID
}

// GetNumber returns the value of Number.
func (s *IssueSearchResultItem) GetNumber() int {
	return s.Number
}

// GetTitle returns the value of Title.
func (s *IssueSearchResultItem) GetTitle() string {
	return s.Title
}

// GetLocked returns the value of Locked.
func (s *IssueSearchResultItem) GetLocked() bool {
	return s.Locked
}

// GetActiveLockReason returns the value of ActiveLockReason.
func (s *IssueSearchResultItem) GetActiveLockReason() OptNilString {
	return s.ActiveLockReason
}

// GetAssignees returns the value of Assignees.
func (s *IssueSearchResultItem) GetAssignees() OptNilSimpleUserArray {
	return s.Assignees
}

// GetUser returns the value of User.
func (s *IssueSearchResultItem) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetLabels returns the value of Labels.
func (s *IssueSearchResultItem) GetLabels() []IssueSearchResultItemLabelsItem {
	return s.Labels
}

// GetState returns the value of State.
func (s *IssueSearchResultItem) GetState() string {
	return s.State
}

// GetAssignee returns the value of Assignee.
func (s *IssueSearchResultItem) GetAssignee() NilNullableSimpleUser {
	return s.Assignee
}

// GetMilestone returns the value of Milestone.
func (s *IssueSearchResultItem) GetMilestone() NilNullableMilestone {
	return s.Milestone
}

// GetComments returns the value of Comments.
func (s *IssueSearchResultItem) GetComments() int {
	return s.Comments
}

// GetCreatedAt returns the value of CreatedAt.
func (s *IssueSearchResultItem) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *IssueSearchResultItem) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetClosedAt returns the value of ClosedAt.
func (s *IssueSearchResultItem) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetTextMatches returns the value of TextMatches.
func (s *IssueSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// GetPullRequest returns the value of PullRequest.
func (s *IssueSearchResultItem) GetPullRequest() OptIssueSearchResultItemPullRequest {
	return s.PullRequest
}

// GetBody returns the value of Body.
func (s *IssueSearchResultItem) GetBody() OptString {
	return s.Body
}

// GetScore returns the value of Score.
func (s *IssueSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *IssueSearchResultItem) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetDraft returns the value of Draft.
func (s *IssueSearchResultItem) GetDraft() OptBool {
	return s.Draft
}

// GetRepository returns the value of Repository.
func (s *IssueSearchResultItem) GetRepository() OptRepository {
	return s.Repository
}

// GetBodyHTML returns the value of BodyHTML.
func (s *IssueSearchResultItem) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetBodyText returns the value of BodyText.
func (s *IssueSearchResultItem) GetBodyText() OptString {
	return s.BodyText
}

// GetTimelineURL returns the value of TimelineURL.
func (s *IssueSearchResultItem) GetTimelineURL() OptURI {
	return s.TimelineURL
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *IssueSearchResultItem) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// SetURL sets the value of URL.
func (s *IssueSearchResultItem) SetURL(val url.URL) {
	s.URL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *IssueSearchResultItem) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *IssueSearchResultItem) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *IssueSearchResultItem) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *IssueSearchResultItem) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *IssueSearchResultItem) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *IssueSearchResultItem) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *IssueSearchResultItem) SetNodeID(val string) {
	s.NodeID = val
}

// SetNumber sets the value of Number.
func (s *IssueSearchResultItem) SetNumber(val int) {
	s.Number = val
}

// SetTitle sets the value of Title.
func (s *IssueSearchResultItem) SetTitle(val string) {
	s.Title = val
}

// SetLocked sets the value of Locked.
func (s *IssueSearchResultItem) SetLocked(val bool) {
	s.Locked = val
}

// SetActiveLockReason sets the value of ActiveLockReason.
func (s *IssueSearchResultItem) SetActiveLockReason(val OptNilString) {
	s.ActiveLockReason = val
}

// SetAssignees sets the value of Assignees.
func (s *IssueSearchResultItem) SetAssignees(val OptNilSimpleUserArray) {
	s.Assignees = val
}

// SetUser sets the value of User.
func (s *IssueSearchResultItem) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetLabels sets the value of Labels.
func (s *IssueSearchResultItem) SetLabels(val []IssueSearchResultItemLabelsItem) {
	s.Labels = val
}

// SetState sets the value of State.
func (s *IssueSearchResultItem) SetState(val string) {
	s.State = val
}

// SetAssignee sets the value of Assignee.
func (s *IssueSearchResultItem) SetAssignee(val NilNullableSimpleUser) {
	s.Assignee = val
}

// SetMilestone sets the value of Milestone.
func (s *IssueSearchResultItem) SetMilestone(val NilNullableMilestone) {
	s.Milestone = val
}

// SetComments sets the value of Comments.
func (s *IssueSearchResultItem) SetComments(val int) {
	s.Comments = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *IssueSearchResultItem) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *IssueSearchResultItem) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *IssueSearchResultItem) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetTextMatches sets the value of TextMatches.
func (s *IssueSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

// SetPullRequest sets the value of PullRequest.
func (s *IssueSearchResultItem) SetPullRequest(val OptIssueSearchResultItemPullRequest) {
	s.PullRequest = val
}

// SetBody sets the value of Body.
func (s *IssueSearchResultItem) SetBody(val OptString) {
	s.Body = val
}

// SetScore sets the value of Score.
func (s *IssueSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *IssueSearchResultItem) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetDraft sets the value of Draft.
func (s *IssueSearchResultItem) SetDraft(val OptBool) {
	s.Draft = val
}

// SetRepository sets the value of Repository.
func (s *IssueSearchResultItem) SetRepository(val OptRepository) {
	s.Repository = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *IssueSearchResultItem) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetBodyText sets the value of BodyText.
func (s *IssueSearchResultItem) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetTimelineURL sets the value of TimelineURL.
func (s *IssueSearchResultItem) SetTimelineURL(val OptURI) {
	s.TimelineURL = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *IssueSearchResultItem) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

type IssueSearchResultItemLabelsItem struct {
	ID          OptInt64     `json:"id"`
	NodeID      OptString    `json:"node_id"`
	URL         OptString    `json:"url"`
	Name        OptString    `json:"name"`
	Color       OptString    `json:"color"`
	Default     OptBool      `json:"default"`
	Description OptNilString `json:"description"`
}

// GetID returns the value of ID.
func (s *IssueSearchResultItemLabelsItem) GetID() OptInt64 {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *IssueSearchResultItemLabelsItem) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *IssueSearchResultItemLabelsItem) GetURL() OptString {
	return s.URL
}

// GetName returns the value of Name.
func (s *IssueSearchResultItemLabelsItem) GetName() OptString {
	return s.Name
}

// GetColor returns the value of Color.
func (s *IssueSearchResultItemLabelsItem) GetColor() OptString {
	return s.Color
}

// GetDefault returns the value of Default.
func (s *IssueSearchResultItemLabelsItem) GetDefault() OptBool {
	return s.Default
}

// GetDescription returns the value of Description.
func (s *IssueSearchResultItemLabelsItem) GetDescription() OptNilString {
	return s.Description
}

// SetID sets the value of ID.
func (s *IssueSearchResultItemLabelsItem) SetID(val OptInt64) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *IssueSearchResultItemLabelsItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *IssueSearchResultItemLabelsItem) SetURL(val OptString) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *IssueSearchResultItemLabelsItem) SetName(val OptString) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *IssueSearchResultItemLabelsItem) SetColor(val OptString) {
	s.Color = val
}

// SetDefault sets the value of Default.
func (s *IssueSearchResultItemLabelsItem) SetDefault(val OptBool) {
	s.Default = val
}

// SetDescription sets the value of Description.
func (s *IssueSearchResultItemLabelsItem) SetDescription(val OptNilString) {
	s.Description = val
}

type IssueSearchResultItemPullRequest struct {
	MergedAt OptNilDateTime `json:"merged_at"`
	DiffURL  NilURI         `json:"diff_url"`
	HTMLURL  NilURI         `json:"html_url"`
	PatchURL NilURI         `json:"patch_url"`
	URL      NilURI         `json:"url"`
}

// GetMergedAt returns the value of MergedAt.
func (s *IssueSearchResultItemPullRequest) GetMergedAt() OptNilDateTime {
	return s.MergedAt
}

// GetDiffURL returns the value of DiffURL.
func (s *IssueSearchResultItemPullRequest) GetDiffURL() NilURI {
	return s.DiffURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *IssueSearchResultItemPullRequest) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// GetPatchURL returns the value of PatchURL.
func (s *IssueSearchResultItemPullRequest) GetPatchURL() NilURI {
	return s.PatchURL
}

// GetURL returns the value of URL.
func (s *IssueSearchResultItemPullRequest) GetURL() NilURI {
	return s.URL
}

// SetMergedAt sets the value of MergedAt.
func (s *IssueSearchResultItemPullRequest) SetMergedAt(val OptNilDateTime) {
	s.MergedAt = val
}

// SetDiffURL sets the value of DiffURL.
func (s *IssueSearchResultItemPullRequest) SetDiffURL(val NilURI) {
	s.DiffURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *IssueSearchResultItemPullRequest) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// SetPatchURL sets the value of PatchURL.
func (s *IssueSearchResultItemPullRequest) SetPatchURL(val NilURI) {
	s.PatchURL = val
}

// SetURL sets the value of URL.
func (s *IssueSearchResultItemPullRequest) SetURL(val NilURI) {
	s.URL = val
}

// Issue Simple.
// Ref: #/components/schemas/issue-simple
type IssueSimple struct {
	ID                    int                       `json:"id"`
	NodeID                string                    `json:"node_id"`
	URL                   url.URL                   `json:"url"`
	RepositoryURL         url.URL                   `json:"repository_url"`
	LabelsURL             string                    `json:"labels_url"`
	CommentsURL           url.URL                   `json:"comments_url"`
	EventsURL             url.URL                   `json:"events_url"`
	HTMLURL               url.URL                   `json:"html_url"`
	Number                int                       `json:"number"`
	State                 string                    `json:"state"`
	Title                 string                    `json:"title"`
	Body                  OptString                 `json:"body"`
	User                  NilNullableSimpleUser     `json:"user"`
	Labels                []Label                   `json:"labels"`
	Assignee              NilNullableSimpleUser     `json:"assignee"`
	Assignees             OptNilSimpleUserArray     `json:"assignees"`
	Milestone             NilNullableMilestone      `json:"milestone"`
	Locked                bool                      `json:"locked"`
	ActiveLockReason      OptNilString              `json:"active_lock_reason"`
	Comments              int                       `json:"comments"`
	PullRequest           OptIssueSimplePullRequest `json:"pull_request"`
	ClosedAt              NilDateTime               `json:"closed_at"`
	CreatedAt             time.Time                 `json:"created_at"`
	UpdatedAt             time.Time                 `json:"updated_at"`
	AuthorAssociation     AuthorAssociation         `json:"author_association"`
	BodyHTML              OptString                 `json:"body_html"`
	BodyText              OptString                 `json:"body_text"`
	TimelineURL           OptURI                    `json:"timeline_url"`
	Repository            OptRepository             `json:"repository"`
	PerformedViaGithubApp OptNilNullableIntegration `json:"performed_via_github_app"`
}

// GetID returns the value of ID.
func (s *IssueSimple) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *IssueSimple) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *IssueSimple) GetURL() url.URL {
	return s.URL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *IssueSimple) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *IssueSimple) GetLabelsURL() string {
	return s.LabelsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *IssueSimple) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *IssueSimple) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *IssueSimple) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetNumber returns the value of Number.
func (s *IssueSimple) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *IssueSimple) GetState() string {
	return s.State
}

// GetTitle returns the value of Title.
func (s *IssueSimple) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *IssueSimple) GetBody() OptString {
	return s.Body
}

// GetUser returns the value of User.
func (s *IssueSimple) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetLabels returns the value of Labels.
func (s *IssueSimple) GetLabels() []Label {
	return s.Labels
}

// GetAssignee returns the value of Assignee.
func (s *IssueSimple) GetAssignee() NilNullableSimpleUser {
	return s.Assignee
}

// GetAssignees returns the value of Assignees.
func (s *IssueSimple) GetAssignees() OptNilSimpleUserArray {
	return s.Assignees
}

// GetMilestone returns the value of Milestone.
func (s *IssueSimple) GetMilestone() NilNullableMilestone {
	return s.Milestone
}

// GetLocked returns the value of Locked.
func (s *IssueSimple) GetLocked() bool {
	return s.Locked
}

// GetActiveLockReason returns the value of ActiveLockReason.
func (s *IssueSimple) GetActiveLockReason() OptNilString {
	return s.ActiveLockReason
}

// GetComments returns the value of Comments.
func (s *IssueSimple) GetComments() int {
	return s.Comments
}

// GetPullRequest returns the value of PullRequest.
func (s *IssueSimple) GetPullRequest() OptIssueSimplePullRequest {
	return s.PullRequest
}

// GetClosedAt returns the value of ClosedAt.
func (s *IssueSimple) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *IssueSimple) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *IssueSimple) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *IssueSimple) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetBodyHTML returns the value of BodyHTML.
func (s *IssueSimple) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetBodyText returns the value of BodyText.
func (s *IssueSimple) GetBodyText() OptString {
	return s.BodyText
}

// GetTimelineURL returns the value of TimelineURL.
func (s *IssueSimple) GetTimelineURL() OptURI {
	return s.TimelineURL
}

// GetRepository returns the value of Repository.
func (s *IssueSimple) GetRepository() OptRepository {
	return s.Repository
}

// GetPerformedViaGithubApp returns the value of PerformedViaGithubApp.
func (s *IssueSimple) GetPerformedViaGithubApp() OptNilNullableIntegration {
	return s.PerformedViaGithubApp
}

// SetID sets the value of ID.
func (s *IssueSimple) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *IssueSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *IssueSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *IssueSimple) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *IssueSimple) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *IssueSimple) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *IssueSimple) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *IssueSimple) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetNumber sets the value of Number.
func (s *IssueSimple) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *IssueSimple) SetState(val string) {
	s.State = val
}

// SetTitle sets the value of Title.
func (s *IssueSimple) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *IssueSimple) SetBody(val OptString) {
	s.Body = val
}

// SetUser sets the value of User.
func (s *IssueSimple) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetLabels sets the value of Labels.
func (s *IssueSimple) SetLabels(val []Label) {
	s.Labels = val
}

// SetAssignee sets the value of Assignee.
func (s *IssueSimple) SetAssignee(val NilNullableSimpleUser) {
	s.Assignee = val
}

// SetAssignees sets the value of Assignees.
func (s *IssueSimple) SetAssignees(val OptNilSimpleUserArray) {
	s.Assignees = val
}

// SetMilestone sets the value of Milestone.
func (s *IssueSimple) SetMilestone(val NilNullableMilestone) {
	s.Milestone = val
}

// SetLocked sets the value of Locked.
func (s *IssueSimple) SetLocked(val bool) {
	s.Locked = val
}

// SetActiveLockReason sets the value of ActiveLockReason.
func (s *IssueSimple) SetActiveLockReason(val OptNilString) {
	s.ActiveLockReason = val
}

// SetComments sets the value of Comments.
func (s *IssueSimple) SetComments(val int) {
	s.Comments = val
}

// SetPullRequest sets the value of PullRequest.
func (s *IssueSimple) SetPullRequest(val OptIssueSimplePullRequest) {
	s.PullRequest = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *IssueSimple) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *IssueSimple) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *IssueSimple) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *IssueSimple) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *IssueSimple) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetBodyText sets the value of BodyText.
func (s *IssueSimple) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetTimelineURL sets the value of TimelineURL.
func (s *IssueSimple) SetTimelineURL(val OptURI) {
	s.TimelineURL = val
}

// SetRepository sets the value of Repository.
func (s *IssueSimple) SetRepository(val OptRepository) {
	s.Repository = val
}

// SetPerformedViaGithubApp sets the value of PerformedViaGithubApp.
func (s *IssueSimple) SetPerformedViaGithubApp(val OptNilNullableIntegration) {
	s.PerformedViaGithubApp = val
}

type IssueSimplePullRequest struct {
	MergedAt OptNilDateTime `json:"merged_at"`
	DiffURL  NilURI         `json:"diff_url"`
	HTMLURL  NilURI         `json:"html_url"`
	PatchURL NilURI         `json:"patch_url"`
	URL      NilURI         `json:"url"`
}

// GetMergedAt returns the value of MergedAt.
func (s *IssueSimplePullRequest) GetMergedAt() OptNilDateTime {
	return s.MergedAt
}

// GetDiffURL returns the value of DiffURL.
func (s *IssueSimplePullRequest) GetDiffURL() NilURI {
	return s.DiffURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *IssueSimplePullRequest) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// GetPatchURL returns the value of PatchURL.
func (s *IssueSimplePullRequest) GetPatchURL() NilURI {
	return s.PatchURL
}

// GetURL returns the value of URL.
func (s *IssueSimplePullRequest) GetURL() NilURI {
	return s.URL
}

// SetMergedAt sets the value of MergedAt.
func (s *IssueSimplePullRequest) SetMergedAt(val OptNilDateTime) {
	s.MergedAt = val
}

// SetDiffURL sets the value of DiffURL.
func (s *IssueSimplePullRequest) SetDiffURL(val NilURI) {
	s.DiffURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *IssueSimplePullRequest) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// SetPatchURL sets the value of PatchURL.
func (s *IssueSimplePullRequest) SetPatchURL(val NilURI) {
	s.PatchURL = val
}

// SetURL sets the value of URL.
func (s *IssueSimplePullRequest) SetURL(val NilURI) {
	s.URL = val
}

type IssuesAddAssigneesReq struct {
	// Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees
	// to an issue. Assignees are silently ignored otherwise._.
	Assignees []string `json:"assignees"`
}

// GetAssignees returns the value of Assignees.
func (s *IssuesAddAssigneesReq) GetAssignees() []string {
	return s.Assignees
}

// SetAssignees sets the value of Assignees.
func (s *IssuesAddAssigneesReq) SetAssignees(val []string) {
	s.Assignees = val
}

// IssuesCheckUserCanBeAssignedNoContent is response for IssuesCheckUserCanBeAssigned operation.
type IssuesCheckUserCanBeAssignedNoContent struct{}

func (*IssuesCheckUserCanBeAssignedNoContent) issuesCheckUserCanBeAssignedRes() {}

type IssuesCreateCommentForbidden BasicError

func (*IssuesCreateCommentForbidden) issuesCreateCommentRes() {}

type IssuesCreateCommentGone BasicError

func (*IssuesCreateCommentGone) issuesCreateCommentRes() {}

type IssuesCreateCommentNotFound BasicError

func (*IssuesCreateCommentNotFound) issuesCreateCommentRes() {}

type IssuesCreateCommentReq struct {
	// The contents of the comment.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *IssuesCreateCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *IssuesCreateCommentReq) SetBody(val string) {
	s.Body = val
}

type IssuesCreateForbidden BasicError

func (*IssuesCreateForbidden) issuesCreateRes() {}

type IssuesCreateGone BasicError

func (*IssuesCreateGone) issuesCreateRes() {}

type IssuesCreateLabelReq struct {
	// The name of the label. Emoji can be added to label names, using either native emoji or colon-style
	// markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.
	// githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of
	// available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).
	// ".
	Name string `json:"name"`
	// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
	Color OptString `json:"color"`
	// A short description of the label.
	Description OptString `json:"description"`
}

// GetName returns the value of Name.
func (s *IssuesCreateLabelReq) GetName() string {
	return s.Name
}

// GetColor returns the value of Color.
func (s *IssuesCreateLabelReq) GetColor() OptString {
	return s.Color
}

// GetDescription returns the value of Description.
func (s *IssuesCreateLabelReq) GetDescription() OptString {
	return s.Description
}

// SetName sets the value of Name.
func (s *IssuesCreateLabelReq) SetName(val string) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *IssuesCreateLabelReq) SetColor(val OptString) {
	s.Color = val
}

// SetDescription sets the value of Description.
func (s *IssuesCreateLabelReq) SetDescription(val OptString) {
	s.Description = val
}

type IssuesCreateMilestoneReq struct {
	// The title of the milestone.
	Title string `json:"title"`
	// The state of the milestone. Either `open` or `closed`.
	State OptIssuesCreateMilestoneReqState `json:"state"`
	// A description of the milestone.
	Description OptString `json:"description"`
	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn OptDateTime `json:"due_on"`
}

// GetTitle returns the value of Title.
func (s *IssuesCreateMilestoneReq) GetTitle() string {
	return s.Title
}

// GetState returns the value of State.
func (s *IssuesCreateMilestoneReq) GetState() OptIssuesCreateMilestoneReqState {
	return s.State
}

// GetDescription returns the value of Description.
func (s *IssuesCreateMilestoneReq) GetDescription() OptString {
	return s.Description
}

// GetDueOn returns the value of DueOn.
func (s *IssuesCreateMilestoneReq) GetDueOn() OptDateTime {
	return s.DueOn
}

// SetTitle sets the value of Title.
func (s *IssuesCreateMilestoneReq) SetTitle(val string) {
	s.Title = val
}

// SetState sets the value of State.
func (s *IssuesCreateMilestoneReq) SetState(val OptIssuesCreateMilestoneReqState) {
	s.State = val
}

// SetDescription sets the value of Description.
func (s *IssuesCreateMilestoneReq) SetDescription(val OptString) {
	s.Description = val
}

// SetDueOn sets the value of DueOn.
func (s *IssuesCreateMilestoneReq) SetDueOn(val OptDateTime) {
	s.DueOn = val
}

// The state of the milestone. Either `open` or `closed`.
type IssuesCreateMilestoneReqState string

const (
	IssuesCreateMilestoneReqStateOpen   IssuesCreateMilestoneReqState = "open"
	IssuesCreateMilestoneReqStateClosed IssuesCreateMilestoneReqState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesCreateMilestoneReqState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesCreateMilestoneReqStateOpen:
		return []byte(s), nil
	case IssuesCreateMilestoneReqStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesCreateMilestoneReqState) UnmarshalText(data []byte) error {
	switch IssuesCreateMilestoneReqState(data) {
	case IssuesCreateMilestoneReqStateOpen:
		*s = IssuesCreateMilestoneReqStateOpen
		return nil
	case IssuesCreateMilestoneReqStateClosed:
		*s = IssuesCreateMilestoneReqStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesCreateNotFound BasicError

func (*IssuesCreateNotFound) issuesCreateRes() {}

type IssuesCreateReq struct {
	// The title of the issue.
	Title IssuesCreateReqTitle `json:"title"`
	// The contents of the issue.
	Body OptString `json:"body"`
	// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can
	// set the assignee for new issues. The assignee is silently dropped otherwise. **This field is
	// deprecated.**_.
	Assignee  OptNilString                   `json:"assignee"`
	Milestone OptNilIssuesCreateReqMilestone `json:"milestone"`
	// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new
	// issues. Labels are silently dropped otherwise._.
	Labels []IssuesCreateReqLabelsItem `json:"labels"`
	// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for
	// new issues. Assignees are silently dropped otherwise._.
	Assignees []string `json:"assignees"`
}

// GetTitle returns the value of Title.
func (s *IssuesCreateReq) GetTitle() IssuesCreateReqTitle {
	return s.Title
}

// GetBody returns the value of Body.
func (s *IssuesCreateReq) GetBody() OptString {
	return s.Body
}

// GetAssignee returns the value of Assignee.
func (s *IssuesCreateReq) GetAssignee() OptNilString {
	return s.Assignee
}

// GetMilestone returns the value of Milestone.
func (s *IssuesCreateReq) GetMilestone() OptNilIssuesCreateReqMilestone {
	return s.Milestone
}

// GetLabels returns the value of Labels.
func (s *IssuesCreateReq) GetLabels() []IssuesCreateReqLabelsItem {
	return s.Labels
}

// GetAssignees returns the value of Assignees.
func (s *IssuesCreateReq) GetAssignees() []string {
	return s.Assignees
}

// SetTitle sets the value of Title.
func (s *IssuesCreateReq) SetTitle(val IssuesCreateReqTitle) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *IssuesCreateReq) SetBody(val OptString) {
	s.Body = val
}

// SetAssignee sets the value of Assignee.
func (s *IssuesCreateReq) SetAssignee(val OptNilString) {
	s.Assignee = val
}

// SetMilestone sets the value of Milestone.
func (s *IssuesCreateReq) SetMilestone(val OptNilIssuesCreateReqMilestone) {
	s.Milestone = val
}

// SetLabels sets the value of Labels.
func (s *IssuesCreateReq) SetLabels(val []IssuesCreateReqLabelsItem) {
	s.Labels = val
}

// SetAssignees sets the value of Assignees.
func (s *IssuesCreateReq) SetAssignees(val []string) {
	s.Assignees = val
}

// IssuesCreateReqLabelsItem represents sum type.
type IssuesCreateReqLabelsItem struct {
	Type                       IssuesCreateReqLabelsItemType // switch on this field
	String                     string
	IssuesCreateReqLabelsItem1 IssuesCreateReqLabelsItem1
}

// IssuesCreateReqLabelsItemType is oneOf type of IssuesCreateReqLabelsItem.
type IssuesCreateReqLabelsItemType string

// Possible values for IssuesCreateReqLabelsItemType.
const (
	StringIssuesCreateReqLabelsItem                     IssuesCreateReqLabelsItemType = "string"
	IssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem IssuesCreateReqLabelsItemType = "IssuesCreateReqLabelsItem1"
)

// IsString reports whether IssuesCreateReqLabelsItem is string.
func (s IssuesCreateReqLabelsItem) IsString() bool { return s.Type == StringIssuesCreateReqLabelsItem }

// IsIssuesCreateReqLabelsItem1 reports whether IssuesCreateReqLabelsItem is IssuesCreateReqLabelsItem1.
func (s IssuesCreateReqLabelsItem) IsIssuesCreateReqLabelsItem1() bool {
	return s.Type == IssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem
}

// SetString sets IssuesCreateReqLabelsItem to string.
func (s *IssuesCreateReqLabelsItem) SetString(v string) {
	s.Type = StringIssuesCreateReqLabelsItem
	s.String = v
}

// GetString returns string and true boolean if IssuesCreateReqLabelsItem is string.
func (s IssuesCreateReqLabelsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesCreateReqLabelsItem returns new IssuesCreateReqLabelsItem from string.
func NewStringIssuesCreateReqLabelsItem(v string) IssuesCreateReqLabelsItem {
	var s IssuesCreateReqLabelsItem
	s.SetString(v)
	return s
}

// SetIssuesCreateReqLabelsItem1 sets IssuesCreateReqLabelsItem to IssuesCreateReqLabelsItem1.
func (s *IssuesCreateReqLabelsItem) SetIssuesCreateReqLabelsItem1(v IssuesCreateReqLabelsItem1) {
	s.Type = IssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem
	s.IssuesCreateReqLabelsItem1 = v
}

// GetIssuesCreateReqLabelsItem1 returns IssuesCreateReqLabelsItem1 and true boolean if IssuesCreateReqLabelsItem is IssuesCreateReqLabelsItem1.
func (s IssuesCreateReqLabelsItem) GetIssuesCreateReqLabelsItem1() (v IssuesCreateReqLabelsItem1, ok bool) {
	if !s.IsIssuesCreateReqLabelsItem1() {
		return v, false
	}
	return s.IssuesCreateReqLabelsItem1, true
}

// NewIssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem returns new IssuesCreateReqLabelsItem from IssuesCreateReqLabelsItem1.
func NewIssuesCreateReqLabelsItem1IssuesCreateReqLabelsItem(v IssuesCreateReqLabelsItem1) IssuesCreateReqLabelsItem {
	var s IssuesCreateReqLabelsItem
	s.SetIssuesCreateReqLabelsItem1(v)
	return s
}

type IssuesCreateReqLabelsItem1 struct {
	ID          OptInt       `json:"id"`
	Name        OptString    `json:"name"`
	Description OptNilString `json:"description"`
	Color       OptNilString `json:"color"`
}

// GetID returns the value of ID.
func (s *IssuesCreateReqLabelsItem1) GetID() OptInt {
	return s.ID
}

// GetName returns the value of Name.
func (s *IssuesCreateReqLabelsItem1) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *IssuesCreateReqLabelsItem1) GetDescription() OptNilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *IssuesCreateReqLabelsItem1) GetColor() OptNilString {
	return s.Color
}

// SetID sets the value of ID.
func (s *IssuesCreateReqLabelsItem1) SetID(val OptInt) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *IssuesCreateReqLabelsItem1) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *IssuesCreateReqLabelsItem1) SetDescription(val OptNilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *IssuesCreateReqLabelsItem1) SetColor(val OptNilString) {
	s.Color = val
}

// IssuesCreateReqMilestone represents sum type.
type IssuesCreateReqMilestone struct {
	Type   IssuesCreateReqMilestoneType // switch on this field
	String string
	Int    int
}

// IssuesCreateReqMilestoneType is oneOf type of IssuesCreateReqMilestone.
type IssuesCreateReqMilestoneType string

// Possible values for IssuesCreateReqMilestoneType.
const (
	StringIssuesCreateReqMilestone IssuesCreateReqMilestoneType = "string"
	IntIssuesCreateReqMilestone    IssuesCreateReqMilestoneType = "int"
)

// IsString reports whether IssuesCreateReqMilestone is string.
func (s IssuesCreateReqMilestone) IsString() bool { return s.Type == StringIssuesCreateReqMilestone }

// IsInt reports whether IssuesCreateReqMilestone is int.
func (s IssuesCreateReqMilestone) IsInt() bool { return s.Type == IntIssuesCreateReqMilestone }

// SetString sets IssuesCreateReqMilestone to string.
func (s *IssuesCreateReqMilestone) SetString(v string) {
	s.Type = StringIssuesCreateReqMilestone
	s.String = v
}

// GetString returns string and true boolean if IssuesCreateReqMilestone is string.
func (s IssuesCreateReqMilestone) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesCreateReqMilestone returns new IssuesCreateReqMilestone from string.
func NewStringIssuesCreateReqMilestone(v string) IssuesCreateReqMilestone {
	var s IssuesCreateReqMilestone
	s.SetString(v)
	return s
}

// SetInt sets IssuesCreateReqMilestone to int.
func (s *IssuesCreateReqMilestone) SetInt(v int) {
	s.Type = IntIssuesCreateReqMilestone
	s.Int = v
}

// GetInt returns int and true boolean if IssuesCreateReqMilestone is int.
func (s IssuesCreateReqMilestone) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesCreateReqMilestone returns new IssuesCreateReqMilestone from int.
func NewIntIssuesCreateReqMilestone(v int) IssuesCreateReqMilestone {
	var s IssuesCreateReqMilestone
	s.SetInt(v)
	return s
}

// The title of the issue.
// IssuesCreateReqTitle represents sum type.
type IssuesCreateReqTitle struct {
	Type   IssuesCreateReqTitleType // switch on this field
	String string
	Int    int
}

// IssuesCreateReqTitleType is oneOf type of IssuesCreateReqTitle.
type IssuesCreateReqTitleType string

// Possible values for IssuesCreateReqTitleType.
const (
	StringIssuesCreateReqTitle IssuesCreateReqTitleType = "string"
	IntIssuesCreateReqTitle    IssuesCreateReqTitleType = "int"
)

// IsString reports whether IssuesCreateReqTitle is string.
func (s IssuesCreateReqTitle) IsString() bool { return s.Type == StringIssuesCreateReqTitle }

// IsInt reports whether IssuesCreateReqTitle is int.
func (s IssuesCreateReqTitle) IsInt() bool { return s.Type == IntIssuesCreateReqTitle }

// SetString sets IssuesCreateReqTitle to string.
func (s *IssuesCreateReqTitle) SetString(v string) {
	s.Type = StringIssuesCreateReqTitle
	s.String = v
}

// GetString returns string and true boolean if IssuesCreateReqTitle is string.
func (s IssuesCreateReqTitle) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesCreateReqTitle returns new IssuesCreateReqTitle from string.
func NewStringIssuesCreateReqTitle(v string) IssuesCreateReqTitle {
	var s IssuesCreateReqTitle
	s.SetString(v)
	return s
}

// SetInt sets IssuesCreateReqTitle to int.
func (s *IssuesCreateReqTitle) SetInt(v int) {
	s.Type = IntIssuesCreateReqTitle
	s.Int = v
}

// GetInt returns int and true boolean if IssuesCreateReqTitle is int.
func (s IssuesCreateReqTitle) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesCreateReqTitle returns new IssuesCreateReqTitle from int.
func NewIntIssuesCreateReqTitle(v int) IssuesCreateReqTitle {
	var s IssuesCreateReqTitle
	s.SetInt(v)
	return s
}

// IssuesDeleteCommentNoContent is response for IssuesDeleteComment operation.
type IssuesDeleteCommentNoContent struct{}

// IssuesDeleteLabelNoContent is response for IssuesDeleteLabel operation.
type IssuesDeleteLabelNoContent struct{}

// IssuesDeleteMilestoneNoContent is response for IssuesDeleteMilestone operation.
type IssuesDeleteMilestoneNoContent struct{}

func (*IssuesDeleteMilestoneNoContent) issuesDeleteMilestoneRes() {}

type IssuesGetEventForbidden BasicError

func (*IssuesGetEventForbidden) issuesGetEventRes() {}

type IssuesGetEventGone BasicError

func (*IssuesGetEventGone) issuesGetEventRes() {}

type IssuesGetEventNotFound BasicError

func (*IssuesGetEventNotFound) issuesGetEventRes() {}

type IssuesGetGone BasicError

func (*IssuesGetGone) issuesGetRes() {}

type IssuesGetMovedPermanently BasicError

func (*IssuesGetMovedPermanently) issuesGetRes() {}

type IssuesGetNotFound BasicError

func (*IssuesGetNotFound) issuesGetRes() {}

// IssuesListAssigneesOKHeaders wraps []SimpleUser with response headers.
type IssuesListAssigneesOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *IssuesListAssigneesOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListAssigneesOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListAssigneesOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListAssigneesOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*IssuesListAssigneesOKHeaders) issuesListAssigneesRes() {}

type IssuesListCommentsForRepoDirection string

const (
	IssuesListCommentsForRepoDirectionAsc  IssuesListCommentsForRepoDirection = "asc"
	IssuesListCommentsForRepoDirectionDesc IssuesListCommentsForRepoDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListCommentsForRepoDirection) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListCommentsForRepoDirectionAsc:
		return []byte(s), nil
	case IssuesListCommentsForRepoDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListCommentsForRepoDirection) UnmarshalText(data []byte) error {
	switch IssuesListCommentsForRepoDirection(data) {
	case IssuesListCommentsForRepoDirectionAsc:
		*s = IssuesListCommentsForRepoDirectionAsc
		return nil
	case IssuesListCommentsForRepoDirectionDesc:
		*s = IssuesListCommentsForRepoDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListCommentsForRepoOKHeaders wraps []IssueComment with response headers.
type IssuesListCommentsForRepoOKHeaders struct {
	Link     OptString
	Response []IssueComment
}

// GetLink returns the value of Link.
func (s *IssuesListCommentsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListCommentsForRepoOKHeaders) GetResponse() []IssueComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListCommentsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListCommentsForRepoOKHeaders) SetResponse(val []IssueComment) {
	s.Response = val
}

func (*IssuesListCommentsForRepoOKHeaders) issuesListCommentsForRepoRes() {}

type IssuesListCommentsForRepoSort string

const (
	IssuesListCommentsForRepoSortCreated IssuesListCommentsForRepoSort = "created"
	IssuesListCommentsForRepoSortUpdated IssuesListCommentsForRepoSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListCommentsForRepoSort) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListCommentsForRepoSortCreated:
		return []byte(s), nil
	case IssuesListCommentsForRepoSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListCommentsForRepoSort) UnmarshalText(data []byte) error {
	switch IssuesListCommentsForRepoSort(data) {
	case IssuesListCommentsForRepoSortCreated:
		*s = IssuesListCommentsForRepoSortCreated
		return nil
	case IssuesListCommentsForRepoSortUpdated:
		*s = IssuesListCommentsForRepoSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListCommentsGone BasicError

func (*IssuesListCommentsGone) issuesListCommentsRes() {}

type IssuesListCommentsNotFound BasicError

func (*IssuesListCommentsNotFound) issuesListCommentsRes() {}

// IssuesListCommentsOKHeaders wraps []IssueComment with response headers.
type IssuesListCommentsOKHeaders struct {
	Link     OptString
	Response []IssueComment
}

// GetLink returns the value of Link.
func (s *IssuesListCommentsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListCommentsOKHeaders) GetResponse() []IssueComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListCommentsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListCommentsOKHeaders) SetResponse(val []IssueComment) {
	s.Response = val
}

func (*IssuesListCommentsOKHeaders) issuesListCommentsRes() {}

type IssuesListDirection string

const (
	IssuesListDirectionAsc  IssuesListDirection = "asc"
	IssuesListDirectionDesc IssuesListDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListDirection) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListDirectionAsc:
		return []byte(s), nil
	case IssuesListDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListDirection) UnmarshalText(data []byte) error {
	switch IssuesListDirection(data) {
	case IssuesListDirectionAsc:
		*s = IssuesListDirectionAsc
		return nil
	case IssuesListDirectionDesc:
		*s = IssuesListDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListEventsForRepoOKHeaders wraps []IssueEvent with response headers.
type IssuesListEventsForRepoOKHeaders struct {
	Link     OptString
	Response []IssueEvent
}

// GetLink returns the value of Link.
func (s *IssuesListEventsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListEventsForRepoOKHeaders) GetResponse() []IssueEvent {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListEventsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListEventsForRepoOKHeaders) SetResponse(val []IssueEvent) {
	s.Response = val
}

func (*IssuesListEventsForRepoOKHeaders) issuesListEventsForRepoRes() {}

type IssuesListFilter string

const (
	IssuesListFilterAssigned   IssuesListFilter = "assigned"
	IssuesListFilterCreated    IssuesListFilter = "created"
	IssuesListFilterMentioned  IssuesListFilter = "mentioned"
	IssuesListFilterSubscribed IssuesListFilter = "subscribed"
	IssuesListFilterRepos      IssuesListFilter = "repos"
	IssuesListFilterAll        IssuesListFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListFilter) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListFilterAssigned:
		return []byte(s), nil
	case IssuesListFilterCreated:
		return []byte(s), nil
	case IssuesListFilterMentioned:
		return []byte(s), nil
	case IssuesListFilterSubscribed:
		return []byte(s), nil
	case IssuesListFilterRepos:
		return []byte(s), nil
	case IssuesListFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListFilter) UnmarshalText(data []byte) error {
	switch IssuesListFilter(data) {
	case IssuesListFilterAssigned:
		*s = IssuesListFilterAssigned
		return nil
	case IssuesListFilterCreated:
		*s = IssuesListFilterCreated
		return nil
	case IssuesListFilterMentioned:
		*s = IssuesListFilterMentioned
		return nil
	case IssuesListFilterSubscribed:
		*s = IssuesListFilterSubscribed
		return nil
	case IssuesListFilterRepos:
		*s = IssuesListFilterRepos
		return nil
	case IssuesListFilterAll:
		*s = IssuesListFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForAuthenticatedUserDirection string

const (
	IssuesListForAuthenticatedUserDirectionAsc  IssuesListForAuthenticatedUserDirection = "asc"
	IssuesListForAuthenticatedUserDirectionDesc IssuesListForAuthenticatedUserDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForAuthenticatedUserDirection) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForAuthenticatedUserDirectionAsc:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForAuthenticatedUserDirection) UnmarshalText(data []byte) error {
	switch IssuesListForAuthenticatedUserDirection(data) {
	case IssuesListForAuthenticatedUserDirectionAsc:
		*s = IssuesListForAuthenticatedUserDirectionAsc
		return nil
	case IssuesListForAuthenticatedUserDirectionDesc:
		*s = IssuesListForAuthenticatedUserDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForAuthenticatedUserFilter string

const (
	IssuesListForAuthenticatedUserFilterAssigned   IssuesListForAuthenticatedUserFilter = "assigned"
	IssuesListForAuthenticatedUserFilterCreated    IssuesListForAuthenticatedUserFilter = "created"
	IssuesListForAuthenticatedUserFilterMentioned  IssuesListForAuthenticatedUserFilter = "mentioned"
	IssuesListForAuthenticatedUserFilterSubscribed IssuesListForAuthenticatedUserFilter = "subscribed"
	IssuesListForAuthenticatedUserFilterRepos      IssuesListForAuthenticatedUserFilter = "repos"
	IssuesListForAuthenticatedUserFilterAll        IssuesListForAuthenticatedUserFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForAuthenticatedUserFilter) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForAuthenticatedUserFilterAssigned:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserFilterCreated:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserFilterMentioned:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserFilterSubscribed:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserFilterRepos:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForAuthenticatedUserFilter) UnmarshalText(data []byte) error {
	switch IssuesListForAuthenticatedUserFilter(data) {
	case IssuesListForAuthenticatedUserFilterAssigned:
		*s = IssuesListForAuthenticatedUserFilterAssigned
		return nil
	case IssuesListForAuthenticatedUserFilterCreated:
		*s = IssuesListForAuthenticatedUserFilterCreated
		return nil
	case IssuesListForAuthenticatedUserFilterMentioned:
		*s = IssuesListForAuthenticatedUserFilterMentioned
		return nil
	case IssuesListForAuthenticatedUserFilterSubscribed:
		*s = IssuesListForAuthenticatedUserFilterSubscribed
		return nil
	case IssuesListForAuthenticatedUserFilterRepos:
		*s = IssuesListForAuthenticatedUserFilterRepos
		return nil
	case IssuesListForAuthenticatedUserFilterAll:
		*s = IssuesListForAuthenticatedUserFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListForAuthenticatedUserOKHeaders wraps []Issue with response headers.
type IssuesListForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []Issue
}

// GetLink returns the value of Link.
func (s *IssuesListForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListForAuthenticatedUserOKHeaders) GetResponse() []Issue {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListForAuthenticatedUserOKHeaders) SetResponse(val []Issue) {
	s.Response = val
}

func (*IssuesListForAuthenticatedUserOKHeaders) issuesListForAuthenticatedUserRes() {}

type IssuesListForAuthenticatedUserSort string

const (
	IssuesListForAuthenticatedUserSortCreated  IssuesListForAuthenticatedUserSort = "created"
	IssuesListForAuthenticatedUserSortUpdated  IssuesListForAuthenticatedUserSort = "updated"
	IssuesListForAuthenticatedUserSortComments IssuesListForAuthenticatedUserSort = "comments"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForAuthenticatedUserSort) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForAuthenticatedUserSortCreated:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserSortUpdated:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserSortComments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForAuthenticatedUserSort) UnmarshalText(data []byte) error {
	switch IssuesListForAuthenticatedUserSort(data) {
	case IssuesListForAuthenticatedUserSortCreated:
		*s = IssuesListForAuthenticatedUserSortCreated
		return nil
	case IssuesListForAuthenticatedUserSortUpdated:
		*s = IssuesListForAuthenticatedUserSortUpdated
		return nil
	case IssuesListForAuthenticatedUserSortComments:
		*s = IssuesListForAuthenticatedUserSortComments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForAuthenticatedUserState string

const (
	IssuesListForAuthenticatedUserStateOpen   IssuesListForAuthenticatedUserState = "open"
	IssuesListForAuthenticatedUserStateClosed IssuesListForAuthenticatedUserState = "closed"
	IssuesListForAuthenticatedUserStateAll    IssuesListForAuthenticatedUserState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForAuthenticatedUserState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForAuthenticatedUserStateOpen:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserStateClosed:
		return []byte(s), nil
	case IssuesListForAuthenticatedUserStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForAuthenticatedUserState) UnmarshalText(data []byte) error {
	switch IssuesListForAuthenticatedUserState(data) {
	case IssuesListForAuthenticatedUserStateOpen:
		*s = IssuesListForAuthenticatedUserStateOpen
		return nil
	case IssuesListForAuthenticatedUserStateClosed:
		*s = IssuesListForAuthenticatedUserStateClosed
		return nil
	case IssuesListForAuthenticatedUserStateAll:
		*s = IssuesListForAuthenticatedUserStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForOrgDirection string

const (
	IssuesListForOrgDirectionAsc  IssuesListForOrgDirection = "asc"
	IssuesListForOrgDirectionDesc IssuesListForOrgDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForOrgDirection) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForOrgDirectionAsc:
		return []byte(s), nil
	case IssuesListForOrgDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForOrgDirection) UnmarshalText(data []byte) error {
	switch IssuesListForOrgDirection(data) {
	case IssuesListForOrgDirectionAsc:
		*s = IssuesListForOrgDirectionAsc
		return nil
	case IssuesListForOrgDirectionDesc:
		*s = IssuesListForOrgDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForOrgFilter string

const (
	IssuesListForOrgFilterAssigned   IssuesListForOrgFilter = "assigned"
	IssuesListForOrgFilterCreated    IssuesListForOrgFilter = "created"
	IssuesListForOrgFilterMentioned  IssuesListForOrgFilter = "mentioned"
	IssuesListForOrgFilterSubscribed IssuesListForOrgFilter = "subscribed"
	IssuesListForOrgFilterRepos      IssuesListForOrgFilter = "repos"
	IssuesListForOrgFilterAll        IssuesListForOrgFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForOrgFilter) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForOrgFilterAssigned:
		return []byte(s), nil
	case IssuesListForOrgFilterCreated:
		return []byte(s), nil
	case IssuesListForOrgFilterMentioned:
		return []byte(s), nil
	case IssuesListForOrgFilterSubscribed:
		return []byte(s), nil
	case IssuesListForOrgFilterRepos:
		return []byte(s), nil
	case IssuesListForOrgFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForOrgFilter) UnmarshalText(data []byte) error {
	switch IssuesListForOrgFilter(data) {
	case IssuesListForOrgFilterAssigned:
		*s = IssuesListForOrgFilterAssigned
		return nil
	case IssuesListForOrgFilterCreated:
		*s = IssuesListForOrgFilterCreated
		return nil
	case IssuesListForOrgFilterMentioned:
		*s = IssuesListForOrgFilterMentioned
		return nil
	case IssuesListForOrgFilterSubscribed:
		*s = IssuesListForOrgFilterSubscribed
		return nil
	case IssuesListForOrgFilterRepos:
		*s = IssuesListForOrgFilterRepos
		return nil
	case IssuesListForOrgFilterAll:
		*s = IssuesListForOrgFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListForOrgOKHeaders wraps []Issue with response headers.
type IssuesListForOrgOKHeaders struct {
	Link     OptString
	Response []Issue
}

// GetLink returns the value of Link.
func (s *IssuesListForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListForOrgOKHeaders) GetResponse() []Issue {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListForOrgOKHeaders) SetResponse(val []Issue) {
	s.Response = val
}

func (*IssuesListForOrgOKHeaders) issuesListForOrgRes() {}

type IssuesListForOrgSort string

const (
	IssuesListForOrgSortCreated  IssuesListForOrgSort = "created"
	IssuesListForOrgSortUpdated  IssuesListForOrgSort = "updated"
	IssuesListForOrgSortComments IssuesListForOrgSort = "comments"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForOrgSort) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForOrgSortCreated:
		return []byte(s), nil
	case IssuesListForOrgSortUpdated:
		return []byte(s), nil
	case IssuesListForOrgSortComments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForOrgSort) UnmarshalText(data []byte) error {
	switch IssuesListForOrgSort(data) {
	case IssuesListForOrgSortCreated:
		*s = IssuesListForOrgSortCreated
		return nil
	case IssuesListForOrgSortUpdated:
		*s = IssuesListForOrgSortUpdated
		return nil
	case IssuesListForOrgSortComments:
		*s = IssuesListForOrgSortComments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForOrgState string

const (
	IssuesListForOrgStateOpen   IssuesListForOrgState = "open"
	IssuesListForOrgStateClosed IssuesListForOrgState = "closed"
	IssuesListForOrgStateAll    IssuesListForOrgState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForOrgState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForOrgStateOpen:
		return []byte(s), nil
	case IssuesListForOrgStateClosed:
		return []byte(s), nil
	case IssuesListForOrgStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForOrgState) UnmarshalText(data []byte) error {
	switch IssuesListForOrgState(data) {
	case IssuesListForOrgStateOpen:
		*s = IssuesListForOrgStateOpen
		return nil
	case IssuesListForOrgStateClosed:
		*s = IssuesListForOrgStateClosed
		return nil
	case IssuesListForOrgStateAll:
		*s = IssuesListForOrgStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForRepoDirection string

const (
	IssuesListForRepoDirectionAsc  IssuesListForRepoDirection = "asc"
	IssuesListForRepoDirectionDesc IssuesListForRepoDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForRepoDirection) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForRepoDirectionAsc:
		return []byte(s), nil
	case IssuesListForRepoDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForRepoDirection) UnmarshalText(data []byte) error {
	switch IssuesListForRepoDirection(data) {
	case IssuesListForRepoDirectionAsc:
		*s = IssuesListForRepoDirectionAsc
		return nil
	case IssuesListForRepoDirectionDesc:
		*s = IssuesListForRepoDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForRepoMovedPermanently BasicError

func (*IssuesListForRepoMovedPermanently) issuesListForRepoRes() {}

type IssuesListForRepoNotFound BasicError

func (*IssuesListForRepoNotFound) issuesListForRepoRes() {}

// IssuesListForRepoOKHeaders wraps []IssueSimple with response headers.
type IssuesListForRepoOKHeaders struct {
	Link     OptString
	Response []IssueSimple
}

// GetLink returns the value of Link.
func (s *IssuesListForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListForRepoOKHeaders) GetResponse() []IssueSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListForRepoOKHeaders) SetResponse(val []IssueSimple) {
	s.Response = val
}

func (*IssuesListForRepoOKHeaders) issuesListForRepoRes() {}

type IssuesListForRepoSort string

const (
	IssuesListForRepoSortCreated  IssuesListForRepoSort = "created"
	IssuesListForRepoSortUpdated  IssuesListForRepoSort = "updated"
	IssuesListForRepoSortComments IssuesListForRepoSort = "comments"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForRepoSort) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForRepoSortCreated:
		return []byte(s), nil
	case IssuesListForRepoSortUpdated:
		return []byte(s), nil
	case IssuesListForRepoSortComments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForRepoSort) UnmarshalText(data []byte) error {
	switch IssuesListForRepoSort(data) {
	case IssuesListForRepoSortCreated:
		*s = IssuesListForRepoSortCreated
		return nil
	case IssuesListForRepoSortUpdated:
		*s = IssuesListForRepoSortUpdated
		return nil
	case IssuesListForRepoSortComments:
		*s = IssuesListForRepoSortComments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListForRepoState string

const (
	IssuesListForRepoStateOpen   IssuesListForRepoState = "open"
	IssuesListForRepoStateClosed IssuesListForRepoState = "closed"
	IssuesListForRepoStateAll    IssuesListForRepoState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListForRepoState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListForRepoStateOpen:
		return []byte(s), nil
	case IssuesListForRepoStateClosed:
		return []byte(s), nil
	case IssuesListForRepoStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListForRepoState) UnmarshalText(data []byte) error {
	switch IssuesListForRepoState(data) {
	case IssuesListForRepoStateOpen:
		*s = IssuesListForRepoStateOpen
		return nil
	case IssuesListForRepoStateClosed:
		*s = IssuesListForRepoStateClosed
		return nil
	case IssuesListForRepoStateAll:
		*s = IssuesListForRepoStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListLabelsForMilestoneOKHeaders wraps []Label with response headers.
type IssuesListLabelsForMilestoneOKHeaders struct {
	Link     OptString
	Response []Label
}

// GetLink returns the value of Link.
func (s *IssuesListLabelsForMilestoneOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListLabelsForMilestoneOKHeaders) GetResponse() []Label {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListLabelsForMilestoneOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListLabelsForMilestoneOKHeaders) SetResponse(val []Label) {
	s.Response = val
}

// IssuesListLabelsForRepoOKHeaders wraps []Label with response headers.
type IssuesListLabelsForRepoOKHeaders struct {
	Link     OptString
	Response []Label
}

// GetLink returns the value of Link.
func (s *IssuesListLabelsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListLabelsForRepoOKHeaders) GetResponse() []Label {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListLabelsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListLabelsForRepoOKHeaders) SetResponse(val []Label) {
	s.Response = val
}

func (*IssuesListLabelsForRepoOKHeaders) issuesListLabelsForRepoRes() {}

// IssuesListLabelsOnIssueOKHeaders wraps []Label with response headers.
type IssuesListLabelsOnIssueOKHeaders struct {
	Link     OptString
	Response []Label
}

// GetLink returns the value of Link.
func (s *IssuesListLabelsOnIssueOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListLabelsOnIssueOKHeaders) GetResponse() []Label {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListLabelsOnIssueOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListLabelsOnIssueOKHeaders) SetResponse(val []Label) {
	s.Response = val
}

func (*IssuesListLabelsOnIssueOKHeaders) issuesListLabelsOnIssueRes() {}

type IssuesListMilestonesDirection string

const (
	IssuesListMilestonesDirectionAsc  IssuesListMilestonesDirection = "asc"
	IssuesListMilestonesDirectionDesc IssuesListMilestonesDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListMilestonesDirection) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListMilestonesDirectionAsc:
		return []byte(s), nil
	case IssuesListMilestonesDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListMilestonesDirection) UnmarshalText(data []byte) error {
	switch IssuesListMilestonesDirection(data) {
	case IssuesListMilestonesDirectionAsc:
		*s = IssuesListMilestonesDirectionAsc
		return nil
	case IssuesListMilestonesDirectionDesc:
		*s = IssuesListMilestonesDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListMilestonesOKHeaders wraps []Milestone with response headers.
type IssuesListMilestonesOKHeaders struct {
	Link     OptString
	Response []Milestone
}

// GetLink returns the value of Link.
func (s *IssuesListMilestonesOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListMilestonesOKHeaders) GetResponse() []Milestone {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListMilestonesOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListMilestonesOKHeaders) SetResponse(val []Milestone) {
	s.Response = val
}

func (*IssuesListMilestonesOKHeaders) issuesListMilestonesRes() {}

type IssuesListMilestonesSort string

const (
	IssuesListMilestonesSortDueOn        IssuesListMilestonesSort = "due_on"
	IssuesListMilestonesSortCompleteness IssuesListMilestonesSort = "completeness"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListMilestonesSort) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListMilestonesSortDueOn:
		return []byte(s), nil
	case IssuesListMilestonesSortCompleteness:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListMilestonesSort) UnmarshalText(data []byte) error {
	switch IssuesListMilestonesSort(data) {
	case IssuesListMilestonesSortDueOn:
		*s = IssuesListMilestonesSortDueOn
		return nil
	case IssuesListMilestonesSortCompleteness:
		*s = IssuesListMilestonesSortCompleteness
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListMilestonesState string

const (
	IssuesListMilestonesStateOpen   IssuesListMilestonesState = "open"
	IssuesListMilestonesStateClosed IssuesListMilestonesState = "closed"
	IssuesListMilestonesStateAll    IssuesListMilestonesState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListMilestonesState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListMilestonesStateOpen:
		return []byte(s), nil
	case IssuesListMilestonesStateClosed:
		return []byte(s), nil
	case IssuesListMilestonesStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListMilestonesState) UnmarshalText(data []byte) error {
	switch IssuesListMilestonesState(data) {
	case IssuesListMilestonesStateOpen:
		*s = IssuesListMilestonesStateOpen
		return nil
	case IssuesListMilestonesStateClosed:
		*s = IssuesListMilestonesStateClosed
		return nil
	case IssuesListMilestonesStateAll:
		*s = IssuesListMilestonesStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesListOKHeaders wraps []Issue with response headers.
type IssuesListOKHeaders struct {
	Link     OptString
	Response []Issue
}

// GetLink returns the value of Link.
func (s *IssuesListOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *IssuesListOKHeaders) GetResponse() []Issue {
	return s.Response
}

// SetLink sets the value of Link.
func (s *IssuesListOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *IssuesListOKHeaders) SetResponse(val []Issue) {
	s.Response = val
}

func (*IssuesListOKHeaders) issuesListRes() {}

type IssuesListSort string

const (
	IssuesListSortCreated  IssuesListSort = "created"
	IssuesListSortUpdated  IssuesListSort = "updated"
	IssuesListSortComments IssuesListSort = "comments"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListSort) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListSortCreated:
		return []byte(s), nil
	case IssuesListSortUpdated:
		return []byte(s), nil
	case IssuesListSortComments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListSort) UnmarshalText(data []byte) error {
	switch IssuesListSort(data) {
	case IssuesListSortCreated:
		*s = IssuesListSortCreated
		return nil
	case IssuesListSortUpdated:
		*s = IssuesListSortUpdated
		return nil
	case IssuesListSortComments:
		*s = IssuesListSortComments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesListState string

const (
	IssuesListStateOpen   IssuesListState = "open"
	IssuesListStateClosed IssuesListState = "closed"
	IssuesListStateAll    IssuesListState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesListState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesListStateOpen:
		return []byte(s), nil
	case IssuesListStateClosed:
		return []byte(s), nil
	case IssuesListStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesListState) UnmarshalText(data []byte) error {
	switch IssuesListState(data) {
	case IssuesListStateOpen:
		*s = IssuesListStateOpen
		return nil
	case IssuesListStateClosed:
		*s = IssuesListStateClosed
		return nil
	case IssuesListStateAll:
		*s = IssuesListStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesLockForbidden BasicError

func (*IssuesLockForbidden) issuesLockRes() {}

type IssuesLockGone BasicError

func (*IssuesLockGone) issuesLockRes() {}

// IssuesLockNoContent is response for IssuesLock operation.
type IssuesLockNoContent struct{}

func (*IssuesLockNoContent) issuesLockRes() {}

type IssuesLockNotFound BasicError

func (*IssuesLockNotFound) issuesLockRes() {}

type IssuesLockReq struct {
	// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one
	// of these reasons:
	// \* `off-topic`
	// \* `too heated`
	// \* `resolved`
	// \* `spam`.
	LockReason OptIssuesLockReqLockReason `json:"lock_reason"`
}

// GetLockReason returns the value of LockReason.
func (s *IssuesLockReq) GetLockReason() OptIssuesLockReqLockReason {
	return s.LockReason
}

// SetLockReason sets the value of LockReason.
func (s *IssuesLockReq) SetLockReason(val OptIssuesLockReqLockReason) {
	s.LockReason = val
}

// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one
// of these reasons:
// \* `off-topic`
// \* `too heated`
// \* `resolved`
// \* `spam`.
type IssuesLockReqLockReason string

const (
	IssuesLockReqLockReasonOffTopic  IssuesLockReqLockReason = "off-topic"
	IssuesLockReqLockReasonTooHeated IssuesLockReqLockReason = "too heated"
	IssuesLockReqLockReasonResolved  IssuesLockReqLockReason = "resolved"
	IssuesLockReqLockReasonSpam      IssuesLockReqLockReason = "spam"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesLockReqLockReason) MarshalText() ([]byte, error) {
	switch s {
	case IssuesLockReqLockReasonOffTopic:
		return []byte(s), nil
	case IssuesLockReqLockReasonTooHeated:
		return []byte(s), nil
	case IssuesLockReqLockReasonResolved:
		return []byte(s), nil
	case IssuesLockReqLockReasonSpam:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesLockReqLockReason) UnmarshalText(data []byte) error {
	switch IssuesLockReqLockReason(data) {
	case IssuesLockReqLockReasonOffTopic:
		*s = IssuesLockReqLockReasonOffTopic
		return nil
	case IssuesLockReqLockReasonTooHeated:
		*s = IssuesLockReqLockReasonTooHeated
		return nil
	case IssuesLockReqLockReasonResolved:
		*s = IssuesLockReqLockReasonResolved
		return nil
	case IssuesLockReqLockReasonSpam:
		*s = IssuesLockReqLockReasonSpam
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// IssuesRemoveAllLabelsNoContent is response for IssuesRemoveAllLabels operation.
type IssuesRemoveAllLabelsNoContent struct{}

func (*IssuesRemoveAllLabelsNoContent) issuesRemoveAllLabelsRes() {}

type IssuesRemoveAssigneesReq struct {
	// Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove
	// assignees from an issue. Assignees are silently ignored otherwise._.
	Assignees []string `json:"assignees"`
}

// GetAssignees returns the value of Assignees.
func (s *IssuesRemoveAssigneesReq) GetAssignees() []string {
	return s.Assignees
}

// SetAssignees sets the value of Assignees.
func (s *IssuesRemoveAssigneesReq) SetAssignees(val []string) {
	s.Assignees = val
}

type IssuesRemoveLabelGone BasicError

func (*IssuesRemoveLabelGone) issuesRemoveLabelRes() {}

type IssuesRemoveLabelNotFound BasicError

func (*IssuesRemoveLabelNotFound) issuesRemoveLabelRes() {}

type IssuesRemoveLabelOKApplicationJSON []Label

func (*IssuesRemoveLabelOKApplicationJSON) issuesRemoveLabelRes() {}

type IssuesUnlockForbidden BasicError

func (*IssuesUnlockForbidden) issuesUnlockRes() {}

// IssuesUnlockNoContent is response for IssuesUnlock operation.
type IssuesUnlockNoContent struct{}

func (*IssuesUnlockNoContent) issuesUnlockRes() {}

type IssuesUnlockNotFound BasicError

func (*IssuesUnlockNotFound) issuesUnlockRes() {}

type IssuesUpdateCommentReq struct {
	// The contents of the comment.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *IssuesUpdateCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *IssuesUpdateCommentReq) SetBody(val string) {
	s.Body = val
}

type IssuesUpdateForbidden BasicError

func (*IssuesUpdateForbidden) issuesUpdateRes() {}

type IssuesUpdateGone BasicError

func (*IssuesUpdateGone) issuesUpdateRes() {}

type IssuesUpdateLabelReq struct {
	// The new name of the label. Emoji can be added to label names, using either native emoji or
	// colon-style markup. For example, typing `:strawberry:` will render the emoji
	// ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png
	// ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat
	// sheet](https://github.com/ikatyang/emoji-cheat-sheet).".
	NewName OptString `json:"new_name"`
	// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
	Color OptString `json:"color"`
	// A short description of the label.
	Description OptString `json:"description"`
}

// GetNewName returns the value of NewName.
func (s *IssuesUpdateLabelReq) GetNewName() OptString {
	return s.NewName
}

// GetColor returns the value of Color.
func (s *IssuesUpdateLabelReq) GetColor() OptString {
	return s.Color
}

// GetDescription returns the value of Description.
func (s *IssuesUpdateLabelReq) GetDescription() OptString {
	return s.Description
}

// SetNewName sets the value of NewName.
func (s *IssuesUpdateLabelReq) SetNewName(val OptString) {
	s.NewName = val
}

// SetColor sets the value of Color.
func (s *IssuesUpdateLabelReq) SetColor(val OptString) {
	s.Color = val
}

// SetDescription sets the value of Description.
func (s *IssuesUpdateLabelReq) SetDescription(val OptString) {
	s.Description = val
}

type IssuesUpdateMilestoneReq struct {
	// The title of the milestone.
	Title OptString `json:"title"`
	// The state of the milestone. Either `open` or `closed`.
	State OptIssuesUpdateMilestoneReqState `json:"state"`
	// A description of the milestone.
	Description OptString `json:"description"`
	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn OptDateTime `json:"due_on"`
}

// GetTitle returns the value of Title.
func (s *IssuesUpdateMilestoneReq) GetTitle() OptString {
	return s.Title
}

// GetState returns the value of State.
func (s *IssuesUpdateMilestoneReq) GetState() OptIssuesUpdateMilestoneReqState {
	return s.State
}

// GetDescription returns the value of Description.
func (s *IssuesUpdateMilestoneReq) GetDescription() OptString {
	return s.Description
}

// GetDueOn returns the value of DueOn.
func (s *IssuesUpdateMilestoneReq) GetDueOn() OptDateTime {
	return s.DueOn
}

// SetTitle sets the value of Title.
func (s *IssuesUpdateMilestoneReq) SetTitle(val OptString) {
	s.Title = val
}

// SetState sets the value of State.
func (s *IssuesUpdateMilestoneReq) SetState(val OptIssuesUpdateMilestoneReqState) {
	s.State = val
}

// SetDescription sets the value of Description.
func (s *IssuesUpdateMilestoneReq) SetDescription(val OptString) {
	s.Description = val
}

// SetDueOn sets the value of DueOn.
func (s *IssuesUpdateMilestoneReq) SetDueOn(val OptDateTime) {
	s.DueOn = val
}

// The state of the milestone. Either `open` or `closed`.
type IssuesUpdateMilestoneReqState string

const (
	IssuesUpdateMilestoneReqStateOpen   IssuesUpdateMilestoneReqState = "open"
	IssuesUpdateMilestoneReqStateClosed IssuesUpdateMilestoneReqState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesUpdateMilestoneReqState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesUpdateMilestoneReqStateOpen:
		return []byte(s), nil
	case IssuesUpdateMilestoneReqStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesUpdateMilestoneReqState) UnmarshalText(data []byte) error {
	switch IssuesUpdateMilestoneReqState(data) {
	case IssuesUpdateMilestoneReqStateOpen:
		*s = IssuesUpdateMilestoneReqStateOpen
		return nil
	case IssuesUpdateMilestoneReqStateClosed:
		*s = IssuesUpdateMilestoneReqStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type IssuesUpdateMovedPermanently BasicError

func (*IssuesUpdateMovedPermanently) issuesUpdateRes() {}

type IssuesUpdateNotFound BasicError

func (*IssuesUpdateNotFound) issuesUpdateRes() {}

type IssuesUpdateReq struct {
	// The title of the issue.
	Title OptNilIssuesUpdateReqTitle `json:"title"`
	// The contents of the issue.
	Body OptNilString `json:"body"`
	// Login for the user that this issue should be assigned to. **This field is deprecated.**.
	Assignee OptNilString `json:"assignee"`
	// State of the issue. Either `open` or `closed`.
	State     OptIssuesUpdateReqState        `json:"state"`
	Milestone OptNilIssuesUpdateReqMilestone `json:"milestone"`
	// Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on
	// this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with
	// push access can set labels for issues. Labels are silently dropped otherwise._.
	Labels []IssuesUpdateReqLabelsItem `json:"labels"`
	// Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of
	// assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE:
	// Only users with push access can set assignees for new issues. Assignees are silently dropped
	// otherwise._.
	Assignees []string `json:"assignees"`
}

// GetTitle returns the value of Title.
func (s *IssuesUpdateReq) GetTitle() OptNilIssuesUpdateReqTitle {
	return s.Title
}

// GetBody returns the value of Body.
func (s *IssuesUpdateReq) GetBody() OptNilString {
	return s.Body
}

// GetAssignee returns the value of Assignee.
func (s *IssuesUpdateReq) GetAssignee() OptNilString {
	return s.Assignee
}

// GetState returns the value of State.
func (s *IssuesUpdateReq) GetState() OptIssuesUpdateReqState {
	return s.State
}

// GetMilestone returns the value of Milestone.
func (s *IssuesUpdateReq) GetMilestone() OptNilIssuesUpdateReqMilestone {
	return s.Milestone
}

// GetLabels returns the value of Labels.
func (s *IssuesUpdateReq) GetLabels() []IssuesUpdateReqLabelsItem {
	return s.Labels
}

// GetAssignees returns the value of Assignees.
func (s *IssuesUpdateReq) GetAssignees() []string {
	return s.Assignees
}

// SetTitle sets the value of Title.
func (s *IssuesUpdateReq) SetTitle(val OptNilIssuesUpdateReqTitle) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *IssuesUpdateReq) SetBody(val OptNilString) {
	s.Body = val
}

// SetAssignee sets the value of Assignee.
func (s *IssuesUpdateReq) SetAssignee(val OptNilString) {
	s.Assignee = val
}

// SetState sets the value of State.
func (s *IssuesUpdateReq) SetState(val OptIssuesUpdateReqState) {
	s.State = val
}

// SetMilestone sets the value of Milestone.
func (s *IssuesUpdateReq) SetMilestone(val OptNilIssuesUpdateReqMilestone) {
	s.Milestone = val
}

// SetLabels sets the value of Labels.
func (s *IssuesUpdateReq) SetLabels(val []IssuesUpdateReqLabelsItem) {
	s.Labels = val
}

// SetAssignees sets the value of Assignees.
func (s *IssuesUpdateReq) SetAssignees(val []string) {
	s.Assignees = val
}

// IssuesUpdateReqLabelsItem represents sum type.
type IssuesUpdateReqLabelsItem struct {
	Type                       IssuesUpdateReqLabelsItemType // switch on this field
	String                     string
	IssuesUpdateReqLabelsItem1 IssuesUpdateReqLabelsItem1
}

// IssuesUpdateReqLabelsItemType is oneOf type of IssuesUpdateReqLabelsItem.
type IssuesUpdateReqLabelsItemType string

// Possible values for IssuesUpdateReqLabelsItemType.
const (
	StringIssuesUpdateReqLabelsItem                     IssuesUpdateReqLabelsItemType = "string"
	IssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem IssuesUpdateReqLabelsItemType = "IssuesUpdateReqLabelsItem1"
)

// IsString reports whether IssuesUpdateReqLabelsItem is string.
func (s IssuesUpdateReqLabelsItem) IsString() bool { return s.Type == StringIssuesUpdateReqLabelsItem }

// IsIssuesUpdateReqLabelsItem1 reports whether IssuesUpdateReqLabelsItem is IssuesUpdateReqLabelsItem1.
func (s IssuesUpdateReqLabelsItem) IsIssuesUpdateReqLabelsItem1() bool {
	return s.Type == IssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem
}

// SetString sets IssuesUpdateReqLabelsItem to string.
func (s *IssuesUpdateReqLabelsItem) SetString(v string) {
	s.Type = StringIssuesUpdateReqLabelsItem
	s.String = v
}

// GetString returns string and true boolean if IssuesUpdateReqLabelsItem is string.
func (s IssuesUpdateReqLabelsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesUpdateReqLabelsItem returns new IssuesUpdateReqLabelsItem from string.
func NewStringIssuesUpdateReqLabelsItem(v string) IssuesUpdateReqLabelsItem {
	var s IssuesUpdateReqLabelsItem
	s.SetString(v)
	return s
}

// SetIssuesUpdateReqLabelsItem1 sets IssuesUpdateReqLabelsItem to IssuesUpdateReqLabelsItem1.
func (s *IssuesUpdateReqLabelsItem) SetIssuesUpdateReqLabelsItem1(v IssuesUpdateReqLabelsItem1) {
	s.Type = IssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem
	s.IssuesUpdateReqLabelsItem1 = v
}

// GetIssuesUpdateReqLabelsItem1 returns IssuesUpdateReqLabelsItem1 and true boolean if IssuesUpdateReqLabelsItem is IssuesUpdateReqLabelsItem1.
func (s IssuesUpdateReqLabelsItem) GetIssuesUpdateReqLabelsItem1() (v IssuesUpdateReqLabelsItem1, ok bool) {
	if !s.IsIssuesUpdateReqLabelsItem1() {
		return v, false
	}
	return s.IssuesUpdateReqLabelsItem1, true
}

// NewIssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem returns new IssuesUpdateReqLabelsItem from IssuesUpdateReqLabelsItem1.
func NewIssuesUpdateReqLabelsItem1IssuesUpdateReqLabelsItem(v IssuesUpdateReqLabelsItem1) IssuesUpdateReqLabelsItem {
	var s IssuesUpdateReqLabelsItem
	s.SetIssuesUpdateReqLabelsItem1(v)
	return s
}

type IssuesUpdateReqLabelsItem1 struct {
	ID          OptInt       `json:"id"`
	Name        OptString    `json:"name"`
	Description OptNilString `json:"description"`
	Color       OptNilString `json:"color"`
}

// GetID returns the value of ID.
func (s *IssuesUpdateReqLabelsItem1) GetID() OptInt {
	return s.ID
}

// GetName returns the value of Name.
func (s *IssuesUpdateReqLabelsItem1) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *IssuesUpdateReqLabelsItem1) GetDescription() OptNilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *IssuesUpdateReqLabelsItem1) GetColor() OptNilString {
	return s.Color
}

// SetID sets the value of ID.
func (s *IssuesUpdateReqLabelsItem1) SetID(val OptInt) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *IssuesUpdateReqLabelsItem1) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *IssuesUpdateReqLabelsItem1) SetDescription(val OptNilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *IssuesUpdateReqLabelsItem1) SetColor(val OptNilString) {
	s.Color = val
}

// IssuesUpdateReqMilestone represents sum type.
type IssuesUpdateReqMilestone struct {
	Type   IssuesUpdateReqMilestoneType // switch on this field
	String string
	Int    int
}

// IssuesUpdateReqMilestoneType is oneOf type of IssuesUpdateReqMilestone.
type IssuesUpdateReqMilestoneType string

// Possible values for IssuesUpdateReqMilestoneType.
const (
	StringIssuesUpdateReqMilestone IssuesUpdateReqMilestoneType = "string"
	IntIssuesUpdateReqMilestone    IssuesUpdateReqMilestoneType = "int"
)

// IsString reports whether IssuesUpdateReqMilestone is string.
func (s IssuesUpdateReqMilestone) IsString() bool { return s.Type == StringIssuesUpdateReqMilestone }

// IsInt reports whether IssuesUpdateReqMilestone is int.
func (s IssuesUpdateReqMilestone) IsInt() bool { return s.Type == IntIssuesUpdateReqMilestone }

// SetString sets IssuesUpdateReqMilestone to string.
func (s *IssuesUpdateReqMilestone) SetString(v string) {
	s.Type = StringIssuesUpdateReqMilestone
	s.String = v
}

// GetString returns string and true boolean if IssuesUpdateReqMilestone is string.
func (s IssuesUpdateReqMilestone) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesUpdateReqMilestone returns new IssuesUpdateReqMilestone from string.
func NewStringIssuesUpdateReqMilestone(v string) IssuesUpdateReqMilestone {
	var s IssuesUpdateReqMilestone
	s.SetString(v)
	return s
}

// SetInt sets IssuesUpdateReqMilestone to int.
func (s *IssuesUpdateReqMilestone) SetInt(v int) {
	s.Type = IntIssuesUpdateReqMilestone
	s.Int = v
}

// GetInt returns int and true boolean if IssuesUpdateReqMilestone is int.
func (s IssuesUpdateReqMilestone) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesUpdateReqMilestone returns new IssuesUpdateReqMilestone from int.
func NewIntIssuesUpdateReqMilestone(v int) IssuesUpdateReqMilestone {
	var s IssuesUpdateReqMilestone
	s.SetInt(v)
	return s
}

// State of the issue. Either `open` or `closed`.
type IssuesUpdateReqState string

const (
	IssuesUpdateReqStateOpen   IssuesUpdateReqState = "open"
	IssuesUpdateReqStateClosed IssuesUpdateReqState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s IssuesUpdateReqState) MarshalText() ([]byte, error) {
	switch s {
	case IssuesUpdateReqStateOpen:
		return []byte(s), nil
	case IssuesUpdateReqStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IssuesUpdateReqState) UnmarshalText(data []byte) error {
	switch IssuesUpdateReqState(data) {
	case IssuesUpdateReqStateOpen:
		*s = IssuesUpdateReqStateOpen
		return nil
	case IssuesUpdateReqStateClosed:
		*s = IssuesUpdateReqStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The title of the issue.
// IssuesUpdateReqTitle represents sum type.
type IssuesUpdateReqTitle struct {
	Type   IssuesUpdateReqTitleType // switch on this field
	String string
	Int    int
}

// IssuesUpdateReqTitleType is oneOf type of IssuesUpdateReqTitle.
type IssuesUpdateReqTitleType string

// Possible values for IssuesUpdateReqTitleType.
const (
	StringIssuesUpdateReqTitle IssuesUpdateReqTitleType = "string"
	IntIssuesUpdateReqTitle    IssuesUpdateReqTitleType = "int"
)

// IsString reports whether IssuesUpdateReqTitle is string.
func (s IssuesUpdateReqTitle) IsString() bool { return s.Type == StringIssuesUpdateReqTitle }

// IsInt reports whether IssuesUpdateReqTitle is int.
func (s IssuesUpdateReqTitle) IsInt() bool { return s.Type == IntIssuesUpdateReqTitle }

// SetString sets IssuesUpdateReqTitle to string.
func (s *IssuesUpdateReqTitle) SetString(v string) {
	s.Type = StringIssuesUpdateReqTitle
	s.String = v
}

// GetString returns string and true boolean if IssuesUpdateReqTitle is string.
func (s IssuesUpdateReqTitle) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringIssuesUpdateReqTitle returns new IssuesUpdateReqTitle from string.
func NewStringIssuesUpdateReqTitle(v string) IssuesUpdateReqTitle {
	var s IssuesUpdateReqTitle
	s.SetString(v)
	return s
}

// SetInt sets IssuesUpdateReqTitle to int.
func (s *IssuesUpdateReqTitle) SetInt(v int) {
	s.Type = IntIssuesUpdateReqTitle
	s.Int = v
}

// GetInt returns int and true boolean if IssuesUpdateReqTitle is int.
func (s IssuesUpdateReqTitle) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntIssuesUpdateReqTitle returns new IssuesUpdateReqTitle from int.
func NewIntIssuesUpdateReqTitle(v int) IssuesUpdateReqTitle {
	var s IssuesUpdateReqTitle
	s.SetInt(v)
	return s
}

// Information of a job execution in a workflow run.
// Ref: #/components/schemas/job
type Job struct {
	// The id of the job.
	ID int `json:"id"`
	// The id of the associated workflow run.
	RunID  int    `json:"run_id"`
	RunURL string `json:"run_url"`
	NodeID string `json:"node_id"`
	// The SHA of the commit that is being run.
	HeadSha string    `json:"head_sha"`
	URL     string    `json:"url"`
	HTMLURL NilString `json:"html_url"`
	// The phase of the lifecycle that the job is currently in.
	Status JobStatus `json:"status"`
	// The outcome of the job.
	Conclusion NilString `json:"conclusion"`
	// The time that the job started, in ISO 8601 format.
	StartedAt time.Time `json:"started_at"`
	// The time that the job finished, in ISO 8601 format.
	CompletedAt NilDateTime `json:"completed_at"`
	// The name of the job.
	Name string `json:"name"`
	// Steps in this job.
	Steps       []JobStepsItem `json:"steps"`
	CheckRunURL string         `json:"check_run_url"`
}

// GetID returns the value of ID.
func (s *Job) GetID() int {
	return s.ID
}

// GetRunID returns the value of RunID.
func (s *Job) GetRunID() int {
	return s.RunID
}

// GetRunURL returns the value of RunURL.
func (s *Job) GetRunURL() string {
	return s.RunURL
}

// GetNodeID returns the value of NodeID.
func (s *Job) GetNodeID() string {
	return s.NodeID
}

// GetHeadSha returns the value of HeadSha.
func (s *Job) GetHeadSha() string {
	return s.HeadSha
}

// GetURL returns the value of URL.
func (s *Job) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Job) GetHTMLURL() NilString {
	return s.HTMLURL
}

// GetStatus returns the value of Status.
func (s *Job) GetStatus() JobStatus {
	return s.Status
}

// GetConclusion returns the value of Conclusion.
func (s *Job) GetConclusion() NilString {
	return s.Conclusion
}

// GetStartedAt returns the value of StartedAt.
func (s *Job) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *Job) GetCompletedAt() NilDateTime {
	return s.CompletedAt
}

// GetName returns the value of Name.
func (s *Job) GetName() string {
	return s.Name
}

// GetSteps returns the value of Steps.
func (s *Job) GetSteps() []JobStepsItem {
	return s.Steps
}

// GetCheckRunURL returns the value of CheckRunURL.
func (s *Job) GetCheckRunURL() string {
	return s.CheckRunURL
}

// SetID sets the value of ID.
func (s *Job) SetID(val int) {
	s.ID = val
}

// SetRunID sets the value of RunID.
func (s *Job) SetRunID(val int) {
	s.RunID = val
}

// SetRunURL sets the value of RunURL.
func (s *Job) SetRunURL(val string) {
	s.RunURL = val
}

// SetNodeID sets the value of NodeID.
func (s *Job) SetNodeID(val string) {
	s.NodeID = val
}

// SetHeadSha sets the value of HeadSha.
func (s *Job) SetHeadSha(val string) {
	s.HeadSha = val
}

// SetURL sets the value of URL.
func (s *Job) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Job) SetHTMLURL(val NilString) {
	s.HTMLURL = val
}

// SetStatus sets the value of Status.
func (s *Job) SetStatus(val JobStatus) {
	s.Status = val
}

// SetConclusion sets the value of Conclusion.
func (s *Job) SetConclusion(val NilString) {
	s.Conclusion = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Job) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *Job) SetCompletedAt(val NilDateTime) {
	s.CompletedAt = val
}

// SetName sets the value of Name.
func (s *Job) SetName(val string) {
	s.Name = val
}

// SetSteps sets the value of Steps.
func (s *Job) SetSteps(val []JobStepsItem) {
	s.Steps = val
}

// SetCheckRunURL sets the value of CheckRunURL.
func (s *Job) SetCheckRunURL(val string) {
	s.CheckRunURL = val
}

// The phase of the lifecycle that the job is currently in.
type JobStatus string

const (
	JobStatusQueued     JobStatus = "queued"
	JobStatusInProgress JobStatus = "in_progress"
	JobStatusCompleted  JobStatus = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s JobStatus) MarshalText() ([]byte, error) {
	switch s {
	case JobStatusQueued:
		return []byte(s), nil
	case JobStatusInProgress:
		return []byte(s), nil
	case JobStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobStatus) UnmarshalText(data []byte) error {
	switch JobStatus(data) {
	case JobStatusQueued:
		*s = JobStatusQueued
		return nil
	case JobStatusInProgress:
		*s = JobStatusInProgress
		return nil
	case JobStatusCompleted:
		*s = JobStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type JobStepsItem struct {
	// The phase of the lifecycle that the job is currently in.
	Status JobStepsItemStatus `json:"status"`
	// The outcome of the job.
	Conclusion NilString `json:"conclusion"`
	// The name of the job.
	Name   string `json:"name"`
	Number int    `json:"number"`
	// The time that the step started, in ISO 8601 format.
	StartedAt OptNilDateTime `json:"started_at"`
	// The time that the job finished, in ISO 8601 format.
	CompletedAt OptNilDateTime `json:"completed_at"`
}

// GetStatus returns the value of Status.
func (s *JobStepsItem) GetStatus() JobStepsItemStatus {
	return s.Status
}

// GetConclusion returns the value of Conclusion.
func (s *JobStepsItem) GetConclusion() NilString {
	return s.Conclusion
}

// GetName returns the value of Name.
func (s *JobStepsItem) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *JobStepsItem) GetNumber() int {
	return s.Number
}

// GetStartedAt returns the value of StartedAt.
func (s *JobStepsItem) GetStartedAt() OptNilDateTime {
	return s.StartedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *JobStepsItem) GetCompletedAt() OptNilDateTime {
	return s.CompletedAt
}

// SetStatus sets the value of Status.
func (s *JobStepsItem) SetStatus(val JobStepsItemStatus) {
	s.Status = val
}

// SetConclusion sets the value of Conclusion.
func (s *JobStepsItem) SetConclusion(val NilString) {
	s.Conclusion = val
}

// SetName sets the value of Name.
func (s *JobStepsItem) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *JobStepsItem) SetNumber(val int) {
	s.Number = val
}

// SetStartedAt sets the value of StartedAt.
func (s *JobStepsItem) SetStartedAt(val OptNilDateTime) {
	s.StartedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *JobStepsItem) SetCompletedAt(val OptNilDateTime) {
	s.CompletedAt = val
}

// The phase of the lifecycle that the job is currently in.
type JobStepsItemStatus string

const (
	JobStepsItemStatusQueued     JobStepsItemStatus = "queued"
	JobStepsItemStatusInProgress JobStepsItemStatus = "in_progress"
	JobStepsItemStatusCompleted  JobStepsItemStatus = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s JobStepsItemStatus) MarshalText() ([]byte, error) {
	switch s {
	case JobStepsItemStatusQueued:
		return []byte(s), nil
	case JobStepsItemStatusInProgress:
		return []byte(s), nil
	case JobStepsItemStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobStepsItemStatus) UnmarshalText(data []byte) error {
	switch JobStepsItemStatus(data) {
	case JobStepsItemStatusQueued:
		*s = JobStepsItemStatusQueued
		return nil
	case JobStepsItemStatusInProgress:
		*s = JobStepsItemStatusInProgress
		return nil
	case JobStepsItemStatusCompleted:
		*s = JobStepsItemStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Key.
// Ref: #/components/schemas/key
type Key struct {
	Key       string    `json:"key"`
	ID        int       `json:"id"`
	URL       string    `json:"url"`
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"created_at"`
	Verified  bool      `json:"verified"`
	ReadOnly  bool      `json:"read_only"`
}

// GetKey returns the value of Key.
func (s *Key) GetKey() string {
	return s.Key
}

// GetID returns the value of ID.
func (s *Key) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *Key) GetURL() string {
	return s.URL
}

// GetTitle returns the value of Title.
func (s *Key) GetTitle() string {
	return s.Title
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Key) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetVerified returns the value of Verified.
func (s *Key) GetVerified() bool {
	return s.Verified
}

// GetReadOnly returns the value of ReadOnly.
func (s *Key) GetReadOnly() bool {
	return s.ReadOnly
}

// SetKey sets the value of Key.
func (s *Key) SetKey(val string) {
	s.Key = val
}

// SetID sets the value of ID.
func (s *Key) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *Key) SetURL(val string) {
	s.URL = val
}

// SetTitle sets the value of Title.
func (s *Key) SetTitle(val string) {
	s.Title = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Key) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetVerified sets the value of Verified.
func (s *Key) SetVerified(val bool) {
	s.Verified = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *Key) SetReadOnly(val bool) {
	s.ReadOnly = val
}

func (*Key) usersCreatePublicSSHKeyForAuthenticatedRes() {}
func (*Key) usersGetPublicSSHKeyForAuthenticatedRes()    {}

// Key Simple.
// Ref: #/components/schemas/key-simple
type KeySimple struct {
	ID  int    `json:"id"`
	Key string `json:"key"`
}

// GetID returns the value of ID.
func (s *KeySimple) GetID() int {
	return s.ID
}

// GetKey returns the value of Key.
func (s *KeySimple) GetKey() string {
	return s.Key
}

// SetID sets the value of ID.
func (s *KeySimple) SetID(val int) {
	s.ID = val
}

// SetKey sets the value of Key.
func (s *KeySimple) SetKey(val string) {
	s.Key = val
}

// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
// Ref: #/components/schemas/label
type Label struct {
	ID     int64  `json:"id"`
	NodeID string `json:"node_id"`
	// URL for the label.
	URL url.URL `json:"url"`
	// The name of the label.
	Name        string    `json:"name"`
	Description NilString `json:"description"`
	// 6-character hex code, without the leading #, identifying the color.
	Color   string `json:"color"`
	Default bool   `json:"default"`
}

// GetID returns the value of ID.
func (s *Label) GetID() int64 {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Label) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *Label) GetURL() url.URL {
	return s.URL
}

// GetName returns the value of Name.
func (s *Label) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Label) GetDescription() NilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *Label) GetColor() string {
	return s.Color
}

// GetDefault returns the value of Default.
func (s *Label) GetDefault() bool {
	return s.Default
}

// SetID sets the value of ID.
func (s *Label) SetID(val int64) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Label) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *Label) SetURL(val url.URL) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *Label) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Label) SetDescription(val NilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *Label) SetColor(val string) {
	s.Color = val
}

// SetDefault sets the value of Default.
func (s *Label) SetDefault(val bool) {
	s.Default = val
}

func (*Label) issuesGetLabelRes() {}

// LabelHeaders wraps Label with response headers.
type LabelHeaders struct {
	Location OptString
	Response Label
}

// GetLocation returns the value of Location.
func (s *LabelHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *LabelHeaders) GetResponse() Label {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *LabelHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *LabelHeaders) SetResponse(val Label) {
	s.Response = val
}

func (*LabelHeaders) issuesCreateLabelRes() {}

// Label Search Result Item.
// Ref: #/components/schemas/label-search-result-item
type LabelSearchResultItem struct {
	ID          int                      `json:"id"`
	NodeID      string                   `json:"node_id"`
	URL         url.URL                  `json:"url"`
	Name        string                   `json:"name"`
	Color       string                   `json:"color"`
	Default     bool                     `json:"default"`
	Description NilString                `json:"description"`
	Score       float64                  `json:"score"`
	TextMatches *SearchResultTextMatches `json:"text_matches"`
}

// GetID returns the value of ID.
func (s *LabelSearchResultItem) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *LabelSearchResultItem) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *LabelSearchResultItem) GetURL() url.URL {
	return s.URL
}

// GetName returns the value of Name.
func (s *LabelSearchResultItem) GetName() string {
	return s.Name
}

// GetColor returns the value of Color.
func (s *LabelSearchResultItem) GetColor() string {
	return s.Color
}

// GetDefault returns the value of Default.
func (s *LabelSearchResultItem) GetDefault() bool {
	return s.Default
}

// GetDescription returns the value of Description.
func (s *LabelSearchResultItem) GetDescription() NilString {
	return s.Description
}

// GetScore returns the value of Score.
func (s *LabelSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetTextMatches returns the value of TextMatches.
func (s *LabelSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// SetID sets the value of ID.
func (s *LabelSearchResultItem) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *LabelSearchResultItem) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *LabelSearchResultItem) SetURL(val url.URL) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *LabelSearchResultItem) SetName(val string) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *LabelSearchResultItem) SetColor(val string) {
	s.Color = val
}

// SetDefault sets the value of Default.
func (s *LabelSearchResultItem) SetDefault(val bool) {
	s.Default = val
}

// SetDescription sets the value of Description.
func (s *LabelSearchResultItem) SetDescription(val NilString) {
	s.Description = val
}

// SetScore sets the value of Score.
func (s *LabelSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetTextMatches sets the value of TextMatches.
func (s *LabelSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

// Language.
// Ref: #/components/schemas/language
type Language map[string]int

func (s *Language) init() Language {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// License.
// Ref: #/components/schemas/license
type License struct {
	Key            string    `json:"key"`
	Name           string    `json:"name"`
	SpdxID         NilString `json:"spdx_id"`
	URL            NilURI    `json:"url"`
	NodeID         string    `json:"node_id"`
	HTMLURL        url.URL   `json:"html_url"`
	Description    string    `json:"description"`
	Implementation string    `json:"implementation"`
	Permissions    []string  `json:"permissions"`
	Conditions     []string  `json:"conditions"`
	Limitations    []string  `json:"limitations"`
	Body           string    `json:"body"`
	Featured       bool      `json:"featured"`
}

// GetKey returns the value of Key.
func (s *License) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *License) GetName() string {
	return s.Name
}

// GetSpdxID returns the value of SpdxID.
func (s *License) GetSpdxID() NilString {
	return s.SpdxID
}

// GetURL returns the value of URL.
func (s *License) GetURL() NilURI {
	return s.URL
}

// GetNodeID returns the value of NodeID.
func (s *License) GetNodeID() string {
	return s.NodeID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *License) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *License) GetDescription() string {
	return s.Description
}

// GetImplementation returns the value of Implementation.
func (s *License) GetImplementation() string {
	return s.Implementation
}

// GetPermissions returns the value of Permissions.
func (s *License) GetPermissions() []string {
	return s.Permissions
}

// GetConditions returns the value of Conditions.
func (s *License) GetConditions() []string {
	return s.Conditions
}

// GetLimitations returns the value of Limitations.
func (s *License) GetLimitations() []string {
	return s.Limitations
}

// GetBody returns the value of Body.
func (s *License) GetBody() string {
	return s.Body
}

// GetFeatured returns the value of Featured.
func (s *License) GetFeatured() bool {
	return s.Featured
}

// SetKey sets the value of Key.
func (s *License) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *License) SetName(val string) {
	s.Name = val
}

// SetSpdxID sets the value of SpdxID.
func (s *License) SetSpdxID(val NilString) {
	s.SpdxID = val
}

// SetURL sets the value of URL.
func (s *License) SetURL(val NilURI) {
	s.URL = val
}

// SetNodeID sets the value of NodeID.
func (s *License) SetNodeID(val string) {
	s.NodeID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *License) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *License) SetDescription(val string) {
	s.Description = val
}

// SetImplementation sets the value of Implementation.
func (s *License) SetImplementation(val string) {
	s.Implementation = val
}

// SetPermissions sets the value of Permissions.
func (s *License) SetPermissions(val []string) {
	s.Permissions = val
}

// SetConditions sets the value of Conditions.
func (s *License) SetConditions(val []string) {
	s.Conditions = val
}

// SetLimitations sets the value of Limitations.
func (s *License) SetLimitations(val []string) {
	s.Limitations = val
}

// SetBody sets the value of Body.
func (s *License) SetBody(val string) {
	s.Body = val
}

// SetFeatured sets the value of Featured.
func (s *License) SetFeatured(val bool) {
	s.Featured = val
}

func (*License) licensesGetRes() {}

// License Content.
// Ref: #/components/schemas/license-content
type LicenseContent struct {
	Name        string                   `json:"name"`
	Path        string                   `json:"path"`
	Sha         string                   `json:"sha"`
	Size        int                      `json:"size"`
	URL         url.URL                  `json:"url"`
	HTMLURL     NilURI                   `json:"html_url"`
	GitURL      NilURI                   `json:"git_url"`
	DownloadURL NilURI                   `json:"download_url"`
	Type        string                   `json:"type"`
	Content     string                   `json:"content"`
	Encoding    string                   `json:"encoding"`
	Links       LicenseContentLinks      `json:"_links"`
	License     NilNullableLicenseSimple `json:"license"`
}

// GetName returns the value of Name.
func (s *LicenseContent) GetName() string {
	return s.Name
}

// GetPath returns the value of Path.
func (s *LicenseContent) GetPath() string {
	return s.Path
}

// GetSha returns the value of Sha.
func (s *LicenseContent) GetSha() string {
	return s.Sha
}

// GetSize returns the value of Size.
func (s *LicenseContent) GetSize() int {
	return s.Size
}

// GetURL returns the value of URL.
func (s *LicenseContent) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *LicenseContent) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// GetGitURL returns the value of GitURL.
func (s *LicenseContent) GetGitURL() NilURI {
	return s.GitURL
}

// GetDownloadURL returns the value of DownloadURL.
func (s *LicenseContent) GetDownloadURL() NilURI {
	return s.DownloadURL
}

// GetType returns the value of Type.
func (s *LicenseContent) GetType() string {
	return s.Type
}

// GetContent returns the value of Content.
func (s *LicenseContent) GetContent() string {
	return s.Content
}

// GetEncoding returns the value of Encoding.
func (s *LicenseContent) GetEncoding() string {
	return s.Encoding
}

// GetLinks returns the value of Links.
func (s *LicenseContent) GetLinks() LicenseContentLinks {
	return s.Links
}

// GetLicense returns the value of License.
func (s *LicenseContent) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// SetName sets the value of Name.
func (s *LicenseContent) SetName(val string) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *LicenseContent) SetPath(val string) {
	s.Path = val
}

// SetSha sets the value of Sha.
func (s *LicenseContent) SetSha(val string) {
	s.Sha = val
}

// SetSize sets the value of Size.
func (s *LicenseContent) SetSize(val int) {
	s.Size = val
}

// SetURL sets the value of URL.
func (s *LicenseContent) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *LicenseContent) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// SetGitURL sets the value of GitURL.
func (s *LicenseContent) SetGitURL(val NilURI) {
	s.GitURL = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *LicenseContent) SetDownloadURL(val NilURI) {
	s.DownloadURL = val
}

// SetType sets the value of Type.
func (s *LicenseContent) SetType(val string) {
	s.Type = val
}

// SetContent sets the value of Content.
func (s *LicenseContent) SetContent(val string) {
	s.Content = val
}

// SetEncoding sets the value of Encoding.
func (s *LicenseContent) SetEncoding(val string) {
	s.Encoding = val
}

// SetLinks sets the value of Links.
func (s *LicenseContent) SetLinks(val LicenseContentLinks) {
	s.Links = val
}

// SetLicense sets the value of License.
func (s *LicenseContent) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

type LicenseContentLinks struct {
	Git  NilURI  `json:"git"`
	HTML NilURI  `json:"html"`
	Self url.URL `json:"self"`
}

// GetGit returns the value of Git.
func (s *LicenseContentLinks) GetGit() NilURI {
	return s.Git
}

// GetHTML returns the value of HTML.
func (s *LicenseContentLinks) GetHTML() NilURI {
	return s.HTML
}

// GetSelf returns the value of Self.
func (s *LicenseContentLinks) GetSelf() url.URL {
	return s.Self
}

// SetGit sets the value of Git.
func (s *LicenseContentLinks) SetGit(val NilURI) {
	s.Git = val
}

// SetHTML sets the value of HTML.
func (s *LicenseContentLinks) SetHTML(val NilURI) {
	s.HTML = val
}

// SetSelf sets the value of Self.
func (s *LicenseContentLinks) SetSelf(val url.URL) {
	s.Self = val
}

// License Simple.
// Ref: #/components/schemas/license-simple
type LicenseSimple struct {
	Key     string    `json:"key"`
	Name    string    `json:"name"`
	URL     NilURI    `json:"url"`
	SpdxID  NilString `json:"spdx_id"`
	NodeID  string    `json:"node_id"`
	HTMLURL OptURI    `json:"html_url"`
}

// GetKey returns the value of Key.
func (s *LicenseSimple) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *LicenseSimple) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *LicenseSimple) GetURL() NilURI {
	return s.URL
}

// GetSpdxID returns the value of SpdxID.
func (s *LicenseSimple) GetSpdxID() NilString {
	return s.SpdxID
}

// GetNodeID returns the value of NodeID.
func (s *LicenseSimple) GetNodeID() string {
	return s.NodeID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *LicenseSimple) GetHTMLURL() OptURI {
	return s.HTMLURL
}

// SetKey sets the value of Key.
func (s *LicenseSimple) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *LicenseSimple) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *LicenseSimple) SetURL(val NilURI) {
	s.URL = val
}

// SetSpdxID sets the value of SpdxID.
func (s *LicenseSimple) SetSpdxID(val NilString) {
	s.SpdxID = val
}

// SetNodeID sets the value of NodeID.
func (s *LicenseSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *LicenseSimple) SetHTMLURL(val OptURI) {
	s.HTMLURL = val
}

type LicensesGetAllCommonlyUsedOKApplicationJSON []LicenseSimple

func (*LicensesGetAllCommonlyUsedOKApplicationJSON) licensesGetAllCommonlyUsedRes() {}

type LicensesGetForbidden BasicError

func (*LicensesGetForbidden) licensesGetRes() {}

type LicensesGetNotFound BasicError

func (*LicensesGetNotFound) licensesGetRes() {}

// Hypermedia Link.
// Ref: #/components/schemas/link
type Link struct {
	Href string `json:"href"`
}

// GetHref returns the value of Href.
func (s *Link) GetHref() string {
	return s.Href
}

// SetHref sets the value of Href.
func (s *Link) SetHref(val string) {
	s.Href = val
}

// Hypermedia Link with Type.
// Ref: #/components/schemas/link-with-type
type LinkWithType struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

// GetHref returns the value of Href.
func (s *LinkWithType) GetHref() string {
	return s.Href
}

// GetType returns the value of Type.
func (s *LinkWithType) GetType() string {
	return s.Type
}

// SetHref sets the value of Href.
func (s *LinkWithType) SetHref(val string) {
	s.Href = val
}

// SetType sets the value of Type.
func (s *LinkWithType) SetType(val string) {
	s.Type = val
}

type MarkdownRenderOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MarkdownRenderOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

// MarkdownRenderOKHeaders wraps MarkdownRenderOK with response headers.
type MarkdownRenderOKHeaders struct {
	ContentLength        OptString
	XCommonMarkerVersion OptString
	Response             MarkdownRenderOK
}

// GetContentLength returns the value of ContentLength.
func (s *MarkdownRenderOKHeaders) GetContentLength() OptString {
	return s.ContentLength
}

// GetXCommonMarkerVersion returns the value of XCommonMarkerVersion.
func (s *MarkdownRenderOKHeaders) GetXCommonMarkerVersion() OptString {
	return s.XCommonMarkerVersion
}

// GetResponse returns the value of Response.
func (s *MarkdownRenderOKHeaders) GetResponse() MarkdownRenderOK {
	return s.Response
}

// SetContentLength sets the value of ContentLength.
func (s *MarkdownRenderOKHeaders) SetContentLength(val OptString) {
	s.ContentLength = val
}

// SetXCommonMarkerVersion sets the value of XCommonMarkerVersion.
func (s *MarkdownRenderOKHeaders) SetXCommonMarkerVersion(val OptString) {
	s.XCommonMarkerVersion = val
}

// SetResponse sets the value of Response.
func (s *MarkdownRenderOKHeaders) SetResponse(val MarkdownRenderOK) {
	s.Response = val
}

func (*MarkdownRenderOKHeaders) markdownRenderRes() {}

type MarkdownRenderRawOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MarkdownRenderRawOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

// MarkdownRenderRawOKHeaders wraps MarkdownRenderRawOK with response headers.
type MarkdownRenderRawOKHeaders struct {
	XCommonMarkerVersion OptString
	Response             MarkdownRenderRawOK
}

// GetXCommonMarkerVersion returns the value of XCommonMarkerVersion.
func (s *MarkdownRenderRawOKHeaders) GetXCommonMarkerVersion() OptString {
	return s.XCommonMarkerVersion
}

// GetResponse returns the value of Response.
func (s *MarkdownRenderRawOKHeaders) GetResponse() MarkdownRenderRawOK {
	return s.Response
}

// SetXCommonMarkerVersion sets the value of XCommonMarkerVersion.
func (s *MarkdownRenderRawOKHeaders) SetXCommonMarkerVersion(val OptString) {
	s.XCommonMarkerVersion = val
}

// SetResponse sets the value of Response.
func (s *MarkdownRenderRawOKHeaders) SetResponse(val MarkdownRenderRawOK) {
	s.Response = val
}

func (*MarkdownRenderRawOKHeaders) markdownRenderRawRes() {}

type MarkdownRenderRawReqEmptyBody struct{}

func (*MarkdownRenderRawReqEmptyBody) markdownRenderRawReq() {}

type MarkdownRenderRawReqTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MarkdownRenderRawReqTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

func (*MarkdownRenderRawReqTextPlain) markdownRenderRawReq() {}

type MarkdownRenderRawReqTextXMarkdown struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MarkdownRenderRawReqTextXMarkdown) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

func (*MarkdownRenderRawReqTextXMarkdown) markdownRenderRawReq() {}

type MarkdownRenderReq struct {
	// The Markdown text to render in HTML.
	Text string `json:"text"`
	// The rendering mode.
	Mode OptMarkdownRenderReqMode `json:"mode"`
	// The repository context to use when creating references in `gfm` mode.
	Context OptString `json:"context"`
}

// GetText returns the value of Text.
func (s *MarkdownRenderReq) GetText() string {
	return s.Text
}

// GetMode returns the value of Mode.
func (s *MarkdownRenderReq) GetMode() OptMarkdownRenderReqMode {
	return s.Mode
}

// GetContext returns the value of Context.
func (s *MarkdownRenderReq) GetContext() OptString {
	return s.Context
}

// SetText sets the value of Text.
func (s *MarkdownRenderReq) SetText(val string) {
	s.Text = val
}

// SetMode sets the value of Mode.
func (s *MarkdownRenderReq) SetMode(val OptMarkdownRenderReqMode) {
	s.Mode = val
}

// SetContext sets the value of Context.
func (s *MarkdownRenderReq) SetContext(val OptString) {
	s.Context = val
}

// The rendering mode.
type MarkdownRenderReqMode string

const (
	MarkdownRenderReqModeMarkdown MarkdownRenderReqMode = "markdown"
	MarkdownRenderReqModeGfm      MarkdownRenderReqMode = "gfm"
)

// MarshalText implements encoding.TextMarshaler.
func (s MarkdownRenderReqMode) MarshalText() ([]byte, error) {
	switch s {
	case MarkdownRenderReqModeMarkdown:
		return []byte(s), nil
	case MarkdownRenderReqModeGfm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MarkdownRenderReqMode) UnmarshalText(data []byte) error {
	switch MarkdownRenderReqMode(data) {
	case MarkdownRenderReqModeMarkdown:
		*s = MarkdownRenderReqModeMarkdown
		return nil
	case MarkdownRenderReqModeGfm:
		*s = MarkdownRenderReqModeGfm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/marketplace-account
type MarketplaceAccount struct {
	URL                      url.URL      `json:"url"`
	ID                       int          `json:"id"`
	Type                     string       `json:"type"`
	NodeID                   OptString    `json:"node_id"`
	Login                    string       `json:"login"`
	Email                    OptNilString `json:"email"`
	OrganizationBillingEmail OptNilString `json:"organization_billing_email"`
}

// GetURL returns the value of URL.
func (s *MarketplaceAccount) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *MarketplaceAccount) GetID() int {
	return s.ID
}

// GetType returns the value of Type.
func (s *MarketplaceAccount) GetType() string {
	return s.Type
}

// GetNodeID returns the value of NodeID.
func (s *MarketplaceAccount) GetNodeID() OptString {
	return s.NodeID
}

// GetLogin returns the value of Login.
func (s *MarketplaceAccount) GetLogin() string {
	return s.Login
}

// GetEmail returns the value of Email.
func (s *MarketplaceAccount) GetEmail() OptNilString {
	return s.Email
}

// GetOrganizationBillingEmail returns the value of OrganizationBillingEmail.
func (s *MarketplaceAccount) GetOrganizationBillingEmail() OptNilString {
	return s.OrganizationBillingEmail
}

// SetURL sets the value of URL.
func (s *MarketplaceAccount) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *MarketplaceAccount) SetID(val int) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *MarketplaceAccount) SetType(val string) {
	s.Type = val
}

// SetNodeID sets the value of NodeID.
func (s *MarketplaceAccount) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetLogin sets the value of Login.
func (s *MarketplaceAccount) SetLogin(val string) {
	s.Login = val
}

// SetEmail sets the value of Email.
func (s *MarketplaceAccount) SetEmail(val OptNilString) {
	s.Email = val
}

// SetOrganizationBillingEmail sets the value of OrganizationBillingEmail.
func (s *MarketplaceAccount) SetOrganizationBillingEmail(val OptNilString) {
	s.OrganizationBillingEmail = val
}

// Marketplace Listing Plan.
// Ref: #/components/schemas/marketplace-listing-plan
type MarketplaceListingPlan struct {
	URL                 url.URL   `json:"url"`
	AccountsURL         url.URL   `json:"accounts_url"`
	ID                  int       `json:"id"`
	Number              int       `json:"number"`
	Name                string    `json:"name"`
	Description         string    `json:"description"`
	MonthlyPriceInCents int       `json:"monthly_price_in_cents"`
	YearlyPriceInCents  int       `json:"yearly_price_in_cents"`
	PriceModel          string    `json:"price_model"`
	HasFreeTrial        bool      `json:"has_free_trial"`
	UnitName            NilString `json:"unit_name"`
	State               string    `json:"state"`
	Bullets             []string  `json:"bullets"`
}

// GetURL returns the value of URL.
func (s *MarketplaceListingPlan) GetURL() url.URL {
	return s.URL
}

// GetAccountsURL returns the value of AccountsURL.
func (s *MarketplaceListingPlan) GetAccountsURL() url.URL {
	return s.AccountsURL
}

// GetID returns the value of ID.
func (s *MarketplaceListingPlan) GetID() int {
	return s.ID
}

// GetNumber returns the value of Number.
func (s *MarketplaceListingPlan) GetNumber() int {
	return s.Number
}

// GetName returns the value of Name.
func (s *MarketplaceListingPlan) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *MarketplaceListingPlan) GetDescription() string {
	return s.Description
}

// GetMonthlyPriceInCents returns the value of MonthlyPriceInCents.
func (s *MarketplaceListingPlan) GetMonthlyPriceInCents() int {
	return s.MonthlyPriceInCents
}

// GetYearlyPriceInCents returns the value of YearlyPriceInCents.
func (s *MarketplaceListingPlan) GetYearlyPriceInCents() int {
	return s.YearlyPriceInCents
}

// GetPriceModel returns the value of PriceModel.
func (s *MarketplaceListingPlan) GetPriceModel() string {
	return s.PriceModel
}

// GetHasFreeTrial returns the value of HasFreeTrial.
func (s *MarketplaceListingPlan) GetHasFreeTrial() bool {
	return s.HasFreeTrial
}

// GetUnitName returns the value of UnitName.
func (s *MarketplaceListingPlan) GetUnitName() NilString {
	return s.UnitName
}

// GetState returns the value of State.
func (s *MarketplaceListingPlan) GetState() string {
	return s.State
}

// GetBullets returns the value of Bullets.
func (s *MarketplaceListingPlan) GetBullets() []string {
	return s.Bullets
}

// SetURL sets the value of URL.
func (s *MarketplaceListingPlan) SetURL(val url.URL) {
	s.URL = val
}

// SetAccountsURL sets the value of AccountsURL.
func (s *MarketplaceListingPlan) SetAccountsURL(val url.URL) {
	s.AccountsURL = val
}

// SetID sets the value of ID.
func (s *MarketplaceListingPlan) SetID(val int) {
	s.ID = val
}

// SetNumber sets the value of Number.
func (s *MarketplaceListingPlan) SetNumber(val int) {
	s.Number = val
}

// SetName sets the value of Name.
func (s *MarketplaceListingPlan) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *MarketplaceListingPlan) SetDescription(val string) {
	s.Description = val
}

// SetMonthlyPriceInCents sets the value of MonthlyPriceInCents.
func (s *MarketplaceListingPlan) SetMonthlyPriceInCents(val int) {
	s.MonthlyPriceInCents = val
}

// SetYearlyPriceInCents sets the value of YearlyPriceInCents.
func (s *MarketplaceListingPlan) SetYearlyPriceInCents(val int) {
	s.YearlyPriceInCents = val
}

// SetPriceModel sets the value of PriceModel.
func (s *MarketplaceListingPlan) SetPriceModel(val string) {
	s.PriceModel = val
}

// SetHasFreeTrial sets the value of HasFreeTrial.
func (s *MarketplaceListingPlan) SetHasFreeTrial(val bool) {
	s.HasFreeTrial = val
}

// SetUnitName sets the value of UnitName.
func (s *MarketplaceListingPlan) SetUnitName(val NilString) {
	s.UnitName = val
}

// SetState sets the value of State.
func (s *MarketplaceListingPlan) SetState(val string) {
	s.State = val
}

// SetBullets sets the value of Bullets.
func (s *MarketplaceListingPlan) SetBullets(val []string) {
	s.Bullets = val
}

// Marketplace Purchase.
// Ref: #/components/schemas/marketplace-purchase
type MarketplacePurchase struct {
	URL                      string                                            `json:"url"`
	Type                     string                                            `json:"type"`
	ID                       int                                               `json:"id"`
	Login                    string                                            `json:"login"`
	OrganizationBillingEmail OptString                                         `json:"organization_billing_email"`
	Email                    OptNilString                                      `json:"email"`
	MarketplacePendingChange OptNilMarketplacePurchaseMarketplacePendingChange `json:"marketplace_pending_change"`
	MarketplacePurchase      MarketplacePurchaseMarketplacePurchase            `json:"marketplace_purchase"`
}

// GetURL returns the value of URL.
func (s *MarketplacePurchase) GetURL() string {
	return s.URL
}

// GetType returns the value of Type.
func (s *MarketplacePurchase) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *MarketplacePurchase) GetID() int {
	return s.ID
}

// GetLogin returns the value of Login.
func (s *MarketplacePurchase) GetLogin() string {
	return s.Login
}

// GetOrganizationBillingEmail returns the value of OrganizationBillingEmail.
func (s *MarketplacePurchase) GetOrganizationBillingEmail() OptString {
	return s.OrganizationBillingEmail
}

// GetEmail returns the value of Email.
func (s *MarketplacePurchase) GetEmail() OptNilString {
	return s.Email
}

// GetMarketplacePendingChange returns the value of MarketplacePendingChange.
func (s *MarketplacePurchase) GetMarketplacePendingChange() OptNilMarketplacePurchaseMarketplacePendingChange {
	return s.MarketplacePendingChange
}

// GetMarketplacePurchase returns the value of MarketplacePurchase.
func (s *MarketplacePurchase) GetMarketplacePurchase() MarketplacePurchaseMarketplacePurchase {
	return s.MarketplacePurchase
}

// SetURL sets the value of URL.
func (s *MarketplacePurchase) SetURL(val string) {
	s.URL = val
}

// SetType sets the value of Type.
func (s *MarketplacePurchase) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *MarketplacePurchase) SetID(val int) {
	s.ID = val
}

// SetLogin sets the value of Login.
func (s *MarketplacePurchase) SetLogin(val string) {
	s.Login = val
}

// SetOrganizationBillingEmail sets the value of OrganizationBillingEmail.
func (s *MarketplacePurchase) SetOrganizationBillingEmail(val OptString) {
	s.OrganizationBillingEmail = val
}

// SetEmail sets the value of Email.
func (s *MarketplacePurchase) SetEmail(val OptNilString) {
	s.Email = val
}

// SetMarketplacePendingChange sets the value of MarketplacePendingChange.
func (s *MarketplacePurchase) SetMarketplacePendingChange(val OptNilMarketplacePurchaseMarketplacePendingChange) {
	s.MarketplacePendingChange = val
}

// SetMarketplacePurchase sets the value of MarketplacePurchase.
func (s *MarketplacePurchase) SetMarketplacePurchase(val MarketplacePurchaseMarketplacePurchase) {
	s.MarketplacePurchase = val
}

func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountRes()        {}
func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountStubbedRes() {}

type MarketplacePurchaseMarketplacePendingChange struct {
	IsInstalled   OptBool                   `json:"is_installed"`
	EffectiveDate OptString                 `json:"effective_date"`
	UnitCount     OptNilInt                 `json:"unit_count"`
	ID            OptInt                    `json:"id"`
	Plan          OptMarketplaceListingPlan `json:"plan"`
}

// GetIsInstalled returns the value of IsInstalled.
func (s *MarketplacePurchaseMarketplacePendingChange) GetIsInstalled() OptBool {
	return s.IsInstalled
}

// GetEffectiveDate returns the value of EffectiveDate.
func (s *MarketplacePurchaseMarketplacePendingChange) GetEffectiveDate() OptString {
	return s.EffectiveDate
}

// GetUnitCount returns the value of UnitCount.
func (s *MarketplacePurchaseMarketplacePendingChange) GetUnitCount() OptNilInt {
	return s.UnitCount
}

// GetID returns the value of ID.
func (s *MarketplacePurchaseMarketplacePendingChange) GetID() OptInt {
	return s.ID
}

// GetPlan returns the value of Plan.
func (s *MarketplacePurchaseMarketplacePendingChange) GetPlan() OptMarketplaceListingPlan {
	return s.Plan
}

// SetIsInstalled sets the value of IsInstalled.
func (s *MarketplacePurchaseMarketplacePendingChange) SetIsInstalled(val OptBool) {
	s.IsInstalled = val
}

// SetEffectiveDate sets the value of EffectiveDate.
func (s *MarketplacePurchaseMarketplacePendingChange) SetEffectiveDate(val OptString) {
	s.EffectiveDate = val
}

// SetUnitCount sets the value of UnitCount.
func (s *MarketplacePurchaseMarketplacePendingChange) SetUnitCount(val OptNilInt) {
	s.UnitCount = val
}

// SetID sets the value of ID.
func (s *MarketplacePurchaseMarketplacePendingChange) SetID(val OptInt) {
	s.ID = val
}

// SetPlan sets the value of Plan.
func (s *MarketplacePurchaseMarketplacePendingChange) SetPlan(val OptMarketplaceListingPlan) {
	s.Plan = val
}

type MarketplacePurchaseMarketplacePurchase struct {
	BillingCycle    OptString                 `json:"billing_cycle"`
	NextBillingDate OptNilString              `json:"next_billing_date"`
	IsInstalled     OptBool                   `json:"is_installed"`
	UnitCount       OptNilInt                 `json:"unit_count"`
	OnFreeTrial     OptBool                   `json:"on_free_trial"`
	FreeTrialEndsOn OptNilString              `json:"free_trial_ends_on"`
	UpdatedAt       OptString                 `json:"updated_at"`
	Plan            OptMarketplaceListingPlan `json:"plan"`
}

// GetBillingCycle returns the value of BillingCycle.
func (s *MarketplacePurchaseMarketplacePurchase) GetBillingCycle() OptString {
	return s.BillingCycle
}

// GetNextBillingDate returns the value of NextBillingDate.
func (s *MarketplacePurchaseMarketplacePurchase) GetNextBillingDate() OptNilString {
	return s.NextBillingDate
}

// GetIsInstalled returns the value of IsInstalled.
func (s *MarketplacePurchaseMarketplacePurchase) GetIsInstalled() OptBool {
	return s.IsInstalled
}

// GetUnitCount returns the value of UnitCount.
func (s *MarketplacePurchaseMarketplacePurchase) GetUnitCount() OptNilInt {
	return s.UnitCount
}

// GetOnFreeTrial returns the value of OnFreeTrial.
func (s *MarketplacePurchaseMarketplacePurchase) GetOnFreeTrial() OptBool {
	return s.OnFreeTrial
}

// GetFreeTrialEndsOn returns the value of FreeTrialEndsOn.
func (s *MarketplacePurchaseMarketplacePurchase) GetFreeTrialEndsOn() OptNilString {
	return s.FreeTrialEndsOn
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *MarketplacePurchaseMarketplacePurchase) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPlan returns the value of Plan.
func (s *MarketplacePurchaseMarketplacePurchase) GetPlan() OptMarketplaceListingPlan {
	return s.Plan
}

// SetBillingCycle sets the value of BillingCycle.
func (s *MarketplacePurchaseMarketplacePurchase) SetBillingCycle(val OptString) {
	s.BillingCycle = val
}

// SetNextBillingDate sets the value of NextBillingDate.
func (s *MarketplacePurchaseMarketplacePurchase) SetNextBillingDate(val OptNilString) {
	s.NextBillingDate = val
}

// SetIsInstalled sets the value of IsInstalled.
func (s *MarketplacePurchaseMarketplacePurchase) SetIsInstalled(val OptBool) {
	s.IsInstalled = val
}

// SetUnitCount sets the value of UnitCount.
func (s *MarketplacePurchaseMarketplacePurchase) SetUnitCount(val OptNilInt) {
	s.UnitCount = val
}

// SetOnFreeTrial sets the value of OnFreeTrial.
func (s *MarketplacePurchaseMarketplacePurchase) SetOnFreeTrial(val OptBool) {
	s.OnFreeTrial = val
}

// SetFreeTrialEndsOn sets the value of FreeTrialEndsOn.
func (s *MarketplacePurchaseMarketplacePurchase) SetFreeTrialEndsOn(val OptNilString) {
	s.FreeTrialEndsOn = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *MarketplacePurchaseMarketplacePurchase) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPlan sets the value of Plan.
func (s *MarketplacePurchaseMarketplacePurchase) SetPlan(val OptMarketplaceListingPlan) {
	s.Plan = val
}

// Results of a successful merge upstream request.
// Ref: #/components/schemas/merged-upstream
type MergedUpstream struct {
	Message    OptString                  `json:"message"`
	MergeType  OptMergedUpstreamMergeType `json:"merge_type"`
	BaseBranch OptString                  `json:"base_branch"`
}

// GetMessage returns the value of Message.
func (s *MergedUpstream) GetMessage() OptString {
	return s.Message
}

// GetMergeType returns the value of MergeType.
func (s *MergedUpstream) GetMergeType() OptMergedUpstreamMergeType {
	return s.MergeType
}

// GetBaseBranch returns the value of BaseBranch.
func (s *MergedUpstream) GetBaseBranch() OptString {
	return s.BaseBranch
}

// SetMessage sets the value of Message.
func (s *MergedUpstream) SetMessage(val OptString) {
	s.Message = val
}

// SetMergeType sets the value of MergeType.
func (s *MergedUpstream) SetMergeType(val OptMergedUpstreamMergeType) {
	s.MergeType = val
}

// SetBaseBranch sets the value of BaseBranch.
func (s *MergedUpstream) SetBaseBranch(val OptString) {
	s.BaseBranch = val
}

func (*MergedUpstream) reposMergeUpstreamRes() {}

type MergedUpstreamMergeType string

const (
	MergedUpstreamMergeTypeMerge       MergedUpstreamMergeType = "merge"
	MergedUpstreamMergeTypeFastForward MergedUpstreamMergeType = "fast-forward"
	MergedUpstreamMergeTypeNone        MergedUpstreamMergeType = "none"
)

// MarshalText implements encoding.TextMarshaler.
func (s MergedUpstreamMergeType) MarshalText() ([]byte, error) {
	switch s {
	case MergedUpstreamMergeTypeMerge:
		return []byte(s), nil
	case MergedUpstreamMergeTypeFastForward:
		return []byte(s), nil
	case MergedUpstreamMergeTypeNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MergedUpstreamMergeType) UnmarshalText(data []byte) error {
	switch MergedUpstreamMergeType(data) {
	case MergedUpstreamMergeTypeMerge:
		*s = MergedUpstreamMergeTypeMerge
		return nil
	case MergedUpstreamMergeTypeFastForward:
		*s = MergedUpstreamMergeTypeFastForward
		return nil
	case MergedUpstreamMergeTypeNone:
		*s = MergedUpstreamMergeTypeNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MetaGetOctocatOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MetaGetOctocatOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

type MetaGetZenOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s MetaGetZenOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

type MetaRootOK struct {
	CurrentUserURL                   string    `json:"current_user_url"`
	CurrentUserAuthorizationsHTMLURL string    `json:"current_user_authorizations_html_url"`
	AuthorizationsURL                string    `json:"authorizations_url"`
	CodeSearchURL                    string    `json:"code_search_url"`
	CommitSearchURL                  string    `json:"commit_search_url"`
	EmailsURL                        string    `json:"emails_url"`
	EmojisURL                        string    `json:"emojis_url"`
	EventsURL                        string    `json:"events_url"`
	FeedsURL                         string    `json:"feeds_url"`
	FollowersURL                     string    `json:"followers_url"`
	FollowingURL                     string    `json:"following_url"`
	GistsURL                         string    `json:"gists_url"`
	HubURL                           string    `json:"hub_url"`
	IssueSearchURL                   string    `json:"issue_search_url"`
	IssuesURL                        string    `json:"issues_url"`
	KeysURL                          string    `json:"keys_url"`
	LabelSearchURL                   string    `json:"label_search_url"`
	NotificationsURL                 string    `json:"notifications_url"`
	OrganizationURL                  string    `json:"organization_url"`
	OrganizationRepositoriesURL      string    `json:"organization_repositories_url"`
	OrganizationTeamsURL             string    `json:"organization_teams_url"`
	PublicGistsURL                   string    `json:"public_gists_url"`
	RateLimitURL                     string    `json:"rate_limit_url"`
	RepositoryURL                    string    `json:"repository_url"`
	RepositorySearchURL              string    `json:"repository_search_url"`
	CurrentUserRepositoriesURL       string    `json:"current_user_repositories_url"`
	StarredURL                       string    `json:"starred_url"`
	StarredGistsURL                  string    `json:"starred_gists_url"`
	TopicSearchURL                   OptString `json:"topic_search_url"`
	UserURL                          string    `json:"user_url"`
	UserOrganizationsURL             string    `json:"user_organizations_url"`
	UserRepositoriesURL              string    `json:"user_repositories_url"`
	UserSearchURL                    string    `json:"user_search_url"`
}

// GetCurrentUserURL returns the value of CurrentUserURL.
func (s *MetaRootOK) GetCurrentUserURL() string {
	return s.CurrentUserURL
}

// GetCurrentUserAuthorizationsHTMLURL returns the value of CurrentUserAuthorizationsHTMLURL.
func (s *MetaRootOK) GetCurrentUserAuthorizationsHTMLURL() string {
	return s.CurrentUserAuthorizationsHTMLURL
}

// GetAuthorizationsURL returns the value of AuthorizationsURL.
func (s *MetaRootOK) GetAuthorizationsURL() string {
	return s.AuthorizationsURL
}

// GetCodeSearchURL returns the value of CodeSearchURL.
func (s *MetaRootOK) GetCodeSearchURL() string {
	return s.CodeSearchURL
}

// GetCommitSearchURL returns the value of CommitSearchURL.
func (s *MetaRootOK) GetCommitSearchURL() string {
	return s.CommitSearchURL
}

// GetEmailsURL returns the value of EmailsURL.
func (s *MetaRootOK) GetEmailsURL() string {
	return s.EmailsURL
}

// GetEmojisURL returns the value of EmojisURL.
func (s *MetaRootOK) GetEmojisURL() string {
	return s.EmojisURL
}

// GetEventsURL returns the value of EventsURL.
func (s *MetaRootOK) GetEventsURL() string {
	return s.EventsURL
}

// GetFeedsURL returns the value of FeedsURL.
func (s *MetaRootOK) GetFeedsURL() string {
	return s.FeedsURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *MetaRootOK) GetFollowersURL() string {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *MetaRootOK) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *MetaRootOK) GetGistsURL() string {
	return s.GistsURL
}

// GetHubURL returns the value of HubURL.
func (s *MetaRootOK) GetHubURL() string {
	return s.HubURL
}

// GetIssueSearchURL returns the value of IssueSearchURL.
func (s *MetaRootOK) GetIssueSearchURL() string {
	return s.IssueSearchURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *MetaRootOK) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *MetaRootOK) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelSearchURL returns the value of LabelSearchURL.
func (s *MetaRootOK) GetLabelSearchURL() string {
	return s.LabelSearchURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *MetaRootOK) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetOrganizationURL returns the value of OrganizationURL.
func (s *MetaRootOK) GetOrganizationURL() string {
	return s.OrganizationURL
}

// GetOrganizationRepositoriesURL returns the value of OrganizationRepositoriesURL.
func (s *MetaRootOK) GetOrganizationRepositoriesURL() string {
	return s.OrganizationRepositoriesURL
}

// GetOrganizationTeamsURL returns the value of OrganizationTeamsURL.
func (s *MetaRootOK) GetOrganizationTeamsURL() string {
	return s.OrganizationTeamsURL
}

// GetPublicGistsURL returns the value of PublicGistsURL.
func (s *MetaRootOK) GetPublicGistsURL() string {
	return s.PublicGistsURL
}

// GetRateLimitURL returns the value of RateLimitURL.
func (s *MetaRootOK) GetRateLimitURL() string {
	return s.RateLimitURL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *MetaRootOK) GetRepositoryURL() string {
	return s.RepositoryURL
}

// GetRepositorySearchURL returns the value of RepositorySearchURL.
func (s *MetaRootOK) GetRepositorySearchURL() string {
	return s.RepositorySearchURL
}

// GetCurrentUserRepositoriesURL returns the value of CurrentUserRepositoriesURL.
func (s *MetaRootOK) GetCurrentUserRepositoriesURL() string {
	return s.CurrentUserRepositoriesURL
}

// GetStarredURL returns the value of StarredURL.
func (s *MetaRootOK) GetStarredURL() string {
	return s.StarredURL
}

// GetStarredGistsURL returns the value of StarredGistsURL.
func (s *MetaRootOK) GetStarredGistsURL() string {
	return s.StarredGistsURL
}

// GetTopicSearchURL returns the value of TopicSearchURL.
func (s *MetaRootOK) GetTopicSearchURL() OptString {
	return s.TopicSearchURL
}

// GetUserURL returns the value of UserURL.
func (s *MetaRootOK) GetUserURL() string {
	return s.UserURL
}

// GetUserOrganizationsURL returns the value of UserOrganizationsURL.
func (s *MetaRootOK) GetUserOrganizationsURL() string {
	return s.UserOrganizationsURL
}

// GetUserRepositoriesURL returns the value of UserRepositoriesURL.
func (s *MetaRootOK) GetUserRepositoriesURL() string {
	return s.UserRepositoriesURL
}

// GetUserSearchURL returns the value of UserSearchURL.
func (s *MetaRootOK) GetUserSearchURL() string {
	return s.UserSearchURL
}

// SetCurrentUserURL sets the value of CurrentUserURL.
func (s *MetaRootOK) SetCurrentUserURL(val string) {
	s.CurrentUserURL = val
}

// SetCurrentUserAuthorizationsHTMLURL sets the value of CurrentUserAuthorizationsHTMLURL.
func (s *MetaRootOK) SetCurrentUserAuthorizationsHTMLURL(val string) {
	s.CurrentUserAuthorizationsHTMLURL = val
}

// SetAuthorizationsURL sets the value of AuthorizationsURL.
func (s *MetaRootOK) SetAuthorizationsURL(val string) {
	s.AuthorizationsURL = val
}

// SetCodeSearchURL sets the value of CodeSearchURL.
func (s *MetaRootOK) SetCodeSearchURL(val string) {
	s.CodeSearchURL = val
}

// SetCommitSearchURL sets the value of CommitSearchURL.
func (s *MetaRootOK) SetCommitSearchURL(val string) {
	s.CommitSearchURL = val
}

// SetEmailsURL sets the value of EmailsURL.
func (s *MetaRootOK) SetEmailsURL(val string) {
	s.EmailsURL = val
}

// SetEmojisURL sets the value of EmojisURL.
func (s *MetaRootOK) SetEmojisURL(val string) {
	s.EmojisURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *MetaRootOK) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetFeedsURL sets the value of FeedsURL.
func (s *MetaRootOK) SetFeedsURL(val string) {
	s.FeedsURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *MetaRootOK) SetFollowersURL(val string) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *MetaRootOK) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *MetaRootOK) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetHubURL sets the value of HubURL.
func (s *MetaRootOK) SetHubURL(val string) {
	s.HubURL = val
}

// SetIssueSearchURL sets the value of IssueSearchURL.
func (s *MetaRootOK) SetIssueSearchURL(val string) {
	s.IssueSearchURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *MetaRootOK) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *MetaRootOK) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelSearchURL sets the value of LabelSearchURL.
func (s *MetaRootOK) SetLabelSearchURL(val string) {
	s.LabelSearchURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *MetaRootOK) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetOrganizationURL sets the value of OrganizationURL.
func (s *MetaRootOK) SetOrganizationURL(val string) {
	s.OrganizationURL = val
}

// SetOrganizationRepositoriesURL sets the value of OrganizationRepositoriesURL.
func (s *MetaRootOK) SetOrganizationRepositoriesURL(val string) {
	s.OrganizationRepositoriesURL = val
}

// SetOrganizationTeamsURL sets the value of OrganizationTeamsURL.
func (s *MetaRootOK) SetOrganizationTeamsURL(val string) {
	s.OrganizationTeamsURL = val
}

// SetPublicGistsURL sets the value of PublicGistsURL.
func (s *MetaRootOK) SetPublicGistsURL(val string) {
	s.PublicGistsURL = val
}

// SetRateLimitURL sets the value of RateLimitURL.
func (s *MetaRootOK) SetRateLimitURL(val string) {
	s.RateLimitURL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *MetaRootOK) SetRepositoryURL(val string) {
	s.RepositoryURL = val
}

// SetRepositorySearchURL sets the value of RepositorySearchURL.
func (s *MetaRootOK) SetRepositorySearchURL(val string) {
	s.RepositorySearchURL = val
}

// SetCurrentUserRepositoriesURL sets the value of CurrentUserRepositoriesURL.
func (s *MetaRootOK) SetCurrentUserRepositoriesURL(val string) {
	s.CurrentUserRepositoriesURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *MetaRootOK) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetStarredGistsURL sets the value of StarredGistsURL.
func (s *MetaRootOK) SetStarredGistsURL(val string) {
	s.StarredGistsURL = val
}

// SetTopicSearchURL sets the value of TopicSearchURL.
func (s *MetaRootOK) SetTopicSearchURL(val OptString) {
	s.TopicSearchURL = val
}

// SetUserURL sets the value of UserURL.
func (s *MetaRootOK) SetUserURL(val string) {
	s.UserURL = val
}

// SetUserOrganizationsURL sets the value of UserOrganizationsURL.
func (s *MetaRootOK) SetUserOrganizationsURL(val string) {
	s.UserOrganizationsURL = val
}

// SetUserRepositoriesURL sets the value of UserRepositoriesURL.
func (s *MetaRootOK) SetUserRepositoriesURL(val string) {
	s.UserRepositoriesURL = val
}

// SetUserSearchURL sets the value of UserSearchURL.
func (s *MetaRootOK) SetUserSearchURL(val string) {
	s.UserSearchURL = val
}

// A migration.
// Ref: #/components/schemas/migration
type Migration struct {
	ID                   int                   `json:"id"`
	Owner                NilNullableSimpleUser `json:"owner"`
	GUID                 string                `json:"guid"`
	State                string                `json:"state"`
	LockRepositories     bool                  `json:"lock_repositories"`
	ExcludeMetadata      bool                  `json:"exclude_metadata"`
	ExcludeGitData       bool                  `json:"exclude_git_data"`
	ExcludeAttachments   bool                  `json:"exclude_attachments"`
	ExcludeReleases      bool                  `json:"exclude_releases"`
	ExcludeOwnerProjects bool                  `json:"exclude_owner_projects"`
	Repositories         []Repository          `json:"repositories"`
	URL                  url.URL               `json:"url"`
	CreatedAt            time.Time             `json:"created_at"`
	UpdatedAt            time.Time             `json:"updated_at"`
	NodeID               string                `json:"node_id"`
	ArchiveURL           OptURI                `json:"archive_url"`
	Exclude              []jx.Raw              `json:"exclude"`
}

// GetID returns the value of ID.
func (s *Migration) GetID() int {
	return s.ID
}

// GetOwner returns the value of Owner.
func (s *Migration) GetOwner() NilNullableSimpleUser {
	return s.Owner
}

// GetGUID returns the value of GUID.
func (s *Migration) GetGUID() string {
	return s.GUID
}

// GetState returns the value of State.
func (s *Migration) GetState() string {
	return s.State
}

// GetLockRepositories returns the value of LockRepositories.
func (s *Migration) GetLockRepositories() bool {
	return s.LockRepositories
}

// GetExcludeMetadata returns the value of ExcludeMetadata.
func (s *Migration) GetExcludeMetadata() bool {
	return s.ExcludeMetadata
}

// GetExcludeGitData returns the value of ExcludeGitData.
func (s *Migration) GetExcludeGitData() bool {
	return s.ExcludeGitData
}

// GetExcludeAttachments returns the value of ExcludeAttachments.
func (s *Migration) GetExcludeAttachments() bool {
	return s.ExcludeAttachments
}

// GetExcludeReleases returns the value of ExcludeReleases.
func (s *Migration) GetExcludeReleases() bool {
	return s.ExcludeReleases
}

// GetExcludeOwnerProjects returns the value of ExcludeOwnerProjects.
func (s *Migration) GetExcludeOwnerProjects() bool {
	return s.ExcludeOwnerProjects
}

// GetRepositories returns the value of Repositories.
func (s *Migration) GetRepositories() []Repository {
	return s.Repositories
}

// GetURL returns the value of URL.
func (s *Migration) GetURL() url.URL {
	return s.URL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Migration) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Migration) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetNodeID returns the value of NodeID.
func (s *Migration) GetNodeID() string {
	return s.NodeID
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *Migration) GetArchiveURL() OptURI {
	return s.ArchiveURL
}

// GetExclude returns the value of Exclude.
func (s *Migration) GetExclude() []jx.Raw {
	return s.Exclude
}

// SetID sets the value of ID.
func (s *Migration) SetID(val int) {
	s.ID = val
}

// SetOwner sets the value of Owner.
func (s *Migration) SetOwner(val NilNullableSimpleUser) {
	s.Owner = val
}

// SetGUID sets the value of GUID.
func (s *Migration) SetGUID(val string) {
	s.GUID = val
}

// SetState sets the value of State.
func (s *Migration) SetState(val string) {
	s.State = val
}

// SetLockRepositories sets the value of LockRepositories.
func (s *Migration) SetLockRepositories(val bool) {
	s.LockRepositories = val
}

// SetExcludeMetadata sets the value of ExcludeMetadata.
func (s *Migration) SetExcludeMetadata(val bool) {
	s.ExcludeMetadata = val
}

// SetExcludeGitData sets the value of ExcludeGitData.
func (s *Migration) SetExcludeGitData(val bool) {
	s.ExcludeGitData = val
}

// SetExcludeAttachments sets the value of ExcludeAttachments.
func (s *Migration) SetExcludeAttachments(val bool) {
	s.ExcludeAttachments = val
}

// SetExcludeReleases sets the value of ExcludeReleases.
func (s *Migration) SetExcludeReleases(val bool) {
	s.ExcludeReleases = val
}

// SetExcludeOwnerProjects sets the value of ExcludeOwnerProjects.
func (s *Migration) SetExcludeOwnerProjects(val bool) {
	s.ExcludeOwnerProjects = val
}

// SetRepositories sets the value of Repositories.
func (s *Migration) SetRepositories(val []Repository) {
	s.Repositories = val
}

// SetURL sets the value of URL.
func (s *Migration) SetURL(val url.URL) {
	s.URL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Migration) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Migration) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetNodeID sets the value of NodeID.
func (s *Migration) SetNodeID(val string) {
	s.NodeID = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *Migration) SetArchiveURL(val OptURI) {
	s.ArchiveURL = val
}

// SetExclude sets the value of Exclude.
func (s *Migration) SetExclude(val []jx.Raw) {
	s.Exclude = val
}

func (*Migration) migrationsGetStatusForAuthenticatedUserRes() {}
func (*Migration) migrationsGetStatusForOrgRes()               {}
func (*Migration) migrationsStartForAuthenticatedUserRes()     {}
func (*Migration) migrationsStartForOrgRes()                   {}

// MigrationsCancelImportNoContent is response for MigrationsCancelImport operation.
type MigrationsCancelImportNoContent struct{}

type MigrationsDeleteArchiveForAuthenticatedUserForbidden BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserForbidden) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

// MigrationsDeleteArchiveForAuthenticatedUserNoContent is response for MigrationsDeleteArchiveForAuthenticatedUser operation.
type MigrationsDeleteArchiveForAuthenticatedUserNoContent struct{}

func (*MigrationsDeleteArchiveForAuthenticatedUserNoContent) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

type MigrationsDeleteArchiveForAuthenticatedUserNotFound BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserNotFound) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

type MigrationsDeleteArchiveForAuthenticatedUserUnauthorized BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserUnauthorized) migrationsDeleteArchiveForAuthenticatedUserRes() {
}

// MigrationsDeleteArchiveForOrgNoContent is response for MigrationsDeleteArchiveForOrg operation.
type MigrationsDeleteArchiveForOrgNoContent struct{}

func (*MigrationsDeleteArchiveForOrgNoContent) migrationsDeleteArchiveForOrgRes() {}

// MigrationsDownloadArchiveForOrgFound is response for MigrationsDownloadArchiveForOrg operation.
type MigrationsDownloadArchiveForOrgFound struct{}

func (*MigrationsDownloadArchiveForOrgFound) migrationsDownloadArchiveForOrgRes() {}

type MigrationsGetArchiveForAuthenticatedUserForbidden BasicError

func (*MigrationsGetArchiveForAuthenticatedUserForbidden) migrationsGetArchiveForAuthenticatedUserRes() {
}

// MigrationsGetArchiveForAuthenticatedUserFound is response for MigrationsGetArchiveForAuthenticatedUser operation.
type MigrationsGetArchiveForAuthenticatedUserFound struct{}

func (*MigrationsGetArchiveForAuthenticatedUserFound) migrationsGetArchiveForAuthenticatedUserRes() {}

type MigrationsGetArchiveForAuthenticatedUserUnauthorized BasicError

func (*MigrationsGetArchiveForAuthenticatedUserUnauthorized) migrationsGetArchiveForAuthenticatedUserRes() {
}

type MigrationsGetCommitAuthorsOKApplicationJSON []PorterAuthor

func (*MigrationsGetCommitAuthorsOKApplicationJSON) migrationsGetCommitAuthorsRes() {}

type MigrationsGetStatusForAuthenticatedUserForbidden BasicError

func (*MigrationsGetStatusForAuthenticatedUserForbidden) migrationsGetStatusForAuthenticatedUserRes() {
}

type MigrationsGetStatusForAuthenticatedUserNotFound BasicError

func (*MigrationsGetStatusForAuthenticatedUserNotFound) migrationsGetStatusForAuthenticatedUserRes() {
}

type MigrationsGetStatusForAuthenticatedUserUnauthorized BasicError

func (*MigrationsGetStatusForAuthenticatedUserUnauthorized) migrationsGetStatusForAuthenticatedUserRes() {
}

// Allowed values that can be passed to the exclude param.
type MigrationsGetStatusForOrgExcludeItem string

const (
	MigrationsGetStatusForOrgExcludeItemRepositories MigrationsGetStatusForOrgExcludeItem = "repositories"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrationsGetStatusForOrgExcludeItem) MarshalText() ([]byte, error) {
	switch s {
	case MigrationsGetStatusForOrgExcludeItemRepositories:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrationsGetStatusForOrgExcludeItem) UnmarshalText(data []byte) error {
	switch MigrationsGetStatusForOrgExcludeItem(data) {
	case MigrationsGetStatusForOrgExcludeItemRepositories:
		*s = MigrationsGetStatusForOrgExcludeItemRepositories
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrationsListForAuthenticatedUserForbidden BasicError

func (*MigrationsListForAuthenticatedUserForbidden) migrationsListForAuthenticatedUserRes() {}

// MigrationsListForAuthenticatedUserOKHeaders wraps []Migration with response headers.
type MigrationsListForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []Migration
}

// GetLink returns the value of Link.
func (s *MigrationsListForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *MigrationsListForAuthenticatedUserOKHeaders) GetResponse() []Migration {
	return s.Response
}

// SetLink sets the value of Link.
func (s *MigrationsListForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *MigrationsListForAuthenticatedUserOKHeaders) SetResponse(val []Migration) {
	s.Response = val
}

func (*MigrationsListForAuthenticatedUserOKHeaders) migrationsListForAuthenticatedUserRes() {}

type MigrationsListForAuthenticatedUserUnauthorized BasicError

func (*MigrationsListForAuthenticatedUserUnauthorized) migrationsListForAuthenticatedUserRes() {}

// Allowed values that can be passed to the exclude param.
type MigrationsListForOrgExcludeItem string

const (
	MigrationsListForOrgExcludeItemRepositories MigrationsListForOrgExcludeItem = "repositories"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrationsListForOrgExcludeItem) MarshalText() ([]byte, error) {
	switch s {
	case MigrationsListForOrgExcludeItemRepositories:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrationsListForOrgExcludeItem) UnmarshalText(data []byte) error {
	switch MigrationsListForOrgExcludeItem(data) {
	case MigrationsListForOrgExcludeItemRepositories:
		*s = MigrationsListForOrgExcludeItemRepositories
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// MigrationsListForOrgOKHeaders wraps []Migration with response headers.
type MigrationsListForOrgOKHeaders struct {
	Link     OptString
	Response []Migration
}

// GetLink returns the value of Link.
func (s *MigrationsListForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *MigrationsListForOrgOKHeaders) GetResponse() []Migration {
	return s.Response
}

// SetLink sets the value of Link.
func (s *MigrationsListForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *MigrationsListForOrgOKHeaders) SetResponse(val []Migration) {
	s.Response = val
}

// MigrationsListReposForOrgOKHeaders wraps []MinimalRepository with response headers.
type MigrationsListReposForOrgOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *MigrationsListReposForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *MigrationsListReposForOrgOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *MigrationsListReposForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *MigrationsListReposForOrgOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

func (*MigrationsListReposForOrgOKHeaders) migrationsListReposForOrgRes() {}

// MigrationsListReposForUserOKHeaders wraps []MinimalRepository with response headers.
type MigrationsListReposForUserOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *MigrationsListReposForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *MigrationsListReposForUserOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *MigrationsListReposForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *MigrationsListReposForUserOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

func (*MigrationsListReposForUserOKHeaders) migrationsListReposForUserRes() {}

type MigrationsMapCommitAuthorReq struct {
	// The new Git author email.
	Email OptString `json:"email"`
	// The new Git author name.
	Name OptString `json:"name"`
}

// GetEmail returns the value of Email.
func (s *MigrationsMapCommitAuthorReq) GetEmail() OptString {
	return s.Email
}

// GetName returns the value of Name.
func (s *MigrationsMapCommitAuthorReq) GetName() OptString {
	return s.Name
}

// SetEmail sets the value of Email.
func (s *MigrationsMapCommitAuthorReq) SetEmail(val OptString) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *MigrationsMapCommitAuthorReq) SetName(val OptString) {
	s.Name = val
}

type MigrationsSetLfsPreferenceReq struct {
	// Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will
	// be removed during the import).
	UseLfs MigrationsSetLfsPreferenceReqUseLfs `json:"use_lfs"`
}

// GetUseLfs returns the value of UseLfs.
func (s *MigrationsSetLfsPreferenceReq) GetUseLfs() MigrationsSetLfsPreferenceReqUseLfs {
	return s.UseLfs
}

// SetUseLfs sets the value of UseLfs.
func (s *MigrationsSetLfsPreferenceReq) SetUseLfs(val MigrationsSetLfsPreferenceReqUseLfs) {
	s.UseLfs = val
}

// Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will
// be removed during the import).
type MigrationsSetLfsPreferenceReqUseLfs string

const (
	MigrationsSetLfsPreferenceReqUseLfsOptIn  MigrationsSetLfsPreferenceReqUseLfs = "opt_in"
	MigrationsSetLfsPreferenceReqUseLfsOptOut MigrationsSetLfsPreferenceReqUseLfs = "opt_out"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrationsSetLfsPreferenceReqUseLfs) MarshalText() ([]byte, error) {
	switch s {
	case MigrationsSetLfsPreferenceReqUseLfsOptIn:
		return []byte(s), nil
	case MigrationsSetLfsPreferenceReqUseLfsOptOut:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrationsSetLfsPreferenceReqUseLfs) UnmarshalText(data []byte) error {
	switch MigrationsSetLfsPreferenceReqUseLfs(data) {
	case MigrationsSetLfsPreferenceReqUseLfsOptIn:
		*s = MigrationsSetLfsPreferenceReqUseLfsOptIn
		return nil
	case MigrationsSetLfsPreferenceReqUseLfsOptOut:
		*s = MigrationsSetLfsPreferenceReqUseLfsOptOut
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrationsStartForAuthenticatedUserForbidden BasicError

func (*MigrationsStartForAuthenticatedUserForbidden) migrationsStartForAuthenticatedUserRes() {}

type MigrationsStartForAuthenticatedUserReq struct {
	// Lock the repositories being migrated at the start of the migration.
	LockRepositories OptBool `json:"lock_repositories"`
	// Do not include attachments in the migration.
	ExcludeAttachments OptBool `json:"exclude_attachments"`
	// Do not include releases in the migration.
	ExcludeReleases OptBool `json:"exclude_releases"`
	// Indicates whether projects owned by the organization or users should be excluded.
	ExcludeOwnerProjects OptBool `json:"exclude_owner_projects"`
	// Exclude attributes from the API response to improve performance.
	Exclude      []MigrationsStartForAuthenticatedUserReqExcludeItem `json:"exclude"`
	Repositories []string                                            `json:"repositories"`
}

// GetLockRepositories returns the value of LockRepositories.
func (s *MigrationsStartForAuthenticatedUserReq) GetLockRepositories() OptBool {
	return s.LockRepositories
}

// GetExcludeAttachments returns the value of ExcludeAttachments.
func (s *MigrationsStartForAuthenticatedUserReq) GetExcludeAttachments() OptBool {
	return s.ExcludeAttachments
}

// GetExcludeReleases returns the value of ExcludeReleases.
func (s *MigrationsStartForAuthenticatedUserReq) GetExcludeReleases() OptBool {
	return s.ExcludeReleases
}

// GetExcludeOwnerProjects returns the value of ExcludeOwnerProjects.
func (s *MigrationsStartForAuthenticatedUserReq) GetExcludeOwnerProjects() OptBool {
	return s.ExcludeOwnerProjects
}

// GetExclude returns the value of Exclude.
func (s *MigrationsStartForAuthenticatedUserReq) GetExclude() []MigrationsStartForAuthenticatedUserReqExcludeItem {
	return s.Exclude
}

// GetRepositories returns the value of Repositories.
func (s *MigrationsStartForAuthenticatedUserReq) GetRepositories() []string {
	return s.Repositories
}

// SetLockRepositories sets the value of LockRepositories.
func (s *MigrationsStartForAuthenticatedUserReq) SetLockRepositories(val OptBool) {
	s.LockRepositories = val
}

// SetExcludeAttachments sets the value of ExcludeAttachments.
func (s *MigrationsStartForAuthenticatedUserReq) SetExcludeAttachments(val OptBool) {
	s.ExcludeAttachments = val
}

// SetExcludeReleases sets the value of ExcludeReleases.
func (s *MigrationsStartForAuthenticatedUserReq) SetExcludeReleases(val OptBool) {
	s.ExcludeReleases = val
}

// SetExcludeOwnerProjects sets the value of ExcludeOwnerProjects.
func (s *MigrationsStartForAuthenticatedUserReq) SetExcludeOwnerProjects(val OptBool) {
	s.ExcludeOwnerProjects = val
}

// SetExclude sets the value of Exclude.
func (s *MigrationsStartForAuthenticatedUserReq) SetExclude(val []MigrationsStartForAuthenticatedUserReqExcludeItem) {
	s.Exclude = val
}

// SetRepositories sets the value of Repositories.
func (s *MigrationsStartForAuthenticatedUserReq) SetRepositories(val []string) {
	s.Repositories = val
}

// Allowed values that can be passed to the exclude param.
type MigrationsStartForAuthenticatedUserReqExcludeItem string

const (
	MigrationsStartForAuthenticatedUserReqExcludeItemRepositories MigrationsStartForAuthenticatedUserReqExcludeItem = "repositories"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrationsStartForAuthenticatedUserReqExcludeItem) MarshalText() ([]byte, error) {
	switch s {
	case MigrationsStartForAuthenticatedUserReqExcludeItemRepositories:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrationsStartForAuthenticatedUserReqExcludeItem) UnmarshalText(data []byte) error {
	switch MigrationsStartForAuthenticatedUserReqExcludeItem(data) {
	case MigrationsStartForAuthenticatedUserReqExcludeItemRepositories:
		*s = MigrationsStartForAuthenticatedUserReqExcludeItemRepositories
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrationsStartForAuthenticatedUserUnauthorized BasicError

func (*MigrationsStartForAuthenticatedUserUnauthorized) migrationsStartForAuthenticatedUserRes() {}

type MigrationsStartForOrgReq struct {
	// A list of arrays indicating which repositories should be migrated.
	Repositories []string `json:"repositories"`
	// Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
	LockRepositories OptBool `json:"lock_repositories"`
	// Indicates whether attachments should be excluded from the migration (to reduce migration archive
	// file size).
	ExcludeAttachments OptBool `json:"exclude_attachments"`
	// Indicates whether releases should be excluded from the migration (to reduce migration archive file
	// size).
	ExcludeReleases OptBool `json:"exclude_releases"`
	// Indicates whether projects owned by the organization or users should be excluded. from the
	// migration.
	ExcludeOwnerProjects OptBool                               `json:"exclude_owner_projects"`
	Exclude              []MigrationsStartForOrgReqExcludeItem `json:"exclude"`
}

// GetRepositories returns the value of Repositories.
func (s *MigrationsStartForOrgReq) GetRepositories() []string {
	return s.Repositories
}

// GetLockRepositories returns the value of LockRepositories.
func (s *MigrationsStartForOrgReq) GetLockRepositories() OptBool {
	return s.LockRepositories
}

// GetExcludeAttachments returns the value of ExcludeAttachments.
func (s *MigrationsStartForOrgReq) GetExcludeAttachments() OptBool {
	return s.ExcludeAttachments
}

// GetExcludeReleases returns the value of ExcludeReleases.
func (s *MigrationsStartForOrgReq) GetExcludeReleases() OptBool {
	return s.ExcludeReleases
}

// GetExcludeOwnerProjects returns the value of ExcludeOwnerProjects.
func (s *MigrationsStartForOrgReq) GetExcludeOwnerProjects() OptBool {
	return s.ExcludeOwnerProjects
}

// GetExclude returns the value of Exclude.
func (s *MigrationsStartForOrgReq) GetExclude() []MigrationsStartForOrgReqExcludeItem {
	return s.Exclude
}

// SetRepositories sets the value of Repositories.
func (s *MigrationsStartForOrgReq) SetRepositories(val []string) {
	s.Repositories = val
}

// SetLockRepositories sets the value of LockRepositories.
func (s *MigrationsStartForOrgReq) SetLockRepositories(val OptBool) {
	s.LockRepositories = val
}

// SetExcludeAttachments sets the value of ExcludeAttachments.
func (s *MigrationsStartForOrgReq) SetExcludeAttachments(val OptBool) {
	s.ExcludeAttachments = val
}

// SetExcludeReleases sets the value of ExcludeReleases.
func (s *MigrationsStartForOrgReq) SetExcludeReleases(val OptBool) {
	s.ExcludeReleases = val
}

// SetExcludeOwnerProjects sets the value of ExcludeOwnerProjects.
func (s *MigrationsStartForOrgReq) SetExcludeOwnerProjects(val OptBool) {
	s.ExcludeOwnerProjects = val
}

// SetExclude sets the value of Exclude.
func (s *MigrationsStartForOrgReq) SetExclude(val []MigrationsStartForOrgReqExcludeItem) {
	s.Exclude = val
}

type MigrationsStartForOrgReqExcludeItem string

const (
	MigrationsStartForOrgReqExcludeItemRepositories MigrationsStartForOrgReqExcludeItem = "repositories"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrationsStartForOrgReqExcludeItem) MarshalText() ([]byte, error) {
	switch s {
	case MigrationsStartForOrgReqExcludeItemRepositories:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrationsStartForOrgReqExcludeItem) UnmarshalText(data []byte) error {
	switch MigrationsStartForOrgReqExcludeItem(data) {
	case MigrationsStartForOrgReqExcludeItemRepositories:
		*s = MigrationsStartForOrgReqExcludeItemRepositories
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrationsStartImportReq struct {
	// The URL of the originating repository.
	VcsURL string `json:"vcs_url"`
	// The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be
	// aware that without this parameter, the import job will take additional time to detect the VCS type
	// before beginning the import. This detection step will be reflected in the response.
	Vcs OptMigrationsStartImportReqVcs `json:"vcs"`
	// If authentication is required, the username to provide to `vcs_url`.
	VcsUsername OptString `json:"vcs_username"`
	// If authentication is required, the password to provide to `vcs_url`.
	VcsPassword OptString `json:"vcs_password"`
	// For a tfvc import, the name of the project that is being imported.
	TfvcProject OptString `json:"tfvc_project"`
}

// GetVcsURL returns the value of VcsURL.
func (s *MigrationsStartImportReq) GetVcsURL() string {
	return s.VcsURL
}

// GetVcs returns the value of Vcs.
func (s *MigrationsStartImportReq) GetVcs() OptMigrationsStartImportReqVcs {
	return s.Vcs
}

// GetVcsUsername returns the value of VcsUsername.
func (s *MigrationsStartImportReq) GetVcsUsername() OptString {
	return s.VcsUsername
}

// GetVcsPassword returns the value of VcsPassword.
func (s *MigrationsStartImportReq) GetVcsPassword() OptString {
	return s.VcsPassword
}

// GetTfvcProject returns the value of TfvcProject.
func (s *MigrationsStartImportReq) GetTfvcProject() OptString {
	return s.TfvcProject
}

// SetVcsURL sets the value of VcsURL.
func (s *MigrationsStartImportReq) SetVcsURL(val string) {
	s.VcsURL = val
}

// SetVcs sets the value of Vcs.
func (s *MigrationsStartImportReq) SetVcs(val OptMigrationsStartImportReqVcs) {
	s.Vcs = val
}

// SetVcsUsername sets the value of VcsUsername.
func (s *MigrationsStartImportReq) SetVcsUsername(val OptString) {
	s.VcsUsername = val
}

// SetVcsPassword sets the value of VcsPassword.
func (s *MigrationsStartImportReq) SetVcsPassword(val OptString) {
	s.VcsPassword = val
}

// SetTfvcProject sets the value of TfvcProject.
func (s *MigrationsStartImportReq) SetTfvcProject(val OptString) {
	s.TfvcProject = val
}

// The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be
// aware that without this parameter, the import job will take additional time to detect the VCS type
// before beginning the import. This detection step will be reflected in the response.
type MigrationsStartImportReqVcs string

const (
	MigrationsStartImportReqVcsSubversion MigrationsStartImportReqVcs = "subversion"
	MigrationsStartImportReqVcsGit        MigrationsStartImportReqVcs = "git"
	MigrationsStartImportReqVcsMercurial  MigrationsStartImportReqVcs = "mercurial"
	MigrationsStartImportReqVcsTfvc       MigrationsStartImportReqVcs = "tfvc"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrationsStartImportReqVcs) MarshalText() ([]byte, error) {
	switch s {
	case MigrationsStartImportReqVcsSubversion:
		return []byte(s), nil
	case MigrationsStartImportReqVcsGit:
		return []byte(s), nil
	case MigrationsStartImportReqVcsMercurial:
		return []byte(s), nil
	case MigrationsStartImportReqVcsTfvc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrationsStartImportReqVcs) UnmarshalText(data []byte) error {
	switch MigrationsStartImportReqVcs(data) {
	case MigrationsStartImportReqVcsSubversion:
		*s = MigrationsStartImportReqVcsSubversion
		return nil
	case MigrationsStartImportReqVcsGit:
		*s = MigrationsStartImportReqVcsGit
		return nil
	case MigrationsStartImportReqVcsMercurial:
		*s = MigrationsStartImportReqVcsMercurial
		return nil
	case MigrationsStartImportReqVcsTfvc:
		*s = MigrationsStartImportReqVcsTfvc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrationsUnlockRepoForAuthenticatedUserForbidden BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserForbidden) migrationsUnlockRepoForAuthenticatedUserRes() {
}

// MigrationsUnlockRepoForAuthenticatedUserNoContent is response for MigrationsUnlockRepoForAuthenticatedUser operation.
type MigrationsUnlockRepoForAuthenticatedUserNoContent struct{}

func (*MigrationsUnlockRepoForAuthenticatedUserNoContent) migrationsUnlockRepoForAuthenticatedUserRes() {
}

type MigrationsUnlockRepoForAuthenticatedUserNotFound BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserNotFound) migrationsUnlockRepoForAuthenticatedUserRes() {
}

type MigrationsUnlockRepoForAuthenticatedUserUnauthorized BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserUnauthorized) migrationsUnlockRepoForAuthenticatedUserRes() {
}

// MigrationsUnlockRepoForOrgNoContent is response for MigrationsUnlockRepoForOrg operation.
type MigrationsUnlockRepoForOrgNoContent struct{}

func (*MigrationsUnlockRepoForOrgNoContent) migrationsUnlockRepoForOrgRes() {}

type MigrationsUpdateImportReq struct {
	// The username to provide to the originating repository.
	VcsUsername OptString `json:"vcs_username"`
	// The password to provide to the originating repository.
	VcsPassword OptString `json:"vcs_password"`
	Vcs         OptString `json:"vcs"`
	TfvcProject OptString `json:"tfvc_project"`
}

// GetVcsUsername returns the value of VcsUsername.
func (s *MigrationsUpdateImportReq) GetVcsUsername() OptString {
	return s.VcsUsername
}

// GetVcsPassword returns the value of VcsPassword.
func (s *MigrationsUpdateImportReq) GetVcsPassword() OptString {
	return s.VcsPassword
}

// GetVcs returns the value of Vcs.
func (s *MigrationsUpdateImportReq) GetVcs() OptString {
	return s.Vcs
}

// GetTfvcProject returns the value of TfvcProject.
func (s *MigrationsUpdateImportReq) GetTfvcProject() OptString {
	return s.TfvcProject
}

// SetVcsUsername sets the value of VcsUsername.
func (s *MigrationsUpdateImportReq) SetVcsUsername(val OptString) {
	s.VcsUsername = val
}

// SetVcsPassword sets the value of VcsPassword.
func (s *MigrationsUpdateImportReq) SetVcsPassword(val OptString) {
	s.VcsPassword = val
}

// SetVcs sets the value of Vcs.
func (s *MigrationsUpdateImportReq) SetVcs(val OptString) {
	s.Vcs = val
}

// SetTfvcProject sets the value of TfvcProject.
func (s *MigrationsUpdateImportReq) SetTfvcProject(val OptString) {
	s.TfvcProject = val
}

// A collection of related issues and pull requests.
// Ref: #/components/schemas/milestone
type Milestone struct {
	URL       url.URL `json:"url"`
	HTMLURL   url.URL `json:"html_url"`
	LabelsURL url.URL `json:"labels_url"`
	ID        int     `json:"id"`
	NodeID    string  `json:"node_id"`
	// The number of the milestone.
	Number int `json:"number"`
	// The state of the milestone.
	State MilestoneState `json:"state"`
	// The title of the milestone.
	Title        string                `json:"title"`
	Description  NilString             `json:"description"`
	Creator      NilNullableSimpleUser `json:"creator"`
	OpenIssues   int                   `json:"open_issues"`
	ClosedIssues int                   `json:"closed_issues"`
	CreatedAt    time.Time             `json:"created_at"`
	UpdatedAt    time.Time             `json:"updated_at"`
	ClosedAt     NilDateTime           `json:"closed_at"`
	DueOn        NilDateTime           `json:"due_on"`
}

// GetURL returns the value of URL.
func (s *Milestone) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Milestone) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *Milestone) GetLabelsURL() url.URL {
	return s.LabelsURL
}

// GetID returns the value of ID.
func (s *Milestone) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Milestone) GetNodeID() string {
	return s.NodeID
}

// GetNumber returns the value of Number.
func (s *Milestone) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *Milestone) GetState() MilestoneState {
	return s.State
}

// GetTitle returns the value of Title.
func (s *Milestone) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Milestone) GetDescription() NilString {
	return s.Description
}

// GetCreator returns the value of Creator.
func (s *Milestone) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// GetOpenIssues returns the value of OpenIssues.
func (s *Milestone) GetOpenIssues() int {
	return s.OpenIssues
}

// GetClosedIssues returns the value of ClosedIssues.
func (s *Milestone) GetClosedIssues() int {
	return s.ClosedIssues
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Milestone) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Milestone) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetClosedAt returns the value of ClosedAt.
func (s *Milestone) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetDueOn returns the value of DueOn.
func (s *Milestone) GetDueOn() NilDateTime {
	return s.DueOn
}

// SetURL sets the value of URL.
func (s *Milestone) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Milestone) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *Milestone) SetLabelsURL(val url.URL) {
	s.LabelsURL = val
}

// SetID sets the value of ID.
func (s *Milestone) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Milestone) SetNodeID(val string) {
	s.NodeID = val
}

// SetNumber sets the value of Number.
func (s *Milestone) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *Milestone) SetState(val MilestoneState) {
	s.State = val
}

// SetTitle sets the value of Title.
func (s *Milestone) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Milestone) SetDescription(val NilString) {
	s.Description = val
}

// SetCreator sets the value of Creator.
func (s *Milestone) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *Milestone) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetClosedIssues sets the value of ClosedIssues.
func (s *Milestone) SetClosedIssues(val int) {
	s.ClosedIssues = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Milestone) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Milestone) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *Milestone) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetDueOn sets the value of DueOn.
func (s *Milestone) SetDueOn(val NilDateTime) {
	s.DueOn = val
}

func (*Milestone) issuesGetMilestoneRes() {}

// MilestoneHeaders wraps Milestone with response headers.
type MilestoneHeaders struct {
	Location OptString
	Response Milestone
}

// GetLocation returns the value of Location.
func (s *MilestoneHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *MilestoneHeaders) GetResponse() Milestone {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *MilestoneHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *MilestoneHeaders) SetResponse(val Milestone) {
	s.Response = val
}

func (*MilestoneHeaders) issuesCreateMilestoneRes() {}

// The state of the milestone.
type MilestoneState string

const (
	MilestoneStateOpen   MilestoneState = "open"
	MilestoneStateClosed MilestoneState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s MilestoneState) MarshalText() ([]byte, error) {
	switch s {
	case MilestoneStateOpen:
		return []byte(s), nil
	case MilestoneStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MilestoneState) UnmarshalText(data []byte) error {
	switch MilestoneState(data) {
	case MilestoneStateOpen:
		*s = MilestoneStateOpen
		return nil
	case MilestoneStateClosed:
		*s = MilestoneStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Minimal Repository.
// Ref: #/components/schemas/minimal-repository
type MinimalRepository struct {
	ID                  int                             `json:"id"`
	NodeID              string                          `json:"node_id"`
	Name                string                          `json:"name"`
	FullName            string                          `json:"full_name"`
	Owner               SimpleUser                      `json:"owner"`
	Private             bool                            `json:"private"`
	HTMLURL             url.URL                         `json:"html_url"`
	Description         NilString                       `json:"description"`
	Fork                bool                            `json:"fork"`
	URL                 url.URL                         `json:"url"`
	ArchiveURL          string                          `json:"archive_url"`
	AssigneesURL        string                          `json:"assignees_url"`
	BlobsURL            string                          `json:"blobs_url"`
	BranchesURL         string                          `json:"branches_url"`
	CollaboratorsURL    string                          `json:"collaborators_url"`
	CommentsURL         string                          `json:"comments_url"`
	CommitsURL          string                          `json:"commits_url"`
	CompareURL          string                          `json:"compare_url"`
	ContentsURL         string                          `json:"contents_url"`
	ContributorsURL     url.URL                         `json:"contributors_url"`
	DeploymentsURL      url.URL                         `json:"deployments_url"`
	DownloadsURL        url.URL                         `json:"downloads_url"`
	EventsURL           url.URL                         `json:"events_url"`
	ForksURL            url.URL                         `json:"forks_url"`
	GitCommitsURL       string                          `json:"git_commits_url"`
	GitRefsURL          string                          `json:"git_refs_url"`
	GitTagsURL          string                          `json:"git_tags_url"`
	GitURL              OptString                       `json:"git_url"`
	IssueCommentURL     string                          `json:"issue_comment_url"`
	IssueEventsURL      string                          `json:"issue_events_url"`
	IssuesURL           string                          `json:"issues_url"`
	KeysURL             string                          `json:"keys_url"`
	LabelsURL           string                          `json:"labels_url"`
	LanguagesURL        url.URL                         `json:"languages_url"`
	MergesURL           url.URL                         `json:"merges_url"`
	MilestonesURL       string                          `json:"milestones_url"`
	NotificationsURL    string                          `json:"notifications_url"`
	PullsURL            string                          `json:"pulls_url"`
	ReleasesURL         string                          `json:"releases_url"`
	SSHURL              OptString                       `json:"ssh_url"`
	StargazersURL       url.URL                         `json:"stargazers_url"`
	StatusesURL         string                          `json:"statuses_url"`
	SubscribersURL      url.URL                         `json:"subscribers_url"`
	SubscriptionURL     url.URL                         `json:"subscription_url"`
	TagsURL             url.URL                         `json:"tags_url"`
	TeamsURL            url.URL                         `json:"teams_url"`
	TreesURL            string                          `json:"trees_url"`
	CloneURL            OptString                       `json:"clone_url"`
	MirrorURL           OptNilString                    `json:"mirror_url"`
	HooksURL            url.URL                         `json:"hooks_url"`
	SvnURL              OptString                       `json:"svn_url"`
	Homepage            OptNilString                    `json:"homepage"`
	Language            OptNilString                    `json:"language"`
	ForksCount          OptInt                          `json:"forks_count"`
	StargazersCount     OptInt                          `json:"stargazers_count"`
	WatchersCount       OptInt                          `json:"watchers_count"`
	Size                OptInt                          `json:"size"`
	DefaultBranch       OptString                       `json:"default_branch"`
	OpenIssuesCount     OptInt                          `json:"open_issues_count"`
	IsTemplate          OptBool                         `json:"is_template"`
	Topics              []string                        `json:"topics"`
	HasIssues           OptBool                         `json:"has_issues"`
	HasProjects         OptBool                         `json:"has_projects"`
	HasWiki             OptBool                         `json:"has_wiki"`
	HasPages            OptBool                         `json:"has_pages"`
	HasDownloads        OptBool                         `json:"has_downloads"`
	Archived            OptBool                         `json:"archived"`
	Disabled            OptBool                         `json:"disabled"`
	Visibility          OptString                       `json:"visibility"`
	PushedAt            OptNilDateTime                  `json:"pushed_at"`
	CreatedAt           OptNilDateTime                  `json:"created_at"`
	UpdatedAt           OptNilDateTime                  `json:"updated_at"`
	Permissions         OptMinimalRepositoryPermissions `json:"permissions"`
	TemplateRepository  OptNilNullableRepository        `json:"template_repository"`
	TempCloneToken      OptString                       `json:"temp_clone_token"`
	DeleteBranchOnMerge OptBool                         `json:"delete_branch_on_merge"`
	SubscribersCount    OptInt                          `json:"subscribers_count"`
	NetworkCount        OptInt                          `json:"network_count"`
	CodeOfConduct       OptCodeOfConduct                `json:"code_of_conduct"`
	License             OptNilMinimalRepositoryLicense  `json:"license"`
	Forks               OptInt                          `json:"forks"`
	OpenIssues          OptInt                          `json:"open_issues"`
	Watchers            OptInt                          `json:"watchers"`
	AllowForking        OptBool                         `json:"allow_forking"`
}

// GetID returns the value of ID.
func (s *MinimalRepository) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *MinimalRepository) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *MinimalRepository) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *MinimalRepository) GetFullName() string {
	return s.FullName
}

// GetOwner returns the value of Owner.
func (s *MinimalRepository) GetOwner() SimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *MinimalRepository) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *MinimalRepository) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *MinimalRepository) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *MinimalRepository) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *MinimalRepository) GetURL() url.URL {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *MinimalRepository) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *MinimalRepository) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *MinimalRepository) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *MinimalRepository) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *MinimalRepository) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *MinimalRepository) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *MinimalRepository) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *MinimalRepository) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *MinimalRepository) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *MinimalRepository) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *MinimalRepository) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *MinimalRepository) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *MinimalRepository) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *MinimalRepository) GetForksURL() url.URL {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *MinimalRepository) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *MinimalRepository) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *MinimalRepository) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *MinimalRepository) GetGitURL() OptString {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *MinimalRepository) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *MinimalRepository) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *MinimalRepository) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *MinimalRepository) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *MinimalRepository) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *MinimalRepository) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *MinimalRepository) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *MinimalRepository) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *MinimalRepository) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *MinimalRepository) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *MinimalRepository) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *MinimalRepository) GetSSHURL() OptString {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *MinimalRepository) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *MinimalRepository) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *MinimalRepository) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *MinimalRepository) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *MinimalRepository) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *MinimalRepository) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *MinimalRepository) GetTreesURL() string {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *MinimalRepository) GetCloneURL() OptString {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *MinimalRepository) GetMirrorURL() OptNilString {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *MinimalRepository) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *MinimalRepository) GetSvnURL() OptString {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *MinimalRepository) GetHomepage() OptNilString {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *MinimalRepository) GetLanguage() OptNilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *MinimalRepository) GetForksCount() OptInt {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *MinimalRepository) GetStargazersCount() OptInt {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *MinimalRepository) GetWatchersCount() OptInt {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *MinimalRepository) GetSize() OptInt {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *MinimalRepository) GetDefaultBranch() OptString {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *MinimalRepository) GetOpenIssuesCount() OptInt {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *MinimalRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *MinimalRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *MinimalRepository) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *MinimalRepository) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *MinimalRepository) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *MinimalRepository) GetHasPages() OptBool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *MinimalRepository) GetHasDownloads() OptBool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *MinimalRepository) GetArchived() OptBool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *MinimalRepository) GetDisabled() OptBool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *MinimalRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *MinimalRepository) GetPushedAt() OptNilDateTime {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *MinimalRepository) GetCreatedAt() OptNilDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *MinimalRepository) GetUpdatedAt() OptNilDateTime {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *MinimalRepository) GetPermissions() OptMinimalRepositoryPermissions {
	return s.Permissions
}

// GetTemplateRepository returns the value of TemplateRepository.
func (s *MinimalRepository) GetTemplateRepository() OptNilNullableRepository {
	return s.TemplateRepository
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *MinimalRepository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *MinimalRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *MinimalRepository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *MinimalRepository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// GetCodeOfConduct returns the value of CodeOfConduct.
func (s *MinimalRepository) GetCodeOfConduct() OptCodeOfConduct {
	return s.CodeOfConduct
}

// GetLicense returns the value of License.
func (s *MinimalRepository) GetLicense() OptNilMinimalRepositoryLicense {
	return s.License
}

// GetForks returns the value of Forks.
func (s *MinimalRepository) GetForks() OptInt {
	return s.Forks
}

// GetOpenIssues returns the value of OpenIssues.
func (s *MinimalRepository) GetOpenIssues() OptInt {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *MinimalRepository) GetWatchers() OptInt {
	return s.Watchers
}

// GetAllowForking returns the value of AllowForking.
func (s *MinimalRepository) GetAllowForking() OptBool {
	return s.AllowForking
}

// SetID sets the value of ID.
func (s *MinimalRepository) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *MinimalRepository) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *MinimalRepository) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *MinimalRepository) SetFullName(val string) {
	s.FullName = val
}

// SetOwner sets the value of Owner.
func (s *MinimalRepository) SetOwner(val SimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *MinimalRepository) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *MinimalRepository) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *MinimalRepository) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *MinimalRepository) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *MinimalRepository) SetURL(val url.URL) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *MinimalRepository) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *MinimalRepository) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *MinimalRepository) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *MinimalRepository) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *MinimalRepository) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *MinimalRepository) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *MinimalRepository) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *MinimalRepository) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *MinimalRepository) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *MinimalRepository) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *MinimalRepository) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *MinimalRepository) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *MinimalRepository) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *MinimalRepository) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *MinimalRepository) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *MinimalRepository) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *MinimalRepository) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *MinimalRepository) SetGitURL(val OptString) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *MinimalRepository) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *MinimalRepository) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *MinimalRepository) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *MinimalRepository) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *MinimalRepository) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *MinimalRepository) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *MinimalRepository) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *MinimalRepository) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *MinimalRepository) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *MinimalRepository) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *MinimalRepository) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *MinimalRepository) SetSSHURL(val OptString) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *MinimalRepository) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *MinimalRepository) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *MinimalRepository) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *MinimalRepository) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *MinimalRepository) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *MinimalRepository) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *MinimalRepository) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *MinimalRepository) SetCloneURL(val OptString) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *MinimalRepository) SetMirrorURL(val OptNilString) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *MinimalRepository) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *MinimalRepository) SetSvnURL(val OptString) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *MinimalRepository) SetHomepage(val OptNilString) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *MinimalRepository) SetLanguage(val OptNilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *MinimalRepository) SetForksCount(val OptInt) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *MinimalRepository) SetStargazersCount(val OptInt) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *MinimalRepository) SetWatchersCount(val OptInt) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *MinimalRepository) SetSize(val OptInt) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *MinimalRepository) SetDefaultBranch(val OptString) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *MinimalRepository) SetOpenIssuesCount(val OptInt) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *MinimalRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *MinimalRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *MinimalRepository) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *MinimalRepository) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *MinimalRepository) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *MinimalRepository) SetHasPages(val OptBool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *MinimalRepository) SetHasDownloads(val OptBool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *MinimalRepository) SetArchived(val OptBool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *MinimalRepository) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *MinimalRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *MinimalRepository) SetPushedAt(val OptNilDateTime) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *MinimalRepository) SetCreatedAt(val OptNilDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *MinimalRepository) SetUpdatedAt(val OptNilDateTime) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *MinimalRepository) SetPermissions(val OptMinimalRepositoryPermissions) {
	s.Permissions = val
}

// SetTemplateRepository sets the value of TemplateRepository.
func (s *MinimalRepository) SetTemplateRepository(val OptNilNullableRepository) {
	s.TemplateRepository = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *MinimalRepository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *MinimalRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *MinimalRepository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *MinimalRepository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

// SetCodeOfConduct sets the value of CodeOfConduct.
func (s *MinimalRepository) SetCodeOfConduct(val OptCodeOfConduct) {
	s.CodeOfConduct = val
}

// SetLicense sets the value of License.
func (s *MinimalRepository) SetLicense(val OptNilMinimalRepositoryLicense) {
	s.License = val
}

// SetForks sets the value of Forks.
func (s *MinimalRepository) SetForks(val OptInt) {
	s.Forks = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *MinimalRepository) SetOpenIssues(val OptInt) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *MinimalRepository) SetWatchers(val OptInt) {
	s.Watchers = val
}

// SetAllowForking sets the value of AllowForking.
func (s *MinimalRepository) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

type MinimalRepositoryLicense struct {
	Key    OptString `json:"key"`
	Name   OptString `json:"name"`
	SpdxID OptString `json:"spdx_id"`
	URL    OptString `json:"url"`
	NodeID OptString `json:"node_id"`
}

// GetKey returns the value of Key.
func (s *MinimalRepositoryLicense) GetKey() OptString {
	return s.Key
}

// GetName returns the value of Name.
func (s *MinimalRepositoryLicense) GetName() OptString {
	return s.Name
}

// GetSpdxID returns the value of SpdxID.
func (s *MinimalRepositoryLicense) GetSpdxID() OptString {
	return s.SpdxID
}

// GetURL returns the value of URL.
func (s *MinimalRepositoryLicense) GetURL() OptString {
	return s.URL
}

// GetNodeID returns the value of NodeID.
func (s *MinimalRepositoryLicense) GetNodeID() OptString {
	return s.NodeID
}

// SetKey sets the value of Key.
func (s *MinimalRepositoryLicense) SetKey(val OptString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *MinimalRepositoryLicense) SetName(val OptString) {
	s.Name = val
}

// SetSpdxID sets the value of SpdxID.
func (s *MinimalRepositoryLicense) SetSpdxID(val OptString) {
	s.SpdxID = val
}

// SetURL sets the value of URL.
func (s *MinimalRepositoryLicense) SetURL(val OptString) {
	s.URL = val
}

// SetNodeID sets the value of NodeID.
func (s *MinimalRepositoryLicense) SetNodeID(val OptString) {
	s.NodeID = val
}

type MinimalRepositoryPermissions struct {
	Admin    OptBool `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     OptBool `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     OptBool `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *MinimalRepositoryPermissions) GetAdmin() OptBool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *MinimalRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *MinimalRepositoryPermissions) GetPush() OptBool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *MinimalRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *MinimalRepositoryPermissions) GetPull() OptBool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *MinimalRepositoryPermissions) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *MinimalRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *MinimalRepositoryPermissions) SetPush(val OptBool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *MinimalRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *MinimalRepositoryPermissions) SetPull(val OptBool) {
	s.Pull = val
}

// NewNilAutoMerge returns new NilAutoMerge with value set to v.
func NewNilAutoMerge(v AutoMerge) NilAutoMerge {
	return NilAutoMerge{
		Value: v,
	}
}

// NilAutoMerge is nullable AutoMerge.
type NilAutoMerge struct {
	Value AutoMerge
	Null  bool
}

// SetTo sets value to v.
func (o *NilAutoMerge) SetTo(v AutoMerge) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilAutoMerge) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilAutoMerge) SetToNull() {
	o.Null = true
	var v AutoMerge
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilAutoMerge) Get() (v AutoMerge, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilAutoMerge) Or(d AutoMerge) AutoMerge {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilBool returns new NilBool with value set to v.
func NewNilBool(v bool) NilBool {
	return NilBool{
		Value: v,
	}
}

// NilBool is nullable bool.
type NilBool struct {
	Value bool
	Null  bool
}

// SetTo sets value to v.
func (o *NilBool) SetTo(v bool) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilBool) SetToNull() {
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckRunCheckSuite returns new NilCheckRunCheckSuite with value set to v.
func NewNilCheckRunCheckSuite(v CheckRunCheckSuite) NilCheckRunCheckSuite {
	return NilCheckRunCheckSuite{
		Value: v,
	}
}

// NilCheckRunCheckSuite is nullable CheckRunCheckSuite.
type NilCheckRunCheckSuite struct {
	Value CheckRunCheckSuite
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckRunCheckSuite) SetTo(v CheckRunCheckSuite) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckRunCheckSuite) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCheckRunCheckSuite) SetToNull() {
	o.Null = true
	var v CheckRunCheckSuite
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckRunCheckSuite) Get() (v CheckRunCheckSuite, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckRunCheckSuite) Or(d CheckRunCheckSuite) CheckRunCheckSuite {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckRunConclusion returns new NilCheckRunConclusion with value set to v.
func NewNilCheckRunConclusion(v CheckRunConclusion) NilCheckRunConclusion {
	return NilCheckRunConclusion{
		Value: v,
	}
}

// NilCheckRunConclusion is nullable CheckRunConclusion.
type NilCheckRunConclusion struct {
	Value CheckRunConclusion
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckRunConclusion) SetTo(v CheckRunConclusion) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckRunConclusion) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCheckRunConclusion) SetToNull() {
	o.Null = true
	var v CheckRunConclusion
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckRunConclusion) Get() (v CheckRunConclusion, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckRunConclusion) Or(d CheckRunConclusion) CheckRunConclusion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckSuiteConclusion returns new NilCheckSuiteConclusion with value set to v.
func NewNilCheckSuiteConclusion(v CheckSuiteConclusion) NilCheckSuiteConclusion {
	return NilCheckSuiteConclusion{
		Value: v,
	}
}

// NilCheckSuiteConclusion is nullable CheckSuiteConclusion.
type NilCheckSuiteConclusion struct {
	Value CheckSuiteConclusion
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckSuiteConclusion) SetTo(v CheckSuiteConclusion) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckSuiteConclusion) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCheckSuiteConclusion) SetToNull() {
	o.Null = true
	var v CheckSuiteConclusion
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckSuiteConclusion) Get() (v CheckSuiteConclusion, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckSuiteConclusion) Or(d CheckSuiteConclusion) CheckSuiteConclusion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCheckSuiteStatus returns new NilCheckSuiteStatus with value set to v.
func NewNilCheckSuiteStatus(v CheckSuiteStatus) NilCheckSuiteStatus {
	return NilCheckSuiteStatus{
		Value: v,
	}
}

// NilCheckSuiteStatus is nullable CheckSuiteStatus.
type NilCheckSuiteStatus struct {
	Value CheckSuiteStatus
	Null  bool
}

// SetTo sets value to v.
func (o *NilCheckSuiteStatus) SetTo(v CheckSuiteStatus) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCheckSuiteStatus) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCheckSuiteStatus) SetToNull() {
	o.Null = true
	var v CheckSuiteStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCheckSuiteStatus) Get() (v CheckSuiteStatus, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCheckSuiteStatus) Or(d CheckSuiteStatus) CheckSuiteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCodeScanningAlertClassification returns new NilCodeScanningAlertClassification with value set to v.
func NewNilCodeScanningAlertClassification(v CodeScanningAlertClassification) NilCodeScanningAlertClassification {
	return NilCodeScanningAlertClassification{
		Value: v,
	}
}

// NilCodeScanningAlertClassification is nullable CodeScanningAlertClassification.
type NilCodeScanningAlertClassification struct {
	Value CodeScanningAlertClassification
	Null  bool
}

// SetTo sets value to v.
func (o *NilCodeScanningAlertClassification) SetTo(v CodeScanningAlertClassification) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCodeScanningAlertClassification) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCodeScanningAlertClassification) SetToNull() {
	o.Null = true
	var v CodeScanningAlertClassification
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCodeScanningAlertClassification) Get() (v CodeScanningAlertClassification, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCodeScanningAlertClassification) Or(d CodeScanningAlertClassification) CodeScanningAlertClassification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCodeScanningAlertDismissedAt returns new NilCodeScanningAlertDismissedAt with value set to v.
func NewNilCodeScanningAlertDismissedAt(v CodeScanningAlertDismissedAt) NilCodeScanningAlertDismissedAt {
	return NilCodeScanningAlertDismissedAt{
		Value: v,
	}
}

// NilCodeScanningAlertDismissedAt is nullable CodeScanningAlertDismissedAt.
type NilCodeScanningAlertDismissedAt struct {
	Value CodeScanningAlertDismissedAt
	Null  bool
}

// SetTo sets value to v.
func (o *NilCodeScanningAlertDismissedAt) SetTo(v CodeScanningAlertDismissedAt) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCodeScanningAlertDismissedAt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCodeScanningAlertDismissedAt) SetToNull() {
	o.Null = true
	var v CodeScanningAlertDismissedAt
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCodeScanningAlertDismissedAt) Get() (v CodeScanningAlertDismissedAt, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCodeScanningAlertDismissedAt) Or(d CodeScanningAlertDismissedAt) CodeScanningAlertDismissedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCodeScanningAlertDismissedReason returns new NilCodeScanningAlertDismissedReason with value set to v.
func NewNilCodeScanningAlertDismissedReason(v CodeScanningAlertDismissedReason) NilCodeScanningAlertDismissedReason {
	return NilCodeScanningAlertDismissedReason{
		Value: v,
	}
}

// NilCodeScanningAlertDismissedReason is nullable CodeScanningAlertDismissedReason.
type NilCodeScanningAlertDismissedReason struct {
	Value CodeScanningAlertDismissedReason
	Null  bool
}

// SetTo sets value to v.
func (o *NilCodeScanningAlertDismissedReason) SetTo(v CodeScanningAlertDismissedReason) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCodeScanningAlertDismissedReason) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCodeScanningAlertDismissedReason) SetToNull() {
	o.Null = true
	var v CodeScanningAlertDismissedReason
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCodeScanningAlertDismissedReason) Get() (v CodeScanningAlertDismissedReason, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCodeScanningAlertDismissedReason) Or(d CodeScanningAlertDismissedReason) CodeScanningAlertDismissedReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilDateTime returns new NilDateTime with value set to v.
func NewNilDateTime(v time.Time) NilDateTime {
	return NilDateTime{
		Value: v,
	}
}

// NilDateTime is nullable time.Time.
type NilDateTime struct {
	Value time.Time
	Null  bool
}

// SetTo sets value to v.
func (o *NilDateTime) SetTo(v time.Time) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilDateTime) SetToNull() {
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilFileCommitContent returns new NilFileCommitContent with value set to v.
func NewNilFileCommitContent(v FileCommitContent) NilFileCommitContent {
	return NilFileCommitContent{
		Value: v,
	}
}

// NilFileCommitContent is nullable FileCommitContent.
type NilFileCommitContent struct {
	Value FileCommitContent
	Null  bool
}

// SetTo sets value to v.
func (o *NilFileCommitContent) SetTo(v FileCommitContent) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilFileCommitContent) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilFileCommitContent) SetToNull() {
	o.Null = true
	var v FileCommitContent
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilFileCommitContent) Get() (v FileCommitContent, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilFileCommitContent) Or(d FileCommitContent) FileCommitContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilGistSimpleFilesItem returns new NilGistSimpleFilesItem with value set to v.
func NewNilGistSimpleFilesItem(v GistSimpleFilesItem) NilGistSimpleFilesItem {
	return NilGistSimpleFilesItem{
		Value: v,
	}
}

// NilGistSimpleFilesItem is nullable GistSimpleFilesItem.
type NilGistSimpleFilesItem struct {
	Value GistSimpleFilesItem
	Null  bool
}

// SetTo sets value to v.
func (o *NilGistSimpleFilesItem) SetTo(v GistSimpleFilesItem) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilGistSimpleFilesItem) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilGistSimpleFilesItem) SetToNull() {
	o.Null = true
	var v GistSimpleFilesItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilGistSimpleFilesItem) Get() (v GistSimpleFilesItem, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilGistSimpleFilesItem) Or(d GistSimpleFilesItem) GistSimpleFilesItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHookDeliveryRequestHeaders returns new NilHookDeliveryRequestHeaders with value set to v.
func NewNilHookDeliveryRequestHeaders(v HookDeliveryRequestHeaders) NilHookDeliveryRequestHeaders {
	return NilHookDeliveryRequestHeaders{
		Value: v,
	}
}

// NilHookDeliveryRequestHeaders is nullable HookDeliveryRequestHeaders.
type NilHookDeliveryRequestHeaders struct {
	Value HookDeliveryRequestHeaders
	Null  bool
}

// SetTo sets value to v.
func (o *NilHookDeliveryRequestHeaders) SetTo(v HookDeliveryRequestHeaders) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHookDeliveryRequestHeaders) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHookDeliveryRequestHeaders) SetToNull() {
	o.Null = true
	var v HookDeliveryRequestHeaders
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHookDeliveryRequestHeaders) Get() (v HookDeliveryRequestHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHookDeliveryRequestHeaders) Or(d HookDeliveryRequestHeaders) HookDeliveryRequestHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHookDeliveryRequestPayload returns new NilHookDeliveryRequestPayload with value set to v.
func NewNilHookDeliveryRequestPayload(v HookDeliveryRequestPayload) NilHookDeliveryRequestPayload {
	return NilHookDeliveryRequestPayload{
		Value: v,
	}
}

// NilHookDeliveryRequestPayload is nullable HookDeliveryRequestPayload.
type NilHookDeliveryRequestPayload struct {
	Value HookDeliveryRequestPayload
	Null  bool
}

// SetTo sets value to v.
func (o *NilHookDeliveryRequestPayload) SetTo(v HookDeliveryRequestPayload) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHookDeliveryRequestPayload) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHookDeliveryRequestPayload) SetToNull() {
	o.Null = true
	var v HookDeliveryRequestPayload
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHookDeliveryRequestPayload) Get() (v HookDeliveryRequestPayload, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHookDeliveryRequestPayload) Or(d HookDeliveryRequestPayload) HookDeliveryRequestPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHookDeliveryResponseHeaders returns new NilHookDeliveryResponseHeaders with value set to v.
func NewNilHookDeliveryResponseHeaders(v HookDeliveryResponseHeaders) NilHookDeliveryResponseHeaders {
	return NilHookDeliveryResponseHeaders{
		Value: v,
	}
}

// NilHookDeliveryResponseHeaders is nullable HookDeliveryResponseHeaders.
type NilHookDeliveryResponseHeaders struct {
	Value HookDeliveryResponseHeaders
	Null  bool
}

// SetTo sets value to v.
func (o *NilHookDeliveryResponseHeaders) SetTo(v HookDeliveryResponseHeaders) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHookDeliveryResponseHeaders) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHookDeliveryResponseHeaders) SetToNull() {
	o.Null = true
	var v HookDeliveryResponseHeaders
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHookDeliveryResponseHeaders) Get() (v HookDeliveryResponseHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHookDeliveryResponseHeaders) Or(d HookDeliveryResponseHeaders) HookDeliveryResponseHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableCodeOfConductSimple returns new NilNullableCodeOfConductSimple with value set to v.
func NewNilNullableCodeOfConductSimple(v NullableCodeOfConductSimple) NilNullableCodeOfConductSimple {
	return NilNullableCodeOfConductSimple{
		Value: v,
	}
}

// NilNullableCodeOfConductSimple is nullable NullableCodeOfConductSimple.
type NilNullableCodeOfConductSimple struct {
	Value NullableCodeOfConductSimple
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableCodeOfConductSimple) SetTo(v NullableCodeOfConductSimple) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableCodeOfConductSimple) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableCodeOfConductSimple) SetToNull() {
	o.Null = true
	var v NullableCodeOfConductSimple
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableCodeOfConductSimple) Get() (v NullableCodeOfConductSimple, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableCodeOfConductSimple) Or(d NullableCodeOfConductSimple) NullableCodeOfConductSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableCommunityHealthFile returns new NilNullableCommunityHealthFile with value set to v.
func NewNilNullableCommunityHealthFile(v NullableCommunityHealthFile) NilNullableCommunityHealthFile {
	return NilNullableCommunityHealthFile{
		Value: v,
	}
}

// NilNullableCommunityHealthFile is nullable NullableCommunityHealthFile.
type NilNullableCommunityHealthFile struct {
	Value NullableCommunityHealthFile
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableCommunityHealthFile) SetTo(v NullableCommunityHealthFile) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableCommunityHealthFile) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableCommunityHealthFile) SetToNull() {
	o.Null = true
	var v NullableCommunityHealthFile
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableCommunityHealthFile) Get() (v NullableCommunityHealthFile, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableCommunityHealthFile) Or(d NullableCommunityHealthFile) NullableCommunityHealthFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableGitUser returns new NilNullableGitUser with value set to v.
func NewNilNullableGitUser(v NullableGitUser) NilNullableGitUser {
	return NilNullableGitUser{
		Value: v,
	}
}

// NilNullableGitUser is nullable NullableGitUser.
type NilNullableGitUser struct {
	Value NullableGitUser
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableGitUser) SetTo(v NullableGitUser) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableGitUser) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableGitUser) SetToNull() {
	o.Null = true
	var v NullableGitUser
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableGitUser) Get() (v NullableGitUser, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableGitUser) Or(d NullableGitUser) NullableGitUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableIntegration returns new NilNullableIntegration with value set to v.
func NewNilNullableIntegration(v NullableIntegration) NilNullableIntegration {
	return NilNullableIntegration{
		Value: v,
	}
}

// NilNullableIntegration is nullable NullableIntegration.
type NilNullableIntegration struct {
	Value NullableIntegration
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableIntegration) SetTo(v NullableIntegration) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableIntegration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableIntegration) SetToNull() {
	o.Null = true
	var v NullableIntegration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableIntegration) Get() (v NullableIntegration, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableIntegration) Or(d NullableIntegration) NullableIntegration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableLicenseSimple returns new NilNullableLicenseSimple with value set to v.
func NewNilNullableLicenseSimple(v NullableLicenseSimple) NilNullableLicenseSimple {
	return NilNullableLicenseSimple{
		Value: v,
	}
}

// NilNullableLicenseSimple is nullable NullableLicenseSimple.
type NilNullableLicenseSimple struct {
	Value NullableLicenseSimple
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableLicenseSimple) SetTo(v NullableLicenseSimple) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableLicenseSimple) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableLicenseSimple) SetToNull() {
	o.Null = true
	var v NullableLicenseSimple
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableLicenseSimple) Get() (v NullableLicenseSimple, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableLicenseSimple) Or(d NullableLicenseSimple) NullableLicenseSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableMilestone returns new NilNullableMilestone with value set to v.
func NewNilNullableMilestone(v NullableMilestone) NilNullableMilestone {
	return NilNullableMilestone{
		Value: v,
	}
}

// NilNullableMilestone is nullable NullableMilestone.
type NilNullableMilestone struct {
	Value NullableMilestone
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableMilestone) SetTo(v NullableMilestone) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableMilestone) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableMilestone) SetToNull() {
	o.Null = true
	var v NullableMilestone
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableMilestone) Get() (v NullableMilestone, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableMilestone) Or(d NullableMilestone) NullableMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleCommit returns new NilNullableSimpleCommit with value set to v.
func NewNilNullableSimpleCommit(v NullableSimpleCommit) NilNullableSimpleCommit {
	return NilNullableSimpleCommit{
		Value: v,
	}
}

// NilNullableSimpleCommit is nullable NullableSimpleCommit.
type NilNullableSimpleCommit struct {
	Value NullableSimpleCommit
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleCommit) SetTo(v NullableSimpleCommit) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleCommit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableSimpleCommit) SetToNull() {
	o.Null = true
	var v NullableSimpleCommit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleCommit) Get() (v NullableSimpleCommit, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleCommit) Or(d NullableSimpleCommit) NullableSimpleCommit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleCommitAuthor returns new NilNullableSimpleCommitAuthor with value set to v.
func NewNilNullableSimpleCommitAuthor(v NullableSimpleCommitAuthor) NilNullableSimpleCommitAuthor {
	return NilNullableSimpleCommitAuthor{
		Value: v,
	}
}

// NilNullableSimpleCommitAuthor is nullable NullableSimpleCommitAuthor.
type NilNullableSimpleCommitAuthor struct {
	Value NullableSimpleCommitAuthor
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleCommitAuthor) SetTo(v NullableSimpleCommitAuthor) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleCommitAuthor) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableSimpleCommitAuthor) SetToNull() {
	o.Null = true
	var v NullableSimpleCommitAuthor
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleCommitAuthor) Get() (v NullableSimpleCommitAuthor, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleCommitAuthor) Or(d NullableSimpleCommitAuthor) NullableSimpleCommitAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleCommitCommitter returns new NilNullableSimpleCommitCommitter with value set to v.
func NewNilNullableSimpleCommitCommitter(v NullableSimpleCommitCommitter) NilNullableSimpleCommitCommitter {
	return NilNullableSimpleCommitCommitter{
		Value: v,
	}
}

// NilNullableSimpleCommitCommitter is nullable NullableSimpleCommitCommitter.
type NilNullableSimpleCommitCommitter struct {
	Value NullableSimpleCommitCommitter
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleCommitCommitter) SetTo(v NullableSimpleCommitCommitter) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleCommitCommitter) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableSimpleCommitCommitter) SetToNull() {
	o.Null = true
	var v NullableSimpleCommitCommitter
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleCommitCommitter) Get() (v NullableSimpleCommitCommitter, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleCommitCommitter) Or(d NullableSimpleCommitCommitter) NullableSimpleCommitCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableSimpleUser returns new NilNullableSimpleUser with value set to v.
func NewNilNullableSimpleUser(v NullableSimpleUser) NilNullableSimpleUser {
	return NilNullableSimpleUser{
		Value: v,
	}
}

// NilNullableSimpleUser is nullable NullableSimpleUser.
type NilNullableSimpleUser struct {
	Value NullableSimpleUser
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableSimpleUser) SetTo(v NullableSimpleUser) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableSimpleUser) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableSimpleUser) SetToNull() {
	o.Null = true
	var v NullableSimpleUser
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableSimpleUser) Get() (v NullableSimpleUser, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableSimpleUser) Or(d NullableSimpleUser) NullableSimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilNullableTeamSimple returns new NilNullableTeamSimple with value set to v.
func NewNilNullableTeamSimple(v NullableTeamSimple) NilNullableTeamSimple {
	return NilNullableTeamSimple{
		Value: v,
	}
}

// NilNullableTeamSimple is nullable NullableTeamSimple.
type NilNullableTeamSimple struct {
	Value NullableTeamSimple
	Null  bool
}

// SetTo sets value to v.
func (o *NilNullableTeamSimple) SetTo(v NullableTeamSimple) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilNullableTeamSimple) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilNullableTeamSimple) SetToNull() {
	o.Null = true
	var v NullableTeamSimple
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilNullableTeamSimple) Get() (v NullableTeamSimple, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilNullableTeamSimple) Or(d NullableTeamSimple) NullableTeamSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPageStatus returns new NilPageStatus with value set to v.
func NewNilPageStatus(v PageStatus) NilPageStatus {
	return NilPageStatus{
		Value: v,
	}
}

// NilPageStatus is nullable PageStatus.
type NilPageStatus struct {
	Value PageStatus
	Null  bool
}

// SetTo sets value to v.
func (o *NilPageStatus) SetTo(v PageStatus) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPageStatus) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPageStatus) SetToNull() {
	o.Null = true
	var v PageStatus
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPageStatus) Get() (v PageStatus, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPageStatus) Or(d PageStatus) PageStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPullRequestHeadRepo returns new NilPullRequestHeadRepo with value set to v.
func NewNilPullRequestHeadRepo(v PullRequestHeadRepo) NilPullRequestHeadRepo {
	return NilPullRequestHeadRepo{
		Value: v,
	}
}

// NilPullRequestHeadRepo is nullable PullRequestHeadRepo.
type NilPullRequestHeadRepo struct {
	Value PullRequestHeadRepo
	Null  bool
}

// SetTo sets value to v.
func (o *NilPullRequestHeadRepo) SetTo(v PullRequestHeadRepo) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPullRequestHeadRepo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPullRequestHeadRepo) SetToNull() {
	o.Null = true
	var v PullRequestHeadRepo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPullRequestHeadRepo) Get() (v PullRequestHeadRepo, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPullRequestHeadRepo) Or(d PullRequestHeadRepo) PullRequestHeadRepo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPullRequestHeadRepoLicense returns new NilPullRequestHeadRepoLicense with value set to v.
func NewNilPullRequestHeadRepoLicense(v PullRequestHeadRepoLicense) NilPullRequestHeadRepoLicense {
	return NilPullRequestHeadRepoLicense{
		Value: v,
	}
}

// NilPullRequestHeadRepoLicense is nullable PullRequestHeadRepoLicense.
type NilPullRequestHeadRepoLicense struct {
	Value PullRequestHeadRepoLicense
	Null  bool
}

// SetTo sets value to v.
func (o *NilPullRequestHeadRepoLicense) SetTo(v PullRequestHeadRepoLicense) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPullRequestHeadRepoLicense) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPullRequestHeadRepoLicense) SetToNull() {
	o.Null = true
	var v PullRequestHeadRepoLicense
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPullRequestHeadRepoLicense) Get() (v PullRequestHeadRepoLicense, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPullRequestHeadRepoLicense) Or(d PullRequestHeadRepoLicense) PullRequestHeadRepoLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposCreatePagesSiteReq returns new NilReposCreatePagesSiteReq with value set to v.
func NewNilReposCreatePagesSiteReq(v ReposCreatePagesSiteReq) NilReposCreatePagesSiteReq {
	return NilReposCreatePagesSiteReq{
		Value: v,
	}
}

// NilReposCreatePagesSiteReq is nullable ReposCreatePagesSiteReq.
type NilReposCreatePagesSiteReq struct {
	Value ReposCreatePagesSiteReq
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposCreatePagesSiteReq) SetTo(v ReposCreatePagesSiteReq) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposCreatePagesSiteReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilReposCreatePagesSiteReq) SetToNull() {
	o.Null = true
	var v ReposCreatePagesSiteReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilReposCreatePagesSiteReq) Get() (v ReposCreatePagesSiteReq, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposCreatePagesSiteReq) Or(d ReposCreatePagesSiteReq) ReposCreatePagesSiteReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposUpdateBranchProtectionReqRequiredPullRequestReviews returns new NilReposUpdateBranchProtectionReqRequiredPullRequestReviews with value set to v.
func NewNilReposUpdateBranchProtectionReqRequiredPullRequestReviews(v ReposUpdateBranchProtectionReqRequiredPullRequestReviews) NilReposUpdateBranchProtectionReqRequiredPullRequestReviews {
	return NilReposUpdateBranchProtectionReqRequiredPullRequestReviews{
		Value: v,
	}
}

// NilReposUpdateBranchProtectionReqRequiredPullRequestReviews is nullable ReposUpdateBranchProtectionReqRequiredPullRequestReviews.
type NilReposUpdateBranchProtectionReqRequiredPullRequestReviews struct {
	Value ReposUpdateBranchProtectionReqRequiredPullRequestReviews
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetTo(v ReposUpdateBranchProtectionReqRequiredPullRequestReviews) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetToNull() {
	o.Null = true
	var v ReposUpdateBranchProtectionReqRequiredPullRequestReviews
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) Get() (v ReposUpdateBranchProtectionReqRequiredPullRequestReviews, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) Or(d ReposUpdateBranchProtectionReqRequiredPullRequestReviews) ReposUpdateBranchProtectionReqRequiredPullRequestReviews {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposUpdateBranchProtectionReqRequiredStatusChecks returns new NilReposUpdateBranchProtectionReqRequiredStatusChecks with value set to v.
func NewNilReposUpdateBranchProtectionReqRequiredStatusChecks(v ReposUpdateBranchProtectionReqRequiredStatusChecks) NilReposUpdateBranchProtectionReqRequiredStatusChecks {
	return NilReposUpdateBranchProtectionReqRequiredStatusChecks{
		Value: v,
	}
}

// NilReposUpdateBranchProtectionReqRequiredStatusChecks is nullable ReposUpdateBranchProtectionReqRequiredStatusChecks.
type NilReposUpdateBranchProtectionReqRequiredStatusChecks struct {
	Value ReposUpdateBranchProtectionReqRequiredStatusChecks
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposUpdateBranchProtectionReqRequiredStatusChecks) SetTo(v ReposUpdateBranchProtectionReqRequiredStatusChecks) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilReposUpdateBranchProtectionReqRequiredStatusChecks) SetToNull() {
	o.Null = true
	var v ReposUpdateBranchProtectionReqRequiredStatusChecks
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) Get() (v ReposUpdateBranchProtectionReqRequiredStatusChecks, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposUpdateBranchProtectionReqRequiredStatusChecks) Or(d ReposUpdateBranchProtectionReqRequiredStatusChecks) ReposUpdateBranchProtectionReqRequiredStatusChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReposUpdateBranchProtectionReqRestrictions returns new NilReposUpdateBranchProtectionReqRestrictions with value set to v.
func NewNilReposUpdateBranchProtectionReqRestrictions(v ReposUpdateBranchProtectionReqRestrictions) NilReposUpdateBranchProtectionReqRestrictions {
	return NilReposUpdateBranchProtectionReqRestrictions{
		Value: v,
	}
}

// NilReposUpdateBranchProtectionReqRestrictions is nullable ReposUpdateBranchProtectionReqRestrictions.
type NilReposUpdateBranchProtectionReqRestrictions struct {
	Value ReposUpdateBranchProtectionReqRestrictions
	Null  bool
}

// SetTo sets value to v.
func (o *NilReposUpdateBranchProtectionReqRestrictions) SetTo(v ReposUpdateBranchProtectionReqRestrictions) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReposUpdateBranchProtectionReqRestrictions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilReposUpdateBranchProtectionReqRestrictions) SetToNull() {
	o.Null = true
	var v ReposUpdateBranchProtectionReqRestrictions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilReposUpdateBranchProtectionReqRestrictions) Get() (v ReposUpdateBranchProtectionReqRestrictions, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReposUpdateBranchProtectionReqRestrictions) Or(d ReposUpdateBranchProtectionReqRestrictions) ReposUpdateBranchProtectionReqRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilSimpleCommitAuthor returns new NilSimpleCommitAuthor with value set to v.
func NewNilSimpleCommitAuthor(v SimpleCommitAuthor) NilSimpleCommitAuthor {
	return NilSimpleCommitAuthor{
		Value: v,
	}
}

// NilSimpleCommitAuthor is nullable SimpleCommitAuthor.
type NilSimpleCommitAuthor struct {
	Value SimpleCommitAuthor
	Null  bool
}

// SetTo sets value to v.
func (o *NilSimpleCommitAuthor) SetTo(v SimpleCommitAuthor) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilSimpleCommitAuthor) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilSimpleCommitAuthor) SetToNull() {
	o.Null = true
	var v SimpleCommitAuthor
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilSimpleCommitAuthor) Get() (v SimpleCommitAuthor, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilSimpleCommitAuthor) Or(d SimpleCommitAuthor) SimpleCommitAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilSimpleCommitCommitter returns new NilSimpleCommitCommitter with value set to v.
func NewNilSimpleCommitCommitter(v SimpleCommitCommitter) NilSimpleCommitCommitter {
	return NilSimpleCommitCommitter{
		Value: v,
	}
}

// NilSimpleCommitCommitter is nullable SimpleCommitCommitter.
type NilSimpleCommitCommitter struct {
	Value SimpleCommitCommitter
	Null  bool
}

// SetTo sets value to v.
func (o *NilSimpleCommitCommitter) SetTo(v SimpleCommitCommitter) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilSimpleCommitCommitter) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilSimpleCommitCommitter) SetToNull() {
	o.Null = true
	var v SimpleCommitCommitter
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilSimpleCommitCommitter) Get() (v SimpleCommitCommitter, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilSimpleCommitCommitter) Or(d SimpleCommitCommitter) SimpleCommitCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilURI returns new NilURI with value set to v.
func NewNilURI(v url.URL) NilURI {
	return NilURI{
		Value: v,
	}
}

// NilURI is nullable url.URL.
type NilURI struct {
	Value url.URL
	Null  bool
}

// SetTo sets value to v.
func (o *NilURI) SetTo(v url.URL) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilURI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilURI) SetToNull() {
	o.Null = true
	var v url.URL
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/no_content
type NoContent struct{}

func (*NoContent) reposGetCodeFrequencyStatsRes()  {}
func (*NoContent) reposGetCommitActivityStatsRes() {}
func (*NoContent) reposGetContributorsStatsRes()   {}
func (*NoContent) reposGetPunchCardStatsRes()      {}

// Ref: #/components/responses/not_modified
type NotModified struct{}

func (*NotModified) activityCheckRepoIsStarredByAuthenticatedUserRes()     {}
func (*NotModified) activityDeleteThreadSubscriptionRes()                  {}
func (*NotModified) activityGetThreadRes()                                 {}
func (*NotModified) activityGetThreadSubscriptionForAuthenticatedUserRes() {}
func (*NotModified) activityListNotificationsForAuthenticatedUserRes()     {}
func (*NotModified) activityListPublicEventsForRepoNetworkRes()            {}
func (*NotModified) activityListPublicEventsRes()                          {}
func (*NotModified) activityListReposStarredByAuthenticatedUserRes()       {}
func (*NotModified) activityListWatchedReposForAuthenticatedUserRes()      {}
func (*NotModified) activityMarkNotificationsAsReadRes()                   {}
func (*NotModified) activityMarkThreadAsReadRes()                          {}
func (*NotModified) activitySetThreadSubscriptionRes()                     {}
func (*NotModified) activityStarRepoForAuthenticatedUserRes()              {}
func (*NotModified) activityUnstarRepoForAuthenticatedUserRes()            {}
func (*NotModified) appsAddRepoToInstallationRes()                         {}
func (*NotModified) appsCreateContentAttachmentRes()                       {}
func (*NotModified) appsListInstallationReposForAuthenticatedUserRes()     {}
func (*NotModified) appsListReposAccessibleToInstallationRes()             {}
func (*NotModified) appsListSubscriptionsForAuthenticatedUserRes()         {}
func (*NotModified) appsListSubscriptionsForAuthenticatedUserStubbedRes()  {}
func (*NotModified) appsRemoveRepoFromInstallationRes()                    {}
func (*NotModified) codesOfConductGetAllCodesOfConductRes()                {}
func (*NotModified) codesOfConductGetConductCodeRes()                      {}
func (*NotModified) emojisGetRes()                                         {}
func (*NotModified) gistsCheckIsStarredRes()                               {}
func (*NotModified) gistsCreateCommentRes()                                {}
func (*NotModified) gistsCreateRes()                                       {}
func (*NotModified) gistsDeleteCommentRes()                                {}
func (*NotModified) gistsDeleteRes()                                       {}
func (*NotModified) gistsForkRes()                                         {}
func (*NotModified) gistsGetCommentRes()                                   {}
func (*NotModified) gistsGetRes()                                          {}
func (*NotModified) gistsListCommentsRes()                                 {}
func (*NotModified) gistsListCommitsRes()                                  {}
func (*NotModified) gistsListForksRes()                                    {}
func (*NotModified) gistsListPublicRes()                                   {}
func (*NotModified) gistsListRes()                                         {}
func (*NotModified) gistsListStarredRes()                                  {}
func (*NotModified) gistsStarRes()                                         {}
func (*NotModified) gistsUnstarRes()                                       {}
func (*NotModified) gitignoreGetAllTemplatesRes()                          {}
func (*NotModified) gitignoreGetTemplateRes()                              {}
func (*NotModified) issuesGetRes()                                         {}
func (*NotModified) issuesListForAuthenticatedUserRes()                    {}
func (*NotModified) issuesListRes()                                        {}
func (*NotModified) licensesGetAllCommonlyUsedRes()                        {}
func (*NotModified) licensesGetRes()                                       {}
func (*NotModified) markdownRenderRawRes()                                 {}
func (*NotModified) markdownRenderRes()                                    {}
func (*NotModified) metaGetRes()                                           {}
func (*NotModified) migrationsDeleteArchiveForAuthenticatedUserRes()       {}
func (*NotModified) migrationsGetArchiveForAuthenticatedUserRes()          {}
func (*NotModified) migrationsGetStatusForAuthenticatedUserRes()           {}
func (*NotModified) migrationsListForAuthenticatedUserRes()                {}
func (*NotModified) migrationsStartForAuthenticatedUserRes()               {}
func (*NotModified) migrationsUnlockRepoForAuthenticatedUserRes()          {}
func (*NotModified) oAuthAuthorizationsCreateAuthorizationRes()            {}
func (*NotModified) oAuthAuthorizationsDeleteAuthorizationRes()            {}
func (*NotModified) oAuthAuthorizationsDeleteGrantRes()                    {}
func (*NotModified) oAuthAuthorizationsGetAuthorizationRes()               {}
func (*NotModified) oAuthAuthorizationsGetGrantRes()                       {}
func (*NotModified) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {}
func (*NotModified) oAuthAuthorizationsListAuthorizationsRes()             {}
func (*NotModified) oAuthAuthorizationsListGrantsRes()                     {}
func (*NotModified) orgsListForAuthenticatedUserRes()                      {}
func (*NotModified) orgsListMembershipsForAuthenticatedUserRes()           {}
func (*NotModified) orgsListRes()                                          {}
func (*NotModified) projectsAddCollaboratorRes()                           {}
func (*NotModified) projectsCreateColumnRes()                              {}
func (*NotModified) projectsCreateForAuthenticatedUserRes()                {}
func (*NotModified) projectsDeleteCardRes()                                {}
func (*NotModified) projectsDeleteColumnRes()                              {}
func (*NotModified) projectsDeleteRes()                                    {}
func (*NotModified) projectsGetCardRes()                                   {}
func (*NotModified) projectsGetColumnRes()                                 {}
func (*NotModified) projectsGetPermissionForUserRes()                      {}
func (*NotModified) projectsGetRes()                                       {}
func (*NotModified) projectsListCardsRes()                                 {}
func (*NotModified) projectsListCollaboratorsRes()                         {}
func (*NotModified) projectsListColumnsRes()                               {}
func (*NotModified) projectsMoveCardRes()                                  {}
func (*NotModified) projectsMoveColumnRes()                                {}
func (*NotModified) projectsRemoveCollaboratorRes()                        {}
func (*NotModified) projectsUpdateCardRes()                                {}
func (*NotModified) projectsUpdateColumnRes()                              {}
func (*NotModified) projectsUpdateRes()                                    {}
func (*NotModified) pullsGetRes()                                          {}
func (*NotModified) pullsListRes()                                         {}
func (*NotModified) rateLimitGetRes()                                      {}
func (*NotModified) reactionsDeleteLegacyRes()                             {}
func (*NotModified) reposAcceptInvitationRes()                             {}
func (*NotModified) reposCreateForAuthenticatedUserRes()                   {}
func (*NotModified) reposDeclineInvitationRes()                            {}
func (*NotModified) reposListForAuthenticatedUserRes()                     {}
func (*NotModified) reposListInvitationsForAuthenticatedUserRes()          {}
func (*NotModified) reposListPublicRes()                                   {}
func (*NotModified) scimDeleteUserFromOrgRes()                             {}
func (*NotModified) searchCodeRes()                                        {}
func (*NotModified) searchCommitsRes()                                     {}
func (*NotModified) searchIssuesAndPullRequestsRes()                       {}
func (*NotModified) searchLabelsRes()                                      {}
func (*NotModified) searchReposRes()                                       {}
func (*NotModified) searchTopicsRes()                                      {}
func (*NotModified) searchUsersRes()                                       {}
func (*NotModified) teamsListForAuthenticatedUserRes()                     {}
func (*NotModified) usersAddEmailForAuthenticatedRes()                     {}
func (*NotModified) usersBlockRes()                                        {}
func (*NotModified) usersCheckBlockedRes()                                 {}
func (*NotModified) usersCheckPersonIsFollowedByAuthenticatedRes()         {}
func (*NotModified) usersCreateGpgKeyForAuthenticatedRes()                 {}
func (*NotModified) usersCreatePublicSSHKeyForAuthenticatedRes()           {}
func (*NotModified) usersDeleteEmailForAuthenticatedRes()                  {}
func (*NotModified) usersDeleteGpgKeyForAuthenticatedRes()                 {}
func (*NotModified) usersDeletePublicSSHKeyForAuthenticatedRes()           {}
func (*NotModified) usersFollowRes()                                       {}
func (*NotModified) usersGetAuthenticatedRes()                             {}
func (*NotModified) usersGetGpgKeyForAuthenticatedRes()                    {}
func (*NotModified) usersGetPublicSSHKeyForAuthenticatedRes()              {}
func (*NotModified) usersListBlockedByAuthenticatedRes()                   {}
func (*NotModified) usersListEmailsForAuthenticatedRes()                   {}
func (*NotModified) usersListFollowedByAuthenticatedRes()                  {}
func (*NotModified) usersListFollowersForAuthenticatedUserRes()            {}
func (*NotModified) usersListGpgKeysForAuthenticatedRes()                  {}
func (*NotModified) usersListPublicEmailsForAuthenticatedRes()             {}
func (*NotModified) usersListPublicSSHKeysForAuthenticatedRes()            {}
func (*NotModified) usersListRes()                                         {}
func (*NotModified) usersSetPrimaryEmailVisibilityForAuthenticatedRes()    {}
func (*NotModified) usersUnblockRes()                                      {}
func (*NotModified) usersUnfollowRes()                                     {}
func (*NotModified) usersUpdateAuthenticatedRes()                          {}

// Code of Conduct Simple.
// Ref: #/components/schemas/nullable-code-of-conduct-simple
type NullableCodeOfConductSimple struct {
	URL     url.URL `json:"url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	HTMLURL NilURI  `json:"html_url"`
}

// GetURL returns the value of URL.
func (s *NullableCodeOfConductSimple) GetURL() url.URL {
	return s.URL
}

// GetKey returns the value of Key.
func (s *NullableCodeOfConductSimple) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *NullableCodeOfConductSimple) GetName() string {
	return s.Name
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableCodeOfConductSimple) GetHTMLURL() NilURI {
	return s.HTMLURL
}

// SetURL sets the value of URL.
func (s *NullableCodeOfConductSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetKey sets the value of Key.
func (s *NullableCodeOfConductSimple) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *NullableCodeOfConductSimple) SetName(val string) {
	s.Name = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableCodeOfConductSimple) SetHTMLURL(val NilURI) {
	s.HTMLURL = val
}

// Ref: #/components/schemas/nullable-community-health-file
type NullableCommunityHealthFile struct {
	URL     url.URL `json:"url"`
	HTMLURL url.URL `json:"html_url"`
}

// GetURL returns the value of URL.
func (s *NullableCommunityHealthFile) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableCommunityHealthFile) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// SetURL sets the value of URL.
func (s *NullableCommunityHealthFile) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableCommunityHealthFile) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// Metaproperties for Git author/committer information.
// Ref: #/components/schemas/nullable-git-user
type NullableGitUser struct {
	Name  OptString `json:"name"`
	Email OptString `json:"email"`
	Date  OptString `json:"date"`
}

// GetName returns the value of Name.
func (s *NullableGitUser) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *NullableGitUser) GetEmail() OptString {
	return s.Email
}

// GetDate returns the value of Date.
func (s *NullableGitUser) GetDate() OptString {
	return s.Date
}

// SetName sets the value of Name.
func (s *NullableGitUser) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *NullableGitUser) SetEmail(val OptString) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *NullableGitUser) SetDate(val OptString) {
	s.Date = val
}

// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and
// user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
// Ref: #/components/schemas/nullable-integration
type NullableIntegration struct {
	// Unique identifier of the GitHub app.
	ID int `json:"id"`
	// The slug name of the GitHub app.
	Slug   OptString             `json:"slug"`
	NodeID string                `json:"node_id"`
	Owner  NilNullableSimpleUser `json:"owner"`
	// The name of the GitHub app.
	Name        string    `json:"name"`
	Description NilString `json:"description"`
	ExternalURL url.URL   `json:"external_url"`
	HTMLURL     url.URL   `json:"html_url"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	// The set of permissions for the GitHub app.
	Permissions NullableIntegrationPermissions `json:"permissions"`
	// The list of events for the GitHub app.
	Events []string `json:"events"`
	// The number of installations associated with the GitHub app.
	InstallationsCount OptInt       `json:"installations_count"`
	ClientID           OptString    `json:"client_id"`
	ClientSecret       OptString    `json:"client_secret"`
	WebhookSecret      OptNilString `json:"webhook_secret"`
	Pem                OptString    `json:"pem"`
}

// GetID returns the value of ID.
func (s *NullableIntegration) GetID() int {
	return s.ID
}

// GetSlug returns the value of Slug.
func (s *NullableIntegration) GetSlug() OptString {
	return s.Slug
}

// GetNodeID returns the value of NodeID.
func (s *NullableIntegration) GetNodeID() string {
	return s.NodeID
}

// GetOwner returns the value of Owner.
func (s *NullableIntegration) GetOwner() NilNullableSimpleUser {
	return s.Owner
}

// GetName returns the value of Name.
func (s *NullableIntegration) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NullableIntegration) GetDescription() NilString {
	return s.Description
}

// GetExternalURL returns the value of ExternalURL.
func (s *NullableIntegration) GetExternalURL() url.URL {
	return s.ExternalURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableIntegration) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NullableIntegration) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NullableIntegration) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *NullableIntegration) GetPermissions() NullableIntegrationPermissions {
	return s.Permissions
}

// GetEvents returns the value of Events.
func (s *NullableIntegration) GetEvents() []string {
	return s.Events
}

// GetInstallationsCount returns the value of InstallationsCount.
func (s *NullableIntegration) GetInstallationsCount() OptInt {
	return s.InstallationsCount
}

// GetClientID returns the value of ClientID.
func (s *NullableIntegration) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *NullableIntegration) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetWebhookSecret returns the value of WebhookSecret.
func (s *NullableIntegration) GetWebhookSecret() OptNilString {
	return s.WebhookSecret
}

// GetPem returns the value of Pem.
func (s *NullableIntegration) GetPem() OptString {
	return s.Pem
}

// SetID sets the value of ID.
func (s *NullableIntegration) SetID(val int) {
	s.ID = val
}

// SetSlug sets the value of Slug.
func (s *NullableIntegration) SetSlug(val OptString) {
	s.Slug = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableIntegration) SetNodeID(val string) {
	s.NodeID = val
}

// SetOwner sets the value of Owner.
func (s *NullableIntegration) SetOwner(val NilNullableSimpleUser) {
	s.Owner = val
}

// SetName sets the value of Name.
func (s *NullableIntegration) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NullableIntegration) SetDescription(val NilString) {
	s.Description = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *NullableIntegration) SetExternalURL(val url.URL) {
	s.ExternalURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableIntegration) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NullableIntegration) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NullableIntegration) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *NullableIntegration) SetPermissions(val NullableIntegrationPermissions) {
	s.Permissions = val
}

// SetEvents sets the value of Events.
func (s *NullableIntegration) SetEvents(val []string) {
	s.Events = val
}

// SetInstallationsCount sets the value of InstallationsCount.
func (s *NullableIntegration) SetInstallationsCount(val OptInt) {
	s.InstallationsCount = val
}

// SetClientID sets the value of ClientID.
func (s *NullableIntegration) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *NullableIntegration) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetWebhookSecret sets the value of WebhookSecret.
func (s *NullableIntegration) SetWebhookSecret(val OptNilString) {
	s.WebhookSecret = val
}

// SetPem sets the value of Pem.
func (s *NullableIntegration) SetPem(val OptString) {
	s.Pem = val
}

// The set of permissions for the GitHub app.
type NullableIntegrationPermissions struct {
	Issues          OptString `json:"issues"`
	Checks          OptString `json:"checks"`
	Metadata        OptString `json:"metadata"`
	Contents        OptString `json:"contents"`
	Deployments     OptString `json:"deployments"`
	AdditionalProps NullableIntegrationPermissionsAdditional
}

// GetIssues returns the value of Issues.
func (s *NullableIntegrationPermissions) GetIssues() OptString {
	return s.Issues
}

// GetChecks returns the value of Checks.
func (s *NullableIntegrationPermissions) GetChecks() OptString {
	return s.Checks
}

// GetMetadata returns the value of Metadata.
func (s *NullableIntegrationPermissions) GetMetadata() OptString {
	return s.Metadata
}

// GetContents returns the value of Contents.
func (s *NullableIntegrationPermissions) GetContents() OptString {
	return s.Contents
}

// GetDeployments returns the value of Deployments.
func (s *NullableIntegrationPermissions) GetDeployments() OptString {
	return s.Deployments
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *NullableIntegrationPermissions) GetAdditionalProps() NullableIntegrationPermissionsAdditional {
	return s.AdditionalProps
}

// SetIssues sets the value of Issues.
func (s *NullableIntegrationPermissions) SetIssues(val OptString) {
	s.Issues = val
}

// SetChecks sets the value of Checks.
func (s *NullableIntegrationPermissions) SetChecks(val OptString) {
	s.Checks = val
}

// SetMetadata sets the value of Metadata.
func (s *NullableIntegrationPermissions) SetMetadata(val OptString) {
	s.Metadata = val
}

// SetContents sets the value of Contents.
func (s *NullableIntegrationPermissions) SetContents(val OptString) {
	s.Contents = val
}

// SetDeployments sets the value of Deployments.
func (s *NullableIntegrationPermissions) SetDeployments(val OptString) {
	s.Deployments = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *NullableIntegrationPermissions) SetAdditionalProps(val NullableIntegrationPermissionsAdditional) {
	s.AdditionalProps = val
}

type NullableIntegrationPermissionsAdditional map[string]string

func (s *NullableIntegrationPermissionsAdditional) init() NullableIntegrationPermissionsAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// License Simple.
// Ref: #/components/schemas/nullable-license-simple
type NullableLicenseSimple struct {
	Key     string    `json:"key"`
	Name    string    `json:"name"`
	URL     NilURI    `json:"url"`
	SpdxID  NilString `json:"spdx_id"`
	NodeID  string    `json:"node_id"`
	HTMLURL OptURI    `json:"html_url"`
}

// GetKey returns the value of Key.
func (s *NullableLicenseSimple) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *NullableLicenseSimple) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *NullableLicenseSimple) GetURL() NilURI {
	return s.URL
}

// GetSpdxID returns the value of SpdxID.
func (s *NullableLicenseSimple) GetSpdxID() NilString {
	return s.SpdxID
}

// GetNodeID returns the value of NodeID.
func (s *NullableLicenseSimple) GetNodeID() string {
	return s.NodeID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableLicenseSimple) GetHTMLURL() OptURI {
	return s.HTMLURL
}

// SetKey sets the value of Key.
func (s *NullableLicenseSimple) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *NullableLicenseSimple) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *NullableLicenseSimple) SetURL(val NilURI) {
	s.URL = val
}

// SetSpdxID sets the value of SpdxID.
func (s *NullableLicenseSimple) SetSpdxID(val NilString) {
	s.SpdxID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableLicenseSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableLicenseSimple) SetHTMLURL(val OptURI) {
	s.HTMLURL = val
}

// A collection of related issues and pull requests.
// Ref: #/components/schemas/nullable-milestone
type NullableMilestone struct {
	URL       url.URL `json:"url"`
	HTMLURL   url.URL `json:"html_url"`
	LabelsURL url.URL `json:"labels_url"`
	ID        int     `json:"id"`
	NodeID    string  `json:"node_id"`
	// The number of the milestone.
	Number int `json:"number"`
	// The state of the milestone.
	State NullableMilestoneState `json:"state"`
	// The title of the milestone.
	Title        string                `json:"title"`
	Description  NilString             `json:"description"`
	Creator      NilNullableSimpleUser `json:"creator"`
	OpenIssues   int                   `json:"open_issues"`
	ClosedIssues int                   `json:"closed_issues"`
	CreatedAt    time.Time             `json:"created_at"`
	UpdatedAt    time.Time             `json:"updated_at"`
	ClosedAt     NilDateTime           `json:"closed_at"`
	DueOn        NilDateTime           `json:"due_on"`
}

// GetURL returns the value of URL.
func (s *NullableMilestone) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableMilestone) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *NullableMilestone) GetLabelsURL() url.URL {
	return s.LabelsURL
}

// GetID returns the value of ID.
func (s *NullableMilestone) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableMilestone) GetNodeID() string {
	return s.NodeID
}

// GetNumber returns the value of Number.
func (s *NullableMilestone) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *NullableMilestone) GetState() NullableMilestoneState {
	return s.State
}

// GetTitle returns the value of Title.
func (s *NullableMilestone) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *NullableMilestone) GetDescription() NilString {
	return s.Description
}

// GetCreator returns the value of Creator.
func (s *NullableMilestone) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// GetOpenIssues returns the value of OpenIssues.
func (s *NullableMilestone) GetOpenIssues() int {
	return s.OpenIssues
}

// GetClosedIssues returns the value of ClosedIssues.
func (s *NullableMilestone) GetClosedIssues() int {
	return s.ClosedIssues
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NullableMilestone) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NullableMilestone) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetClosedAt returns the value of ClosedAt.
func (s *NullableMilestone) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetDueOn returns the value of DueOn.
func (s *NullableMilestone) GetDueOn() NilDateTime {
	return s.DueOn
}

// SetURL sets the value of URL.
func (s *NullableMilestone) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableMilestone) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *NullableMilestone) SetLabelsURL(val url.URL) {
	s.LabelsURL = val
}

// SetID sets the value of ID.
func (s *NullableMilestone) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableMilestone) SetNodeID(val string) {
	s.NodeID = val
}

// SetNumber sets the value of Number.
func (s *NullableMilestone) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *NullableMilestone) SetState(val NullableMilestoneState) {
	s.State = val
}

// SetTitle sets the value of Title.
func (s *NullableMilestone) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *NullableMilestone) SetDescription(val NilString) {
	s.Description = val
}

// SetCreator sets the value of Creator.
func (s *NullableMilestone) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *NullableMilestone) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetClosedIssues sets the value of ClosedIssues.
func (s *NullableMilestone) SetClosedIssues(val int) {
	s.ClosedIssues = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NullableMilestone) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NullableMilestone) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *NullableMilestone) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetDueOn sets the value of DueOn.
func (s *NullableMilestone) SetDueOn(val NilDateTime) {
	s.DueOn = val
}

// The state of the milestone.
type NullableMilestoneState string

const (
	NullableMilestoneStateOpen   NullableMilestoneState = "open"
	NullableMilestoneStateClosed NullableMilestoneState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s NullableMilestoneState) MarshalText() ([]byte, error) {
	switch s {
	case NullableMilestoneStateOpen:
		return []byte(s), nil
	case NullableMilestoneStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NullableMilestoneState) UnmarshalText(data []byte) error {
	switch NullableMilestoneState(data) {
	case NullableMilestoneStateOpen:
		*s = NullableMilestoneStateOpen
		return nil
	case NullableMilestoneStateClosed:
		*s = NullableMilestoneStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Minimal Repository.
// Ref: #/components/schemas/nullable-minimal-repository
type NullableMinimalRepository struct {
	ID                  int                                     `json:"id"`
	NodeID              string                                  `json:"node_id"`
	Name                string                                  `json:"name"`
	FullName            string                                  `json:"full_name"`
	Owner               SimpleUser                              `json:"owner"`
	Private             bool                                    `json:"private"`
	HTMLURL             url.URL                                 `json:"html_url"`
	Description         NilString                               `json:"description"`
	Fork                bool                                    `json:"fork"`
	URL                 url.URL                                 `json:"url"`
	ArchiveURL          string                                  `json:"archive_url"`
	AssigneesURL        string                                  `json:"assignees_url"`
	BlobsURL            string                                  `json:"blobs_url"`
	BranchesURL         string                                  `json:"branches_url"`
	CollaboratorsURL    string                                  `json:"collaborators_url"`
	CommentsURL         string                                  `json:"comments_url"`
	CommitsURL          string                                  `json:"commits_url"`
	CompareURL          string                                  `json:"compare_url"`
	ContentsURL         string                                  `json:"contents_url"`
	ContributorsURL     url.URL                                 `json:"contributors_url"`
	DeploymentsURL      url.URL                                 `json:"deployments_url"`
	DownloadsURL        url.URL                                 `json:"downloads_url"`
	EventsURL           url.URL                                 `json:"events_url"`
	ForksURL            url.URL                                 `json:"forks_url"`
	GitCommitsURL       string                                  `json:"git_commits_url"`
	GitRefsURL          string                                  `json:"git_refs_url"`
	GitTagsURL          string                                  `json:"git_tags_url"`
	GitURL              OptString                               `json:"git_url"`
	IssueCommentURL     string                                  `json:"issue_comment_url"`
	IssueEventsURL      string                                  `json:"issue_events_url"`
	IssuesURL           string                                  `json:"issues_url"`
	KeysURL             string                                  `json:"keys_url"`
	LabelsURL           string                                  `json:"labels_url"`
	LanguagesURL        url.URL                                 `json:"languages_url"`
	MergesURL           url.URL                                 `json:"merges_url"`
	MilestonesURL       string                                  `json:"milestones_url"`
	NotificationsURL    string                                  `json:"notifications_url"`
	PullsURL            string                                  `json:"pulls_url"`
	ReleasesURL         string                                  `json:"releases_url"`
	SSHURL              OptString                               `json:"ssh_url"`
	StargazersURL       url.URL                                 `json:"stargazers_url"`
	StatusesURL         string                                  `json:"statuses_url"`
	SubscribersURL      url.URL                                 `json:"subscribers_url"`
	SubscriptionURL     url.URL                                 `json:"subscription_url"`
	TagsURL             url.URL                                 `json:"tags_url"`
	TeamsURL            url.URL                                 `json:"teams_url"`
	TreesURL            string                                  `json:"trees_url"`
	CloneURL            OptString                               `json:"clone_url"`
	MirrorURL           OptNilString                            `json:"mirror_url"`
	HooksURL            url.URL                                 `json:"hooks_url"`
	SvnURL              OptString                               `json:"svn_url"`
	Homepage            OptNilString                            `json:"homepage"`
	Language            OptNilString                            `json:"language"`
	ForksCount          OptInt                                  `json:"forks_count"`
	StargazersCount     OptInt                                  `json:"stargazers_count"`
	WatchersCount       OptInt                                  `json:"watchers_count"`
	Size                OptInt                                  `json:"size"`
	DefaultBranch       OptString                               `json:"default_branch"`
	OpenIssuesCount     OptInt                                  `json:"open_issues_count"`
	IsTemplate          OptBool                                 `json:"is_template"`
	Topics              []string                                `json:"topics"`
	HasIssues           OptBool                                 `json:"has_issues"`
	HasProjects         OptBool                                 `json:"has_projects"`
	HasWiki             OptBool                                 `json:"has_wiki"`
	HasPages            OptBool                                 `json:"has_pages"`
	HasDownloads        OptBool                                 `json:"has_downloads"`
	Archived            OptBool                                 `json:"archived"`
	Disabled            OptBool                                 `json:"disabled"`
	Visibility          OptString                               `json:"visibility"`
	PushedAt            OptNilDateTime                          `json:"pushed_at"`
	CreatedAt           OptNilDateTime                          `json:"created_at"`
	UpdatedAt           OptNilDateTime                          `json:"updated_at"`
	Permissions         OptNullableMinimalRepositoryPermissions `json:"permissions"`
	TemplateRepository  OptNilNullableRepository                `json:"template_repository"`
	TempCloneToken      OptString                               `json:"temp_clone_token"`
	DeleteBranchOnMerge OptBool                                 `json:"delete_branch_on_merge"`
	SubscribersCount    OptInt                                  `json:"subscribers_count"`
	NetworkCount        OptInt                                  `json:"network_count"`
	CodeOfConduct       OptCodeOfConduct                        `json:"code_of_conduct"`
	License             OptNilNullableMinimalRepositoryLicense  `json:"license"`
	Forks               OptInt                                  `json:"forks"`
	OpenIssues          OptInt                                  `json:"open_issues"`
	Watchers            OptInt                                  `json:"watchers"`
	AllowForking        OptBool                                 `json:"allow_forking"`
}

// GetID returns the value of ID.
func (s *NullableMinimalRepository) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableMinimalRepository) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *NullableMinimalRepository) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *NullableMinimalRepository) GetFullName() string {
	return s.FullName
}

// GetOwner returns the value of Owner.
func (s *NullableMinimalRepository) GetOwner() SimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *NullableMinimalRepository) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableMinimalRepository) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *NullableMinimalRepository) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *NullableMinimalRepository) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *NullableMinimalRepository) GetURL() url.URL {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *NullableMinimalRepository) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *NullableMinimalRepository) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *NullableMinimalRepository) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *NullableMinimalRepository) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *NullableMinimalRepository) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *NullableMinimalRepository) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *NullableMinimalRepository) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *NullableMinimalRepository) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *NullableMinimalRepository) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *NullableMinimalRepository) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *NullableMinimalRepository) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *NullableMinimalRepository) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *NullableMinimalRepository) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *NullableMinimalRepository) GetForksURL() url.URL {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *NullableMinimalRepository) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *NullableMinimalRepository) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *NullableMinimalRepository) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *NullableMinimalRepository) GetGitURL() OptString {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *NullableMinimalRepository) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *NullableMinimalRepository) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *NullableMinimalRepository) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *NullableMinimalRepository) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *NullableMinimalRepository) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *NullableMinimalRepository) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *NullableMinimalRepository) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *NullableMinimalRepository) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *NullableMinimalRepository) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *NullableMinimalRepository) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *NullableMinimalRepository) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *NullableMinimalRepository) GetSSHURL() OptString {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *NullableMinimalRepository) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *NullableMinimalRepository) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *NullableMinimalRepository) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *NullableMinimalRepository) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *NullableMinimalRepository) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *NullableMinimalRepository) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *NullableMinimalRepository) GetTreesURL() string {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *NullableMinimalRepository) GetCloneURL() OptString {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *NullableMinimalRepository) GetMirrorURL() OptNilString {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *NullableMinimalRepository) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *NullableMinimalRepository) GetSvnURL() OptString {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *NullableMinimalRepository) GetHomepage() OptNilString {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *NullableMinimalRepository) GetLanguage() OptNilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *NullableMinimalRepository) GetForksCount() OptInt {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *NullableMinimalRepository) GetStargazersCount() OptInt {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *NullableMinimalRepository) GetWatchersCount() OptInt {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *NullableMinimalRepository) GetSize() OptInt {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *NullableMinimalRepository) GetDefaultBranch() OptString {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *NullableMinimalRepository) GetOpenIssuesCount() OptInt {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *NullableMinimalRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *NullableMinimalRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *NullableMinimalRepository) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *NullableMinimalRepository) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *NullableMinimalRepository) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *NullableMinimalRepository) GetHasPages() OptBool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *NullableMinimalRepository) GetHasDownloads() OptBool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *NullableMinimalRepository) GetArchived() OptBool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *NullableMinimalRepository) GetDisabled() OptBool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *NullableMinimalRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *NullableMinimalRepository) GetPushedAt() OptNilDateTime {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NullableMinimalRepository) GetCreatedAt() OptNilDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NullableMinimalRepository) GetUpdatedAt() OptNilDateTime {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *NullableMinimalRepository) GetPermissions() OptNullableMinimalRepositoryPermissions {
	return s.Permissions
}

// GetTemplateRepository returns the value of TemplateRepository.
func (s *NullableMinimalRepository) GetTemplateRepository() OptNilNullableRepository {
	return s.TemplateRepository
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *NullableMinimalRepository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *NullableMinimalRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *NullableMinimalRepository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *NullableMinimalRepository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// GetCodeOfConduct returns the value of CodeOfConduct.
func (s *NullableMinimalRepository) GetCodeOfConduct() OptCodeOfConduct {
	return s.CodeOfConduct
}

// GetLicense returns the value of License.
func (s *NullableMinimalRepository) GetLicense() OptNilNullableMinimalRepositoryLicense {
	return s.License
}

// GetForks returns the value of Forks.
func (s *NullableMinimalRepository) GetForks() OptInt {
	return s.Forks
}

// GetOpenIssues returns the value of OpenIssues.
func (s *NullableMinimalRepository) GetOpenIssues() OptInt {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *NullableMinimalRepository) GetWatchers() OptInt {
	return s.Watchers
}

// GetAllowForking returns the value of AllowForking.
func (s *NullableMinimalRepository) GetAllowForking() OptBool {
	return s.AllowForking
}

// SetID sets the value of ID.
func (s *NullableMinimalRepository) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableMinimalRepository) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *NullableMinimalRepository) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *NullableMinimalRepository) SetFullName(val string) {
	s.FullName = val
}

// SetOwner sets the value of Owner.
func (s *NullableMinimalRepository) SetOwner(val SimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *NullableMinimalRepository) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableMinimalRepository) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *NullableMinimalRepository) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *NullableMinimalRepository) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *NullableMinimalRepository) SetURL(val url.URL) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *NullableMinimalRepository) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *NullableMinimalRepository) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *NullableMinimalRepository) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *NullableMinimalRepository) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *NullableMinimalRepository) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *NullableMinimalRepository) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *NullableMinimalRepository) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *NullableMinimalRepository) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *NullableMinimalRepository) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *NullableMinimalRepository) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *NullableMinimalRepository) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *NullableMinimalRepository) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *NullableMinimalRepository) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *NullableMinimalRepository) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *NullableMinimalRepository) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *NullableMinimalRepository) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *NullableMinimalRepository) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *NullableMinimalRepository) SetGitURL(val OptString) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *NullableMinimalRepository) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *NullableMinimalRepository) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *NullableMinimalRepository) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *NullableMinimalRepository) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *NullableMinimalRepository) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *NullableMinimalRepository) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *NullableMinimalRepository) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *NullableMinimalRepository) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *NullableMinimalRepository) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *NullableMinimalRepository) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *NullableMinimalRepository) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *NullableMinimalRepository) SetSSHURL(val OptString) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *NullableMinimalRepository) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *NullableMinimalRepository) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *NullableMinimalRepository) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *NullableMinimalRepository) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *NullableMinimalRepository) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *NullableMinimalRepository) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *NullableMinimalRepository) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *NullableMinimalRepository) SetCloneURL(val OptString) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *NullableMinimalRepository) SetMirrorURL(val OptNilString) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *NullableMinimalRepository) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *NullableMinimalRepository) SetSvnURL(val OptString) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *NullableMinimalRepository) SetHomepage(val OptNilString) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *NullableMinimalRepository) SetLanguage(val OptNilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *NullableMinimalRepository) SetForksCount(val OptInt) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *NullableMinimalRepository) SetStargazersCount(val OptInt) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *NullableMinimalRepository) SetWatchersCount(val OptInt) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *NullableMinimalRepository) SetSize(val OptInt) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *NullableMinimalRepository) SetDefaultBranch(val OptString) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *NullableMinimalRepository) SetOpenIssuesCount(val OptInt) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *NullableMinimalRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *NullableMinimalRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *NullableMinimalRepository) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *NullableMinimalRepository) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *NullableMinimalRepository) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *NullableMinimalRepository) SetHasPages(val OptBool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *NullableMinimalRepository) SetHasDownloads(val OptBool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *NullableMinimalRepository) SetArchived(val OptBool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *NullableMinimalRepository) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *NullableMinimalRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *NullableMinimalRepository) SetPushedAt(val OptNilDateTime) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NullableMinimalRepository) SetCreatedAt(val OptNilDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NullableMinimalRepository) SetUpdatedAt(val OptNilDateTime) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *NullableMinimalRepository) SetPermissions(val OptNullableMinimalRepositoryPermissions) {
	s.Permissions = val
}

// SetTemplateRepository sets the value of TemplateRepository.
func (s *NullableMinimalRepository) SetTemplateRepository(val OptNilNullableRepository) {
	s.TemplateRepository = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *NullableMinimalRepository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *NullableMinimalRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *NullableMinimalRepository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *NullableMinimalRepository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

// SetCodeOfConduct sets the value of CodeOfConduct.
func (s *NullableMinimalRepository) SetCodeOfConduct(val OptCodeOfConduct) {
	s.CodeOfConduct = val
}

// SetLicense sets the value of License.
func (s *NullableMinimalRepository) SetLicense(val OptNilNullableMinimalRepositoryLicense) {
	s.License = val
}

// SetForks sets the value of Forks.
func (s *NullableMinimalRepository) SetForks(val OptInt) {
	s.Forks = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *NullableMinimalRepository) SetOpenIssues(val OptInt) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *NullableMinimalRepository) SetWatchers(val OptInt) {
	s.Watchers = val
}

// SetAllowForking sets the value of AllowForking.
func (s *NullableMinimalRepository) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

type NullableMinimalRepositoryLicense struct {
	Key    OptString `json:"key"`
	Name   OptString `json:"name"`
	SpdxID OptString `json:"spdx_id"`
	URL    OptString `json:"url"`
	NodeID OptString `json:"node_id"`
}

// GetKey returns the value of Key.
func (s *NullableMinimalRepositoryLicense) GetKey() OptString {
	return s.Key
}

// GetName returns the value of Name.
func (s *NullableMinimalRepositoryLicense) GetName() OptString {
	return s.Name
}

// GetSpdxID returns the value of SpdxID.
func (s *NullableMinimalRepositoryLicense) GetSpdxID() OptString {
	return s.SpdxID
}

// GetURL returns the value of URL.
func (s *NullableMinimalRepositoryLicense) GetURL() OptString {
	return s.URL
}

// GetNodeID returns the value of NodeID.
func (s *NullableMinimalRepositoryLicense) GetNodeID() OptString {
	return s.NodeID
}

// SetKey sets the value of Key.
func (s *NullableMinimalRepositoryLicense) SetKey(val OptString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *NullableMinimalRepositoryLicense) SetName(val OptString) {
	s.Name = val
}

// SetSpdxID sets the value of SpdxID.
func (s *NullableMinimalRepositoryLicense) SetSpdxID(val OptString) {
	s.SpdxID = val
}

// SetURL sets the value of URL.
func (s *NullableMinimalRepositoryLicense) SetURL(val OptString) {
	s.URL = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableMinimalRepositoryLicense) SetNodeID(val OptString) {
	s.NodeID = val
}

type NullableMinimalRepositoryPermissions struct {
	Admin    OptBool `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     OptBool `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     OptBool `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *NullableMinimalRepositoryPermissions) GetAdmin() OptBool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *NullableMinimalRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *NullableMinimalRepositoryPermissions) GetPush() OptBool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *NullableMinimalRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *NullableMinimalRepositoryPermissions) GetPull() OptBool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *NullableMinimalRepositoryPermissions) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *NullableMinimalRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *NullableMinimalRepositoryPermissions) SetPush(val OptBool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *NullableMinimalRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *NullableMinimalRepositoryPermissions) SetPull(val OptBool) {
	s.Pull = val
}

// A git repository.
// Ref: #/components/schemas/nullable-repository
type NullableRepository struct {
	// Unique identifier of the repository.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// The name of the repository.
	Name         string                           `json:"name"`
	FullName     string                           `json:"full_name"`
	License      NilNullableLicenseSimple         `json:"license"`
	Organization OptNilNullableSimpleUser         `json:"organization"`
	Forks        int                              `json:"forks"`
	Permissions  OptNullableRepositoryPermissions `json:"permissions"`
	Owner        SimpleUser                       `json:"owner"`
	// Whether the repository is private or public.
	Private          bool      `json:"private"`
	HTMLURL          url.URL   `json:"html_url"`
	Description      NilString `json:"description"`
	Fork             bool      `json:"fork"`
	URL              url.URL   `json:"url"`
	ArchiveURL       string    `json:"archive_url"`
	AssigneesURL     string    `json:"assignees_url"`
	BlobsURL         string    `json:"blobs_url"`
	BranchesURL      string    `json:"branches_url"`
	CollaboratorsURL string    `json:"collaborators_url"`
	CommentsURL      string    `json:"comments_url"`
	CommitsURL       string    `json:"commits_url"`
	CompareURL       string    `json:"compare_url"`
	ContentsURL      string    `json:"contents_url"`
	ContributorsURL  url.URL   `json:"contributors_url"`
	DeploymentsURL   url.URL   `json:"deployments_url"`
	DownloadsURL     url.URL   `json:"downloads_url"`
	EventsURL        url.URL   `json:"events_url"`
	ForksURL         url.URL   `json:"forks_url"`
	GitCommitsURL    string    `json:"git_commits_url"`
	GitRefsURL       string    `json:"git_refs_url"`
	GitTagsURL       string    `json:"git_tags_url"`
	GitURL           string    `json:"git_url"`
	IssueCommentURL  string    `json:"issue_comment_url"`
	IssueEventsURL   string    `json:"issue_events_url"`
	IssuesURL        string    `json:"issues_url"`
	KeysURL          string    `json:"keys_url"`
	LabelsURL        string    `json:"labels_url"`
	LanguagesURL     url.URL   `json:"languages_url"`
	MergesURL        url.URL   `json:"merges_url"`
	MilestonesURL    string    `json:"milestones_url"`
	NotificationsURL string    `json:"notifications_url"`
	PullsURL         string    `json:"pulls_url"`
	ReleasesURL      string    `json:"releases_url"`
	SSHURL           string    `json:"ssh_url"`
	StargazersURL    url.URL   `json:"stargazers_url"`
	StatusesURL      string    `json:"statuses_url"`
	SubscribersURL   url.URL   `json:"subscribers_url"`
	SubscriptionURL  url.URL   `json:"subscription_url"`
	TagsURL          url.URL   `json:"tags_url"`
	TeamsURL         url.URL   `json:"teams_url"`
	TreesURL         string    `json:"trees_url"`
	CloneURL         string    `json:"clone_url"`
	MirrorURL        NilURI    `json:"mirror_url"`
	HooksURL         url.URL   `json:"hooks_url"`
	SvnURL           url.URL   `json:"svn_url"`
	Homepage         NilURI    `json:"homepage"`
	Language         NilString `json:"language"`
	ForksCount       int       `json:"forks_count"`
	StargazersCount  int       `json:"stargazers_count"`
	WatchersCount    int       `json:"watchers_count"`
	Size             int       `json:"size"`
	// The default branch of the repository.
	DefaultBranch   string `json:"default_branch"`
	OpenIssuesCount int    `json:"open_issues_count"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool  `json:"is_template"`
	Topics     []string `json:"topics"`
	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`
	// Whether the wiki is enabled.
	HasWiki  bool `json:"has_wiki"`
	HasPages bool `json:"has_pages"`
	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`
	// Whether the repository is archived.
	Archived bool `json:"archived"`
	// Returns whether or not this repository disabled.
	Disabled bool `json:"disabled"`
	// The repository visibility: public, private, or internal.
	Visibility OptString   `json:"visibility"`
	PushedAt   NilDateTime `json:"pushed_at"`
	CreatedAt  NilDateTime `json:"created_at"`
	UpdatedAt  NilDateTime `json:"updated_at"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge   OptBool                                    `json:"allow_rebase_merge"`
	TemplateRepository OptNilNullableRepositoryTemplateRepository `json:"template_repository"`
	TempCloneToken     OptString                                  `json:"temp_clone_token"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool `json:"allow_squash_merge"`
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool `json:"allow_auto_merge"`
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool `json:"delete_branch_on_merge"`
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool `json:"allow_merge_commit"`
	// Whether to allow forking this repo.
	AllowForking     OptBool   `json:"allow_forking"`
	SubscribersCount OptInt    `json:"subscribers_count"`
	NetworkCount     OptInt    `json:"network_count"`
	OpenIssues       int       `json:"open_issues"`
	Watchers         int       `json:"watchers"`
	MasterBranch     OptString `json:"master_branch"`
	StarredAt        OptString `json:"starred_at"`
}

// GetID returns the value of ID.
func (s *NullableRepository) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableRepository) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *NullableRepository) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *NullableRepository) GetFullName() string {
	return s.FullName
}

// GetLicense returns the value of License.
func (s *NullableRepository) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetOrganization returns the value of Organization.
func (s *NullableRepository) GetOrganization() OptNilNullableSimpleUser {
	return s.Organization
}

// GetForks returns the value of Forks.
func (s *NullableRepository) GetForks() int {
	return s.Forks
}

// GetPermissions returns the value of Permissions.
func (s *NullableRepository) GetPermissions() OptNullableRepositoryPermissions {
	return s.Permissions
}

// GetOwner returns the value of Owner.
func (s *NullableRepository) GetOwner() SimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *NullableRepository) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableRepository) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *NullableRepository) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *NullableRepository) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *NullableRepository) GetURL() url.URL {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *NullableRepository) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *NullableRepository) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *NullableRepository) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *NullableRepository) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *NullableRepository) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *NullableRepository) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *NullableRepository) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *NullableRepository) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *NullableRepository) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *NullableRepository) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *NullableRepository) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *NullableRepository) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *NullableRepository) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *NullableRepository) GetForksURL() url.URL {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *NullableRepository) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *NullableRepository) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *NullableRepository) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *NullableRepository) GetGitURL() string {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *NullableRepository) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *NullableRepository) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *NullableRepository) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *NullableRepository) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *NullableRepository) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *NullableRepository) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *NullableRepository) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *NullableRepository) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *NullableRepository) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *NullableRepository) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *NullableRepository) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *NullableRepository) GetSSHURL() string {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *NullableRepository) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *NullableRepository) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *NullableRepository) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *NullableRepository) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *NullableRepository) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *NullableRepository) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *NullableRepository) GetTreesURL() string {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *NullableRepository) GetCloneURL() string {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *NullableRepository) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *NullableRepository) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *NullableRepository) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *NullableRepository) GetHomepage() NilURI {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *NullableRepository) GetLanguage() NilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *NullableRepository) GetForksCount() int {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *NullableRepository) GetStargazersCount() int {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *NullableRepository) GetWatchersCount() int {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *NullableRepository) GetSize() int {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *NullableRepository) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *NullableRepository) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *NullableRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *NullableRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *NullableRepository) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *NullableRepository) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *NullableRepository) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *NullableRepository) GetHasPages() bool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *NullableRepository) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *NullableRepository) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *NullableRepository) GetDisabled() bool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *NullableRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *NullableRepository) GetPushedAt() NilDateTime {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NullableRepository) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NullableRepository) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *NullableRepository) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetTemplateRepository returns the value of TemplateRepository.
func (s *NullableRepository) GetTemplateRepository() OptNilNullableRepositoryTemplateRepository {
	return s.TemplateRepository
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *NullableRepository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *NullableRepository) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *NullableRepository) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *NullableRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *NullableRepository) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowForking returns the value of AllowForking.
func (s *NullableRepository) GetAllowForking() OptBool {
	return s.AllowForking
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *NullableRepository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *NullableRepository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// GetOpenIssues returns the value of OpenIssues.
func (s *NullableRepository) GetOpenIssues() int {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *NullableRepository) GetWatchers() int {
	return s.Watchers
}

// GetMasterBranch returns the value of MasterBranch.
func (s *NullableRepository) GetMasterBranch() OptString {
	return s.MasterBranch
}

// GetStarredAt returns the value of StarredAt.
func (s *NullableRepository) GetStarredAt() OptString {
	return s.StarredAt
}

// SetID sets the value of ID.
func (s *NullableRepository) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableRepository) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *NullableRepository) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *NullableRepository) SetFullName(val string) {
	s.FullName = val
}

// SetLicense sets the value of License.
func (s *NullableRepository) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetOrganization sets the value of Organization.
func (s *NullableRepository) SetOrganization(val OptNilNullableSimpleUser) {
	s.Organization = val
}

// SetForks sets the value of Forks.
func (s *NullableRepository) SetForks(val int) {
	s.Forks = val
}

// SetPermissions sets the value of Permissions.
func (s *NullableRepository) SetPermissions(val OptNullableRepositoryPermissions) {
	s.Permissions = val
}

// SetOwner sets the value of Owner.
func (s *NullableRepository) SetOwner(val SimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *NullableRepository) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableRepository) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *NullableRepository) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *NullableRepository) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *NullableRepository) SetURL(val url.URL) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *NullableRepository) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *NullableRepository) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *NullableRepository) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *NullableRepository) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *NullableRepository) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *NullableRepository) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *NullableRepository) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *NullableRepository) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *NullableRepository) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *NullableRepository) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *NullableRepository) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *NullableRepository) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *NullableRepository) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *NullableRepository) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *NullableRepository) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *NullableRepository) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *NullableRepository) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *NullableRepository) SetGitURL(val string) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *NullableRepository) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *NullableRepository) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *NullableRepository) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *NullableRepository) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *NullableRepository) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *NullableRepository) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *NullableRepository) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *NullableRepository) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *NullableRepository) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *NullableRepository) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *NullableRepository) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *NullableRepository) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *NullableRepository) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *NullableRepository) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *NullableRepository) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *NullableRepository) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *NullableRepository) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *NullableRepository) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *NullableRepository) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *NullableRepository) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *NullableRepository) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *NullableRepository) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *NullableRepository) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *NullableRepository) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *NullableRepository) SetLanguage(val NilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *NullableRepository) SetForksCount(val int) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *NullableRepository) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *NullableRepository) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *NullableRepository) SetSize(val int) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *NullableRepository) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *NullableRepository) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *NullableRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *NullableRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *NullableRepository) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *NullableRepository) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *NullableRepository) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *NullableRepository) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *NullableRepository) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *NullableRepository) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *NullableRepository) SetDisabled(val bool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *NullableRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *NullableRepository) SetPushedAt(val NilDateTime) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NullableRepository) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NullableRepository) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *NullableRepository) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetTemplateRepository sets the value of TemplateRepository.
func (s *NullableRepository) SetTemplateRepository(val OptNilNullableRepositoryTemplateRepository) {
	s.TemplateRepository = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *NullableRepository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *NullableRepository) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *NullableRepository) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *NullableRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *NullableRepository) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowForking sets the value of AllowForking.
func (s *NullableRepository) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *NullableRepository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *NullableRepository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *NullableRepository) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *NullableRepository) SetWatchers(val int) {
	s.Watchers = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *NullableRepository) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

// SetStarredAt sets the value of StarredAt.
func (s *NullableRepository) SetStarredAt(val OptString) {
	s.StarredAt = val
}

type NullableRepositoryPermissions struct {
	Admin    bool    `json:"admin"`
	Pull     bool    `json:"pull"`
	Triage   OptBool `json:"triage"`
	Push     bool    `json:"push"`
	Maintain OptBool `json:"maintain"`
}

// GetAdmin returns the value of Admin.
func (s *NullableRepositoryPermissions) GetAdmin() bool {
	return s.Admin
}

// GetPull returns the value of Pull.
func (s *NullableRepositoryPermissions) GetPull() bool {
	return s.Pull
}

// GetTriage returns the value of Triage.
func (s *NullableRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPush returns the value of Push.
func (s *NullableRepositoryPermissions) GetPush() bool {
	return s.Push
}

// GetMaintain returns the value of Maintain.
func (s *NullableRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// SetAdmin sets the value of Admin.
func (s *NullableRepositoryPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetPull sets the value of Pull.
func (s *NullableRepositoryPermissions) SetPull(val bool) {
	s.Pull = val
}

// SetTriage sets the value of Triage.
func (s *NullableRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPush sets the value of Push.
func (s *NullableRepositoryPermissions) SetPush(val bool) {
	s.Push = val
}

// SetMaintain sets the value of Maintain.
func (s *NullableRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

type NullableRepositoryTemplateRepository struct {
	ID                  OptInt                                             `json:"id"`
	NodeID              OptString                                          `json:"node_id"`
	Name                OptString                                          `json:"name"`
	FullName            OptString                                          `json:"full_name"`
	Owner               OptNullableRepositoryTemplateRepositoryOwner       `json:"owner"`
	Private             OptBool                                            `json:"private"`
	HTMLURL             OptString                                          `json:"html_url"`
	Description         OptString                                          `json:"description"`
	Fork                OptBool                                            `json:"fork"`
	URL                 OptString                                          `json:"url"`
	ArchiveURL          OptString                                          `json:"archive_url"`
	AssigneesURL        OptString                                          `json:"assignees_url"`
	BlobsURL            OptString                                          `json:"blobs_url"`
	BranchesURL         OptString                                          `json:"branches_url"`
	CollaboratorsURL    OptString                                          `json:"collaborators_url"`
	CommentsURL         OptString                                          `json:"comments_url"`
	CommitsURL          OptString                                          `json:"commits_url"`
	CompareURL          OptString                                          `json:"compare_url"`
	ContentsURL         OptString                                          `json:"contents_url"`
	ContributorsURL     OptString                                          `json:"contributors_url"`
	DeploymentsURL      OptString                                          `json:"deployments_url"`
	DownloadsURL        OptString                                          `json:"downloads_url"`
	EventsURL           OptString                                          `json:"events_url"`
	ForksURL            OptString                                          `json:"forks_url"`
	GitCommitsURL       OptString                                          `json:"git_commits_url"`
	GitRefsURL          OptString                                          `json:"git_refs_url"`
	GitTagsURL          OptString                                          `json:"git_tags_url"`
	GitURL              OptString                                          `json:"git_url"`
	IssueCommentURL     OptString                                          `json:"issue_comment_url"`
	IssueEventsURL      OptString                                          `json:"issue_events_url"`
	IssuesURL           OptString                                          `json:"issues_url"`
	KeysURL             OptString                                          `json:"keys_url"`
	LabelsURL           OptString                                          `json:"labels_url"`
	LanguagesURL        OptString                                          `json:"languages_url"`
	MergesURL           OptString                                          `json:"merges_url"`
	MilestonesURL       OptString                                          `json:"milestones_url"`
	NotificationsURL    OptString                                          `json:"notifications_url"`
	PullsURL            OptString                                          `json:"pulls_url"`
	ReleasesURL         OptString                                          `json:"releases_url"`
	SSHURL              OptString                                          `json:"ssh_url"`
	StargazersURL       OptString                                          `json:"stargazers_url"`
	StatusesURL         OptString                                          `json:"statuses_url"`
	SubscribersURL      OptString                                          `json:"subscribers_url"`
	SubscriptionURL     OptString                                          `json:"subscription_url"`
	TagsURL             OptString                                          `json:"tags_url"`
	TeamsURL            OptString                                          `json:"teams_url"`
	TreesURL            OptString                                          `json:"trees_url"`
	CloneURL            OptString                                          `json:"clone_url"`
	MirrorURL           OptString                                          `json:"mirror_url"`
	HooksURL            OptString                                          `json:"hooks_url"`
	SvnURL              OptString                                          `json:"svn_url"`
	Homepage            OptString                                          `json:"homepage"`
	Language            OptString                                          `json:"language"`
	ForksCount          OptInt                                             `json:"forks_count"`
	StargazersCount     OptInt                                             `json:"stargazers_count"`
	WatchersCount       OptInt                                             `json:"watchers_count"`
	Size                OptInt                                             `json:"size"`
	DefaultBranch       OptString                                          `json:"default_branch"`
	OpenIssuesCount     OptInt                                             `json:"open_issues_count"`
	IsTemplate          OptBool                                            `json:"is_template"`
	Topics              []string                                           `json:"topics"`
	HasIssues           OptBool                                            `json:"has_issues"`
	HasProjects         OptBool                                            `json:"has_projects"`
	HasWiki             OptBool                                            `json:"has_wiki"`
	HasPages            OptBool                                            `json:"has_pages"`
	HasDownloads        OptBool                                            `json:"has_downloads"`
	Archived            OptBool                                            `json:"archived"`
	Disabled            OptBool                                            `json:"disabled"`
	Visibility          OptString                                          `json:"visibility"`
	PushedAt            OptString                                          `json:"pushed_at"`
	CreatedAt           OptString                                          `json:"created_at"`
	UpdatedAt           OptString                                          `json:"updated_at"`
	Permissions         OptNullableRepositoryTemplateRepositoryPermissions `json:"permissions"`
	AllowRebaseMerge    OptBool                                            `json:"allow_rebase_merge"`
	TempCloneToken      OptString                                          `json:"temp_clone_token"`
	AllowSquashMerge    OptBool                                            `json:"allow_squash_merge"`
	AllowAutoMerge      OptBool                                            `json:"allow_auto_merge"`
	DeleteBranchOnMerge OptBool                                            `json:"delete_branch_on_merge"`
	AllowMergeCommit    OptBool                                            `json:"allow_merge_commit"`
	SubscribersCount    OptInt                                             `json:"subscribers_count"`
	NetworkCount        OptInt                                             `json:"network_count"`
}

// GetID returns the value of ID.
func (s *NullableRepositoryTemplateRepository) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableRepositoryTemplateRepository) GetNodeID() OptString {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *NullableRepositoryTemplateRepository) GetName() OptString {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *NullableRepositoryTemplateRepository) GetFullName() OptString {
	return s.FullName
}

// GetOwner returns the value of Owner.
func (s *NullableRepositoryTemplateRepository) GetOwner() OptNullableRepositoryTemplateRepositoryOwner {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *NullableRepositoryTemplateRepository) GetPrivate() OptBool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableRepositoryTemplateRepository) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *NullableRepositoryTemplateRepository) GetDescription() OptString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *NullableRepositoryTemplateRepository) GetFork() OptBool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *NullableRepositoryTemplateRepository) GetURL() OptString {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *NullableRepositoryTemplateRepository) GetArchiveURL() OptString {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *NullableRepositoryTemplateRepository) GetAssigneesURL() OptString {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *NullableRepositoryTemplateRepository) GetBlobsURL() OptString {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *NullableRepositoryTemplateRepository) GetBranchesURL() OptString {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *NullableRepositoryTemplateRepository) GetCollaboratorsURL() OptString {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *NullableRepositoryTemplateRepository) GetCommentsURL() OptString {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *NullableRepositoryTemplateRepository) GetCommitsURL() OptString {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *NullableRepositoryTemplateRepository) GetCompareURL() OptString {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *NullableRepositoryTemplateRepository) GetContentsURL() OptString {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *NullableRepositoryTemplateRepository) GetContributorsURL() OptString {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *NullableRepositoryTemplateRepository) GetDeploymentsURL() OptString {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *NullableRepositoryTemplateRepository) GetDownloadsURL() OptString {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *NullableRepositoryTemplateRepository) GetEventsURL() OptString {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *NullableRepositoryTemplateRepository) GetForksURL() OptString {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *NullableRepositoryTemplateRepository) GetGitCommitsURL() OptString {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *NullableRepositoryTemplateRepository) GetGitRefsURL() OptString {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *NullableRepositoryTemplateRepository) GetGitTagsURL() OptString {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *NullableRepositoryTemplateRepository) GetGitURL() OptString {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *NullableRepositoryTemplateRepository) GetIssueCommentURL() OptString {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *NullableRepositoryTemplateRepository) GetIssueEventsURL() OptString {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *NullableRepositoryTemplateRepository) GetIssuesURL() OptString {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *NullableRepositoryTemplateRepository) GetKeysURL() OptString {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *NullableRepositoryTemplateRepository) GetLabelsURL() OptString {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *NullableRepositoryTemplateRepository) GetLanguagesURL() OptString {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *NullableRepositoryTemplateRepository) GetMergesURL() OptString {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *NullableRepositoryTemplateRepository) GetMilestonesURL() OptString {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *NullableRepositoryTemplateRepository) GetNotificationsURL() OptString {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *NullableRepositoryTemplateRepository) GetPullsURL() OptString {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *NullableRepositoryTemplateRepository) GetReleasesURL() OptString {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *NullableRepositoryTemplateRepository) GetSSHURL() OptString {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *NullableRepositoryTemplateRepository) GetStargazersURL() OptString {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *NullableRepositoryTemplateRepository) GetStatusesURL() OptString {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *NullableRepositoryTemplateRepository) GetSubscribersURL() OptString {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *NullableRepositoryTemplateRepository) GetSubscriptionURL() OptString {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *NullableRepositoryTemplateRepository) GetTagsURL() OptString {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *NullableRepositoryTemplateRepository) GetTeamsURL() OptString {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *NullableRepositoryTemplateRepository) GetTreesURL() OptString {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *NullableRepositoryTemplateRepository) GetCloneURL() OptString {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *NullableRepositoryTemplateRepository) GetMirrorURL() OptString {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *NullableRepositoryTemplateRepository) GetHooksURL() OptString {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *NullableRepositoryTemplateRepository) GetSvnURL() OptString {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *NullableRepositoryTemplateRepository) GetHomepage() OptString {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *NullableRepositoryTemplateRepository) GetLanguage() OptString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *NullableRepositoryTemplateRepository) GetForksCount() OptInt {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *NullableRepositoryTemplateRepository) GetStargazersCount() OptInt {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *NullableRepositoryTemplateRepository) GetWatchersCount() OptInt {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *NullableRepositoryTemplateRepository) GetSize() OptInt {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *NullableRepositoryTemplateRepository) GetDefaultBranch() OptString {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *NullableRepositoryTemplateRepository) GetOpenIssuesCount() OptInt {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *NullableRepositoryTemplateRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *NullableRepositoryTemplateRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *NullableRepositoryTemplateRepository) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *NullableRepositoryTemplateRepository) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *NullableRepositoryTemplateRepository) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *NullableRepositoryTemplateRepository) GetHasPages() OptBool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *NullableRepositoryTemplateRepository) GetHasDownloads() OptBool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *NullableRepositoryTemplateRepository) GetArchived() OptBool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *NullableRepositoryTemplateRepository) GetDisabled() OptBool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *NullableRepositoryTemplateRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *NullableRepositoryTemplateRepository) GetPushedAt() OptString {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NullableRepositoryTemplateRepository) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NullableRepositoryTemplateRepository) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *NullableRepositoryTemplateRepository) GetPermissions() OptNullableRepositoryTemplateRepositoryPermissions {
	return s.Permissions
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *NullableRepositoryTemplateRepository) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *NullableRepositoryTemplateRepository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *NullableRepositoryTemplateRepository) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *NullableRepositoryTemplateRepository) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *NullableRepositoryTemplateRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *NullableRepositoryTemplateRepository) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *NullableRepositoryTemplateRepository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *NullableRepositoryTemplateRepository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// SetID sets the value of ID.
func (s *NullableRepositoryTemplateRepository) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableRepositoryTemplateRepository) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *NullableRepositoryTemplateRepository) SetName(val OptString) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *NullableRepositoryTemplateRepository) SetFullName(val OptString) {
	s.FullName = val
}

// SetOwner sets the value of Owner.
func (s *NullableRepositoryTemplateRepository) SetOwner(val OptNullableRepositoryTemplateRepositoryOwner) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *NullableRepositoryTemplateRepository) SetPrivate(val OptBool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableRepositoryTemplateRepository) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *NullableRepositoryTemplateRepository) SetDescription(val OptString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *NullableRepositoryTemplateRepository) SetFork(val OptBool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *NullableRepositoryTemplateRepository) SetURL(val OptString) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *NullableRepositoryTemplateRepository) SetArchiveURL(val OptString) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *NullableRepositoryTemplateRepository) SetAssigneesURL(val OptString) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *NullableRepositoryTemplateRepository) SetBlobsURL(val OptString) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *NullableRepositoryTemplateRepository) SetBranchesURL(val OptString) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *NullableRepositoryTemplateRepository) SetCollaboratorsURL(val OptString) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *NullableRepositoryTemplateRepository) SetCommentsURL(val OptString) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *NullableRepositoryTemplateRepository) SetCommitsURL(val OptString) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *NullableRepositoryTemplateRepository) SetCompareURL(val OptString) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *NullableRepositoryTemplateRepository) SetContentsURL(val OptString) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *NullableRepositoryTemplateRepository) SetContributorsURL(val OptString) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *NullableRepositoryTemplateRepository) SetDeploymentsURL(val OptString) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *NullableRepositoryTemplateRepository) SetDownloadsURL(val OptString) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *NullableRepositoryTemplateRepository) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *NullableRepositoryTemplateRepository) SetForksURL(val OptString) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *NullableRepositoryTemplateRepository) SetGitCommitsURL(val OptString) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *NullableRepositoryTemplateRepository) SetGitRefsURL(val OptString) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *NullableRepositoryTemplateRepository) SetGitTagsURL(val OptString) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *NullableRepositoryTemplateRepository) SetGitURL(val OptString) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *NullableRepositoryTemplateRepository) SetIssueCommentURL(val OptString) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *NullableRepositoryTemplateRepository) SetIssueEventsURL(val OptString) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *NullableRepositoryTemplateRepository) SetIssuesURL(val OptString) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *NullableRepositoryTemplateRepository) SetKeysURL(val OptString) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *NullableRepositoryTemplateRepository) SetLabelsURL(val OptString) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *NullableRepositoryTemplateRepository) SetLanguagesURL(val OptString) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *NullableRepositoryTemplateRepository) SetMergesURL(val OptString) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *NullableRepositoryTemplateRepository) SetMilestonesURL(val OptString) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *NullableRepositoryTemplateRepository) SetNotificationsURL(val OptString) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *NullableRepositoryTemplateRepository) SetPullsURL(val OptString) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *NullableRepositoryTemplateRepository) SetReleasesURL(val OptString) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *NullableRepositoryTemplateRepository) SetSSHURL(val OptString) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *NullableRepositoryTemplateRepository) SetStargazersURL(val OptString) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *NullableRepositoryTemplateRepository) SetStatusesURL(val OptString) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *NullableRepositoryTemplateRepository) SetSubscribersURL(val OptString) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *NullableRepositoryTemplateRepository) SetSubscriptionURL(val OptString) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *NullableRepositoryTemplateRepository) SetTagsURL(val OptString) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *NullableRepositoryTemplateRepository) SetTeamsURL(val OptString) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *NullableRepositoryTemplateRepository) SetTreesURL(val OptString) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *NullableRepositoryTemplateRepository) SetCloneURL(val OptString) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *NullableRepositoryTemplateRepository) SetMirrorURL(val OptString) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *NullableRepositoryTemplateRepository) SetHooksURL(val OptString) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *NullableRepositoryTemplateRepository) SetSvnURL(val OptString) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *NullableRepositoryTemplateRepository) SetHomepage(val OptString) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *NullableRepositoryTemplateRepository) SetLanguage(val OptString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *NullableRepositoryTemplateRepository) SetForksCount(val OptInt) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *NullableRepositoryTemplateRepository) SetStargazersCount(val OptInt) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *NullableRepositoryTemplateRepository) SetWatchersCount(val OptInt) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *NullableRepositoryTemplateRepository) SetSize(val OptInt) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *NullableRepositoryTemplateRepository) SetDefaultBranch(val OptString) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *NullableRepositoryTemplateRepository) SetOpenIssuesCount(val OptInt) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *NullableRepositoryTemplateRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *NullableRepositoryTemplateRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *NullableRepositoryTemplateRepository) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *NullableRepositoryTemplateRepository) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *NullableRepositoryTemplateRepository) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *NullableRepositoryTemplateRepository) SetHasPages(val OptBool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *NullableRepositoryTemplateRepository) SetHasDownloads(val OptBool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *NullableRepositoryTemplateRepository) SetArchived(val OptBool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *NullableRepositoryTemplateRepository) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *NullableRepositoryTemplateRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *NullableRepositoryTemplateRepository) SetPushedAt(val OptString) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NullableRepositoryTemplateRepository) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NullableRepositoryTemplateRepository) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *NullableRepositoryTemplateRepository) SetPermissions(val OptNullableRepositoryTemplateRepositoryPermissions) {
	s.Permissions = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *NullableRepositoryTemplateRepository) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *NullableRepositoryTemplateRepository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *NullableRepositoryTemplateRepository) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *NullableRepositoryTemplateRepository) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *NullableRepositoryTemplateRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *NullableRepositoryTemplateRepository) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *NullableRepositoryTemplateRepository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *NullableRepositoryTemplateRepository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

type NullableRepositoryTemplateRepositoryOwner struct {
	Login             OptString `json:"login"`
	ID                OptInt    `json:"id"`
	NodeID            OptString `json:"node_id"`
	AvatarURL         OptString `json:"avatar_url"`
	GravatarID        OptString `json:"gravatar_id"`
	URL               OptString `json:"url"`
	HTMLURL           OptString `json:"html_url"`
	FollowersURL      OptString `json:"followers_url"`
	FollowingURL      OptString `json:"following_url"`
	GistsURL          OptString `json:"gists_url"`
	StarredURL        OptString `json:"starred_url"`
	SubscriptionsURL  OptString `json:"subscriptions_url"`
	OrganizationsURL  OptString `json:"organizations_url"`
	ReposURL          OptString `json:"repos_url"`
	EventsURL         OptString `json:"events_url"`
	ReceivedEventsURL OptString `json:"received_events_url"`
	Type              OptString `json:"type"`
	SiteAdmin         OptBool   `json:"site_admin"`
}

// GetLogin returns the value of Login.
func (s *NullableRepositoryTemplateRepositoryOwner) GetLogin() OptString {
	return s.Login
}

// GetID returns the value of ID.
func (s *NullableRepositoryTemplateRepositoryOwner) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableRepositoryTemplateRepositoryOwner) GetNodeID() OptString {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetAvatarURL() OptString {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *NullableRepositoryTemplateRepositoryOwner) GetGravatarID() OptString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetFollowersURL() OptString {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetFollowingURL() OptString {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetGistsURL() OptString {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetStarredURL() OptString {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetSubscriptionsURL() OptString {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetOrganizationsURL() OptString {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetReposURL() OptString {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetEventsURL() OptString {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) GetReceivedEventsURL() OptString {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *NullableRepositoryTemplateRepositoryOwner) GetType() OptString {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *NullableRepositoryTemplateRepositoryOwner) GetSiteAdmin() OptBool {
	return s.SiteAdmin
}

// SetLogin sets the value of Login.
func (s *NullableRepositoryTemplateRepositoryOwner) SetLogin(val OptString) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *NullableRepositoryTemplateRepositoryOwner) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableRepositoryTemplateRepositoryOwner) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetAvatarURL(val OptString) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *NullableRepositoryTemplateRepositoryOwner) SetGravatarID(val OptString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetFollowersURL(val OptString) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetFollowingURL(val OptString) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetGistsURL(val OptString) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetStarredURL(val OptString) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetSubscriptionsURL(val OptString) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetOrganizationsURL(val OptString) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetReposURL(val OptString) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *NullableRepositoryTemplateRepositoryOwner) SetReceivedEventsURL(val OptString) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *NullableRepositoryTemplateRepositoryOwner) SetType(val OptString) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *NullableRepositoryTemplateRepositoryOwner) SetSiteAdmin(val OptBool) {
	s.SiteAdmin = val
}

type NullableRepositoryTemplateRepositoryPermissions struct {
	Admin    OptBool `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     OptBool `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     OptBool `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *NullableRepositoryTemplateRepositoryPermissions) GetAdmin() OptBool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *NullableRepositoryTemplateRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *NullableRepositoryTemplateRepositoryPermissions) GetPush() OptBool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *NullableRepositoryTemplateRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *NullableRepositoryTemplateRepositoryPermissions) GetPull() OptBool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *NullableRepositoryTemplateRepositoryPermissions) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *NullableRepositoryTemplateRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *NullableRepositoryTemplateRepositoryPermissions) SetPush(val OptBool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *NullableRepositoryTemplateRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *NullableRepositoryTemplateRepositoryPermissions) SetPull(val OptBool) {
	s.Pull = val
}

// Ref: #/components/schemas/nullable-scoped-installation
type NullableScopedInstallation struct {
	Permissions AppPermissions `json:"permissions"`
	// Describe whether all repositories have been selected or there's a selection involved.
	RepositorySelection    NullableScopedInstallationRepositorySelection `json:"repository_selection"`
	SingleFileName         NilString                                     `json:"single_file_name"`
	HasMultipleSingleFiles OptBool                                       `json:"has_multiple_single_files"`
	SingleFilePaths        []string                                      `json:"single_file_paths"`
	RepositoriesURL        url.URL                                       `json:"repositories_url"`
	Account                SimpleUser                                    `json:"account"`
}

// GetPermissions returns the value of Permissions.
func (s *NullableScopedInstallation) GetPermissions() AppPermissions {
	return s.Permissions
}

// GetRepositorySelection returns the value of RepositorySelection.
func (s *NullableScopedInstallation) GetRepositorySelection() NullableScopedInstallationRepositorySelection {
	return s.RepositorySelection
}

// GetSingleFileName returns the value of SingleFileName.
func (s *NullableScopedInstallation) GetSingleFileName() NilString {
	return s.SingleFileName
}

// GetHasMultipleSingleFiles returns the value of HasMultipleSingleFiles.
func (s *NullableScopedInstallation) GetHasMultipleSingleFiles() OptBool {
	return s.HasMultipleSingleFiles
}

// GetSingleFilePaths returns the value of SingleFilePaths.
func (s *NullableScopedInstallation) GetSingleFilePaths() []string {
	return s.SingleFilePaths
}

// GetRepositoriesURL returns the value of RepositoriesURL.
func (s *NullableScopedInstallation) GetRepositoriesURL() url.URL {
	return s.RepositoriesURL
}

// GetAccount returns the value of Account.
func (s *NullableScopedInstallation) GetAccount() SimpleUser {
	return s.Account
}

// SetPermissions sets the value of Permissions.
func (s *NullableScopedInstallation) SetPermissions(val AppPermissions) {
	s.Permissions = val
}

// SetRepositorySelection sets the value of RepositorySelection.
func (s *NullableScopedInstallation) SetRepositorySelection(val NullableScopedInstallationRepositorySelection) {
	s.RepositorySelection = val
}

// SetSingleFileName sets the value of SingleFileName.
func (s *NullableScopedInstallation) SetSingleFileName(val NilString) {
	s.SingleFileName = val
}

// SetHasMultipleSingleFiles sets the value of HasMultipleSingleFiles.
func (s *NullableScopedInstallation) SetHasMultipleSingleFiles(val OptBool) {
	s.HasMultipleSingleFiles = val
}

// SetSingleFilePaths sets the value of SingleFilePaths.
func (s *NullableScopedInstallation) SetSingleFilePaths(val []string) {
	s.SingleFilePaths = val
}

// SetRepositoriesURL sets the value of RepositoriesURL.
func (s *NullableScopedInstallation) SetRepositoriesURL(val url.URL) {
	s.RepositoriesURL = val
}

// SetAccount sets the value of Account.
func (s *NullableScopedInstallation) SetAccount(val SimpleUser) {
	s.Account = val
}

// Describe whether all repositories have been selected or there's a selection involved.
type NullableScopedInstallationRepositorySelection string

const (
	NullableScopedInstallationRepositorySelectionAll      NullableScopedInstallationRepositorySelection = "all"
	NullableScopedInstallationRepositorySelectionSelected NullableScopedInstallationRepositorySelection = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s NullableScopedInstallationRepositorySelection) MarshalText() ([]byte, error) {
	switch s {
	case NullableScopedInstallationRepositorySelectionAll:
		return []byte(s), nil
	case NullableScopedInstallationRepositorySelectionSelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NullableScopedInstallationRepositorySelection) UnmarshalText(data []byte) error {
	switch NullableScopedInstallationRepositorySelection(data) {
	case NullableScopedInstallationRepositorySelectionAll:
		*s = NullableScopedInstallationRepositorySelectionAll
		return nil
	case NullableScopedInstallationRepositorySelectionSelected:
		*s = NullableScopedInstallationRepositorySelectionSelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Simple Commit.
// Ref: #/components/schemas/nullable-simple-commit
type NullableSimpleCommit struct {
	ID        string                           `json:"id"`
	TreeID    string                           `json:"tree_id"`
	Message   string                           `json:"message"`
	Timestamp time.Time                        `json:"timestamp"`
	Author    NilNullableSimpleCommitAuthor    `json:"author"`
	Committer NilNullableSimpleCommitCommitter `json:"committer"`
}

// GetID returns the value of ID.
func (s *NullableSimpleCommit) GetID() string {
	return s.ID
}

// GetTreeID returns the value of TreeID.
func (s *NullableSimpleCommit) GetTreeID() string {
	return s.TreeID
}

// GetMessage returns the value of Message.
func (s *NullableSimpleCommit) GetMessage() string {
	return s.Message
}

// GetTimestamp returns the value of Timestamp.
func (s *NullableSimpleCommit) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetAuthor returns the value of Author.
func (s *NullableSimpleCommit) GetAuthor() NilNullableSimpleCommitAuthor {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *NullableSimpleCommit) GetCommitter() NilNullableSimpleCommitCommitter {
	return s.Committer
}

// SetID sets the value of ID.
func (s *NullableSimpleCommit) SetID(val string) {
	s.ID = val
}

// SetTreeID sets the value of TreeID.
func (s *NullableSimpleCommit) SetTreeID(val string) {
	s.TreeID = val
}

// SetMessage sets the value of Message.
func (s *NullableSimpleCommit) SetMessage(val string) {
	s.Message = val
}

// SetTimestamp sets the value of Timestamp.
func (s *NullableSimpleCommit) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetAuthor sets the value of Author.
func (s *NullableSimpleCommit) SetAuthor(val NilNullableSimpleCommitAuthor) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *NullableSimpleCommit) SetCommitter(val NilNullableSimpleCommitCommitter) {
	s.Committer = val
}

type NullableSimpleCommitAuthor struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetName returns the value of Name.
func (s *NullableSimpleCommitAuthor) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *NullableSimpleCommitAuthor) GetEmail() string {
	return s.Email
}

// SetName sets the value of Name.
func (s *NullableSimpleCommitAuthor) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *NullableSimpleCommitAuthor) SetEmail(val string) {
	s.Email = val
}

type NullableSimpleCommitCommitter struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetName returns the value of Name.
func (s *NullableSimpleCommitCommitter) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *NullableSimpleCommitCommitter) GetEmail() string {
	return s.Email
}

// SetName sets the value of Name.
func (s *NullableSimpleCommitCommitter) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *NullableSimpleCommitCommitter) SetEmail(val string) {
	s.Email = val
}

// Simple User.
// Ref: #/components/schemas/nullable-simple-user
type NullableSimpleUser struct {
	Name              OptNilString `json:"name"`
	Email             OptNilString `json:"email"`
	Login             string       `json:"login"`
	ID                int          `json:"id"`
	NodeID            string       `json:"node_id"`
	AvatarURL         url.URL      `json:"avatar_url"`
	GravatarID        NilString    `json:"gravatar_id"`
	URL               url.URL      `json:"url"`
	HTMLURL           url.URL      `json:"html_url"`
	FollowersURL      url.URL      `json:"followers_url"`
	FollowingURL      string       `json:"following_url"`
	GistsURL          string       `json:"gists_url"`
	StarredURL        string       `json:"starred_url"`
	SubscriptionsURL  url.URL      `json:"subscriptions_url"`
	OrganizationsURL  url.URL      `json:"organizations_url"`
	ReposURL          url.URL      `json:"repos_url"`
	EventsURL         string       `json:"events_url"`
	ReceivedEventsURL url.URL      `json:"received_events_url"`
	Type              string       `json:"type"`
	SiteAdmin         bool         `json:"site_admin"`
	StarredAt         OptString    `json:"starred_at"`
}

// GetName returns the value of Name.
func (s *NullableSimpleUser) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *NullableSimpleUser) GetEmail() OptNilString {
	return s.Email
}

// GetLogin returns the value of Login.
func (s *NullableSimpleUser) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *NullableSimpleUser) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableSimpleUser) GetNodeID() string {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *NullableSimpleUser) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *NullableSimpleUser) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *NullableSimpleUser) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableSimpleUser) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *NullableSimpleUser) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *NullableSimpleUser) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *NullableSimpleUser) GetGistsURL() string {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *NullableSimpleUser) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *NullableSimpleUser) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *NullableSimpleUser) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *NullableSimpleUser) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *NullableSimpleUser) GetEventsURL() string {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *NullableSimpleUser) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *NullableSimpleUser) GetType() string {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *NullableSimpleUser) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetStarredAt returns the value of StarredAt.
func (s *NullableSimpleUser) GetStarredAt() OptString {
	return s.StarredAt
}

// SetName sets the value of Name.
func (s *NullableSimpleUser) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *NullableSimpleUser) SetEmail(val OptNilString) {
	s.Email = val
}

// SetLogin sets the value of Login.
func (s *NullableSimpleUser) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *NullableSimpleUser) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableSimpleUser) SetNodeID(val string) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *NullableSimpleUser) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *NullableSimpleUser) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *NullableSimpleUser) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableSimpleUser) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *NullableSimpleUser) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *NullableSimpleUser) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *NullableSimpleUser) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *NullableSimpleUser) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *NullableSimpleUser) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *NullableSimpleUser) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *NullableSimpleUser) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *NullableSimpleUser) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *NullableSimpleUser) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *NullableSimpleUser) SetType(val string) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *NullableSimpleUser) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetStarredAt sets the value of StarredAt.
func (s *NullableSimpleUser) SetStarredAt(val OptString) {
	s.StarredAt = val
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/nullable-team-simple
type NullableTeamSimple struct {
	// Unique identifier of the team.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// URL for the team.
	URL        url.URL `json:"url"`
	MembersURL string  `json:"members_url"`
	// Name of the team.
	Name string `json:"name"`
	// Description of the team.
	Description NilString `json:"description"`
	// Permission that the team will have for its repositories.
	Permission string `json:"permission"`
	// The level of privacy this team should have.
	Privacy         OptString `json:"privacy"`
	HTMLURL         url.URL   `json:"html_url"`
	RepositoriesURL url.URL   `json:"repositories_url"`
	Slug            string    `json:"slug"`
	// Distinguished Name (DN) that team maps to within LDAP environment.
	LdapDn OptString `json:"ldap_dn"`
}

// GetID returns the value of ID.
func (s *NullableTeamSimple) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *NullableTeamSimple) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *NullableTeamSimple) GetURL() url.URL {
	return s.URL
}

// GetMembersURL returns the value of MembersURL.
func (s *NullableTeamSimple) GetMembersURL() string {
	return s.MembersURL
}

// GetName returns the value of Name.
func (s *NullableTeamSimple) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NullableTeamSimple) GetDescription() NilString {
	return s.Description
}

// GetPermission returns the value of Permission.
func (s *NullableTeamSimple) GetPermission() string {
	return s.Permission
}

// GetPrivacy returns the value of Privacy.
func (s *NullableTeamSimple) GetPrivacy() OptString {
	return s.Privacy
}

// GetHTMLURL returns the value of HTMLURL.
func (s *NullableTeamSimple) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetRepositoriesURL returns the value of RepositoriesURL.
func (s *NullableTeamSimple) GetRepositoriesURL() url.URL {
	return s.RepositoriesURL
}

// GetSlug returns the value of Slug.
func (s *NullableTeamSimple) GetSlug() string {
	return s.Slug
}

// GetLdapDn returns the value of LdapDn.
func (s *NullableTeamSimple) GetLdapDn() OptString {
	return s.LdapDn
}

// SetID sets the value of ID.
func (s *NullableTeamSimple) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *NullableTeamSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *NullableTeamSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetMembersURL sets the value of MembersURL.
func (s *NullableTeamSimple) SetMembersURL(val string) {
	s.MembersURL = val
}

// SetName sets the value of Name.
func (s *NullableTeamSimple) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NullableTeamSimple) SetDescription(val NilString) {
	s.Description = val
}

// SetPermission sets the value of Permission.
func (s *NullableTeamSimple) SetPermission(val string) {
	s.Permission = val
}

// SetPrivacy sets the value of Privacy.
func (s *NullableTeamSimple) SetPrivacy(val OptString) {
	s.Privacy = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *NullableTeamSimple) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetRepositoriesURL sets the value of RepositoriesURL.
func (s *NullableTeamSimple) SetRepositoriesURL(val url.URL) {
	s.RepositoriesURL = val
}

// SetSlug sets the value of Slug.
func (s *NullableTeamSimple) SetSlug(val string) {
	s.Slug = val
}

// SetLdapDn sets the value of LdapDn.
func (s *NullableTeamSimple) SetLdapDn(val OptString) {
	s.LdapDn = val
}

type OAuthAuthorizationsCreateAuthorizationForbidden BasicError

func (*OAuthAuthorizationsCreateAuthorizationForbidden) oAuthAuthorizationsCreateAuthorizationRes() {}

type OAuthAuthorizationsCreateAuthorizationGone BasicError

func (*OAuthAuthorizationsCreateAuthorizationGone) oAuthAuthorizationsCreateAuthorizationRes() {}

type OAuthAuthorizationsCreateAuthorizationReq struct {
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray `json:"scopes"`
	// A note to remind you what the OAuth token is for.
	Note OptString `json:"note"`
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString `json:"note_url"`
	// The OAuth app client key for which to create the token.
	ClientID OptString `json:"client_id"`
	// The OAuth app client secret for which to create the token.
	ClientSecret OptString `json:"client_secret"`
	// A unique string to distinguish an authorization from others created for the same client ID and
	// user.
	Fingerprint OptString `json:"fingerprint"`
}

// GetScopes returns the value of Scopes.
func (s *OAuthAuthorizationsCreateAuthorizationReq) GetScopes() OptNilStringArray {
	return s.Scopes
}

// GetNote returns the value of Note.
func (s *OAuthAuthorizationsCreateAuthorizationReq) GetNote() OptString {
	return s.Note
}

// GetNoteURL returns the value of NoteURL.
func (s *OAuthAuthorizationsCreateAuthorizationReq) GetNoteURL() OptString {
	return s.NoteURL
}

// GetClientID returns the value of ClientID.
func (s *OAuthAuthorizationsCreateAuthorizationReq) GetClientID() OptString {
	return s.ClientID
}

// GetClientSecret returns the value of ClientSecret.
func (s *OAuthAuthorizationsCreateAuthorizationReq) GetClientSecret() OptString {
	return s.ClientSecret
}

// GetFingerprint returns the value of Fingerprint.
func (s *OAuthAuthorizationsCreateAuthorizationReq) GetFingerprint() OptString {
	return s.Fingerprint
}

// SetScopes sets the value of Scopes.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetScopes(val OptNilStringArray) {
	s.Scopes = val
}

// SetNote sets the value of Note.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetNote(val OptString) {
	s.Note = val
}

// SetNoteURL sets the value of NoteURL.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetNoteURL(val OptString) {
	s.NoteURL = val
}

// SetClientID sets the value of ClientID.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetClientID(val OptString) {
	s.ClientID = val
}

// SetClientSecret sets the value of ClientSecret.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetClientSecret(val OptString) {
	s.ClientSecret = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *OAuthAuthorizationsCreateAuthorizationReq) SetFingerprint(val OptString) {
	s.Fingerprint = val
}

type OAuthAuthorizationsCreateAuthorizationUnauthorized BasicError

func (*OAuthAuthorizationsCreateAuthorizationUnauthorized) oAuthAuthorizationsCreateAuthorizationRes() {
}

type OAuthAuthorizationsDeleteAuthorizationForbidden BasicError

func (*OAuthAuthorizationsDeleteAuthorizationForbidden) oAuthAuthorizationsDeleteAuthorizationRes() {}

// OAuthAuthorizationsDeleteAuthorizationNoContent is response for OAuthAuthorizationsDeleteAuthorization operation.
type OAuthAuthorizationsDeleteAuthorizationNoContent struct{}

func (*OAuthAuthorizationsDeleteAuthorizationNoContent) oAuthAuthorizationsDeleteAuthorizationRes() {}

type OAuthAuthorizationsDeleteAuthorizationUnauthorized BasicError

func (*OAuthAuthorizationsDeleteAuthorizationUnauthorized) oAuthAuthorizationsDeleteAuthorizationRes() {
}

type OAuthAuthorizationsDeleteGrantForbidden BasicError

func (*OAuthAuthorizationsDeleteGrantForbidden) oAuthAuthorizationsDeleteGrantRes() {}

// OAuthAuthorizationsDeleteGrantNoContent is response for OAuthAuthorizationsDeleteGrant operation.
type OAuthAuthorizationsDeleteGrantNoContent struct{}

func (*OAuthAuthorizationsDeleteGrantNoContent) oAuthAuthorizationsDeleteGrantRes() {}

type OAuthAuthorizationsDeleteGrantUnauthorized BasicError

func (*OAuthAuthorizationsDeleteGrantUnauthorized) oAuthAuthorizationsDeleteGrantRes() {}

type OAuthAuthorizationsGetAuthorizationForbidden BasicError

func (*OAuthAuthorizationsGetAuthorizationForbidden) oAuthAuthorizationsGetAuthorizationRes() {}

type OAuthAuthorizationsGetAuthorizationUnauthorized BasicError

func (*OAuthAuthorizationsGetAuthorizationUnauthorized) oAuthAuthorizationsGetAuthorizationRes() {}

type OAuthAuthorizationsGetGrantForbidden BasicError

func (*OAuthAuthorizationsGetGrantForbidden) oAuthAuthorizationsGetGrantRes() {}

type OAuthAuthorizationsGetGrantUnauthorized BasicError

func (*OAuthAuthorizationsGetGrantUnauthorized) oAuthAuthorizationsGetGrantRes() {}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCreated AuthorizationHeaders

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCreated) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintOK AuthorizationHeaders

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintOK) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq struct {
	// The OAuth app client secret for which to create the token.
	ClientSecret string `json:"client_secret"`
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray `json:"scopes"`
	// A note to remind you what the OAuth token is for.
	Note OptString `json:"note"`
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString `json:"note_url"`
}

// GetClientSecret returns the value of ClientSecret.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) GetClientSecret() string {
	return s.ClientSecret
}

// GetScopes returns the value of Scopes.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) GetScopes() OptNilStringArray {
	return s.Scopes
}

// GetNote returns the value of Note.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) GetNote() OptString {
	return s.Note
}

// GetNoteURL returns the value of NoteURL.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) GetNoteURL() OptString {
	return s.NoteURL
}

// SetClientSecret sets the value of ClientSecret.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) SetClientSecret(val string) {
	s.ClientSecret = val
}

// SetScopes sets the value of Scopes.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) SetScopes(val OptNilStringArray) {
	s.Scopes = val
}

// SetNote sets the value of Note.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) SetNote(val OptString) {
	s.Note = val
}

// SetNoteURL sets the value of NoteURL.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) SetNoteURL(val OptString) {
	s.NoteURL = val
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppCreated AuthorizationHeaders

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppCreated) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppForbidden BasicError

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppForbidden) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppOK AuthorizationHeaders

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppOK) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppReq struct {
	// The OAuth app client secret for which to create the token.
	ClientSecret string `json:"client_secret"`
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray `json:"scopes"`
	// A note to remind you what the OAuth token is for.
	Note OptString `json:"note"`
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString `json:"note_url"`
	// A unique string to distinguish an authorization from others created for the same client ID and
	// user.
	Fingerprint OptString `json:"fingerprint"`
}

// GetClientSecret returns the value of ClientSecret.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) GetClientSecret() string {
	return s.ClientSecret
}

// GetScopes returns the value of Scopes.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) GetScopes() OptNilStringArray {
	return s.Scopes
}

// GetNote returns the value of Note.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) GetNote() OptString {
	return s.Note
}

// GetNoteURL returns the value of NoteURL.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) GetNoteURL() OptString {
	return s.NoteURL
}

// GetFingerprint returns the value of Fingerprint.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) GetFingerprint() OptString {
	return s.Fingerprint
}

// SetClientSecret sets the value of ClientSecret.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) SetClientSecret(val string) {
	s.ClientSecret = val
}

// SetScopes sets the value of Scopes.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) SetScopes(val OptNilStringArray) {
	s.Scopes = val
}

// SetNote sets the value of Note.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) SetNote(val OptString) {
	s.Note = val
}

// SetNoteURL sets the value of NoteURL.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) SetNoteURL(val OptString) {
	s.NoteURL = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) SetFingerprint(val OptString) {
	s.Fingerprint = val
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppUnauthorized BasicError

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppUnauthorized) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes() {
}

type OAuthAuthorizationsListAuthorizationsForbidden BasicError

func (*OAuthAuthorizationsListAuthorizationsForbidden) oAuthAuthorizationsListAuthorizationsRes() {}

type OAuthAuthorizationsListAuthorizationsNotFound BasicError

func (*OAuthAuthorizationsListAuthorizationsNotFound) oAuthAuthorizationsListAuthorizationsRes() {}

// OAuthAuthorizationsListAuthorizationsOKHeaders wraps []Authorization with response headers.
type OAuthAuthorizationsListAuthorizationsOKHeaders struct {
	Link     OptString
	Response []Authorization
}

// GetLink returns the value of Link.
func (s *OAuthAuthorizationsListAuthorizationsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OAuthAuthorizationsListAuthorizationsOKHeaders) GetResponse() []Authorization {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OAuthAuthorizationsListAuthorizationsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OAuthAuthorizationsListAuthorizationsOKHeaders) SetResponse(val []Authorization) {
	s.Response = val
}

func (*OAuthAuthorizationsListAuthorizationsOKHeaders) oAuthAuthorizationsListAuthorizationsRes() {}

type OAuthAuthorizationsListAuthorizationsUnauthorized BasicError

func (*OAuthAuthorizationsListAuthorizationsUnauthorized) oAuthAuthorizationsListAuthorizationsRes() {
}

type OAuthAuthorizationsListGrantsForbidden BasicError

func (*OAuthAuthorizationsListGrantsForbidden) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsListGrantsNotFound BasicError

func (*OAuthAuthorizationsListGrantsNotFound) oAuthAuthorizationsListGrantsRes() {}

// OAuthAuthorizationsListGrantsOKHeaders wraps []ApplicationGrant with response headers.
type OAuthAuthorizationsListGrantsOKHeaders struct {
	Link     OptString
	Response []ApplicationGrant
}

// GetLink returns the value of Link.
func (s *OAuthAuthorizationsListGrantsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OAuthAuthorizationsListGrantsOKHeaders) GetResponse() []ApplicationGrant {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OAuthAuthorizationsListGrantsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OAuthAuthorizationsListGrantsOKHeaders) SetResponse(val []ApplicationGrant) {
	s.Response = val
}

func (*OAuthAuthorizationsListGrantsOKHeaders) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsListGrantsUnauthorized BasicError

func (*OAuthAuthorizationsListGrantsUnauthorized) oAuthAuthorizationsListGrantsRes() {}

type OAuthAuthorizationsUpdateAuthorizationReq struct {
	// A list of scopes that this authorization is in.
	Scopes OptNilStringArray `json:"scopes"`
	// A list of scopes to add to this authorization.
	AddScopes []string `json:"add_scopes"`
	// A list of scopes to remove from this authorization.
	RemoveScopes []string `json:"remove_scopes"`
	// A note to remind you what the OAuth token is for.
	Note OptString `json:"note"`
	// A URL to remind you what app the OAuth token is for.
	NoteURL OptString `json:"note_url"`
	// A unique string to distinguish an authorization from others created for the same client ID and
	// user.
	Fingerprint OptString `json:"fingerprint"`
}

// GetScopes returns the value of Scopes.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) GetScopes() OptNilStringArray {
	return s.Scopes
}

// GetAddScopes returns the value of AddScopes.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) GetAddScopes() []string {
	return s.AddScopes
}

// GetRemoveScopes returns the value of RemoveScopes.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) GetRemoveScopes() []string {
	return s.RemoveScopes
}

// GetNote returns the value of Note.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) GetNote() OptString {
	return s.Note
}

// GetNoteURL returns the value of NoteURL.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) GetNoteURL() OptString {
	return s.NoteURL
}

// GetFingerprint returns the value of Fingerprint.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) GetFingerprint() OptString {
	return s.Fingerprint
}

// SetScopes sets the value of Scopes.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetScopes(val OptNilStringArray) {
	s.Scopes = val
}

// SetAddScopes sets the value of AddScopes.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetAddScopes(val []string) {
	s.AddScopes = val
}

// SetRemoveScopes sets the value of RemoveScopes.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetRemoveScopes(val []string) {
	s.RemoveScopes = val
}

// SetNote sets the value of Note.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetNote(val OptString) {
	s.Note = val
}

// SetNoteURL sets the value of NoteURL.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetNoteURL(val OptString) {
	s.NoteURL = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *OAuthAuthorizationsUpdateAuthorizationReq) SetFingerprint(val OptString) {
	s.Fingerprint = val
}

// NewOptAPIOverviewSSHKeyFingerprints returns new OptAPIOverviewSSHKeyFingerprints with value set to v.
func NewOptAPIOverviewSSHKeyFingerprints(v APIOverviewSSHKeyFingerprints) OptAPIOverviewSSHKeyFingerprints {
	return OptAPIOverviewSSHKeyFingerprints{
		Value: v,
		Set:   true,
	}
}

// OptAPIOverviewSSHKeyFingerprints is optional APIOverviewSSHKeyFingerprints.
type OptAPIOverviewSSHKeyFingerprints struct {
	Value APIOverviewSSHKeyFingerprints
	Set   bool
}

// IsSet returns true if OptAPIOverviewSSHKeyFingerprints was set.
func (o OptAPIOverviewSSHKeyFingerprints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPIOverviewSSHKeyFingerprints) Reset() {
	var v APIOverviewSSHKeyFingerprints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPIOverviewSSHKeyFingerprints) SetTo(v APIOverviewSSHKeyFingerprints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPIOverviewSSHKeyFingerprints) Get() (v APIOverviewSSHKeyFingerprints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPIOverviewSSHKeyFingerprints) Or(d APIOverviewSSHKeyFingerprints) APIOverviewSSHKeyFingerprints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility returns new OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility with value set to v.
func NewOptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility(v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility {
	return OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility is optional ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility.
type OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility struct {
	Value ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility
	Set   bool
}

// IsSet returns true if OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility was set.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Reset() {
	var v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) SetTo(v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Get() (v ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Or(d ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsListJobsForWorkflowRunFilter returns new OptActionsListJobsForWorkflowRunFilter with value set to v.
func NewOptActionsListJobsForWorkflowRunFilter(v ActionsListJobsForWorkflowRunFilter) OptActionsListJobsForWorkflowRunFilter {
	return OptActionsListJobsForWorkflowRunFilter{
		Value: v,
		Set:   true,
	}
}

// OptActionsListJobsForWorkflowRunFilter is optional ActionsListJobsForWorkflowRunFilter.
type OptActionsListJobsForWorkflowRunFilter struct {
	Value ActionsListJobsForWorkflowRunFilter
	Set   bool
}

// IsSet returns true if OptActionsListJobsForWorkflowRunFilter was set.
func (o OptActionsListJobsForWorkflowRunFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsListJobsForWorkflowRunFilter) Reset() {
	var v ActionsListJobsForWorkflowRunFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsListJobsForWorkflowRunFilter) SetTo(v ActionsListJobsForWorkflowRunFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsListJobsForWorkflowRunFilter) Get() (v ActionsListJobsForWorkflowRunFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsListJobsForWorkflowRunFilter) Or(d ActionsListJobsForWorkflowRunFilter) ActionsListJobsForWorkflowRunFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsListWorkflowRunsForRepoStatus returns new OptActionsListWorkflowRunsForRepoStatus with value set to v.
func NewOptActionsListWorkflowRunsForRepoStatus(v ActionsListWorkflowRunsForRepoStatus) OptActionsListWorkflowRunsForRepoStatus {
	return OptActionsListWorkflowRunsForRepoStatus{
		Value: v,
		Set:   true,
	}
}

// OptActionsListWorkflowRunsForRepoStatus is optional ActionsListWorkflowRunsForRepoStatus.
type OptActionsListWorkflowRunsForRepoStatus struct {
	Value ActionsListWorkflowRunsForRepoStatus
	Set   bool
}

// IsSet returns true if OptActionsListWorkflowRunsForRepoStatus was set.
func (o OptActionsListWorkflowRunsForRepoStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsListWorkflowRunsForRepoStatus) Reset() {
	var v ActionsListWorkflowRunsForRepoStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsListWorkflowRunsForRepoStatus) SetTo(v ActionsListWorkflowRunsForRepoStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsListWorkflowRunsForRepoStatus) Get() (v ActionsListWorkflowRunsForRepoStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsListWorkflowRunsForRepoStatus) Or(d ActionsListWorkflowRunsForRepoStatus) ActionsListWorkflowRunsForRepoStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility returns new OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility with value set to v.
func NewOptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility(v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility {
	return OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility is optional ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility.
type OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility struct {
	Value ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility
	Set   bool
}

// IsSet returns true if OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility was set.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Reset() {
	var v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) SetTo(v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Get() (v ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Or(d ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityListReposStarredByAuthenticatedUserDirection returns new OptActivityListReposStarredByAuthenticatedUserDirection with value set to v.
func NewOptActivityListReposStarredByAuthenticatedUserDirection(v ActivityListReposStarredByAuthenticatedUserDirection) OptActivityListReposStarredByAuthenticatedUserDirection {
	return OptActivityListReposStarredByAuthenticatedUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptActivityListReposStarredByAuthenticatedUserDirection is optional ActivityListReposStarredByAuthenticatedUserDirection.
type OptActivityListReposStarredByAuthenticatedUserDirection struct {
	Value ActivityListReposStarredByAuthenticatedUserDirection
	Set   bool
}

// IsSet returns true if OptActivityListReposStarredByAuthenticatedUserDirection was set.
func (o OptActivityListReposStarredByAuthenticatedUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityListReposStarredByAuthenticatedUserDirection) Reset() {
	var v ActivityListReposStarredByAuthenticatedUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityListReposStarredByAuthenticatedUserDirection) SetTo(v ActivityListReposStarredByAuthenticatedUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityListReposStarredByAuthenticatedUserDirection) Get() (v ActivityListReposStarredByAuthenticatedUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityListReposStarredByAuthenticatedUserDirection) Or(d ActivityListReposStarredByAuthenticatedUserDirection) ActivityListReposStarredByAuthenticatedUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityListReposStarredByAuthenticatedUserSort returns new OptActivityListReposStarredByAuthenticatedUserSort with value set to v.
func NewOptActivityListReposStarredByAuthenticatedUserSort(v ActivityListReposStarredByAuthenticatedUserSort) OptActivityListReposStarredByAuthenticatedUserSort {
	return OptActivityListReposStarredByAuthenticatedUserSort{
		Value: v,
		Set:   true,
	}
}

// OptActivityListReposStarredByAuthenticatedUserSort is optional ActivityListReposStarredByAuthenticatedUserSort.
type OptActivityListReposStarredByAuthenticatedUserSort struct {
	Value ActivityListReposStarredByAuthenticatedUserSort
	Set   bool
}

// IsSet returns true if OptActivityListReposStarredByAuthenticatedUserSort was set.
func (o OptActivityListReposStarredByAuthenticatedUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityListReposStarredByAuthenticatedUserSort) Reset() {
	var v ActivityListReposStarredByAuthenticatedUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityListReposStarredByAuthenticatedUserSort) SetTo(v ActivityListReposStarredByAuthenticatedUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityListReposStarredByAuthenticatedUserSort) Get() (v ActivityListReposStarredByAuthenticatedUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityListReposStarredByAuthenticatedUserSort) Or(d ActivityListReposStarredByAuthenticatedUserSort) ActivityListReposStarredByAuthenticatedUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityMarkNotificationsAsReadReq returns new OptActivityMarkNotificationsAsReadReq with value set to v.
func NewOptActivityMarkNotificationsAsReadReq(v ActivityMarkNotificationsAsReadReq) OptActivityMarkNotificationsAsReadReq {
	return OptActivityMarkNotificationsAsReadReq{
		Value: v,
		Set:   true,
	}
}

// OptActivityMarkNotificationsAsReadReq is optional ActivityMarkNotificationsAsReadReq.
type OptActivityMarkNotificationsAsReadReq struct {
	Value ActivityMarkNotificationsAsReadReq
	Set   bool
}

// IsSet returns true if OptActivityMarkNotificationsAsReadReq was set.
func (o OptActivityMarkNotificationsAsReadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityMarkNotificationsAsReadReq) Reset() {
	var v ActivityMarkNotificationsAsReadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityMarkNotificationsAsReadReq) SetTo(v ActivityMarkNotificationsAsReadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityMarkNotificationsAsReadReq) Get() (v ActivityMarkNotificationsAsReadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityMarkNotificationsAsReadReq) Or(d ActivityMarkNotificationsAsReadReq) ActivityMarkNotificationsAsReadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivityMarkRepoNotificationsAsReadReq returns new OptActivityMarkRepoNotificationsAsReadReq with value set to v.
func NewOptActivityMarkRepoNotificationsAsReadReq(v ActivityMarkRepoNotificationsAsReadReq) OptActivityMarkRepoNotificationsAsReadReq {
	return OptActivityMarkRepoNotificationsAsReadReq{
		Value: v,
		Set:   true,
	}
}

// OptActivityMarkRepoNotificationsAsReadReq is optional ActivityMarkRepoNotificationsAsReadReq.
type OptActivityMarkRepoNotificationsAsReadReq struct {
	Value ActivityMarkRepoNotificationsAsReadReq
	Set   bool
}

// IsSet returns true if OptActivityMarkRepoNotificationsAsReadReq was set.
func (o OptActivityMarkRepoNotificationsAsReadReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityMarkRepoNotificationsAsReadReq) Reset() {
	var v ActivityMarkRepoNotificationsAsReadReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityMarkRepoNotificationsAsReadReq) SetTo(v ActivityMarkRepoNotificationsAsReadReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityMarkRepoNotificationsAsReadReq) Get() (v ActivityMarkRepoNotificationsAsReadReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityMarkRepoNotificationsAsReadReq) Or(d ActivityMarkRepoNotificationsAsReadReq) ActivityMarkRepoNotificationsAsReadReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivitySetRepoSubscriptionReq returns new OptActivitySetRepoSubscriptionReq with value set to v.
func NewOptActivitySetRepoSubscriptionReq(v ActivitySetRepoSubscriptionReq) OptActivitySetRepoSubscriptionReq {
	return OptActivitySetRepoSubscriptionReq{
		Value: v,
		Set:   true,
	}
}

// OptActivitySetRepoSubscriptionReq is optional ActivitySetRepoSubscriptionReq.
type OptActivitySetRepoSubscriptionReq struct {
	Value ActivitySetRepoSubscriptionReq
	Set   bool
}

// IsSet returns true if OptActivitySetRepoSubscriptionReq was set.
func (o OptActivitySetRepoSubscriptionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivitySetRepoSubscriptionReq) Reset() {
	var v ActivitySetRepoSubscriptionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivitySetRepoSubscriptionReq) SetTo(v ActivitySetRepoSubscriptionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivitySetRepoSubscriptionReq) Get() (v ActivitySetRepoSubscriptionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivitySetRepoSubscriptionReq) Or(d ActivitySetRepoSubscriptionReq) ActivitySetRepoSubscriptionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActivitySetThreadSubscriptionReq returns new OptActivitySetThreadSubscriptionReq with value set to v.
func NewOptActivitySetThreadSubscriptionReq(v ActivitySetThreadSubscriptionReq) OptActivitySetThreadSubscriptionReq {
	return OptActivitySetThreadSubscriptionReq{
		Value: v,
		Set:   true,
	}
}

// OptActivitySetThreadSubscriptionReq is optional ActivitySetThreadSubscriptionReq.
type OptActivitySetThreadSubscriptionReq struct {
	Value ActivitySetThreadSubscriptionReq
	Set   bool
}

// IsSet returns true if OptActivitySetThreadSubscriptionReq was set.
func (o OptActivitySetThreadSubscriptionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivitySetThreadSubscriptionReq) Reset() {
	var v ActivitySetThreadSubscriptionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivitySetThreadSubscriptionReq) SetTo(v ActivitySetThreadSubscriptionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivitySetThreadSubscriptionReq) Get() (v ActivitySetThreadSubscriptionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivitySetThreadSubscriptionReq) Or(d ActivitySetThreadSubscriptionReq) ActivitySetThreadSubscriptionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptActor returns new OptActor with value set to v.
func NewOptActor(v Actor) OptActor {
	return OptActor{
		Value: v,
		Set:   true,
	}
}

// OptActor is optional Actor.
type OptActor struct {
	Value Actor
	Set   bool
}

// IsSet returns true if OptActor was set.
func (o OptActor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActor) Reset() {
	var v Actor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActor) SetTo(v Actor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActor) Get() (v Actor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActor) Or(d Actor) Actor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertCreatedAt returns new OptAlertCreatedAt with value set to v.
func NewOptAlertCreatedAt(v AlertCreatedAt) OptAlertCreatedAt {
	return OptAlertCreatedAt{
		Value: v,
		Set:   true,
	}
}

// OptAlertCreatedAt is optional AlertCreatedAt.
type OptAlertCreatedAt struct {
	Value AlertCreatedAt
	Set   bool
}

// IsSet returns true if OptAlertCreatedAt was set.
func (o OptAlertCreatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertCreatedAt) Reset() {
	var v AlertCreatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertCreatedAt) SetTo(v AlertCreatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertCreatedAt) Get() (v AlertCreatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertCreatedAt) Or(d AlertCreatedAt) AlertCreatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertHTMLURL returns new OptAlertHTMLURL with value set to v.
func NewOptAlertHTMLURL(v AlertHTMLURL) OptAlertHTMLURL {
	return OptAlertHTMLURL{
		Value: v,
		Set:   true,
	}
}

// OptAlertHTMLURL is optional AlertHTMLURL.
type OptAlertHTMLURL struct {
	Value AlertHTMLURL
	Set   bool
}

// IsSet returns true if OptAlertHTMLURL was set.
func (o OptAlertHTMLURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertHTMLURL) Reset() {
	var v AlertHTMLURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertHTMLURL) SetTo(v AlertHTMLURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertHTMLURL) Get() (v AlertHTMLURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertHTMLURL) Or(d AlertHTMLURL) AlertHTMLURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertNumber returns new OptAlertNumber with value set to v.
func NewOptAlertNumber(v AlertNumber) OptAlertNumber {
	return OptAlertNumber{
		Value: v,
		Set:   true,
	}
}

// OptAlertNumber is optional AlertNumber.
type OptAlertNumber struct {
	Value AlertNumber
	Set   bool
}

// IsSet returns true if OptAlertNumber was set.
func (o OptAlertNumber) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertNumber) Reset() {
	var v AlertNumber
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertNumber) SetTo(v AlertNumber) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertNumber) Get() (v AlertNumber, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertNumber) Or(d AlertNumber) AlertNumber {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAlertURL returns new OptAlertURL with value set to v.
func NewOptAlertURL(v AlertURL) OptAlertURL {
	return OptAlertURL{
		Value: v,
		Set:   true,
	}
}

// OptAlertURL is optional AlertURL.
type OptAlertURL struct {
	Value AlertURL
	Set   bool
}

// IsSet returns true if OptAlertURL was set.
func (o OptAlertURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAlertURL) Reset() {
	var v AlertURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAlertURL) SetTo(v AlertURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAlertURL) Get() (v AlertURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAlertURL) Or(d AlertURL) AlertURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAllowedActions returns new OptAllowedActions with value set to v.
func NewOptAllowedActions(v AllowedActions) OptAllowedActions {
	return OptAllowedActions{
		Value: v,
		Set:   true,
	}
}

// OptAllowedActions is optional AllowedActions.
type OptAllowedActions struct {
	Value AllowedActions
	Set   bool
}

// IsSet returns true if OptAllowedActions was set.
func (o OptAllowedActions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAllowedActions) Reset() {
	var v AllowedActions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAllowedActions) SetTo(v AllowedActions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAllowedActions) Get() (v AllowedActions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAllowedActions) Or(d AllowedActions) AllowedActions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissions returns new OptAppPermissions with value set to v.
func NewOptAppPermissions(v AppPermissions) OptAppPermissions {
	return OptAppPermissions{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissions is optional AppPermissions.
type OptAppPermissions struct {
	Value AppPermissions
	Set   bool
}

// IsSet returns true if OptAppPermissions was set.
func (o OptAppPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissions) Reset() {
	var v AppPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissions) SetTo(v AppPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissions) Get() (v AppPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissions) Or(d AppPermissions) AppPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsActions returns new OptAppPermissionsActions with value set to v.
func NewOptAppPermissionsActions(v AppPermissionsActions) OptAppPermissionsActions {
	return OptAppPermissionsActions{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsActions is optional AppPermissionsActions.
type OptAppPermissionsActions struct {
	Value AppPermissionsActions
	Set   bool
}

// IsSet returns true if OptAppPermissionsActions was set.
func (o OptAppPermissionsActions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsActions) Reset() {
	var v AppPermissionsActions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsActions) SetTo(v AppPermissionsActions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsActions) Get() (v AppPermissionsActions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsActions) Or(d AppPermissionsActions) AppPermissionsActions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsAdministration returns new OptAppPermissionsAdministration with value set to v.
func NewOptAppPermissionsAdministration(v AppPermissionsAdministration) OptAppPermissionsAdministration {
	return OptAppPermissionsAdministration{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsAdministration is optional AppPermissionsAdministration.
type OptAppPermissionsAdministration struct {
	Value AppPermissionsAdministration
	Set   bool
}

// IsSet returns true if OptAppPermissionsAdministration was set.
func (o OptAppPermissionsAdministration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsAdministration) Reset() {
	var v AppPermissionsAdministration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsAdministration) SetTo(v AppPermissionsAdministration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsAdministration) Get() (v AppPermissionsAdministration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsAdministration) Or(d AppPermissionsAdministration) AppPermissionsAdministration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsChecks returns new OptAppPermissionsChecks with value set to v.
func NewOptAppPermissionsChecks(v AppPermissionsChecks) OptAppPermissionsChecks {
	return OptAppPermissionsChecks{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsChecks is optional AppPermissionsChecks.
type OptAppPermissionsChecks struct {
	Value AppPermissionsChecks
	Set   bool
}

// IsSet returns true if OptAppPermissionsChecks was set.
func (o OptAppPermissionsChecks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsChecks) Reset() {
	var v AppPermissionsChecks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsChecks) SetTo(v AppPermissionsChecks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsChecks) Get() (v AppPermissionsChecks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsChecks) Or(d AppPermissionsChecks) AppPermissionsChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsContentReferences returns new OptAppPermissionsContentReferences with value set to v.
func NewOptAppPermissionsContentReferences(v AppPermissionsContentReferences) OptAppPermissionsContentReferences {
	return OptAppPermissionsContentReferences{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsContentReferences is optional AppPermissionsContentReferences.
type OptAppPermissionsContentReferences struct {
	Value AppPermissionsContentReferences
	Set   bool
}

// IsSet returns true if OptAppPermissionsContentReferences was set.
func (o OptAppPermissionsContentReferences) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsContentReferences) Reset() {
	var v AppPermissionsContentReferences
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsContentReferences) SetTo(v AppPermissionsContentReferences) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsContentReferences) Get() (v AppPermissionsContentReferences, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsContentReferences) Or(d AppPermissionsContentReferences) AppPermissionsContentReferences {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsContents returns new OptAppPermissionsContents with value set to v.
func NewOptAppPermissionsContents(v AppPermissionsContents) OptAppPermissionsContents {
	return OptAppPermissionsContents{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsContents is optional AppPermissionsContents.
type OptAppPermissionsContents struct {
	Value AppPermissionsContents
	Set   bool
}

// IsSet returns true if OptAppPermissionsContents was set.
func (o OptAppPermissionsContents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsContents) Reset() {
	var v AppPermissionsContents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsContents) SetTo(v AppPermissionsContents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsContents) Get() (v AppPermissionsContents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsContents) Or(d AppPermissionsContents) AppPermissionsContents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsDeployments returns new OptAppPermissionsDeployments with value set to v.
func NewOptAppPermissionsDeployments(v AppPermissionsDeployments) OptAppPermissionsDeployments {
	return OptAppPermissionsDeployments{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsDeployments is optional AppPermissionsDeployments.
type OptAppPermissionsDeployments struct {
	Value AppPermissionsDeployments
	Set   bool
}

// IsSet returns true if OptAppPermissionsDeployments was set.
func (o OptAppPermissionsDeployments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsDeployments) Reset() {
	var v AppPermissionsDeployments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsDeployments) SetTo(v AppPermissionsDeployments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsDeployments) Get() (v AppPermissionsDeployments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsDeployments) Or(d AppPermissionsDeployments) AppPermissionsDeployments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsEnvironments returns new OptAppPermissionsEnvironments with value set to v.
func NewOptAppPermissionsEnvironments(v AppPermissionsEnvironments) OptAppPermissionsEnvironments {
	return OptAppPermissionsEnvironments{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsEnvironments is optional AppPermissionsEnvironments.
type OptAppPermissionsEnvironments struct {
	Value AppPermissionsEnvironments
	Set   bool
}

// IsSet returns true if OptAppPermissionsEnvironments was set.
func (o OptAppPermissionsEnvironments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsEnvironments) Reset() {
	var v AppPermissionsEnvironments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsEnvironments) SetTo(v AppPermissionsEnvironments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsEnvironments) Get() (v AppPermissionsEnvironments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsEnvironments) Or(d AppPermissionsEnvironments) AppPermissionsEnvironments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsIssues returns new OptAppPermissionsIssues with value set to v.
func NewOptAppPermissionsIssues(v AppPermissionsIssues) OptAppPermissionsIssues {
	return OptAppPermissionsIssues{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsIssues is optional AppPermissionsIssues.
type OptAppPermissionsIssues struct {
	Value AppPermissionsIssues
	Set   bool
}

// IsSet returns true if OptAppPermissionsIssues was set.
func (o OptAppPermissionsIssues) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsIssues) Reset() {
	var v AppPermissionsIssues
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsIssues) SetTo(v AppPermissionsIssues) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsIssues) Get() (v AppPermissionsIssues, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsIssues) Or(d AppPermissionsIssues) AppPermissionsIssues {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsMembers returns new OptAppPermissionsMembers with value set to v.
func NewOptAppPermissionsMembers(v AppPermissionsMembers) OptAppPermissionsMembers {
	return OptAppPermissionsMembers{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsMembers is optional AppPermissionsMembers.
type OptAppPermissionsMembers struct {
	Value AppPermissionsMembers
	Set   bool
}

// IsSet returns true if OptAppPermissionsMembers was set.
func (o OptAppPermissionsMembers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsMembers) Reset() {
	var v AppPermissionsMembers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsMembers) SetTo(v AppPermissionsMembers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsMembers) Get() (v AppPermissionsMembers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsMembers) Or(d AppPermissionsMembers) AppPermissionsMembers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsMetadata returns new OptAppPermissionsMetadata with value set to v.
func NewOptAppPermissionsMetadata(v AppPermissionsMetadata) OptAppPermissionsMetadata {
	return OptAppPermissionsMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsMetadata is optional AppPermissionsMetadata.
type OptAppPermissionsMetadata struct {
	Value AppPermissionsMetadata
	Set   bool
}

// IsSet returns true if OptAppPermissionsMetadata was set.
func (o OptAppPermissionsMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsMetadata) Reset() {
	var v AppPermissionsMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsMetadata) SetTo(v AppPermissionsMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsMetadata) Get() (v AppPermissionsMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsMetadata) Or(d AppPermissionsMetadata) AppPermissionsMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationAdministration returns new OptAppPermissionsOrganizationAdministration with value set to v.
func NewOptAppPermissionsOrganizationAdministration(v AppPermissionsOrganizationAdministration) OptAppPermissionsOrganizationAdministration {
	return OptAppPermissionsOrganizationAdministration{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationAdministration is optional AppPermissionsOrganizationAdministration.
type OptAppPermissionsOrganizationAdministration struct {
	Value AppPermissionsOrganizationAdministration
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationAdministration was set.
func (o OptAppPermissionsOrganizationAdministration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationAdministration) Reset() {
	var v AppPermissionsOrganizationAdministration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationAdministration) SetTo(v AppPermissionsOrganizationAdministration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationAdministration) Get() (v AppPermissionsOrganizationAdministration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationAdministration) Or(d AppPermissionsOrganizationAdministration) AppPermissionsOrganizationAdministration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationHooks returns new OptAppPermissionsOrganizationHooks with value set to v.
func NewOptAppPermissionsOrganizationHooks(v AppPermissionsOrganizationHooks) OptAppPermissionsOrganizationHooks {
	return OptAppPermissionsOrganizationHooks{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationHooks is optional AppPermissionsOrganizationHooks.
type OptAppPermissionsOrganizationHooks struct {
	Value AppPermissionsOrganizationHooks
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationHooks was set.
func (o OptAppPermissionsOrganizationHooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationHooks) Reset() {
	var v AppPermissionsOrganizationHooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationHooks) SetTo(v AppPermissionsOrganizationHooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationHooks) Get() (v AppPermissionsOrganizationHooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationHooks) Or(d AppPermissionsOrganizationHooks) AppPermissionsOrganizationHooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationPackages returns new OptAppPermissionsOrganizationPackages with value set to v.
func NewOptAppPermissionsOrganizationPackages(v AppPermissionsOrganizationPackages) OptAppPermissionsOrganizationPackages {
	return OptAppPermissionsOrganizationPackages{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationPackages is optional AppPermissionsOrganizationPackages.
type OptAppPermissionsOrganizationPackages struct {
	Value AppPermissionsOrganizationPackages
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationPackages was set.
func (o OptAppPermissionsOrganizationPackages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationPackages) Reset() {
	var v AppPermissionsOrganizationPackages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationPackages) SetTo(v AppPermissionsOrganizationPackages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationPackages) Get() (v AppPermissionsOrganizationPackages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationPackages) Or(d AppPermissionsOrganizationPackages) AppPermissionsOrganizationPackages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationPlan returns new OptAppPermissionsOrganizationPlan with value set to v.
func NewOptAppPermissionsOrganizationPlan(v AppPermissionsOrganizationPlan) OptAppPermissionsOrganizationPlan {
	return OptAppPermissionsOrganizationPlan{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationPlan is optional AppPermissionsOrganizationPlan.
type OptAppPermissionsOrganizationPlan struct {
	Value AppPermissionsOrganizationPlan
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationPlan was set.
func (o OptAppPermissionsOrganizationPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationPlan) Reset() {
	var v AppPermissionsOrganizationPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationPlan) SetTo(v AppPermissionsOrganizationPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationPlan) Get() (v AppPermissionsOrganizationPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationPlan) Or(d AppPermissionsOrganizationPlan) AppPermissionsOrganizationPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationProjects returns new OptAppPermissionsOrganizationProjects with value set to v.
func NewOptAppPermissionsOrganizationProjects(v AppPermissionsOrganizationProjects) OptAppPermissionsOrganizationProjects {
	return OptAppPermissionsOrganizationProjects{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationProjects is optional AppPermissionsOrganizationProjects.
type OptAppPermissionsOrganizationProjects struct {
	Value AppPermissionsOrganizationProjects
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationProjects was set.
func (o OptAppPermissionsOrganizationProjects) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationProjects) Reset() {
	var v AppPermissionsOrganizationProjects
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationProjects) SetTo(v AppPermissionsOrganizationProjects) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationProjects) Get() (v AppPermissionsOrganizationProjects, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationProjects) Or(d AppPermissionsOrganizationProjects) AppPermissionsOrganizationProjects {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationSecrets returns new OptAppPermissionsOrganizationSecrets with value set to v.
func NewOptAppPermissionsOrganizationSecrets(v AppPermissionsOrganizationSecrets) OptAppPermissionsOrganizationSecrets {
	return OptAppPermissionsOrganizationSecrets{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationSecrets is optional AppPermissionsOrganizationSecrets.
type OptAppPermissionsOrganizationSecrets struct {
	Value AppPermissionsOrganizationSecrets
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationSecrets was set.
func (o OptAppPermissionsOrganizationSecrets) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationSecrets) Reset() {
	var v AppPermissionsOrganizationSecrets
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationSecrets) SetTo(v AppPermissionsOrganizationSecrets) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationSecrets) Get() (v AppPermissionsOrganizationSecrets, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationSecrets) Or(d AppPermissionsOrganizationSecrets) AppPermissionsOrganizationSecrets {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationSelfHostedRunners returns new OptAppPermissionsOrganizationSelfHostedRunners with value set to v.
func NewOptAppPermissionsOrganizationSelfHostedRunners(v AppPermissionsOrganizationSelfHostedRunners) OptAppPermissionsOrganizationSelfHostedRunners {
	return OptAppPermissionsOrganizationSelfHostedRunners{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationSelfHostedRunners is optional AppPermissionsOrganizationSelfHostedRunners.
type OptAppPermissionsOrganizationSelfHostedRunners struct {
	Value AppPermissionsOrganizationSelfHostedRunners
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationSelfHostedRunners was set.
func (o OptAppPermissionsOrganizationSelfHostedRunners) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationSelfHostedRunners) Reset() {
	var v AppPermissionsOrganizationSelfHostedRunners
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationSelfHostedRunners) SetTo(v AppPermissionsOrganizationSelfHostedRunners) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationSelfHostedRunners) Get() (v AppPermissionsOrganizationSelfHostedRunners, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationSelfHostedRunners) Or(d AppPermissionsOrganizationSelfHostedRunners) AppPermissionsOrganizationSelfHostedRunners {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsOrganizationUserBlocking returns new OptAppPermissionsOrganizationUserBlocking with value set to v.
func NewOptAppPermissionsOrganizationUserBlocking(v AppPermissionsOrganizationUserBlocking) OptAppPermissionsOrganizationUserBlocking {
	return OptAppPermissionsOrganizationUserBlocking{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsOrganizationUserBlocking is optional AppPermissionsOrganizationUserBlocking.
type OptAppPermissionsOrganizationUserBlocking struct {
	Value AppPermissionsOrganizationUserBlocking
	Set   bool
}

// IsSet returns true if OptAppPermissionsOrganizationUserBlocking was set.
func (o OptAppPermissionsOrganizationUserBlocking) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsOrganizationUserBlocking) Reset() {
	var v AppPermissionsOrganizationUserBlocking
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsOrganizationUserBlocking) SetTo(v AppPermissionsOrganizationUserBlocking) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsOrganizationUserBlocking) Get() (v AppPermissionsOrganizationUserBlocking, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsOrganizationUserBlocking) Or(d AppPermissionsOrganizationUserBlocking) AppPermissionsOrganizationUserBlocking {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsPackages returns new OptAppPermissionsPackages with value set to v.
func NewOptAppPermissionsPackages(v AppPermissionsPackages) OptAppPermissionsPackages {
	return OptAppPermissionsPackages{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsPackages is optional AppPermissionsPackages.
type OptAppPermissionsPackages struct {
	Value AppPermissionsPackages
	Set   bool
}

// IsSet returns true if OptAppPermissionsPackages was set.
func (o OptAppPermissionsPackages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsPackages) Reset() {
	var v AppPermissionsPackages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsPackages) SetTo(v AppPermissionsPackages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsPackages) Get() (v AppPermissionsPackages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsPackages) Or(d AppPermissionsPackages) AppPermissionsPackages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsPages returns new OptAppPermissionsPages with value set to v.
func NewOptAppPermissionsPages(v AppPermissionsPages) OptAppPermissionsPages {
	return OptAppPermissionsPages{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsPages is optional AppPermissionsPages.
type OptAppPermissionsPages struct {
	Value AppPermissionsPages
	Set   bool
}

// IsSet returns true if OptAppPermissionsPages was set.
func (o OptAppPermissionsPages) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsPages) Reset() {
	var v AppPermissionsPages
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsPages) SetTo(v AppPermissionsPages) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsPages) Get() (v AppPermissionsPages, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsPages) Or(d AppPermissionsPages) AppPermissionsPages {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsPullRequests returns new OptAppPermissionsPullRequests with value set to v.
func NewOptAppPermissionsPullRequests(v AppPermissionsPullRequests) OptAppPermissionsPullRequests {
	return OptAppPermissionsPullRequests{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsPullRequests is optional AppPermissionsPullRequests.
type OptAppPermissionsPullRequests struct {
	Value AppPermissionsPullRequests
	Set   bool
}

// IsSet returns true if OptAppPermissionsPullRequests was set.
func (o OptAppPermissionsPullRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsPullRequests) Reset() {
	var v AppPermissionsPullRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsPullRequests) SetTo(v AppPermissionsPullRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsPullRequests) Get() (v AppPermissionsPullRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsPullRequests) Or(d AppPermissionsPullRequests) AppPermissionsPullRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsRepositoryHooks returns new OptAppPermissionsRepositoryHooks with value set to v.
func NewOptAppPermissionsRepositoryHooks(v AppPermissionsRepositoryHooks) OptAppPermissionsRepositoryHooks {
	return OptAppPermissionsRepositoryHooks{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsRepositoryHooks is optional AppPermissionsRepositoryHooks.
type OptAppPermissionsRepositoryHooks struct {
	Value AppPermissionsRepositoryHooks
	Set   bool
}

// IsSet returns true if OptAppPermissionsRepositoryHooks was set.
func (o OptAppPermissionsRepositoryHooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsRepositoryHooks) Reset() {
	var v AppPermissionsRepositoryHooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsRepositoryHooks) SetTo(v AppPermissionsRepositoryHooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsRepositoryHooks) Get() (v AppPermissionsRepositoryHooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsRepositoryHooks) Or(d AppPermissionsRepositoryHooks) AppPermissionsRepositoryHooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsRepositoryProjects returns new OptAppPermissionsRepositoryProjects with value set to v.
func NewOptAppPermissionsRepositoryProjects(v AppPermissionsRepositoryProjects) OptAppPermissionsRepositoryProjects {
	return OptAppPermissionsRepositoryProjects{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsRepositoryProjects is optional AppPermissionsRepositoryProjects.
type OptAppPermissionsRepositoryProjects struct {
	Value AppPermissionsRepositoryProjects
	Set   bool
}

// IsSet returns true if OptAppPermissionsRepositoryProjects was set.
func (o OptAppPermissionsRepositoryProjects) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsRepositoryProjects) Reset() {
	var v AppPermissionsRepositoryProjects
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsRepositoryProjects) SetTo(v AppPermissionsRepositoryProjects) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsRepositoryProjects) Get() (v AppPermissionsRepositoryProjects, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsRepositoryProjects) Or(d AppPermissionsRepositoryProjects) AppPermissionsRepositoryProjects {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSecretScanningAlerts returns new OptAppPermissionsSecretScanningAlerts with value set to v.
func NewOptAppPermissionsSecretScanningAlerts(v AppPermissionsSecretScanningAlerts) OptAppPermissionsSecretScanningAlerts {
	return OptAppPermissionsSecretScanningAlerts{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSecretScanningAlerts is optional AppPermissionsSecretScanningAlerts.
type OptAppPermissionsSecretScanningAlerts struct {
	Value AppPermissionsSecretScanningAlerts
	Set   bool
}

// IsSet returns true if OptAppPermissionsSecretScanningAlerts was set.
func (o OptAppPermissionsSecretScanningAlerts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSecretScanningAlerts) Reset() {
	var v AppPermissionsSecretScanningAlerts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSecretScanningAlerts) SetTo(v AppPermissionsSecretScanningAlerts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSecretScanningAlerts) Get() (v AppPermissionsSecretScanningAlerts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSecretScanningAlerts) Or(d AppPermissionsSecretScanningAlerts) AppPermissionsSecretScanningAlerts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSecrets returns new OptAppPermissionsSecrets with value set to v.
func NewOptAppPermissionsSecrets(v AppPermissionsSecrets) OptAppPermissionsSecrets {
	return OptAppPermissionsSecrets{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSecrets is optional AppPermissionsSecrets.
type OptAppPermissionsSecrets struct {
	Value AppPermissionsSecrets
	Set   bool
}

// IsSet returns true if OptAppPermissionsSecrets was set.
func (o OptAppPermissionsSecrets) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSecrets) Reset() {
	var v AppPermissionsSecrets
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSecrets) SetTo(v AppPermissionsSecrets) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSecrets) Get() (v AppPermissionsSecrets, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSecrets) Or(d AppPermissionsSecrets) AppPermissionsSecrets {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSecurityEvents returns new OptAppPermissionsSecurityEvents with value set to v.
func NewOptAppPermissionsSecurityEvents(v AppPermissionsSecurityEvents) OptAppPermissionsSecurityEvents {
	return OptAppPermissionsSecurityEvents{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSecurityEvents is optional AppPermissionsSecurityEvents.
type OptAppPermissionsSecurityEvents struct {
	Value AppPermissionsSecurityEvents
	Set   bool
}

// IsSet returns true if OptAppPermissionsSecurityEvents was set.
func (o OptAppPermissionsSecurityEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSecurityEvents) Reset() {
	var v AppPermissionsSecurityEvents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSecurityEvents) SetTo(v AppPermissionsSecurityEvents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSecurityEvents) Get() (v AppPermissionsSecurityEvents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSecurityEvents) Or(d AppPermissionsSecurityEvents) AppPermissionsSecurityEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsSingleFile returns new OptAppPermissionsSingleFile with value set to v.
func NewOptAppPermissionsSingleFile(v AppPermissionsSingleFile) OptAppPermissionsSingleFile {
	return OptAppPermissionsSingleFile{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsSingleFile is optional AppPermissionsSingleFile.
type OptAppPermissionsSingleFile struct {
	Value AppPermissionsSingleFile
	Set   bool
}

// IsSet returns true if OptAppPermissionsSingleFile was set.
func (o OptAppPermissionsSingleFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsSingleFile) Reset() {
	var v AppPermissionsSingleFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsSingleFile) SetTo(v AppPermissionsSingleFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsSingleFile) Get() (v AppPermissionsSingleFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsSingleFile) Or(d AppPermissionsSingleFile) AppPermissionsSingleFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsStatuses returns new OptAppPermissionsStatuses with value set to v.
func NewOptAppPermissionsStatuses(v AppPermissionsStatuses) OptAppPermissionsStatuses {
	return OptAppPermissionsStatuses{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsStatuses is optional AppPermissionsStatuses.
type OptAppPermissionsStatuses struct {
	Value AppPermissionsStatuses
	Set   bool
}

// IsSet returns true if OptAppPermissionsStatuses was set.
func (o OptAppPermissionsStatuses) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsStatuses) Reset() {
	var v AppPermissionsStatuses
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsStatuses) SetTo(v AppPermissionsStatuses) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsStatuses) Get() (v AppPermissionsStatuses, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsStatuses) Or(d AppPermissionsStatuses) AppPermissionsStatuses {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsTeamDiscussions returns new OptAppPermissionsTeamDiscussions with value set to v.
func NewOptAppPermissionsTeamDiscussions(v AppPermissionsTeamDiscussions) OptAppPermissionsTeamDiscussions {
	return OptAppPermissionsTeamDiscussions{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsTeamDiscussions is optional AppPermissionsTeamDiscussions.
type OptAppPermissionsTeamDiscussions struct {
	Value AppPermissionsTeamDiscussions
	Set   bool
}

// IsSet returns true if OptAppPermissionsTeamDiscussions was set.
func (o OptAppPermissionsTeamDiscussions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsTeamDiscussions) Reset() {
	var v AppPermissionsTeamDiscussions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsTeamDiscussions) SetTo(v AppPermissionsTeamDiscussions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsTeamDiscussions) Get() (v AppPermissionsTeamDiscussions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsTeamDiscussions) Or(d AppPermissionsTeamDiscussions) AppPermissionsTeamDiscussions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsVulnerabilityAlerts returns new OptAppPermissionsVulnerabilityAlerts with value set to v.
func NewOptAppPermissionsVulnerabilityAlerts(v AppPermissionsVulnerabilityAlerts) OptAppPermissionsVulnerabilityAlerts {
	return OptAppPermissionsVulnerabilityAlerts{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsVulnerabilityAlerts is optional AppPermissionsVulnerabilityAlerts.
type OptAppPermissionsVulnerabilityAlerts struct {
	Value AppPermissionsVulnerabilityAlerts
	Set   bool
}

// IsSet returns true if OptAppPermissionsVulnerabilityAlerts was set.
func (o OptAppPermissionsVulnerabilityAlerts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsVulnerabilityAlerts) Reset() {
	var v AppPermissionsVulnerabilityAlerts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsVulnerabilityAlerts) SetTo(v AppPermissionsVulnerabilityAlerts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsVulnerabilityAlerts) Get() (v AppPermissionsVulnerabilityAlerts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsVulnerabilityAlerts) Or(d AppPermissionsVulnerabilityAlerts) AppPermissionsVulnerabilityAlerts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppPermissionsWorkflows returns new OptAppPermissionsWorkflows with value set to v.
func NewOptAppPermissionsWorkflows(v AppPermissionsWorkflows) OptAppPermissionsWorkflows {
	return OptAppPermissionsWorkflows{
		Value: v,
		Set:   true,
	}
}

// OptAppPermissionsWorkflows is optional AppPermissionsWorkflows.
type OptAppPermissionsWorkflows struct {
	Value AppPermissionsWorkflows
	Set   bool
}

// IsSet returns true if OptAppPermissionsWorkflows was set.
func (o OptAppPermissionsWorkflows) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppPermissionsWorkflows) Reset() {
	var v AppPermissionsWorkflows
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppPermissionsWorkflows) SetTo(v AppPermissionsWorkflows) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppPermissionsWorkflows) Get() (v AppPermissionsWorkflows, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppPermissionsWorkflows) Or(d AppPermissionsWorkflows) AppPermissionsWorkflows {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsCreateInstallationAccessTokenReq returns new OptAppsCreateInstallationAccessTokenReq with value set to v.
func NewOptAppsCreateInstallationAccessTokenReq(v AppsCreateInstallationAccessTokenReq) OptAppsCreateInstallationAccessTokenReq {
	return OptAppsCreateInstallationAccessTokenReq{
		Value: v,
		Set:   true,
	}
}

// OptAppsCreateInstallationAccessTokenReq is optional AppsCreateInstallationAccessTokenReq.
type OptAppsCreateInstallationAccessTokenReq struct {
	Value AppsCreateInstallationAccessTokenReq
	Set   bool
}

// IsSet returns true if OptAppsCreateInstallationAccessTokenReq was set.
func (o OptAppsCreateInstallationAccessTokenReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsCreateInstallationAccessTokenReq) Reset() {
	var v AppsCreateInstallationAccessTokenReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsCreateInstallationAccessTokenReq) SetTo(v AppsCreateInstallationAccessTokenReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsCreateInstallationAccessTokenReq) Get() (v AppsCreateInstallationAccessTokenReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsCreateInstallationAccessTokenReq) Or(d AppsCreateInstallationAccessTokenReq) AppsCreateInstallationAccessTokenReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanDirection returns new OptAppsListAccountsForPlanDirection with value set to v.
func NewOptAppsListAccountsForPlanDirection(v AppsListAccountsForPlanDirection) OptAppsListAccountsForPlanDirection {
	return OptAppsListAccountsForPlanDirection{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanDirection is optional AppsListAccountsForPlanDirection.
type OptAppsListAccountsForPlanDirection struct {
	Value AppsListAccountsForPlanDirection
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanDirection was set.
func (o OptAppsListAccountsForPlanDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanDirection) Reset() {
	var v AppsListAccountsForPlanDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanDirection) SetTo(v AppsListAccountsForPlanDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanDirection) Get() (v AppsListAccountsForPlanDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanDirection) Or(d AppsListAccountsForPlanDirection) AppsListAccountsForPlanDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanSort returns new OptAppsListAccountsForPlanSort with value set to v.
func NewOptAppsListAccountsForPlanSort(v AppsListAccountsForPlanSort) OptAppsListAccountsForPlanSort {
	return OptAppsListAccountsForPlanSort{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanSort is optional AppsListAccountsForPlanSort.
type OptAppsListAccountsForPlanSort struct {
	Value AppsListAccountsForPlanSort
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanSort was set.
func (o OptAppsListAccountsForPlanSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanSort) Reset() {
	var v AppsListAccountsForPlanSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanSort) SetTo(v AppsListAccountsForPlanSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanSort) Get() (v AppsListAccountsForPlanSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanSort) Or(d AppsListAccountsForPlanSort) AppsListAccountsForPlanSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanStubbedDirection returns new OptAppsListAccountsForPlanStubbedDirection with value set to v.
func NewOptAppsListAccountsForPlanStubbedDirection(v AppsListAccountsForPlanStubbedDirection) OptAppsListAccountsForPlanStubbedDirection {
	return OptAppsListAccountsForPlanStubbedDirection{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanStubbedDirection is optional AppsListAccountsForPlanStubbedDirection.
type OptAppsListAccountsForPlanStubbedDirection struct {
	Value AppsListAccountsForPlanStubbedDirection
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanStubbedDirection was set.
func (o OptAppsListAccountsForPlanStubbedDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanStubbedDirection) Reset() {
	var v AppsListAccountsForPlanStubbedDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanStubbedDirection) SetTo(v AppsListAccountsForPlanStubbedDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanStubbedDirection) Get() (v AppsListAccountsForPlanStubbedDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanStubbedDirection) Or(d AppsListAccountsForPlanStubbedDirection) AppsListAccountsForPlanStubbedDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsListAccountsForPlanStubbedSort returns new OptAppsListAccountsForPlanStubbedSort with value set to v.
func NewOptAppsListAccountsForPlanStubbedSort(v AppsListAccountsForPlanStubbedSort) OptAppsListAccountsForPlanStubbedSort {
	return OptAppsListAccountsForPlanStubbedSort{
		Value: v,
		Set:   true,
	}
}

// OptAppsListAccountsForPlanStubbedSort is optional AppsListAccountsForPlanStubbedSort.
type OptAppsListAccountsForPlanStubbedSort struct {
	Value AppsListAccountsForPlanStubbedSort
	Set   bool
}

// IsSet returns true if OptAppsListAccountsForPlanStubbedSort was set.
func (o OptAppsListAccountsForPlanStubbedSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsListAccountsForPlanStubbedSort) Reset() {
	var v AppsListAccountsForPlanStubbedSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsListAccountsForPlanStubbedSort) SetTo(v AppsListAccountsForPlanStubbedSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsListAccountsForPlanStubbedSort) Get() (v AppsListAccountsForPlanStubbedSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsListAccountsForPlanStubbedSort) Or(d AppsListAccountsForPlanStubbedSort) AppsListAccountsForPlanStubbedSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAppsUpdateWebhookConfigForAppReq returns new OptAppsUpdateWebhookConfigForAppReq with value set to v.
func NewOptAppsUpdateWebhookConfigForAppReq(v AppsUpdateWebhookConfigForAppReq) OptAppsUpdateWebhookConfigForAppReq {
	return OptAppsUpdateWebhookConfigForAppReq{
		Value: v,
		Set:   true,
	}
}

// OptAppsUpdateWebhookConfigForAppReq is optional AppsUpdateWebhookConfigForAppReq.
type OptAppsUpdateWebhookConfigForAppReq struct {
	Value AppsUpdateWebhookConfigForAppReq
	Set   bool
}

// IsSet returns true if OptAppsUpdateWebhookConfigForAppReq was set.
func (o OptAppsUpdateWebhookConfigForAppReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAppsUpdateWebhookConfigForAppReq) Reset() {
	var v AppsUpdateWebhookConfigForAppReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAppsUpdateWebhookConfigForAppReq) SetTo(v AppsUpdateWebhookConfigForAppReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAppsUpdateWebhookConfigForAppReq) Get() (v AppsUpdateWebhookConfigForAppReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAppsUpdateWebhookConfigForAppReq) Or(d AppsUpdateWebhookConfigForAppReq) AppsUpdateWebhookConfigForAppReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuditLogEventActorLocation returns new OptAuditLogEventActorLocation with value set to v.
func NewOptAuditLogEventActorLocation(v AuditLogEventActorLocation) OptAuditLogEventActorLocation {
	return OptAuditLogEventActorLocation{
		Value: v,
		Set:   true,
	}
}

// OptAuditLogEventActorLocation is optional AuditLogEventActorLocation.
type OptAuditLogEventActorLocation struct {
	Value AuditLogEventActorLocation
	Set   bool
}

// IsSet returns true if OptAuditLogEventActorLocation was set.
func (o OptAuditLogEventActorLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuditLogEventActorLocation) Reset() {
	var v AuditLogEventActorLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuditLogEventActorLocation) SetTo(v AuditLogEventActorLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuditLogEventActorLocation) Get() (v AuditLogEventActorLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuditLogEventActorLocation) Or(d AuditLogEventActorLocation) AuditLogEventActorLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuditLogEventData returns new OptAuditLogEventData with value set to v.
func NewOptAuditLogEventData(v AuditLogEventData) OptAuditLogEventData {
	return OptAuditLogEventData{
		Value: v,
		Set:   true,
	}
}

// OptAuditLogEventData is optional AuditLogEventData.
type OptAuditLogEventData struct {
	Value AuditLogEventData
	Set   bool
}

// IsSet returns true if OptAuditLogEventData was set.
func (o OptAuditLogEventData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuditLogEventData) Reset() {
	var v AuditLogEventData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuditLogEventData) SetTo(v AuditLogEventData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuditLogEventData) Get() (v AuditLogEventData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuditLogEventData) Or(d AuditLogEventData) AuditLogEventData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthenticationTokenRepositorySelection returns new OptAuthenticationTokenRepositorySelection with value set to v.
func NewOptAuthenticationTokenRepositorySelection(v AuthenticationTokenRepositorySelection) OptAuthenticationTokenRepositorySelection {
	return OptAuthenticationTokenRepositorySelection{
		Value: v,
		Set:   true,
	}
}

// OptAuthenticationTokenRepositorySelection is optional AuthenticationTokenRepositorySelection.
type OptAuthenticationTokenRepositorySelection struct {
	Value AuthenticationTokenRepositorySelection
	Set   bool
}

// IsSet returns true if OptAuthenticationTokenRepositorySelection was set.
func (o OptAuthenticationTokenRepositorySelection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthenticationTokenRepositorySelection) Reset() {
	var v AuthenticationTokenRepositorySelection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthenticationTokenRepositorySelection) SetTo(v AuthenticationTokenRepositorySelection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthenticationTokenRepositorySelection) Get() (v AuthenticationTokenRepositorySelection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthenticationTokenRepositorySelection) Or(d AuthenticationTokenRepositorySelection) AuthenticationTokenRepositorySelection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthorAssociation returns new OptAuthorAssociation with value set to v.
func NewOptAuthorAssociation(v AuthorAssociation) OptAuthorAssociation {
	return OptAuthorAssociation{
		Value: v,
		Set:   true,
	}
}

// OptAuthorAssociation is optional AuthorAssociation.
type OptAuthorAssociation struct {
	Value AuthorAssociation
	Set   bool
}

// IsSet returns true if OptAuthorAssociation was set.
func (o OptAuthorAssociation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthorAssociation) Reset() {
	var v AuthorAssociation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthorAssociation) SetTo(v AuthorAssociation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthorAssociation) Get() (v AuthorAssociation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthorAssociation) Or(d AuthorAssociation) AuthorAssociation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtection returns new OptBranchProtection with value set to v.
func NewOptBranchProtection(v BranchProtection) OptBranchProtection {
	return OptBranchProtection{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtection is optional BranchProtection.
type OptBranchProtection struct {
	Value BranchProtection
	Set   bool
}

// IsSet returns true if OptBranchProtection was set.
func (o OptBranchProtection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtection) Reset() {
	var v BranchProtection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtection) SetTo(v BranchProtection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtection) Get() (v BranchProtection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtection) Or(d BranchProtection) BranchProtection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionAllowDeletions returns new OptBranchProtectionAllowDeletions with value set to v.
func NewOptBranchProtectionAllowDeletions(v BranchProtectionAllowDeletions) OptBranchProtectionAllowDeletions {
	return OptBranchProtectionAllowDeletions{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionAllowDeletions is optional BranchProtectionAllowDeletions.
type OptBranchProtectionAllowDeletions struct {
	Value BranchProtectionAllowDeletions
	Set   bool
}

// IsSet returns true if OptBranchProtectionAllowDeletions was set.
func (o OptBranchProtectionAllowDeletions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionAllowDeletions) Reset() {
	var v BranchProtectionAllowDeletions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionAllowDeletions) SetTo(v BranchProtectionAllowDeletions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionAllowDeletions) Get() (v BranchProtectionAllowDeletions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionAllowDeletions) Or(d BranchProtectionAllowDeletions) BranchProtectionAllowDeletions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionAllowForcePushes returns new OptBranchProtectionAllowForcePushes with value set to v.
func NewOptBranchProtectionAllowForcePushes(v BranchProtectionAllowForcePushes) OptBranchProtectionAllowForcePushes {
	return OptBranchProtectionAllowForcePushes{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionAllowForcePushes is optional BranchProtectionAllowForcePushes.
type OptBranchProtectionAllowForcePushes struct {
	Value BranchProtectionAllowForcePushes
	Set   bool
}

// IsSet returns true if OptBranchProtectionAllowForcePushes was set.
func (o OptBranchProtectionAllowForcePushes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionAllowForcePushes) Reset() {
	var v BranchProtectionAllowForcePushes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionAllowForcePushes) SetTo(v BranchProtectionAllowForcePushes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionAllowForcePushes) Get() (v BranchProtectionAllowForcePushes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionAllowForcePushes) Or(d BranchProtectionAllowForcePushes) BranchProtectionAllowForcePushes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredConversationResolution returns new OptBranchProtectionRequiredConversationResolution with value set to v.
func NewOptBranchProtectionRequiredConversationResolution(v BranchProtectionRequiredConversationResolution) OptBranchProtectionRequiredConversationResolution {
	return OptBranchProtectionRequiredConversationResolution{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredConversationResolution is optional BranchProtectionRequiredConversationResolution.
type OptBranchProtectionRequiredConversationResolution struct {
	Value BranchProtectionRequiredConversationResolution
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredConversationResolution was set.
func (o OptBranchProtectionRequiredConversationResolution) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredConversationResolution) Reset() {
	var v BranchProtectionRequiredConversationResolution
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredConversationResolution) SetTo(v BranchProtectionRequiredConversationResolution) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredConversationResolution) Get() (v BranchProtectionRequiredConversationResolution, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredConversationResolution) Or(d BranchProtectionRequiredConversationResolution) BranchProtectionRequiredConversationResolution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredLinearHistory returns new OptBranchProtectionRequiredLinearHistory with value set to v.
func NewOptBranchProtectionRequiredLinearHistory(v BranchProtectionRequiredLinearHistory) OptBranchProtectionRequiredLinearHistory {
	return OptBranchProtectionRequiredLinearHistory{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredLinearHistory is optional BranchProtectionRequiredLinearHistory.
type OptBranchProtectionRequiredLinearHistory struct {
	Value BranchProtectionRequiredLinearHistory
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredLinearHistory was set.
func (o OptBranchProtectionRequiredLinearHistory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredLinearHistory) Reset() {
	var v BranchProtectionRequiredLinearHistory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredLinearHistory) SetTo(v BranchProtectionRequiredLinearHistory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredLinearHistory) Get() (v BranchProtectionRequiredLinearHistory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredLinearHistory) Or(d BranchProtectionRequiredLinearHistory) BranchProtectionRequiredLinearHistory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredSignatures returns new OptBranchProtectionRequiredSignatures with value set to v.
func NewOptBranchProtectionRequiredSignatures(v BranchProtectionRequiredSignatures) OptBranchProtectionRequiredSignatures {
	return OptBranchProtectionRequiredSignatures{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredSignatures is optional BranchProtectionRequiredSignatures.
type OptBranchProtectionRequiredSignatures struct {
	Value BranchProtectionRequiredSignatures
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredSignatures was set.
func (o OptBranchProtectionRequiredSignatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredSignatures) Reset() {
	var v BranchProtectionRequiredSignatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredSignatures) SetTo(v BranchProtectionRequiredSignatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredSignatures) Get() (v BranchProtectionRequiredSignatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredSignatures) Or(d BranchProtectionRequiredSignatures) BranchProtectionRequiredSignatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchProtectionRequiredStatusChecks returns new OptBranchProtectionRequiredStatusChecks with value set to v.
func NewOptBranchProtectionRequiredStatusChecks(v BranchProtectionRequiredStatusChecks) OptBranchProtectionRequiredStatusChecks {
	return OptBranchProtectionRequiredStatusChecks{
		Value: v,
		Set:   true,
	}
}

// OptBranchProtectionRequiredStatusChecks is optional BranchProtectionRequiredStatusChecks.
type OptBranchProtectionRequiredStatusChecks struct {
	Value BranchProtectionRequiredStatusChecks
	Set   bool
}

// IsSet returns true if OptBranchProtectionRequiredStatusChecks was set.
func (o OptBranchProtectionRequiredStatusChecks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchProtectionRequiredStatusChecks) Reset() {
	var v BranchProtectionRequiredStatusChecks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchProtectionRequiredStatusChecks) SetTo(v BranchProtectionRequiredStatusChecks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchProtectionRequiredStatusChecks) Get() (v BranchProtectionRequiredStatusChecks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchProtectionRequiredStatusChecks) Or(d BranchProtectionRequiredStatusChecks) BranchProtectionRequiredStatusChecks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchRestrictionPolicy returns new OptBranchRestrictionPolicy with value set to v.
func NewOptBranchRestrictionPolicy(v BranchRestrictionPolicy) OptBranchRestrictionPolicy {
	return OptBranchRestrictionPolicy{
		Value: v,
		Set:   true,
	}
}

// OptBranchRestrictionPolicy is optional BranchRestrictionPolicy.
type OptBranchRestrictionPolicy struct {
	Value BranchRestrictionPolicy
	Set   bool
}

// IsSet returns true if OptBranchRestrictionPolicy was set.
func (o OptBranchRestrictionPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchRestrictionPolicy) Reset() {
	var v BranchRestrictionPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchRestrictionPolicy) SetTo(v BranchRestrictionPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchRestrictionPolicy) Get() (v BranchRestrictionPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchRestrictionPolicy) Or(d BranchRestrictionPolicy) BranchRestrictionPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchRestrictionPolicyAppsItemOwner returns new OptBranchRestrictionPolicyAppsItemOwner with value set to v.
func NewOptBranchRestrictionPolicyAppsItemOwner(v BranchRestrictionPolicyAppsItemOwner) OptBranchRestrictionPolicyAppsItemOwner {
	return OptBranchRestrictionPolicyAppsItemOwner{
		Value: v,
		Set:   true,
	}
}

// OptBranchRestrictionPolicyAppsItemOwner is optional BranchRestrictionPolicyAppsItemOwner.
type OptBranchRestrictionPolicyAppsItemOwner struct {
	Value BranchRestrictionPolicyAppsItemOwner
	Set   bool
}

// IsSet returns true if OptBranchRestrictionPolicyAppsItemOwner was set.
func (o OptBranchRestrictionPolicyAppsItemOwner) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchRestrictionPolicyAppsItemOwner) Reset() {
	var v BranchRestrictionPolicyAppsItemOwner
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchRestrictionPolicyAppsItemOwner) SetTo(v BranchRestrictionPolicyAppsItemOwner) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchRestrictionPolicyAppsItemOwner) Get() (v BranchRestrictionPolicyAppsItemOwner, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchRestrictionPolicyAppsItemOwner) Or(d BranchRestrictionPolicyAppsItemOwner) BranchRestrictionPolicyAppsItemOwner {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBranchRestrictionPolicyAppsItemPermissions returns new OptBranchRestrictionPolicyAppsItemPermissions with value set to v.
func NewOptBranchRestrictionPolicyAppsItemPermissions(v BranchRestrictionPolicyAppsItemPermissions) OptBranchRestrictionPolicyAppsItemPermissions {
	return OptBranchRestrictionPolicyAppsItemPermissions{
		Value: v,
		Set:   true,
	}
}

// OptBranchRestrictionPolicyAppsItemPermissions is optional BranchRestrictionPolicyAppsItemPermissions.
type OptBranchRestrictionPolicyAppsItemPermissions struct {
	Value BranchRestrictionPolicyAppsItemPermissions
	Set   bool
}

// IsSet returns true if OptBranchRestrictionPolicyAppsItemPermissions was set.
func (o OptBranchRestrictionPolicyAppsItemPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBranchRestrictionPolicyAppsItemPermissions) Reset() {
	var v BranchRestrictionPolicyAppsItemPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBranchRestrictionPolicyAppsItemPermissions) SetTo(v BranchRestrictionPolicyAppsItemPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBranchRestrictionPolicyAppsItemPermissions) Get() (v BranchRestrictionPolicyAppsItemPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBranchRestrictionPolicyAppsItemPermissions) Or(d BranchRestrictionPolicyAppsItemPermissions) BranchRestrictionPolicyAppsItemPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForRefFilter returns new OptChecksListForRefFilter with value set to v.
func NewOptChecksListForRefFilter(v ChecksListForRefFilter) OptChecksListForRefFilter {
	return OptChecksListForRefFilter{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForRefFilter is optional ChecksListForRefFilter.
type OptChecksListForRefFilter struct {
	Value ChecksListForRefFilter
	Set   bool
}

// IsSet returns true if OptChecksListForRefFilter was set.
func (o OptChecksListForRefFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForRefFilter) Reset() {
	var v ChecksListForRefFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForRefFilter) SetTo(v ChecksListForRefFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForRefFilter) Get() (v ChecksListForRefFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForRefFilter) Or(d ChecksListForRefFilter) ChecksListForRefFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForRefStatus returns new OptChecksListForRefStatus with value set to v.
func NewOptChecksListForRefStatus(v ChecksListForRefStatus) OptChecksListForRefStatus {
	return OptChecksListForRefStatus{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForRefStatus is optional ChecksListForRefStatus.
type OptChecksListForRefStatus struct {
	Value ChecksListForRefStatus
	Set   bool
}

// IsSet returns true if OptChecksListForRefStatus was set.
func (o OptChecksListForRefStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForRefStatus) Reset() {
	var v ChecksListForRefStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForRefStatus) SetTo(v ChecksListForRefStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForRefStatus) Get() (v ChecksListForRefStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForRefStatus) Or(d ChecksListForRefStatus) ChecksListForRefStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForSuiteFilter returns new OptChecksListForSuiteFilter with value set to v.
func NewOptChecksListForSuiteFilter(v ChecksListForSuiteFilter) OptChecksListForSuiteFilter {
	return OptChecksListForSuiteFilter{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForSuiteFilter is optional ChecksListForSuiteFilter.
type OptChecksListForSuiteFilter struct {
	Value ChecksListForSuiteFilter
	Set   bool
}

// IsSet returns true if OptChecksListForSuiteFilter was set.
func (o OptChecksListForSuiteFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForSuiteFilter) Reset() {
	var v ChecksListForSuiteFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForSuiteFilter) SetTo(v ChecksListForSuiteFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForSuiteFilter) Get() (v ChecksListForSuiteFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForSuiteFilter) Or(d ChecksListForSuiteFilter) ChecksListForSuiteFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChecksListForSuiteStatus returns new OptChecksListForSuiteStatus with value set to v.
func NewOptChecksListForSuiteStatus(v ChecksListForSuiteStatus) OptChecksListForSuiteStatus {
	return OptChecksListForSuiteStatus{
		Value: v,
		Set:   true,
	}
}

// OptChecksListForSuiteStatus is optional ChecksListForSuiteStatus.
type OptChecksListForSuiteStatus struct {
	Value ChecksListForSuiteStatus
	Set   bool
}

// IsSet returns true if OptChecksListForSuiteStatus was set.
func (o OptChecksListForSuiteStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChecksListForSuiteStatus) Reset() {
	var v ChecksListForSuiteStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChecksListForSuiteStatus) SetTo(v ChecksListForSuiteStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChecksListForSuiteStatus) Get() (v ChecksListForSuiteStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChecksListForSuiteStatus) Or(d ChecksListForSuiteStatus) ChecksListForSuiteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeOfConduct returns new OptCodeOfConduct with value set to v.
func NewOptCodeOfConduct(v CodeOfConduct) OptCodeOfConduct {
	return OptCodeOfConduct{
		Value: v,
		Set:   true,
	}
}

// OptCodeOfConduct is optional CodeOfConduct.
type OptCodeOfConduct struct {
	Value CodeOfConduct
	Set   bool
}

// IsSet returns true if OptCodeOfConduct was set.
func (o OptCodeOfConduct) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeOfConduct) Reset() {
	var v CodeOfConduct
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeOfConduct) SetTo(v CodeOfConduct) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeOfConduct) Get() (v CodeOfConduct, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeOfConduct) Or(d CodeOfConduct) CodeOfConduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeOfConductSimple returns new OptCodeOfConductSimple with value set to v.
func NewOptCodeOfConductSimple(v CodeOfConductSimple) OptCodeOfConductSimple {
	return OptCodeOfConductSimple{
		Value: v,
		Set:   true,
	}
}

// OptCodeOfConductSimple is optional CodeOfConductSimple.
type OptCodeOfConductSimple struct {
	Value CodeOfConductSimple
	Set   bool
}

// IsSet returns true if OptCodeOfConductSimple was set.
func (o OptCodeOfConductSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeOfConductSimple) Reset() {
	var v CodeOfConductSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeOfConductSimple) SetTo(v CodeOfConductSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeOfConductSimple) Get() (v CodeOfConductSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeOfConductSimple) Or(d CodeOfConductSimple) CodeOfConductSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertEnvironment returns new OptCodeScanningAlertEnvironment with value set to v.
func NewOptCodeScanningAlertEnvironment(v CodeScanningAlertEnvironment) OptCodeScanningAlertEnvironment {
	return OptCodeScanningAlertEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertEnvironment is optional CodeScanningAlertEnvironment.
type OptCodeScanningAlertEnvironment struct {
	Value CodeScanningAlertEnvironment
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertEnvironment was set.
func (o OptCodeScanningAlertEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertEnvironment) Reset() {
	var v CodeScanningAlertEnvironment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertEnvironment) SetTo(v CodeScanningAlertEnvironment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertEnvironment) Get() (v CodeScanningAlertEnvironment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertEnvironment) Or(d CodeScanningAlertEnvironment) CodeScanningAlertEnvironment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertInstanceMessage returns new OptCodeScanningAlertInstanceMessage with value set to v.
func NewOptCodeScanningAlertInstanceMessage(v CodeScanningAlertInstanceMessage) OptCodeScanningAlertInstanceMessage {
	return OptCodeScanningAlertInstanceMessage{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertInstanceMessage is optional CodeScanningAlertInstanceMessage.
type OptCodeScanningAlertInstanceMessage struct {
	Value CodeScanningAlertInstanceMessage
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertInstanceMessage was set.
func (o OptCodeScanningAlertInstanceMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertInstanceMessage) Reset() {
	var v CodeScanningAlertInstanceMessage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertInstanceMessage) SetTo(v CodeScanningAlertInstanceMessage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertInstanceMessage) Get() (v CodeScanningAlertInstanceMessage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertInstanceMessage) Or(d CodeScanningAlertInstanceMessage) CodeScanningAlertInstanceMessage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertLocation returns new OptCodeScanningAlertLocation with value set to v.
func NewOptCodeScanningAlertLocation(v CodeScanningAlertLocation) OptCodeScanningAlertLocation {
	return OptCodeScanningAlertLocation{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertLocation is optional CodeScanningAlertLocation.
type OptCodeScanningAlertLocation struct {
	Value CodeScanningAlertLocation
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertLocation was set.
func (o OptCodeScanningAlertLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertLocation) Reset() {
	var v CodeScanningAlertLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertLocation) SetTo(v CodeScanningAlertLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertLocation) Get() (v CodeScanningAlertLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertLocation) Or(d CodeScanningAlertLocation) CodeScanningAlertLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAlertState returns new OptCodeScanningAlertState with value set to v.
func NewOptCodeScanningAlertState(v CodeScanningAlertState) OptCodeScanningAlertState {
	return OptCodeScanningAlertState{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAlertState is optional CodeScanningAlertState.
type OptCodeScanningAlertState struct {
	Value CodeScanningAlertState
	Set   bool
}

// IsSet returns true if OptCodeScanningAlertState was set.
func (o OptCodeScanningAlertState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAlertState) Reset() {
	var v CodeScanningAlertState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAlertState) SetTo(v CodeScanningAlertState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAlertState) Get() (v CodeScanningAlertState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAlertState) Or(d CodeScanningAlertState) CodeScanningAlertState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisAnalysisKey returns new OptCodeScanningAnalysisAnalysisKey with value set to v.
func NewOptCodeScanningAnalysisAnalysisKey(v CodeScanningAnalysisAnalysisKey) OptCodeScanningAnalysisAnalysisKey {
	return OptCodeScanningAnalysisAnalysisKey{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisAnalysisKey is optional CodeScanningAnalysisAnalysisKey.
type OptCodeScanningAnalysisAnalysisKey struct {
	Value CodeScanningAnalysisAnalysisKey
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisAnalysisKey was set.
func (o OptCodeScanningAnalysisAnalysisKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisAnalysisKey) Reset() {
	var v CodeScanningAnalysisAnalysisKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisAnalysisKey) SetTo(v CodeScanningAnalysisAnalysisKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisAnalysisKey) Get() (v CodeScanningAnalysisAnalysisKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisAnalysisKey) Or(d CodeScanningAnalysisAnalysisKey) CodeScanningAnalysisAnalysisKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisCategory returns new OptCodeScanningAnalysisCategory with value set to v.
func NewOptCodeScanningAnalysisCategory(v CodeScanningAnalysisCategory) OptCodeScanningAnalysisCategory {
	return OptCodeScanningAnalysisCategory{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisCategory is optional CodeScanningAnalysisCategory.
type OptCodeScanningAnalysisCategory struct {
	Value CodeScanningAnalysisCategory
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisCategory was set.
func (o OptCodeScanningAnalysisCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisCategory) Reset() {
	var v CodeScanningAnalysisCategory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisCategory) SetTo(v CodeScanningAnalysisCategory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisCategory) Get() (v CodeScanningAnalysisCategory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisCategory) Or(d CodeScanningAnalysisCategory) CodeScanningAnalysisCategory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisSarifID returns new OptCodeScanningAnalysisSarifID with value set to v.
func NewOptCodeScanningAnalysisSarifID(v CodeScanningAnalysisSarifID) OptCodeScanningAnalysisSarifID {
	return OptCodeScanningAnalysisSarifID{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisSarifID is optional CodeScanningAnalysisSarifID.
type OptCodeScanningAnalysisSarifID struct {
	Value CodeScanningAnalysisSarifID
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisSarifID was set.
func (o OptCodeScanningAnalysisSarifID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisSarifID) Reset() {
	var v CodeScanningAnalysisSarifID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisSarifID) SetTo(v CodeScanningAnalysisSarifID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisSarifID) Get() (v CodeScanningAnalysisSarifID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisSarifID) Or(d CodeScanningAnalysisSarifID) CodeScanningAnalysisSarifID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningAnalysisToolName returns new OptCodeScanningAnalysisToolName with value set to v.
func NewOptCodeScanningAnalysisToolName(v CodeScanningAnalysisToolName) OptCodeScanningAnalysisToolName {
	return OptCodeScanningAnalysisToolName{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningAnalysisToolName is optional CodeScanningAnalysisToolName.
type OptCodeScanningAnalysisToolName struct {
	Value CodeScanningAnalysisToolName
	Set   bool
}

// IsSet returns true if OptCodeScanningAnalysisToolName was set.
func (o OptCodeScanningAnalysisToolName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningAnalysisToolName) Reset() {
	var v CodeScanningAnalysisToolName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningAnalysisToolName) SetTo(v CodeScanningAnalysisToolName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningAnalysisToolName) Get() (v CodeScanningAnalysisToolName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningAnalysisToolName) Or(d CodeScanningAnalysisToolName) CodeScanningAnalysisToolName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningRef returns new OptCodeScanningRef with value set to v.
func NewOptCodeScanningRef(v CodeScanningRef) OptCodeScanningRef {
	return OptCodeScanningRef{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningRef is optional CodeScanningRef.
type OptCodeScanningRef struct {
	Value CodeScanningRef
	Set   bool
}

// IsSet returns true if OptCodeScanningRef was set.
func (o OptCodeScanningRef) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningRef) Reset() {
	var v CodeScanningRef
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningRef) SetTo(v CodeScanningRef) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningRef) Get() (v CodeScanningRef, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningRef) Or(d CodeScanningRef) CodeScanningRef {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeScanningSarifsStatusProcessingStatus returns new OptCodeScanningSarifsStatusProcessingStatus with value set to v.
func NewOptCodeScanningSarifsStatusProcessingStatus(v CodeScanningSarifsStatusProcessingStatus) OptCodeScanningSarifsStatusProcessingStatus {
	return OptCodeScanningSarifsStatusProcessingStatus{
		Value: v,
		Set:   true,
	}
}

// OptCodeScanningSarifsStatusProcessingStatus is optional CodeScanningSarifsStatusProcessingStatus.
type OptCodeScanningSarifsStatusProcessingStatus struct {
	Value CodeScanningSarifsStatusProcessingStatus
	Set   bool
}

// IsSet returns true if OptCodeScanningSarifsStatusProcessingStatus was set.
func (o OptCodeScanningSarifsStatusProcessingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeScanningSarifsStatusProcessingStatus) Reset() {
	var v CodeScanningSarifsStatusProcessingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeScanningSarifsStatusProcessingStatus) SetTo(v CodeScanningSarifsStatusProcessingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeScanningSarifsStatusProcessingStatus) Get() (v CodeScanningSarifsStatusProcessingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeScanningSarifsStatusProcessingStatus) Or(d CodeScanningSarifsStatusProcessingStatus) CodeScanningSarifsStatusProcessingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollaboratorPermissions returns new OptCollaboratorPermissions with value set to v.
func NewOptCollaboratorPermissions(v CollaboratorPermissions) OptCollaboratorPermissions {
	return OptCollaboratorPermissions{
		Value: v,
		Set:   true,
	}
}

// OptCollaboratorPermissions is optional CollaboratorPermissions.
type OptCollaboratorPermissions struct {
	Value CollaboratorPermissions
	Set   bool
}

// IsSet returns true if OptCollaboratorPermissions was set.
func (o OptCollaboratorPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollaboratorPermissions) Reset() {
	var v CollaboratorPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollaboratorPermissions) SetTo(v CollaboratorPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollaboratorPermissions) Get() (v CollaboratorPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollaboratorPermissions) Or(d CollaboratorPermissions) CollaboratorPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommitStats returns new OptCommitStats with value set to v.
func NewOptCommitStats(v CommitStats) OptCommitStats {
	return OptCommitStats{
		Value: v,
		Set:   true,
	}
}

// OptCommitStats is optional CommitStats.
type OptCommitStats struct {
	Value CommitStats
	Set   bool
}

// IsSet returns true if OptCommitStats was set.
func (o OptCommitStats) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommitStats) Reset() {
	var v CommitStats
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommitStats) SetTo(v CommitStats) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommitStats) Get() (v CommitStats, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommitStats) Or(d CommitStats) CommitStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeploymentSimple returns new OptDeploymentSimple with value set to v.
func NewOptDeploymentSimple(v DeploymentSimple) OptDeploymentSimple {
	return OptDeploymentSimple{
		Value: v,
		Set:   true,
	}
}

// OptDeploymentSimple is optional DeploymentSimple.
type OptDeploymentSimple struct {
	Value DeploymentSimple
	Set   bool
}

// IsSet returns true if OptDeploymentSimple was set.
func (o OptDeploymentSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeploymentSimple) Reset() {
	var v DeploymentSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeploymentSimple) SetTo(v DeploymentSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeploymentSimple) Get() (v DeploymentSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeploymentSimple) Or(d DeploymentSimple) DeploymentSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility returns new OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility with value set to v.
func NewOptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility(v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	return OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility is optional EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility.
type OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility struct {
	Value EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility was set.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Reset() {
	var v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetTo(v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Get() (v EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Or(d EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminGetAuditLogInclude returns new OptEnterpriseAdminGetAuditLogInclude with value set to v.
func NewOptEnterpriseAdminGetAuditLogInclude(v EnterpriseAdminGetAuditLogInclude) OptEnterpriseAdminGetAuditLogInclude {
	return OptEnterpriseAdminGetAuditLogInclude{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminGetAuditLogInclude is optional EnterpriseAdminGetAuditLogInclude.
type OptEnterpriseAdminGetAuditLogInclude struct {
	Value EnterpriseAdminGetAuditLogInclude
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminGetAuditLogInclude was set.
func (o OptEnterpriseAdminGetAuditLogInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnterpriseAdminGetAuditLogInclude) Reset() {
	var v EnterpriseAdminGetAuditLogInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminGetAuditLogInclude) SetTo(v EnterpriseAdminGetAuditLogInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminGetAuditLogInclude) Get() (v EnterpriseAdminGetAuditLogInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminGetAuditLogInclude) Or(d EnterpriseAdminGetAuditLogInclude) EnterpriseAdminGetAuditLogInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminGetAuditLogOrder returns new OptEnterpriseAdminGetAuditLogOrder with value set to v.
func NewOptEnterpriseAdminGetAuditLogOrder(v EnterpriseAdminGetAuditLogOrder) OptEnterpriseAdminGetAuditLogOrder {
	return OptEnterpriseAdminGetAuditLogOrder{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminGetAuditLogOrder is optional EnterpriseAdminGetAuditLogOrder.
type OptEnterpriseAdminGetAuditLogOrder struct {
	Value EnterpriseAdminGetAuditLogOrder
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminGetAuditLogOrder was set.
func (o OptEnterpriseAdminGetAuditLogOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnterpriseAdminGetAuditLogOrder) Reset() {
	var v EnterpriseAdminGetAuditLogOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminGetAuditLogOrder) SetTo(v EnterpriseAdminGetAuditLogOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminGetAuditLogOrder) Get() (v EnterpriseAdminGetAuditLogOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminGetAuditLogOrder) Or(d EnterpriseAdminGetAuditLogOrder) EnterpriseAdminGetAuditLogOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue returns new OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue with value set to v.
func NewOptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	return OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue is optional EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue.
type OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue struct {
	Value EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue was set.
func (o OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Reset() {
	var v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) SetTo(v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Get() (v EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Or(d EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq returns new OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq with value set to v.
func NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq {
	return OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq is optional EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq.
type OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq struct {
	Value EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Reset() {
	var v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) SetTo(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Get() (v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Or(d EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility returns new OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility with value set to v.
func NewOptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	return OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility is optional EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility.
type OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility struct {
	Value EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility
	Set   bool
}

// IsSet returns true if OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Reset() {
	var v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) SetTo(v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Get() (v EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Or(d EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitAuthor returns new OptFileCommitCommitAuthor with value set to v.
func NewOptFileCommitCommitAuthor(v FileCommitCommitAuthor) OptFileCommitCommitAuthor {
	return OptFileCommitCommitAuthor{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitAuthor is optional FileCommitCommitAuthor.
type OptFileCommitCommitAuthor struct {
	Value FileCommitCommitAuthor
	Set   bool
}

// IsSet returns true if OptFileCommitCommitAuthor was set.
func (o OptFileCommitCommitAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitAuthor) Reset() {
	var v FileCommitCommitAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitAuthor) SetTo(v FileCommitCommitAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitAuthor) Get() (v FileCommitCommitAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitAuthor) Or(d FileCommitCommitAuthor) FileCommitCommitAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitCommitter returns new OptFileCommitCommitCommitter with value set to v.
func NewOptFileCommitCommitCommitter(v FileCommitCommitCommitter) OptFileCommitCommitCommitter {
	return OptFileCommitCommitCommitter{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitCommitter is optional FileCommitCommitCommitter.
type OptFileCommitCommitCommitter struct {
	Value FileCommitCommitCommitter
	Set   bool
}

// IsSet returns true if OptFileCommitCommitCommitter was set.
func (o OptFileCommitCommitCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitCommitter) Reset() {
	var v FileCommitCommitCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitCommitter) SetTo(v FileCommitCommitCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitCommitter) Get() (v FileCommitCommitCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitCommitter) Or(d FileCommitCommitCommitter) FileCommitCommitCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitTree returns new OptFileCommitCommitTree with value set to v.
func NewOptFileCommitCommitTree(v FileCommitCommitTree) OptFileCommitCommitTree {
	return OptFileCommitCommitTree{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitTree is optional FileCommitCommitTree.
type OptFileCommitCommitTree struct {
	Value FileCommitCommitTree
	Set   bool
}

// IsSet returns true if OptFileCommitCommitTree was set.
func (o OptFileCommitCommitTree) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitTree) Reset() {
	var v FileCommitCommitTree
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitTree) SetTo(v FileCommitCommitTree) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitTree) Get() (v FileCommitCommitTree, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitTree) Or(d FileCommitCommitTree) FileCommitCommitTree {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitCommitVerification returns new OptFileCommitCommitVerification with value set to v.
func NewOptFileCommitCommitVerification(v FileCommitCommitVerification) OptFileCommitCommitVerification {
	return OptFileCommitCommitVerification{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitCommitVerification is optional FileCommitCommitVerification.
type OptFileCommitCommitVerification struct {
	Value FileCommitCommitVerification
	Set   bool
}

// IsSet returns true if OptFileCommitCommitVerification was set.
func (o OptFileCommitCommitVerification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitCommitVerification) Reset() {
	var v FileCommitCommitVerification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitCommitVerification) SetTo(v FileCommitCommitVerification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitCommitVerification) Get() (v FileCommitCommitVerification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitCommitVerification) Or(d FileCommitCommitVerification) FileCommitCommitVerification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileCommitContentLinks returns new OptFileCommitContentLinks with value set to v.
func NewOptFileCommitContentLinks(v FileCommitContentLinks) OptFileCommitContentLinks {
	return OptFileCommitContentLinks{
		Value: v,
		Set:   true,
	}
}

// OptFileCommitContentLinks is optional FileCommitContentLinks.
type OptFileCommitContentLinks struct {
	Value FileCommitContentLinks
	Set   bool
}

// IsSet returns true if OptFileCommitContentLinks was set.
func (o OptFileCommitContentLinks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileCommitContentLinks) Reset() {
	var v FileCommitContentLinks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileCommitContentLinks) SetTo(v FileCommitContentLinks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileCommitContentLinks) Get() (v FileCommitContentLinks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileCommitContentLinks) Or(d FileCommitContentLinks) FileCommitContentLinks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForbiddenGistBlock returns new OptForbiddenGistBlock with value set to v.
func NewOptForbiddenGistBlock(v ForbiddenGistBlock) OptForbiddenGistBlock {
	return OptForbiddenGistBlock{
		Value: v,
		Set:   true,
	}
}

// OptForbiddenGistBlock is optional ForbiddenGistBlock.
type OptForbiddenGistBlock struct {
	Value ForbiddenGistBlock
	Set   bool
}

// IsSet returns true if OptForbiddenGistBlock was set.
func (o OptForbiddenGistBlock) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForbiddenGistBlock) Reset() {
	var v ForbiddenGistBlock
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForbiddenGistBlock) SetTo(v ForbiddenGistBlock) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForbiddenGistBlock) Get() (v ForbiddenGistBlock, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForbiddenGistBlock) Or(d ForbiddenGistBlock) ForbiddenGistBlock {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositoryPermissions returns new OptFullRepositoryPermissions with value set to v.
func NewOptFullRepositoryPermissions(v FullRepositoryPermissions) OptFullRepositoryPermissions {
	return OptFullRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositoryPermissions is optional FullRepositoryPermissions.
type OptFullRepositoryPermissions struct {
	Value FullRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptFullRepositoryPermissions was set.
func (o OptFullRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositoryPermissions) Reset() {
	var v FullRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositoryPermissions) SetTo(v FullRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositoryPermissions) Get() (v FullRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositoryPermissions) Or(d FullRepositoryPermissions) FullRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisAdvancedSecurity returns new OptFullRepositorySecurityAndAnalysisAdvancedSecurity with value set to v.
func NewOptFullRepositorySecurityAndAnalysisAdvancedSecurity(v FullRepositorySecurityAndAnalysisAdvancedSecurity) OptFullRepositorySecurityAndAnalysisAdvancedSecurity {
	return OptFullRepositorySecurityAndAnalysisAdvancedSecurity{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisAdvancedSecurity is optional FullRepositorySecurityAndAnalysisAdvancedSecurity.
type OptFullRepositorySecurityAndAnalysisAdvancedSecurity struct {
	Value FullRepositorySecurityAndAnalysisAdvancedSecurity
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisAdvancedSecurity was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) Reset() {
	var v FullRepositorySecurityAndAnalysisAdvancedSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurity) SetTo(v FullRepositorySecurityAndAnalysisAdvancedSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) Get() (v FullRepositorySecurityAndAnalysisAdvancedSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurity) Or(d FullRepositorySecurityAndAnalysisAdvancedSecurity) FullRepositorySecurityAndAnalysisAdvancedSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus returns new OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus with value set to v.
func NewOptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus(v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus {
	return OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus is optional FullRepositorySecurityAndAnalysisAdvancedSecurityStatus.
type OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus struct {
	Value FullRepositorySecurityAndAnalysisAdvancedSecurityStatus
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Reset() {
	var v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) SetTo(v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Get() (v FullRepositorySecurityAndAnalysisAdvancedSecurityStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Or(d FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) FullRepositorySecurityAndAnalysisAdvancedSecurityStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisSecretScanning returns new OptFullRepositorySecurityAndAnalysisSecretScanning with value set to v.
func NewOptFullRepositorySecurityAndAnalysisSecretScanning(v FullRepositorySecurityAndAnalysisSecretScanning) OptFullRepositorySecurityAndAnalysisSecretScanning {
	return OptFullRepositorySecurityAndAnalysisSecretScanning{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisSecretScanning is optional FullRepositorySecurityAndAnalysisSecretScanning.
type OptFullRepositorySecurityAndAnalysisSecretScanning struct {
	Value FullRepositorySecurityAndAnalysisSecretScanning
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisSecretScanning was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanning) Reset() {
	var v FullRepositorySecurityAndAnalysisSecretScanning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanning) SetTo(v FullRepositorySecurityAndAnalysisSecretScanning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) Get() (v FullRepositorySecurityAndAnalysisSecretScanning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisSecretScanning) Or(d FullRepositorySecurityAndAnalysisSecretScanning) FullRepositorySecurityAndAnalysisSecretScanning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFullRepositorySecurityAndAnalysisSecretScanningStatus returns new OptFullRepositorySecurityAndAnalysisSecretScanningStatus with value set to v.
func NewOptFullRepositorySecurityAndAnalysisSecretScanningStatus(v FullRepositorySecurityAndAnalysisSecretScanningStatus) OptFullRepositorySecurityAndAnalysisSecretScanningStatus {
	return OptFullRepositorySecurityAndAnalysisSecretScanningStatus{
		Value: v,
		Set:   true,
	}
}

// OptFullRepositorySecurityAndAnalysisSecretScanningStatus is optional FullRepositorySecurityAndAnalysisSecretScanningStatus.
type OptFullRepositorySecurityAndAnalysisSecretScanningStatus struct {
	Value FullRepositorySecurityAndAnalysisSecretScanningStatus
	Set   bool
}

// IsSet returns true if OptFullRepositorySecurityAndAnalysisSecretScanningStatus was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) Reset() {
	var v FullRepositorySecurityAndAnalysisSecretScanningStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFullRepositorySecurityAndAnalysisSecretScanningStatus) SetTo(v FullRepositorySecurityAndAnalysisSecretScanningStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) Get() (v FullRepositorySecurityAndAnalysisSecretScanningStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFullRepositorySecurityAndAnalysisSecretScanningStatus) Or(d FullRepositorySecurityAndAnalysisSecretScanningStatus) FullRepositorySecurityAndAnalysisSecretScanningStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGistHistoryChangeStatus returns new OptGistHistoryChangeStatus with value set to v.
func NewOptGistHistoryChangeStatus(v GistHistoryChangeStatus) OptGistHistoryChangeStatus {
	return OptGistHistoryChangeStatus{
		Value: v,
		Set:   true,
	}
}

// OptGistHistoryChangeStatus is optional GistHistoryChangeStatus.
type OptGistHistoryChangeStatus struct {
	Value GistHistoryChangeStatus
	Set   bool
}

// IsSet returns true if OptGistHistoryChangeStatus was set.
func (o OptGistHistoryChangeStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGistHistoryChangeStatus) Reset() {
	var v GistHistoryChangeStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGistHistoryChangeStatus) SetTo(v GistHistoryChangeStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGistHistoryChangeStatus) Get() (v GistHistoryChangeStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGistHistoryChangeStatus) Or(d GistHistoryChangeStatus) GistHistoryChangeStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGistSimpleFiles returns new OptGistSimpleFiles with value set to v.
func NewOptGistSimpleFiles(v GistSimpleFiles) OptGistSimpleFiles {
	return OptGistSimpleFiles{
		Value: v,
		Set:   true,
	}
}

// OptGistSimpleFiles is optional GistSimpleFiles.
type OptGistSimpleFiles struct {
	Value GistSimpleFiles
	Set   bool
}

// IsSet returns true if OptGistSimpleFiles was set.
func (o OptGistSimpleFiles) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGistSimpleFiles) Reset() {
	var v GistSimpleFiles
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGistSimpleFiles) SetTo(v GistSimpleFiles) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGistSimpleFiles) Get() (v GistSimpleFiles, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGistSimpleFiles) Or(d GistSimpleFiles) GistSimpleFiles {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGistsCreateReqPublic returns new OptGistsCreateReqPublic with value set to v.
func NewOptGistsCreateReqPublic(v GistsCreateReqPublic) OptGistsCreateReqPublic {
	return OptGistsCreateReqPublic{
		Value: v,
		Set:   true,
	}
}

// OptGistsCreateReqPublic is optional GistsCreateReqPublic.
type OptGistsCreateReqPublic struct {
	Value GistsCreateReqPublic
	Set   bool
}

// IsSet returns true if OptGistsCreateReqPublic was set.
func (o OptGistsCreateReqPublic) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGistsCreateReqPublic) Reset() {
	var v GistsCreateReqPublic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGistsCreateReqPublic) SetTo(v GistsCreateReqPublic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGistsCreateReqPublic) Get() (v GistsCreateReqPublic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGistsCreateReqPublic) Or(d GistsCreateReqPublic) GistsCreateReqPublic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateCommitReqAuthor returns new OptGitCreateCommitReqAuthor with value set to v.
func NewOptGitCreateCommitReqAuthor(v GitCreateCommitReqAuthor) OptGitCreateCommitReqAuthor {
	return OptGitCreateCommitReqAuthor{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateCommitReqAuthor is optional GitCreateCommitReqAuthor.
type OptGitCreateCommitReqAuthor struct {
	Value GitCreateCommitReqAuthor
	Set   bool
}

// IsSet returns true if OptGitCreateCommitReqAuthor was set.
func (o OptGitCreateCommitReqAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateCommitReqAuthor) Reset() {
	var v GitCreateCommitReqAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateCommitReqAuthor) SetTo(v GitCreateCommitReqAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateCommitReqAuthor) Get() (v GitCreateCommitReqAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateCommitReqAuthor) Or(d GitCreateCommitReqAuthor) GitCreateCommitReqAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateCommitReqCommitter returns new OptGitCreateCommitReqCommitter with value set to v.
func NewOptGitCreateCommitReqCommitter(v GitCreateCommitReqCommitter) OptGitCreateCommitReqCommitter {
	return OptGitCreateCommitReqCommitter{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateCommitReqCommitter is optional GitCreateCommitReqCommitter.
type OptGitCreateCommitReqCommitter struct {
	Value GitCreateCommitReqCommitter
	Set   bool
}

// IsSet returns true if OptGitCreateCommitReqCommitter was set.
func (o OptGitCreateCommitReqCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateCommitReqCommitter) Reset() {
	var v GitCreateCommitReqCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateCommitReqCommitter) SetTo(v GitCreateCommitReqCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateCommitReqCommitter) Get() (v GitCreateCommitReqCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateCommitReqCommitter) Or(d GitCreateCommitReqCommitter) GitCreateCommitReqCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateTagReqTagger returns new OptGitCreateTagReqTagger with value set to v.
func NewOptGitCreateTagReqTagger(v GitCreateTagReqTagger) OptGitCreateTagReqTagger {
	return OptGitCreateTagReqTagger{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateTagReqTagger is optional GitCreateTagReqTagger.
type OptGitCreateTagReqTagger struct {
	Value GitCreateTagReqTagger
	Set   bool
}

// IsSet returns true if OptGitCreateTagReqTagger was set.
func (o OptGitCreateTagReqTagger) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateTagReqTagger) Reset() {
	var v GitCreateTagReqTagger
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateTagReqTagger) SetTo(v GitCreateTagReqTagger) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateTagReqTagger) Get() (v GitCreateTagReqTagger, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateTagReqTagger) Or(d GitCreateTagReqTagger) GitCreateTagReqTagger {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateTreeReqTreeItemMode returns new OptGitCreateTreeReqTreeItemMode with value set to v.
func NewOptGitCreateTreeReqTreeItemMode(v GitCreateTreeReqTreeItemMode) OptGitCreateTreeReqTreeItemMode {
	return OptGitCreateTreeReqTreeItemMode{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateTreeReqTreeItemMode is optional GitCreateTreeReqTreeItemMode.
type OptGitCreateTreeReqTreeItemMode struct {
	Value GitCreateTreeReqTreeItemMode
	Set   bool
}

// IsSet returns true if OptGitCreateTreeReqTreeItemMode was set.
func (o OptGitCreateTreeReqTreeItemMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateTreeReqTreeItemMode) Reset() {
	var v GitCreateTreeReqTreeItemMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateTreeReqTreeItemMode) SetTo(v GitCreateTreeReqTreeItemMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateTreeReqTreeItemMode) Get() (v GitCreateTreeReqTreeItemMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateTreeReqTreeItemMode) Or(d GitCreateTreeReqTreeItemMode) GitCreateTreeReqTreeItemMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGitCreateTreeReqTreeItemType returns new OptGitCreateTreeReqTreeItemType with value set to v.
func NewOptGitCreateTreeReqTreeItemType(v GitCreateTreeReqTreeItemType) OptGitCreateTreeReqTreeItemType {
	return OptGitCreateTreeReqTreeItemType{
		Value: v,
		Set:   true,
	}
}

// OptGitCreateTreeReqTreeItemType is optional GitCreateTreeReqTreeItemType.
type OptGitCreateTreeReqTreeItemType struct {
	Value GitCreateTreeReqTreeItemType
	Set   bool
}

// IsSet returns true if OptGitCreateTreeReqTreeItemType was set.
func (o OptGitCreateTreeReqTreeItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGitCreateTreeReqTreeItemType) Reset() {
	var v GitCreateTreeReqTreeItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGitCreateTreeReqTreeItemType) SetTo(v GitCreateTreeReqTreeItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGitCreateTreeReqTreeItemType) Get() (v GitCreateTreeReqTreeItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGitCreateTreeReqTreeItemType) Or(d GitCreateTreeReqTreeItemType) GitCreateTreeReqTreeItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstallationTokenRepositorySelection returns new OptInstallationTokenRepositorySelection with value set to v.
func NewOptInstallationTokenRepositorySelection(v InstallationTokenRepositorySelection) OptInstallationTokenRepositorySelection {
	return OptInstallationTokenRepositorySelection{
		Value: v,
		Set:   true,
	}
}

// OptInstallationTokenRepositorySelection is optional InstallationTokenRepositorySelection.
type OptInstallationTokenRepositorySelection struct {
	Value InstallationTokenRepositorySelection
	Set   bool
}

// IsSet returns true if OptInstallationTokenRepositorySelection was set.
func (o OptInstallationTokenRepositorySelection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstallationTokenRepositorySelection) Reset() {
	var v InstallationTokenRepositorySelection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstallationTokenRepositorySelection) SetTo(v InstallationTokenRepositorySelection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstallationTokenRepositorySelection) Get() (v InstallationTokenRepositorySelection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstallationTokenRepositorySelection) Or(d InstallationTokenRepositorySelection) InstallationTokenRepositorySelection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInteractionExpiry returns new OptInteractionExpiry with value set to v.
func NewOptInteractionExpiry(v InteractionExpiry) OptInteractionExpiry {
	return OptInteractionExpiry{
		Value: v,
		Set:   true,
	}
}

// OptInteractionExpiry is optional InteractionExpiry.
type OptInteractionExpiry struct {
	Value InteractionExpiry
	Set   bool
}

// IsSet returns true if OptInteractionExpiry was set.
func (o OptInteractionExpiry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInteractionExpiry) Reset() {
	var v InteractionExpiry
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInteractionExpiry) SetTo(v InteractionExpiry) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInteractionExpiry) Get() (v InteractionExpiry, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInteractionExpiry) Or(d InteractionExpiry) InteractionExpiry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueComment returns new OptIssueComment with value set to v.
func NewOptIssueComment(v IssueComment) OptIssueComment {
	return OptIssueComment{
		Value: v,
		Set:   true,
	}
}

// OptIssueComment is optional IssueComment.
type OptIssueComment struct {
	Value IssueComment
	Set   bool
}

// IsSet returns true if OptIssueComment was set.
func (o OptIssueComment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueComment) Reset() {
	var v IssueComment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueComment) SetTo(v IssueComment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueComment) Get() (v IssueComment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueComment) Or(d IssueComment) IssueComment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventDismissedReview returns new OptIssueEventDismissedReview with value set to v.
func NewOptIssueEventDismissedReview(v IssueEventDismissedReview) OptIssueEventDismissedReview {
	return OptIssueEventDismissedReview{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventDismissedReview is optional IssueEventDismissedReview.
type OptIssueEventDismissedReview struct {
	Value IssueEventDismissedReview
	Set   bool
}

// IsSet returns true if OptIssueEventDismissedReview was set.
func (o OptIssueEventDismissedReview) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventDismissedReview) Reset() {
	var v IssueEventDismissedReview
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventDismissedReview) SetTo(v IssueEventDismissedReview) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventDismissedReview) Get() (v IssueEventDismissedReview, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventDismissedReview) Or(d IssueEventDismissedReview) IssueEventDismissedReview {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventLabel returns new OptIssueEventLabel with value set to v.
func NewOptIssueEventLabel(v IssueEventLabel) OptIssueEventLabel {
	return OptIssueEventLabel{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventLabel is optional IssueEventLabel.
type OptIssueEventLabel struct {
	Value IssueEventLabel
	Set   bool
}

// IsSet returns true if OptIssueEventLabel was set.
func (o OptIssueEventLabel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventLabel) Reset() {
	var v IssueEventLabel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventLabel) SetTo(v IssueEventLabel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventLabel) Get() (v IssueEventLabel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventLabel) Or(d IssueEventLabel) IssueEventLabel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventMilestone returns new OptIssueEventMilestone with value set to v.
func NewOptIssueEventMilestone(v IssueEventMilestone) OptIssueEventMilestone {
	return OptIssueEventMilestone{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventMilestone is optional IssueEventMilestone.
type OptIssueEventMilestone struct {
	Value IssueEventMilestone
	Set   bool
}

// IsSet returns true if OptIssueEventMilestone was set.
func (o OptIssueEventMilestone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventMilestone) Reset() {
	var v IssueEventMilestone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventMilestone) SetTo(v IssueEventMilestone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventMilestone) Get() (v IssueEventMilestone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventMilestone) Or(d IssueEventMilestone) IssueEventMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventProjectCard returns new OptIssueEventProjectCard with value set to v.
func NewOptIssueEventProjectCard(v IssueEventProjectCard) OptIssueEventProjectCard {
	return OptIssueEventProjectCard{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventProjectCard is optional IssueEventProjectCard.
type OptIssueEventProjectCard struct {
	Value IssueEventProjectCard
	Set   bool
}

// IsSet returns true if OptIssueEventProjectCard was set.
func (o OptIssueEventProjectCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventProjectCard) Reset() {
	var v IssueEventProjectCard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventProjectCard) SetTo(v IssueEventProjectCard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventProjectCard) Get() (v IssueEventProjectCard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventProjectCard) Or(d IssueEventProjectCard) IssueEventProjectCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueEventRename returns new OptIssueEventRename with value set to v.
func NewOptIssueEventRename(v IssueEventRename) OptIssueEventRename {
	return OptIssueEventRename{
		Value: v,
		Set:   true,
	}
}

// OptIssueEventRename is optional IssueEventRename.
type OptIssueEventRename struct {
	Value IssueEventRename
	Set   bool
}

// IsSet returns true if OptIssueEventRename was set.
func (o OptIssueEventRename) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueEventRename) Reset() {
	var v IssueEventRename
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueEventRename) SetTo(v IssueEventRename) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueEventRename) Get() (v IssueEventRename, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueEventRename) Or(d IssueEventRename) IssueEventRename {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuePullRequest returns new OptIssuePullRequest with value set to v.
func NewOptIssuePullRequest(v IssuePullRequest) OptIssuePullRequest {
	return OptIssuePullRequest{
		Value: v,
		Set:   true,
	}
}

// OptIssuePullRequest is optional IssuePullRequest.
type OptIssuePullRequest struct {
	Value IssuePullRequest
	Set   bool
}

// IsSet returns true if OptIssuePullRequest was set.
func (o OptIssuePullRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuePullRequest) Reset() {
	var v IssuePullRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuePullRequest) SetTo(v IssuePullRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuePullRequest) Get() (v IssuePullRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuePullRequest) Or(d IssuePullRequest) IssuePullRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSearchResultItemPullRequest returns new OptIssueSearchResultItemPullRequest with value set to v.
func NewOptIssueSearchResultItemPullRequest(v IssueSearchResultItemPullRequest) OptIssueSearchResultItemPullRequest {
	return OptIssueSearchResultItemPullRequest{
		Value: v,
		Set:   true,
	}
}

// OptIssueSearchResultItemPullRequest is optional IssueSearchResultItemPullRequest.
type OptIssueSearchResultItemPullRequest struct {
	Value IssueSearchResultItemPullRequest
	Set   bool
}

// IsSet returns true if OptIssueSearchResultItemPullRequest was set.
func (o OptIssueSearchResultItemPullRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSearchResultItemPullRequest) Reset() {
	var v IssueSearchResultItemPullRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSearchResultItemPullRequest) SetTo(v IssueSearchResultItemPullRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSearchResultItemPullRequest) Get() (v IssueSearchResultItemPullRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSearchResultItemPullRequest) Or(d IssueSearchResultItemPullRequest) IssueSearchResultItemPullRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSimple returns new OptIssueSimple with value set to v.
func NewOptIssueSimple(v IssueSimple) OptIssueSimple {
	return OptIssueSimple{
		Value: v,
		Set:   true,
	}
}

// OptIssueSimple is optional IssueSimple.
type OptIssueSimple struct {
	Value IssueSimple
	Set   bool
}

// IsSet returns true if OptIssueSimple was set.
func (o OptIssueSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSimple) Reset() {
	var v IssueSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSimple) SetTo(v IssueSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSimple) Get() (v IssueSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSimple) Or(d IssueSimple) IssueSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssueSimplePullRequest returns new OptIssueSimplePullRequest with value set to v.
func NewOptIssueSimplePullRequest(v IssueSimplePullRequest) OptIssueSimplePullRequest {
	return OptIssueSimplePullRequest{
		Value: v,
		Set:   true,
	}
}

// OptIssueSimplePullRequest is optional IssueSimplePullRequest.
type OptIssueSimplePullRequest struct {
	Value IssueSimplePullRequest
	Set   bool
}

// IsSet returns true if OptIssueSimplePullRequest was set.
func (o OptIssueSimplePullRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssueSimplePullRequest) Reset() {
	var v IssueSimplePullRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssueSimplePullRequest) SetTo(v IssueSimplePullRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssueSimplePullRequest) Get() (v IssueSimplePullRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssueSimplePullRequest) Or(d IssueSimplePullRequest) IssueSimplePullRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesAddAssigneesReq returns new OptIssuesAddAssigneesReq with value set to v.
func NewOptIssuesAddAssigneesReq(v IssuesAddAssigneesReq) OptIssuesAddAssigneesReq {
	return OptIssuesAddAssigneesReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesAddAssigneesReq is optional IssuesAddAssigneesReq.
type OptIssuesAddAssigneesReq struct {
	Value IssuesAddAssigneesReq
	Set   bool
}

// IsSet returns true if OptIssuesAddAssigneesReq was set.
func (o OptIssuesAddAssigneesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesAddAssigneesReq) Reset() {
	var v IssuesAddAssigneesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesAddAssigneesReq) SetTo(v IssuesAddAssigneesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesAddAssigneesReq) Get() (v IssuesAddAssigneesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesAddAssigneesReq) Or(d IssuesAddAssigneesReq) IssuesAddAssigneesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesCreateMilestoneReqState returns new OptIssuesCreateMilestoneReqState with value set to v.
func NewOptIssuesCreateMilestoneReqState(v IssuesCreateMilestoneReqState) OptIssuesCreateMilestoneReqState {
	return OptIssuesCreateMilestoneReqState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesCreateMilestoneReqState is optional IssuesCreateMilestoneReqState.
type OptIssuesCreateMilestoneReqState struct {
	Value IssuesCreateMilestoneReqState
	Set   bool
}

// IsSet returns true if OptIssuesCreateMilestoneReqState was set.
func (o OptIssuesCreateMilestoneReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesCreateMilestoneReqState) Reset() {
	var v IssuesCreateMilestoneReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesCreateMilestoneReqState) SetTo(v IssuesCreateMilestoneReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesCreateMilestoneReqState) Get() (v IssuesCreateMilestoneReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesCreateMilestoneReqState) Or(d IssuesCreateMilestoneReqState) IssuesCreateMilestoneReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListCommentsForRepoDirection returns new OptIssuesListCommentsForRepoDirection with value set to v.
func NewOptIssuesListCommentsForRepoDirection(v IssuesListCommentsForRepoDirection) OptIssuesListCommentsForRepoDirection {
	return OptIssuesListCommentsForRepoDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListCommentsForRepoDirection is optional IssuesListCommentsForRepoDirection.
type OptIssuesListCommentsForRepoDirection struct {
	Value IssuesListCommentsForRepoDirection
	Set   bool
}

// IsSet returns true if OptIssuesListCommentsForRepoDirection was set.
func (o OptIssuesListCommentsForRepoDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListCommentsForRepoDirection) Reset() {
	var v IssuesListCommentsForRepoDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListCommentsForRepoDirection) SetTo(v IssuesListCommentsForRepoDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListCommentsForRepoDirection) Get() (v IssuesListCommentsForRepoDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListCommentsForRepoDirection) Or(d IssuesListCommentsForRepoDirection) IssuesListCommentsForRepoDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListCommentsForRepoSort returns new OptIssuesListCommentsForRepoSort with value set to v.
func NewOptIssuesListCommentsForRepoSort(v IssuesListCommentsForRepoSort) OptIssuesListCommentsForRepoSort {
	return OptIssuesListCommentsForRepoSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListCommentsForRepoSort is optional IssuesListCommentsForRepoSort.
type OptIssuesListCommentsForRepoSort struct {
	Value IssuesListCommentsForRepoSort
	Set   bool
}

// IsSet returns true if OptIssuesListCommentsForRepoSort was set.
func (o OptIssuesListCommentsForRepoSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListCommentsForRepoSort) Reset() {
	var v IssuesListCommentsForRepoSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListCommentsForRepoSort) SetTo(v IssuesListCommentsForRepoSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListCommentsForRepoSort) Get() (v IssuesListCommentsForRepoSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListCommentsForRepoSort) Or(d IssuesListCommentsForRepoSort) IssuesListCommentsForRepoSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListDirection returns new OptIssuesListDirection with value set to v.
func NewOptIssuesListDirection(v IssuesListDirection) OptIssuesListDirection {
	return OptIssuesListDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListDirection is optional IssuesListDirection.
type OptIssuesListDirection struct {
	Value IssuesListDirection
	Set   bool
}

// IsSet returns true if OptIssuesListDirection was set.
func (o OptIssuesListDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListDirection) Reset() {
	var v IssuesListDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListDirection) SetTo(v IssuesListDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListDirection) Get() (v IssuesListDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListDirection) Or(d IssuesListDirection) IssuesListDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListFilter returns new OptIssuesListFilter with value set to v.
func NewOptIssuesListFilter(v IssuesListFilter) OptIssuesListFilter {
	return OptIssuesListFilter{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListFilter is optional IssuesListFilter.
type OptIssuesListFilter struct {
	Value IssuesListFilter
	Set   bool
}

// IsSet returns true if OptIssuesListFilter was set.
func (o OptIssuesListFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListFilter) Reset() {
	var v IssuesListFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListFilter) SetTo(v IssuesListFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListFilter) Get() (v IssuesListFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListFilter) Or(d IssuesListFilter) IssuesListFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserDirection returns new OptIssuesListForAuthenticatedUserDirection with value set to v.
func NewOptIssuesListForAuthenticatedUserDirection(v IssuesListForAuthenticatedUserDirection) OptIssuesListForAuthenticatedUserDirection {
	return OptIssuesListForAuthenticatedUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserDirection is optional IssuesListForAuthenticatedUserDirection.
type OptIssuesListForAuthenticatedUserDirection struct {
	Value IssuesListForAuthenticatedUserDirection
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserDirection was set.
func (o OptIssuesListForAuthenticatedUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserDirection) Reset() {
	var v IssuesListForAuthenticatedUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserDirection) SetTo(v IssuesListForAuthenticatedUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserDirection) Get() (v IssuesListForAuthenticatedUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserDirection) Or(d IssuesListForAuthenticatedUserDirection) IssuesListForAuthenticatedUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserFilter returns new OptIssuesListForAuthenticatedUserFilter with value set to v.
func NewOptIssuesListForAuthenticatedUserFilter(v IssuesListForAuthenticatedUserFilter) OptIssuesListForAuthenticatedUserFilter {
	return OptIssuesListForAuthenticatedUserFilter{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserFilter is optional IssuesListForAuthenticatedUserFilter.
type OptIssuesListForAuthenticatedUserFilter struct {
	Value IssuesListForAuthenticatedUserFilter
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserFilter was set.
func (o OptIssuesListForAuthenticatedUserFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserFilter) Reset() {
	var v IssuesListForAuthenticatedUserFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserFilter) SetTo(v IssuesListForAuthenticatedUserFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserFilter) Get() (v IssuesListForAuthenticatedUserFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserFilter) Or(d IssuesListForAuthenticatedUserFilter) IssuesListForAuthenticatedUserFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserSort returns new OptIssuesListForAuthenticatedUserSort with value set to v.
func NewOptIssuesListForAuthenticatedUserSort(v IssuesListForAuthenticatedUserSort) OptIssuesListForAuthenticatedUserSort {
	return OptIssuesListForAuthenticatedUserSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserSort is optional IssuesListForAuthenticatedUserSort.
type OptIssuesListForAuthenticatedUserSort struct {
	Value IssuesListForAuthenticatedUserSort
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserSort was set.
func (o OptIssuesListForAuthenticatedUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserSort) Reset() {
	var v IssuesListForAuthenticatedUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserSort) SetTo(v IssuesListForAuthenticatedUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserSort) Get() (v IssuesListForAuthenticatedUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserSort) Or(d IssuesListForAuthenticatedUserSort) IssuesListForAuthenticatedUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForAuthenticatedUserState returns new OptIssuesListForAuthenticatedUserState with value set to v.
func NewOptIssuesListForAuthenticatedUserState(v IssuesListForAuthenticatedUserState) OptIssuesListForAuthenticatedUserState {
	return OptIssuesListForAuthenticatedUserState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForAuthenticatedUserState is optional IssuesListForAuthenticatedUserState.
type OptIssuesListForAuthenticatedUserState struct {
	Value IssuesListForAuthenticatedUserState
	Set   bool
}

// IsSet returns true if OptIssuesListForAuthenticatedUserState was set.
func (o OptIssuesListForAuthenticatedUserState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForAuthenticatedUserState) Reset() {
	var v IssuesListForAuthenticatedUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForAuthenticatedUserState) SetTo(v IssuesListForAuthenticatedUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForAuthenticatedUserState) Get() (v IssuesListForAuthenticatedUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForAuthenticatedUserState) Or(d IssuesListForAuthenticatedUserState) IssuesListForAuthenticatedUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgDirection returns new OptIssuesListForOrgDirection with value set to v.
func NewOptIssuesListForOrgDirection(v IssuesListForOrgDirection) OptIssuesListForOrgDirection {
	return OptIssuesListForOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgDirection is optional IssuesListForOrgDirection.
type OptIssuesListForOrgDirection struct {
	Value IssuesListForOrgDirection
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgDirection was set.
func (o OptIssuesListForOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgDirection) Reset() {
	var v IssuesListForOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgDirection) SetTo(v IssuesListForOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgDirection) Get() (v IssuesListForOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgDirection) Or(d IssuesListForOrgDirection) IssuesListForOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgFilter returns new OptIssuesListForOrgFilter with value set to v.
func NewOptIssuesListForOrgFilter(v IssuesListForOrgFilter) OptIssuesListForOrgFilter {
	return OptIssuesListForOrgFilter{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgFilter is optional IssuesListForOrgFilter.
type OptIssuesListForOrgFilter struct {
	Value IssuesListForOrgFilter
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgFilter was set.
func (o OptIssuesListForOrgFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgFilter) Reset() {
	var v IssuesListForOrgFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgFilter) SetTo(v IssuesListForOrgFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgFilter) Get() (v IssuesListForOrgFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgFilter) Or(d IssuesListForOrgFilter) IssuesListForOrgFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgSort returns new OptIssuesListForOrgSort with value set to v.
func NewOptIssuesListForOrgSort(v IssuesListForOrgSort) OptIssuesListForOrgSort {
	return OptIssuesListForOrgSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgSort is optional IssuesListForOrgSort.
type OptIssuesListForOrgSort struct {
	Value IssuesListForOrgSort
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgSort was set.
func (o OptIssuesListForOrgSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgSort) Reset() {
	var v IssuesListForOrgSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgSort) SetTo(v IssuesListForOrgSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgSort) Get() (v IssuesListForOrgSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgSort) Or(d IssuesListForOrgSort) IssuesListForOrgSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForOrgState returns new OptIssuesListForOrgState with value set to v.
func NewOptIssuesListForOrgState(v IssuesListForOrgState) OptIssuesListForOrgState {
	return OptIssuesListForOrgState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForOrgState is optional IssuesListForOrgState.
type OptIssuesListForOrgState struct {
	Value IssuesListForOrgState
	Set   bool
}

// IsSet returns true if OptIssuesListForOrgState was set.
func (o OptIssuesListForOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForOrgState) Reset() {
	var v IssuesListForOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForOrgState) SetTo(v IssuesListForOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForOrgState) Get() (v IssuesListForOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForOrgState) Or(d IssuesListForOrgState) IssuesListForOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForRepoDirection returns new OptIssuesListForRepoDirection with value set to v.
func NewOptIssuesListForRepoDirection(v IssuesListForRepoDirection) OptIssuesListForRepoDirection {
	return OptIssuesListForRepoDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForRepoDirection is optional IssuesListForRepoDirection.
type OptIssuesListForRepoDirection struct {
	Value IssuesListForRepoDirection
	Set   bool
}

// IsSet returns true if OptIssuesListForRepoDirection was set.
func (o OptIssuesListForRepoDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForRepoDirection) Reset() {
	var v IssuesListForRepoDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForRepoDirection) SetTo(v IssuesListForRepoDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForRepoDirection) Get() (v IssuesListForRepoDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForRepoDirection) Or(d IssuesListForRepoDirection) IssuesListForRepoDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForRepoSort returns new OptIssuesListForRepoSort with value set to v.
func NewOptIssuesListForRepoSort(v IssuesListForRepoSort) OptIssuesListForRepoSort {
	return OptIssuesListForRepoSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForRepoSort is optional IssuesListForRepoSort.
type OptIssuesListForRepoSort struct {
	Value IssuesListForRepoSort
	Set   bool
}

// IsSet returns true if OptIssuesListForRepoSort was set.
func (o OptIssuesListForRepoSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForRepoSort) Reset() {
	var v IssuesListForRepoSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForRepoSort) SetTo(v IssuesListForRepoSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForRepoSort) Get() (v IssuesListForRepoSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForRepoSort) Or(d IssuesListForRepoSort) IssuesListForRepoSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListForRepoState returns new OptIssuesListForRepoState with value set to v.
func NewOptIssuesListForRepoState(v IssuesListForRepoState) OptIssuesListForRepoState {
	return OptIssuesListForRepoState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListForRepoState is optional IssuesListForRepoState.
type OptIssuesListForRepoState struct {
	Value IssuesListForRepoState
	Set   bool
}

// IsSet returns true if OptIssuesListForRepoState was set.
func (o OptIssuesListForRepoState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListForRepoState) Reset() {
	var v IssuesListForRepoState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListForRepoState) SetTo(v IssuesListForRepoState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListForRepoState) Get() (v IssuesListForRepoState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListForRepoState) Or(d IssuesListForRepoState) IssuesListForRepoState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListMilestonesDirection returns new OptIssuesListMilestonesDirection with value set to v.
func NewOptIssuesListMilestonesDirection(v IssuesListMilestonesDirection) OptIssuesListMilestonesDirection {
	return OptIssuesListMilestonesDirection{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListMilestonesDirection is optional IssuesListMilestonesDirection.
type OptIssuesListMilestonesDirection struct {
	Value IssuesListMilestonesDirection
	Set   bool
}

// IsSet returns true if OptIssuesListMilestonesDirection was set.
func (o OptIssuesListMilestonesDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListMilestonesDirection) Reset() {
	var v IssuesListMilestonesDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListMilestonesDirection) SetTo(v IssuesListMilestonesDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListMilestonesDirection) Get() (v IssuesListMilestonesDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListMilestonesDirection) Or(d IssuesListMilestonesDirection) IssuesListMilestonesDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListMilestonesSort returns new OptIssuesListMilestonesSort with value set to v.
func NewOptIssuesListMilestonesSort(v IssuesListMilestonesSort) OptIssuesListMilestonesSort {
	return OptIssuesListMilestonesSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListMilestonesSort is optional IssuesListMilestonesSort.
type OptIssuesListMilestonesSort struct {
	Value IssuesListMilestonesSort
	Set   bool
}

// IsSet returns true if OptIssuesListMilestonesSort was set.
func (o OptIssuesListMilestonesSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListMilestonesSort) Reset() {
	var v IssuesListMilestonesSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListMilestonesSort) SetTo(v IssuesListMilestonesSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListMilestonesSort) Get() (v IssuesListMilestonesSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListMilestonesSort) Or(d IssuesListMilestonesSort) IssuesListMilestonesSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListMilestonesState returns new OptIssuesListMilestonesState with value set to v.
func NewOptIssuesListMilestonesState(v IssuesListMilestonesState) OptIssuesListMilestonesState {
	return OptIssuesListMilestonesState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListMilestonesState is optional IssuesListMilestonesState.
type OptIssuesListMilestonesState struct {
	Value IssuesListMilestonesState
	Set   bool
}

// IsSet returns true if OptIssuesListMilestonesState was set.
func (o OptIssuesListMilestonesState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListMilestonesState) Reset() {
	var v IssuesListMilestonesState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListMilestonesState) SetTo(v IssuesListMilestonesState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListMilestonesState) Get() (v IssuesListMilestonesState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListMilestonesState) Or(d IssuesListMilestonesState) IssuesListMilestonesState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListSort returns new OptIssuesListSort with value set to v.
func NewOptIssuesListSort(v IssuesListSort) OptIssuesListSort {
	return OptIssuesListSort{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListSort is optional IssuesListSort.
type OptIssuesListSort struct {
	Value IssuesListSort
	Set   bool
}

// IsSet returns true if OptIssuesListSort was set.
func (o OptIssuesListSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListSort) Reset() {
	var v IssuesListSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListSort) SetTo(v IssuesListSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListSort) Get() (v IssuesListSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListSort) Or(d IssuesListSort) IssuesListSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesListState returns new OptIssuesListState with value set to v.
func NewOptIssuesListState(v IssuesListState) OptIssuesListState {
	return OptIssuesListState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesListState is optional IssuesListState.
type OptIssuesListState struct {
	Value IssuesListState
	Set   bool
}

// IsSet returns true if OptIssuesListState was set.
func (o OptIssuesListState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesListState) Reset() {
	var v IssuesListState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesListState) SetTo(v IssuesListState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesListState) Get() (v IssuesListState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesListState) Or(d IssuesListState) IssuesListState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesLockReqLockReason returns new OptIssuesLockReqLockReason with value set to v.
func NewOptIssuesLockReqLockReason(v IssuesLockReqLockReason) OptIssuesLockReqLockReason {
	return OptIssuesLockReqLockReason{
		Value: v,
		Set:   true,
	}
}

// OptIssuesLockReqLockReason is optional IssuesLockReqLockReason.
type OptIssuesLockReqLockReason struct {
	Value IssuesLockReqLockReason
	Set   bool
}

// IsSet returns true if OptIssuesLockReqLockReason was set.
func (o OptIssuesLockReqLockReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesLockReqLockReason) Reset() {
	var v IssuesLockReqLockReason
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesLockReqLockReason) SetTo(v IssuesLockReqLockReason) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesLockReqLockReason) Get() (v IssuesLockReqLockReason, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesLockReqLockReason) Or(d IssuesLockReqLockReason) IssuesLockReqLockReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesRemoveAssigneesReq returns new OptIssuesRemoveAssigneesReq with value set to v.
func NewOptIssuesRemoveAssigneesReq(v IssuesRemoveAssigneesReq) OptIssuesRemoveAssigneesReq {
	return OptIssuesRemoveAssigneesReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesRemoveAssigneesReq is optional IssuesRemoveAssigneesReq.
type OptIssuesRemoveAssigneesReq struct {
	Value IssuesRemoveAssigneesReq
	Set   bool
}

// IsSet returns true if OptIssuesRemoveAssigneesReq was set.
func (o OptIssuesRemoveAssigneesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesRemoveAssigneesReq) Reset() {
	var v IssuesRemoveAssigneesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesRemoveAssigneesReq) SetTo(v IssuesRemoveAssigneesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesRemoveAssigneesReq) Get() (v IssuesRemoveAssigneesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesRemoveAssigneesReq) Or(d IssuesRemoveAssigneesReq) IssuesRemoveAssigneesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateLabelReq returns new OptIssuesUpdateLabelReq with value set to v.
func NewOptIssuesUpdateLabelReq(v IssuesUpdateLabelReq) OptIssuesUpdateLabelReq {
	return OptIssuesUpdateLabelReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateLabelReq is optional IssuesUpdateLabelReq.
type OptIssuesUpdateLabelReq struct {
	Value IssuesUpdateLabelReq
	Set   bool
}

// IsSet returns true if OptIssuesUpdateLabelReq was set.
func (o OptIssuesUpdateLabelReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateLabelReq) Reset() {
	var v IssuesUpdateLabelReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateLabelReq) SetTo(v IssuesUpdateLabelReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateLabelReq) Get() (v IssuesUpdateLabelReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateLabelReq) Or(d IssuesUpdateLabelReq) IssuesUpdateLabelReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateMilestoneReq returns new OptIssuesUpdateMilestoneReq with value set to v.
func NewOptIssuesUpdateMilestoneReq(v IssuesUpdateMilestoneReq) OptIssuesUpdateMilestoneReq {
	return OptIssuesUpdateMilestoneReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateMilestoneReq is optional IssuesUpdateMilestoneReq.
type OptIssuesUpdateMilestoneReq struct {
	Value IssuesUpdateMilestoneReq
	Set   bool
}

// IsSet returns true if OptIssuesUpdateMilestoneReq was set.
func (o OptIssuesUpdateMilestoneReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateMilestoneReq) Reset() {
	var v IssuesUpdateMilestoneReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateMilestoneReq) SetTo(v IssuesUpdateMilestoneReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateMilestoneReq) Get() (v IssuesUpdateMilestoneReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateMilestoneReq) Or(d IssuesUpdateMilestoneReq) IssuesUpdateMilestoneReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateMilestoneReqState returns new OptIssuesUpdateMilestoneReqState with value set to v.
func NewOptIssuesUpdateMilestoneReqState(v IssuesUpdateMilestoneReqState) OptIssuesUpdateMilestoneReqState {
	return OptIssuesUpdateMilestoneReqState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateMilestoneReqState is optional IssuesUpdateMilestoneReqState.
type OptIssuesUpdateMilestoneReqState struct {
	Value IssuesUpdateMilestoneReqState
	Set   bool
}

// IsSet returns true if OptIssuesUpdateMilestoneReqState was set.
func (o OptIssuesUpdateMilestoneReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateMilestoneReqState) Reset() {
	var v IssuesUpdateMilestoneReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateMilestoneReqState) SetTo(v IssuesUpdateMilestoneReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateMilestoneReqState) Get() (v IssuesUpdateMilestoneReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateMilestoneReqState) Or(d IssuesUpdateMilestoneReqState) IssuesUpdateMilestoneReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateReq returns new OptIssuesUpdateReq with value set to v.
func NewOptIssuesUpdateReq(v IssuesUpdateReq) OptIssuesUpdateReq {
	return OptIssuesUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateReq is optional IssuesUpdateReq.
type OptIssuesUpdateReq struct {
	Value IssuesUpdateReq
	Set   bool
}

// IsSet returns true if OptIssuesUpdateReq was set.
func (o OptIssuesUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateReq) Reset() {
	var v IssuesUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateReq) SetTo(v IssuesUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateReq) Get() (v IssuesUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateReq) Or(d IssuesUpdateReq) IssuesUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIssuesUpdateReqState returns new OptIssuesUpdateReqState with value set to v.
func NewOptIssuesUpdateReqState(v IssuesUpdateReqState) OptIssuesUpdateReqState {
	return OptIssuesUpdateReqState{
		Value: v,
		Set:   true,
	}
}

// OptIssuesUpdateReqState is optional IssuesUpdateReqState.
type OptIssuesUpdateReqState struct {
	Value IssuesUpdateReqState
	Set   bool
}

// IsSet returns true if OptIssuesUpdateReqState was set.
func (o OptIssuesUpdateReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIssuesUpdateReqState) Reset() {
	var v IssuesUpdateReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIssuesUpdateReqState) SetTo(v IssuesUpdateReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIssuesUpdateReqState) Get() (v IssuesUpdateReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIssuesUpdateReqState) Or(d IssuesUpdateReqState) IssuesUpdateReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkWithType returns new OptLinkWithType with value set to v.
func NewOptLinkWithType(v LinkWithType) OptLinkWithType {
	return OptLinkWithType{
		Value: v,
		Set:   true,
	}
}

// OptLinkWithType is optional LinkWithType.
type OptLinkWithType struct {
	Value LinkWithType
	Set   bool
}

// IsSet returns true if OptLinkWithType was set.
func (o OptLinkWithType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkWithType) Reset() {
	var v LinkWithType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkWithType) SetTo(v LinkWithType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkWithType) Get() (v LinkWithType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkWithType) Or(d LinkWithType) LinkWithType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMarkdownRenderReqMode returns new OptMarkdownRenderReqMode with value set to v.
func NewOptMarkdownRenderReqMode(v MarkdownRenderReqMode) OptMarkdownRenderReqMode {
	return OptMarkdownRenderReqMode{
		Value: v,
		Set:   true,
	}
}

// OptMarkdownRenderReqMode is optional MarkdownRenderReqMode.
type OptMarkdownRenderReqMode struct {
	Value MarkdownRenderReqMode
	Set   bool
}

// IsSet returns true if OptMarkdownRenderReqMode was set.
func (o OptMarkdownRenderReqMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMarkdownRenderReqMode) Reset() {
	var v MarkdownRenderReqMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMarkdownRenderReqMode) SetTo(v MarkdownRenderReqMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMarkdownRenderReqMode) Get() (v MarkdownRenderReqMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMarkdownRenderReqMode) Or(d MarkdownRenderReqMode) MarkdownRenderReqMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMarketplaceListingPlan returns new OptMarketplaceListingPlan with value set to v.
func NewOptMarketplaceListingPlan(v MarketplaceListingPlan) OptMarketplaceListingPlan {
	return OptMarketplaceListingPlan{
		Value: v,
		Set:   true,
	}
}

// OptMarketplaceListingPlan is optional MarketplaceListingPlan.
type OptMarketplaceListingPlan struct {
	Value MarketplaceListingPlan
	Set   bool
}

// IsSet returns true if OptMarketplaceListingPlan was set.
func (o OptMarketplaceListingPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMarketplaceListingPlan) Reset() {
	var v MarketplaceListingPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMarketplaceListingPlan) SetTo(v MarketplaceListingPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMarketplaceListingPlan) Get() (v MarketplaceListingPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMarketplaceListingPlan) Or(d MarketplaceListingPlan) MarketplaceListingPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMergedUpstreamMergeType returns new OptMergedUpstreamMergeType with value set to v.
func NewOptMergedUpstreamMergeType(v MergedUpstreamMergeType) OptMergedUpstreamMergeType {
	return OptMergedUpstreamMergeType{
		Value: v,
		Set:   true,
	}
}

// OptMergedUpstreamMergeType is optional MergedUpstreamMergeType.
type OptMergedUpstreamMergeType struct {
	Value MergedUpstreamMergeType
	Set   bool
}

// IsSet returns true if OptMergedUpstreamMergeType was set.
func (o OptMergedUpstreamMergeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMergedUpstreamMergeType) Reset() {
	var v MergedUpstreamMergeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMergedUpstreamMergeType) SetTo(v MergedUpstreamMergeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMergedUpstreamMergeType) Get() (v MergedUpstreamMergeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMergedUpstreamMergeType) Or(d MergedUpstreamMergeType) MergedUpstreamMergeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrationsMapCommitAuthorReq returns new OptMigrationsMapCommitAuthorReq with value set to v.
func NewOptMigrationsMapCommitAuthorReq(v MigrationsMapCommitAuthorReq) OptMigrationsMapCommitAuthorReq {
	return OptMigrationsMapCommitAuthorReq{
		Value: v,
		Set:   true,
	}
}

// OptMigrationsMapCommitAuthorReq is optional MigrationsMapCommitAuthorReq.
type OptMigrationsMapCommitAuthorReq struct {
	Value MigrationsMapCommitAuthorReq
	Set   bool
}

// IsSet returns true if OptMigrationsMapCommitAuthorReq was set.
func (o OptMigrationsMapCommitAuthorReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrationsMapCommitAuthorReq) Reset() {
	var v MigrationsMapCommitAuthorReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrationsMapCommitAuthorReq) SetTo(v MigrationsMapCommitAuthorReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrationsMapCommitAuthorReq) Get() (v MigrationsMapCommitAuthorReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrationsMapCommitAuthorReq) Or(d MigrationsMapCommitAuthorReq) MigrationsMapCommitAuthorReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrationsStartImportReqVcs returns new OptMigrationsStartImportReqVcs with value set to v.
func NewOptMigrationsStartImportReqVcs(v MigrationsStartImportReqVcs) OptMigrationsStartImportReqVcs {
	return OptMigrationsStartImportReqVcs{
		Value: v,
		Set:   true,
	}
}

// OptMigrationsStartImportReqVcs is optional MigrationsStartImportReqVcs.
type OptMigrationsStartImportReqVcs struct {
	Value MigrationsStartImportReqVcs
	Set   bool
}

// IsSet returns true if OptMigrationsStartImportReqVcs was set.
func (o OptMigrationsStartImportReqVcs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrationsStartImportReqVcs) Reset() {
	var v MigrationsStartImportReqVcs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrationsStartImportReqVcs) SetTo(v MigrationsStartImportReqVcs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrationsStartImportReqVcs) Get() (v MigrationsStartImportReqVcs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrationsStartImportReqVcs) Or(d MigrationsStartImportReqVcs) MigrationsStartImportReqVcs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMinimalRepository returns new OptMinimalRepository with value set to v.
func NewOptMinimalRepository(v MinimalRepository) OptMinimalRepository {
	return OptMinimalRepository{
		Value: v,
		Set:   true,
	}
}

// OptMinimalRepository is optional MinimalRepository.
type OptMinimalRepository struct {
	Value MinimalRepository
	Set   bool
}

// IsSet returns true if OptMinimalRepository was set.
func (o OptMinimalRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMinimalRepository) Reset() {
	var v MinimalRepository
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMinimalRepository) SetTo(v MinimalRepository) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMinimalRepository) Get() (v MinimalRepository, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMinimalRepository) Or(d MinimalRepository) MinimalRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMinimalRepositoryPermissions returns new OptMinimalRepositoryPermissions with value set to v.
func NewOptMinimalRepositoryPermissions(v MinimalRepositoryPermissions) OptMinimalRepositoryPermissions {
	return OptMinimalRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptMinimalRepositoryPermissions is optional MinimalRepositoryPermissions.
type OptMinimalRepositoryPermissions struct {
	Value MinimalRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptMinimalRepositoryPermissions was set.
func (o OptMinimalRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMinimalRepositoryPermissions) Reset() {
	var v MinimalRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMinimalRepositoryPermissions) SetTo(v MinimalRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMinimalRepositoryPermissions) Get() (v MinimalRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMinimalRepositoryPermissions) Or(d MinimalRepositoryPermissions) MinimalRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertDismissedReason returns new OptNilCodeScanningAlertDismissedReason with value set to v.
func NewOptNilCodeScanningAlertDismissedReason(v CodeScanningAlertDismissedReason) OptNilCodeScanningAlertDismissedReason {
	return OptNilCodeScanningAlertDismissedReason{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertDismissedReason is optional nullable CodeScanningAlertDismissedReason.
type OptNilCodeScanningAlertDismissedReason struct {
	Value CodeScanningAlertDismissedReason
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertDismissedReason was set.
func (o OptNilCodeScanningAlertDismissedReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertDismissedReason) Reset() {
	var v CodeScanningAlertDismissedReason
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertDismissedReason) SetTo(v CodeScanningAlertDismissedReason) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertDismissedReason) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCodeScanningAlertDismissedReason) SetToNull() {
	o.Set = true
	o.Null = true
	var v CodeScanningAlertDismissedReason
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertDismissedReason) Get() (v CodeScanningAlertDismissedReason, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertDismissedReason) Or(d CodeScanningAlertDismissedReason) CodeScanningAlertDismissedReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertRuleSecuritySeverityLevel returns new OptNilCodeScanningAlertRuleSecuritySeverityLevel with value set to v.
func NewOptNilCodeScanningAlertRuleSecuritySeverityLevel(v CodeScanningAlertRuleSecuritySeverityLevel) OptNilCodeScanningAlertRuleSecuritySeverityLevel {
	return OptNilCodeScanningAlertRuleSecuritySeverityLevel{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertRuleSecuritySeverityLevel is optional nullable CodeScanningAlertRuleSecuritySeverityLevel.
type OptNilCodeScanningAlertRuleSecuritySeverityLevel struct {
	Value CodeScanningAlertRuleSecuritySeverityLevel
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertRuleSecuritySeverityLevel was set.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertRuleSecuritySeverityLevel) Reset() {
	var v CodeScanningAlertRuleSecuritySeverityLevel
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertRuleSecuritySeverityLevel) SetTo(v CodeScanningAlertRuleSecuritySeverityLevel) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCodeScanningAlertRuleSecuritySeverityLevel) SetToNull() {
	o.Set = true
	o.Null = true
	var v CodeScanningAlertRuleSecuritySeverityLevel
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) Get() (v CodeScanningAlertRuleSecuritySeverityLevel, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertRuleSecuritySeverityLevel) Or(d CodeScanningAlertRuleSecuritySeverityLevel) CodeScanningAlertRuleSecuritySeverityLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertRuleSeverity returns new OptNilCodeScanningAlertRuleSeverity with value set to v.
func NewOptNilCodeScanningAlertRuleSeverity(v CodeScanningAlertRuleSeverity) OptNilCodeScanningAlertRuleSeverity {
	return OptNilCodeScanningAlertRuleSeverity{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertRuleSeverity is optional nullable CodeScanningAlertRuleSeverity.
type OptNilCodeScanningAlertRuleSeverity struct {
	Value CodeScanningAlertRuleSeverity
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertRuleSeverity was set.
func (o OptNilCodeScanningAlertRuleSeverity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertRuleSeverity) Reset() {
	var v CodeScanningAlertRuleSeverity
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertRuleSeverity) SetTo(v CodeScanningAlertRuleSeverity) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertRuleSeverity) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCodeScanningAlertRuleSeverity) SetToNull() {
	o.Set = true
	o.Null = true
	var v CodeScanningAlertRuleSeverity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertRuleSeverity) Get() (v CodeScanningAlertRuleSeverity, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertRuleSeverity) Or(d CodeScanningAlertRuleSeverity) CodeScanningAlertRuleSeverity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAlertRuleSummarySeverity returns new OptNilCodeScanningAlertRuleSummarySeverity with value set to v.
func NewOptNilCodeScanningAlertRuleSummarySeverity(v CodeScanningAlertRuleSummarySeverity) OptNilCodeScanningAlertRuleSummarySeverity {
	return OptNilCodeScanningAlertRuleSummarySeverity{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAlertRuleSummarySeverity is optional nullable CodeScanningAlertRuleSummarySeverity.
type OptNilCodeScanningAlertRuleSummarySeverity struct {
	Value CodeScanningAlertRuleSummarySeverity
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAlertRuleSummarySeverity was set.
func (o OptNilCodeScanningAlertRuleSummarySeverity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAlertRuleSummarySeverity) Reset() {
	var v CodeScanningAlertRuleSummarySeverity
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAlertRuleSummarySeverity) SetTo(v CodeScanningAlertRuleSummarySeverity) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAlertRuleSummarySeverity) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCodeScanningAlertRuleSummarySeverity) SetToNull() {
	o.Set = true
	o.Null = true
	var v CodeScanningAlertRuleSummarySeverity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAlertRuleSummarySeverity) Get() (v CodeScanningAlertRuleSummarySeverity, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAlertRuleSummarySeverity) Or(d CodeScanningAlertRuleSummarySeverity) CodeScanningAlertRuleSummarySeverity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAnalysisToolGUID returns new OptNilCodeScanningAnalysisToolGUID with value set to v.
func NewOptNilCodeScanningAnalysisToolGUID(v CodeScanningAnalysisToolGUID) OptNilCodeScanningAnalysisToolGUID {
	return OptNilCodeScanningAnalysisToolGUID{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAnalysisToolGUID is optional nullable CodeScanningAnalysisToolGUID.
type OptNilCodeScanningAnalysisToolGUID struct {
	Value CodeScanningAnalysisToolGUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAnalysisToolGUID was set.
func (o OptNilCodeScanningAnalysisToolGUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAnalysisToolGUID) Reset() {
	var v CodeScanningAnalysisToolGUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAnalysisToolGUID) SetTo(v CodeScanningAnalysisToolGUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAnalysisToolGUID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCodeScanningAnalysisToolGUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v CodeScanningAnalysisToolGUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAnalysisToolGUID) Get() (v CodeScanningAnalysisToolGUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAnalysisToolGUID) Or(d CodeScanningAnalysisToolGUID) CodeScanningAnalysisToolGUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCodeScanningAnalysisToolVersion returns new OptNilCodeScanningAnalysisToolVersion with value set to v.
func NewOptNilCodeScanningAnalysisToolVersion(v CodeScanningAnalysisToolVersion) OptNilCodeScanningAnalysisToolVersion {
	return OptNilCodeScanningAnalysisToolVersion{
		Value: v,
		Set:   true,
	}
}

// OptNilCodeScanningAnalysisToolVersion is optional nullable CodeScanningAnalysisToolVersion.
type OptNilCodeScanningAnalysisToolVersion struct {
	Value CodeScanningAnalysisToolVersion
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCodeScanningAnalysisToolVersion was set.
func (o OptNilCodeScanningAnalysisToolVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCodeScanningAnalysisToolVersion) Reset() {
	var v CodeScanningAnalysisToolVersion
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCodeScanningAnalysisToolVersion) SetTo(v CodeScanningAnalysisToolVersion) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCodeScanningAnalysisToolVersion) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCodeScanningAnalysisToolVersion) SetToNull() {
	o.Set = true
	o.Null = true
	var v CodeScanningAnalysisToolVersion
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCodeScanningAnalysisToolVersion) Get() (v CodeScanningAnalysisToolVersion, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCodeScanningAnalysisToolVersion) Or(d CodeScanningAnalysisToolVersion) CodeScanningAnalysisToolVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFullRepositorySecurityAndAnalysis returns new OptNilFullRepositorySecurityAndAnalysis with value set to v.
func NewOptNilFullRepositorySecurityAndAnalysis(v FullRepositorySecurityAndAnalysis) OptNilFullRepositorySecurityAndAnalysis {
	return OptNilFullRepositorySecurityAndAnalysis{
		Value: v,
		Set:   true,
	}
}

// OptNilFullRepositorySecurityAndAnalysis is optional nullable FullRepositorySecurityAndAnalysis.
type OptNilFullRepositorySecurityAndAnalysis struct {
	Value FullRepositorySecurityAndAnalysis
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFullRepositorySecurityAndAnalysis was set.
func (o OptNilFullRepositorySecurityAndAnalysis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFullRepositorySecurityAndAnalysis) Reset() {
	var v FullRepositorySecurityAndAnalysis
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFullRepositorySecurityAndAnalysis) SetTo(v FullRepositorySecurityAndAnalysis) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFullRepositorySecurityAndAnalysis) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFullRepositorySecurityAndAnalysis) SetToNull() {
	o.Set = true
	o.Null = true
	var v FullRepositorySecurityAndAnalysis
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFullRepositorySecurityAndAnalysis) Get() (v FullRepositorySecurityAndAnalysis, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFullRepositorySecurityAndAnalysis) Or(d FullRepositorySecurityAndAnalysis) FullRepositorySecurityAndAnalysis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGistHistoryArray returns new OptNilGistHistoryArray with value set to v.
func NewOptNilGistHistoryArray(v []GistHistory) OptNilGistHistoryArray {
	return OptNilGistHistoryArray{
		Value: v,
		Set:   true,
	}
}

// OptNilGistHistoryArray is optional nullable []GistHistory.
type OptNilGistHistoryArray struct {
	Value []GistHistory
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGistHistoryArray was set.
func (o OptNilGistHistoryArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGistHistoryArray) Reset() {
	var v []GistHistory
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGistHistoryArray) SetTo(v []GistHistory) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGistHistoryArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGistHistoryArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []GistHistory
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGistHistoryArray) Get() (v []GistHistory, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGistHistoryArray) Or(d []GistHistory) []GistHistory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGistSimpleForkOf returns new OptNilGistSimpleForkOf with value set to v.
func NewOptNilGistSimpleForkOf(v GistSimpleForkOf) OptNilGistSimpleForkOf {
	return OptNilGistSimpleForkOf{
		Value: v,
		Set:   true,
	}
}

// OptNilGistSimpleForkOf is optional nullable GistSimpleForkOf.
type OptNilGistSimpleForkOf struct {
	Value GistSimpleForkOf
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGistSimpleForkOf was set.
func (o OptNilGistSimpleForkOf) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGistSimpleForkOf) Reset() {
	var v GistSimpleForkOf
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGistSimpleForkOf) SetTo(v GistSimpleForkOf) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGistSimpleForkOf) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGistSimpleForkOf) SetToNull() {
	o.Set = true
	o.Null = true
	var v GistSimpleForkOf
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGistSimpleForkOf) Get() (v GistSimpleForkOf, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGistSimpleForkOf) Or(d GistSimpleForkOf) GistSimpleForkOf {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGistSimpleForksItemArray returns new OptNilGistSimpleForksItemArray with value set to v.
func NewOptNilGistSimpleForksItemArray(v []GistSimpleForksItem) OptNilGistSimpleForksItemArray {
	return OptNilGistSimpleForksItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilGistSimpleForksItemArray is optional nullable []GistSimpleForksItem.
type OptNilGistSimpleForksItemArray struct {
	Value []GistSimpleForksItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGistSimpleForksItemArray was set.
func (o OptNilGistSimpleForksItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGistSimpleForksItemArray) Reset() {
	var v []GistSimpleForksItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGistSimpleForksItemArray) SetTo(v []GistSimpleForksItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGistSimpleForksItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGistSimpleForksItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []GistSimpleForksItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGistSimpleForksItemArray) Get() (v []GistSimpleForksItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGistSimpleForksItemArray) Or(d []GistSimpleForksItem) []GistSimpleForksItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesCreateReqMilestone returns new OptNilIssuesCreateReqMilestone with value set to v.
func NewOptNilIssuesCreateReqMilestone(v IssuesCreateReqMilestone) OptNilIssuesCreateReqMilestone {
	return OptNilIssuesCreateReqMilestone{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesCreateReqMilestone is optional nullable IssuesCreateReqMilestone.
type OptNilIssuesCreateReqMilestone struct {
	Value IssuesCreateReqMilestone
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesCreateReqMilestone was set.
func (o OptNilIssuesCreateReqMilestone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesCreateReqMilestone) Reset() {
	var v IssuesCreateReqMilestone
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesCreateReqMilestone) SetTo(v IssuesCreateReqMilestone) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesCreateReqMilestone) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIssuesCreateReqMilestone) SetToNull() {
	o.Set = true
	o.Null = true
	var v IssuesCreateReqMilestone
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesCreateReqMilestone) Get() (v IssuesCreateReqMilestone, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesCreateReqMilestone) Or(d IssuesCreateReqMilestone) IssuesCreateReqMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesLockReq returns new OptNilIssuesLockReq with value set to v.
func NewOptNilIssuesLockReq(v IssuesLockReq) OptNilIssuesLockReq {
	return OptNilIssuesLockReq{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesLockReq is optional nullable IssuesLockReq.
type OptNilIssuesLockReq struct {
	Value IssuesLockReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesLockReq was set.
func (o OptNilIssuesLockReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesLockReq) Reset() {
	var v IssuesLockReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesLockReq) SetTo(v IssuesLockReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesLockReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIssuesLockReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v IssuesLockReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesLockReq) Get() (v IssuesLockReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesLockReq) Or(d IssuesLockReq) IssuesLockReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesUpdateReqMilestone returns new OptNilIssuesUpdateReqMilestone with value set to v.
func NewOptNilIssuesUpdateReqMilestone(v IssuesUpdateReqMilestone) OptNilIssuesUpdateReqMilestone {
	return OptNilIssuesUpdateReqMilestone{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesUpdateReqMilestone is optional nullable IssuesUpdateReqMilestone.
type OptNilIssuesUpdateReqMilestone struct {
	Value IssuesUpdateReqMilestone
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesUpdateReqMilestone was set.
func (o OptNilIssuesUpdateReqMilestone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesUpdateReqMilestone) Reset() {
	var v IssuesUpdateReqMilestone
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesUpdateReqMilestone) SetTo(v IssuesUpdateReqMilestone) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesUpdateReqMilestone) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIssuesUpdateReqMilestone) SetToNull() {
	o.Set = true
	o.Null = true
	var v IssuesUpdateReqMilestone
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesUpdateReqMilestone) Get() (v IssuesUpdateReqMilestone, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesUpdateReqMilestone) Or(d IssuesUpdateReqMilestone) IssuesUpdateReqMilestone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIssuesUpdateReqTitle returns new OptNilIssuesUpdateReqTitle with value set to v.
func NewOptNilIssuesUpdateReqTitle(v IssuesUpdateReqTitle) OptNilIssuesUpdateReqTitle {
	return OptNilIssuesUpdateReqTitle{
		Value: v,
		Set:   true,
	}
}

// OptNilIssuesUpdateReqTitle is optional nullable IssuesUpdateReqTitle.
type OptNilIssuesUpdateReqTitle struct {
	Value IssuesUpdateReqTitle
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIssuesUpdateReqTitle was set.
func (o OptNilIssuesUpdateReqTitle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIssuesUpdateReqTitle) Reset() {
	var v IssuesUpdateReqTitle
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIssuesUpdateReqTitle) SetTo(v IssuesUpdateReqTitle) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIssuesUpdateReqTitle) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIssuesUpdateReqTitle) SetToNull() {
	o.Set = true
	o.Null = true
	var v IssuesUpdateReqTitle
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIssuesUpdateReqTitle) Get() (v IssuesUpdateReqTitle, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIssuesUpdateReqTitle) Or(d IssuesUpdateReqTitle) IssuesUpdateReqTitle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMarketplacePurchaseMarketplacePendingChange returns new OptNilMarketplacePurchaseMarketplacePendingChange with value set to v.
func NewOptNilMarketplacePurchaseMarketplacePendingChange(v MarketplacePurchaseMarketplacePendingChange) OptNilMarketplacePurchaseMarketplacePendingChange {
	return OptNilMarketplacePurchaseMarketplacePendingChange{
		Value: v,
		Set:   true,
	}
}

// OptNilMarketplacePurchaseMarketplacePendingChange is optional nullable MarketplacePurchaseMarketplacePendingChange.
type OptNilMarketplacePurchaseMarketplacePendingChange struct {
	Value MarketplacePurchaseMarketplacePendingChange
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMarketplacePurchaseMarketplacePendingChange was set.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) Reset() {
	var v MarketplacePurchaseMarketplacePendingChange
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) SetTo(v MarketplacePurchaseMarketplacePendingChange) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilMarketplacePurchaseMarketplacePendingChange) SetToNull() {
	o.Set = true
	o.Null = true
	var v MarketplacePurchaseMarketplacePendingChange
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) Get() (v MarketplacePurchaseMarketplacePendingChange, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMarketplacePurchaseMarketplacePendingChange) Or(d MarketplacePurchaseMarketplacePendingChange) MarketplacePurchaseMarketplacePendingChange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMigrationsUpdateImportReq returns new OptNilMigrationsUpdateImportReq with value set to v.
func NewOptNilMigrationsUpdateImportReq(v MigrationsUpdateImportReq) OptNilMigrationsUpdateImportReq {
	return OptNilMigrationsUpdateImportReq{
		Value: v,
		Set:   true,
	}
}

// OptNilMigrationsUpdateImportReq is optional nullable MigrationsUpdateImportReq.
type OptNilMigrationsUpdateImportReq struct {
	Value MigrationsUpdateImportReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMigrationsUpdateImportReq was set.
func (o OptNilMigrationsUpdateImportReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMigrationsUpdateImportReq) Reset() {
	var v MigrationsUpdateImportReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMigrationsUpdateImportReq) SetTo(v MigrationsUpdateImportReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMigrationsUpdateImportReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilMigrationsUpdateImportReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v MigrationsUpdateImportReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMigrationsUpdateImportReq) Get() (v MigrationsUpdateImportReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMigrationsUpdateImportReq) Or(d MigrationsUpdateImportReq) MigrationsUpdateImportReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMinimalRepositoryLicense returns new OptNilMinimalRepositoryLicense with value set to v.
func NewOptNilMinimalRepositoryLicense(v MinimalRepositoryLicense) OptNilMinimalRepositoryLicense {
	return OptNilMinimalRepositoryLicense{
		Value: v,
		Set:   true,
	}
}

// OptNilMinimalRepositoryLicense is optional nullable MinimalRepositoryLicense.
type OptNilMinimalRepositoryLicense struct {
	Value MinimalRepositoryLicense
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMinimalRepositoryLicense was set.
func (o OptNilMinimalRepositoryLicense) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMinimalRepositoryLicense) Reset() {
	var v MinimalRepositoryLicense
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMinimalRepositoryLicense) SetTo(v MinimalRepositoryLicense) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMinimalRepositoryLicense) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilMinimalRepositoryLicense) SetToNull() {
	o.Set = true
	o.Null = true
	var v MinimalRepositoryLicense
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMinimalRepositoryLicense) Get() (v MinimalRepositoryLicense, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMinimalRepositoryLicense) Or(d MinimalRepositoryLicense) MinimalRepositoryLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableIntegration returns new OptNilNullableIntegration with value set to v.
func NewOptNilNullableIntegration(v NullableIntegration) OptNilNullableIntegration {
	return OptNilNullableIntegration{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableIntegration is optional nullable NullableIntegration.
type OptNilNullableIntegration struct {
	Value NullableIntegration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableIntegration was set.
func (o OptNilNullableIntegration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableIntegration) Reset() {
	var v NullableIntegration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableIntegration) SetTo(v NullableIntegration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableIntegration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableIntegration) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableIntegration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableIntegration) Get() (v NullableIntegration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableIntegration) Or(d NullableIntegration) NullableIntegration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableMinimalRepository returns new OptNilNullableMinimalRepository with value set to v.
func NewOptNilNullableMinimalRepository(v NullableMinimalRepository) OptNilNullableMinimalRepository {
	return OptNilNullableMinimalRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableMinimalRepository is optional nullable NullableMinimalRepository.
type OptNilNullableMinimalRepository struct {
	Value NullableMinimalRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableMinimalRepository was set.
func (o OptNilNullableMinimalRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableMinimalRepository) Reset() {
	var v NullableMinimalRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableMinimalRepository) SetTo(v NullableMinimalRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableMinimalRepository) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableMinimalRepository) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableMinimalRepository
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableMinimalRepository) Get() (v NullableMinimalRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableMinimalRepository) Or(d NullableMinimalRepository) NullableMinimalRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableMinimalRepositoryLicense returns new OptNilNullableMinimalRepositoryLicense with value set to v.
func NewOptNilNullableMinimalRepositoryLicense(v NullableMinimalRepositoryLicense) OptNilNullableMinimalRepositoryLicense {
	return OptNilNullableMinimalRepositoryLicense{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableMinimalRepositoryLicense is optional nullable NullableMinimalRepositoryLicense.
type OptNilNullableMinimalRepositoryLicense struct {
	Value NullableMinimalRepositoryLicense
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableMinimalRepositoryLicense was set.
func (o OptNilNullableMinimalRepositoryLicense) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableMinimalRepositoryLicense) Reset() {
	var v NullableMinimalRepositoryLicense
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableMinimalRepositoryLicense) SetTo(v NullableMinimalRepositoryLicense) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableMinimalRepositoryLicense) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableMinimalRepositoryLicense) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableMinimalRepositoryLicense
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableMinimalRepositoryLicense) Get() (v NullableMinimalRepositoryLicense, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableMinimalRepositoryLicense) Or(d NullableMinimalRepositoryLicense) NullableMinimalRepositoryLicense {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableRepository returns new OptNilNullableRepository with value set to v.
func NewOptNilNullableRepository(v NullableRepository) OptNilNullableRepository {
	return OptNilNullableRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableRepository is optional nullable NullableRepository.
type OptNilNullableRepository struct {
	Value NullableRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableRepository was set.
func (o OptNilNullableRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableRepository) Reset() {
	var v NullableRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableRepository) SetTo(v NullableRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableRepository) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableRepository) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableRepository
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableRepository) Get() (v NullableRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableRepository) Or(d NullableRepository) NullableRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableRepositoryTemplateRepository returns new OptNilNullableRepositoryTemplateRepository with value set to v.
func NewOptNilNullableRepositoryTemplateRepository(v NullableRepositoryTemplateRepository) OptNilNullableRepositoryTemplateRepository {
	return OptNilNullableRepositoryTemplateRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableRepositoryTemplateRepository is optional nullable NullableRepositoryTemplateRepository.
type OptNilNullableRepositoryTemplateRepository struct {
	Value NullableRepositoryTemplateRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableRepositoryTemplateRepository was set.
func (o OptNilNullableRepositoryTemplateRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableRepositoryTemplateRepository) Reset() {
	var v NullableRepositoryTemplateRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableRepositoryTemplateRepository) SetTo(v NullableRepositoryTemplateRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableRepositoryTemplateRepository) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableRepositoryTemplateRepository) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableRepositoryTemplateRepository
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableRepositoryTemplateRepository) Get() (v NullableRepositoryTemplateRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableRepositoryTemplateRepository) Or(d NullableRepositoryTemplateRepository) NullableRepositoryTemplateRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableScopedInstallation returns new OptNilNullableScopedInstallation with value set to v.
func NewOptNilNullableScopedInstallation(v NullableScopedInstallation) OptNilNullableScopedInstallation {
	return OptNilNullableScopedInstallation{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableScopedInstallation is optional nullable NullableScopedInstallation.
type OptNilNullableScopedInstallation struct {
	Value NullableScopedInstallation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableScopedInstallation was set.
func (o OptNilNullableScopedInstallation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableScopedInstallation) Reset() {
	var v NullableScopedInstallation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableScopedInstallation) SetTo(v NullableScopedInstallation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableScopedInstallation) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableScopedInstallation) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableScopedInstallation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableScopedInstallation) Get() (v NullableScopedInstallation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableScopedInstallation) Or(d NullableScopedInstallation) NullableScopedInstallation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableSimpleUser returns new OptNilNullableSimpleUser with value set to v.
func NewOptNilNullableSimpleUser(v NullableSimpleUser) OptNilNullableSimpleUser {
	return OptNilNullableSimpleUser{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableSimpleUser is optional nullable NullableSimpleUser.
type OptNilNullableSimpleUser struct {
	Value NullableSimpleUser
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableSimpleUser was set.
func (o OptNilNullableSimpleUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableSimpleUser) Reset() {
	var v NullableSimpleUser
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableSimpleUser) SetTo(v NullableSimpleUser) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableSimpleUser) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableSimpleUser) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableSimpleUser
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableSimpleUser) Get() (v NullableSimpleUser, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableSimpleUser) Or(d NullableSimpleUser) NullableSimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNullableTeamSimple returns new OptNilNullableTeamSimple with value set to v.
func NewOptNilNullableTeamSimple(v NullableTeamSimple) OptNilNullableTeamSimple {
	return OptNilNullableTeamSimple{
		Value: v,
		Set:   true,
	}
}

// OptNilNullableTeamSimple is optional nullable NullableTeamSimple.
type OptNilNullableTeamSimple struct {
	Value NullableTeamSimple
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNullableTeamSimple was set.
func (o OptNilNullableTeamSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNullableTeamSimple) Reset() {
	var v NullableTeamSimple
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNullableTeamSimple) SetTo(v NullableTeamSimple) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNullableTeamSimple) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNullableTeamSimple) SetToNull() {
	o.Set = true
	o.Null = true
	var v NullableTeamSimple
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNullableTeamSimple) Get() (v NullableTeamSimple, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNullableTeamSimple) Or(d NullableTeamSimple) NullableTeamSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPageProtectedDomainState returns new OptNilPageProtectedDomainState with value set to v.
func NewOptNilPageProtectedDomainState(v PageProtectedDomainState) OptNilPageProtectedDomainState {
	return OptNilPageProtectedDomainState{
		Value: v,
		Set:   true,
	}
}

// OptNilPageProtectedDomainState is optional nullable PageProtectedDomainState.
type OptNilPageProtectedDomainState struct {
	Value PageProtectedDomainState
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPageProtectedDomainState was set.
func (o OptNilPageProtectedDomainState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPageProtectedDomainState) Reset() {
	var v PageProtectedDomainState
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPageProtectedDomainState) SetTo(v PageProtectedDomainState) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPageProtectedDomainState) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPageProtectedDomainState) SetToNull() {
	o.Set = true
	o.Null = true
	var v PageProtectedDomainState
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPageProtectedDomainState) Get() (v PageProtectedDomainState, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPageProtectedDomainState) Or(d PageProtectedDomainState) PageProtectedDomainState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPagesHealthCheckAltDomain returns new OptNilPagesHealthCheckAltDomain with value set to v.
func NewOptNilPagesHealthCheckAltDomain(v PagesHealthCheckAltDomain) OptNilPagesHealthCheckAltDomain {
	return OptNilPagesHealthCheckAltDomain{
		Value: v,
		Set:   true,
	}
}

// OptNilPagesHealthCheckAltDomain is optional nullable PagesHealthCheckAltDomain.
type OptNilPagesHealthCheckAltDomain struct {
	Value PagesHealthCheckAltDomain
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPagesHealthCheckAltDomain was set.
func (o OptNilPagesHealthCheckAltDomain) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPagesHealthCheckAltDomain) Reset() {
	var v PagesHealthCheckAltDomain
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPagesHealthCheckAltDomain) SetTo(v PagesHealthCheckAltDomain) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPagesHealthCheckAltDomain) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPagesHealthCheckAltDomain) SetToNull() {
	o.Set = true
	o.Null = true
	var v PagesHealthCheckAltDomain
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPagesHealthCheckAltDomain) Get() (v PagesHealthCheckAltDomain, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPagesHealthCheckAltDomain) Or(d PagesHealthCheckAltDomain) PagesHealthCheckAltDomain {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilProjectsAddCollaboratorReq returns new OptNilProjectsAddCollaboratorReq with value set to v.
func NewOptNilProjectsAddCollaboratorReq(v ProjectsAddCollaboratorReq) OptNilProjectsAddCollaboratorReq {
	return OptNilProjectsAddCollaboratorReq{
		Value: v,
		Set:   true,
	}
}

// OptNilProjectsAddCollaboratorReq is optional nullable ProjectsAddCollaboratorReq.
type OptNilProjectsAddCollaboratorReq struct {
	Value ProjectsAddCollaboratorReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilProjectsAddCollaboratorReq was set.
func (o OptNilProjectsAddCollaboratorReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilProjectsAddCollaboratorReq) Reset() {
	var v ProjectsAddCollaboratorReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilProjectsAddCollaboratorReq) SetTo(v ProjectsAddCollaboratorReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilProjectsAddCollaboratorReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilProjectsAddCollaboratorReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v ProjectsAddCollaboratorReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilProjectsAddCollaboratorReq) Get() (v ProjectsAddCollaboratorReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilProjectsAddCollaboratorReq) Or(d ProjectsAddCollaboratorReq) ProjectsAddCollaboratorReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPullRequestReviewCommentStartSide returns new OptNilPullRequestReviewCommentStartSide with value set to v.
func NewOptNilPullRequestReviewCommentStartSide(v PullRequestReviewCommentStartSide) OptNilPullRequestReviewCommentStartSide {
	return OptNilPullRequestReviewCommentStartSide{
		Value: v,
		Set:   true,
	}
}

// OptNilPullRequestReviewCommentStartSide is optional nullable PullRequestReviewCommentStartSide.
type OptNilPullRequestReviewCommentStartSide struct {
	Value PullRequestReviewCommentStartSide
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPullRequestReviewCommentStartSide was set.
func (o OptNilPullRequestReviewCommentStartSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPullRequestReviewCommentStartSide) Reset() {
	var v PullRequestReviewCommentStartSide
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPullRequestReviewCommentStartSide) SetTo(v PullRequestReviewCommentStartSide) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPullRequestReviewCommentStartSide) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPullRequestReviewCommentStartSide) SetToNull() {
	o.Set = true
	o.Null = true
	var v PullRequestReviewCommentStartSide
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPullRequestReviewCommentStartSide) Get() (v PullRequestReviewCommentStartSide, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPullRequestReviewCommentStartSide) Or(d PullRequestReviewCommentStartSide) PullRequestReviewCommentStartSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPullsMergeReq returns new OptNilPullsMergeReq with value set to v.
func NewOptNilPullsMergeReq(v PullsMergeReq) OptNilPullsMergeReq {
	return OptNilPullsMergeReq{
		Value: v,
		Set:   true,
	}
}

// OptNilPullsMergeReq is optional nullable PullsMergeReq.
type OptNilPullsMergeReq struct {
	Value PullsMergeReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPullsMergeReq was set.
func (o OptNilPullsMergeReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPullsMergeReq) Reset() {
	var v PullsMergeReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPullsMergeReq) SetTo(v PullsMergeReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPullsMergeReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPullsMergeReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v PullsMergeReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPullsMergeReq) Get() (v PullsMergeReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPullsMergeReq) Or(d PullsMergeReq) PullsMergeReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPullsUpdateBranchReq returns new OptNilPullsUpdateBranchReq with value set to v.
func NewOptNilPullsUpdateBranchReq(v PullsUpdateBranchReq) OptNilPullsUpdateBranchReq {
	return OptNilPullsUpdateBranchReq{
		Value: v,
		Set:   true,
	}
}

// OptNilPullsUpdateBranchReq is optional nullable PullsUpdateBranchReq.
type OptNilPullsUpdateBranchReq struct {
	Value PullsUpdateBranchReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPullsUpdateBranchReq was set.
func (o OptNilPullsUpdateBranchReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPullsUpdateBranchReq) Reset() {
	var v PullsUpdateBranchReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPullsUpdateBranchReq) SetTo(v PullsUpdateBranchReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPullsUpdateBranchReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPullsUpdateBranchReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v PullsUpdateBranchReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPullsUpdateBranchReq) Get() (v PullsUpdateBranchReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPullsUpdateBranchReq) Or(d PullsUpdateBranchReq) PullsUpdateBranchReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReposCreateForkReq returns new OptNilReposCreateForkReq with value set to v.
func NewOptNilReposCreateForkReq(v ReposCreateForkReq) OptNilReposCreateForkReq {
	return OptNilReposCreateForkReq{
		Value: v,
		Set:   true,
	}
}

// OptNilReposCreateForkReq is optional nullable ReposCreateForkReq.
type OptNilReposCreateForkReq struct {
	Value ReposCreateForkReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReposCreateForkReq was set.
func (o OptNilReposCreateForkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReposCreateForkReq) Reset() {
	var v ReposCreateForkReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReposCreateForkReq) SetTo(v ReposCreateForkReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReposCreateForkReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReposCreateForkReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReposCreateForkReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReposCreateForkReq) Get() (v ReposCreateForkReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReposCreateForkReq) Or(d ReposCreateForkReq) ReposCreateForkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReposCreateWebhookReq returns new OptNilReposCreateWebhookReq with value set to v.
func NewOptNilReposCreateWebhookReq(v ReposCreateWebhookReq) OptNilReposCreateWebhookReq {
	return OptNilReposCreateWebhookReq{
		Value: v,
		Set:   true,
	}
}

// OptNilReposCreateWebhookReq is optional nullable ReposCreateWebhookReq.
type OptNilReposCreateWebhookReq struct {
	Value ReposCreateWebhookReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReposCreateWebhookReq was set.
func (o OptNilReposCreateWebhookReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReposCreateWebhookReq) Reset() {
	var v ReposCreateWebhookReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReposCreateWebhookReq) SetTo(v ReposCreateWebhookReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReposCreateWebhookReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReposCreateWebhookReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReposCreateWebhookReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReposCreateWebhookReq) Get() (v ReposCreateWebhookReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReposCreateWebhookReq) Or(d ReposCreateWebhookReq) ReposCreateWebhookReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReposUpdateReqSecurityAndAnalysis returns new OptNilReposUpdateReqSecurityAndAnalysis with value set to v.
func NewOptNilReposUpdateReqSecurityAndAnalysis(v ReposUpdateReqSecurityAndAnalysis) OptNilReposUpdateReqSecurityAndAnalysis {
	return OptNilReposUpdateReqSecurityAndAnalysis{
		Value: v,
		Set:   true,
	}
}

// OptNilReposUpdateReqSecurityAndAnalysis is optional nullable ReposUpdateReqSecurityAndAnalysis.
type OptNilReposUpdateReqSecurityAndAnalysis struct {
	Value ReposUpdateReqSecurityAndAnalysis
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReposUpdateReqSecurityAndAnalysis was set.
func (o OptNilReposUpdateReqSecurityAndAnalysis) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReposUpdateReqSecurityAndAnalysis) Reset() {
	var v ReposUpdateReqSecurityAndAnalysis
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReposUpdateReqSecurityAndAnalysis) SetTo(v ReposUpdateReqSecurityAndAnalysis) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReposUpdateReqSecurityAndAnalysis) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReposUpdateReqSecurityAndAnalysis) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReposUpdateReqSecurityAndAnalysis
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReposUpdateReqSecurityAndAnalysis) Get() (v ReposUpdateReqSecurityAndAnalysis, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReposUpdateReqSecurityAndAnalysis) Or(d ReposUpdateReqSecurityAndAnalysis) ReposUpdateReqSecurityAndAnalysis {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRepositoryTemplateRepository returns new OptNilRepositoryTemplateRepository with value set to v.
func NewOptNilRepositoryTemplateRepository(v RepositoryTemplateRepository) OptNilRepositoryTemplateRepository {
	return OptNilRepositoryTemplateRepository{
		Value: v,
		Set:   true,
	}
}

// OptNilRepositoryTemplateRepository is optional nullable RepositoryTemplateRepository.
type OptNilRepositoryTemplateRepository struct {
	Value RepositoryTemplateRepository
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRepositoryTemplateRepository was set.
func (o OptNilRepositoryTemplateRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRepositoryTemplateRepository) Reset() {
	var v RepositoryTemplateRepository
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRepositoryTemplateRepository) SetTo(v RepositoryTemplateRepository) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRepositoryTemplateRepository) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRepositoryTemplateRepository) SetToNull() {
	o.Set = true
	o.Null = true
	var v RepositoryTemplateRepository
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRepositoryTemplateRepository) Get() (v RepositoryTemplateRepository, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRepositoryTemplateRepository) Or(d RepositoryTemplateRepository) RepositoryTemplateRepository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReviewCommentStartSide returns new OptNilReviewCommentStartSide with value set to v.
func NewOptNilReviewCommentStartSide(v ReviewCommentStartSide) OptNilReviewCommentStartSide {
	return OptNilReviewCommentStartSide{
		Value: v,
		Set:   true,
	}
}

// OptNilReviewCommentStartSide is optional nullable ReviewCommentStartSide.
type OptNilReviewCommentStartSide struct {
	Value ReviewCommentStartSide
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReviewCommentStartSide was set.
func (o OptNilReviewCommentStartSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReviewCommentStartSide) Reset() {
	var v ReviewCommentStartSide
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReviewCommentStartSide) SetTo(v ReviewCommentStartSide) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReviewCommentStartSide) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReviewCommentStartSide) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReviewCommentStartSide
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReviewCommentStartSide) Get() (v ReviewCommentStartSide, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReviewCommentStartSide) Or(d ReviewCommentStartSide) ReviewCommentStartSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSecretScanningAlertResolution returns new OptNilSecretScanningAlertResolution with value set to v.
func NewOptNilSecretScanningAlertResolution(v SecretScanningAlertResolution) OptNilSecretScanningAlertResolution {
	return OptNilSecretScanningAlertResolution{
		Value: v,
		Set:   true,
	}
}

// OptNilSecretScanningAlertResolution is optional nullable SecretScanningAlertResolution.
type OptNilSecretScanningAlertResolution struct {
	Value SecretScanningAlertResolution
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSecretScanningAlertResolution was set.
func (o OptNilSecretScanningAlertResolution) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSecretScanningAlertResolution) Reset() {
	var v SecretScanningAlertResolution
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSecretScanningAlertResolution) SetTo(v SecretScanningAlertResolution) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSecretScanningAlertResolution) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSecretScanningAlertResolution) SetToNull() {
	o.Set = true
	o.Null = true
	var v SecretScanningAlertResolution
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSecretScanningAlertResolution) Get() (v SecretScanningAlertResolution, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSecretScanningAlertResolution) Or(d SecretScanningAlertResolution) SecretScanningAlertResolution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSimpleUserArray returns new OptNilSimpleUserArray with value set to v.
func NewOptNilSimpleUserArray(v []SimpleUser) OptNilSimpleUserArray {
	return OptNilSimpleUserArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSimpleUserArray is optional nullable []SimpleUser.
type OptNilSimpleUserArray struct {
	Value []SimpleUser
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSimpleUserArray was set.
func (o OptNilSimpleUserArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSimpleUserArray) Reset() {
	var v []SimpleUser
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSimpleUserArray) SetTo(v []SimpleUser) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSimpleUserArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSimpleUserArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []SimpleUser
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSimpleUserArray) Get() (v []SimpleUser, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSimpleUserArray) Or(d []SimpleUser) []SimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTeamArray returns new OptNilTeamArray with value set to v.
func NewOptNilTeamArray(v []Team) OptNilTeamArray {
	return OptNilTeamArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTeamArray is optional nullable []Team.
type OptNilTeamArray struct {
	Value []Team
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTeamArray was set.
func (o OptNilTeamArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTeamArray) Reset() {
	var v []Team
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTeamArray) SetTo(v []Team) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTeamArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTeamArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []Team
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTeamArray) Get() (v []Team, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTeamArray) Or(d []Team) []Team {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTeamSimpleArray returns new OptNilTeamSimpleArray with value set to v.
func NewOptNilTeamSimpleArray(v []TeamSimple) OptNilTeamSimpleArray {
	return OptNilTeamSimpleArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTeamSimpleArray is optional nullable []TeamSimple.
type OptNilTeamSimpleArray struct {
	Value []TeamSimple
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTeamSimpleArray was set.
func (o OptNilTeamSimpleArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTeamSimpleArray) Reset() {
	var v []TeamSimple
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTeamSimpleArray) SetTo(v []TeamSimple) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTeamSimpleArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTeamSimpleArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []TeamSimple
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTeamSimpleArray) Get() (v []TeamSimple, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTeamSimpleArray) Or(d []TeamSimple) []TeamSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTeamsAddOrUpdateProjectPermissionsInOrgReq returns new OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq with value set to v.
func NewOptNilTeamsAddOrUpdateProjectPermissionsInOrgReq(v TeamsAddOrUpdateProjectPermissionsInOrgReq) OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq {
	return OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq is optional nullable TeamsAddOrUpdateProjectPermissionsInOrgReq.
type OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq struct {
	Value TeamsAddOrUpdateProjectPermissionsInOrgReq
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq was set.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsInOrgReq
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) SetTo(v TeamsAddOrUpdateProjectPermissionsInOrgReq) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) SetToNull() {
	o.Set = true
	o.Null = true
	var v TeamsAddOrUpdateProjectPermissionsInOrgReq
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) Get() (v TeamsAddOrUpdateProjectPermissionsInOrgReq, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq) Or(d TeamsAddOrUpdateProjectPermissionsInOrgReq) TeamsAddOrUpdateProjectPermissionsInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTopicSearchResultItemAliasesItemArray returns new OptNilTopicSearchResultItemAliasesItemArray with value set to v.
func NewOptNilTopicSearchResultItemAliasesItemArray(v []TopicSearchResultItemAliasesItem) OptNilTopicSearchResultItemAliasesItemArray {
	return OptNilTopicSearchResultItemAliasesItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTopicSearchResultItemAliasesItemArray is optional nullable []TopicSearchResultItemAliasesItem.
type OptNilTopicSearchResultItemAliasesItemArray struct {
	Value []TopicSearchResultItemAliasesItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTopicSearchResultItemAliasesItemArray was set.
func (o OptNilTopicSearchResultItemAliasesItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTopicSearchResultItemAliasesItemArray) Reset() {
	var v []TopicSearchResultItemAliasesItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTopicSearchResultItemAliasesItemArray) SetTo(v []TopicSearchResultItemAliasesItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTopicSearchResultItemAliasesItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTopicSearchResultItemAliasesItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []TopicSearchResultItemAliasesItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTopicSearchResultItemAliasesItemArray) Get() (v []TopicSearchResultItemAliasesItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTopicSearchResultItemAliasesItemArray) Or(d []TopicSearchResultItemAliasesItem) []TopicSearchResultItemAliasesItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTopicSearchResultItemRelatedItemArray returns new OptNilTopicSearchResultItemRelatedItemArray with value set to v.
func NewOptNilTopicSearchResultItemRelatedItemArray(v []TopicSearchResultItemRelatedItem) OptNilTopicSearchResultItemRelatedItemArray {
	return OptNilTopicSearchResultItemRelatedItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTopicSearchResultItemRelatedItemArray is optional nullable []TopicSearchResultItemRelatedItem.
type OptNilTopicSearchResultItemRelatedItemArray struct {
	Value []TopicSearchResultItemRelatedItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTopicSearchResultItemRelatedItemArray was set.
func (o OptNilTopicSearchResultItemRelatedItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTopicSearchResultItemRelatedItemArray) Reset() {
	var v []TopicSearchResultItemRelatedItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTopicSearchResultItemRelatedItemArray) SetTo(v []TopicSearchResultItemRelatedItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTopicSearchResultItemRelatedItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTopicSearchResultItemRelatedItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []TopicSearchResultItemRelatedItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTopicSearchResultItemRelatedItemArray) Get() (v []TopicSearchResultItemRelatedItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTopicSearchResultItemRelatedItemArray) Or(d []TopicSearchResultItemRelatedItem) []TopicSearchResultItemRelatedItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilURI returns new OptNilURI with value set to v.
func NewOptNilURI(v url.URL) OptNilURI {
	return OptNilURI{
		Value: v,
		Set:   true,
	}
}

// OptNilURI is optional nullable url.URL.
type OptNilURI struct {
	Value url.URL
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilURI was set.
func (o OptNilURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilURI) SetTo(v url.URL) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilURI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilURI) SetToNull() {
	o.Set = true
	o.Null = true
	var v url.URL
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableMinimalRepositoryPermissions returns new OptNullableMinimalRepositoryPermissions with value set to v.
func NewOptNullableMinimalRepositoryPermissions(v NullableMinimalRepositoryPermissions) OptNullableMinimalRepositoryPermissions {
	return OptNullableMinimalRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptNullableMinimalRepositoryPermissions is optional NullableMinimalRepositoryPermissions.
type OptNullableMinimalRepositoryPermissions struct {
	Value NullableMinimalRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptNullableMinimalRepositoryPermissions was set.
func (o OptNullableMinimalRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableMinimalRepositoryPermissions) Reset() {
	var v NullableMinimalRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableMinimalRepositoryPermissions) SetTo(v NullableMinimalRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableMinimalRepositoryPermissions) Get() (v NullableMinimalRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableMinimalRepositoryPermissions) Or(d NullableMinimalRepositoryPermissions) NullableMinimalRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableRepositoryPermissions returns new OptNullableRepositoryPermissions with value set to v.
func NewOptNullableRepositoryPermissions(v NullableRepositoryPermissions) OptNullableRepositoryPermissions {
	return OptNullableRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptNullableRepositoryPermissions is optional NullableRepositoryPermissions.
type OptNullableRepositoryPermissions struct {
	Value NullableRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptNullableRepositoryPermissions was set.
func (o OptNullableRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableRepositoryPermissions) Reset() {
	var v NullableRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableRepositoryPermissions) SetTo(v NullableRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableRepositoryPermissions) Get() (v NullableRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableRepositoryPermissions) Or(d NullableRepositoryPermissions) NullableRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableRepositoryTemplateRepositoryOwner returns new OptNullableRepositoryTemplateRepositoryOwner with value set to v.
func NewOptNullableRepositoryTemplateRepositoryOwner(v NullableRepositoryTemplateRepositoryOwner) OptNullableRepositoryTemplateRepositoryOwner {
	return OptNullableRepositoryTemplateRepositoryOwner{
		Value: v,
		Set:   true,
	}
}

// OptNullableRepositoryTemplateRepositoryOwner is optional NullableRepositoryTemplateRepositoryOwner.
type OptNullableRepositoryTemplateRepositoryOwner struct {
	Value NullableRepositoryTemplateRepositoryOwner
	Set   bool
}

// IsSet returns true if OptNullableRepositoryTemplateRepositoryOwner was set.
func (o OptNullableRepositoryTemplateRepositoryOwner) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableRepositoryTemplateRepositoryOwner) Reset() {
	var v NullableRepositoryTemplateRepositoryOwner
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableRepositoryTemplateRepositoryOwner) SetTo(v NullableRepositoryTemplateRepositoryOwner) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableRepositoryTemplateRepositoryOwner) Get() (v NullableRepositoryTemplateRepositoryOwner, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableRepositoryTemplateRepositoryOwner) Or(d NullableRepositoryTemplateRepositoryOwner) NullableRepositoryTemplateRepositoryOwner {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNullableRepositoryTemplateRepositoryPermissions returns new OptNullableRepositoryTemplateRepositoryPermissions with value set to v.
func NewOptNullableRepositoryTemplateRepositoryPermissions(v NullableRepositoryTemplateRepositoryPermissions) OptNullableRepositoryTemplateRepositoryPermissions {
	return OptNullableRepositoryTemplateRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptNullableRepositoryTemplateRepositoryPermissions is optional NullableRepositoryTemplateRepositoryPermissions.
type OptNullableRepositoryTemplateRepositoryPermissions struct {
	Value NullableRepositoryTemplateRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptNullableRepositoryTemplateRepositoryPermissions was set.
func (o OptNullableRepositoryTemplateRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNullableRepositoryTemplateRepositoryPermissions) Reset() {
	var v NullableRepositoryTemplateRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNullableRepositoryTemplateRepositoryPermissions) SetTo(v NullableRepositoryTemplateRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNullableRepositoryTemplateRepositoryPermissions) Get() (v NullableRepositoryTemplateRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNullableRepositoryTemplateRepositoryPermissions) Or(d NullableRepositoryTemplateRepositoryPermissions) NullableRepositoryTemplateRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOAuthAuthorizationsCreateAuthorizationReq returns new OptOAuthAuthorizationsCreateAuthorizationReq with value set to v.
func NewOptOAuthAuthorizationsCreateAuthorizationReq(v OAuthAuthorizationsCreateAuthorizationReq) OptOAuthAuthorizationsCreateAuthorizationReq {
	return OptOAuthAuthorizationsCreateAuthorizationReq{
		Value: v,
		Set:   true,
	}
}

// OptOAuthAuthorizationsCreateAuthorizationReq is optional OAuthAuthorizationsCreateAuthorizationReq.
type OptOAuthAuthorizationsCreateAuthorizationReq struct {
	Value OAuthAuthorizationsCreateAuthorizationReq
	Set   bool
}

// IsSet returns true if OptOAuthAuthorizationsCreateAuthorizationReq was set.
func (o OptOAuthAuthorizationsCreateAuthorizationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOAuthAuthorizationsCreateAuthorizationReq) Reset() {
	var v OAuthAuthorizationsCreateAuthorizationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOAuthAuthorizationsCreateAuthorizationReq) SetTo(v OAuthAuthorizationsCreateAuthorizationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOAuthAuthorizationsCreateAuthorizationReq) Get() (v OAuthAuthorizationsCreateAuthorizationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOAuthAuthorizationsCreateAuthorizationReq) Or(d OAuthAuthorizationsCreateAuthorizationReq) OAuthAuthorizationsCreateAuthorizationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOAuthAuthorizationsUpdateAuthorizationReq returns new OptOAuthAuthorizationsUpdateAuthorizationReq with value set to v.
func NewOptOAuthAuthorizationsUpdateAuthorizationReq(v OAuthAuthorizationsUpdateAuthorizationReq) OptOAuthAuthorizationsUpdateAuthorizationReq {
	return OptOAuthAuthorizationsUpdateAuthorizationReq{
		Value: v,
		Set:   true,
	}
}

// OptOAuthAuthorizationsUpdateAuthorizationReq is optional OAuthAuthorizationsUpdateAuthorizationReq.
type OptOAuthAuthorizationsUpdateAuthorizationReq struct {
	Value OAuthAuthorizationsUpdateAuthorizationReq
	Set   bool
}

// IsSet returns true if OptOAuthAuthorizationsUpdateAuthorizationReq was set.
func (o OptOAuthAuthorizationsUpdateAuthorizationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOAuthAuthorizationsUpdateAuthorizationReq) Reset() {
	var v OAuthAuthorizationsUpdateAuthorizationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOAuthAuthorizationsUpdateAuthorizationReq) SetTo(v OAuthAuthorizationsUpdateAuthorizationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOAuthAuthorizationsUpdateAuthorizationReq) Get() (v OAuthAuthorizationsUpdateAuthorizationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOAuthAuthorizationsUpdateAuthorizationReq) Or(d OAuthAuthorizationsUpdateAuthorizationReq) OAuthAuthorizationsUpdateAuthorizationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgMembershipPermissions returns new OptOrgMembershipPermissions with value set to v.
func NewOptOrgMembershipPermissions(v OrgMembershipPermissions) OptOrgMembershipPermissions {
	return OptOrgMembershipPermissions{
		Value: v,
		Set:   true,
	}
}

// OptOrgMembershipPermissions is optional OrgMembershipPermissions.
type OptOrgMembershipPermissions struct {
	Value OrgMembershipPermissions
	Set   bool
}

// IsSet returns true if OptOrgMembershipPermissions was set.
func (o OptOrgMembershipPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgMembershipPermissions) Reset() {
	var v OrgMembershipPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgMembershipPermissions) SetTo(v OrgMembershipPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgMembershipPermissions) Get() (v OrgMembershipPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgMembershipPermissions) Or(d OrgMembershipPermissions) OrgMembershipPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrganizationFullPlan returns new OptOrganizationFullPlan with value set to v.
func NewOptOrganizationFullPlan(v OrganizationFullPlan) OptOrganizationFullPlan {
	return OptOrganizationFullPlan{
		Value: v,
		Set:   true,
	}
}

// OptOrganizationFullPlan is optional OrganizationFullPlan.
type OptOrganizationFullPlan struct {
	Value OrganizationFullPlan
	Set   bool
}

// IsSet returns true if OptOrganizationFullPlan was set.
func (o OptOrganizationFullPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrganizationFullPlan) Reset() {
	var v OrganizationFullPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrganizationFullPlan) SetTo(v OrganizationFullPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrganizationFullPlan) Get() (v OrganizationFullPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrganizationFullPlan) Or(d OrganizationFullPlan) OrganizationFullPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsCreateInvitationReq returns new OptOrgsCreateInvitationReq with value set to v.
func NewOptOrgsCreateInvitationReq(v OrgsCreateInvitationReq) OptOrgsCreateInvitationReq {
	return OptOrgsCreateInvitationReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsCreateInvitationReq is optional OrgsCreateInvitationReq.
type OptOrgsCreateInvitationReq struct {
	Value OrgsCreateInvitationReq
	Set   bool
}

// IsSet returns true if OptOrgsCreateInvitationReq was set.
func (o OptOrgsCreateInvitationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsCreateInvitationReq) Reset() {
	var v OrgsCreateInvitationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsCreateInvitationReq) SetTo(v OrgsCreateInvitationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsCreateInvitationReq) Get() (v OrgsCreateInvitationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsCreateInvitationReq) Or(d OrgsCreateInvitationReq) OrgsCreateInvitationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsCreateInvitationReqRole returns new OptOrgsCreateInvitationReqRole with value set to v.
func NewOptOrgsCreateInvitationReqRole(v OrgsCreateInvitationReqRole) OptOrgsCreateInvitationReqRole {
	return OptOrgsCreateInvitationReqRole{
		Value: v,
		Set:   true,
	}
}

// OptOrgsCreateInvitationReqRole is optional OrgsCreateInvitationReqRole.
type OptOrgsCreateInvitationReqRole struct {
	Value OrgsCreateInvitationReqRole
	Set   bool
}

// IsSet returns true if OptOrgsCreateInvitationReqRole was set.
func (o OptOrgsCreateInvitationReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsCreateInvitationReqRole) Reset() {
	var v OrgsCreateInvitationReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsCreateInvitationReqRole) SetTo(v OrgsCreateInvitationReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsCreateInvitationReqRole) Get() (v OrgsCreateInvitationReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsCreateInvitationReqRole) Or(d OrgsCreateInvitationReqRole) OrgsCreateInvitationReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsGetAuditLogInclude returns new OptOrgsGetAuditLogInclude with value set to v.
func NewOptOrgsGetAuditLogInclude(v OrgsGetAuditLogInclude) OptOrgsGetAuditLogInclude {
	return OptOrgsGetAuditLogInclude{
		Value: v,
		Set:   true,
	}
}

// OptOrgsGetAuditLogInclude is optional OrgsGetAuditLogInclude.
type OptOrgsGetAuditLogInclude struct {
	Value OrgsGetAuditLogInclude
	Set   bool
}

// IsSet returns true if OptOrgsGetAuditLogInclude was set.
func (o OptOrgsGetAuditLogInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsGetAuditLogInclude) Reset() {
	var v OrgsGetAuditLogInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsGetAuditLogInclude) SetTo(v OrgsGetAuditLogInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsGetAuditLogInclude) Get() (v OrgsGetAuditLogInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsGetAuditLogInclude) Or(d OrgsGetAuditLogInclude) OrgsGetAuditLogInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsGetAuditLogOrder returns new OptOrgsGetAuditLogOrder with value set to v.
func NewOptOrgsGetAuditLogOrder(v OrgsGetAuditLogOrder) OptOrgsGetAuditLogOrder {
	return OptOrgsGetAuditLogOrder{
		Value: v,
		Set:   true,
	}
}

// OptOrgsGetAuditLogOrder is optional OrgsGetAuditLogOrder.
type OptOrgsGetAuditLogOrder struct {
	Value OrgsGetAuditLogOrder
	Set   bool
}

// IsSet returns true if OptOrgsGetAuditLogOrder was set.
func (o OptOrgsGetAuditLogOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsGetAuditLogOrder) Reset() {
	var v OrgsGetAuditLogOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsGetAuditLogOrder) SetTo(v OrgsGetAuditLogOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsGetAuditLogOrder) Get() (v OrgsGetAuditLogOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsGetAuditLogOrder) Or(d OrgsGetAuditLogOrder) OrgsGetAuditLogOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListMembersFilter returns new OptOrgsListMembersFilter with value set to v.
func NewOptOrgsListMembersFilter(v OrgsListMembersFilter) OptOrgsListMembersFilter {
	return OptOrgsListMembersFilter{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListMembersFilter is optional OrgsListMembersFilter.
type OptOrgsListMembersFilter struct {
	Value OrgsListMembersFilter
	Set   bool
}

// IsSet returns true if OptOrgsListMembersFilter was set.
func (o OptOrgsListMembersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListMembersFilter) Reset() {
	var v OrgsListMembersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListMembersFilter) SetTo(v OrgsListMembersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListMembersFilter) Get() (v OrgsListMembersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListMembersFilter) Or(d OrgsListMembersFilter) OrgsListMembersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListMembersRole returns new OptOrgsListMembersRole with value set to v.
func NewOptOrgsListMembersRole(v OrgsListMembersRole) OptOrgsListMembersRole {
	return OptOrgsListMembersRole{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListMembersRole is optional OrgsListMembersRole.
type OptOrgsListMembersRole struct {
	Value OrgsListMembersRole
	Set   bool
}

// IsSet returns true if OptOrgsListMembersRole was set.
func (o OptOrgsListMembersRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListMembersRole) Reset() {
	var v OrgsListMembersRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListMembersRole) SetTo(v OrgsListMembersRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListMembersRole) Get() (v OrgsListMembersRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListMembersRole) Or(d OrgsListMembersRole) OrgsListMembersRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListMembershipsForAuthenticatedUserState returns new OptOrgsListMembershipsForAuthenticatedUserState with value set to v.
func NewOptOrgsListMembershipsForAuthenticatedUserState(v OrgsListMembershipsForAuthenticatedUserState) OptOrgsListMembershipsForAuthenticatedUserState {
	return OptOrgsListMembershipsForAuthenticatedUserState{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListMembershipsForAuthenticatedUserState is optional OrgsListMembershipsForAuthenticatedUserState.
type OptOrgsListMembershipsForAuthenticatedUserState struct {
	Value OrgsListMembershipsForAuthenticatedUserState
	Set   bool
}

// IsSet returns true if OptOrgsListMembershipsForAuthenticatedUserState was set.
func (o OptOrgsListMembershipsForAuthenticatedUserState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListMembershipsForAuthenticatedUserState) Reset() {
	var v OrgsListMembershipsForAuthenticatedUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListMembershipsForAuthenticatedUserState) SetTo(v OrgsListMembershipsForAuthenticatedUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListMembershipsForAuthenticatedUserState) Get() (v OrgsListMembershipsForAuthenticatedUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListMembershipsForAuthenticatedUserState) Or(d OrgsListMembershipsForAuthenticatedUserState) OrgsListMembershipsForAuthenticatedUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsListOutsideCollaboratorsFilter returns new OptOrgsListOutsideCollaboratorsFilter with value set to v.
func NewOptOrgsListOutsideCollaboratorsFilter(v OrgsListOutsideCollaboratorsFilter) OptOrgsListOutsideCollaboratorsFilter {
	return OptOrgsListOutsideCollaboratorsFilter{
		Value: v,
		Set:   true,
	}
}

// OptOrgsListOutsideCollaboratorsFilter is optional OrgsListOutsideCollaboratorsFilter.
type OptOrgsListOutsideCollaboratorsFilter struct {
	Value OrgsListOutsideCollaboratorsFilter
	Set   bool
}

// IsSet returns true if OptOrgsListOutsideCollaboratorsFilter was set.
func (o OptOrgsListOutsideCollaboratorsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsListOutsideCollaboratorsFilter) Reset() {
	var v OrgsListOutsideCollaboratorsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsListOutsideCollaboratorsFilter) SetTo(v OrgsListOutsideCollaboratorsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsListOutsideCollaboratorsFilter) Get() (v OrgsListOutsideCollaboratorsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsListOutsideCollaboratorsFilter) Or(d OrgsListOutsideCollaboratorsFilter) OrgsListOutsideCollaboratorsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsSetMembershipForUserReq returns new OptOrgsSetMembershipForUserReq with value set to v.
func NewOptOrgsSetMembershipForUserReq(v OrgsSetMembershipForUserReq) OptOrgsSetMembershipForUserReq {
	return OptOrgsSetMembershipForUserReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsSetMembershipForUserReq is optional OrgsSetMembershipForUserReq.
type OptOrgsSetMembershipForUserReq struct {
	Value OrgsSetMembershipForUserReq
	Set   bool
}

// IsSet returns true if OptOrgsSetMembershipForUserReq was set.
func (o OptOrgsSetMembershipForUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsSetMembershipForUserReq) Reset() {
	var v OrgsSetMembershipForUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsSetMembershipForUserReq) SetTo(v OrgsSetMembershipForUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsSetMembershipForUserReq) Get() (v OrgsSetMembershipForUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsSetMembershipForUserReq) Or(d OrgsSetMembershipForUserReq) OrgsSetMembershipForUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsSetMembershipForUserReqRole returns new OptOrgsSetMembershipForUserReqRole with value set to v.
func NewOptOrgsSetMembershipForUserReqRole(v OrgsSetMembershipForUserReqRole) OptOrgsSetMembershipForUserReqRole {
	return OptOrgsSetMembershipForUserReqRole{
		Value: v,
		Set:   true,
	}
}

// OptOrgsSetMembershipForUserReqRole is optional OrgsSetMembershipForUserReqRole.
type OptOrgsSetMembershipForUserReqRole struct {
	Value OrgsSetMembershipForUserReqRole
	Set   bool
}

// IsSet returns true if OptOrgsSetMembershipForUserReqRole was set.
func (o OptOrgsSetMembershipForUserReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsSetMembershipForUserReqRole) Reset() {
	var v OrgsSetMembershipForUserReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsSetMembershipForUserReqRole) SetTo(v OrgsSetMembershipForUserReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsSetMembershipForUserReqRole) Get() (v OrgsSetMembershipForUserReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsSetMembershipForUserReqRole) Or(d OrgsSetMembershipForUserReqRole) OrgsSetMembershipForUserReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsUpdateWebhookConfigForOrgReq returns new OptOrgsUpdateWebhookConfigForOrgReq with value set to v.
func NewOptOrgsUpdateWebhookConfigForOrgReq(v OrgsUpdateWebhookConfigForOrgReq) OptOrgsUpdateWebhookConfigForOrgReq {
	return OptOrgsUpdateWebhookConfigForOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsUpdateWebhookConfigForOrgReq is optional OrgsUpdateWebhookConfigForOrgReq.
type OptOrgsUpdateWebhookConfigForOrgReq struct {
	Value OrgsUpdateWebhookConfigForOrgReq
	Set   bool
}

// IsSet returns true if OptOrgsUpdateWebhookConfigForOrgReq was set.
func (o OptOrgsUpdateWebhookConfigForOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsUpdateWebhookConfigForOrgReq) Reset() {
	var v OrgsUpdateWebhookConfigForOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsUpdateWebhookConfigForOrgReq) SetTo(v OrgsUpdateWebhookConfigForOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsUpdateWebhookConfigForOrgReq) Get() (v OrgsUpdateWebhookConfigForOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsUpdateWebhookConfigForOrgReq) Or(d OrgsUpdateWebhookConfigForOrgReq) OrgsUpdateWebhookConfigForOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsUpdateWebhookReq returns new OptOrgsUpdateWebhookReq with value set to v.
func NewOptOrgsUpdateWebhookReq(v OrgsUpdateWebhookReq) OptOrgsUpdateWebhookReq {
	return OptOrgsUpdateWebhookReq{
		Value: v,
		Set:   true,
	}
}

// OptOrgsUpdateWebhookReq is optional OrgsUpdateWebhookReq.
type OptOrgsUpdateWebhookReq struct {
	Value OrgsUpdateWebhookReq
	Set   bool
}

// IsSet returns true if OptOrgsUpdateWebhookReq was set.
func (o OptOrgsUpdateWebhookReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsUpdateWebhookReq) Reset() {
	var v OrgsUpdateWebhookReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsUpdateWebhookReq) SetTo(v OrgsUpdateWebhookReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsUpdateWebhookReq) Get() (v OrgsUpdateWebhookReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsUpdateWebhookReq) Or(d OrgsUpdateWebhookReq) OrgsUpdateWebhookReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrgsUpdateWebhookReqConfig returns new OptOrgsUpdateWebhookReqConfig with value set to v.
func NewOptOrgsUpdateWebhookReqConfig(v OrgsUpdateWebhookReqConfig) OptOrgsUpdateWebhookReqConfig {
	return OptOrgsUpdateWebhookReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptOrgsUpdateWebhookReqConfig is optional OrgsUpdateWebhookReqConfig.
type OptOrgsUpdateWebhookReqConfig struct {
	Value OrgsUpdateWebhookReqConfig
	Set   bool
}

// IsSet returns true if OptOrgsUpdateWebhookReqConfig was set.
func (o OptOrgsUpdateWebhookReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrgsUpdateWebhookReqConfig) Reset() {
	var v OrgsUpdateWebhookReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrgsUpdateWebhookReqConfig) SetTo(v OrgsUpdateWebhookReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrgsUpdateWebhookReqConfig) Get() (v OrgsUpdateWebhookReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrgsUpdateWebhookReqConfig) Or(d OrgsUpdateWebhookReqConfig) OrgsUpdateWebhookReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackageVersionMetadata returns new OptPackageVersionMetadata with value set to v.
func NewOptPackageVersionMetadata(v PackageVersionMetadata) OptPackageVersionMetadata {
	return OptPackageVersionMetadata{
		Value: v,
		Set:   true,
	}
}

// OptPackageVersionMetadata is optional PackageVersionMetadata.
type OptPackageVersionMetadata struct {
	Value PackageVersionMetadata
	Set   bool
}

// IsSet returns true if OptPackageVersionMetadata was set.
func (o OptPackageVersionMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackageVersionMetadata) Reset() {
	var v PackageVersionMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackageVersionMetadata) SetTo(v PackageVersionMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackageVersionMetadata) Get() (v PackageVersionMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackageVersionMetadata) Or(d PackageVersionMetadata) PackageVersionMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackageVersionMetadataContainer returns new OptPackageVersionMetadataContainer with value set to v.
func NewOptPackageVersionMetadataContainer(v PackageVersionMetadataContainer) OptPackageVersionMetadataContainer {
	return OptPackageVersionMetadataContainer{
		Value: v,
		Set:   true,
	}
}

// OptPackageVersionMetadataContainer is optional PackageVersionMetadataContainer.
type OptPackageVersionMetadataContainer struct {
	Value PackageVersionMetadataContainer
	Set   bool
}

// IsSet returns true if OptPackageVersionMetadataContainer was set.
func (o OptPackageVersionMetadataContainer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackageVersionMetadataContainer) Reset() {
	var v PackageVersionMetadataContainer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackageVersionMetadataContainer) SetTo(v PackageVersionMetadataContainer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackageVersionMetadataContainer) Get() (v PackageVersionMetadataContainer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackageVersionMetadataContainer) Or(d PackageVersionMetadataContainer) PackageVersionMetadataContainer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackageVersionMetadataDocker returns new OptPackageVersionMetadataDocker with value set to v.
func NewOptPackageVersionMetadataDocker(v PackageVersionMetadataDocker) OptPackageVersionMetadataDocker {
	return OptPackageVersionMetadataDocker{
		Value: v,
		Set:   true,
	}
}

// OptPackageVersionMetadataDocker is optional PackageVersionMetadataDocker.
type OptPackageVersionMetadataDocker struct {
	Value PackageVersionMetadataDocker
	Set   bool
}

// IsSet returns true if OptPackageVersionMetadataDocker was set.
func (o OptPackageVersionMetadataDocker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackageVersionMetadataDocker) Reset() {
	var v PackageVersionMetadataDocker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackageVersionMetadataDocker) SetTo(v PackageVersionMetadataDocker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackageVersionMetadataDocker) Get() (v PackageVersionMetadataDocker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackageVersionMetadataDocker) Or(d PackageVersionMetadataDocker) PackageVersionMetadataDocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState returns new OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState with value set to v.
func NewOptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState(v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState {
	return OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState{
		Value: v,
		Set:   true,
	}
}

// OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState is optional PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState.
type OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState struct {
	Value PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
	Set   bool
}

// IsSet returns true if OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Reset() {
	var v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) SetTo(v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Get() (v PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Or(d PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesGetAllPackageVersionsForPackageOwnedByOrgState returns new OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState with value set to v.
func NewOptPackagesGetAllPackageVersionsForPackageOwnedByOrgState(v PackagesGetAllPackageVersionsForPackageOwnedByOrgState) OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState {
	return OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState{
		Value: v,
		Set:   true,
	}
}

// OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState is optional PackagesGetAllPackageVersionsForPackageOwnedByOrgState.
type OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState struct {
	Value PackagesGetAllPackageVersionsForPackageOwnedByOrgState
	Set   bool
}

// IsSet returns true if OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) Reset() {
	var v PackagesGetAllPackageVersionsForPackageOwnedByOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) SetTo(v PackagesGetAllPackageVersionsForPackageOwnedByOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) Get() (v PackagesGetAllPackageVersionsForPackageOwnedByOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesGetAllPackageVersionsForPackageOwnedByOrgState) Or(d PackagesGetAllPackageVersionsForPackageOwnedByOrgState) PackagesGetAllPackageVersionsForPackageOwnedByOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesListPackagesForAuthenticatedUserVisibility returns new OptPackagesListPackagesForAuthenticatedUserVisibility with value set to v.
func NewOptPackagesListPackagesForAuthenticatedUserVisibility(v PackagesListPackagesForAuthenticatedUserVisibility) OptPackagesListPackagesForAuthenticatedUserVisibility {
	return OptPackagesListPackagesForAuthenticatedUserVisibility{
		Value: v,
		Set:   true,
	}
}

// OptPackagesListPackagesForAuthenticatedUserVisibility is optional PackagesListPackagesForAuthenticatedUserVisibility.
type OptPackagesListPackagesForAuthenticatedUserVisibility struct {
	Value PackagesListPackagesForAuthenticatedUserVisibility
	Set   bool
}

// IsSet returns true if OptPackagesListPackagesForAuthenticatedUserVisibility was set.
func (o OptPackagesListPackagesForAuthenticatedUserVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesListPackagesForAuthenticatedUserVisibility) Reset() {
	var v PackagesListPackagesForAuthenticatedUserVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesListPackagesForAuthenticatedUserVisibility) SetTo(v PackagesListPackagesForAuthenticatedUserVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesListPackagesForAuthenticatedUserVisibility) Get() (v PackagesListPackagesForAuthenticatedUserVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesListPackagesForAuthenticatedUserVisibility) Or(d PackagesListPackagesForAuthenticatedUserVisibility) PackagesListPackagesForAuthenticatedUserVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesListPackagesForOrganizationVisibility returns new OptPackagesListPackagesForOrganizationVisibility with value set to v.
func NewOptPackagesListPackagesForOrganizationVisibility(v PackagesListPackagesForOrganizationVisibility) OptPackagesListPackagesForOrganizationVisibility {
	return OptPackagesListPackagesForOrganizationVisibility{
		Value: v,
		Set:   true,
	}
}

// OptPackagesListPackagesForOrganizationVisibility is optional PackagesListPackagesForOrganizationVisibility.
type OptPackagesListPackagesForOrganizationVisibility struct {
	Value PackagesListPackagesForOrganizationVisibility
	Set   bool
}

// IsSet returns true if OptPackagesListPackagesForOrganizationVisibility was set.
func (o OptPackagesListPackagesForOrganizationVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesListPackagesForOrganizationVisibility) Reset() {
	var v PackagesListPackagesForOrganizationVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesListPackagesForOrganizationVisibility) SetTo(v PackagesListPackagesForOrganizationVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesListPackagesForOrganizationVisibility) Get() (v PackagesListPackagesForOrganizationVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesListPackagesForOrganizationVisibility) Or(d PackagesListPackagesForOrganizationVisibility) PackagesListPackagesForOrganizationVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPackagesListPackagesForUserVisibility returns new OptPackagesListPackagesForUserVisibility with value set to v.
func NewOptPackagesListPackagesForUserVisibility(v PackagesListPackagesForUserVisibility) OptPackagesListPackagesForUserVisibility {
	return OptPackagesListPackagesForUserVisibility{
		Value: v,
		Set:   true,
	}
}

// OptPackagesListPackagesForUserVisibility is optional PackagesListPackagesForUserVisibility.
type OptPackagesListPackagesForUserVisibility struct {
	Value PackagesListPackagesForUserVisibility
	Set   bool
}

// IsSet returns true if OptPackagesListPackagesForUserVisibility was set.
func (o OptPackagesListPackagesForUserVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPackagesListPackagesForUserVisibility) Reset() {
	var v PackagesListPackagesForUserVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPackagesListPackagesForUserVisibility) SetTo(v PackagesListPackagesForUserVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPackagesListPackagesForUserVisibility) Get() (v PackagesListPackagesForUserVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPackagesListPackagesForUserVisibility) Or(d PackagesListPackagesForUserVisibility) PackagesListPackagesForUserVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagesHTTPSCertificate returns new OptPagesHTTPSCertificate with value set to v.
func NewOptPagesHTTPSCertificate(v PagesHTTPSCertificate) OptPagesHTTPSCertificate {
	return OptPagesHTTPSCertificate{
		Value: v,
		Set:   true,
	}
}

// OptPagesHTTPSCertificate is optional PagesHTTPSCertificate.
type OptPagesHTTPSCertificate struct {
	Value PagesHTTPSCertificate
	Set   bool
}

// IsSet returns true if OptPagesHTTPSCertificate was set.
func (o OptPagesHTTPSCertificate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagesHTTPSCertificate) Reset() {
	var v PagesHTTPSCertificate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagesHTTPSCertificate) SetTo(v PagesHTTPSCertificate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagesHTTPSCertificate) Get() (v PagesHTTPSCertificate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagesHTTPSCertificate) Or(d PagesHTTPSCertificate) PagesHTTPSCertificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagesHealthCheckDomain returns new OptPagesHealthCheckDomain with value set to v.
func NewOptPagesHealthCheckDomain(v PagesHealthCheckDomain) OptPagesHealthCheckDomain {
	return OptPagesHealthCheckDomain{
		Value: v,
		Set:   true,
	}
}

// OptPagesHealthCheckDomain is optional PagesHealthCheckDomain.
type OptPagesHealthCheckDomain struct {
	Value PagesHealthCheckDomain
	Set   bool
}

// IsSet returns true if OptPagesHealthCheckDomain was set.
func (o OptPagesHealthCheckDomain) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagesHealthCheckDomain) Reset() {
	var v PagesHealthCheckDomain
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagesHealthCheckDomain) SetTo(v PagesHealthCheckDomain) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagesHealthCheckDomain) Get() (v PagesHealthCheckDomain, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagesHealthCheckDomain) Or(d PagesHealthCheckDomain) PagesHealthCheckDomain {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPagesSourceHash returns new OptPagesSourceHash with value set to v.
func NewOptPagesSourceHash(v PagesSourceHash) OptPagesSourceHash {
	return OptPagesSourceHash{
		Value: v,
		Set:   true,
	}
}

// OptPagesSourceHash is optional PagesSourceHash.
type OptPagesSourceHash struct {
	Value PagesSourceHash
	Set   bool
}

// IsSet returns true if OptPagesSourceHash was set.
func (o OptPagesSourceHash) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPagesSourceHash) Reset() {
	var v PagesSourceHash
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPagesSourceHash) SetTo(v PagesSourceHash) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPagesSourceHash) Get() (v PagesSourceHash, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPagesSourceHash) Or(d PagesSourceHash) PagesSourceHash {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrivateUserPlan returns new OptPrivateUserPlan with value set to v.
func NewOptPrivateUserPlan(v PrivateUserPlan) OptPrivateUserPlan {
	return OptPrivateUserPlan{
		Value: v,
		Set:   true,
	}
}

// OptPrivateUserPlan is optional PrivateUserPlan.
type OptPrivateUserPlan struct {
	Value PrivateUserPlan
	Set   bool
}

// IsSet returns true if OptPrivateUserPlan was set.
func (o OptPrivateUserPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrivateUserPlan) Reset() {
	var v PrivateUserPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrivateUserPlan) SetTo(v PrivateUserPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrivateUserPlan) Get() (v PrivateUserPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrivateUserPlan) Or(d PrivateUserPlan) PrivateUserPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectOrganizationPermission returns new OptProjectOrganizationPermission with value set to v.
func NewOptProjectOrganizationPermission(v ProjectOrganizationPermission) OptProjectOrganizationPermission {
	return OptProjectOrganizationPermission{
		Value: v,
		Set:   true,
	}
}

// OptProjectOrganizationPermission is optional ProjectOrganizationPermission.
type OptProjectOrganizationPermission struct {
	Value ProjectOrganizationPermission
	Set   bool
}

// IsSet returns true if OptProjectOrganizationPermission was set.
func (o OptProjectOrganizationPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectOrganizationPermission) Reset() {
	var v ProjectOrganizationPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectOrganizationPermission) SetTo(v ProjectOrganizationPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectOrganizationPermission) Get() (v ProjectOrganizationPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectOrganizationPermission) Or(d ProjectOrganizationPermission) ProjectOrganizationPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsAddCollaboratorReqPermission returns new OptProjectsAddCollaboratorReqPermission with value set to v.
func NewOptProjectsAddCollaboratorReqPermission(v ProjectsAddCollaboratorReqPermission) OptProjectsAddCollaboratorReqPermission {
	return OptProjectsAddCollaboratorReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptProjectsAddCollaboratorReqPermission is optional ProjectsAddCollaboratorReqPermission.
type OptProjectsAddCollaboratorReqPermission struct {
	Value ProjectsAddCollaboratorReqPermission
	Set   bool
}

// IsSet returns true if OptProjectsAddCollaboratorReqPermission was set.
func (o OptProjectsAddCollaboratorReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsAddCollaboratorReqPermission) Reset() {
	var v ProjectsAddCollaboratorReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsAddCollaboratorReqPermission) SetTo(v ProjectsAddCollaboratorReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsAddCollaboratorReqPermission) Get() (v ProjectsAddCollaboratorReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsAddCollaboratorReqPermission) Or(d ProjectsAddCollaboratorReqPermission) ProjectsAddCollaboratorReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListCardsArchivedState returns new OptProjectsListCardsArchivedState with value set to v.
func NewOptProjectsListCardsArchivedState(v ProjectsListCardsArchivedState) OptProjectsListCardsArchivedState {
	return OptProjectsListCardsArchivedState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListCardsArchivedState is optional ProjectsListCardsArchivedState.
type OptProjectsListCardsArchivedState struct {
	Value ProjectsListCardsArchivedState
	Set   bool
}

// IsSet returns true if OptProjectsListCardsArchivedState was set.
func (o OptProjectsListCardsArchivedState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListCardsArchivedState) Reset() {
	var v ProjectsListCardsArchivedState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListCardsArchivedState) SetTo(v ProjectsListCardsArchivedState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListCardsArchivedState) Get() (v ProjectsListCardsArchivedState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListCardsArchivedState) Or(d ProjectsListCardsArchivedState) ProjectsListCardsArchivedState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListCollaboratorsAffiliation returns new OptProjectsListCollaboratorsAffiliation with value set to v.
func NewOptProjectsListCollaboratorsAffiliation(v ProjectsListCollaboratorsAffiliation) OptProjectsListCollaboratorsAffiliation {
	return OptProjectsListCollaboratorsAffiliation{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListCollaboratorsAffiliation is optional ProjectsListCollaboratorsAffiliation.
type OptProjectsListCollaboratorsAffiliation struct {
	Value ProjectsListCollaboratorsAffiliation
	Set   bool
}

// IsSet returns true if OptProjectsListCollaboratorsAffiliation was set.
func (o OptProjectsListCollaboratorsAffiliation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListCollaboratorsAffiliation) Reset() {
	var v ProjectsListCollaboratorsAffiliation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListCollaboratorsAffiliation) SetTo(v ProjectsListCollaboratorsAffiliation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListCollaboratorsAffiliation) Get() (v ProjectsListCollaboratorsAffiliation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListCollaboratorsAffiliation) Or(d ProjectsListCollaboratorsAffiliation) ProjectsListCollaboratorsAffiliation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListForOrgState returns new OptProjectsListForOrgState with value set to v.
func NewOptProjectsListForOrgState(v ProjectsListForOrgState) OptProjectsListForOrgState {
	return OptProjectsListForOrgState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListForOrgState is optional ProjectsListForOrgState.
type OptProjectsListForOrgState struct {
	Value ProjectsListForOrgState
	Set   bool
}

// IsSet returns true if OptProjectsListForOrgState was set.
func (o OptProjectsListForOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListForOrgState) Reset() {
	var v ProjectsListForOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListForOrgState) SetTo(v ProjectsListForOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListForOrgState) Get() (v ProjectsListForOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListForOrgState) Or(d ProjectsListForOrgState) ProjectsListForOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListForRepoState returns new OptProjectsListForRepoState with value set to v.
func NewOptProjectsListForRepoState(v ProjectsListForRepoState) OptProjectsListForRepoState {
	return OptProjectsListForRepoState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListForRepoState is optional ProjectsListForRepoState.
type OptProjectsListForRepoState struct {
	Value ProjectsListForRepoState
	Set   bool
}

// IsSet returns true if OptProjectsListForRepoState was set.
func (o OptProjectsListForRepoState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListForRepoState) Reset() {
	var v ProjectsListForRepoState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListForRepoState) SetTo(v ProjectsListForRepoState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListForRepoState) Get() (v ProjectsListForRepoState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListForRepoState) Or(d ProjectsListForRepoState) ProjectsListForRepoState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsListForUserState returns new OptProjectsListForUserState with value set to v.
func NewOptProjectsListForUserState(v ProjectsListForUserState) OptProjectsListForUserState {
	return OptProjectsListForUserState{
		Value: v,
		Set:   true,
	}
}

// OptProjectsListForUserState is optional ProjectsListForUserState.
type OptProjectsListForUserState struct {
	Value ProjectsListForUserState
	Set   bool
}

// IsSet returns true if OptProjectsListForUserState was set.
func (o OptProjectsListForUserState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsListForUserState) Reset() {
	var v ProjectsListForUserState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsListForUserState) SetTo(v ProjectsListForUserState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsListForUserState) Get() (v ProjectsListForUserState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsListForUserState) Or(d ProjectsListForUserState) ProjectsListForUserState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsUpdateCardReq returns new OptProjectsUpdateCardReq with value set to v.
func NewOptProjectsUpdateCardReq(v ProjectsUpdateCardReq) OptProjectsUpdateCardReq {
	return OptProjectsUpdateCardReq{
		Value: v,
		Set:   true,
	}
}

// OptProjectsUpdateCardReq is optional ProjectsUpdateCardReq.
type OptProjectsUpdateCardReq struct {
	Value ProjectsUpdateCardReq
	Set   bool
}

// IsSet returns true if OptProjectsUpdateCardReq was set.
func (o OptProjectsUpdateCardReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsUpdateCardReq) Reset() {
	var v ProjectsUpdateCardReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsUpdateCardReq) SetTo(v ProjectsUpdateCardReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsUpdateCardReq) Get() (v ProjectsUpdateCardReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsUpdateCardReq) Or(d ProjectsUpdateCardReq) ProjectsUpdateCardReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsUpdateReq returns new OptProjectsUpdateReq with value set to v.
func NewOptProjectsUpdateReq(v ProjectsUpdateReq) OptProjectsUpdateReq {
	return OptProjectsUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptProjectsUpdateReq is optional ProjectsUpdateReq.
type OptProjectsUpdateReq struct {
	Value ProjectsUpdateReq
	Set   bool
}

// IsSet returns true if OptProjectsUpdateReq was set.
func (o OptProjectsUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsUpdateReq) Reset() {
	var v ProjectsUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsUpdateReq) SetTo(v ProjectsUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsUpdateReq) Get() (v ProjectsUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsUpdateReq) Or(d ProjectsUpdateReq) ProjectsUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProjectsUpdateReqOrganizationPermission returns new OptProjectsUpdateReqOrganizationPermission with value set to v.
func NewOptProjectsUpdateReqOrganizationPermission(v ProjectsUpdateReqOrganizationPermission) OptProjectsUpdateReqOrganizationPermission {
	return OptProjectsUpdateReqOrganizationPermission{
		Value: v,
		Set:   true,
	}
}

// OptProjectsUpdateReqOrganizationPermission is optional ProjectsUpdateReqOrganizationPermission.
type OptProjectsUpdateReqOrganizationPermission struct {
	Value ProjectsUpdateReqOrganizationPermission
	Set   bool
}

// IsSet returns true if OptProjectsUpdateReqOrganizationPermission was set.
func (o OptProjectsUpdateReqOrganizationPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProjectsUpdateReqOrganizationPermission) Reset() {
	var v ProjectsUpdateReqOrganizationPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProjectsUpdateReqOrganizationPermission) SetTo(v ProjectsUpdateReqOrganizationPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProjectsUpdateReqOrganizationPermission) Get() (v ProjectsUpdateReqOrganizationPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProjectsUpdateReqOrganizationPermission) Or(d ProjectsUpdateReqOrganizationPermission) ProjectsUpdateReqOrganizationPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchAdminEnforced returns new OptProtectedBranchAdminEnforced with value set to v.
func NewOptProtectedBranchAdminEnforced(v ProtectedBranchAdminEnforced) OptProtectedBranchAdminEnforced {
	return OptProtectedBranchAdminEnforced{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchAdminEnforced is optional ProtectedBranchAdminEnforced.
type OptProtectedBranchAdminEnforced struct {
	Value ProtectedBranchAdminEnforced
	Set   bool
}

// IsSet returns true if OptProtectedBranchAdminEnforced was set.
func (o OptProtectedBranchAdminEnforced) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchAdminEnforced) Reset() {
	var v ProtectedBranchAdminEnforced
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchAdminEnforced) SetTo(v ProtectedBranchAdminEnforced) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchAdminEnforced) Get() (v ProtectedBranchAdminEnforced, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchAdminEnforced) Or(d ProtectedBranchAdminEnforced) ProtectedBranchAdminEnforced {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchAllowDeletions returns new OptProtectedBranchAllowDeletions with value set to v.
func NewOptProtectedBranchAllowDeletions(v ProtectedBranchAllowDeletions) OptProtectedBranchAllowDeletions {
	return OptProtectedBranchAllowDeletions{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchAllowDeletions is optional ProtectedBranchAllowDeletions.
type OptProtectedBranchAllowDeletions struct {
	Value ProtectedBranchAllowDeletions
	Set   bool
}

// IsSet returns true if OptProtectedBranchAllowDeletions was set.
func (o OptProtectedBranchAllowDeletions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchAllowDeletions) Reset() {
	var v ProtectedBranchAllowDeletions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchAllowDeletions) SetTo(v ProtectedBranchAllowDeletions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchAllowDeletions) Get() (v ProtectedBranchAllowDeletions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchAllowDeletions) Or(d ProtectedBranchAllowDeletions) ProtectedBranchAllowDeletions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchAllowForcePushes returns new OptProtectedBranchAllowForcePushes with value set to v.
func NewOptProtectedBranchAllowForcePushes(v ProtectedBranchAllowForcePushes) OptProtectedBranchAllowForcePushes {
	return OptProtectedBranchAllowForcePushes{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchAllowForcePushes is optional ProtectedBranchAllowForcePushes.
type OptProtectedBranchAllowForcePushes struct {
	Value ProtectedBranchAllowForcePushes
	Set   bool
}

// IsSet returns true if OptProtectedBranchAllowForcePushes was set.
func (o OptProtectedBranchAllowForcePushes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchAllowForcePushes) Reset() {
	var v ProtectedBranchAllowForcePushes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchAllowForcePushes) SetTo(v ProtectedBranchAllowForcePushes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchAllowForcePushes) Get() (v ProtectedBranchAllowForcePushes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchAllowForcePushes) Or(d ProtectedBranchAllowForcePushes) ProtectedBranchAllowForcePushes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchEnforceAdmins returns new OptProtectedBranchEnforceAdmins with value set to v.
func NewOptProtectedBranchEnforceAdmins(v ProtectedBranchEnforceAdmins) OptProtectedBranchEnforceAdmins {
	return OptProtectedBranchEnforceAdmins{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchEnforceAdmins is optional ProtectedBranchEnforceAdmins.
type OptProtectedBranchEnforceAdmins struct {
	Value ProtectedBranchEnforceAdmins
	Set   bool
}

// IsSet returns true if OptProtectedBranchEnforceAdmins was set.
func (o OptProtectedBranchEnforceAdmins) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchEnforceAdmins) Reset() {
	var v ProtectedBranchEnforceAdmins
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchEnforceAdmins) SetTo(v ProtectedBranchEnforceAdmins) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchEnforceAdmins) Get() (v ProtectedBranchEnforceAdmins, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchEnforceAdmins) Or(d ProtectedBranchEnforceAdmins) ProtectedBranchEnforceAdmins {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchPullRequestReview returns new OptProtectedBranchPullRequestReview with value set to v.
func NewOptProtectedBranchPullRequestReview(v ProtectedBranchPullRequestReview) OptProtectedBranchPullRequestReview {
	return OptProtectedBranchPullRequestReview{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchPullRequestReview is optional ProtectedBranchPullRequestReview.
type OptProtectedBranchPullRequestReview struct {
	Value ProtectedBranchPullRequestReview
	Set   bool
}

// IsSet returns true if OptProtectedBranchPullRequestReview was set.
func (o OptProtectedBranchPullRequestReview) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchPullRequestReview) Reset() {
	var v ProtectedBranchPullRequestReview
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchPullRequestReview) SetTo(v ProtectedBranchPullRequestReview) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchPullRequestReview) Get() (v ProtectedBranchPullRequestReview, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchPullRequestReview) Or(d ProtectedBranchPullRequestReview) ProtectedBranchPullRequestReview {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchPullRequestReviewDismissalRestrictions returns new OptProtectedBranchPullRequestReviewDismissalRestrictions with value set to v.
func NewOptProtectedBranchPullRequestReviewDismissalRestrictions(v ProtectedBranchPullRequestReviewDismissalRestrictions) OptProtectedBranchPullRequestReviewDismissalRestrictions {
	return OptProtectedBranchPullRequestReviewDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchPullRequestReviewDismissalRestrictions is optional ProtectedBranchPullRequestReviewDismissalRestrictions.
type OptProtectedBranchPullRequestReviewDismissalRestrictions struct {
	Value ProtectedBranchPullRequestReviewDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptProtectedBranchPullRequestReviewDismissalRestrictions was set.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchPullRequestReviewDismissalRestrictions) Reset() {
	var v ProtectedBranchPullRequestReviewDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchPullRequestReviewDismissalRestrictions) SetTo(v ProtectedBranchPullRequestReviewDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) Get() (v ProtectedBranchPullRequestReviewDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchPullRequestReviewDismissalRestrictions) Or(d ProtectedBranchPullRequestReviewDismissalRestrictions) ProtectedBranchPullRequestReviewDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredConversationResolution returns new OptProtectedBranchRequiredConversationResolution with value set to v.
func NewOptProtectedBranchRequiredConversationResolution(v ProtectedBranchRequiredConversationResolution) OptProtectedBranchRequiredConversationResolution {
	return OptProtectedBranchRequiredConversationResolution{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredConversationResolution is optional ProtectedBranchRequiredConversationResolution.
type OptProtectedBranchRequiredConversationResolution struct {
	Value ProtectedBranchRequiredConversationResolution
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredConversationResolution was set.
func (o OptProtectedBranchRequiredConversationResolution) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredConversationResolution) Reset() {
	var v ProtectedBranchRequiredConversationResolution
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredConversationResolution) SetTo(v ProtectedBranchRequiredConversationResolution) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredConversationResolution) Get() (v ProtectedBranchRequiredConversationResolution, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredConversationResolution) Or(d ProtectedBranchRequiredConversationResolution) ProtectedBranchRequiredConversationResolution {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredLinearHistory returns new OptProtectedBranchRequiredLinearHistory with value set to v.
func NewOptProtectedBranchRequiredLinearHistory(v ProtectedBranchRequiredLinearHistory) OptProtectedBranchRequiredLinearHistory {
	return OptProtectedBranchRequiredLinearHistory{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredLinearHistory is optional ProtectedBranchRequiredLinearHistory.
type OptProtectedBranchRequiredLinearHistory struct {
	Value ProtectedBranchRequiredLinearHistory
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredLinearHistory was set.
func (o OptProtectedBranchRequiredLinearHistory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredLinearHistory) Reset() {
	var v ProtectedBranchRequiredLinearHistory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredLinearHistory) SetTo(v ProtectedBranchRequiredLinearHistory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredLinearHistory) Get() (v ProtectedBranchRequiredLinearHistory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredLinearHistory) Or(d ProtectedBranchRequiredLinearHistory) ProtectedBranchRequiredLinearHistory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredPullRequestReviews returns new OptProtectedBranchRequiredPullRequestReviews with value set to v.
func NewOptProtectedBranchRequiredPullRequestReviews(v ProtectedBranchRequiredPullRequestReviews) OptProtectedBranchRequiredPullRequestReviews {
	return OptProtectedBranchRequiredPullRequestReviews{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredPullRequestReviews is optional ProtectedBranchRequiredPullRequestReviews.
type OptProtectedBranchRequiredPullRequestReviews struct {
	Value ProtectedBranchRequiredPullRequestReviews
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredPullRequestReviews was set.
func (o OptProtectedBranchRequiredPullRequestReviews) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredPullRequestReviews) Reset() {
	var v ProtectedBranchRequiredPullRequestReviews
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredPullRequestReviews) SetTo(v ProtectedBranchRequiredPullRequestReviews) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredPullRequestReviews) Get() (v ProtectedBranchRequiredPullRequestReviews, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredPullRequestReviews) Or(d ProtectedBranchRequiredPullRequestReviews) ProtectedBranchRequiredPullRequestReviews {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions returns new OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions with value set to v.
func NewOptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions(v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {
	return OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions is optional ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
type OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	Value ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions was set.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Reset() {
	var v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetTo(v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Get() (v ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Or(d ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectedBranchRequiredSignatures returns new OptProtectedBranchRequiredSignatures with value set to v.
func NewOptProtectedBranchRequiredSignatures(v ProtectedBranchRequiredSignatures) OptProtectedBranchRequiredSignatures {
	return OptProtectedBranchRequiredSignatures{
		Value: v,
		Set:   true,
	}
}

// OptProtectedBranchRequiredSignatures is optional ProtectedBranchRequiredSignatures.
type OptProtectedBranchRequiredSignatures struct {
	Value ProtectedBranchRequiredSignatures
	Set   bool
}

// IsSet returns true if OptProtectedBranchRequiredSignatures was set.
func (o OptProtectedBranchRequiredSignatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectedBranchRequiredSignatures) Reset() {
	var v ProtectedBranchRequiredSignatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectedBranchRequiredSignatures) SetTo(v ProtectedBranchRequiredSignatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectedBranchRequiredSignatures) Get() (v ProtectedBranchRequiredSignatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectedBranchRequiredSignatures) Or(d ProtectedBranchRequiredSignatures) ProtectedBranchRequiredSignatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicUser returns new OptPublicUser with value set to v.
func NewOptPublicUser(v PublicUser) OptPublicUser {
	return OptPublicUser{
		Value: v,
		Set:   true,
	}
}

// OptPublicUser is optional PublicUser.
type OptPublicUser struct {
	Value PublicUser
	Set   bool
}

// IsSet returns true if OptPublicUser was set.
func (o OptPublicUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicUser) Reset() {
	var v PublicUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicUser) SetTo(v PublicUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicUser) Get() (v PublicUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicUser) Or(d PublicUser) PublicUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicUserPlan returns new OptPublicUserPlan with value set to v.
func NewOptPublicUserPlan(v PublicUserPlan) OptPublicUserPlan {
	return OptPublicUserPlan{
		Value: v,
		Set:   true,
	}
}

// OptPublicUserPlan is optional PublicUserPlan.
type OptPublicUserPlan struct {
	Value PublicUserPlan
	Set   bool
}

// IsSet returns true if OptPublicUserPlan was set.
func (o OptPublicUserPlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicUserPlan) Reset() {
	var v PublicUserPlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicUserPlan) SetTo(v PublicUserPlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicUserPlan) Get() (v PublicUserPlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicUserPlan) Or(d PublicUserPlan) PublicUserPlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullRequestBaseRepoPermissions returns new OptPullRequestBaseRepoPermissions with value set to v.
func NewOptPullRequestBaseRepoPermissions(v PullRequestBaseRepoPermissions) OptPullRequestBaseRepoPermissions {
	return OptPullRequestBaseRepoPermissions{
		Value: v,
		Set:   true,
	}
}

// OptPullRequestBaseRepoPermissions is optional PullRequestBaseRepoPermissions.
type OptPullRequestBaseRepoPermissions struct {
	Value PullRequestBaseRepoPermissions
	Set   bool
}

// IsSet returns true if OptPullRequestBaseRepoPermissions was set.
func (o OptPullRequestBaseRepoPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullRequestBaseRepoPermissions) Reset() {
	var v PullRequestBaseRepoPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullRequestBaseRepoPermissions) SetTo(v PullRequestBaseRepoPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullRequestBaseRepoPermissions) Get() (v PullRequestBaseRepoPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullRequestBaseRepoPermissions) Or(d PullRequestBaseRepoPermissions) PullRequestBaseRepoPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullRequestHeadRepoPermissions returns new OptPullRequestHeadRepoPermissions with value set to v.
func NewOptPullRequestHeadRepoPermissions(v PullRequestHeadRepoPermissions) OptPullRequestHeadRepoPermissions {
	return OptPullRequestHeadRepoPermissions{
		Value: v,
		Set:   true,
	}
}

// OptPullRequestHeadRepoPermissions is optional PullRequestHeadRepoPermissions.
type OptPullRequestHeadRepoPermissions struct {
	Value PullRequestHeadRepoPermissions
	Set   bool
}

// IsSet returns true if OptPullRequestHeadRepoPermissions was set.
func (o OptPullRequestHeadRepoPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullRequestHeadRepoPermissions) Reset() {
	var v PullRequestHeadRepoPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullRequestHeadRepoPermissions) SetTo(v PullRequestHeadRepoPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullRequestHeadRepoPermissions) Get() (v PullRequestHeadRepoPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullRequestHeadRepoPermissions) Or(d PullRequestHeadRepoPermissions) PullRequestHeadRepoPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullRequestReviewCommentSide returns new OptPullRequestReviewCommentSide with value set to v.
func NewOptPullRequestReviewCommentSide(v PullRequestReviewCommentSide) OptPullRequestReviewCommentSide {
	return OptPullRequestReviewCommentSide{
		Value: v,
		Set:   true,
	}
}

// OptPullRequestReviewCommentSide is optional PullRequestReviewCommentSide.
type OptPullRequestReviewCommentSide struct {
	Value PullRequestReviewCommentSide
	Set   bool
}

// IsSet returns true if OptPullRequestReviewCommentSide was set.
func (o OptPullRequestReviewCommentSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullRequestReviewCommentSide) Reset() {
	var v PullRequestReviewCommentSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullRequestReviewCommentSide) SetTo(v PullRequestReviewCommentSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullRequestReviewCommentSide) Get() (v PullRequestReviewCommentSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullRequestReviewCommentSide) Or(d PullRequestReviewCommentSide) PullRequestReviewCommentSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewCommentReqSide returns new OptPullsCreateReviewCommentReqSide with value set to v.
func NewOptPullsCreateReviewCommentReqSide(v PullsCreateReviewCommentReqSide) OptPullsCreateReviewCommentReqSide {
	return OptPullsCreateReviewCommentReqSide{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewCommentReqSide is optional PullsCreateReviewCommentReqSide.
type OptPullsCreateReviewCommentReqSide struct {
	Value PullsCreateReviewCommentReqSide
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewCommentReqSide was set.
func (o OptPullsCreateReviewCommentReqSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewCommentReqSide) Reset() {
	var v PullsCreateReviewCommentReqSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewCommentReqSide) SetTo(v PullsCreateReviewCommentReqSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewCommentReqSide) Get() (v PullsCreateReviewCommentReqSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewCommentReqSide) Or(d PullsCreateReviewCommentReqSide) PullsCreateReviewCommentReqSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewCommentReqStartSide returns new OptPullsCreateReviewCommentReqStartSide with value set to v.
func NewOptPullsCreateReviewCommentReqStartSide(v PullsCreateReviewCommentReqStartSide) OptPullsCreateReviewCommentReqStartSide {
	return OptPullsCreateReviewCommentReqStartSide{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewCommentReqStartSide is optional PullsCreateReviewCommentReqStartSide.
type OptPullsCreateReviewCommentReqStartSide struct {
	Value PullsCreateReviewCommentReqStartSide
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewCommentReqStartSide was set.
func (o OptPullsCreateReviewCommentReqStartSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewCommentReqStartSide) Reset() {
	var v PullsCreateReviewCommentReqStartSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewCommentReqStartSide) SetTo(v PullsCreateReviewCommentReqStartSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewCommentReqStartSide) Get() (v PullsCreateReviewCommentReqStartSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewCommentReqStartSide) Or(d PullsCreateReviewCommentReqStartSide) PullsCreateReviewCommentReqStartSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewReq returns new OptPullsCreateReviewReq with value set to v.
func NewOptPullsCreateReviewReq(v PullsCreateReviewReq) OptPullsCreateReviewReq {
	return OptPullsCreateReviewReq{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewReq is optional PullsCreateReviewReq.
type OptPullsCreateReviewReq struct {
	Value PullsCreateReviewReq
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewReq was set.
func (o OptPullsCreateReviewReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewReq) Reset() {
	var v PullsCreateReviewReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewReq) SetTo(v PullsCreateReviewReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewReq) Get() (v PullsCreateReviewReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewReq) Or(d PullsCreateReviewReq) PullsCreateReviewReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsCreateReviewReqEvent returns new OptPullsCreateReviewReqEvent with value set to v.
func NewOptPullsCreateReviewReqEvent(v PullsCreateReviewReqEvent) OptPullsCreateReviewReqEvent {
	return OptPullsCreateReviewReqEvent{
		Value: v,
		Set:   true,
	}
}

// OptPullsCreateReviewReqEvent is optional PullsCreateReviewReqEvent.
type OptPullsCreateReviewReqEvent struct {
	Value PullsCreateReviewReqEvent
	Set   bool
}

// IsSet returns true if OptPullsCreateReviewReqEvent was set.
func (o OptPullsCreateReviewReqEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsCreateReviewReqEvent) Reset() {
	var v PullsCreateReviewReqEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsCreateReviewReqEvent) SetTo(v PullsCreateReviewReqEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsCreateReviewReqEvent) Get() (v PullsCreateReviewReqEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsCreateReviewReqEvent) Or(d PullsCreateReviewReqEvent) PullsCreateReviewReqEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListDirection returns new OptPullsListDirection with value set to v.
func NewOptPullsListDirection(v PullsListDirection) OptPullsListDirection {
	return OptPullsListDirection{
		Value: v,
		Set:   true,
	}
}

// OptPullsListDirection is optional PullsListDirection.
type OptPullsListDirection struct {
	Value PullsListDirection
	Set   bool
}

// IsSet returns true if OptPullsListDirection was set.
func (o OptPullsListDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListDirection) Reset() {
	var v PullsListDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListDirection) SetTo(v PullsListDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListDirection) Get() (v PullsListDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListDirection) Or(d PullsListDirection) PullsListDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsDirection returns new OptPullsListReviewCommentsDirection with value set to v.
func NewOptPullsListReviewCommentsDirection(v PullsListReviewCommentsDirection) OptPullsListReviewCommentsDirection {
	return OptPullsListReviewCommentsDirection{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsDirection is optional PullsListReviewCommentsDirection.
type OptPullsListReviewCommentsDirection struct {
	Value PullsListReviewCommentsDirection
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsDirection was set.
func (o OptPullsListReviewCommentsDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsDirection) Reset() {
	var v PullsListReviewCommentsDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsDirection) SetTo(v PullsListReviewCommentsDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsDirection) Get() (v PullsListReviewCommentsDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsDirection) Or(d PullsListReviewCommentsDirection) PullsListReviewCommentsDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsForRepoDirection returns new OptPullsListReviewCommentsForRepoDirection with value set to v.
func NewOptPullsListReviewCommentsForRepoDirection(v PullsListReviewCommentsForRepoDirection) OptPullsListReviewCommentsForRepoDirection {
	return OptPullsListReviewCommentsForRepoDirection{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsForRepoDirection is optional PullsListReviewCommentsForRepoDirection.
type OptPullsListReviewCommentsForRepoDirection struct {
	Value PullsListReviewCommentsForRepoDirection
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsForRepoDirection was set.
func (o OptPullsListReviewCommentsForRepoDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsForRepoDirection) Reset() {
	var v PullsListReviewCommentsForRepoDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsForRepoDirection) SetTo(v PullsListReviewCommentsForRepoDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsForRepoDirection) Get() (v PullsListReviewCommentsForRepoDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsForRepoDirection) Or(d PullsListReviewCommentsForRepoDirection) PullsListReviewCommentsForRepoDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsForRepoSort returns new OptPullsListReviewCommentsForRepoSort with value set to v.
func NewOptPullsListReviewCommentsForRepoSort(v PullsListReviewCommentsForRepoSort) OptPullsListReviewCommentsForRepoSort {
	return OptPullsListReviewCommentsForRepoSort{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsForRepoSort is optional PullsListReviewCommentsForRepoSort.
type OptPullsListReviewCommentsForRepoSort struct {
	Value PullsListReviewCommentsForRepoSort
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsForRepoSort was set.
func (o OptPullsListReviewCommentsForRepoSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsForRepoSort) Reset() {
	var v PullsListReviewCommentsForRepoSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsForRepoSort) SetTo(v PullsListReviewCommentsForRepoSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsForRepoSort) Get() (v PullsListReviewCommentsForRepoSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsForRepoSort) Or(d PullsListReviewCommentsForRepoSort) PullsListReviewCommentsForRepoSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListReviewCommentsSort returns new OptPullsListReviewCommentsSort with value set to v.
func NewOptPullsListReviewCommentsSort(v PullsListReviewCommentsSort) OptPullsListReviewCommentsSort {
	return OptPullsListReviewCommentsSort{
		Value: v,
		Set:   true,
	}
}

// OptPullsListReviewCommentsSort is optional PullsListReviewCommentsSort.
type OptPullsListReviewCommentsSort struct {
	Value PullsListReviewCommentsSort
	Set   bool
}

// IsSet returns true if OptPullsListReviewCommentsSort was set.
func (o OptPullsListReviewCommentsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListReviewCommentsSort) Reset() {
	var v PullsListReviewCommentsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListReviewCommentsSort) SetTo(v PullsListReviewCommentsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListReviewCommentsSort) Get() (v PullsListReviewCommentsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListReviewCommentsSort) Or(d PullsListReviewCommentsSort) PullsListReviewCommentsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListSort returns new OptPullsListSort with value set to v.
func NewOptPullsListSort(v PullsListSort) OptPullsListSort {
	return OptPullsListSort{
		Value: v,
		Set:   true,
	}
}

// OptPullsListSort is optional PullsListSort.
type OptPullsListSort struct {
	Value PullsListSort
	Set   bool
}

// IsSet returns true if OptPullsListSort was set.
func (o OptPullsListSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListSort) Reset() {
	var v PullsListSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListSort) SetTo(v PullsListSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListSort) Get() (v PullsListSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListSort) Or(d PullsListSort) PullsListSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsListState returns new OptPullsListState with value set to v.
func NewOptPullsListState(v PullsListState) OptPullsListState {
	return OptPullsListState{
		Value: v,
		Set:   true,
	}
}

// OptPullsListState is optional PullsListState.
type OptPullsListState struct {
	Value PullsListState
	Set   bool
}

// IsSet returns true if OptPullsListState was set.
func (o OptPullsListState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsListState) Reset() {
	var v PullsListState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsListState) SetTo(v PullsListState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsListState) Get() (v PullsListState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsListState) Or(d PullsListState) PullsListState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsMergeReqMergeMethod returns new OptPullsMergeReqMergeMethod with value set to v.
func NewOptPullsMergeReqMergeMethod(v PullsMergeReqMergeMethod) OptPullsMergeReqMergeMethod {
	return OptPullsMergeReqMergeMethod{
		Value: v,
		Set:   true,
	}
}

// OptPullsMergeReqMergeMethod is optional PullsMergeReqMergeMethod.
type OptPullsMergeReqMergeMethod struct {
	Value PullsMergeReqMergeMethod
	Set   bool
}

// IsSet returns true if OptPullsMergeReqMergeMethod was set.
func (o OptPullsMergeReqMergeMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsMergeReqMergeMethod) Reset() {
	var v PullsMergeReqMergeMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsMergeReqMergeMethod) SetTo(v PullsMergeReqMergeMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsMergeReqMergeMethod) Get() (v PullsMergeReqMergeMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsMergeReqMergeMethod) Or(d PullsMergeReqMergeMethod) PullsMergeReqMergeMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsUpdateReq returns new OptPullsUpdateReq with value set to v.
func NewOptPullsUpdateReq(v PullsUpdateReq) OptPullsUpdateReq {
	return OptPullsUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptPullsUpdateReq is optional PullsUpdateReq.
type OptPullsUpdateReq struct {
	Value PullsUpdateReq
	Set   bool
}

// IsSet returns true if OptPullsUpdateReq was set.
func (o OptPullsUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsUpdateReq) Reset() {
	var v PullsUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsUpdateReq) SetTo(v PullsUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsUpdateReq) Get() (v PullsUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsUpdateReq) Or(d PullsUpdateReq) PullsUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPullsUpdateReqState returns new OptPullsUpdateReqState with value set to v.
func NewOptPullsUpdateReqState(v PullsUpdateReqState) OptPullsUpdateReqState {
	return OptPullsUpdateReqState{
		Value: v,
		Set:   true,
	}
}

// OptPullsUpdateReqState is optional PullsUpdateReqState.
type OptPullsUpdateReqState struct {
	Value PullsUpdateReqState
	Set   bool
}

// IsSet returns true if OptPullsUpdateReqState was set.
func (o OptPullsUpdateReqState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPullsUpdateReqState) Reset() {
	var v PullsUpdateReqState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPullsUpdateReqState) SetTo(v PullsUpdateReqState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPullsUpdateReqState) Get() (v PullsUpdateReqState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPullsUpdateReqState) Or(d PullsUpdateReqState) PullsUpdateReqState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRateLimit returns new OptRateLimit with value set to v.
func NewOptRateLimit(v RateLimit) OptRateLimit {
	return OptRateLimit{
		Value: v,
		Set:   true,
	}
}

// OptRateLimit is optional RateLimit.
type OptRateLimit struct {
	Value RateLimit
	Set   bool
}

// IsSet returns true if OptRateLimit was set.
func (o OptRateLimit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRateLimit) Reset() {
	var v RateLimit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRateLimit) SetTo(v RateLimit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRateLimit) Get() (v RateLimit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRateLimit) Or(d RateLimit) RateLimit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionRollup returns new OptReactionRollup with value set to v.
func NewOptReactionRollup(v ReactionRollup) OptReactionRollup {
	return OptReactionRollup{
		Value: v,
		Set:   true,
	}
}

// OptReactionRollup is optional ReactionRollup.
type OptReactionRollup struct {
	Value ReactionRollup
	Set   bool
}

// IsSet returns true if OptReactionRollup was set.
func (o OptReactionRollup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionRollup) Reset() {
	var v ReactionRollup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionRollup) SetTo(v ReactionRollup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionRollup) Get() (v ReactionRollup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionRollup) Or(d ReactionRollup) ReactionRollup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForCommitCommentContent returns new OptReactionsListForCommitCommentContent with value set to v.
func NewOptReactionsListForCommitCommentContent(v ReactionsListForCommitCommentContent) OptReactionsListForCommitCommentContent {
	return OptReactionsListForCommitCommentContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForCommitCommentContent is optional ReactionsListForCommitCommentContent.
type OptReactionsListForCommitCommentContent struct {
	Value ReactionsListForCommitCommentContent
	Set   bool
}

// IsSet returns true if OptReactionsListForCommitCommentContent was set.
func (o OptReactionsListForCommitCommentContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForCommitCommentContent) Reset() {
	var v ReactionsListForCommitCommentContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForCommitCommentContent) SetTo(v ReactionsListForCommitCommentContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForCommitCommentContent) Get() (v ReactionsListForCommitCommentContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForCommitCommentContent) Or(d ReactionsListForCommitCommentContent) ReactionsListForCommitCommentContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForIssueCommentContent returns new OptReactionsListForIssueCommentContent with value set to v.
func NewOptReactionsListForIssueCommentContent(v ReactionsListForIssueCommentContent) OptReactionsListForIssueCommentContent {
	return OptReactionsListForIssueCommentContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForIssueCommentContent is optional ReactionsListForIssueCommentContent.
type OptReactionsListForIssueCommentContent struct {
	Value ReactionsListForIssueCommentContent
	Set   bool
}

// IsSet returns true if OptReactionsListForIssueCommentContent was set.
func (o OptReactionsListForIssueCommentContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForIssueCommentContent) Reset() {
	var v ReactionsListForIssueCommentContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForIssueCommentContent) SetTo(v ReactionsListForIssueCommentContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForIssueCommentContent) Get() (v ReactionsListForIssueCommentContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForIssueCommentContent) Or(d ReactionsListForIssueCommentContent) ReactionsListForIssueCommentContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForIssueContent returns new OptReactionsListForIssueContent with value set to v.
func NewOptReactionsListForIssueContent(v ReactionsListForIssueContent) OptReactionsListForIssueContent {
	return OptReactionsListForIssueContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForIssueContent is optional ReactionsListForIssueContent.
type OptReactionsListForIssueContent struct {
	Value ReactionsListForIssueContent
	Set   bool
}

// IsSet returns true if OptReactionsListForIssueContent was set.
func (o OptReactionsListForIssueContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForIssueContent) Reset() {
	var v ReactionsListForIssueContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForIssueContent) SetTo(v ReactionsListForIssueContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForIssueContent) Get() (v ReactionsListForIssueContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForIssueContent) Or(d ReactionsListForIssueContent) ReactionsListForIssueContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForPullRequestReviewCommentContent returns new OptReactionsListForPullRequestReviewCommentContent with value set to v.
func NewOptReactionsListForPullRequestReviewCommentContent(v ReactionsListForPullRequestReviewCommentContent) OptReactionsListForPullRequestReviewCommentContent {
	return OptReactionsListForPullRequestReviewCommentContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForPullRequestReviewCommentContent is optional ReactionsListForPullRequestReviewCommentContent.
type OptReactionsListForPullRequestReviewCommentContent struct {
	Value ReactionsListForPullRequestReviewCommentContent
	Set   bool
}

// IsSet returns true if OptReactionsListForPullRequestReviewCommentContent was set.
func (o OptReactionsListForPullRequestReviewCommentContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForPullRequestReviewCommentContent) Reset() {
	var v ReactionsListForPullRequestReviewCommentContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForPullRequestReviewCommentContent) SetTo(v ReactionsListForPullRequestReviewCommentContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForPullRequestReviewCommentContent) Get() (v ReactionsListForPullRequestReviewCommentContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForPullRequestReviewCommentContent) Or(d ReactionsListForPullRequestReviewCommentContent) ReactionsListForPullRequestReviewCommentContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionCommentInOrgContent returns new OptReactionsListForTeamDiscussionCommentInOrgContent with value set to v.
func NewOptReactionsListForTeamDiscussionCommentInOrgContent(v ReactionsListForTeamDiscussionCommentInOrgContent) OptReactionsListForTeamDiscussionCommentInOrgContent {
	return OptReactionsListForTeamDiscussionCommentInOrgContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionCommentInOrgContent is optional ReactionsListForTeamDiscussionCommentInOrgContent.
type OptReactionsListForTeamDiscussionCommentInOrgContent struct {
	Value ReactionsListForTeamDiscussionCommentInOrgContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionCommentInOrgContent was set.
func (o OptReactionsListForTeamDiscussionCommentInOrgContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionCommentInOrgContent) Reset() {
	var v ReactionsListForTeamDiscussionCommentInOrgContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionCommentInOrgContent) SetTo(v ReactionsListForTeamDiscussionCommentInOrgContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionCommentInOrgContent) Get() (v ReactionsListForTeamDiscussionCommentInOrgContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionCommentInOrgContent) Or(d ReactionsListForTeamDiscussionCommentInOrgContent) ReactionsListForTeamDiscussionCommentInOrgContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionCommentLegacyContent returns new OptReactionsListForTeamDiscussionCommentLegacyContent with value set to v.
func NewOptReactionsListForTeamDiscussionCommentLegacyContent(v ReactionsListForTeamDiscussionCommentLegacyContent) OptReactionsListForTeamDiscussionCommentLegacyContent {
	return OptReactionsListForTeamDiscussionCommentLegacyContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionCommentLegacyContent is optional ReactionsListForTeamDiscussionCommentLegacyContent.
type OptReactionsListForTeamDiscussionCommentLegacyContent struct {
	Value ReactionsListForTeamDiscussionCommentLegacyContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionCommentLegacyContent was set.
func (o OptReactionsListForTeamDiscussionCommentLegacyContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionCommentLegacyContent) Reset() {
	var v ReactionsListForTeamDiscussionCommentLegacyContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionCommentLegacyContent) SetTo(v ReactionsListForTeamDiscussionCommentLegacyContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionCommentLegacyContent) Get() (v ReactionsListForTeamDiscussionCommentLegacyContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionCommentLegacyContent) Or(d ReactionsListForTeamDiscussionCommentLegacyContent) ReactionsListForTeamDiscussionCommentLegacyContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionInOrgContent returns new OptReactionsListForTeamDiscussionInOrgContent with value set to v.
func NewOptReactionsListForTeamDiscussionInOrgContent(v ReactionsListForTeamDiscussionInOrgContent) OptReactionsListForTeamDiscussionInOrgContent {
	return OptReactionsListForTeamDiscussionInOrgContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionInOrgContent is optional ReactionsListForTeamDiscussionInOrgContent.
type OptReactionsListForTeamDiscussionInOrgContent struct {
	Value ReactionsListForTeamDiscussionInOrgContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionInOrgContent was set.
func (o OptReactionsListForTeamDiscussionInOrgContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionInOrgContent) Reset() {
	var v ReactionsListForTeamDiscussionInOrgContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionInOrgContent) SetTo(v ReactionsListForTeamDiscussionInOrgContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionInOrgContent) Get() (v ReactionsListForTeamDiscussionInOrgContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionInOrgContent) Or(d ReactionsListForTeamDiscussionInOrgContent) ReactionsListForTeamDiscussionInOrgContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReactionsListForTeamDiscussionLegacyContent returns new OptReactionsListForTeamDiscussionLegacyContent with value set to v.
func NewOptReactionsListForTeamDiscussionLegacyContent(v ReactionsListForTeamDiscussionLegacyContent) OptReactionsListForTeamDiscussionLegacyContent {
	return OptReactionsListForTeamDiscussionLegacyContent{
		Value: v,
		Set:   true,
	}
}

// OptReactionsListForTeamDiscussionLegacyContent is optional ReactionsListForTeamDiscussionLegacyContent.
type OptReactionsListForTeamDiscussionLegacyContent struct {
	Value ReactionsListForTeamDiscussionLegacyContent
	Set   bool
}

// IsSet returns true if OptReactionsListForTeamDiscussionLegacyContent was set.
func (o OptReactionsListForTeamDiscussionLegacyContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReactionsListForTeamDiscussionLegacyContent) Reset() {
	var v ReactionsListForTeamDiscussionLegacyContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReactionsListForTeamDiscussionLegacyContent) SetTo(v ReactionsListForTeamDiscussionLegacyContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReactionsListForTeamDiscussionLegacyContent) Get() (v ReactionsListForTeamDiscussionLegacyContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReactionsListForTeamDiscussionLegacyContent) Or(d ReactionsListForTeamDiscussionLegacyContent) ReactionsListForTeamDiscussionLegacyContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepoSearchResultItemPermissions returns new OptRepoSearchResultItemPermissions with value set to v.
func NewOptRepoSearchResultItemPermissions(v RepoSearchResultItemPermissions) OptRepoSearchResultItemPermissions {
	return OptRepoSearchResultItemPermissions{
		Value: v,
		Set:   true,
	}
}

// OptRepoSearchResultItemPermissions is optional RepoSearchResultItemPermissions.
type OptRepoSearchResultItemPermissions struct {
	Value RepoSearchResultItemPermissions
	Set   bool
}

// IsSet returns true if OptRepoSearchResultItemPermissions was set.
func (o OptRepoSearchResultItemPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepoSearchResultItemPermissions) Reset() {
	var v RepoSearchResultItemPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepoSearchResultItemPermissions) SetTo(v RepoSearchResultItemPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepoSearchResultItemPermissions) Get() (v RepoSearchResultItemPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepoSearchResultItemPermissions) Or(d RepoSearchResultItemPermissions) RepoSearchResultItemPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddAppAccessRestrictionsReq returns new OptReposAddAppAccessRestrictionsReq with value set to v.
func NewOptReposAddAppAccessRestrictionsReq(v ReposAddAppAccessRestrictionsReq) OptReposAddAppAccessRestrictionsReq {
	return OptReposAddAppAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddAppAccessRestrictionsReq is optional ReposAddAppAccessRestrictionsReq.
type OptReposAddAppAccessRestrictionsReq struct {
	Value ReposAddAppAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposAddAppAccessRestrictionsReq was set.
func (o OptReposAddAppAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddAppAccessRestrictionsReq) Reset() {
	var v ReposAddAppAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddAppAccessRestrictionsReq) SetTo(v ReposAddAppAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddAppAccessRestrictionsReq) Get() (v ReposAddAppAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddAppAccessRestrictionsReq) Or(d ReposAddAppAccessRestrictionsReq) ReposAddAppAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddCollaboratorReq returns new OptReposAddCollaboratorReq with value set to v.
func NewOptReposAddCollaboratorReq(v ReposAddCollaboratorReq) OptReposAddCollaboratorReq {
	return OptReposAddCollaboratorReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddCollaboratorReq is optional ReposAddCollaboratorReq.
type OptReposAddCollaboratorReq struct {
	Value ReposAddCollaboratorReq
	Set   bool
}

// IsSet returns true if OptReposAddCollaboratorReq was set.
func (o OptReposAddCollaboratorReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddCollaboratorReq) Reset() {
	var v ReposAddCollaboratorReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddCollaboratorReq) SetTo(v ReposAddCollaboratorReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddCollaboratorReq) Get() (v ReposAddCollaboratorReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddCollaboratorReq) Or(d ReposAddCollaboratorReq) ReposAddCollaboratorReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddCollaboratorReqPermission returns new OptReposAddCollaboratorReqPermission with value set to v.
func NewOptReposAddCollaboratorReqPermission(v ReposAddCollaboratorReqPermission) OptReposAddCollaboratorReqPermission {
	return OptReposAddCollaboratorReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptReposAddCollaboratorReqPermission is optional ReposAddCollaboratorReqPermission.
type OptReposAddCollaboratorReqPermission struct {
	Value ReposAddCollaboratorReqPermission
	Set   bool
}

// IsSet returns true if OptReposAddCollaboratorReqPermission was set.
func (o OptReposAddCollaboratorReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddCollaboratorReqPermission) Reset() {
	var v ReposAddCollaboratorReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddCollaboratorReqPermission) SetTo(v ReposAddCollaboratorReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddCollaboratorReqPermission) Get() (v ReposAddCollaboratorReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddCollaboratorReqPermission) Or(d ReposAddCollaboratorReqPermission) ReposAddCollaboratorReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddStatusCheckContextsReq returns new OptReposAddStatusCheckContextsReq with value set to v.
func NewOptReposAddStatusCheckContextsReq(v ReposAddStatusCheckContextsReq) OptReposAddStatusCheckContextsReq {
	return OptReposAddStatusCheckContextsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddStatusCheckContextsReq is optional ReposAddStatusCheckContextsReq.
type OptReposAddStatusCheckContextsReq struct {
	Value ReposAddStatusCheckContextsReq
	Set   bool
}

// IsSet returns true if OptReposAddStatusCheckContextsReq was set.
func (o OptReposAddStatusCheckContextsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddStatusCheckContextsReq) Reset() {
	var v ReposAddStatusCheckContextsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddStatusCheckContextsReq) SetTo(v ReposAddStatusCheckContextsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddStatusCheckContextsReq) Get() (v ReposAddStatusCheckContextsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddStatusCheckContextsReq) Or(d ReposAddStatusCheckContextsReq) ReposAddStatusCheckContextsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddTeamAccessRestrictionsReq returns new OptReposAddTeamAccessRestrictionsReq with value set to v.
func NewOptReposAddTeamAccessRestrictionsReq(v ReposAddTeamAccessRestrictionsReq) OptReposAddTeamAccessRestrictionsReq {
	return OptReposAddTeamAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddTeamAccessRestrictionsReq is optional ReposAddTeamAccessRestrictionsReq.
type OptReposAddTeamAccessRestrictionsReq struct {
	Value ReposAddTeamAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposAddTeamAccessRestrictionsReq was set.
func (o OptReposAddTeamAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddTeamAccessRestrictionsReq) Reset() {
	var v ReposAddTeamAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddTeamAccessRestrictionsReq) SetTo(v ReposAddTeamAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddTeamAccessRestrictionsReq) Get() (v ReposAddTeamAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddTeamAccessRestrictionsReq) Or(d ReposAddTeamAccessRestrictionsReq) ReposAddTeamAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposAddUserAccessRestrictionsReq returns new OptReposAddUserAccessRestrictionsReq with value set to v.
func NewOptReposAddUserAccessRestrictionsReq(v ReposAddUserAccessRestrictionsReq) OptReposAddUserAccessRestrictionsReq {
	return OptReposAddUserAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposAddUserAccessRestrictionsReq is optional ReposAddUserAccessRestrictionsReq.
type OptReposAddUserAccessRestrictionsReq struct {
	Value ReposAddUserAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposAddUserAccessRestrictionsReq was set.
func (o OptReposAddUserAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposAddUserAccessRestrictionsReq) Reset() {
	var v ReposAddUserAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposAddUserAccessRestrictionsReq) SetTo(v ReposAddUserAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposAddUserAccessRestrictionsReq) Get() (v ReposAddUserAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposAddUserAccessRestrictionsReq) Or(d ReposAddUserAccessRestrictionsReq) ReposAddUserAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateDeploymentReqPayload returns new OptReposCreateDeploymentReqPayload with value set to v.
func NewOptReposCreateDeploymentReqPayload(v ReposCreateDeploymentReqPayload) OptReposCreateDeploymentReqPayload {
	return OptReposCreateDeploymentReqPayload{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateDeploymentReqPayload is optional ReposCreateDeploymentReqPayload.
type OptReposCreateDeploymentReqPayload struct {
	Value ReposCreateDeploymentReqPayload
	Set   bool
}

// IsSet returns true if OptReposCreateDeploymentReqPayload was set.
func (o OptReposCreateDeploymentReqPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateDeploymentReqPayload) Reset() {
	var v ReposCreateDeploymentReqPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateDeploymentReqPayload) SetTo(v ReposCreateDeploymentReqPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateDeploymentReqPayload) Get() (v ReposCreateDeploymentReqPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateDeploymentReqPayload) Or(d ReposCreateDeploymentReqPayload) ReposCreateDeploymentReqPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateDeploymentStatusReqEnvironment returns new OptReposCreateDeploymentStatusReqEnvironment with value set to v.
func NewOptReposCreateDeploymentStatusReqEnvironment(v ReposCreateDeploymentStatusReqEnvironment) OptReposCreateDeploymentStatusReqEnvironment {
	return OptReposCreateDeploymentStatusReqEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateDeploymentStatusReqEnvironment is optional ReposCreateDeploymentStatusReqEnvironment.
type OptReposCreateDeploymentStatusReqEnvironment struct {
	Value ReposCreateDeploymentStatusReqEnvironment
	Set   bool
}

// IsSet returns true if OptReposCreateDeploymentStatusReqEnvironment was set.
func (o OptReposCreateDeploymentStatusReqEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateDeploymentStatusReqEnvironment) Reset() {
	var v ReposCreateDeploymentStatusReqEnvironment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateDeploymentStatusReqEnvironment) SetTo(v ReposCreateDeploymentStatusReqEnvironment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateDeploymentStatusReqEnvironment) Get() (v ReposCreateDeploymentStatusReqEnvironment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateDeploymentStatusReqEnvironment) Or(d ReposCreateDeploymentStatusReqEnvironment) ReposCreateDeploymentStatusReqEnvironment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateDispatchEventReqClientPayload returns new OptReposCreateDispatchEventReqClientPayload with value set to v.
func NewOptReposCreateDispatchEventReqClientPayload(v ReposCreateDispatchEventReqClientPayload) OptReposCreateDispatchEventReqClientPayload {
	return OptReposCreateDispatchEventReqClientPayload{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateDispatchEventReqClientPayload is optional ReposCreateDispatchEventReqClientPayload.
type OptReposCreateDispatchEventReqClientPayload struct {
	Value ReposCreateDispatchEventReqClientPayload
	Set   bool
}

// IsSet returns true if OptReposCreateDispatchEventReqClientPayload was set.
func (o OptReposCreateDispatchEventReqClientPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateDispatchEventReqClientPayload) Reset() {
	var v ReposCreateDispatchEventReqClientPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateDispatchEventReqClientPayload) SetTo(v ReposCreateDispatchEventReqClientPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateDispatchEventReqClientPayload) Get() (v ReposCreateDispatchEventReqClientPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateDispatchEventReqClientPayload) Or(d ReposCreateDispatchEventReqClientPayload) ReposCreateDispatchEventReqClientPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateInOrgReqVisibility returns new OptReposCreateInOrgReqVisibility with value set to v.
func NewOptReposCreateInOrgReqVisibility(v ReposCreateInOrgReqVisibility) OptReposCreateInOrgReqVisibility {
	return OptReposCreateInOrgReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateInOrgReqVisibility is optional ReposCreateInOrgReqVisibility.
type OptReposCreateInOrgReqVisibility struct {
	Value ReposCreateInOrgReqVisibility
	Set   bool
}

// IsSet returns true if OptReposCreateInOrgReqVisibility was set.
func (o OptReposCreateInOrgReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateInOrgReqVisibility) Reset() {
	var v ReposCreateInOrgReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateInOrgReqVisibility) SetTo(v ReposCreateInOrgReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateInOrgReqVisibility) Get() (v ReposCreateInOrgReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateInOrgReqVisibility) Or(d ReposCreateInOrgReqVisibility) ReposCreateInOrgReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateOrUpdateFileContentsReqAuthor returns new OptReposCreateOrUpdateFileContentsReqAuthor with value set to v.
func NewOptReposCreateOrUpdateFileContentsReqAuthor(v ReposCreateOrUpdateFileContentsReqAuthor) OptReposCreateOrUpdateFileContentsReqAuthor {
	return OptReposCreateOrUpdateFileContentsReqAuthor{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateOrUpdateFileContentsReqAuthor is optional ReposCreateOrUpdateFileContentsReqAuthor.
type OptReposCreateOrUpdateFileContentsReqAuthor struct {
	Value ReposCreateOrUpdateFileContentsReqAuthor
	Set   bool
}

// IsSet returns true if OptReposCreateOrUpdateFileContentsReqAuthor was set.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateOrUpdateFileContentsReqAuthor) Reset() {
	var v ReposCreateOrUpdateFileContentsReqAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateOrUpdateFileContentsReqAuthor) SetTo(v ReposCreateOrUpdateFileContentsReqAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) Get() (v ReposCreateOrUpdateFileContentsReqAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateOrUpdateFileContentsReqAuthor) Or(d ReposCreateOrUpdateFileContentsReqAuthor) ReposCreateOrUpdateFileContentsReqAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateOrUpdateFileContentsReqCommitter returns new OptReposCreateOrUpdateFileContentsReqCommitter with value set to v.
func NewOptReposCreateOrUpdateFileContentsReqCommitter(v ReposCreateOrUpdateFileContentsReqCommitter) OptReposCreateOrUpdateFileContentsReqCommitter {
	return OptReposCreateOrUpdateFileContentsReqCommitter{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateOrUpdateFileContentsReqCommitter is optional ReposCreateOrUpdateFileContentsReqCommitter.
type OptReposCreateOrUpdateFileContentsReqCommitter struct {
	Value ReposCreateOrUpdateFileContentsReqCommitter
	Set   bool
}

// IsSet returns true if OptReposCreateOrUpdateFileContentsReqCommitter was set.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateOrUpdateFileContentsReqCommitter) Reset() {
	var v ReposCreateOrUpdateFileContentsReqCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateOrUpdateFileContentsReqCommitter) SetTo(v ReposCreateOrUpdateFileContentsReqCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) Get() (v ReposCreateOrUpdateFileContentsReqCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateOrUpdateFileContentsReqCommitter) Or(d ReposCreateOrUpdateFileContentsReqCommitter) ReposCreateOrUpdateFileContentsReqCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreatePagesSiteReqSourcePath returns new OptReposCreatePagesSiteReqSourcePath with value set to v.
func NewOptReposCreatePagesSiteReqSourcePath(v ReposCreatePagesSiteReqSourcePath) OptReposCreatePagesSiteReqSourcePath {
	return OptReposCreatePagesSiteReqSourcePath{
		Value: v,
		Set:   true,
	}
}

// OptReposCreatePagesSiteReqSourcePath is optional ReposCreatePagesSiteReqSourcePath.
type OptReposCreatePagesSiteReqSourcePath struct {
	Value ReposCreatePagesSiteReqSourcePath
	Set   bool
}

// IsSet returns true if OptReposCreatePagesSiteReqSourcePath was set.
func (o OptReposCreatePagesSiteReqSourcePath) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreatePagesSiteReqSourcePath) Reset() {
	var v ReposCreatePagesSiteReqSourcePath
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreatePagesSiteReqSourcePath) SetTo(v ReposCreatePagesSiteReqSourcePath) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreatePagesSiteReqSourcePath) Get() (v ReposCreatePagesSiteReqSourcePath, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreatePagesSiteReqSourcePath) Or(d ReposCreatePagesSiteReqSourcePath) ReposCreatePagesSiteReqSourcePath {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposCreateWebhookReqConfig returns new OptReposCreateWebhookReqConfig with value set to v.
func NewOptReposCreateWebhookReqConfig(v ReposCreateWebhookReqConfig) OptReposCreateWebhookReqConfig {
	return OptReposCreateWebhookReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptReposCreateWebhookReqConfig is optional ReposCreateWebhookReqConfig.
type OptReposCreateWebhookReqConfig struct {
	Value ReposCreateWebhookReqConfig
	Set   bool
}

// IsSet returns true if OptReposCreateWebhookReqConfig was set.
func (o OptReposCreateWebhookReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposCreateWebhookReqConfig) Reset() {
	var v ReposCreateWebhookReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposCreateWebhookReqConfig) SetTo(v ReposCreateWebhookReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposCreateWebhookReqConfig) Get() (v ReposCreateWebhookReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposCreateWebhookReqConfig) Or(d ReposCreateWebhookReqConfig) ReposCreateWebhookReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposDeleteFileReqAuthor returns new OptReposDeleteFileReqAuthor with value set to v.
func NewOptReposDeleteFileReqAuthor(v ReposDeleteFileReqAuthor) OptReposDeleteFileReqAuthor {
	return OptReposDeleteFileReqAuthor{
		Value: v,
		Set:   true,
	}
}

// OptReposDeleteFileReqAuthor is optional ReposDeleteFileReqAuthor.
type OptReposDeleteFileReqAuthor struct {
	Value ReposDeleteFileReqAuthor
	Set   bool
}

// IsSet returns true if OptReposDeleteFileReqAuthor was set.
func (o OptReposDeleteFileReqAuthor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposDeleteFileReqAuthor) Reset() {
	var v ReposDeleteFileReqAuthor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposDeleteFileReqAuthor) SetTo(v ReposDeleteFileReqAuthor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposDeleteFileReqAuthor) Get() (v ReposDeleteFileReqAuthor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposDeleteFileReqAuthor) Or(d ReposDeleteFileReqAuthor) ReposDeleteFileReqAuthor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposDeleteFileReqCommitter returns new OptReposDeleteFileReqCommitter with value set to v.
func NewOptReposDeleteFileReqCommitter(v ReposDeleteFileReqCommitter) OptReposDeleteFileReqCommitter {
	return OptReposDeleteFileReqCommitter{
		Value: v,
		Set:   true,
	}
}

// OptReposDeleteFileReqCommitter is optional ReposDeleteFileReqCommitter.
type OptReposDeleteFileReqCommitter struct {
	Value ReposDeleteFileReqCommitter
	Set   bool
}

// IsSet returns true if OptReposDeleteFileReqCommitter was set.
func (o OptReposDeleteFileReqCommitter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposDeleteFileReqCommitter) Reset() {
	var v ReposDeleteFileReqCommitter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposDeleteFileReqCommitter) SetTo(v ReposDeleteFileReqCommitter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposDeleteFileReqCommitter) Get() (v ReposDeleteFileReqCommitter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposDeleteFileReqCommitter) Or(d ReposDeleteFileReqCommitter) ReposDeleteFileReqCommitter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposGetClonesPer returns new OptReposGetClonesPer with value set to v.
func NewOptReposGetClonesPer(v ReposGetClonesPer) OptReposGetClonesPer {
	return OptReposGetClonesPer{
		Value: v,
		Set:   true,
	}
}

// OptReposGetClonesPer is optional ReposGetClonesPer.
type OptReposGetClonesPer struct {
	Value ReposGetClonesPer
	Set   bool
}

// IsSet returns true if OptReposGetClonesPer was set.
func (o OptReposGetClonesPer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposGetClonesPer) Reset() {
	var v ReposGetClonesPer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposGetClonesPer) SetTo(v ReposGetClonesPer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposGetClonesPer) Get() (v ReposGetClonesPer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposGetClonesPer) Or(d ReposGetClonesPer) ReposGetClonesPer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposGetViewsPer returns new OptReposGetViewsPer with value set to v.
func NewOptReposGetViewsPer(v ReposGetViewsPer) OptReposGetViewsPer {
	return OptReposGetViewsPer{
		Value: v,
		Set:   true,
	}
}

// OptReposGetViewsPer is optional ReposGetViewsPer.
type OptReposGetViewsPer struct {
	Value ReposGetViewsPer
	Set   bool
}

// IsSet returns true if OptReposGetViewsPer was set.
func (o OptReposGetViewsPer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposGetViewsPer) Reset() {
	var v ReposGetViewsPer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposGetViewsPer) SetTo(v ReposGetViewsPer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposGetViewsPer) Get() (v ReposGetViewsPer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposGetViewsPer) Or(d ReposGetViewsPer) ReposGetViewsPer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListCollaboratorsAffiliation returns new OptReposListCollaboratorsAffiliation with value set to v.
func NewOptReposListCollaboratorsAffiliation(v ReposListCollaboratorsAffiliation) OptReposListCollaboratorsAffiliation {
	return OptReposListCollaboratorsAffiliation{
		Value: v,
		Set:   true,
	}
}

// OptReposListCollaboratorsAffiliation is optional ReposListCollaboratorsAffiliation.
type OptReposListCollaboratorsAffiliation struct {
	Value ReposListCollaboratorsAffiliation
	Set   bool
}

// IsSet returns true if OptReposListCollaboratorsAffiliation was set.
func (o OptReposListCollaboratorsAffiliation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListCollaboratorsAffiliation) Reset() {
	var v ReposListCollaboratorsAffiliation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListCollaboratorsAffiliation) SetTo(v ReposListCollaboratorsAffiliation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListCollaboratorsAffiliation) Get() (v ReposListCollaboratorsAffiliation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListCollaboratorsAffiliation) Or(d ReposListCollaboratorsAffiliation) ReposListCollaboratorsAffiliation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserDirection returns new OptReposListForAuthenticatedUserDirection with value set to v.
func NewOptReposListForAuthenticatedUserDirection(v ReposListForAuthenticatedUserDirection) OptReposListForAuthenticatedUserDirection {
	return OptReposListForAuthenticatedUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserDirection is optional ReposListForAuthenticatedUserDirection.
type OptReposListForAuthenticatedUserDirection struct {
	Value ReposListForAuthenticatedUserDirection
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserDirection was set.
func (o OptReposListForAuthenticatedUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserDirection) Reset() {
	var v ReposListForAuthenticatedUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserDirection) SetTo(v ReposListForAuthenticatedUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserDirection) Get() (v ReposListForAuthenticatedUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserDirection) Or(d ReposListForAuthenticatedUserDirection) ReposListForAuthenticatedUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserSort returns new OptReposListForAuthenticatedUserSort with value set to v.
func NewOptReposListForAuthenticatedUserSort(v ReposListForAuthenticatedUserSort) OptReposListForAuthenticatedUserSort {
	return OptReposListForAuthenticatedUserSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserSort is optional ReposListForAuthenticatedUserSort.
type OptReposListForAuthenticatedUserSort struct {
	Value ReposListForAuthenticatedUserSort
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserSort was set.
func (o OptReposListForAuthenticatedUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserSort) Reset() {
	var v ReposListForAuthenticatedUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserSort) SetTo(v ReposListForAuthenticatedUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserSort) Get() (v ReposListForAuthenticatedUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserSort) Or(d ReposListForAuthenticatedUserSort) ReposListForAuthenticatedUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserType returns new OptReposListForAuthenticatedUserType with value set to v.
func NewOptReposListForAuthenticatedUserType(v ReposListForAuthenticatedUserType) OptReposListForAuthenticatedUserType {
	return OptReposListForAuthenticatedUserType{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserType is optional ReposListForAuthenticatedUserType.
type OptReposListForAuthenticatedUserType struct {
	Value ReposListForAuthenticatedUserType
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserType was set.
func (o OptReposListForAuthenticatedUserType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserType) Reset() {
	var v ReposListForAuthenticatedUserType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserType) SetTo(v ReposListForAuthenticatedUserType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserType) Get() (v ReposListForAuthenticatedUserType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserType) Or(d ReposListForAuthenticatedUserType) ReposListForAuthenticatedUserType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForAuthenticatedUserVisibility returns new OptReposListForAuthenticatedUserVisibility with value set to v.
func NewOptReposListForAuthenticatedUserVisibility(v ReposListForAuthenticatedUserVisibility) OptReposListForAuthenticatedUserVisibility {
	return OptReposListForAuthenticatedUserVisibility{
		Value: v,
		Set:   true,
	}
}

// OptReposListForAuthenticatedUserVisibility is optional ReposListForAuthenticatedUserVisibility.
type OptReposListForAuthenticatedUserVisibility struct {
	Value ReposListForAuthenticatedUserVisibility
	Set   bool
}

// IsSet returns true if OptReposListForAuthenticatedUserVisibility was set.
func (o OptReposListForAuthenticatedUserVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForAuthenticatedUserVisibility) Reset() {
	var v ReposListForAuthenticatedUserVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForAuthenticatedUserVisibility) SetTo(v ReposListForAuthenticatedUserVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForAuthenticatedUserVisibility) Get() (v ReposListForAuthenticatedUserVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForAuthenticatedUserVisibility) Or(d ReposListForAuthenticatedUserVisibility) ReposListForAuthenticatedUserVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForOrgDirection returns new OptReposListForOrgDirection with value set to v.
func NewOptReposListForOrgDirection(v ReposListForOrgDirection) OptReposListForOrgDirection {
	return OptReposListForOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptReposListForOrgDirection is optional ReposListForOrgDirection.
type OptReposListForOrgDirection struct {
	Value ReposListForOrgDirection
	Set   bool
}

// IsSet returns true if OptReposListForOrgDirection was set.
func (o OptReposListForOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForOrgDirection) Reset() {
	var v ReposListForOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForOrgDirection) SetTo(v ReposListForOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForOrgDirection) Get() (v ReposListForOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForOrgDirection) Or(d ReposListForOrgDirection) ReposListForOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForOrgSort returns new OptReposListForOrgSort with value set to v.
func NewOptReposListForOrgSort(v ReposListForOrgSort) OptReposListForOrgSort {
	return OptReposListForOrgSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForOrgSort is optional ReposListForOrgSort.
type OptReposListForOrgSort struct {
	Value ReposListForOrgSort
	Set   bool
}

// IsSet returns true if OptReposListForOrgSort was set.
func (o OptReposListForOrgSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForOrgSort) Reset() {
	var v ReposListForOrgSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForOrgSort) SetTo(v ReposListForOrgSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForOrgSort) Get() (v ReposListForOrgSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForOrgSort) Or(d ReposListForOrgSort) ReposListForOrgSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForOrgType returns new OptReposListForOrgType with value set to v.
func NewOptReposListForOrgType(v ReposListForOrgType) OptReposListForOrgType {
	return OptReposListForOrgType{
		Value: v,
		Set:   true,
	}
}

// OptReposListForOrgType is optional ReposListForOrgType.
type OptReposListForOrgType struct {
	Value ReposListForOrgType
	Set   bool
}

// IsSet returns true if OptReposListForOrgType was set.
func (o OptReposListForOrgType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForOrgType) Reset() {
	var v ReposListForOrgType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForOrgType) SetTo(v ReposListForOrgType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForOrgType) Get() (v ReposListForOrgType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForOrgType) Or(d ReposListForOrgType) ReposListForOrgType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForUserDirection returns new OptReposListForUserDirection with value set to v.
func NewOptReposListForUserDirection(v ReposListForUserDirection) OptReposListForUserDirection {
	return OptReposListForUserDirection{
		Value: v,
		Set:   true,
	}
}

// OptReposListForUserDirection is optional ReposListForUserDirection.
type OptReposListForUserDirection struct {
	Value ReposListForUserDirection
	Set   bool
}

// IsSet returns true if OptReposListForUserDirection was set.
func (o OptReposListForUserDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForUserDirection) Reset() {
	var v ReposListForUserDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForUserDirection) SetTo(v ReposListForUserDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForUserDirection) Get() (v ReposListForUserDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForUserDirection) Or(d ReposListForUserDirection) ReposListForUserDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForUserSort returns new OptReposListForUserSort with value set to v.
func NewOptReposListForUserSort(v ReposListForUserSort) OptReposListForUserSort {
	return OptReposListForUserSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForUserSort is optional ReposListForUserSort.
type OptReposListForUserSort struct {
	Value ReposListForUserSort
	Set   bool
}

// IsSet returns true if OptReposListForUserSort was set.
func (o OptReposListForUserSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForUserSort) Reset() {
	var v ReposListForUserSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForUserSort) SetTo(v ReposListForUserSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForUserSort) Get() (v ReposListForUserSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForUserSort) Or(d ReposListForUserSort) ReposListForUserSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForUserType returns new OptReposListForUserType with value set to v.
func NewOptReposListForUserType(v ReposListForUserType) OptReposListForUserType {
	return OptReposListForUserType{
		Value: v,
		Set:   true,
	}
}

// OptReposListForUserType is optional ReposListForUserType.
type OptReposListForUserType struct {
	Value ReposListForUserType
	Set   bool
}

// IsSet returns true if OptReposListForUserType was set.
func (o OptReposListForUserType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForUserType) Reset() {
	var v ReposListForUserType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForUserType) SetTo(v ReposListForUserType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForUserType) Get() (v ReposListForUserType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForUserType) Or(d ReposListForUserType) ReposListForUserType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposListForksSort returns new OptReposListForksSort with value set to v.
func NewOptReposListForksSort(v ReposListForksSort) OptReposListForksSort {
	return OptReposListForksSort{
		Value: v,
		Set:   true,
	}
}

// OptReposListForksSort is optional ReposListForksSort.
type OptReposListForksSort struct {
	Value ReposListForksSort
	Set   bool
}

// IsSet returns true if OptReposListForksSort was set.
func (o OptReposListForksSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposListForksSort) Reset() {
	var v ReposListForksSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposListForksSort) SetTo(v ReposListForksSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposListForksSort) Get() (v ReposListForksSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposListForksSort) Or(d ReposListForksSort) ReposListForksSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveAppAccessRestrictionsReq returns new OptReposRemoveAppAccessRestrictionsReq with value set to v.
func NewOptReposRemoveAppAccessRestrictionsReq(v ReposRemoveAppAccessRestrictionsReq) OptReposRemoveAppAccessRestrictionsReq {
	return OptReposRemoveAppAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveAppAccessRestrictionsReq is optional ReposRemoveAppAccessRestrictionsReq.
type OptReposRemoveAppAccessRestrictionsReq struct {
	Value ReposRemoveAppAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveAppAccessRestrictionsReq was set.
func (o OptReposRemoveAppAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveAppAccessRestrictionsReq) Reset() {
	var v ReposRemoveAppAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveAppAccessRestrictionsReq) SetTo(v ReposRemoveAppAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveAppAccessRestrictionsReq) Get() (v ReposRemoveAppAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveAppAccessRestrictionsReq) Or(d ReposRemoveAppAccessRestrictionsReq) ReposRemoveAppAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveStatusCheckContextsReq returns new OptReposRemoveStatusCheckContextsReq with value set to v.
func NewOptReposRemoveStatusCheckContextsReq(v ReposRemoveStatusCheckContextsReq) OptReposRemoveStatusCheckContextsReq {
	return OptReposRemoveStatusCheckContextsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveStatusCheckContextsReq is optional ReposRemoveStatusCheckContextsReq.
type OptReposRemoveStatusCheckContextsReq struct {
	Value ReposRemoveStatusCheckContextsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveStatusCheckContextsReq was set.
func (o OptReposRemoveStatusCheckContextsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveStatusCheckContextsReq) Reset() {
	var v ReposRemoveStatusCheckContextsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveStatusCheckContextsReq) SetTo(v ReposRemoveStatusCheckContextsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveStatusCheckContextsReq) Get() (v ReposRemoveStatusCheckContextsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveStatusCheckContextsReq) Or(d ReposRemoveStatusCheckContextsReq) ReposRemoveStatusCheckContextsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveTeamAccessRestrictionsReq returns new OptReposRemoveTeamAccessRestrictionsReq with value set to v.
func NewOptReposRemoveTeamAccessRestrictionsReq(v ReposRemoveTeamAccessRestrictionsReq) OptReposRemoveTeamAccessRestrictionsReq {
	return OptReposRemoveTeamAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveTeamAccessRestrictionsReq is optional ReposRemoveTeamAccessRestrictionsReq.
type OptReposRemoveTeamAccessRestrictionsReq struct {
	Value ReposRemoveTeamAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveTeamAccessRestrictionsReq was set.
func (o OptReposRemoveTeamAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveTeamAccessRestrictionsReq) Reset() {
	var v ReposRemoveTeamAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveTeamAccessRestrictionsReq) SetTo(v ReposRemoveTeamAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveTeamAccessRestrictionsReq) Get() (v ReposRemoveTeamAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveTeamAccessRestrictionsReq) Or(d ReposRemoveTeamAccessRestrictionsReq) ReposRemoveTeamAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRemoveUserAccessRestrictionsReq returns new OptReposRemoveUserAccessRestrictionsReq with value set to v.
func NewOptReposRemoveUserAccessRestrictionsReq(v ReposRemoveUserAccessRestrictionsReq) OptReposRemoveUserAccessRestrictionsReq {
	return OptReposRemoveUserAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRemoveUserAccessRestrictionsReq is optional ReposRemoveUserAccessRestrictionsReq.
type OptReposRemoveUserAccessRestrictionsReq struct {
	Value ReposRemoveUserAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposRemoveUserAccessRestrictionsReq was set.
func (o OptReposRemoveUserAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRemoveUserAccessRestrictionsReq) Reset() {
	var v ReposRemoveUserAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRemoveUserAccessRestrictionsReq) SetTo(v ReposRemoveUserAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRemoveUserAccessRestrictionsReq) Get() (v ReposRemoveUserAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRemoveUserAccessRestrictionsReq) Or(d ReposRemoveUserAccessRestrictionsReq) ReposRemoveUserAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposRenameBranchReq returns new OptReposRenameBranchReq with value set to v.
func NewOptReposRenameBranchReq(v ReposRenameBranchReq) OptReposRenameBranchReq {
	return OptReposRenameBranchReq{
		Value: v,
		Set:   true,
	}
}

// OptReposRenameBranchReq is optional ReposRenameBranchReq.
type OptReposRenameBranchReq struct {
	Value ReposRenameBranchReq
	Set   bool
}

// IsSet returns true if OptReposRenameBranchReq was set.
func (o OptReposRenameBranchReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposRenameBranchReq) Reset() {
	var v ReposRenameBranchReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposRenameBranchReq) SetTo(v ReposRenameBranchReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposRenameBranchReq) Get() (v ReposRenameBranchReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposRenameBranchReq) Or(d ReposRenameBranchReq) ReposRenameBranchReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetAppAccessRestrictionsReq returns new OptReposSetAppAccessRestrictionsReq with value set to v.
func NewOptReposSetAppAccessRestrictionsReq(v ReposSetAppAccessRestrictionsReq) OptReposSetAppAccessRestrictionsReq {
	return OptReposSetAppAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetAppAccessRestrictionsReq is optional ReposSetAppAccessRestrictionsReq.
type OptReposSetAppAccessRestrictionsReq struct {
	Value ReposSetAppAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposSetAppAccessRestrictionsReq was set.
func (o OptReposSetAppAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetAppAccessRestrictionsReq) Reset() {
	var v ReposSetAppAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetAppAccessRestrictionsReq) SetTo(v ReposSetAppAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetAppAccessRestrictionsReq) Get() (v ReposSetAppAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetAppAccessRestrictionsReq) Or(d ReposSetAppAccessRestrictionsReq) ReposSetAppAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetStatusCheckContextsReq returns new OptReposSetStatusCheckContextsReq with value set to v.
func NewOptReposSetStatusCheckContextsReq(v ReposSetStatusCheckContextsReq) OptReposSetStatusCheckContextsReq {
	return OptReposSetStatusCheckContextsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetStatusCheckContextsReq is optional ReposSetStatusCheckContextsReq.
type OptReposSetStatusCheckContextsReq struct {
	Value ReposSetStatusCheckContextsReq
	Set   bool
}

// IsSet returns true if OptReposSetStatusCheckContextsReq was set.
func (o OptReposSetStatusCheckContextsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetStatusCheckContextsReq) Reset() {
	var v ReposSetStatusCheckContextsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetStatusCheckContextsReq) SetTo(v ReposSetStatusCheckContextsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetStatusCheckContextsReq) Get() (v ReposSetStatusCheckContextsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetStatusCheckContextsReq) Or(d ReposSetStatusCheckContextsReq) ReposSetStatusCheckContextsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetTeamAccessRestrictionsReq returns new OptReposSetTeamAccessRestrictionsReq with value set to v.
func NewOptReposSetTeamAccessRestrictionsReq(v ReposSetTeamAccessRestrictionsReq) OptReposSetTeamAccessRestrictionsReq {
	return OptReposSetTeamAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetTeamAccessRestrictionsReq is optional ReposSetTeamAccessRestrictionsReq.
type OptReposSetTeamAccessRestrictionsReq struct {
	Value ReposSetTeamAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposSetTeamAccessRestrictionsReq was set.
func (o OptReposSetTeamAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetTeamAccessRestrictionsReq) Reset() {
	var v ReposSetTeamAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetTeamAccessRestrictionsReq) SetTo(v ReposSetTeamAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetTeamAccessRestrictionsReq) Get() (v ReposSetTeamAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetTeamAccessRestrictionsReq) Or(d ReposSetTeamAccessRestrictionsReq) ReposSetTeamAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposSetUserAccessRestrictionsReq returns new OptReposSetUserAccessRestrictionsReq with value set to v.
func NewOptReposSetUserAccessRestrictionsReq(v ReposSetUserAccessRestrictionsReq) OptReposSetUserAccessRestrictionsReq {
	return OptReposSetUserAccessRestrictionsReq{
		Value: v,
		Set:   true,
	}
}

// OptReposSetUserAccessRestrictionsReq is optional ReposSetUserAccessRestrictionsReq.
type OptReposSetUserAccessRestrictionsReq struct {
	Value ReposSetUserAccessRestrictionsReq
	Set   bool
}

// IsSet returns true if OptReposSetUserAccessRestrictionsReq was set.
func (o OptReposSetUserAccessRestrictionsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposSetUserAccessRestrictionsReq) Reset() {
	var v ReposSetUserAccessRestrictionsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposSetUserAccessRestrictionsReq) SetTo(v ReposSetUserAccessRestrictionsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposSetUserAccessRestrictionsReq) Get() (v ReposSetUserAccessRestrictionsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposSetUserAccessRestrictionsReq) Or(d ReposSetUserAccessRestrictionsReq) ReposSetUserAccessRestrictionsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions returns new OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions with value set to v.
func NewOptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions(v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions {
	return OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions is optional ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions.
type OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions struct {
	Value ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions was set.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) Reset() {
	var v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) SetTo(v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) Get() (v ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) Or(d ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateInvitationReq returns new OptReposUpdateInvitationReq with value set to v.
func NewOptReposUpdateInvitationReq(v ReposUpdateInvitationReq) OptReposUpdateInvitationReq {
	return OptReposUpdateInvitationReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateInvitationReq is optional ReposUpdateInvitationReq.
type OptReposUpdateInvitationReq struct {
	Value ReposUpdateInvitationReq
	Set   bool
}

// IsSet returns true if OptReposUpdateInvitationReq was set.
func (o OptReposUpdateInvitationReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateInvitationReq) Reset() {
	var v ReposUpdateInvitationReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateInvitationReq) SetTo(v ReposUpdateInvitationReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateInvitationReq) Get() (v ReposUpdateInvitationReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateInvitationReq) Or(d ReposUpdateInvitationReq) ReposUpdateInvitationReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateInvitationReqPermissions returns new OptReposUpdateInvitationReqPermissions with value set to v.
func NewOptReposUpdateInvitationReqPermissions(v ReposUpdateInvitationReqPermissions) OptReposUpdateInvitationReqPermissions {
	return OptReposUpdateInvitationReqPermissions{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateInvitationReqPermissions is optional ReposUpdateInvitationReqPermissions.
type OptReposUpdateInvitationReqPermissions struct {
	Value ReposUpdateInvitationReqPermissions
	Set   bool
}

// IsSet returns true if OptReposUpdateInvitationReqPermissions was set.
func (o OptReposUpdateInvitationReqPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateInvitationReqPermissions) Reset() {
	var v ReposUpdateInvitationReqPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateInvitationReqPermissions) SetTo(v ReposUpdateInvitationReqPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateInvitationReqPermissions) Get() (v ReposUpdateInvitationReqPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateInvitationReqPermissions) Or(d ReposUpdateInvitationReqPermissions) ReposUpdateInvitationReqPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdatePullRequestReviewProtectionReq returns new OptReposUpdatePullRequestReviewProtectionReq with value set to v.
func NewOptReposUpdatePullRequestReviewProtectionReq(v ReposUpdatePullRequestReviewProtectionReq) OptReposUpdatePullRequestReviewProtectionReq {
	return OptReposUpdatePullRequestReviewProtectionReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdatePullRequestReviewProtectionReq is optional ReposUpdatePullRequestReviewProtectionReq.
type OptReposUpdatePullRequestReviewProtectionReq struct {
	Value ReposUpdatePullRequestReviewProtectionReq
	Set   bool
}

// IsSet returns true if OptReposUpdatePullRequestReviewProtectionReq was set.
func (o OptReposUpdatePullRequestReviewProtectionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdatePullRequestReviewProtectionReq) Reset() {
	var v ReposUpdatePullRequestReviewProtectionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdatePullRequestReviewProtectionReq) SetTo(v ReposUpdatePullRequestReviewProtectionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdatePullRequestReviewProtectionReq) Get() (v ReposUpdatePullRequestReviewProtectionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdatePullRequestReviewProtectionReq) Or(d ReposUpdatePullRequestReviewProtectionReq) ReposUpdatePullRequestReviewProtectionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions returns new OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions with value set to v.
func NewOptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions(v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions {
	return OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions is optional ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions.
type OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions struct {
	Value ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions
	Set   bool
}

// IsSet returns true if OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions was set.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) Reset() {
	var v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) SetTo(v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) Get() (v ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) Or(d ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReleaseAssetReq returns new OptReposUpdateReleaseAssetReq with value set to v.
func NewOptReposUpdateReleaseAssetReq(v ReposUpdateReleaseAssetReq) OptReposUpdateReleaseAssetReq {
	return OptReposUpdateReleaseAssetReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReleaseAssetReq is optional ReposUpdateReleaseAssetReq.
type OptReposUpdateReleaseAssetReq struct {
	Value ReposUpdateReleaseAssetReq
	Set   bool
}

// IsSet returns true if OptReposUpdateReleaseAssetReq was set.
func (o OptReposUpdateReleaseAssetReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReleaseAssetReq) Reset() {
	var v ReposUpdateReleaseAssetReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReleaseAssetReq) SetTo(v ReposUpdateReleaseAssetReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReleaseAssetReq) Get() (v ReposUpdateReleaseAssetReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReleaseAssetReq) Or(d ReposUpdateReleaseAssetReq) ReposUpdateReleaseAssetReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReleaseReq returns new OptReposUpdateReleaseReq with value set to v.
func NewOptReposUpdateReleaseReq(v ReposUpdateReleaseReq) OptReposUpdateReleaseReq {
	return OptReposUpdateReleaseReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReleaseReq is optional ReposUpdateReleaseReq.
type OptReposUpdateReleaseReq struct {
	Value ReposUpdateReleaseReq
	Set   bool
}

// IsSet returns true if OptReposUpdateReleaseReq was set.
func (o OptReposUpdateReleaseReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReleaseReq) Reset() {
	var v ReposUpdateReleaseReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReleaseReq) SetTo(v ReposUpdateReleaseReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReleaseReq) Get() (v ReposUpdateReleaseReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReleaseReq) Or(d ReposUpdateReleaseReq) ReposUpdateReleaseReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReq returns new OptReposUpdateReq with value set to v.
func NewOptReposUpdateReq(v ReposUpdateReq) OptReposUpdateReq {
	return OptReposUpdateReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReq is optional ReposUpdateReq.
type OptReposUpdateReq struct {
	Value ReposUpdateReq
	Set   bool
}

// IsSet returns true if OptReposUpdateReq was set.
func (o OptReposUpdateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReq) Reset() {
	var v ReposUpdateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReq) SetTo(v ReposUpdateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReq) Get() (v ReposUpdateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReq) Or(d ReposUpdateReq) ReposUpdateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReqSecurityAndAnalysisAdvancedSecurity returns new OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity with value set to v.
func NewOptReposUpdateReqSecurityAndAnalysisAdvancedSecurity(v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity {
	return OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity is optional ReposUpdateReqSecurityAndAnalysisAdvancedSecurity.
type OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity struct {
	Value ReposUpdateReqSecurityAndAnalysisAdvancedSecurity
	Set   bool
}

// IsSet returns true if OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity was set.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) Reset() {
	var v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) SetTo(v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) Get() (v ReposUpdateReqSecurityAndAnalysisAdvancedSecurity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) Or(d ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) ReposUpdateReqSecurityAndAnalysisAdvancedSecurity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReqSecurityAndAnalysisSecretScanning returns new OptReposUpdateReqSecurityAndAnalysisSecretScanning with value set to v.
func NewOptReposUpdateReqSecurityAndAnalysisSecretScanning(v ReposUpdateReqSecurityAndAnalysisSecretScanning) OptReposUpdateReqSecurityAndAnalysisSecretScanning {
	return OptReposUpdateReqSecurityAndAnalysisSecretScanning{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReqSecurityAndAnalysisSecretScanning is optional ReposUpdateReqSecurityAndAnalysisSecretScanning.
type OptReposUpdateReqSecurityAndAnalysisSecretScanning struct {
	Value ReposUpdateReqSecurityAndAnalysisSecretScanning
	Set   bool
}

// IsSet returns true if OptReposUpdateReqSecurityAndAnalysisSecretScanning was set.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReqSecurityAndAnalysisSecretScanning) Reset() {
	var v ReposUpdateReqSecurityAndAnalysisSecretScanning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReqSecurityAndAnalysisSecretScanning) SetTo(v ReposUpdateReqSecurityAndAnalysisSecretScanning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) Get() (v ReposUpdateReqSecurityAndAnalysisSecretScanning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReqSecurityAndAnalysisSecretScanning) Or(d ReposUpdateReqSecurityAndAnalysisSecretScanning) ReposUpdateReqSecurityAndAnalysisSecretScanning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateReqVisibility returns new OptReposUpdateReqVisibility with value set to v.
func NewOptReposUpdateReqVisibility(v ReposUpdateReqVisibility) OptReposUpdateReqVisibility {
	return OptReposUpdateReqVisibility{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateReqVisibility is optional ReposUpdateReqVisibility.
type OptReposUpdateReqVisibility struct {
	Value ReposUpdateReqVisibility
	Set   bool
}

// IsSet returns true if OptReposUpdateReqVisibility was set.
func (o OptReposUpdateReqVisibility) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateReqVisibility) Reset() {
	var v ReposUpdateReqVisibility
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateReqVisibility) SetTo(v ReposUpdateReqVisibility) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateReqVisibility) Get() (v ReposUpdateReqVisibility, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateReqVisibility) Or(d ReposUpdateReqVisibility) ReposUpdateReqVisibility {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateStatusCheckProtectionReq returns new OptReposUpdateStatusCheckProtectionReq with value set to v.
func NewOptReposUpdateStatusCheckProtectionReq(v ReposUpdateStatusCheckProtectionReq) OptReposUpdateStatusCheckProtectionReq {
	return OptReposUpdateStatusCheckProtectionReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateStatusCheckProtectionReq is optional ReposUpdateStatusCheckProtectionReq.
type OptReposUpdateStatusCheckProtectionReq struct {
	Value ReposUpdateStatusCheckProtectionReq
	Set   bool
}

// IsSet returns true if OptReposUpdateStatusCheckProtectionReq was set.
func (o OptReposUpdateStatusCheckProtectionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateStatusCheckProtectionReq) Reset() {
	var v ReposUpdateStatusCheckProtectionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateStatusCheckProtectionReq) SetTo(v ReposUpdateStatusCheckProtectionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateStatusCheckProtectionReq) Get() (v ReposUpdateStatusCheckProtectionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateStatusCheckProtectionReq) Or(d ReposUpdateStatusCheckProtectionReq) ReposUpdateStatusCheckProtectionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateWebhookConfigForRepoReq returns new OptReposUpdateWebhookConfigForRepoReq with value set to v.
func NewOptReposUpdateWebhookConfigForRepoReq(v ReposUpdateWebhookConfigForRepoReq) OptReposUpdateWebhookConfigForRepoReq {
	return OptReposUpdateWebhookConfigForRepoReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateWebhookConfigForRepoReq is optional ReposUpdateWebhookConfigForRepoReq.
type OptReposUpdateWebhookConfigForRepoReq struct {
	Value ReposUpdateWebhookConfigForRepoReq
	Set   bool
}

// IsSet returns true if OptReposUpdateWebhookConfigForRepoReq was set.
func (o OptReposUpdateWebhookConfigForRepoReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateWebhookConfigForRepoReq) Reset() {
	var v ReposUpdateWebhookConfigForRepoReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateWebhookConfigForRepoReq) SetTo(v ReposUpdateWebhookConfigForRepoReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateWebhookConfigForRepoReq) Get() (v ReposUpdateWebhookConfigForRepoReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateWebhookConfigForRepoReq) Or(d ReposUpdateWebhookConfigForRepoReq) ReposUpdateWebhookConfigForRepoReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateWebhookReq returns new OptReposUpdateWebhookReq with value set to v.
func NewOptReposUpdateWebhookReq(v ReposUpdateWebhookReq) OptReposUpdateWebhookReq {
	return OptReposUpdateWebhookReq{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateWebhookReq is optional ReposUpdateWebhookReq.
type OptReposUpdateWebhookReq struct {
	Value ReposUpdateWebhookReq
	Set   bool
}

// IsSet returns true if OptReposUpdateWebhookReq was set.
func (o OptReposUpdateWebhookReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateWebhookReq) Reset() {
	var v ReposUpdateWebhookReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateWebhookReq) SetTo(v ReposUpdateWebhookReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateWebhookReq) Get() (v ReposUpdateWebhookReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateWebhookReq) Or(d ReposUpdateWebhookReq) ReposUpdateWebhookReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReposUpdateWebhookReqConfig returns new OptReposUpdateWebhookReqConfig with value set to v.
func NewOptReposUpdateWebhookReqConfig(v ReposUpdateWebhookReqConfig) OptReposUpdateWebhookReqConfig {
	return OptReposUpdateWebhookReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptReposUpdateWebhookReqConfig is optional ReposUpdateWebhookReqConfig.
type OptReposUpdateWebhookReqConfig struct {
	Value ReposUpdateWebhookReqConfig
	Set   bool
}

// IsSet returns true if OptReposUpdateWebhookReqConfig was set.
func (o OptReposUpdateWebhookReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReposUpdateWebhookReqConfig) Reset() {
	var v ReposUpdateWebhookReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReposUpdateWebhookReqConfig) SetTo(v ReposUpdateWebhookReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReposUpdateWebhookReqConfig) Get() (v ReposUpdateWebhookReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReposUpdateWebhookReqConfig) Or(d ReposUpdateWebhookReqConfig) ReposUpdateWebhookReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepository returns new OptRepository with value set to v.
func NewOptRepository(v Repository) OptRepository {
	return OptRepository{
		Value: v,
		Set:   true,
	}
}

// OptRepository is optional Repository.
type OptRepository struct {
	Value Repository
	Set   bool
}

// IsSet returns true if OptRepository was set.
func (o OptRepository) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepository) Reset() {
	var v Repository
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepository) SetTo(v Repository) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepository) Get() (v Repository, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepository) Or(d Repository) Repository {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepositoryPermissions returns new OptRepositoryPermissions with value set to v.
func NewOptRepositoryPermissions(v RepositoryPermissions) OptRepositoryPermissions {
	return OptRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptRepositoryPermissions is optional RepositoryPermissions.
type OptRepositoryPermissions struct {
	Value RepositoryPermissions
	Set   bool
}

// IsSet returns true if OptRepositoryPermissions was set.
func (o OptRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepositoryPermissions) Reset() {
	var v RepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepositoryPermissions) SetTo(v RepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepositoryPermissions) Get() (v RepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepositoryPermissions) Or(d RepositoryPermissions) RepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepositoryTemplateRepositoryOwner returns new OptRepositoryTemplateRepositoryOwner with value set to v.
func NewOptRepositoryTemplateRepositoryOwner(v RepositoryTemplateRepositoryOwner) OptRepositoryTemplateRepositoryOwner {
	return OptRepositoryTemplateRepositoryOwner{
		Value: v,
		Set:   true,
	}
}

// OptRepositoryTemplateRepositoryOwner is optional RepositoryTemplateRepositoryOwner.
type OptRepositoryTemplateRepositoryOwner struct {
	Value RepositoryTemplateRepositoryOwner
	Set   bool
}

// IsSet returns true if OptRepositoryTemplateRepositoryOwner was set.
func (o OptRepositoryTemplateRepositoryOwner) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepositoryTemplateRepositoryOwner) Reset() {
	var v RepositoryTemplateRepositoryOwner
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepositoryTemplateRepositoryOwner) SetTo(v RepositoryTemplateRepositoryOwner) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepositoryTemplateRepositoryOwner) Get() (v RepositoryTemplateRepositoryOwner, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepositoryTemplateRepositoryOwner) Or(d RepositoryTemplateRepositoryOwner) RepositoryTemplateRepositoryOwner {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRepositoryTemplateRepositoryPermissions returns new OptRepositoryTemplateRepositoryPermissions with value set to v.
func NewOptRepositoryTemplateRepositoryPermissions(v RepositoryTemplateRepositoryPermissions) OptRepositoryTemplateRepositoryPermissions {
	return OptRepositoryTemplateRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptRepositoryTemplateRepositoryPermissions is optional RepositoryTemplateRepositoryPermissions.
type OptRepositoryTemplateRepositoryPermissions struct {
	Value RepositoryTemplateRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptRepositoryTemplateRepositoryPermissions was set.
func (o OptRepositoryTemplateRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRepositoryTemplateRepositoryPermissions) Reset() {
	var v RepositoryTemplateRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRepositoryTemplateRepositoryPermissions) SetTo(v RepositoryTemplateRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRepositoryTemplateRepositoryPermissions) Get() (v RepositoryTemplateRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRepositoryTemplateRepositoryPermissions) Or(d RepositoryTemplateRepositoryPermissions) RepositoryTemplateRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReviewCommentSide returns new OptReviewCommentSide with value set to v.
func NewOptReviewCommentSide(v ReviewCommentSide) OptReviewCommentSide {
	return OptReviewCommentSide{
		Value: v,
		Set:   true,
	}
}

// OptReviewCommentSide is optional ReviewCommentSide.
type OptReviewCommentSide struct {
	Value ReviewCommentSide
	Set   bool
}

// IsSet returns true if OptReviewCommentSide was set.
func (o OptReviewCommentSide) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReviewCommentSide) Reset() {
	var v ReviewCommentSide
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReviewCommentSide) SetTo(v ReviewCommentSide) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReviewCommentSide) Get() (v ReviewCommentSide, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReviewCommentSide) Or(d ReviewCommentSide) ReviewCommentSide {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRunnerLabelsItemType returns new OptRunnerLabelsItemType with value set to v.
func NewOptRunnerLabelsItemType(v RunnerLabelsItemType) OptRunnerLabelsItemType {
	return OptRunnerLabelsItemType{
		Value: v,
		Set:   true,
	}
}

// OptRunnerLabelsItemType is optional RunnerLabelsItemType.
type OptRunnerLabelsItemType struct {
	Value RunnerLabelsItemType
	Set   bool
}

// IsSet returns true if OptRunnerLabelsItemType was set.
func (o OptRunnerLabelsItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRunnerLabelsItemType) Reset() {
	var v RunnerLabelsItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRunnerLabelsItemType) SetTo(v RunnerLabelsItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRunnerLabelsItemType) Get() (v RunnerLabelsItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRunnerLabelsItemType) Or(d RunnerLabelsItemType) RunnerLabelsItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimEnterpriseGroupMeta returns new OptScimEnterpriseGroupMeta with value set to v.
func NewOptScimEnterpriseGroupMeta(v ScimEnterpriseGroupMeta) OptScimEnterpriseGroupMeta {
	return OptScimEnterpriseGroupMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimEnterpriseGroupMeta is optional ScimEnterpriseGroupMeta.
type OptScimEnterpriseGroupMeta struct {
	Value ScimEnterpriseGroupMeta
	Set   bool
}

// IsSet returns true if OptScimEnterpriseGroupMeta was set.
func (o OptScimEnterpriseGroupMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimEnterpriseGroupMeta) Reset() {
	var v ScimEnterpriseGroupMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimEnterpriseGroupMeta) SetTo(v ScimEnterpriseGroupMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimEnterpriseGroupMeta) Get() (v ScimEnterpriseGroupMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimEnterpriseGroupMeta) Or(d ScimEnterpriseGroupMeta) ScimEnterpriseGroupMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimEnterpriseUserMeta returns new OptScimEnterpriseUserMeta with value set to v.
func NewOptScimEnterpriseUserMeta(v ScimEnterpriseUserMeta) OptScimEnterpriseUserMeta {
	return OptScimEnterpriseUserMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimEnterpriseUserMeta is optional ScimEnterpriseUserMeta.
type OptScimEnterpriseUserMeta struct {
	Value ScimEnterpriseUserMeta
	Set   bool
}

// IsSet returns true if OptScimEnterpriseUserMeta was set.
func (o OptScimEnterpriseUserMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimEnterpriseUserMeta) Reset() {
	var v ScimEnterpriseUserMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimEnterpriseUserMeta) SetTo(v ScimEnterpriseUserMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimEnterpriseUserMeta) Get() (v ScimEnterpriseUserMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimEnterpriseUserMeta) Or(d ScimEnterpriseUserMeta) ScimEnterpriseUserMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimEnterpriseUserName returns new OptScimEnterpriseUserName with value set to v.
func NewOptScimEnterpriseUserName(v ScimEnterpriseUserName) OptScimEnterpriseUserName {
	return OptScimEnterpriseUserName{
		Value: v,
		Set:   true,
	}
}

// OptScimEnterpriseUserName is optional ScimEnterpriseUserName.
type OptScimEnterpriseUserName struct {
	Value ScimEnterpriseUserName
	Set   bool
}

// IsSet returns true if OptScimEnterpriseUserName was set.
func (o OptScimEnterpriseUserName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimEnterpriseUserName) Reset() {
	var v ScimEnterpriseUserName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimEnterpriseUserName) SetTo(v ScimEnterpriseUserName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimEnterpriseUserName) Get() (v ScimEnterpriseUserName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimEnterpriseUserName) Or(d ScimEnterpriseUserName) ScimEnterpriseUserName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimGroupListEnterpriseResourcesItemMeta returns new OptScimGroupListEnterpriseResourcesItemMeta with value set to v.
func NewOptScimGroupListEnterpriseResourcesItemMeta(v ScimGroupListEnterpriseResourcesItemMeta) OptScimGroupListEnterpriseResourcesItemMeta {
	return OptScimGroupListEnterpriseResourcesItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimGroupListEnterpriseResourcesItemMeta is optional ScimGroupListEnterpriseResourcesItemMeta.
type OptScimGroupListEnterpriseResourcesItemMeta struct {
	Value ScimGroupListEnterpriseResourcesItemMeta
	Set   bool
}

// IsSet returns true if OptScimGroupListEnterpriseResourcesItemMeta was set.
func (o OptScimGroupListEnterpriseResourcesItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimGroupListEnterpriseResourcesItemMeta) Reset() {
	var v ScimGroupListEnterpriseResourcesItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimGroupListEnterpriseResourcesItemMeta) SetTo(v ScimGroupListEnterpriseResourcesItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimGroupListEnterpriseResourcesItemMeta) Get() (v ScimGroupListEnterpriseResourcesItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimGroupListEnterpriseResourcesItemMeta) Or(d ScimGroupListEnterpriseResourcesItemMeta) ScimGroupListEnterpriseResourcesItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimUserListEnterpriseResourcesItemMeta returns new OptScimUserListEnterpriseResourcesItemMeta with value set to v.
func NewOptScimUserListEnterpriseResourcesItemMeta(v ScimUserListEnterpriseResourcesItemMeta) OptScimUserListEnterpriseResourcesItemMeta {
	return OptScimUserListEnterpriseResourcesItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptScimUserListEnterpriseResourcesItemMeta is optional ScimUserListEnterpriseResourcesItemMeta.
type OptScimUserListEnterpriseResourcesItemMeta struct {
	Value ScimUserListEnterpriseResourcesItemMeta
	Set   bool
}

// IsSet returns true if OptScimUserListEnterpriseResourcesItemMeta was set.
func (o OptScimUserListEnterpriseResourcesItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimUserListEnterpriseResourcesItemMeta) Reset() {
	var v ScimUserListEnterpriseResourcesItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimUserListEnterpriseResourcesItemMeta) SetTo(v ScimUserListEnterpriseResourcesItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimUserListEnterpriseResourcesItemMeta) Get() (v ScimUserListEnterpriseResourcesItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimUserListEnterpriseResourcesItemMeta) Or(d ScimUserListEnterpriseResourcesItemMeta) ScimUserListEnterpriseResourcesItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScimUserListEnterpriseResourcesItemName returns new OptScimUserListEnterpriseResourcesItemName with value set to v.
func NewOptScimUserListEnterpriseResourcesItemName(v ScimUserListEnterpriseResourcesItemName) OptScimUserListEnterpriseResourcesItemName {
	return OptScimUserListEnterpriseResourcesItemName{
		Value: v,
		Set:   true,
	}
}

// OptScimUserListEnterpriseResourcesItemName is optional ScimUserListEnterpriseResourcesItemName.
type OptScimUserListEnterpriseResourcesItemName struct {
	Value ScimUserListEnterpriseResourcesItemName
	Set   bool
}

// IsSet returns true if OptScimUserListEnterpriseResourcesItemName was set.
func (o OptScimUserListEnterpriseResourcesItemName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScimUserListEnterpriseResourcesItemName) Reset() {
	var v ScimUserListEnterpriseResourcesItemName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScimUserListEnterpriseResourcesItemName) SetTo(v ScimUserListEnterpriseResourcesItemName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScimUserListEnterpriseResourcesItemName) Get() (v ScimUserListEnterpriseResourcesItemName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScimUserListEnterpriseResourcesItemName) Or(d ScimUserListEnterpriseResourcesItemName) ScimUserListEnterpriseResourcesItemName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCodeOrder returns new OptSearchCodeOrder with value set to v.
func NewOptSearchCodeOrder(v SearchCodeOrder) OptSearchCodeOrder {
	return OptSearchCodeOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchCodeOrder is optional SearchCodeOrder.
type OptSearchCodeOrder struct {
	Value SearchCodeOrder
	Set   bool
}

// IsSet returns true if OptSearchCodeOrder was set.
func (o OptSearchCodeOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCodeOrder) Reset() {
	var v SearchCodeOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCodeOrder) SetTo(v SearchCodeOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCodeOrder) Get() (v SearchCodeOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCodeOrder) Or(d SearchCodeOrder) SearchCodeOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCodeSort returns new OptSearchCodeSort with value set to v.
func NewOptSearchCodeSort(v SearchCodeSort) OptSearchCodeSort {
	return OptSearchCodeSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchCodeSort is optional SearchCodeSort.
type OptSearchCodeSort struct {
	Value SearchCodeSort
	Set   bool
}

// IsSet returns true if OptSearchCodeSort was set.
func (o OptSearchCodeSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCodeSort) Reset() {
	var v SearchCodeSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCodeSort) SetTo(v SearchCodeSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCodeSort) Get() (v SearchCodeSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCodeSort) Or(d SearchCodeSort) SearchCodeSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCommitsOrder returns new OptSearchCommitsOrder with value set to v.
func NewOptSearchCommitsOrder(v SearchCommitsOrder) OptSearchCommitsOrder {
	return OptSearchCommitsOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchCommitsOrder is optional SearchCommitsOrder.
type OptSearchCommitsOrder struct {
	Value SearchCommitsOrder
	Set   bool
}

// IsSet returns true if OptSearchCommitsOrder was set.
func (o OptSearchCommitsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCommitsOrder) Reset() {
	var v SearchCommitsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCommitsOrder) SetTo(v SearchCommitsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCommitsOrder) Get() (v SearchCommitsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCommitsOrder) Or(d SearchCommitsOrder) SearchCommitsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchCommitsSort returns new OptSearchCommitsSort with value set to v.
func NewOptSearchCommitsSort(v SearchCommitsSort) OptSearchCommitsSort {
	return OptSearchCommitsSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchCommitsSort is optional SearchCommitsSort.
type OptSearchCommitsSort struct {
	Value SearchCommitsSort
	Set   bool
}

// IsSet returns true if OptSearchCommitsSort was set.
func (o OptSearchCommitsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchCommitsSort) Reset() {
	var v SearchCommitsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchCommitsSort) SetTo(v SearchCommitsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchCommitsSort) Get() (v SearchCommitsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchCommitsSort) Or(d SearchCommitsSort) SearchCommitsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchIssuesAndPullRequestsOrder returns new OptSearchIssuesAndPullRequestsOrder with value set to v.
func NewOptSearchIssuesAndPullRequestsOrder(v SearchIssuesAndPullRequestsOrder) OptSearchIssuesAndPullRequestsOrder {
	return OptSearchIssuesAndPullRequestsOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchIssuesAndPullRequestsOrder is optional SearchIssuesAndPullRequestsOrder.
type OptSearchIssuesAndPullRequestsOrder struct {
	Value SearchIssuesAndPullRequestsOrder
	Set   bool
}

// IsSet returns true if OptSearchIssuesAndPullRequestsOrder was set.
func (o OptSearchIssuesAndPullRequestsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchIssuesAndPullRequestsOrder) Reset() {
	var v SearchIssuesAndPullRequestsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchIssuesAndPullRequestsOrder) SetTo(v SearchIssuesAndPullRequestsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchIssuesAndPullRequestsOrder) Get() (v SearchIssuesAndPullRequestsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchIssuesAndPullRequestsOrder) Or(d SearchIssuesAndPullRequestsOrder) SearchIssuesAndPullRequestsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchIssuesAndPullRequestsSort returns new OptSearchIssuesAndPullRequestsSort with value set to v.
func NewOptSearchIssuesAndPullRequestsSort(v SearchIssuesAndPullRequestsSort) OptSearchIssuesAndPullRequestsSort {
	return OptSearchIssuesAndPullRequestsSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchIssuesAndPullRequestsSort is optional SearchIssuesAndPullRequestsSort.
type OptSearchIssuesAndPullRequestsSort struct {
	Value SearchIssuesAndPullRequestsSort
	Set   bool
}

// IsSet returns true if OptSearchIssuesAndPullRequestsSort was set.
func (o OptSearchIssuesAndPullRequestsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchIssuesAndPullRequestsSort) Reset() {
	var v SearchIssuesAndPullRequestsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchIssuesAndPullRequestsSort) SetTo(v SearchIssuesAndPullRequestsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchIssuesAndPullRequestsSort) Get() (v SearchIssuesAndPullRequestsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchIssuesAndPullRequestsSort) Or(d SearchIssuesAndPullRequestsSort) SearchIssuesAndPullRequestsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchLabelsOrder returns new OptSearchLabelsOrder with value set to v.
func NewOptSearchLabelsOrder(v SearchLabelsOrder) OptSearchLabelsOrder {
	return OptSearchLabelsOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchLabelsOrder is optional SearchLabelsOrder.
type OptSearchLabelsOrder struct {
	Value SearchLabelsOrder
	Set   bool
}

// IsSet returns true if OptSearchLabelsOrder was set.
func (o OptSearchLabelsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchLabelsOrder) Reset() {
	var v SearchLabelsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchLabelsOrder) SetTo(v SearchLabelsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchLabelsOrder) Get() (v SearchLabelsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchLabelsOrder) Or(d SearchLabelsOrder) SearchLabelsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchLabelsSort returns new OptSearchLabelsSort with value set to v.
func NewOptSearchLabelsSort(v SearchLabelsSort) OptSearchLabelsSort {
	return OptSearchLabelsSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchLabelsSort is optional SearchLabelsSort.
type OptSearchLabelsSort struct {
	Value SearchLabelsSort
	Set   bool
}

// IsSet returns true if OptSearchLabelsSort was set.
func (o OptSearchLabelsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchLabelsSort) Reset() {
	var v SearchLabelsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchLabelsSort) SetTo(v SearchLabelsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchLabelsSort) Get() (v SearchLabelsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchLabelsSort) Or(d SearchLabelsSort) SearchLabelsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchReposOrder returns new OptSearchReposOrder with value set to v.
func NewOptSearchReposOrder(v SearchReposOrder) OptSearchReposOrder {
	return OptSearchReposOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchReposOrder is optional SearchReposOrder.
type OptSearchReposOrder struct {
	Value SearchReposOrder
	Set   bool
}

// IsSet returns true if OptSearchReposOrder was set.
func (o OptSearchReposOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchReposOrder) Reset() {
	var v SearchReposOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchReposOrder) SetTo(v SearchReposOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchReposOrder) Get() (v SearchReposOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchReposOrder) Or(d SearchReposOrder) SearchReposOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchReposSort returns new OptSearchReposSort with value set to v.
func NewOptSearchReposSort(v SearchReposSort) OptSearchReposSort {
	return OptSearchReposSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchReposSort is optional SearchReposSort.
type OptSearchReposSort struct {
	Value SearchReposSort
	Set   bool
}

// IsSet returns true if OptSearchReposSort was set.
func (o OptSearchReposSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchReposSort) Reset() {
	var v SearchReposSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchReposSort) SetTo(v SearchReposSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchReposSort) Get() (v SearchReposSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchReposSort) Or(d SearchReposSort) SearchReposSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchUsersOrder returns new OptSearchUsersOrder with value set to v.
func NewOptSearchUsersOrder(v SearchUsersOrder) OptSearchUsersOrder {
	return OptSearchUsersOrder{
		Value: v,
		Set:   true,
	}
}

// OptSearchUsersOrder is optional SearchUsersOrder.
type OptSearchUsersOrder struct {
	Value SearchUsersOrder
	Set   bool
}

// IsSet returns true if OptSearchUsersOrder was set.
func (o OptSearchUsersOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchUsersOrder) Reset() {
	var v SearchUsersOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchUsersOrder) SetTo(v SearchUsersOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchUsersOrder) Get() (v SearchUsersOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchUsersOrder) Or(d SearchUsersOrder) SearchUsersOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchUsersSort returns new OptSearchUsersSort with value set to v.
func NewOptSearchUsersSort(v SearchUsersSort) OptSearchUsersSort {
	return OptSearchUsersSort{
		Value: v,
		Set:   true,
	}
}

// OptSearchUsersSort is optional SearchUsersSort.
type OptSearchUsersSort struct {
	Value SearchUsersSort
	Set   bool
}

// IsSet returns true if OptSearchUsersSort was set.
func (o OptSearchUsersSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchUsersSort) Reset() {
	var v SearchUsersSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchUsersSort) SetTo(v SearchUsersSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchUsersSort) Get() (v SearchUsersSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchUsersSort) Or(d SearchUsersSort) SearchUsersSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretScanningAlertState returns new OptSecretScanningAlertState with value set to v.
func NewOptSecretScanningAlertState(v SecretScanningAlertState) OptSecretScanningAlertState {
	return OptSecretScanningAlertState{
		Value: v,
		Set:   true,
	}
}

// OptSecretScanningAlertState is optional SecretScanningAlertState.
type OptSecretScanningAlertState struct {
	Value SecretScanningAlertState
	Set   bool
}

// IsSet returns true if OptSecretScanningAlertState was set.
func (o OptSecretScanningAlertState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretScanningAlertState) Reset() {
	var v SecretScanningAlertState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretScanningAlertState) SetTo(v SecretScanningAlertState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretScanningAlertState) Get() (v SecretScanningAlertState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretScanningAlertState) Or(d SecretScanningAlertState) SecretScanningAlertState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretScanningListAlertsForOrgState returns new OptSecretScanningListAlertsForOrgState with value set to v.
func NewOptSecretScanningListAlertsForOrgState(v SecretScanningListAlertsForOrgState) OptSecretScanningListAlertsForOrgState {
	return OptSecretScanningListAlertsForOrgState{
		Value: v,
		Set:   true,
	}
}

// OptSecretScanningListAlertsForOrgState is optional SecretScanningListAlertsForOrgState.
type OptSecretScanningListAlertsForOrgState struct {
	Value SecretScanningListAlertsForOrgState
	Set   bool
}

// IsSet returns true if OptSecretScanningListAlertsForOrgState was set.
func (o OptSecretScanningListAlertsForOrgState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretScanningListAlertsForOrgState) Reset() {
	var v SecretScanningListAlertsForOrgState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretScanningListAlertsForOrgState) SetTo(v SecretScanningListAlertsForOrgState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretScanningListAlertsForOrgState) Get() (v SecretScanningListAlertsForOrgState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretScanningListAlertsForOrgState) Or(d SecretScanningListAlertsForOrgState) SecretScanningListAlertsForOrgState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecretScanningListAlertsForRepoState returns new OptSecretScanningListAlertsForRepoState with value set to v.
func NewOptSecretScanningListAlertsForRepoState(v SecretScanningListAlertsForRepoState) OptSecretScanningListAlertsForRepoState {
	return OptSecretScanningListAlertsForRepoState{
		Value: v,
		Set:   true,
	}
}

// OptSecretScanningListAlertsForRepoState is optional SecretScanningListAlertsForRepoState.
type OptSecretScanningListAlertsForRepoState struct {
	Value SecretScanningListAlertsForRepoState
	Set   bool
}

// IsSet returns true if OptSecretScanningListAlertsForRepoState was set.
func (o OptSecretScanningListAlertsForRepoState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecretScanningListAlertsForRepoState) Reset() {
	var v SecretScanningListAlertsForRepoState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecretScanningListAlertsForRepoState) SetTo(v SecretScanningListAlertsForRepoState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecretScanningListAlertsForRepoState) Get() (v SecretScanningListAlertsForRepoState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecretScanningListAlertsForRepoState) Or(d SecretScanningListAlertsForRepoState) SecretScanningListAlertsForRepoState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSelectedActions returns new OptSelectedActions with value set to v.
func NewOptSelectedActions(v SelectedActions) OptSelectedActions {
	return OptSelectedActions{
		Value: v,
		Set:   true,
	}
}

// OptSelectedActions is optional SelectedActions.
type OptSelectedActions struct {
	Value SelectedActions
	Set   bool
}

// IsSet returns true if OptSelectedActions was set.
func (o OptSelectedActions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSelectedActions) Reset() {
	var v SelectedActions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSelectedActions) SetTo(v SelectedActions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSelectedActions) Get() (v SelectedActions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSelectedActions) Or(d SelectedActions) SelectedActions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSelectedActionsURL returns new OptSelectedActionsURL with value set to v.
func NewOptSelectedActionsURL(v SelectedActionsURL) OptSelectedActionsURL {
	return OptSelectedActionsURL{
		Value: v,
		Set:   true,
	}
}

// OptSelectedActionsURL is optional SelectedActionsURL.
type OptSelectedActionsURL struct {
	Value SelectedActionsURL
	Set   bool
}

// IsSet returns true if OptSelectedActionsURL was set.
func (o OptSelectedActionsURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSelectedActionsURL) Reset() {
	var v SelectedActionsURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSelectedActionsURL) SetTo(v SelectedActionsURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSelectedActionsURL) Get() (v SelectedActionsURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSelectedActionsURL) Or(d SelectedActionsURL) SelectedActionsURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSimpleUser returns new OptSimpleUser with value set to v.
func NewOptSimpleUser(v SimpleUser) OptSimpleUser {
	return OptSimpleUser{
		Value: v,
		Set:   true,
	}
}

// OptSimpleUser is optional SimpleUser.
type OptSimpleUser struct {
	Value SimpleUser
	Set   bool
}

// IsSet returns true if OptSimpleUser was set.
func (o OptSimpleUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSimpleUser) Reset() {
	var v SimpleUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSimpleUser) SetTo(v SimpleUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSimpleUser) Get() (v SimpleUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSimpleUser) Or(d SimpleUser) SimpleUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatusCheckPolicy returns new OptStatusCheckPolicy with value set to v.
func NewOptStatusCheckPolicy(v StatusCheckPolicy) OptStatusCheckPolicy {
	return OptStatusCheckPolicy{
		Value: v,
		Set:   true,
	}
}

// OptStatusCheckPolicy is optional StatusCheckPolicy.
type OptStatusCheckPolicy struct {
	Value StatusCheckPolicy
	Set   bool
}

// IsSet returns true if OptStatusCheckPolicy was set.
func (o OptStatusCheckPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatusCheckPolicy) Reset() {
	var v StatusCheckPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatusCheckPolicy) SetTo(v StatusCheckPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatusCheckPolicy) Get() (v StatusCheckPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatusCheckPolicy) Or(d StatusCheckPolicy) StatusCheckPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeam returns new OptTeam with value set to v.
func NewOptTeam(v Team) OptTeam {
	return OptTeam{
		Value: v,
		Set:   true,
	}
}

// OptTeam is optional Team.
type OptTeam struct {
	Value Team
	Set   bool
}

// IsSet returns true if OptTeam was set.
func (o OptTeam) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeam) Reset() {
	var v Team
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeam) SetTo(v Team) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeam) Get() (v Team, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeam) Or(d Team) Team {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamFullPrivacy returns new OptTeamFullPrivacy with value set to v.
func NewOptTeamFullPrivacy(v TeamFullPrivacy) OptTeamFullPrivacy {
	return OptTeamFullPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamFullPrivacy is optional TeamFullPrivacy.
type OptTeamFullPrivacy struct {
	Value TeamFullPrivacy
	Set   bool
}

// IsSet returns true if OptTeamFullPrivacy was set.
func (o OptTeamFullPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamFullPrivacy) Reset() {
	var v TeamFullPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamFullPrivacy) SetTo(v TeamFullPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamFullPrivacy) Get() (v TeamFullPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamFullPrivacy) Or(d TeamFullPrivacy) TeamFullPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamPermissions returns new OptTeamPermissions with value set to v.
func NewOptTeamPermissions(v TeamPermissions) OptTeamPermissions {
	return OptTeamPermissions{
		Value: v,
		Set:   true,
	}
}

// OptTeamPermissions is optional TeamPermissions.
type OptTeamPermissions struct {
	Value TeamPermissions
	Set   bool
}

// IsSet returns true if OptTeamPermissions was set.
func (o OptTeamPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamPermissions) Reset() {
	var v TeamPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamPermissions) SetTo(v TeamPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamPermissions) Get() (v TeamPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamPermissions) Or(d TeamPermissions) TeamPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamRepositoryPermissions returns new OptTeamRepositoryPermissions with value set to v.
func NewOptTeamRepositoryPermissions(v TeamRepositoryPermissions) OptTeamRepositoryPermissions {
	return OptTeamRepositoryPermissions{
		Value: v,
		Set:   true,
	}
}

// OptTeamRepositoryPermissions is optional TeamRepositoryPermissions.
type OptTeamRepositoryPermissions struct {
	Value TeamRepositoryPermissions
	Set   bool
}

// IsSet returns true if OptTeamRepositoryPermissions was set.
func (o OptTeamRepositoryPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamRepositoryPermissions) Reset() {
	var v TeamRepositoryPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamRepositoryPermissions) SetTo(v TeamRepositoryPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamRepositoryPermissions) Get() (v TeamRepositoryPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamRepositoryPermissions) Or(d TeamRepositoryPermissions) TeamRepositoryPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserInOrgReq returns new OptTeamsAddOrUpdateMembershipForUserInOrgReq with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserInOrgReq(v TeamsAddOrUpdateMembershipForUserInOrgReq) OptTeamsAddOrUpdateMembershipForUserInOrgReq {
	return OptTeamsAddOrUpdateMembershipForUserInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserInOrgReq is optional TeamsAddOrUpdateMembershipForUserInOrgReq.
type OptTeamsAddOrUpdateMembershipForUserInOrgReq struct {
	Value TeamsAddOrUpdateMembershipForUserInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserInOrgReq was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReq) Reset() {
	var v TeamsAddOrUpdateMembershipForUserInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReq) SetTo(v TeamsAddOrUpdateMembershipForUserInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReq) Get() (v TeamsAddOrUpdateMembershipForUserInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReq) Or(d TeamsAddOrUpdateMembershipForUserInOrgReq) TeamsAddOrUpdateMembershipForUserInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserInOrgReqRole returns new OptTeamsAddOrUpdateMembershipForUserInOrgReqRole with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserInOrgReqRole(v TeamsAddOrUpdateMembershipForUserInOrgReqRole) OptTeamsAddOrUpdateMembershipForUserInOrgReqRole {
	return OptTeamsAddOrUpdateMembershipForUserInOrgReqRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserInOrgReqRole is optional TeamsAddOrUpdateMembershipForUserInOrgReqRole.
type OptTeamsAddOrUpdateMembershipForUserInOrgReqRole struct {
	Value TeamsAddOrUpdateMembershipForUserInOrgReqRole
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserInOrgReqRole was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) Reset() {
	var v TeamsAddOrUpdateMembershipForUserInOrgReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) SetTo(v TeamsAddOrUpdateMembershipForUserInOrgReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) Get() (v TeamsAddOrUpdateMembershipForUserInOrgReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) Or(d TeamsAddOrUpdateMembershipForUserInOrgReqRole) TeamsAddOrUpdateMembershipForUserInOrgReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserLegacyReq returns new OptTeamsAddOrUpdateMembershipForUserLegacyReq with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserLegacyReq(v TeamsAddOrUpdateMembershipForUserLegacyReq) OptTeamsAddOrUpdateMembershipForUserLegacyReq {
	return OptTeamsAddOrUpdateMembershipForUserLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserLegacyReq is optional TeamsAddOrUpdateMembershipForUserLegacyReq.
type OptTeamsAddOrUpdateMembershipForUserLegacyReq struct {
	Value TeamsAddOrUpdateMembershipForUserLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserLegacyReq was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReq) Reset() {
	var v TeamsAddOrUpdateMembershipForUserLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReq) SetTo(v TeamsAddOrUpdateMembershipForUserLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReq) Get() (v TeamsAddOrUpdateMembershipForUserLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReq) Or(d TeamsAddOrUpdateMembershipForUserLegacyReq) TeamsAddOrUpdateMembershipForUserLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateMembershipForUserLegacyReqRole returns new OptTeamsAddOrUpdateMembershipForUserLegacyReqRole with value set to v.
func NewOptTeamsAddOrUpdateMembershipForUserLegacyReqRole(v TeamsAddOrUpdateMembershipForUserLegacyReqRole) OptTeamsAddOrUpdateMembershipForUserLegacyReqRole {
	return OptTeamsAddOrUpdateMembershipForUserLegacyReqRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateMembershipForUserLegacyReqRole is optional TeamsAddOrUpdateMembershipForUserLegacyReqRole.
type OptTeamsAddOrUpdateMembershipForUserLegacyReqRole struct {
	Value TeamsAddOrUpdateMembershipForUserLegacyReqRole
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateMembershipForUserLegacyReqRole was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) Reset() {
	var v TeamsAddOrUpdateMembershipForUserLegacyReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) SetTo(v TeamsAddOrUpdateMembershipForUserLegacyReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) Get() (v TeamsAddOrUpdateMembershipForUserLegacyReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) Or(d TeamsAddOrUpdateMembershipForUserLegacyReqRole) TeamsAddOrUpdateMembershipForUserLegacyReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission returns new OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission with value set to v.
func NewOptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission(v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission {
	return OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission is optional TeamsAddOrUpdateProjectPermissionsInOrgReqPermission.
type OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission struct {
	Value TeamsAddOrUpdateProjectPermissionsInOrgReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission was set.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) SetTo(v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Get() (v TeamsAddOrUpdateProjectPermissionsInOrgReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Or(d TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) TeamsAddOrUpdateProjectPermissionsInOrgReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateProjectPermissionsLegacyReq returns new OptTeamsAddOrUpdateProjectPermissionsLegacyReq with value set to v.
func NewOptTeamsAddOrUpdateProjectPermissionsLegacyReq(v TeamsAddOrUpdateProjectPermissionsLegacyReq) OptTeamsAddOrUpdateProjectPermissionsLegacyReq {
	return OptTeamsAddOrUpdateProjectPermissionsLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateProjectPermissionsLegacyReq is optional TeamsAddOrUpdateProjectPermissionsLegacyReq.
type OptTeamsAddOrUpdateProjectPermissionsLegacyReq struct {
	Value TeamsAddOrUpdateProjectPermissionsLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateProjectPermissionsLegacyReq was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReq) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReq) SetTo(v TeamsAddOrUpdateProjectPermissionsLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReq) Get() (v TeamsAddOrUpdateProjectPermissionsLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReq) Or(d TeamsAddOrUpdateProjectPermissionsLegacyReq) TeamsAddOrUpdateProjectPermissionsLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission returns new OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission with value set to v.
func NewOptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission(v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission {
	return OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission is optional TeamsAddOrUpdateProjectPermissionsLegacyReqPermission.
type OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission struct {
	Value TeamsAddOrUpdateProjectPermissionsLegacyReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Reset() {
	var v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) SetTo(v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Get() (v TeamsAddOrUpdateProjectPermissionsLegacyReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Or(d TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) TeamsAddOrUpdateProjectPermissionsLegacyReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsInOrgReq returns new OptTeamsAddOrUpdateRepoPermissionsInOrgReq with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsInOrgReq(v TeamsAddOrUpdateRepoPermissionsInOrgReq) OptTeamsAddOrUpdateRepoPermissionsInOrgReq {
	return OptTeamsAddOrUpdateRepoPermissionsInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsInOrgReq is optional TeamsAddOrUpdateRepoPermissionsInOrgReq.
type OptTeamsAddOrUpdateRepoPermissionsInOrgReq struct {
	Value TeamsAddOrUpdateRepoPermissionsInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsInOrgReq was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReq) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReq) SetTo(v TeamsAddOrUpdateRepoPermissionsInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReq) Get() (v TeamsAddOrUpdateRepoPermissionsInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReq) Or(d TeamsAddOrUpdateRepoPermissionsInOrgReq) TeamsAddOrUpdateRepoPermissionsInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission returns new OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission(v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission {
	return OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission is optional TeamsAddOrUpdateRepoPermissionsInOrgReqPermission.
type OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission struct {
	Value TeamsAddOrUpdateRepoPermissionsInOrgReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) SetTo(v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Get() (v TeamsAddOrUpdateRepoPermissionsInOrgReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Or(d TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) TeamsAddOrUpdateRepoPermissionsInOrgReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsLegacyReq returns new OptTeamsAddOrUpdateRepoPermissionsLegacyReq with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsLegacyReq(v TeamsAddOrUpdateRepoPermissionsLegacyReq) OptTeamsAddOrUpdateRepoPermissionsLegacyReq {
	return OptTeamsAddOrUpdateRepoPermissionsLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsLegacyReq is optional TeamsAddOrUpdateRepoPermissionsLegacyReq.
type OptTeamsAddOrUpdateRepoPermissionsLegacyReq struct {
	Value TeamsAddOrUpdateRepoPermissionsLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsLegacyReq was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReq) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReq) SetTo(v TeamsAddOrUpdateRepoPermissionsLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReq) Get() (v TeamsAddOrUpdateRepoPermissionsLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReq) Or(d TeamsAddOrUpdateRepoPermissionsLegacyReq) TeamsAddOrUpdateRepoPermissionsLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission returns new OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission with value set to v.
func NewOptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission(v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission {
	return OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission is optional TeamsAddOrUpdateRepoPermissionsLegacyReqPermission.
type OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission struct {
	Value TeamsAddOrUpdateRepoPermissionsLegacyReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Reset() {
	var v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) SetTo(v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Get() (v TeamsAddOrUpdateRepoPermissionsLegacyReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Or(d TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) TeamsAddOrUpdateRepoPermissionsLegacyReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsCreateReqPermission returns new OptTeamsCreateReqPermission with value set to v.
func NewOptTeamsCreateReqPermission(v TeamsCreateReqPermission) OptTeamsCreateReqPermission {
	return OptTeamsCreateReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsCreateReqPermission is optional TeamsCreateReqPermission.
type OptTeamsCreateReqPermission struct {
	Value TeamsCreateReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsCreateReqPermission was set.
func (o OptTeamsCreateReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsCreateReqPermission) Reset() {
	var v TeamsCreateReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsCreateReqPermission) SetTo(v TeamsCreateReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsCreateReqPermission) Get() (v TeamsCreateReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsCreateReqPermission) Or(d TeamsCreateReqPermission) TeamsCreateReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsCreateReqPrivacy returns new OptTeamsCreateReqPrivacy with value set to v.
func NewOptTeamsCreateReqPrivacy(v TeamsCreateReqPrivacy) OptTeamsCreateReqPrivacy {
	return OptTeamsCreateReqPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamsCreateReqPrivacy is optional TeamsCreateReqPrivacy.
type OptTeamsCreateReqPrivacy struct {
	Value TeamsCreateReqPrivacy
	Set   bool
}

// IsSet returns true if OptTeamsCreateReqPrivacy was set.
func (o OptTeamsCreateReqPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsCreateReqPrivacy) Reset() {
	var v TeamsCreateReqPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsCreateReqPrivacy) SetTo(v TeamsCreateReqPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsCreateReqPrivacy) Get() (v TeamsCreateReqPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsCreateReqPrivacy) Or(d TeamsCreateReqPrivacy) TeamsCreateReqPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionCommentsInOrgDirection returns new OptTeamsListDiscussionCommentsInOrgDirection with value set to v.
func NewOptTeamsListDiscussionCommentsInOrgDirection(v TeamsListDiscussionCommentsInOrgDirection) OptTeamsListDiscussionCommentsInOrgDirection {
	return OptTeamsListDiscussionCommentsInOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionCommentsInOrgDirection is optional TeamsListDiscussionCommentsInOrgDirection.
type OptTeamsListDiscussionCommentsInOrgDirection struct {
	Value TeamsListDiscussionCommentsInOrgDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionCommentsInOrgDirection was set.
func (o OptTeamsListDiscussionCommentsInOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionCommentsInOrgDirection) Reset() {
	var v TeamsListDiscussionCommentsInOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionCommentsInOrgDirection) SetTo(v TeamsListDiscussionCommentsInOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionCommentsInOrgDirection) Get() (v TeamsListDiscussionCommentsInOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionCommentsInOrgDirection) Or(d TeamsListDiscussionCommentsInOrgDirection) TeamsListDiscussionCommentsInOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionCommentsLegacyDirection returns new OptTeamsListDiscussionCommentsLegacyDirection with value set to v.
func NewOptTeamsListDiscussionCommentsLegacyDirection(v TeamsListDiscussionCommentsLegacyDirection) OptTeamsListDiscussionCommentsLegacyDirection {
	return OptTeamsListDiscussionCommentsLegacyDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionCommentsLegacyDirection is optional TeamsListDiscussionCommentsLegacyDirection.
type OptTeamsListDiscussionCommentsLegacyDirection struct {
	Value TeamsListDiscussionCommentsLegacyDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionCommentsLegacyDirection was set.
func (o OptTeamsListDiscussionCommentsLegacyDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionCommentsLegacyDirection) Reset() {
	var v TeamsListDiscussionCommentsLegacyDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionCommentsLegacyDirection) SetTo(v TeamsListDiscussionCommentsLegacyDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionCommentsLegacyDirection) Get() (v TeamsListDiscussionCommentsLegacyDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionCommentsLegacyDirection) Or(d TeamsListDiscussionCommentsLegacyDirection) TeamsListDiscussionCommentsLegacyDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionsInOrgDirection returns new OptTeamsListDiscussionsInOrgDirection with value set to v.
func NewOptTeamsListDiscussionsInOrgDirection(v TeamsListDiscussionsInOrgDirection) OptTeamsListDiscussionsInOrgDirection {
	return OptTeamsListDiscussionsInOrgDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionsInOrgDirection is optional TeamsListDiscussionsInOrgDirection.
type OptTeamsListDiscussionsInOrgDirection struct {
	Value TeamsListDiscussionsInOrgDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionsInOrgDirection was set.
func (o OptTeamsListDiscussionsInOrgDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionsInOrgDirection) Reset() {
	var v TeamsListDiscussionsInOrgDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionsInOrgDirection) SetTo(v TeamsListDiscussionsInOrgDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionsInOrgDirection) Get() (v TeamsListDiscussionsInOrgDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionsInOrgDirection) Or(d TeamsListDiscussionsInOrgDirection) TeamsListDiscussionsInOrgDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListDiscussionsLegacyDirection returns new OptTeamsListDiscussionsLegacyDirection with value set to v.
func NewOptTeamsListDiscussionsLegacyDirection(v TeamsListDiscussionsLegacyDirection) OptTeamsListDiscussionsLegacyDirection {
	return OptTeamsListDiscussionsLegacyDirection{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListDiscussionsLegacyDirection is optional TeamsListDiscussionsLegacyDirection.
type OptTeamsListDiscussionsLegacyDirection struct {
	Value TeamsListDiscussionsLegacyDirection
	Set   bool
}

// IsSet returns true if OptTeamsListDiscussionsLegacyDirection was set.
func (o OptTeamsListDiscussionsLegacyDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListDiscussionsLegacyDirection) Reset() {
	var v TeamsListDiscussionsLegacyDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListDiscussionsLegacyDirection) SetTo(v TeamsListDiscussionsLegacyDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListDiscussionsLegacyDirection) Get() (v TeamsListDiscussionsLegacyDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListDiscussionsLegacyDirection) Or(d TeamsListDiscussionsLegacyDirection) TeamsListDiscussionsLegacyDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListMembersInOrgRole returns new OptTeamsListMembersInOrgRole with value set to v.
func NewOptTeamsListMembersInOrgRole(v TeamsListMembersInOrgRole) OptTeamsListMembersInOrgRole {
	return OptTeamsListMembersInOrgRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListMembersInOrgRole is optional TeamsListMembersInOrgRole.
type OptTeamsListMembersInOrgRole struct {
	Value TeamsListMembersInOrgRole
	Set   bool
}

// IsSet returns true if OptTeamsListMembersInOrgRole was set.
func (o OptTeamsListMembersInOrgRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListMembersInOrgRole) Reset() {
	var v TeamsListMembersInOrgRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListMembersInOrgRole) SetTo(v TeamsListMembersInOrgRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListMembersInOrgRole) Get() (v TeamsListMembersInOrgRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListMembersInOrgRole) Or(d TeamsListMembersInOrgRole) TeamsListMembersInOrgRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsListMembersLegacyRole returns new OptTeamsListMembersLegacyRole with value set to v.
func NewOptTeamsListMembersLegacyRole(v TeamsListMembersLegacyRole) OptTeamsListMembersLegacyRole {
	return OptTeamsListMembersLegacyRole{
		Value: v,
		Set:   true,
	}
}

// OptTeamsListMembersLegacyRole is optional TeamsListMembersLegacyRole.
type OptTeamsListMembersLegacyRole struct {
	Value TeamsListMembersLegacyRole
	Set   bool
}

// IsSet returns true if OptTeamsListMembersLegacyRole was set.
func (o OptTeamsListMembersLegacyRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsListMembersLegacyRole) Reset() {
	var v TeamsListMembersLegacyRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsListMembersLegacyRole) SetTo(v TeamsListMembersLegacyRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsListMembersLegacyRole) Get() (v TeamsListMembersLegacyRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsListMembersLegacyRole) Or(d TeamsListMembersLegacyRole) TeamsListMembersLegacyRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateDiscussionInOrgReq returns new OptTeamsUpdateDiscussionInOrgReq with value set to v.
func NewOptTeamsUpdateDiscussionInOrgReq(v TeamsUpdateDiscussionInOrgReq) OptTeamsUpdateDiscussionInOrgReq {
	return OptTeamsUpdateDiscussionInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateDiscussionInOrgReq is optional TeamsUpdateDiscussionInOrgReq.
type OptTeamsUpdateDiscussionInOrgReq struct {
	Value TeamsUpdateDiscussionInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsUpdateDiscussionInOrgReq was set.
func (o OptTeamsUpdateDiscussionInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateDiscussionInOrgReq) Reset() {
	var v TeamsUpdateDiscussionInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateDiscussionInOrgReq) SetTo(v TeamsUpdateDiscussionInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateDiscussionInOrgReq) Get() (v TeamsUpdateDiscussionInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateDiscussionInOrgReq) Or(d TeamsUpdateDiscussionInOrgReq) TeamsUpdateDiscussionInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateDiscussionLegacyReq returns new OptTeamsUpdateDiscussionLegacyReq with value set to v.
func NewOptTeamsUpdateDiscussionLegacyReq(v TeamsUpdateDiscussionLegacyReq) OptTeamsUpdateDiscussionLegacyReq {
	return OptTeamsUpdateDiscussionLegacyReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateDiscussionLegacyReq is optional TeamsUpdateDiscussionLegacyReq.
type OptTeamsUpdateDiscussionLegacyReq struct {
	Value TeamsUpdateDiscussionLegacyReq
	Set   bool
}

// IsSet returns true if OptTeamsUpdateDiscussionLegacyReq was set.
func (o OptTeamsUpdateDiscussionLegacyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateDiscussionLegacyReq) Reset() {
	var v TeamsUpdateDiscussionLegacyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateDiscussionLegacyReq) SetTo(v TeamsUpdateDiscussionLegacyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateDiscussionLegacyReq) Get() (v TeamsUpdateDiscussionLegacyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateDiscussionLegacyReq) Or(d TeamsUpdateDiscussionLegacyReq) TeamsUpdateDiscussionLegacyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateInOrgReq returns new OptTeamsUpdateInOrgReq with value set to v.
func NewOptTeamsUpdateInOrgReq(v TeamsUpdateInOrgReq) OptTeamsUpdateInOrgReq {
	return OptTeamsUpdateInOrgReq{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateInOrgReq is optional TeamsUpdateInOrgReq.
type OptTeamsUpdateInOrgReq struct {
	Value TeamsUpdateInOrgReq
	Set   bool
}

// IsSet returns true if OptTeamsUpdateInOrgReq was set.
func (o OptTeamsUpdateInOrgReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateInOrgReq) Reset() {
	var v TeamsUpdateInOrgReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateInOrgReq) SetTo(v TeamsUpdateInOrgReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateInOrgReq) Get() (v TeamsUpdateInOrgReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateInOrgReq) Or(d TeamsUpdateInOrgReq) TeamsUpdateInOrgReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateInOrgReqPermission returns new OptTeamsUpdateInOrgReqPermission with value set to v.
func NewOptTeamsUpdateInOrgReqPermission(v TeamsUpdateInOrgReqPermission) OptTeamsUpdateInOrgReqPermission {
	return OptTeamsUpdateInOrgReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateInOrgReqPermission is optional TeamsUpdateInOrgReqPermission.
type OptTeamsUpdateInOrgReqPermission struct {
	Value TeamsUpdateInOrgReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsUpdateInOrgReqPermission was set.
func (o OptTeamsUpdateInOrgReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateInOrgReqPermission) Reset() {
	var v TeamsUpdateInOrgReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateInOrgReqPermission) SetTo(v TeamsUpdateInOrgReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateInOrgReqPermission) Get() (v TeamsUpdateInOrgReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateInOrgReqPermission) Or(d TeamsUpdateInOrgReqPermission) TeamsUpdateInOrgReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateInOrgReqPrivacy returns new OptTeamsUpdateInOrgReqPrivacy with value set to v.
func NewOptTeamsUpdateInOrgReqPrivacy(v TeamsUpdateInOrgReqPrivacy) OptTeamsUpdateInOrgReqPrivacy {
	return OptTeamsUpdateInOrgReqPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateInOrgReqPrivacy is optional TeamsUpdateInOrgReqPrivacy.
type OptTeamsUpdateInOrgReqPrivacy struct {
	Value TeamsUpdateInOrgReqPrivacy
	Set   bool
}

// IsSet returns true if OptTeamsUpdateInOrgReqPrivacy was set.
func (o OptTeamsUpdateInOrgReqPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateInOrgReqPrivacy) Reset() {
	var v TeamsUpdateInOrgReqPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateInOrgReqPrivacy) SetTo(v TeamsUpdateInOrgReqPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateInOrgReqPrivacy) Get() (v TeamsUpdateInOrgReqPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateInOrgReqPrivacy) Or(d TeamsUpdateInOrgReqPrivacy) TeamsUpdateInOrgReqPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateLegacyReqPermission returns new OptTeamsUpdateLegacyReqPermission with value set to v.
func NewOptTeamsUpdateLegacyReqPermission(v TeamsUpdateLegacyReqPermission) OptTeamsUpdateLegacyReqPermission {
	return OptTeamsUpdateLegacyReqPermission{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateLegacyReqPermission is optional TeamsUpdateLegacyReqPermission.
type OptTeamsUpdateLegacyReqPermission struct {
	Value TeamsUpdateLegacyReqPermission
	Set   bool
}

// IsSet returns true if OptTeamsUpdateLegacyReqPermission was set.
func (o OptTeamsUpdateLegacyReqPermission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateLegacyReqPermission) Reset() {
	var v TeamsUpdateLegacyReqPermission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateLegacyReqPermission) SetTo(v TeamsUpdateLegacyReqPermission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateLegacyReqPermission) Get() (v TeamsUpdateLegacyReqPermission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateLegacyReqPermission) Or(d TeamsUpdateLegacyReqPermission) TeamsUpdateLegacyReqPermission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTeamsUpdateLegacyReqPrivacy returns new OptTeamsUpdateLegacyReqPrivacy with value set to v.
func NewOptTeamsUpdateLegacyReqPrivacy(v TeamsUpdateLegacyReqPrivacy) OptTeamsUpdateLegacyReqPrivacy {
	return OptTeamsUpdateLegacyReqPrivacy{
		Value: v,
		Set:   true,
	}
}

// OptTeamsUpdateLegacyReqPrivacy is optional TeamsUpdateLegacyReqPrivacy.
type OptTeamsUpdateLegacyReqPrivacy struct {
	Value TeamsUpdateLegacyReqPrivacy
	Set   bool
}

// IsSet returns true if OptTeamsUpdateLegacyReqPrivacy was set.
func (o OptTeamsUpdateLegacyReqPrivacy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTeamsUpdateLegacyReqPrivacy) Reset() {
	var v TeamsUpdateLegacyReqPrivacy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTeamsUpdateLegacyReqPrivacy) SetTo(v TeamsUpdateLegacyReqPrivacy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTeamsUpdateLegacyReqPrivacy) Get() (v TeamsUpdateLegacyReqPrivacy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTeamsUpdateLegacyReqPrivacy) Or(d TeamsUpdateLegacyReqPrivacy) TeamsUpdateLegacyReqPrivacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTopicSearchResultItemAliasesItemTopicRelation returns new OptTopicSearchResultItemAliasesItemTopicRelation with value set to v.
func NewOptTopicSearchResultItemAliasesItemTopicRelation(v TopicSearchResultItemAliasesItemTopicRelation) OptTopicSearchResultItemAliasesItemTopicRelation {
	return OptTopicSearchResultItemAliasesItemTopicRelation{
		Value: v,
		Set:   true,
	}
}

// OptTopicSearchResultItemAliasesItemTopicRelation is optional TopicSearchResultItemAliasesItemTopicRelation.
type OptTopicSearchResultItemAliasesItemTopicRelation struct {
	Value TopicSearchResultItemAliasesItemTopicRelation
	Set   bool
}

// IsSet returns true if OptTopicSearchResultItemAliasesItemTopicRelation was set.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTopicSearchResultItemAliasesItemTopicRelation) Reset() {
	var v TopicSearchResultItemAliasesItemTopicRelation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTopicSearchResultItemAliasesItemTopicRelation) SetTo(v TopicSearchResultItemAliasesItemTopicRelation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) Get() (v TopicSearchResultItemAliasesItemTopicRelation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTopicSearchResultItemAliasesItemTopicRelation) Or(d TopicSearchResultItemAliasesItemTopicRelation) TopicSearchResultItemAliasesItemTopicRelation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTopicSearchResultItemRelatedItemTopicRelation returns new OptTopicSearchResultItemRelatedItemTopicRelation with value set to v.
func NewOptTopicSearchResultItemRelatedItemTopicRelation(v TopicSearchResultItemRelatedItemTopicRelation) OptTopicSearchResultItemRelatedItemTopicRelation {
	return OptTopicSearchResultItemRelatedItemTopicRelation{
		Value: v,
		Set:   true,
	}
}

// OptTopicSearchResultItemRelatedItemTopicRelation is optional TopicSearchResultItemRelatedItemTopicRelation.
type OptTopicSearchResultItemRelatedItemTopicRelation struct {
	Value TopicSearchResultItemRelatedItemTopicRelation
	Set   bool
}

// IsSet returns true if OptTopicSearchResultItemRelatedItemTopicRelation was set.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTopicSearchResultItemRelatedItemTopicRelation) Reset() {
	var v TopicSearchResultItemRelatedItemTopicRelation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTopicSearchResultItemRelatedItemTopicRelation) SetTo(v TopicSearchResultItemRelatedItemTopicRelation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) Get() (v TopicSearchResultItemRelatedItemTopicRelation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTopicSearchResultItemRelatedItemTopicRelation) Or(d TopicSearchResultItemRelatedItemTopicRelation) TopicSearchResultItemRelatedItemTopicRelation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersAddEmailForAuthenticatedReq returns new OptUsersAddEmailForAuthenticatedReq with value set to v.
func NewOptUsersAddEmailForAuthenticatedReq(v UsersAddEmailForAuthenticatedReq) OptUsersAddEmailForAuthenticatedReq {
	return OptUsersAddEmailForAuthenticatedReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersAddEmailForAuthenticatedReq is optional UsersAddEmailForAuthenticatedReq.
type OptUsersAddEmailForAuthenticatedReq struct {
	Value UsersAddEmailForAuthenticatedReq
	Set   bool
}

// IsSet returns true if OptUsersAddEmailForAuthenticatedReq was set.
func (o OptUsersAddEmailForAuthenticatedReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersAddEmailForAuthenticatedReq) Reset() {
	var v UsersAddEmailForAuthenticatedReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersAddEmailForAuthenticatedReq) SetTo(v UsersAddEmailForAuthenticatedReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersAddEmailForAuthenticatedReq) Get() (v UsersAddEmailForAuthenticatedReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersAddEmailForAuthenticatedReq) Or(d UsersAddEmailForAuthenticatedReq) UsersAddEmailForAuthenticatedReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersDeleteEmailForAuthenticatedReq returns new OptUsersDeleteEmailForAuthenticatedReq with value set to v.
func NewOptUsersDeleteEmailForAuthenticatedReq(v UsersDeleteEmailForAuthenticatedReq) OptUsersDeleteEmailForAuthenticatedReq {
	return OptUsersDeleteEmailForAuthenticatedReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersDeleteEmailForAuthenticatedReq is optional UsersDeleteEmailForAuthenticatedReq.
type OptUsersDeleteEmailForAuthenticatedReq struct {
	Value UsersDeleteEmailForAuthenticatedReq
	Set   bool
}

// IsSet returns true if OptUsersDeleteEmailForAuthenticatedReq was set.
func (o OptUsersDeleteEmailForAuthenticatedReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersDeleteEmailForAuthenticatedReq) Reset() {
	var v UsersDeleteEmailForAuthenticatedReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersDeleteEmailForAuthenticatedReq) SetTo(v UsersDeleteEmailForAuthenticatedReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersDeleteEmailForAuthenticatedReq) Get() (v UsersDeleteEmailForAuthenticatedReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersDeleteEmailForAuthenticatedReq) Or(d UsersDeleteEmailForAuthenticatedReq) UsersDeleteEmailForAuthenticatedReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersGetContextForUserSubjectType returns new OptUsersGetContextForUserSubjectType with value set to v.
func NewOptUsersGetContextForUserSubjectType(v UsersGetContextForUserSubjectType) OptUsersGetContextForUserSubjectType {
	return OptUsersGetContextForUserSubjectType{
		Value: v,
		Set:   true,
	}
}

// OptUsersGetContextForUserSubjectType is optional UsersGetContextForUserSubjectType.
type OptUsersGetContextForUserSubjectType struct {
	Value UsersGetContextForUserSubjectType
	Set   bool
}

// IsSet returns true if OptUsersGetContextForUserSubjectType was set.
func (o OptUsersGetContextForUserSubjectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersGetContextForUserSubjectType) Reset() {
	var v UsersGetContextForUserSubjectType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersGetContextForUserSubjectType) SetTo(v UsersGetContextForUserSubjectType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersGetContextForUserSubjectType) Get() (v UsersGetContextForUserSubjectType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersGetContextForUserSubjectType) Or(d UsersGetContextForUserSubjectType) UsersGetContextForUserSubjectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersUpdateAuthenticatedReq returns new OptUsersUpdateAuthenticatedReq with value set to v.
func NewOptUsersUpdateAuthenticatedReq(v UsersUpdateAuthenticatedReq) OptUsersUpdateAuthenticatedReq {
	return OptUsersUpdateAuthenticatedReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersUpdateAuthenticatedReq is optional UsersUpdateAuthenticatedReq.
type OptUsersUpdateAuthenticatedReq struct {
	Value UsersUpdateAuthenticatedReq
	Set   bool
}

// IsSet returns true if OptUsersUpdateAuthenticatedReq was set.
func (o OptUsersUpdateAuthenticatedReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersUpdateAuthenticatedReq) Reset() {
	var v UsersUpdateAuthenticatedReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersUpdateAuthenticatedReq) SetTo(v UsersUpdateAuthenticatedReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersUpdateAuthenticatedReq) Get() (v UsersUpdateAuthenticatedReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersUpdateAuthenticatedReq) Or(d UsersUpdateAuthenticatedReq) UsersUpdateAuthenticatedReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrorErrorsItemValue returns new OptValidationErrorErrorsItemValue with value set to v.
func NewOptValidationErrorErrorsItemValue(v ValidationErrorErrorsItemValue) OptValidationErrorErrorsItemValue {
	return OptValidationErrorErrorsItemValue{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrorErrorsItemValue is optional ValidationErrorErrorsItemValue.
type OptValidationErrorErrorsItemValue struct {
	Value ValidationErrorErrorsItemValue
	Set   bool
}

// IsSet returns true if OptValidationErrorErrorsItemValue was set.
func (o OptValidationErrorErrorsItemValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrorErrorsItemValue) Reset() {
	var v ValidationErrorErrorsItemValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrorErrorsItemValue) SetTo(v ValidationErrorErrorsItemValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrorErrorsItemValue) Get() (v ValidationErrorErrorsItemValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrorErrorsItemValue) Or(d ValidationErrorErrorsItemValue) ValidationErrorErrorsItemValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerification returns new OptVerification with value set to v.
func NewOptVerification(v Verification) OptVerification {
	return OptVerification{
		Value: v,
		Set:   true,
	}
}

// OptVerification is optional Verification.
type OptVerification struct {
	Value Verification
	Set   bool
}

// IsSet returns true if OptVerification was set.
func (o OptVerification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerification) Reset() {
	var v Verification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerification) SetTo(v Verification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerification) Get() (v Verification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerification) Or(d Verification) Verification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigContentType returns new OptWebhookConfigContentType with value set to v.
func NewOptWebhookConfigContentType(v WebhookConfigContentType) OptWebhookConfigContentType {
	return OptWebhookConfigContentType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigContentType is optional WebhookConfigContentType.
type OptWebhookConfigContentType struct {
	Value WebhookConfigContentType
	Set   bool
}

// IsSet returns true if OptWebhookConfigContentType was set.
func (o OptWebhookConfigContentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigContentType) Reset() {
	var v WebhookConfigContentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigContentType) SetTo(v WebhookConfigContentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigContentType) Get() (v WebhookConfigContentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigContentType) Or(d WebhookConfigContentType) WebhookConfigContentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigInsecureSsl returns new OptWebhookConfigInsecureSsl with value set to v.
func NewOptWebhookConfigInsecureSsl(v WebhookConfigInsecureSsl) OptWebhookConfigInsecureSsl {
	return OptWebhookConfigInsecureSsl{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigInsecureSsl is optional WebhookConfigInsecureSsl.
type OptWebhookConfigInsecureSsl struct {
	Value WebhookConfigInsecureSsl
	Set   bool
}

// IsSet returns true if OptWebhookConfigInsecureSsl was set.
func (o OptWebhookConfigInsecureSsl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigInsecureSsl) Reset() {
	var v WebhookConfigInsecureSsl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigInsecureSsl) SetTo(v WebhookConfigInsecureSsl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigInsecureSsl) Get() (v WebhookConfigInsecureSsl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigInsecureSsl) Or(d WebhookConfigInsecureSsl) WebhookConfigInsecureSsl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigSecret returns new OptWebhookConfigSecret with value set to v.
func NewOptWebhookConfigSecret(v WebhookConfigSecret) OptWebhookConfigSecret {
	return OptWebhookConfigSecret{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigSecret is optional WebhookConfigSecret.
type OptWebhookConfigSecret struct {
	Value WebhookConfigSecret
	Set   bool
}

// IsSet returns true if OptWebhookConfigSecret was set.
func (o OptWebhookConfigSecret) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigSecret) Reset() {
	var v WebhookConfigSecret
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigSecret) SetTo(v WebhookConfigSecret) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigSecret) Get() (v WebhookConfigSecret, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigSecret) Or(d WebhookConfigSecret) WebhookConfigSecret {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookConfigURL returns new OptWebhookConfigURL with value set to v.
func NewOptWebhookConfigURL(v WebhookConfigURL) OptWebhookConfigURL {
	return OptWebhookConfigURL{
		Value: v,
		Set:   true,
	}
}

// OptWebhookConfigURL is optional WebhookConfigURL.
type OptWebhookConfigURL struct {
	Value WebhookConfigURL
	Set   bool
}

// IsSet returns true if OptWebhookConfigURL was set.
func (o OptWebhookConfigURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookConfigURL) Reset() {
	var v WebhookConfigURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookConfigURL) SetTo(v WebhookConfigURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookConfigURL) Get() (v WebhookConfigURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookConfigURL) Or(d WebhookConfigURL) WebhookConfigURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWorkflowRunUsageBillableMACOS returns new OptWorkflowRunUsageBillableMACOS with value set to v.
func NewOptWorkflowRunUsageBillableMACOS(v WorkflowRunUsageBillableMACOS) OptWorkflowRunUsageBillableMACOS {
	return OptWorkflowRunUsageBillableMACOS{
		Value: v,
		Set:   true,
	}
}

// OptWorkflowRunUsageBillableMACOS is optional WorkflowRunUsageBillableMACOS.
type OptWorkflowRunUsageBillableMACOS struct {
	Value WorkflowRunUsageBillableMACOS
	Set   bool
}

// IsSet returns true if OptWorkflowRunUsageBillableMACOS was set.
func (o OptWorkflowRunUsageBillableMACOS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWorkflowRunUsageBillableMACOS) Reset() {
	var v WorkflowRunUsageBillableMACOS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWorkflowRunUsageBillableMACOS) SetTo(v WorkflowRunUsageBillableMACOS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWorkflowRunUsageBillableMACOS) Get() (v WorkflowRunUsageBillableMACOS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWorkflowRunUsageBillableMACOS) Or(d WorkflowRunUsageBillableMACOS) WorkflowRunUsageBillableMACOS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWorkflowRunUsageBillableUBUNTU returns new OptWorkflowRunUsageBillableUBUNTU with value set to v.
func NewOptWorkflowRunUsageBillableUBUNTU(v WorkflowRunUsageBillableUBUNTU) OptWorkflowRunUsageBillableUBUNTU {
	return OptWorkflowRunUsageBillableUBUNTU{
		Value: v,
		Set:   true,
	}
}

// OptWorkflowRunUsageBillableUBUNTU is optional WorkflowRunUsageBillableUBUNTU.
type OptWorkflowRunUsageBillableUBUNTU struct {
	Value WorkflowRunUsageBillableUBUNTU
	Set   bool
}

// IsSet returns true if OptWorkflowRunUsageBillableUBUNTU was set.
func (o OptWorkflowRunUsageBillableUBUNTU) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWorkflowRunUsageBillableUBUNTU) Reset() {
	var v WorkflowRunUsageBillableUBUNTU
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWorkflowRunUsageBillableUBUNTU) SetTo(v WorkflowRunUsageBillableUBUNTU) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWorkflowRunUsageBillableUBUNTU) Get() (v WorkflowRunUsageBillableUBUNTU, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWorkflowRunUsageBillableUBUNTU) Or(d WorkflowRunUsageBillableUBUNTU) WorkflowRunUsageBillableUBUNTU {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWorkflowRunUsageBillableWINDOWS returns new OptWorkflowRunUsageBillableWINDOWS with value set to v.
func NewOptWorkflowRunUsageBillableWINDOWS(v WorkflowRunUsageBillableWINDOWS) OptWorkflowRunUsageBillableWINDOWS {
	return OptWorkflowRunUsageBillableWINDOWS{
		Value: v,
		Set:   true,
	}
}

// OptWorkflowRunUsageBillableWINDOWS is optional WorkflowRunUsageBillableWINDOWS.
type OptWorkflowRunUsageBillableWINDOWS struct {
	Value WorkflowRunUsageBillableWINDOWS
	Set   bool
}

// IsSet returns true if OptWorkflowRunUsageBillableWINDOWS was set.
func (o OptWorkflowRunUsageBillableWINDOWS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWorkflowRunUsageBillableWINDOWS) Reset() {
	var v WorkflowRunUsageBillableWINDOWS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWorkflowRunUsageBillableWINDOWS) SetTo(v WorkflowRunUsageBillableWINDOWS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWorkflowRunUsageBillableWINDOWS) Get() (v WorkflowRunUsageBillableWINDOWS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWorkflowRunUsageBillableWINDOWS) Or(d WorkflowRunUsageBillableWINDOWS) WorkflowRunUsageBillableWINDOWS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Org Hook.
// Ref: #/components/schemas/org-hook
type OrgHook struct {
	ID            int           `json:"id"`
	URL           url.URL       `json:"url"`
	PingURL       url.URL       `json:"ping_url"`
	DeliveriesURL OptURI        `json:"deliveries_url"`
	Name          string        `json:"name"`
	Events        []string      `json:"events"`
	Active        bool          `json:"active"`
	Config        OrgHookConfig `json:"config"`
	UpdatedAt     time.Time     `json:"updated_at"`
	CreatedAt     time.Time     `json:"created_at"`
	Type          string        `json:"type"`
}

// GetID returns the value of ID.
func (s *OrgHook) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *OrgHook) GetURL() url.URL {
	return s.URL
}

// GetPingURL returns the value of PingURL.
func (s *OrgHook) GetPingURL() url.URL {
	return s.PingURL
}

// GetDeliveriesURL returns the value of DeliveriesURL.
func (s *OrgHook) GetDeliveriesURL() OptURI {
	return s.DeliveriesURL
}

// GetName returns the value of Name.
func (s *OrgHook) GetName() string {
	return s.Name
}

// GetEvents returns the value of Events.
func (s *OrgHook) GetEvents() []string {
	return s.Events
}

// GetActive returns the value of Active.
func (s *OrgHook) GetActive() bool {
	return s.Active
}

// GetConfig returns the value of Config.
func (s *OrgHook) GetConfig() OrgHookConfig {
	return s.Config
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OrgHook) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OrgHook) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetType returns the value of Type.
func (s *OrgHook) GetType() string {
	return s.Type
}

// SetID sets the value of ID.
func (s *OrgHook) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *OrgHook) SetURL(val url.URL) {
	s.URL = val
}

// SetPingURL sets the value of PingURL.
func (s *OrgHook) SetPingURL(val url.URL) {
	s.PingURL = val
}

// SetDeliveriesURL sets the value of DeliveriesURL.
func (s *OrgHook) SetDeliveriesURL(val OptURI) {
	s.DeliveriesURL = val
}

// SetName sets the value of Name.
func (s *OrgHook) SetName(val string) {
	s.Name = val
}

// SetEvents sets the value of Events.
func (s *OrgHook) SetEvents(val []string) {
	s.Events = val
}

// SetActive sets the value of Active.
func (s *OrgHook) SetActive(val bool) {
	s.Active = val
}

// SetConfig sets the value of Config.
func (s *OrgHook) SetConfig(val OrgHookConfig) {
	s.Config = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OrgHook) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OrgHook) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetType sets the value of Type.
func (s *OrgHook) SetType(val string) {
	s.Type = val
}

func (*OrgHook) orgsGetWebhookRes()    {}
func (*OrgHook) orgsUpdateWebhookRes() {}

type OrgHookConfig struct {
	URL         OptString `json:"url"`
	InsecureSsl OptString `json:"insecure_ssl"`
	ContentType OptString `json:"content_type"`
	Secret      OptString `json:"secret"`
}

// GetURL returns the value of URL.
func (s *OrgHookConfig) GetURL() OptString {
	return s.URL
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *OrgHookConfig) GetInsecureSsl() OptString {
	return s.InsecureSsl
}

// GetContentType returns the value of ContentType.
func (s *OrgHookConfig) GetContentType() OptString {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *OrgHookConfig) GetSecret() OptString {
	return s.Secret
}

// SetURL sets the value of URL.
func (s *OrgHookConfig) SetURL(val OptString) {
	s.URL = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *OrgHookConfig) SetInsecureSsl(val OptString) {
	s.InsecureSsl = val
}

// SetContentType sets the value of ContentType.
func (s *OrgHookConfig) SetContentType(val OptString) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *OrgHookConfig) SetSecret(val OptString) {
	s.Secret = val
}

// OrgHookHeaders wraps OrgHook with response headers.
type OrgHookHeaders struct {
	Location OptString
	Response OrgHook
}

// GetLocation returns the value of Location.
func (s *OrgHookHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *OrgHookHeaders) GetResponse() OrgHook {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *OrgHookHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *OrgHookHeaders) SetResponse(val OrgHook) {
	s.Response = val
}

func (*OrgHookHeaders) orgsCreateWebhookRes() {}

// Org Membership.
// Ref: #/components/schemas/org-membership
type OrgMembership struct {
	URL url.URL `json:"url"`
	// The state of the member in the organization. The `pending` state indicates the user has not yet
	// accepted an invitation.
	State OrgMembershipState `json:"state"`
	// The user's membership type in the organization.
	Role            OrgMembershipRole           `json:"role"`
	OrganizationURL url.URL                     `json:"organization_url"`
	Organization    OrganizationSimple          `json:"organization"`
	User            NilNullableSimpleUser       `json:"user"`
	Permissions     OptOrgMembershipPermissions `json:"permissions"`
}

// GetURL returns the value of URL.
func (s *OrgMembership) GetURL() url.URL {
	return s.URL
}

// GetState returns the value of State.
func (s *OrgMembership) GetState() OrgMembershipState {
	return s.State
}

// GetRole returns the value of Role.
func (s *OrgMembership) GetRole() OrgMembershipRole {
	return s.Role
}

// GetOrganizationURL returns the value of OrganizationURL.
func (s *OrgMembership) GetOrganizationURL() url.URL {
	return s.OrganizationURL
}

// GetOrganization returns the value of Organization.
func (s *OrgMembership) GetOrganization() OrganizationSimple {
	return s.Organization
}

// GetUser returns the value of User.
func (s *OrgMembership) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetPermissions returns the value of Permissions.
func (s *OrgMembership) GetPermissions() OptOrgMembershipPermissions {
	return s.Permissions
}

// SetURL sets the value of URL.
func (s *OrgMembership) SetURL(val url.URL) {
	s.URL = val
}

// SetState sets the value of State.
func (s *OrgMembership) SetState(val OrgMembershipState) {
	s.State = val
}

// SetRole sets the value of Role.
func (s *OrgMembership) SetRole(val OrgMembershipRole) {
	s.Role = val
}

// SetOrganizationURL sets the value of OrganizationURL.
func (s *OrgMembership) SetOrganizationURL(val url.URL) {
	s.OrganizationURL = val
}

// SetOrganization sets the value of Organization.
func (s *OrgMembership) SetOrganization(val OrganizationSimple) {
	s.Organization = val
}

// SetUser sets the value of User.
func (s *OrgMembership) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetPermissions sets the value of Permissions.
func (s *OrgMembership) SetPermissions(val OptOrgMembershipPermissions) {
	s.Permissions = val
}

func (*OrgMembership) orgsGetMembershipForAuthenticatedUserRes()    {}
func (*OrgMembership) orgsGetMembershipForUserRes()                 {}
func (*OrgMembership) orgsSetMembershipForUserRes()                 {}
func (*OrgMembership) orgsUpdateMembershipForAuthenticatedUserRes() {}

type OrgMembershipPermissions struct {
	CanCreateRepository bool `json:"can_create_repository"`
}

// GetCanCreateRepository returns the value of CanCreateRepository.
func (s *OrgMembershipPermissions) GetCanCreateRepository() bool {
	return s.CanCreateRepository
}

// SetCanCreateRepository sets the value of CanCreateRepository.
func (s *OrgMembershipPermissions) SetCanCreateRepository(val bool) {
	s.CanCreateRepository = val
}

// The user's membership type in the organization.
type OrgMembershipRole string

const (
	OrgMembershipRoleAdmin          OrgMembershipRole = "admin"
	OrgMembershipRoleMember         OrgMembershipRole = "member"
	OrgMembershipRoleBillingManager OrgMembershipRole = "billing_manager"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgMembershipRole) MarshalText() ([]byte, error) {
	switch s {
	case OrgMembershipRoleAdmin:
		return []byte(s), nil
	case OrgMembershipRoleMember:
		return []byte(s), nil
	case OrgMembershipRoleBillingManager:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgMembershipRole) UnmarshalText(data []byte) error {
	switch OrgMembershipRole(data) {
	case OrgMembershipRoleAdmin:
		*s = OrgMembershipRoleAdmin
		return nil
	case OrgMembershipRoleMember:
		*s = OrgMembershipRoleMember
		return nil
	case OrgMembershipRoleBillingManager:
		*s = OrgMembershipRoleBillingManager
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The state of the member in the organization. The `pending` state indicates the user has not yet
// accepted an invitation.
type OrgMembershipState string

const (
	OrgMembershipStateActive  OrgMembershipState = "active"
	OrgMembershipStatePending OrgMembershipState = "pending"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgMembershipState) MarshalText() ([]byte, error) {
	switch s {
	case OrgMembershipStateActive:
		return []byte(s), nil
	case OrgMembershipStatePending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgMembershipState) UnmarshalText(data []byte) error {
	switch OrgMembershipState(data) {
	case OrgMembershipStateActive:
		*s = OrgMembershipStateActive
		return nil
	case OrgMembershipStatePending:
		*s = OrgMembershipStatePending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Secrets for GitHub Actions for an organization.
// Ref: #/components/schemas/organization-actions-secret
type OrganizationActionsSecret struct {
	// The name of the secret.
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	// Visibility of a secret.
	Visibility              OrganizationActionsSecretVisibility `json:"visibility"`
	SelectedRepositoriesURL OptURI                              `json:"selected_repositories_url"`
}

// GetName returns the value of Name.
func (s *OrganizationActionsSecret) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OrganizationActionsSecret) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OrganizationActionsSecret) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetVisibility returns the value of Visibility.
func (s *OrganizationActionsSecret) GetVisibility() OrganizationActionsSecretVisibility {
	return s.Visibility
}

// GetSelectedRepositoriesURL returns the value of SelectedRepositoriesURL.
func (s *OrganizationActionsSecret) GetSelectedRepositoriesURL() OptURI {
	return s.SelectedRepositoriesURL
}

// SetName sets the value of Name.
func (s *OrganizationActionsSecret) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OrganizationActionsSecret) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OrganizationActionsSecret) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetVisibility sets the value of Visibility.
func (s *OrganizationActionsSecret) SetVisibility(val OrganizationActionsSecretVisibility) {
	s.Visibility = val
}

// SetSelectedRepositoriesURL sets the value of SelectedRepositoriesURL.
func (s *OrganizationActionsSecret) SetSelectedRepositoriesURL(val OptURI) {
	s.SelectedRepositoriesURL = val
}

// Visibility of a secret.
type OrganizationActionsSecretVisibility string

const (
	OrganizationActionsSecretVisibilityAll      OrganizationActionsSecretVisibility = "all"
	OrganizationActionsSecretVisibilityPrivate  OrganizationActionsSecretVisibility = "private"
	OrganizationActionsSecretVisibilitySelected OrganizationActionsSecretVisibility = "selected"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationActionsSecretVisibility) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationActionsSecretVisibilityAll:
		return []byte(s), nil
	case OrganizationActionsSecretVisibilityPrivate:
		return []byte(s), nil
	case OrganizationActionsSecretVisibilitySelected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationActionsSecretVisibility) UnmarshalText(data []byte) error {
	switch OrganizationActionsSecretVisibility(data) {
	case OrganizationActionsSecretVisibilityAll:
		*s = OrganizationActionsSecretVisibilityAll
		return nil
	case OrganizationActionsSecretVisibilityPrivate:
		*s = OrganizationActionsSecretVisibilityPrivate
		return nil
	case OrganizationActionsSecretVisibilitySelected:
		*s = OrganizationActionsSecretVisibilitySelected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Organization Full.
// Ref: #/components/schemas/organization-full
type OrganizationFull struct {
	Login                                string                  `json:"login"`
	ID                                   int                     `json:"id"`
	NodeID                               string                  `json:"node_id"`
	URL                                  url.URL                 `json:"url"`
	ReposURL                             url.URL                 `json:"repos_url"`
	EventsURL                            url.URL                 `json:"events_url"`
	HooksURL                             string                  `json:"hooks_url"`
	IssuesURL                            string                  `json:"issues_url"`
	MembersURL                           string                  `json:"members_url"`
	PublicMembersURL                     string                  `json:"public_members_url"`
	AvatarURL                            string                  `json:"avatar_url"`
	Description                          NilString               `json:"description"`
	Name                                 OptString               `json:"name"`
	Company                              OptString               `json:"company"`
	Blog                                 OptURI                  `json:"blog"`
	Location                             OptString               `json:"location"`
	Email                                OptString               `json:"email"`
	TwitterUsername                      OptNilString            `json:"twitter_username"`
	IsVerified                           OptBool                 `json:"is_verified"`
	HasOrganizationProjects              bool                    `json:"has_organization_projects"`
	HasRepositoryProjects                bool                    `json:"has_repository_projects"`
	PublicRepos                          int                     `json:"public_repos"`
	PublicGists                          int                     `json:"public_gists"`
	Followers                            int                     `json:"followers"`
	Following                            int                     `json:"following"`
	HTMLURL                              url.URL                 `json:"html_url"`
	CreatedAt                            time.Time               `json:"created_at"`
	Type                                 string                  `json:"type"`
	TotalPrivateRepos                    OptInt                  `json:"total_private_repos"`
	OwnedPrivateRepos                    OptInt                  `json:"owned_private_repos"`
	PrivateGists                         OptNilInt               `json:"private_gists"`
	DiskUsage                            OptNilInt               `json:"disk_usage"`
	Collaborators                        OptNilInt               `json:"collaborators"`
	BillingEmail                         OptNilString            `json:"billing_email"`
	Plan                                 OptOrganizationFullPlan `json:"plan"`
	DefaultRepositoryPermission          OptNilString            `json:"default_repository_permission"`
	MembersCanCreateRepositories         OptNilBool              `json:"members_can_create_repositories"`
	TwoFactorRequirementEnabled          OptNilBool              `json:"two_factor_requirement_enabled"`
	MembersAllowedRepositoryCreationType OptString               `json:"members_allowed_repository_creation_type"`
	MembersCanCreatePublicRepositories   OptBool                 `json:"members_can_create_public_repositories"`
	MembersCanCreatePrivateRepositories  OptBool                 `json:"members_can_create_private_repositories"`
	MembersCanCreateInternalRepositories OptBool                 `json:"members_can_create_internal_repositories"`
	MembersCanCreatePages                OptBool                 `json:"members_can_create_pages"`
	MembersCanCreatePublicPages          OptBool                 `json:"members_can_create_public_pages"`
	MembersCanCreatePrivatePages         OptBool                 `json:"members_can_create_private_pages"`
	UpdatedAt                            time.Time               `json:"updated_at"`
}

// GetLogin returns the value of Login.
func (s *OrganizationFull) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *OrganizationFull) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *OrganizationFull) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *OrganizationFull) GetURL() url.URL {
	return s.URL
}

// GetReposURL returns the value of ReposURL.
func (s *OrganizationFull) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *OrganizationFull) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetHooksURL returns the value of HooksURL.
func (s *OrganizationFull) GetHooksURL() string {
	return s.HooksURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *OrganizationFull) GetIssuesURL() string {
	return s.IssuesURL
}

// GetMembersURL returns the value of MembersURL.
func (s *OrganizationFull) GetMembersURL() string {
	return s.MembersURL
}

// GetPublicMembersURL returns the value of PublicMembersURL.
func (s *OrganizationFull) GetPublicMembersURL() string {
	return s.PublicMembersURL
}

// GetAvatarURL returns the value of AvatarURL.
func (s *OrganizationFull) GetAvatarURL() string {
	return s.AvatarURL
}

// GetDescription returns the value of Description.
func (s *OrganizationFull) GetDescription() NilString {
	return s.Description
}

// GetName returns the value of Name.
func (s *OrganizationFull) GetName() OptString {
	return s.Name
}

// GetCompany returns the value of Company.
func (s *OrganizationFull) GetCompany() OptString {
	return s.Company
}

// GetBlog returns the value of Blog.
func (s *OrganizationFull) GetBlog() OptURI {
	return s.Blog
}

// GetLocation returns the value of Location.
func (s *OrganizationFull) GetLocation() OptString {
	return s.Location
}

// GetEmail returns the value of Email.
func (s *OrganizationFull) GetEmail() OptString {
	return s.Email
}

// GetTwitterUsername returns the value of TwitterUsername.
func (s *OrganizationFull) GetTwitterUsername() OptNilString {
	return s.TwitterUsername
}

// GetIsVerified returns the value of IsVerified.
func (s *OrganizationFull) GetIsVerified() OptBool {
	return s.IsVerified
}

// GetHasOrganizationProjects returns the value of HasOrganizationProjects.
func (s *OrganizationFull) GetHasOrganizationProjects() bool {
	return s.HasOrganizationProjects
}

// GetHasRepositoryProjects returns the value of HasRepositoryProjects.
func (s *OrganizationFull) GetHasRepositoryProjects() bool {
	return s.HasRepositoryProjects
}

// GetPublicRepos returns the value of PublicRepos.
func (s *OrganizationFull) GetPublicRepos() int {
	return s.PublicRepos
}

// GetPublicGists returns the value of PublicGists.
func (s *OrganizationFull) GetPublicGists() int {
	return s.PublicGists
}

// GetFollowers returns the value of Followers.
func (s *OrganizationFull) GetFollowers() int {
	return s.Followers
}

// GetFollowing returns the value of Following.
func (s *OrganizationFull) GetFollowing() int {
	return s.Following
}

// GetHTMLURL returns the value of HTMLURL.
func (s *OrganizationFull) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OrganizationFull) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetType returns the value of Type.
func (s *OrganizationFull) GetType() string {
	return s.Type
}

// GetTotalPrivateRepos returns the value of TotalPrivateRepos.
func (s *OrganizationFull) GetTotalPrivateRepos() OptInt {
	return s.TotalPrivateRepos
}

// GetOwnedPrivateRepos returns the value of OwnedPrivateRepos.
func (s *OrganizationFull) GetOwnedPrivateRepos() OptInt {
	return s.OwnedPrivateRepos
}

// GetPrivateGists returns the value of PrivateGists.
func (s *OrganizationFull) GetPrivateGists() OptNilInt {
	return s.PrivateGists
}

// GetDiskUsage returns the value of DiskUsage.
func (s *OrganizationFull) GetDiskUsage() OptNilInt {
	return s.DiskUsage
}

// GetCollaborators returns the value of Collaborators.
func (s *OrganizationFull) GetCollaborators() OptNilInt {
	return s.Collaborators
}

// GetBillingEmail returns the value of BillingEmail.
func (s *OrganizationFull) GetBillingEmail() OptNilString {
	return s.BillingEmail
}

// GetPlan returns the value of Plan.
func (s *OrganizationFull) GetPlan() OptOrganizationFullPlan {
	return s.Plan
}

// GetDefaultRepositoryPermission returns the value of DefaultRepositoryPermission.
func (s *OrganizationFull) GetDefaultRepositoryPermission() OptNilString {
	return s.DefaultRepositoryPermission
}

// GetMembersCanCreateRepositories returns the value of MembersCanCreateRepositories.
func (s *OrganizationFull) GetMembersCanCreateRepositories() OptNilBool {
	return s.MembersCanCreateRepositories
}

// GetTwoFactorRequirementEnabled returns the value of TwoFactorRequirementEnabled.
func (s *OrganizationFull) GetTwoFactorRequirementEnabled() OptNilBool {
	return s.TwoFactorRequirementEnabled
}

// GetMembersAllowedRepositoryCreationType returns the value of MembersAllowedRepositoryCreationType.
func (s *OrganizationFull) GetMembersAllowedRepositoryCreationType() OptString {
	return s.MembersAllowedRepositoryCreationType
}

// GetMembersCanCreatePublicRepositories returns the value of MembersCanCreatePublicRepositories.
func (s *OrganizationFull) GetMembersCanCreatePublicRepositories() OptBool {
	return s.MembersCanCreatePublicRepositories
}

// GetMembersCanCreatePrivateRepositories returns the value of MembersCanCreatePrivateRepositories.
func (s *OrganizationFull) GetMembersCanCreatePrivateRepositories() OptBool {
	return s.MembersCanCreatePrivateRepositories
}

// GetMembersCanCreateInternalRepositories returns the value of MembersCanCreateInternalRepositories.
func (s *OrganizationFull) GetMembersCanCreateInternalRepositories() OptBool {
	return s.MembersCanCreateInternalRepositories
}

// GetMembersCanCreatePages returns the value of MembersCanCreatePages.
func (s *OrganizationFull) GetMembersCanCreatePages() OptBool {
	return s.MembersCanCreatePages
}

// GetMembersCanCreatePublicPages returns the value of MembersCanCreatePublicPages.
func (s *OrganizationFull) GetMembersCanCreatePublicPages() OptBool {
	return s.MembersCanCreatePublicPages
}

// GetMembersCanCreatePrivatePages returns the value of MembersCanCreatePrivatePages.
func (s *OrganizationFull) GetMembersCanCreatePrivatePages() OptBool {
	return s.MembersCanCreatePrivatePages
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OrganizationFull) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetLogin sets the value of Login.
func (s *OrganizationFull) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *OrganizationFull) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *OrganizationFull) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *OrganizationFull) SetURL(val url.URL) {
	s.URL = val
}

// SetReposURL sets the value of ReposURL.
func (s *OrganizationFull) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *OrganizationFull) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *OrganizationFull) SetHooksURL(val string) {
	s.HooksURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *OrganizationFull) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetMembersURL sets the value of MembersURL.
func (s *OrganizationFull) SetMembersURL(val string) {
	s.MembersURL = val
}

// SetPublicMembersURL sets the value of PublicMembersURL.
func (s *OrganizationFull) SetPublicMembersURL(val string) {
	s.PublicMembersURL = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *OrganizationFull) SetAvatarURL(val string) {
	s.AvatarURL = val
}

// SetDescription sets the value of Description.
func (s *OrganizationFull) SetDescription(val NilString) {
	s.Description = val
}

// SetName sets the value of Name.
func (s *OrganizationFull) SetName(val OptString) {
	s.Name = val
}

// SetCompany sets the value of Company.
func (s *OrganizationFull) SetCompany(val OptString) {
	s.Company = val
}

// SetBlog sets the value of Blog.
func (s *OrganizationFull) SetBlog(val OptURI) {
	s.Blog = val
}

// SetLocation sets the value of Location.
func (s *OrganizationFull) SetLocation(val OptString) {
	s.Location = val
}

// SetEmail sets the value of Email.
func (s *OrganizationFull) SetEmail(val OptString) {
	s.Email = val
}

// SetTwitterUsername sets the value of TwitterUsername.
func (s *OrganizationFull) SetTwitterUsername(val OptNilString) {
	s.TwitterUsername = val
}

// SetIsVerified sets the value of IsVerified.
func (s *OrganizationFull) SetIsVerified(val OptBool) {
	s.IsVerified = val
}

// SetHasOrganizationProjects sets the value of HasOrganizationProjects.
func (s *OrganizationFull) SetHasOrganizationProjects(val bool) {
	s.HasOrganizationProjects = val
}

// SetHasRepositoryProjects sets the value of HasRepositoryProjects.
func (s *OrganizationFull) SetHasRepositoryProjects(val bool) {
	s.HasRepositoryProjects = val
}

// SetPublicRepos sets the value of PublicRepos.
func (s *OrganizationFull) SetPublicRepos(val int) {
	s.PublicRepos = val
}

// SetPublicGists sets the value of PublicGists.
func (s *OrganizationFull) SetPublicGists(val int) {
	s.PublicGists = val
}

// SetFollowers sets the value of Followers.
func (s *OrganizationFull) SetFollowers(val int) {
	s.Followers = val
}

// SetFollowing sets the value of Following.
func (s *OrganizationFull) SetFollowing(val int) {
	s.Following = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *OrganizationFull) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OrganizationFull) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetType sets the value of Type.
func (s *OrganizationFull) SetType(val string) {
	s.Type = val
}

// SetTotalPrivateRepos sets the value of TotalPrivateRepos.
func (s *OrganizationFull) SetTotalPrivateRepos(val OptInt) {
	s.TotalPrivateRepos = val
}

// SetOwnedPrivateRepos sets the value of OwnedPrivateRepos.
func (s *OrganizationFull) SetOwnedPrivateRepos(val OptInt) {
	s.OwnedPrivateRepos = val
}

// SetPrivateGists sets the value of PrivateGists.
func (s *OrganizationFull) SetPrivateGists(val OptNilInt) {
	s.PrivateGists = val
}

// SetDiskUsage sets the value of DiskUsage.
func (s *OrganizationFull) SetDiskUsage(val OptNilInt) {
	s.DiskUsage = val
}

// SetCollaborators sets the value of Collaborators.
func (s *OrganizationFull) SetCollaborators(val OptNilInt) {
	s.Collaborators = val
}

// SetBillingEmail sets the value of BillingEmail.
func (s *OrganizationFull) SetBillingEmail(val OptNilString) {
	s.BillingEmail = val
}

// SetPlan sets the value of Plan.
func (s *OrganizationFull) SetPlan(val OptOrganizationFullPlan) {
	s.Plan = val
}

// SetDefaultRepositoryPermission sets the value of DefaultRepositoryPermission.
func (s *OrganizationFull) SetDefaultRepositoryPermission(val OptNilString) {
	s.DefaultRepositoryPermission = val
}

// SetMembersCanCreateRepositories sets the value of MembersCanCreateRepositories.
func (s *OrganizationFull) SetMembersCanCreateRepositories(val OptNilBool) {
	s.MembersCanCreateRepositories = val
}

// SetTwoFactorRequirementEnabled sets the value of TwoFactorRequirementEnabled.
func (s *OrganizationFull) SetTwoFactorRequirementEnabled(val OptNilBool) {
	s.TwoFactorRequirementEnabled = val
}

// SetMembersAllowedRepositoryCreationType sets the value of MembersAllowedRepositoryCreationType.
func (s *OrganizationFull) SetMembersAllowedRepositoryCreationType(val OptString) {
	s.MembersAllowedRepositoryCreationType = val
}

// SetMembersCanCreatePublicRepositories sets the value of MembersCanCreatePublicRepositories.
func (s *OrganizationFull) SetMembersCanCreatePublicRepositories(val OptBool) {
	s.MembersCanCreatePublicRepositories = val
}

// SetMembersCanCreatePrivateRepositories sets the value of MembersCanCreatePrivateRepositories.
func (s *OrganizationFull) SetMembersCanCreatePrivateRepositories(val OptBool) {
	s.MembersCanCreatePrivateRepositories = val
}

// SetMembersCanCreateInternalRepositories sets the value of MembersCanCreateInternalRepositories.
func (s *OrganizationFull) SetMembersCanCreateInternalRepositories(val OptBool) {
	s.MembersCanCreateInternalRepositories = val
}

// SetMembersCanCreatePages sets the value of MembersCanCreatePages.
func (s *OrganizationFull) SetMembersCanCreatePages(val OptBool) {
	s.MembersCanCreatePages = val
}

// SetMembersCanCreatePublicPages sets the value of MembersCanCreatePublicPages.
func (s *OrganizationFull) SetMembersCanCreatePublicPages(val OptBool) {
	s.MembersCanCreatePublicPages = val
}

// SetMembersCanCreatePrivatePages sets the value of MembersCanCreatePrivatePages.
func (s *OrganizationFull) SetMembersCanCreatePrivatePages(val OptBool) {
	s.MembersCanCreatePrivatePages = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OrganizationFull) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*OrganizationFull) orgsGetRes() {}

type OrganizationFullPlan struct {
	Name         string `json:"name"`
	Space        int    `json:"space"`
	PrivateRepos int    `json:"private_repos"`
	FilledSeats  OptInt `json:"filled_seats"`
	Seats        OptInt `json:"seats"`
}

// GetName returns the value of Name.
func (s *OrganizationFullPlan) GetName() string {
	return s.Name
}

// GetSpace returns the value of Space.
func (s *OrganizationFullPlan) GetSpace() int {
	return s.Space
}

// GetPrivateRepos returns the value of PrivateRepos.
func (s *OrganizationFullPlan) GetPrivateRepos() int {
	return s.PrivateRepos
}

// GetFilledSeats returns the value of FilledSeats.
func (s *OrganizationFullPlan) GetFilledSeats() OptInt {
	return s.FilledSeats
}

// GetSeats returns the value of Seats.
func (s *OrganizationFullPlan) GetSeats() OptInt {
	return s.Seats
}

// SetName sets the value of Name.
func (s *OrganizationFullPlan) SetName(val string) {
	s.Name = val
}

// SetSpace sets the value of Space.
func (s *OrganizationFullPlan) SetSpace(val int) {
	s.Space = val
}

// SetPrivateRepos sets the value of PrivateRepos.
func (s *OrganizationFullPlan) SetPrivateRepos(val int) {
	s.PrivateRepos = val
}

// SetFilledSeats sets the value of FilledSeats.
func (s *OrganizationFullPlan) SetFilledSeats(val OptInt) {
	s.FilledSeats = val
}

// SetSeats sets the value of Seats.
func (s *OrganizationFullPlan) SetSeats(val OptInt) {
	s.Seats = val
}

// Organization Invitation.
// Ref: #/components/schemas/organization-invitation
type OrganizationInvitation struct {
	ID                 int          `json:"id"`
	Login              NilString    `json:"login"`
	Email              NilString    `json:"email"`
	Role               string       `json:"role"`
	CreatedAt          string       `json:"created_at"`
	FailedAt           OptNilString `json:"failed_at"`
	FailedReason       OptNilString `json:"failed_reason"`
	Inviter            SimpleUser   `json:"inviter"`
	TeamCount          int          `json:"team_count"`
	NodeID             string       `json:"node_id"`
	InvitationTeamsURL string       `json:"invitation_teams_url"`
}

// GetID returns the value of ID.
func (s *OrganizationInvitation) GetID() int {
	return s.ID
}

// GetLogin returns the value of Login.
func (s *OrganizationInvitation) GetLogin() NilString {
	return s.Login
}

// GetEmail returns the value of Email.
func (s *OrganizationInvitation) GetEmail() NilString {
	return s.Email
}

// GetRole returns the value of Role.
func (s *OrganizationInvitation) GetRole() string {
	return s.Role
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OrganizationInvitation) GetCreatedAt() string {
	return s.CreatedAt
}

// GetFailedAt returns the value of FailedAt.
func (s *OrganizationInvitation) GetFailedAt() OptNilString {
	return s.FailedAt
}

// GetFailedReason returns the value of FailedReason.
func (s *OrganizationInvitation) GetFailedReason() OptNilString {
	return s.FailedReason
}

// GetInviter returns the value of Inviter.
func (s *OrganizationInvitation) GetInviter() SimpleUser {
	return s.Inviter
}

// GetTeamCount returns the value of TeamCount.
func (s *OrganizationInvitation) GetTeamCount() int {
	return s.TeamCount
}

// GetNodeID returns the value of NodeID.
func (s *OrganizationInvitation) GetNodeID() string {
	return s.NodeID
}

// GetInvitationTeamsURL returns the value of InvitationTeamsURL.
func (s *OrganizationInvitation) GetInvitationTeamsURL() string {
	return s.InvitationTeamsURL
}

// SetID sets the value of ID.
func (s *OrganizationInvitation) SetID(val int) {
	s.ID = val
}

// SetLogin sets the value of Login.
func (s *OrganizationInvitation) SetLogin(val NilString) {
	s.Login = val
}

// SetEmail sets the value of Email.
func (s *OrganizationInvitation) SetEmail(val NilString) {
	s.Email = val
}

// SetRole sets the value of Role.
func (s *OrganizationInvitation) SetRole(val string) {
	s.Role = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OrganizationInvitation) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetFailedAt sets the value of FailedAt.
func (s *OrganizationInvitation) SetFailedAt(val OptNilString) {
	s.FailedAt = val
}

// SetFailedReason sets the value of FailedReason.
func (s *OrganizationInvitation) SetFailedReason(val OptNilString) {
	s.FailedReason = val
}

// SetInviter sets the value of Inviter.
func (s *OrganizationInvitation) SetInviter(val SimpleUser) {
	s.Inviter = val
}

// SetTeamCount sets the value of TeamCount.
func (s *OrganizationInvitation) SetTeamCount(val int) {
	s.TeamCount = val
}

// SetNodeID sets the value of NodeID.
func (s *OrganizationInvitation) SetNodeID(val string) {
	s.NodeID = val
}

// SetInvitationTeamsURL sets the value of InvitationTeamsURL.
func (s *OrganizationInvitation) SetInvitationTeamsURL(val string) {
	s.InvitationTeamsURL = val
}

func (*OrganizationInvitation) orgsCreateInvitationRes() {}

// Ref: #/components/schemas/organization-secret-scanning-alert
type OrganizationSecretScanningAlert struct {
	Number    OptAlertNumber    `json:"number"`
	CreatedAt OptAlertCreatedAt `json:"created_at"`
	URL       OptAlertURL       `json:"url"`
	HTMLURL   OptAlertHTMLURL   `json:"html_url"`
	// The REST API URL of the code locations for this alert.
	LocationsURL OptURI                              `json:"locations_url"`
	State        OptSecretScanningAlertState         `json:"state"`
	Resolution   OptNilSecretScanningAlertResolution `json:"resolution"`
	// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	ResolvedAt OptNilDateTime           `json:"resolved_at"`
	ResolvedBy OptNilNullableSimpleUser `json:"resolved_by"`
	// The type of secret that secret scanning detected.
	SecretType OptString `json:"secret_type"`
	// The secret that was detected.
	Secret     OptString            `json:"secret"`
	Repository OptMinimalRepository `json:"repository"`
}

// GetNumber returns the value of Number.
func (s *OrganizationSecretScanningAlert) GetNumber() OptAlertNumber {
	return s.Number
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OrganizationSecretScanningAlert) GetCreatedAt() OptAlertCreatedAt {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *OrganizationSecretScanningAlert) GetURL() OptAlertURL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *OrganizationSecretScanningAlert) GetHTMLURL() OptAlertHTMLURL {
	return s.HTMLURL
}

// GetLocationsURL returns the value of LocationsURL.
func (s *OrganizationSecretScanningAlert) GetLocationsURL() OptURI {
	return s.LocationsURL
}

// GetState returns the value of State.
func (s *OrganizationSecretScanningAlert) GetState() OptSecretScanningAlertState {
	return s.State
}

// GetResolution returns the value of Resolution.
func (s *OrganizationSecretScanningAlert) GetResolution() OptNilSecretScanningAlertResolution {
	return s.Resolution
}

// GetResolvedAt returns the value of ResolvedAt.
func (s *OrganizationSecretScanningAlert) GetResolvedAt() OptNilDateTime {
	return s.ResolvedAt
}

// GetResolvedBy returns the value of ResolvedBy.
func (s *OrganizationSecretScanningAlert) GetResolvedBy() OptNilNullableSimpleUser {
	return s.ResolvedBy
}

// GetSecretType returns the value of SecretType.
func (s *OrganizationSecretScanningAlert) GetSecretType() OptString {
	return s.SecretType
}

// GetSecret returns the value of Secret.
func (s *OrganizationSecretScanningAlert) GetSecret() OptString {
	return s.Secret
}

// GetRepository returns the value of Repository.
func (s *OrganizationSecretScanningAlert) GetRepository() OptMinimalRepository {
	return s.Repository
}

// SetNumber sets the value of Number.
func (s *OrganizationSecretScanningAlert) SetNumber(val OptAlertNumber) {
	s.Number = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OrganizationSecretScanningAlert) SetCreatedAt(val OptAlertCreatedAt) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *OrganizationSecretScanningAlert) SetURL(val OptAlertURL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *OrganizationSecretScanningAlert) SetHTMLURL(val OptAlertHTMLURL) {
	s.HTMLURL = val
}

// SetLocationsURL sets the value of LocationsURL.
func (s *OrganizationSecretScanningAlert) SetLocationsURL(val OptURI) {
	s.LocationsURL = val
}

// SetState sets the value of State.
func (s *OrganizationSecretScanningAlert) SetState(val OptSecretScanningAlertState) {
	s.State = val
}

// SetResolution sets the value of Resolution.
func (s *OrganizationSecretScanningAlert) SetResolution(val OptNilSecretScanningAlertResolution) {
	s.Resolution = val
}

// SetResolvedAt sets the value of ResolvedAt.
func (s *OrganizationSecretScanningAlert) SetResolvedAt(val OptNilDateTime) {
	s.ResolvedAt = val
}

// SetResolvedBy sets the value of ResolvedBy.
func (s *OrganizationSecretScanningAlert) SetResolvedBy(val OptNilNullableSimpleUser) {
	s.ResolvedBy = val
}

// SetSecretType sets the value of SecretType.
func (s *OrganizationSecretScanningAlert) SetSecretType(val OptString) {
	s.SecretType = val
}

// SetSecret sets the value of Secret.
func (s *OrganizationSecretScanningAlert) SetSecret(val OptString) {
	s.Secret = val
}

// SetRepository sets the value of Repository.
func (s *OrganizationSecretScanningAlert) SetRepository(val OptMinimalRepository) {
	s.Repository = val
}

// Organization Simple.
// Ref: #/components/schemas/organization-simple
type OrganizationSimple struct {
	Login            string    `json:"login"`
	ID               int       `json:"id"`
	NodeID           string    `json:"node_id"`
	URL              url.URL   `json:"url"`
	ReposURL         url.URL   `json:"repos_url"`
	EventsURL        url.URL   `json:"events_url"`
	HooksURL         string    `json:"hooks_url"`
	IssuesURL        string    `json:"issues_url"`
	MembersURL       string    `json:"members_url"`
	PublicMembersURL string    `json:"public_members_url"`
	AvatarURL        string    `json:"avatar_url"`
	Description      NilString `json:"description"`
}

// GetLogin returns the value of Login.
func (s *OrganizationSimple) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *OrganizationSimple) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *OrganizationSimple) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *OrganizationSimple) GetURL() url.URL {
	return s.URL
}

// GetReposURL returns the value of ReposURL.
func (s *OrganizationSimple) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *OrganizationSimple) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetHooksURL returns the value of HooksURL.
func (s *OrganizationSimple) GetHooksURL() string {
	return s.HooksURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *OrganizationSimple) GetIssuesURL() string {
	return s.IssuesURL
}

// GetMembersURL returns the value of MembersURL.
func (s *OrganizationSimple) GetMembersURL() string {
	return s.MembersURL
}

// GetPublicMembersURL returns the value of PublicMembersURL.
func (s *OrganizationSimple) GetPublicMembersURL() string {
	return s.PublicMembersURL
}

// GetAvatarURL returns the value of AvatarURL.
func (s *OrganizationSimple) GetAvatarURL() string {
	return s.AvatarURL
}

// GetDescription returns the value of Description.
func (s *OrganizationSimple) GetDescription() NilString {
	return s.Description
}

// SetLogin sets the value of Login.
func (s *OrganizationSimple) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *OrganizationSimple) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *OrganizationSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *OrganizationSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetReposURL sets the value of ReposURL.
func (s *OrganizationSimple) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *OrganizationSimple) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *OrganizationSimple) SetHooksURL(val string) {
	s.HooksURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *OrganizationSimple) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetMembersURL sets the value of MembersURL.
func (s *OrganizationSimple) SetMembersURL(val string) {
	s.MembersURL = val
}

// SetPublicMembersURL sets the value of PublicMembersURL.
func (s *OrganizationSimple) SetPublicMembersURL(val string) {
	s.PublicMembersURL = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *OrganizationSimple) SetAvatarURL(val string) {
	s.AvatarURL = val
}

// SetDescription sets the value of Description.
func (s *OrganizationSimple) SetDescription(val NilString) {
	s.Description = val
}

// OrgsBlockUserNoContent is response for OrgsBlockUser operation.
type OrgsBlockUserNoContent struct{}

func (*OrgsBlockUserNoContent) orgsBlockUserRes() {}

// OrgsCancelInvitationNoContent is response for OrgsCancelInvitation operation.
type OrgsCancelInvitationNoContent struct{}

func (*OrgsCancelInvitationNoContent) orgsCancelInvitationRes() {}

// OrgsCheckBlockedUserNoContent is response for OrgsCheckBlockedUser operation.
type OrgsCheckBlockedUserNoContent struct{}

func (*OrgsCheckBlockedUserNoContent) orgsCheckBlockedUserRes() {}

// OrgsCheckMembershipForUserFound is response for OrgsCheckMembershipForUser operation.
type OrgsCheckMembershipForUserFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *OrgsCheckMembershipForUserFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OrgsCheckMembershipForUserFound) SetLocation(val OptString) {
	s.Location = val
}

func (*OrgsCheckMembershipForUserFound) orgsCheckMembershipForUserRes() {}

// OrgsCheckMembershipForUserNoContent is response for OrgsCheckMembershipForUser operation.
type OrgsCheckMembershipForUserNoContent struct{}

func (*OrgsCheckMembershipForUserNoContent) orgsCheckMembershipForUserRes() {}

// OrgsCheckMembershipForUserNotFound is response for OrgsCheckMembershipForUser operation.
type OrgsCheckMembershipForUserNotFound struct{}

func (*OrgsCheckMembershipForUserNotFound) orgsCheckMembershipForUserRes() {}

// OrgsCheckPublicMembershipForUserNoContent is response for OrgsCheckPublicMembershipForUser operation.
type OrgsCheckPublicMembershipForUserNoContent struct{}

func (*OrgsCheckPublicMembershipForUserNoContent) orgsCheckPublicMembershipForUserRes() {}

// OrgsCheckPublicMembershipForUserNotFound is response for OrgsCheckPublicMembershipForUser operation.
type OrgsCheckPublicMembershipForUserNotFound struct{}

func (*OrgsCheckPublicMembershipForUserNotFound) orgsCheckPublicMembershipForUserRes() {}

type OrgsConvertMemberToOutsideCollaboratorAccepted struct{}

func (*OrgsConvertMemberToOutsideCollaboratorAccepted) orgsConvertMemberToOutsideCollaboratorRes() {}

// OrgsConvertMemberToOutsideCollaboratorForbidden is response for OrgsConvertMemberToOutsideCollaborator operation.
type OrgsConvertMemberToOutsideCollaboratorForbidden struct{}

func (*OrgsConvertMemberToOutsideCollaboratorForbidden) orgsConvertMemberToOutsideCollaboratorRes() {}

// OrgsConvertMemberToOutsideCollaboratorNoContent is response for OrgsConvertMemberToOutsideCollaborator operation.
type OrgsConvertMemberToOutsideCollaboratorNoContent struct{}

func (*OrgsConvertMemberToOutsideCollaboratorNoContent) orgsConvertMemberToOutsideCollaboratorRes() {}

type OrgsCreateInvitationReq struct {
	// **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
	InviteeID OptInt `json:"invitee_id"`
	// **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which
	// can be an existing GitHub user.
	Email OptString `json:"email"`
	// Specify role for new member. Can be one of:
	// \* `admin` - Organization owners with full administrative rights to the organization and complete
	// access to all repositories and teams.
	// \* `direct_member` - Non-owner organization members with ability to see other members and join
	// teams by invitation.
	// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings
	// of your organization.
	Role OptOrgsCreateInvitationReqRole `json:"role"`
	// Specify IDs for the teams you want to invite new members to.
	TeamIds []int `json:"team_ids"`
}

// GetInviteeID returns the value of InviteeID.
func (s *OrgsCreateInvitationReq) GetInviteeID() OptInt {
	return s.InviteeID
}

// GetEmail returns the value of Email.
func (s *OrgsCreateInvitationReq) GetEmail() OptString {
	return s.Email
}

// GetRole returns the value of Role.
func (s *OrgsCreateInvitationReq) GetRole() OptOrgsCreateInvitationReqRole {
	return s.Role
}

// GetTeamIds returns the value of TeamIds.
func (s *OrgsCreateInvitationReq) GetTeamIds() []int {
	return s.TeamIds
}

// SetInviteeID sets the value of InviteeID.
func (s *OrgsCreateInvitationReq) SetInviteeID(val OptInt) {
	s.InviteeID = val
}

// SetEmail sets the value of Email.
func (s *OrgsCreateInvitationReq) SetEmail(val OptString) {
	s.Email = val
}

// SetRole sets the value of Role.
func (s *OrgsCreateInvitationReq) SetRole(val OptOrgsCreateInvitationReqRole) {
	s.Role = val
}

// SetTeamIds sets the value of TeamIds.
func (s *OrgsCreateInvitationReq) SetTeamIds(val []int) {
	s.TeamIds = val
}

// Specify role for new member. Can be one of:
// \* `admin` - Organization owners with full administrative rights to the organization and complete
// access to all repositories and teams.
// \* `direct_member` - Non-owner organization members with ability to see other members and join
// teams by invitation.
// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings
// of your organization.
type OrgsCreateInvitationReqRole string

const (
	OrgsCreateInvitationReqRoleAdmin          OrgsCreateInvitationReqRole = "admin"
	OrgsCreateInvitationReqRoleDirectMember   OrgsCreateInvitationReqRole = "direct_member"
	OrgsCreateInvitationReqRoleBillingManager OrgsCreateInvitationReqRole = "billing_manager"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsCreateInvitationReqRole) MarshalText() ([]byte, error) {
	switch s {
	case OrgsCreateInvitationReqRoleAdmin:
		return []byte(s), nil
	case OrgsCreateInvitationReqRoleDirectMember:
		return []byte(s), nil
	case OrgsCreateInvitationReqRoleBillingManager:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsCreateInvitationReqRole) UnmarshalText(data []byte) error {
	switch OrgsCreateInvitationReqRole(data) {
	case OrgsCreateInvitationReqRoleAdmin:
		*s = OrgsCreateInvitationReqRoleAdmin
		return nil
	case OrgsCreateInvitationReqRoleDirectMember:
		*s = OrgsCreateInvitationReqRoleDirectMember
		return nil
	case OrgsCreateInvitationReqRoleBillingManager:
		*s = OrgsCreateInvitationReqRoleBillingManager
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrgsCreateWebhookReq struct {
	// Must be passed as "web".
	Name string `json:"name"`
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/orgs#create-hook-config-params).
	Config OrgsCreateWebhookReqConfig `json:"config"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for.
	Events []string `json:"events"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool `json:"active"`
}

// GetName returns the value of Name.
func (s *OrgsCreateWebhookReq) GetName() string {
	return s.Name
}

// GetConfig returns the value of Config.
func (s *OrgsCreateWebhookReq) GetConfig() OrgsCreateWebhookReqConfig {
	return s.Config
}

// GetEvents returns the value of Events.
func (s *OrgsCreateWebhookReq) GetEvents() []string {
	return s.Events
}

// GetActive returns the value of Active.
func (s *OrgsCreateWebhookReq) GetActive() OptBool {
	return s.Active
}

// SetName sets the value of Name.
func (s *OrgsCreateWebhookReq) SetName(val string) {
	s.Name = val
}

// SetConfig sets the value of Config.
func (s *OrgsCreateWebhookReq) SetConfig(val OrgsCreateWebhookReqConfig) {
	s.Config = val
}

// SetEvents sets the value of Events.
func (s *OrgsCreateWebhookReq) SetEvents(val []string) {
	s.Events = val
}

// SetActive sets the value of Active.
func (s *OrgsCreateWebhookReq) SetActive(val OptBool) {
	s.Active = val
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/orgs#create-hook-config-params).
type OrgsCreateWebhookReqConfig struct {
	URL         WebhookConfigURL            `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
	Username    OptString                   `json:"username"`
	Password    OptString                   `json:"password"`
}

// GetURL returns the value of URL.
func (s *OrgsCreateWebhookReqConfig) GetURL() WebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *OrgsCreateWebhookReqConfig) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *OrgsCreateWebhookReqConfig) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *OrgsCreateWebhookReqConfig) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// GetUsername returns the value of Username.
func (s *OrgsCreateWebhookReqConfig) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *OrgsCreateWebhookReqConfig) GetPassword() OptString {
	return s.Password
}

// SetURL sets the value of URL.
func (s *OrgsCreateWebhookReqConfig) SetURL(val WebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *OrgsCreateWebhookReqConfig) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *OrgsCreateWebhookReqConfig) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *OrgsCreateWebhookReqConfig) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

// SetUsername sets the value of Username.
func (s *OrgsCreateWebhookReqConfig) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *OrgsCreateWebhookReqConfig) SetPassword(val OptString) {
	s.Password = val
}

// OrgsDeleteWebhookNoContent is response for OrgsDeleteWebhook operation.
type OrgsDeleteWebhookNoContent struct{}

func (*OrgsDeleteWebhookNoContent) orgsDeleteWebhookRes() {}

type OrgsGetAuditLogInclude string

const (
	OrgsGetAuditLogIncludeWeb OrgsGetAuditLogInclude = "web"
	OrgsGetAuditLogIncludeGit OrgsGetAuditLogInclude = "git"
	OrgsGetAuditLogIncludeAll OrgsGetAuditLogInclude = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsGetAuditLogInclude) MarshalText() ([]byte, error) {
	switch s {
	case OrgsGetAuditLogIncludeWeb:
		return []byte(s), nil
	case OrgsGetAuditLogIncludeGit:
		return []byte(s), nil
	case OrgsGetAuditLogIncludeAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsGetAuditLogInclude) UnmarshalText(data []byte) error {
	switch OrgsGetAuditLogInclude(data) {
	case OrgsGetAuditLogIncludeWeb:
		*s = OrgsGetAuditLogIncludeWeb
		return nil
	case OrgsGetAuditLogIncludeGit:
		*s = OrgsGetAuditLogIncludeGit
		return nil
	case OrgsGetAuditLogIncludeAll:
		*s = OrgsGetAuditLogIncludeAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrgsGetAuditLogOrder string

const (
	OrgsGetAuditLogOrderDesc OrgsGetAuditLogOrder = "desc"
	OrgsGetAuditLogOrderAsc  OrgsGetAuditLogOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsGetAuditLogOrder) MarshalText() ([]byte, error) {
	switch s {
	case OrgsGetAuditLogOrderDesc:
		return []byte(s), nil
	case OrgsGetAuditLogOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsGetAuditLogOrder) UnmarshalText(data []byte) error {
	switch OrgsGetAuditLogOrder(data) {
	case OrgsGetAuditLogOrderDesc:
		*s = OrgsGetAuditLogOrderDesc
		return nil
	case OrgsGetAuditLogOrderAsc:
		*s = OrgsGetAuditLogOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrgsGetMembershipForAuthenticatedUserForbidden BasicError

func (*OrgsGetMembershipForAuthenticatedUserForbidden) orgsGetMembershipForAuthenticatedUserRes() {}

type OrgsGetMembershipForAuthenticatedUserNotFound BasicError

func (*OrgsGetMembershipForAuthenticatedUserNotFound) orgsGetMembershipForAuthenticatedUserRes() {}

type OrgsGetMembershipForUserForbidden BasicError

func (*OrgsGetMembershipForUserForbidden) orgsGetMembershipForUserRes() {}

type OrgsGetMembershipForUserNotFound BasicError

func (*OrgsGetMembershipForUserNotFound) orgsGetMembershipForUserRes() {}

type OrgsListBlockedUsersOKApplicationJSON []SimpleUser

func (*OrgsListBlockedUsersOKApplicationJSON) orgsListBlockedUsersRes() {}

// OrgsListFailedInvitationsOKHeaders wraps []OrganizationInvitation with response headers.
type OrgsListFailedInvitationsOKHeaders struct {
	Link     OptString
	Response []OrganizationInvitation
}

// GetLink returns the value of Link.
func (s *OrgsListFailedInvitationsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListFailedInvitationsOKHeaders) GetResponse() []OrganizationInvitation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListFailedInvitationsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListFailedInvitationsOKHeaders) SetResponse(val []OrganizationInvitation) {
	s.Response = val
}

func (*OrgsListFailedInvitationsOKHeaders) orgsListFailedInvitationsRes() {}

type OrgsListForAuthenticatedUserForbidden BasicError

func (*OrgsListForAuthenticatedUserForbidden) orgsListForAuthenticatedUserRes() {}

// OrgsListForAuthenticatedUserOKHeaders wraps []OrganizationSimple with response headers.
type OrgsListForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []OrganizationSimple
}

// GetLink returns the value of Link.
func (s *OrgsListForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListForAuthenticatedUserOKHeaders) GetResponse() []OrganizationSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListForAuthenticatedUserOKHeaders) SetResponse(val []OrganizationSimple) {
	s.Response = val
}

func (*OrgsListForAuthenticatedUserOKHeaders) orgsListForAuthenticatedUserRes() {}

type OrgsListForAuthenticatedUserUnauthorized BasicError

func (*OrgsListForAuthenticatedUserUnauthorized) orgsListForAuthenticatedUserRes() {}

// OrgsListForUserOKHeaders wraps []OrganizationSimple with response headers.
type OrgsListForUserOKHeaders struct {
	Link     OptString
	Response []OrganizationSimple
}

// GetLink returns the value of Link.
func (s *OrgsListForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListForUserOKHeaders) GetResponse() []OrganizationSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListForUserOKHeaders) SetResponse(val []OrganizationSimple) {
	s.Response = val
}

// OrgsListInvitationTeamsOKHeaders wraps []Team with response headers.
type OrgsListInvitationTeamsOKHeaders struct {
	Link     OptString
	Response []Team
}

// GetLink returns the value of Link.
func (s *OrgsListInvitationTeamsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListInvitationTeamsOKHeaders) GetResponse() []Team {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListInvitationTeamsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListInvitationTeamsOKHeaders) SetResponse(val []Team) {
	s.Response = val
}

func (*OrgsListInvitationTeamsOKHeaders) orgsListInvitationTeamsRes() {}

type OrgsListMembersFilter string

const (
	OrgsListMembersFilter2FADisabled OrgsListMembersFilter = "2fa_disabled"
	OrgsListMembersFilterAll         OrgsListMembersFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsListMembersFilter) MarshalText() ([]byte, error) {
	switch s {
	case OrgsListMembersFilter2FADisabled:
		return []byte(s), nil
	case OrgsListMembersFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsListMembersFilter) UnmarshalText(data []byte) error {
	switch OrgsListMembersFilter(data) {
	case OrgsListMembersFilter2FADisabled:
		*s = OrgsListMembersFilter2FADisabled
		return nil
	case OrgsListMembersFilterAll:
		*s = OrgsListMembersFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// OrgsListMembersFound is response for OrgsListMembers operation.
type OrgsListMembersFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *OrgsListMembersFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OrgsListMembersFound) SetLocation(val OptString) {
	s.Location = val
}

func (*OrgsListMembersFound) orgsListMembersRes() {}

// OrgsListMembersOKHeaders wraps []SimpleUser with response headers.
type OrgsListMembersOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *OrgsListMembersOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListMembersOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListMembersOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListMembersOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*OrgsListMembersOKHeaders) orgsListMembersRes() {}

type OrgsListMembersRole string

const (
	OrgsListMembersRoleAll    OrgsListMembersRole = "all"
	OrgsListMembersRoleAdmin  OrgsListMembersRole = "admin"
	OrgsListMembersRoleMember OrgsListMembersRole = "member"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsListMembersRole) MarshalText() ([]byte, error) {
	switch s {
	case OrgsListMembersRoleAll:
		return []byte(s), nil
	case OrgsListMembersRoleAdmin:
		return []byte(s), nil
	case OrgsListMembersRoleMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsListMembersRole) UnmarshalText(data []byte) error {
	switch OrgsListMembersRole(data) {
	case OrgsListMembersRoleAll:
		*s = OrgsListMembersRoleAll
		return nil
	case OrgsListMembersRoleAdmin:
		*s = OrgsListMembersRoleAdmin
		return nil
	case OrgsListMembersRoleMember:
		*s = OrgsListMembersRoleMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrgsListMembershipsForAuthenticatedUserForbidden BasicError

func (*OrgsListMembershipsForAuthenticatedUserForbidden) orgsListMembershipsForAuthenticatedUserRes() {
}

// OrgsListMembershipsForAuthenticatedUserOKHeaders wraps []OrgMembership with response headers.
type OrgsListMembershipsForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []OrgMembership
}

// GetLink returns the value of Link.
func (s *OrgsListMembershipsForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListMembershipsForAuthenticatedUserOKHeaders) GetResponse() []OrgMembership {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListMembershipsForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListMembershipsForAuthenticatedUserOKHeaders) SetResponse(val []OrgMembership) {
	s.Response = val
}

func (*OrgsListMembershipsForAuthenticatedUserOKHeaders) orgsListMembershipsForAuthenticatedUserRes() {
}

type OrgsListMembershipsForAuthenticatedUserState string

const (
	OrgsListMembershipsForAuthenticatedUserStateActive  OrgsListMembershipsForAuthenticatedUserState = "active"
	OrgsListMembershipsForAuthenticatedUserStatePending OrgsListMembershipsForAuthenticatedUserState = "pending"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsListMembershipsForAuthenticatedUserState) MarshalText() ([]byte, error) {
	switch s {
	case OrgsListMembershipsForAuthenticatedUserStateActive:
		return []byte(s), nil
	case OrgsListMembershipsForAuthenticatedUserStatePending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsListMembershipsForAuthenticatedUserState) UnmarshalText(data []byte) error {
	switch OrgsListMembershipsForAuthenticatedUserState(data) {
	case OrgsListMembershipsForAuthenticatedUserStateActive:
		*s = OrgsListMembershipsForAuthenticatedUserStateActive
		return nil
	case OrgsListMembershipsForAuthenticatedUserStatePending:
		*s = OrgsListMembershipsForAuthenticatedUserStatePending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrgsListMembershipsForAuthenticatedUserUnauthorized BasicError

func (*OrgsListMembershipsForAuthenticatedUserUnauthorized) orgsListMembershipsForAuthenticatedUserRes() {
}

// OrgsListOKHeaders wraps []OrganizationSimple with response headers.
type OrgsListOKHeaders struct {
	Link     OptString
	Response []OrganizationSimple
}

// GetLink returns the value of Link.
func (s *OrgsListOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListOKHeaders) GetResponse() []OrganizationSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListOKHeaders) SetResponse(val []OrganizationSimple) {
	s.Response = val
}

func (*OrgsListOKHeaders) orgsListRes() {}

type OrgsListOutsideCollaboratorsFilter string

const (
	OrgsListOutsideCollaboratorsFilter2FADisabled OrgsListOutsideCollaboratorsFilter = "2fa_disabled"
	OrgsListOutsideCollaboratorsFilterAll         OrgsListOutsideCollaboratorsFilter = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsListOutsideCollaboratorsFilter) MarshalText() ([]byte, error) {
	switch s {
	case OrgsListOutsideCollaboratorsFilter2FADisabled:
		return []byte(s), nil
	case OrgsListOutsideCollaboratorsFilterAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsListOutsideCollaboratorsFilter) UnmarshalText(data []byte) error {
	switch OrgsListOutsideCollaboratorsFilter(data) {
	case OrgsListOutsideCollaboratorsFilter2FADisabled:
		*s = OrgsListOutsideCollaboratorsFilter2FADisabled
		return nil
	case OrgsListOutsideCollaboratorsFilterAll:
		*s = OrgsListOutsideCollaboratorsFilterAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// OrgsListOutsideCollaboratorsOKHeaders wraps []SimpleUser with response headers.
type OrgsListOutsideCollaboratorsOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *OrgsListOutsideCollaboratorsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListOutsideCollaboratorsOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListOutsideCollaboratorsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListOutsideCollaboratorsOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

// OrgsListPendingInvitationsOKHeaders wraps []OrganizationInvitation with response headers.
type OrgsListPendingInvitationsOKHeaders struct {
	Link     OptString
	Response []OrganizationInvitation
}

// GetLink returns the value of Link.
func (s *OrgsListPendingInvitationsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListPendingInvitationsOKHeaders) GetResponse() []OrganizationInvitation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListPendingInvitationsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListPendingInvitationsOKHeaders) SetResponse(val []OrganizationInvitation) {
	s.Response = val
}

func (*OrgsListPendingInvitationsOKHeaders) orgsListPendingInvitationsRes() {}

// OrgsListPublicMembersOKHeaders wraps []SimpleUser with response headers.
type OrgsListPublicMembersOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *OrgsListPublicMembersOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListPublicMembersOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListPublicMembersOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListPublicMembersOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

type OrgsListWebhookDeliveriesOKApplicationJSON []HookDeliveryItem

func (*OrgsListWebhookDeliveriesOKApplicationJSON) orgsListWebhookDeliveriesRes() {}

// OrgsListWebhooksOKHeaders wraps []OrgHook with response headers.
type OrgsListWebhooksOKHeaders struct {
	Link     OptString
	Response []OrgHook
}

// GetLink returns the value of Link.
func (s *OrgsListWebhooksOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *OrgsListWebhooksOKHeaders) GetResponse() []OrgHook {
	return s.Response
}

// SetLink sets the value of Link.
func (s *OrgsListWebhooksOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *OrgsListWebhooksOKHeaders) SetResponse(val []OrgHook) {
	s.Response = val
}

func (*OrgsListWebhooksOKHeaders) orgsListWebhooksRes() {}

// OrgsPingWebhookNoContent is response for OrgsPingWebhook operation.
type OrgsPingWebhookNoContent struct{}

func (*OrgsPingWebhookNoContent) orgsPingWebhookRes() {}

// OrgsRemoveMemberNoContent is response for OrgsRemoveMember operation.
type OrgsRemoveMemberNoContent struct{}

func (*OrgsRemoveMemberNoContent) orgsRemoveMemberRes() {}

type OrgsRemoveMembershipForUserForbidden BasicError

func (*OrgsRemoveMembershipForUserForbidden) orgsRemoveMembershipForUserRes() {}

// OrgsRemoveMembershipForUserNoContent is response for OrgsRemoveMembershipForUser operation.
type OrgsRemoveMembershipForUserNoContent struct{}

func (*OrgsRemoveMembershipForUserNoContent) orgsRemoveMembershipForUserRes() {}

type OrgsRemoveMembershipForUserNotFound BasicError

func (*OrgsRemoveMembershipForUserNotFound) orgsRemoveMembershipForUserRes() {}

// OrgsRemoveOutsideCollaboratorNoContent is response for OrgsRemoveOutsideCollaborator operation.
type OrgsRemoveOutsideCollaboratorNoContent struct{}

func (*OrgsRemoveOutsideCollaboratorNoContent) orgsRemoveOutsideCollaboratorRes() {}

type OrgsRemoveOutsideCollaboratorUnprocessableEntity struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *OrgsRemoveOutsideCollaboratorUnprocessableEntity) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*OrgsRemoveOutsideCollaboratorUnprocessableEntity) orgsRemoveOutsideCollaboratorRes() {}

// OrgsRemovePublicMembershipForAuthenticatedUserNoContent is response for OrgsRemovePublicMembershipForAuthenticatedUser operation.
type OrgsRemovePublicMembershipForAuthenticatedUserNoContent struct{}

// OrgsRemoveSamlSSOAuthorizationNoContent is response for OrgsRemoveSamlSSOAuthorization operation.
type OrgsRemoveSamlSSOAuthorizationNoContent struct{}

func (*OrgsRemoveSamlSSOAuthorizationNoContent) orgsRemoveSamlSSOAuthorizationRes() {}

type OrgsSetMembershipForUserReq struct {
	// The role to give the user in the organization. Can be one of:
	// \* `admin` - The user will become an owner of the organization.
	// \* `member` - The user will become a non-owner member of the organization.
	Role OptOrgsSetMembershipForUserReqRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *OrgsSetMembershipForUserReq) GetRole() OptOrgsSetMembershipForUserReqRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *OrgsSetMembershipForUserReq) SetRole(val OptOrgsSetMembershipForUserReqRole) {
	s.Role = val
}

// The role to give the user in the organization. Can be one of:
// \* `admin` - The user will become an owner of the organization.
// \* `member` - The user will become a non-owner member of the organization.
type OrgsSetMembershipForUserReqRole string

const (
	OrgsSetMembershipForUserReqRoleAdmin  OrgsSetMembershipForUserReqRole = "admin"
	OrgsSetMembershipForUserReqRoleMember OrgsSetMembershipForUserReqRole = "member"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsSetMembershipForUserReqRole) MarshalText() ([]byte, error) {
	switch s {
	case OrgsSetMembershipForUserReqRoleAdmin:
		return []byte(s), nil
	case OrgsSetMembershipForUserReqRoleMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsSetMembershipForUserReqRole) UnmarshalText(data []byte) error {
	switch OrgsSetMembershipForUserReqRole(data) {
	case OrgsSetMembershipForUserReqRoleAdmin:
		*s = OrgsSetMembershipForUserReqRoleAdmin
		return nil
	case OrgsSetMembershipForUserReqRoleMember:
		*s = OrgsSetMembershipForUserReqRoleMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// OrgsSetPublicMembershipForAuthenticatedUserNoContent is response for OrgsSetPublicMembershipForAuthenticatedUser operation.
type OrgsSetPublicMembershipForAuthenticatedUserNoContent struct{}

func (*OrgsSetPublicMembershipForAuthenticatedUserNoContent) orgsSetPublicMembershipForAuthenticatedUserRes() {
}

// OrgsUnblockUserNoContent is response for OrgsUnblockUser operation.
type OrgsUnblockUserNoContent struct{}

type OrgsUpdateMembershipForAuthenticatedUserForbidden BasicError

func (*OrgsUpdateMembershipForAuthenticatedUserForbidden) orgsUpdateMembershipForAuthenticatedUserRes() {
}

type OrgsUpdateMembershipForAuthenticatedUserNotFound BasicError

func (*OrgsUpdateMembershipForAuthenticatedUserNotFound) orgsUpdateMembershipForAuthenticatedUserRes() {
}

type OrgsUpdateMembershipForAuthenticatedUserReq struct {
	// The state that the membership should be in. Only `"active"` will be accepted.
	State OrgsUpdateMembershipForAuthenticatedUserReqState `json:"state"`
}

// GetState returns the value of State.
func (s *OrgsUpdateMembershipForAuthenticatedUserReq) GetState() OrgsUpdateMembershipForAuthenticatedUserReqState {
	return s.State
}

// SetState sets the value of State.
func (s *OrgsUpdateMembershipForAuthenticatedUserReq) SetState(val OrgsUpdateMembershipForAuthenticatedUserReqState) {
	s.State = val
}

// The state that the membership should be in. Only `"active"` will be accepted.
type OrgsUpdateMembershipForAuthenticatedUserReqState string

const (
	OrgsUpdateMembershipForAuthenticatedUserReqStateActive OrgsUpdateMembershipForAuthenticatedUserReqState = "active"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrgsUpdateMembershipForAuthenticatedUserReqState) MarshalText() ([]byte, error) {
	switch s {
	case OrgsUpdateMembershipForAuthenticatedUserReqStateActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrgsUpdateMembershipForAuthenticatedUserReqState) UnmarshalText(data []byte) error {
	switch OrgsUpdateMembershipForAuthenticatedUserReqState(data) {
	case OrgsUpdateMembershipForAuthenticatedUserReqStateActive:
		*s = OrgsUpdateMembershipForAuthenticatedUserReqStateActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OrgsUpdateWebhookConfigForOrgReq struct {
	URL         OptWebhookConfigURL         `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
}

// GetURL returns the value of URL.
func (s *OrgsUpdateWebhookConfigForOrgReq) GetURL() OptWebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *OrgsUpdateWebhookConfigForOrgReq) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *OrgsUpdateWebhookConfigForOrgReq) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *OrgsUpdateWebhookConfigForOrgReq) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// SetURL sets the value of URL.
func (s *OrgsUpdateWebhookConfigForOrgReq) SetURL(val OptWebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *OrgsUpdateWebhookConfigForOrgReq) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *OrgsUpdateWebhookConfigForOrgReq) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *OrgsUpdateWebhookConfigForOrgReq) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

type OrgsUpdateWebhookReq struct {
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/orgs#update-hook-config-params).
	Config OptOrgsUpdateWebhookReqConfig `json:"config"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for.
	Events []string `json:"events"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool   `json:"active"`
	Name   OptString `json:"name"`
}

// GetConfig returns the value of Config.
func (s *OrgsUpdateWebhookReq) GetConfig() OptOrgsUpdateWebhookReqConfig {
	return s.Config
}

// GetEvents returns the value of Events.
func (s *OrgsUpdateWebhookReq) GetEvents() []string {
	return s.Events
}

// GetActive returns the value of Active.
func (s *OrgsUpdateWebhookReq) GetActive() OptBool {
	return s.Active
}

// GetName returns the value of Name.
func (s *OrgsUpdateWebhookReq) GetName() OptString {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *OrgsUpdateWebhookReq) SetConfig(val OptOrgsUpdateWebhookReqConfig) {
	s.Config = val
}

// SetEvents sets the value of Events.
func (s *OrgsUpdateWebhookReq) SetEvents(val []string) {
	s.Events = val
}

// SetActive sets the value of Active.
func (s *OrgsUpdateWebhookReq) SetActive(val OptBool) {
	s.Active = val
}

// SetName sets the value of Name.
func (s *OrgsUpdateWebhookReq) SetName(val OptString) {
	s.Name = val
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/orgs#update-hook-config-params).
type OrgsUpdateWebhookReqConfig struct {
	URL         WebhookConfigURL            `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
}

// GetURL returns the value of URL.
func (s *OrgsUpdateWebhookReqConfig) GetURL() WebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *OrgsUpdateWebhookReqConfig) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *OrgsUpdateWebhookReqConfig) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *OrgsUpdateWebhookReqConfig) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// SetURL sets the value of URL.
func (s *OrgsUpdateWebhookReqConfig) SetURL(val WebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *OrgsUpdateWebhookReqConfig) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *OrgsUpdateWebhookReqConfig) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *OrgsUpdateWebhookReqConfig) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

// A software package.
// Ref: #/components/schemas/package
type Package struct {
	// Unique identifier of the package.
	ID int `json:"id"`
	// The name of the package.
	Name        string             `json:"name"`
	PackageType PackagePackageType `json:"package_type"`
	URL         string             `json:"url"`
	HTMLURL     string             `json:"html_url"`
	// The number of versions of the package.
	VersionCount int                             `json:"version_count"`
	Visibility   PackageVisibility               `json:"visibility"`
	Owner        OptNilNullableSimpleUser        `json:"owner"`
	Repository   OptNilNullableMinimalRepository `json:"repository"`
	CreatedAt    time.Time                       `json:"created_at"`
	UpdatedAt    time.Time                       `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Package) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Package) GetName() string {
	return s.Name
}

// GetPackageType returns the value of PackageType.
func (s *Package) GetPackageType() PackagePackageType {
	return s.PackageType
}

// GetURL returns the value of URL.
func (s *Package) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Package) GetHTMLURL() string {
	return s.HTMLURL
}

// GetVersionCount returns the value of VersionCount.
func (s *Package) GetVersionCount() int {
	return s.VersionCount
}

// GetVisibility returns the value of Visibility.
func (s *Package) GetVisibility() PackageVisibility {
	return s.Visibility
}

// GetOwner returns the value of Owner.
func (s *Package) GetOwner() OptNilNullableSimpleUser {
	return s.Owner
}

// GetRepository returns the value of Repository.
func (s *Package) GetRepository() OptNilNullableMinimalRepository {
	return s.Repository
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Package) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Package) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Package) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Package) SetName(val string) {
	s.Name = val
}

// SetPackageType sets the value of PackageType.
func (s *Package) SetPackageType(val PackagePackageType) {
	s.PackageType = val
}

// SetURL sets the value of URL.
func (s *Package) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Package) SetHTMLURL(val string) {
	s.HTMLURL = val
}

// SetVersionCount sets the value of VersionCount.
func (s *Package) SetVersionCount(val int) {
	s.VersionCount = val
}

// SetVisibility sets the value of Visibility.
func (s *Package) SetVisibility(val PackageVisibility) {
	s.Visibility = val
}

// SetOwner sets the value of Owner.
func (s *Package) SetOwner(val OptNilNullableSimpleUser) {
	s.Owner = val
}

// SetRepository sets the value of Repository.
func (s *Package) SetRepository(val OptNilNullableMinimalRepository) {
	s.Repository = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Package) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Package) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type PackagePackageType string

const (
	PackagePackageTypeNpm       PackagePackageType = "npm"
	PackagePackageTypeMaven     PackagePackageType = "maven"
	PackagePackageTypeRubygems  PackagePackageType = "rubygems"
	PackagePackageTypeDocker    PackagePackageType = "docker"
	PackagePackageTypeNuget     PackagePackageType = "nuget"
	PackagePackageTypeContainer PackagePackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagePackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagePackageTypeNpm:
		return []byte(s), nil
	case PackagePackageTypeMaven:
		return []byte(s), nil
	case PackagePackageTypeRubygems:
		return []byte(s), nil
	case PackagePackageTypeDocker:
		return []byte(s), nil
	case PackagePackageTypeNuget:
		return []byte(s), nil
	case PackagePackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagePackageType) UnmarshalText(data []byte) error {
	switch PackagePackageType(data) {
	case PackagePackageTypeNpm:
		*s = PackagePackageTypeNpm
		return nil
	case PackagePackageTypeMaven:
		*s = PackagePackageTypeMaven
		return nil
	case PackagePackageTypeRubygems:
		*s = PackagePackageTypeRubygems
		return nil
	case PackagePackageTypeDocker:
		*s = PackagePackageTypeDocker
		return nil
	case PackagePackageTypeNuget:
		*s = PackagePackageTypeNuget
		return nil
	case PackagePackageTypeContainer:
		*s = PackagePackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A version of a software package.
// Ref: #/components/schemas/package-version
type PackageVersion struct {
	// Unique identifier of the package version.
	ID int `json:"id"`
	// The name of the package version.
	Name           string                    `json:"name"`
	URL            string                    `json:"url"`
	PackageHTMLURL string                    `json:"package_html_url"`
	HTMLURL        OptString                 `json:"html_url"`
	License        OptString                 `json:"license"`
	Description    OptString                 `json:"description"`
	CreatedAt      time.Time                 `json:"created_at"`
	UpdatedAt      time.Time                 `json:"updated_at"`
	DeletedAt      OptDateTime               `json:"deleted_at"`
	Metadata       OptPackageVersionMetadata `json:"metadata"`
}

// GetID returns the value of ID.
func (s *PackageVersion) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PackageVersion) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *PackageVersion) GetURL() string {
	return s.URL
}

// GetPackageHTMLURL returns the value of PackageHTMLURL.
func (s *PackageVersion) GetPackageHTMLURL() string {
	return s.PackageHTMLURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PackageVersion) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetLicense returns the value of License.
func (s *PackageVersion) GetLicense() OptString {
	return s.License
}

// GetDescription returns the value of Description.
func (s *PackageVersion) GetDescription() OptString {
	return s.Description
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PackageVersion) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PackageVersion) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *PackageVersion) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetMetadata returns the value of Metadata.
func (s *PackageVersion) GetMetadata() OptPackageVersionMetadata {
	return s.Metadata
}

// SetID sets the value of ID.
func (s *PackageVersion) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PackageVersion) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *PackageVersion) SetURL(val string) {
	s.URL = val
}

// SetPackageHTMLURL sets the value of PackageHTMLURL.
func (s *PackageVersion) SetPackageHTMLURL(val string) {
	s.PackageHTMLURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PackageVersion) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetLicense sets the value of License.
func (s *PackageVersion) SetLicense(val OptString) {
	s.License = val
}

// SetDescription sets the value of Description.
func (s *PackageVersion) SetDescription(val OptString) {
	s.Description = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PackageVersion) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PackageVersion) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *PackageVersion) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetMetadata sets the value of Metadata.
func (s *PackageVersion) SetMetadata(val OptPackageVersionMetadata) {
	s.Metadata = val
}

type PackageVersionMetadata struct {
	PackageType PackageVersionMetadataPackageType  `json:"package_type"`
	Container   OptPackageVersionMetadataContainer `json:"container"`
	Docker      OptPackageVersionMetadataDocker    `json:"docker"`
}

// GetPackageType returns the value of PackageType.
func (s *PackageVersionMetadata) GetPackageType() PackageVersionMetadataPackageType {
	return s.PackageType
}

// GetContainer returns the value of Container.
func (s *PackageVersionMetadata) GetContainer() OptPackageVersionMetadataContainer {
	return s.Container
}

// GetDocker returns the value of Docker.
func (s *PackageVersionMetadata) GetDocker() OptPackageVersionMetadataDocker {
	return s.Docker
}

// SetPackageType sets the value of PackageType.
func (s *PackageVersionMetadata) SetPackageType(val PackageVersionMetadataPackageType) {
	s.PackageType = val
}

// SetContainer sets the value of Container.
func (s *PackageVersionMetadata) SetContainer(val OptPackageVersionMetadataContainer) {
	s.Container = val
}

// SetDocker sets the value of Docker.
func (s *PackageVersionMetadata) SetDocker(val OptPackageVersionMetadataDocker) {
	s.Docker = val
}

type PackageVersionMetadataContainer struct {
	Tags []jx.Raw `json:"tags"`
}

// GetTags returns the value of Tags.
func (s *PackageVersionMetadataContainer) GetTags() []jx.Raw {
	return s.Tags
}

// SetTags sets the value of Tags.
func (s *PackageVersionMetadataContainer) SetTags(val []jx.Raw) {
	s.Tags = val
}

type PackageVersionMetadataDocker struct {
	Tag []jx.Raw `json:"tag"`
}

// GetTag returns the value of Tag.
func (s *PackageVersionMetadataDocker) GetTag() []jx.Raw {
	return s.Tag
}

// SetTag sets the value of Tag.
func (s *PackageVersionMetadataDocker) SetTag(val []jx.Raw) {
	s.Tag = val
}

type PackageVersionMetadataPackageType string

const (
	PackageVersionMetadataPackageTypeNpm       PackageVersionMetadataPackageType = "npm"
	PackageVersionMetadataPackageTypeMaven     PackageVersionMetadataPackageType = "maven"
	PackageVersionMetadataPackageTypeRubygems  PackageVersionMetadataPackageType = "rubygems"
	PackageVersionMetadataPackageTypeDocker    PackageVersionMetadataPackageType = "docker"
	PackageVersionMetadataPackageTypeNuget     PackageVersionMetadataPackageType = "nuget"
	PackageVersionMetadataPackageTypeContainer PackageVersionMetadataPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackageVersionMetadataPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackageVersionMetadataPackageTypeNpm:
		return []byte(s), nil
	case PackageVersionMetadataPackageTypeMaven:
		return []byte(s), nil
	case PackageVersionMetadataPackageTypeRubygems:
		return []byte(s), nil
	case PackageVersionMetadataPackageTypeDocker:
		return []byte(s), nil
	case PackageVersionMetadataPackageTypeNuget:
		return []byte(s), nil
	case PackageVersionMetadataPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackageVersionMetadataPackageType) UnmarshalText(data []byte) error {
	switch PackageVersionMetadataPackageType(data) {
	case PackageVersionMetadataPackageTypeNpm:
		*s = PackageVersionMetadataPackageTypeNpm
		return nil
	case PackageVersionMetadataPackageTypeMaven:
		*s = PackageVersionMetadataPackageTypeMaven
		return nil
	case PackageVersionMetadataPackageTypeRubygems:
		*s = PackageVersionMetadataPackageTypeRubygems
		return nil
	case PackageVersionMetadataPackageTypeDocker:
		*s = PackageVersionMetadataPackageTypeDocker
		return nil
	case PackageVersionMetadataPackageTypeNuget:
		*s = PackageVersionMetadataPackageTypeNuget
		return nil
	case PackageVersionMetadataPackageTypeContainer:
		*s = PackageVersionMetadataPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackageVisibility string

const (
	PackageVisibilityPrivate PackageVisibility = "private"
	PackageVisibilityPublic  PackageVisibility = "public"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackageVisibility) MarshalText() ([]byte, error) {
	switch s {
	case PackageVisibilityPrivate:
		return []byte(s), nil
	case PackageVisibilityPublic:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackageVisibility) UnmarshalText(data []byte) error {
	switch PackageVisibility(data) {
	case PackageVisibilityPrivate:
		*s = PackageVisibilityPrivate
		return nil
	case PackageVisibilityPublic:
		*s = PackageVisibilityPublic
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/packages-billing-usage
type PackagesBillingUsage struct {
	// Sum of the free and paid storage space (GB) for GitHuub Packages.
	TotalGigabytesBandwidthUsed int `json:"total_gigabytes_bandwidth_used"`
	// Total paid storage space (GB) for GitHuub Packages.
	TotalPaidGigabytesBandwidthUsed int `json:"total_paid_gigabytes_bandwidth_used"`
	// Free storage space (GB) for GitHub Packages.
	IncludedGigabytesBandwidth int `json:"included_gigabytes_bandwidth"`
}

// GetTotalGigabytesBandwidthUsed returns the value of TotalGigabytesBandwidthUsed.
func (s *PackagesBillingUsage) GetTotalGigabytesBandwidthUsed() int {
	return s.TotalGigabytesBandwidthUsed
}

// GetTotalPaidGigabytesBandwidthUsed returns the value of TotalPaidGigabytesBandwidthUsed.
func (s *PackagesBillingUsage) GetTotalPaidGigabytesBandwidthUsed() int {
	return s.TotalPaidGigabytesBandwidthUsed
}

// GetIncludedGigabytesBandwidth returns the value of IncludedGigabytesBandwidth.
func (s *PackagesBillingUsage) GetIncludedGigabytesBandwidth() int {
	return s.IncludedGigabytesBandwidth
}

// SetTotalGigabytesBandwidthUsed sets the value of TotalGigabytesBandwidthUsed.
func (s *PackagesBillingUsage) SetTotalGigabytesBandwidthUsed(val int) {
	s.TotalGigabytesBandwidthUsed = val
}

// SetTotalPaidGigabytesBandwidthUsed sets the value of TotalPaidGigabytesBandwidthUsed.
func (s *PackagesBillingUsage) SetTotalPaidGigabytesBandwidthUsed(val int) {
	s.TotalPaidGigabytesBandwidthUsed = val
}

// SetIncludedGigabytesBandwidth sets the value of IncludedGigabytesBandwidth.
func (s *PackagesBillingUsage) SetIncludedGigabytesBandwidth(val int) {
	s.IncludedGigabytesBandwidth = val
}

type PackagesDeletePackageForAuthenticatedUserForbidden BasicError

func (*PackagesDeletePackageForAuthenticatedUserForbidden) packagesDeletePackageForAuthenticatedUserRes() {
}

// PackagesDeletePackageForAuthenticatedUserNoContent is response for PackagesDeletePackageForAuthenticatedUser operation.
type PackagesDeletePackageForAuthenticatedUserNoContent struct{}

func (*PackagesDeletePackageForAuthenticatedUserNoContent) packagesDeletePackageForAuthenticatedUserRes() {
}

type PackagesDeletePackageForAuthenticatedUserNotFound BasicError

func (*PackagesDeletePackageForAuthenticatedUserNotFound) packagesDeletePackageForAuthenticatedUserRes() {
}

type PackagesDeletePackageForAuthenticatedUserPackageType string

const (
	PackagesDeletePackageForAuthenticatedUserPackageTypeNpm       PackagesDeletePackageForAuthenticatedUserPackageType = "npm"
	PackagesDeletePackageForAuthenticatedUserPackageTypeMaven     PackagesDeletePackageForAuthenticatedUserPackageType = "maven"
	PackagesDeletePackageForAuthenticatedUserPackageTypeRubygems  PackagesDeletePackageForAuthenticatedUserPackageType = "rubygems"
	PackagesDeletePackageForAuthenticatedUserPackageTypeDocker    PackagesDeletePackageForAuthenticatedUserPackageType = "docker"
	PackagesDeletePackageForAuthenticatedUserPackageTypeNuget     PackagesDeletePackageForAuthenticatedUserPackageType = "nuget"
	PackagesDeletePackageForAuthenticatedUserPackageTypeContainer PackagesDeletePackageForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesDeletePackageForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesDeletePackageForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesDeletePackageForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesDeletePackageForAuthenticatedUserPackageType(data) {
	case PackagesDeletePackageForAuthenticatedUserPackageTypeNpm:
		*s = PackagesDeletePackageForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeMaven:
		*s = PackagesDeletePackageForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesDeletePackageForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeDocker:
		*s = PackagesDeletePackageForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeNuget:
		*s = PackagesDeletePackageForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesDeletePackageForAuthenticatedUserPackageTypeContainer:
		*s = PackagesDeletePackageForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesDeletePackageForAuthenticatedUserUnauthorized BasicError

func (*PackagesDeletePackageForAuthenticatedUserUnauthorized) packagesDeletePackageForAuthenticatedUserRes() {
}

type PackagesDeletePackageForOrgForbidden BasicError

func (*PackagesDeletePackageForOrgForbidden) packagesDeletePackageForOrgRes() {}

// PackagesDeletePackageForOrgNoContent is response for PackagesDeletePackageForOrg operation.
type PackagesDeletePackageForOrgNoContent struct{}

func (*PackagesDeletePackageForOrgNoContent) packagesDeletePackageForOrgRes() {}

type PackagesDeletePackageForOrgNotFound BasicError

func (*PackagesDeletePackageForOrgNotFound) packagesDeletePackageForOrgRes() {}

type PackagesDeletePackageForOrgPackageType string

const (
	PackagesDeletePackageForOrgPackageTypeNpm       PackagesDeletePackageForOrgPackageType = "npm"
	PackagesDeletePackageForOrgPackageTypeMaven     PackagesDeletePackageForOrgPackageType = "maven"
	PackagesDeletePackageForOrgPackageTypeRubygems  PackagesDeletePackageForOrgPackageType = "rubygems"
	PackagesDeletePackageForOrgPackageTypeDocker    PackagesDeletePackageForOrgPackageType = "docker"
	PackagesDeletePackageForOrgPackageTypeNuget     PackagesDeletePackageForOrgPackageType = "nuget"
	PackagesDeletePackageForOrgPackageTypeContainer PackagesDeletePackageForOrgPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesDeletePackageForOrgPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesDeletePackageForOrgPackageTypeNpm:
		return []byte(s), nil
	case PackagesDeletePackageForOrgPackageTypeMaven:
		return []byte(s), nil
	case PackagesDeletePackageForOrgPackageTypeRubygems:
		return []byte(s), nil
	case PackagesDeletePackageForOrgPackageTypeDocker:
		return []byte(s), nil
	case PackagesDeletePackageForOrgPackageTypeNuget:
		return []byte(s), nil
	case PackagesDeletePackageForOrgPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesDeletePackageForOrgPackageType) UnmarshalText(data []byte) error {
	switch PackagesDeletePackageForOrgPackageType(data) {
	case PackagesDeletePackageForOrgPackageTypeNpm:
		*s = PackagesDeletePackageForOrgPackageTypeNpm
		return nil
	case PackagesDeletePackageForOrgPackageTypeMaven:
		*s = PackagesDeletePackageForOrgPackageTypeMaven
		return nil
	case PackagesDeletePackageForOrgPackageTypeRubygems:
		*s = PackagesDeletePackageForOrgPackageTypeRubygems
		return nil
	case PackagesDeletePackageForOrgPackageTypeDocker:
		*s = PackagesDeletePackageForOrgPackageTypeDocker
		return nil
	case PackagesDeletePackageForOrgPackageTypeNuget:
		*s = PackagesDeletePackageForOrgPackageTypeNuget
		return nil
	case PackagesDeletePackageForOrgPackageTypeContainer:
		*s = PackagesDeletePackageForOrgPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesDeletePackageForOrgUnauthorized BasicError

func (*PackagesDeletePackageForOrgUnauthorized) packagesDeletePackageForOrgRes() {}

type PackagesDeletePackageForUserForbidden BasicError

func (*PackagesDeletePackageForUserForbidden) packagesDeletePackageForUserRes() {}

// PackagesDeletePackageForUserNoContent is response for PackagesDeletePackageForUser operation.
type PackagesDeletePackageForUserNoContent struct{}

func (*PackagesDeletePackageForUserNoContent) packagesDeletePackageForUserRes() {}

type PackagesDeletePackageForUserNotFound BasicError

func (*PackagesDeletePackageForUserNotFound) packagesDeletePackageForUserRes() {}

type PackagesDeletePackageForUserPackageType string

const (
	PackagesDeletePackageForUserPackageTypeNpm       PackagesDeletePackageForUserPackageType = "npm"
	PackagesDeletePackageForUserPackageTypeMaven     PackagesDeletePackageForUserPackageType = "maven"
	PackagesDeletePackageForUserPackageTypeRubygems  PackagesDeletePackageForUserPackageType = "rubygems"
	PackagesDeletePackageForUserPackageTypeDocker    PackagesDeletePackageForUserPackageType = "docker"
	PackagesDeletePackageForUserPackageTypeNuget     PackagesDeletePackageForUserPackageType = "nuget"
	PackagesDeletePackageForUserPackageTypeContainer PackagesDeletePackageForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesDeletePackageForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesDeletePackageForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesDeletePackageForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesDeletePackageForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesDeletePackageForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesDeletePackageForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesDeletePackageForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesDeletePackageForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesDeletePackageForUserPackageType(data) {
	case PackagesDeletePackageForUserPackageTypeNpm:
		*s = PackagesDeletePackageForUserPackageTypeNpm
		return nil
	case PackagesDeletePackageForUserPackageTypeMaven:
		*s = PackagesDeletePackageForUserPackageTypeMaven
		return nil
	case PackagesDeletePackageForUserPackageTypeRubygems:
		*s = PackagesDeletePackageForUserPackageTypeRubygems
		return nil
	case PackagesDeletePackageForUserPackageTypeDocker:
		*s = PackagesDeletePackageForUserPackageTypeDocker
		return nil
	case PackagesDeletePackageForUserPackageTypeNuget:
		*s = PackagesDeletePackageForUserPackageTypeNuget
		return nil
	case PackagesDeletePackageForUserPackageTypeContainer:
		*s = PackagesDeletePackageForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesDeletePackageForUserUnauthorized BasicError

func (*PackagesDeletePackageForUserUnauthorized) packagesDeletePackageForUserRes() {}

type PackagesDeletePackageVersionForAuthenticatedUserForbidden BasicError

func (*PackagesDeletePackageVersionForAuthenticatedUserForbidden) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

// PackagesDeletePackageVersionForAuthenticatedUserNoContent is response for PackagesDeletePackageVersionForAuthenticatedUser operation.
type PackagesDeletePackageVersionForAuthenticatedUserNoContent struct{}

func (*PackagesDeletePackageVersionForAuthenticatedUserNoContent) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

type PackagesDeletePackageVersionForAuthenticatedUserNotFound BasicError

func (*PackagesDeletePackageVersionForAuthenticatedUserNotFound) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

type PackagesDeletePackageVersionForAuthenticatedUserPackageType string

const (
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNpm       PackagesDeletePackageVersionForAuthenticatedUserPackageType = "npm"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeMaven     PackagesDeletePackageVersionForAuthenticatedUserPackageType = "maven"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeRubygems  PackagesDeletePackageVersionForAuthenticatedUserPackageType = "rubygems"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeDocker    PackagesDeletePackageVersionForAuthenticatedUserPackageType = "docker"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNuget     PackagesDeletePackageVersionForAuthenticatedUserPackageType = "nuget"
	PackagesDeletePackageVersionForAuthenticatedUserPackageTypeContainer PackagesDeletePackageVersionForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesDeletePackageVersionForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesDeletePackageVersionForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesDeletePackageVersionForAuthenticatedUserPackageType(data) {
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNpm:
		*s = PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeMaven:
		*s = PackagesDeletePackageVersionForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesDeletePackageVersionForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeDocker:
		*s = PackagesDeletePackageVersionForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNuget:
		*s = PackagesDeletePackageVersionForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesDeletePackageVersionForAuthenticatedUserPackageTypeContainer:
		*s = PackagesDeletePackageVersionForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesDeletePackageVersionForAuthenticatedUserUnauthorized BasicError

func (*PackagesDeletePackageVersionForAuthenticatedUserUnauthorized) packagesDeletePackageVersionForAuthenticatedUserRes() {
}

type PackagesDeletePackageVersionForOrgForbidden BasicError

func (*PackagesDeletePackageVersionForOrgForbidden) packagesDeletePackageVersionForOrgRes() {}

// PackagesDeletePackageVersionForOrgNoContent is response for PackagesDeletePackageVersionForOrg operation.
type PackagesDeletePackageVersionForOrgNoContent struct{}

func (*PackagesDeletePackageVersionForOrgNoContent) packagesDeletePackageVersionForOrgRes() {}

type PackagesDeletePackageVersionForOrgNotFound BasicError

func (*PackagesDeletePackageVersionForOrgNotFound) packagesDeletePackageVersionForOrgRes() {}

type PackagesDeletePackageVersionForOrgPackageType string

const (
	PackagesDeletePackageVersionForOrgPackageTypeNpm       PackagesDeletePackageVersionForOrgPackageType = "npm"
	PackagesDeletePackageVersionForOrgPackageTypeMaven     PackagesDeletePackageVersionForOrgPackageType = "maven"
	PackagesDeletePackageVersionForOrgPackageTypeRubygems  PackagesDeletePackageVersionForOrgPackageType = "rubygems"
	PackagesDeletePackageVersionForOrgPackageTypeDocker    PackagesDeletePackageVersionForOrgPackageType = "docker"
	PackagesDeletePackageVersionForOrgPackageTypeNuget     PackagesDeletePackageVersionForOrgPackageType = "nuget"
	PackagesDeletePackageVersionForOrgPackageTypeContainer PackagesDeletePackageVersionForOrgPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesDeletePackageVersionForOrgPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesDeletePackageVersionForOrgPackageTypeNpm:
		return []byte(s), nil
	case PackagesDeletePackageVersionForOrgPackageTypeMaven:
		return []byte(s), nil
	case PackagesDeletePackageVersionForOrgPackageTypeRubygems:
		return []byte(s), nil
	case PackagesDeletePackageVersionForOrgPackageTypeDocker:
		return []byte(s), nil
	case PackagesDeletePackageVersionForOrgPackageTypeNuget:
		return []byte(s), nil
	case PackagesDeletePackageVersionForOrgPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesDeletePackageVersionForOrgPackageType) UnmarshalText(data []byte) error {
	switch PackagesDeletePackageVersionForOrgPackageType(data) {
	case PackagesDeletePackageVersionForOrgPackageTypeNpm:
		*s = PackagesDeletePackageVersionForOrgPackageTypeNpm
		return nil
	case PackagesDeletePackageVersionForOrgPackageTypeMaven:
		*s = PackagesDeletePackageVersionForOrgPackageTypeMaven
		return nil
	case PackagesDeletePackageVersionForOrgPackageTypeRubygems:
		*s = PackagesDeletePackageVersionForOrgPackageTypeRubygems
		return nil
	case PackagesDeletePackageVersionForOrgPackageTypeDocker:
		*s = PackagesDeletePackageVersionForOrgPackageTypeDocker
		return nil
	case PackagesDeletePackageVersionForOrgPackageTypeNuget:
		*s = PackagesDeletePackageVersionForOrgPackageTypeNuget
		return nil
	case PackagesDeletePackageVersionForOrgPackageTypeContainer:
		*s = PackagesDeletePackageVersionForOrgPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesDeletePackageVersionForOrgUnauthorized BasicError

func (*PackagesDeletePackageVersionForOrgUnauthorized) packagesDeletePackageVersionForOrgRes() {}

type PackagesDeletePackageVersionForUserForbidden BasicError

func (*PackagesDeletePackageVersionForUserForbidden) packagesDeletePackageVersionForUserRes() {}

// PackagesDeletePackageVersionForUserNoContent is response for PackagesDeletePackageVersionForUser operation.
type PackagesDeletePackageVersionForUserNoContent struct{}

func (*PackagesDeletePackageVersionForUserNoContent) packagesDeletePackageVersionForUserRes() {}

type PackagesDeletePackageVersionForUserNotFound BasicError

func (*PackagesDeletePackageVersionForUserNotFound) packagesDeletePackageVersionForUserRes() {}

type PackagesDeletePackageVersionForUserPackageType string

const (
	PackagesDeletePackageVersionForUserPackageTypeNpm       PackagesDeletePackageVersionForUserPackageType = "npm"
	PackagesDeletePackageVersionForUserPackageTypeMaven     PackagesDeletePackageVersionForUserPackageType = "maven"
	PackagesDeletePackageVersionForUserPackageTypeRubygems  PackagesDeletePackageVersionForUserPackageType = "rubygems"
	PackagesDeletePackageVersionForUserPackageTypeDocker    PackagesDeletePackageVersionForUserPackageType = "docker"
	PackagesDeletePackageVersionForUserPackageTypeNuget     PackagesDeletePackageVersionForUserPackageType = "nuget"
	PackagesDeletePackageVersionForUserPackageTypeContainer PackagesDeletePackageVersionForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesDeletePackageVersionForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesDeletePackageVersionForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesDeletePackageVersionForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesDeletePackageVersionForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesDeletePackageVersionForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesDeletePackageVersionForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesDeletePackageVersionForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesDeletePackageVersionForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesDeletePackageVersionForUserPackageType(data) {
	case PackagesDeletePackageVersionForUserPackageTypeNpm:
		*s = PackagesDeletePackageVersionForUserPackageTypeNpm
		return nil
	case PackagesDeletePackageVersionForUserPackageTypeMaven:
		*s = PackagesDeletePackageVersionForUserPackageTypeMaven
		return nil
	case PackagesDeletePackageVersionForUserPackageTypeRubygems:
		*s = PackagesDeletePackageVersionForUserPackageTypeRubygems
		return nil
	case PackagesDeletePackageVersionForUserPackageTypeDocker:
		*s = PackagesDeletePackageVersionForUserPackageTypeDocker
		return nil
	case PackagesDeletePackageVersionForUserPackageTypeNuget:
		*s = PackagesDeletePackageVersionForUserPackageTypeNuget
		return nil
	case PackagesDeletePackageVersionForUserPackageTypeContainer:
		*s = PackagesDeletePackageVersionForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesDeletePackageVersionForUserUnauthorized BasicError

func (*PackagesDeletePackageVersionForUserUnauthorized) packagesDeletePackageVersionForUserRes() {}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserForbidden BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserForbidden) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserNotFound BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserNotFound) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON []PackageVersion

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNpm       PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "npm"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeMaven     PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "maven"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeRubygems  PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "rubygems"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeDocker    PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "docker"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNuget     PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "nuget"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeContainer PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType(data) {
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNpm:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeMaven:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeRubygems:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeDocker:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNuget:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeContainer:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateActive  PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState = "active"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateDeleted PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateActive:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) UnmarshalText(data []byte) error {
	switch PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState(data) {
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateActive:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateActive
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateDeleted:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserUnauthorized BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserUnauthorized) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgForbidden BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgForbidden) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgNotFound BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgNotFound) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON []PackageVersion

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNpm       PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "npm"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeMaven     PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "maven"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeRubygems  PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "rubygems"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeDocker    PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "docker"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNuget     PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "nuget"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeContainer PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType(data) {
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNpm:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNpm
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeMaven:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeMaven
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeRubygems:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeRubygems
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeDocker:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeDocker
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNuget:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeNuget
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeContainer:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgState string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByOrgStateActive  PackagesGetAllPackageVersionsForPackageOwnedByOrgState = "active"
	PackagesGetAllPackageVersionsForPackageOwnedByOrgStateDeleted PackagesGetAllPackageVersionsForPackageOwnedByOrgState = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgState) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgStateActive:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgStateDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByOrgState) UnmarshalText(data []byte) error {
	switch PackagesGetAllPackageVersionsForPackageOwnedByOrgState(data) {
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgStateActive:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgStateActive
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByOrgStateDeleted:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByOrgStateDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgUnauthorized BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgUnauthorized) packagesGetAllPackageVersionsForPackageOwnedByOrgRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserForbidden BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserForbidden) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserNotFound BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserNotFound) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON []PackageVersion

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNpm       PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "npm"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeMaven     PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "maven"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeRubygems  PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "rubygems"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeDocker    PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "docker"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNuget     PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "nuget"
	PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeContainer PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType(data) {
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNpm:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNpm
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeMaven:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeMaven
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeRubygems:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeRubygems
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeDocker:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeDocker
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNuget:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeNuget
		return nil
	case PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeContainer:
		*s = PackagesGetAllPackageVersionsForPackageOwnedByUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserUnauthorized BasicError

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserUnauthorized) packagesGetAllPackageVersionsForPackageOwnedByUserRes() {
}

type PackagesGetPackageForAuthenticatedUserPackageType string

const (
	PackagesGetPackageForAuthenticatedUserPackageTypeNpm       PackagesGetPackageForAuthenticatedUserPackageType = "npm"
	PackagesGetPackageForAuthenticatedUserPackageTypeMaven     PackagesGetPackageForAuthenticatedUserPackageType = "maven"
	PackagesGetPackageForAuthenticatedUserPackageTypeRubygems  PackagesGetPackageForAuthenticatedUserPackageType = "rubygems"
	PackagesGetPackageForAuthenticatedUserPackageTypeDocker    PackagesGetPackageForAuthenticatedUserPackageType = "docker"
	PackagesGetPackageForAuthenticatedUserPackageTypeNuget     PackagesGetPackageForAuthenticatedUserPackageType = "nuget"
	PackagesGetPackageForAuthenticatedUserPackageTypeContainer PackagesGetPackageForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetPackageForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetPackageForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetPackageForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetPackageForAuthenticatedUserPackageType(data) {
	case PackagesGetPackageForAuthenticatedUserPackageTypeNpm:
		*s = PackagesGetPackageForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeMaven:
		*s = PackagesGetPackageForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesGetPackageForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeDocker:
		*s = PackagesGetPackageForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeNuget:
		*s = PackagesGetPackageForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesGetPackageForAuthenticatedUserPackageTypeContainer:
		*s = PackagesGetPackageForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetPackageForOrganizationPackageType string

const (
	PackagesGetPackageForOrganizationPackageTypeNpm       PackagesGetPackageForOrganizationPackageType = "npm"
	PackagesGetPackageForOrganizationPackageTypeMaven     PackagesGetPackageForOrganizationPackageType = "maven"
	PackagesGetPackageForOrganizationPackageTypeRubygems  PackagesGetPackageForOrganizationPackageType = "rubygems"
	PackagesGetPackageForOrganizationPackageTypeDocker    PackagesGetPackageForOrganizationPackageType = "docker"
	PackagesGetPackageForOrganizationPackageTypeNuget     PackagesGetPackageForOrganizationPackageType = "nuget"
	PackagesGetPackageForOrganizationPackageTypeContainer PackagesGetPackageForOrganizationPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetPackageForOrganizationPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetPackageForOrganizationPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetPackageForOrganizationPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetPackageForOrganizationPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetPackageForOrganizationPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetPackageForOrganizationPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetPackageForOrganizationPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetPackageForOrganizationPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetPackageForOrganizationPackageType(data) {
	case PackagesGetPackageForOrganizationPackageTypeNpm:
		*s = PackagesGetPackageForOrganizationPackageTypeNpm
		return nil
	case PackagesGetPackageForOrganizationPackageTypeMaven:
		*s = PackagesGetPackageForOrganizationPackageTypeMaven
		return nil
	case PackagesGetPackageForOrganizationPackageTypeRubygems:
		*s = PackagesGetPackageForOrganizationPackageTypeRubygems
		return nil
	case PackagesGetPackageForOrganizationPackageTypeDocker:
		*s = PackagesGetPackageForOrganizationPackageTypeDocker
		return nil
	case PackagesGetPackageForOrganizationPackageTypeNuget:
		*s = PackagesGetPackageForOrganizationPackageTypeNuget
		return nil
	case PackagesGetPackageForOrganizationPackageTypeContainer:
		*s = PackagesGetPackageForOrganizationPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetPackageForUserPackageType string

const (
	PackagesGetPackageForUserPackageTypeNpm       PackagesGetPackageForUserPackageType = "npm"
	PackagesGetPackageForUserPackageTypeMaven     PackagesGetPackageForUserPackageType = "maven"
	PackagesGetPackageForUserPackageTypeRubygems  PackagesGetPackageForUserPackageType = "rubygems"
	PackagesGetPackageForUserPackageTypeDocker    PackagesGetPackageForUserPackageType = "docker"
	PackagesGetPackageForUserPackageTypeNuget     PackagesGetPackageForUserPackageType = "nuget"
	PackagesGetPackageForUserPackageTypeContainer PackagesGetPackageForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetPackageForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetPackageForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetPackageForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetPackageForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetPackageForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetPackageForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetPackageForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetPackageForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetPackageForUserPackageType(data) {
	case PackagesGetPackageForUserPackageTypeNpm:
		*s = PackagesGetPackageForUserPackageTypeNpm
		return nil
	case PackagesGetPackageForUserPackageTypeMaven:
		*s = PackagesGetPackageForUserPackageTypeMaven
		return nil
	case PackagesGetPackageForUserPackageTypeRubygems:
		*s = PackagesGetPackageForUserPackageTypeRubygems
		return nil
	case PackagesGetPackageForUserPackageTypeDocker:
		*s = PackagesGetPackageForUserPackageTypeDocker
		return nil
	case PackagesGetPackageForUserPackageTypeNuget:
		*s = PackagesGetPackageForUserPackageTypeNuget
		return nil
	case PackagesGetPackageForUserPackageTypeContainer:
		*s = PackagesGetPackageForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetPackageVersionForAuthenticatedUserPackageType string

const (
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeNpm       PackagesGetPackageVersionForAuthenticatedUserPackageType = "npm"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeMaven     PackagesGetPackageVersionForAuthenticatedUserPackageType = "maven"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeRubygems  PackagesGetPackageVersionForAuthenticatedUserPackageType = "rubygems"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeDocker    PackagesGetPackageVersionForAuthenticatedUserPackageType = "docker"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeNuget     PackagesGetPackageVersionForAuthenticatedUserPackageType = "nuget"
	PackagesGetPackageVersionForAuthenticatedUserPackageTypeContainer PackagesGetPackageVersionForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetPackageVersionForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetPackageVersionForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetPackageVersionForAuthenticatedUserPackageType(data) {
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeNpm:
		*s = PackagesGetPackageVersionForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeMaven:
		*s = PackagesGetPackageVersionForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesGetPackageVersionForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeDocker:
		*s = PackagesGetPackageVersionForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeNuget:
		*s = PackagesGetPackageVersionForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesGetPackageVersionForAuthenticatedUserPackageTypeContainer:
		*s = PackagesGetPackageVersionForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetPackageVersionForOrganizationPackageType string

const (
	PackagesGetPackageVersionForOrganizationPackageTypeNpm       PackagesGetPackageVersionForOrganizationPackageType = "npm"
	PackagesGetPackageVersionForOrganizationPackageTypeMaven     PackagesGetPackageVersionForOrganizationPackageType = "maven"
	PackagesGetPackageVersionForOrganizationPackageTypeRubygems  PackagesGetPackageVersionForOrganizationPackageType = "rubygems"
	PackagesGetPackageVersionForOrganizationPackageTypeDocker    PackagesGetPackageVersionForOrganizationPackageType = "docker"
	PackagesGetPackageVersionForOrganizationPackageTypeNuget     PackagesGetPackageVersionForOrganizationPackageType = "nuget"
	PackagesGetPackageVersionForOrganizationPackageTypeContainer PackagesGetPackageVersionForOrganizationPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetPackageVersionForOrganizationPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetPackageVersionForOrganizationPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetPackageVersionForOrganizationPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetPackageVersionForOrganizationPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetPackageVersionForOrganizationPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetPackageVersionForOrganizationPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetPackageVersionForOrganizationPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetPackageVersionForOrganizationPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetPackageVersionForOrganizationPackageType(data) {
	case PackagesGetPackageVersionForOrganizationPackageTypeNpm:
		*s = PackagesGetPackageVersionForOrganizationPackageTypeNpm
		return nil
	case PackagesGetPackageVersionForOrganizationPackageTypeMaven:
		*s = PackagesGetPackageVersionForOrganizationPackageTypeMaven
		return nil
	case PackagesGetPackageVersionForOrganizationPackageTypeRubygems:
		*s = PackagesGetPackageVersionForOrganizationPackageTypeRubygems
		return nil
	case PackagesGetPackageVersionForOrganizationPackageTypeDocker:
		*s = PackagesGetPackageVersionForOrganizationPackageTypeDocker
		return nil
	case PackagesGetPackageVersionForOrganizationPackageTypeNuget:
		*s = PackagesGetPackageVersionForOrganizationPackageTypeNuget
		return nil
	case PackagesGetPackageVersionForOrganizationPackageTypeContainer:
		*s = PackagesGetPackageVersionForOrganizationPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesGetPackageVersionForUserPackageType string

const (
	PackagesGetPackageVersionForUserPackageTypeNpm       PackagesGetPackageVersionForUserPackageType = "npm"
	PackagesGetPackageVersionForUserPackageTypeMaven     PackagesGetPackageVersionForUserPackageType = "maven"
	PackagesGetPackageVersionForUserPackageTypeRubygems  PackagesGetPackageVersionForUserPackageType = "rubygems"
	PackagesGetPackageVersionForUserPackageTypeDocker    PackagesGetPackageVersionForUserPackageType = "docker"
	PackagesGetPackageVersionForUserPackageTypeNuget     PackagesGetPackageVersionForUserPackageType = "nuget"
	PackagesGetPackageVersionForUserPackageTypeContainer PackagesGetPackageVersionForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesGetPackageVersionForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesGetPackageVersionForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesGetPackageVersionForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesGetPackageVersionForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesGetPackageVersionForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesGetPackageVersionForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesGetPackageVersionForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesGetPackageVersionForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesGetPackageVersionForUserPackageType(data) {
	case PackagesGetPackageVersionForUserPackageTypeNpm:
		*s = PackagesGetPackageVersionForUserPackageTypeNpm
		return nil
	case PackagesGetPackageVersionForUserPackageTypeMaven:
		*s = PackagesGetPackageVersionForUserPackageTypeMaven
		return nil
	case PackagesGetPackageVersionForUserPackageTypeRubygems:
		*s = PackagesGetPackageVersionForUserPackageTypeRubygems
		return nil
	case PackagesGetPackageVersionForUserPackageTypeDocker:
		*s = PackagesGetPackageVersionForUserPackageTypeDocker
		return nil
	case PackagesGetPackageVersionForUserPackageTypeNuget:
		*s = PackagesGetPackageVersionForUserPackageTypeNuget
		return nil
	case PackagesGetPackageVersionForUserPackageTypeContainer:
		*s = PackagesGetPackageVersionForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesListPackagesForAuthenticatedUserPackageType string

const (
	PackagesListPackagesForAuthenticatedUserPackageTypeNpm       PackagesListPackagesForAuthenticatedUserPackageType = "npm"
	PackagesListPackagesForAuthenticatedUserPackageTypeMaven     PackagesListPackagesForAuthenticatedUserPackageType = "maven"
	PackagesListPackagesForAuthenticatedUserPackageTypeRubygems  PackagesListPackagesForAuthenticatedUserPackageType = "rubygems"
	PackagesListPackagesForAuthenticatedUserPackageTypeDocker    PackagesListPackagesForAuthenticatedUserPackageType = "docker"
	PackagesListPackagesForAuthenticatedUserPackageTypeNuget     PackagesListPackagesForAuthenticatedUserPackageType = "nuget"
	PackagesListPackagesForAuthenticatedUserPackageTypeContainer PackagesListPackagesForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesListPackagesForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesListPackagesForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesListPackagesForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesListPackagesForAuthenticatedUserPackageType(data) {
	case PackagesListPackagesForAuthenticatedUserPackageTypeNpm:
		*s = PackagesListPackagesForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeMaven:
		*s = PackagesListPackagesForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesListPackagesForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeDocker:
		*s = PackagesListPackagesForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeNuget:
		*s = PackagesListPackagesForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesListPackagesForAuthenticatedUserPackageTypeContainer:
		*s = PackagesListPackagesForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesListPackagesForAuthenticatedUserVisibility string

const (
	PackagesListPackagesForAuthenticatedUserVisibilityPublic   PackagesListPackagesForAuthenticatedUserVisibility = "public"
	PackagesListPackagesForAuthenticatedUserVisibilityPrivate  PackagesListPackagesForAuthenticatedUserVisibility = "private"
	PackagesListPackagesForAuthenticatedUserVisibilityInternal PackagesListPackagesForAuthenticatedUserVisibility = "internal"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesListPackagesForAuthenticatedUserVisibility) MarshalText() ([]byte, error) {
	switch s {
	case PackagesListPackagesForAuthenticatedUserVisibilityPublic:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserVisibilityPrivate:
		return []byte(s), nil
	case PackagesListPackagesForAuthenticatedUserVisibilityInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesListPackagesForAuthenticatedUserVisibility) UnmarshalText(data []byte) error {
	switch PackagesListPackagesForAuthenticatedUserVisibility(data) {
	case PackagesListPackagesForAuthenticatedUserVisibilityPublic:
		*s = PackagesListPackagesForAuthenticatedUserVisibilityPublic
		return nil
	case PackagesListPackagesForAuthenticatedUserVisibilityPrivate:
		*s = PackagesListPackagesForAuthenticatedUserVisibilityPrivate
		return nil
	case PackagesListPackagesForAuthenticatedUserVisibilityInternal:
		*s = PackagesListPackagesForAuthenticatedUserVisibilityInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesListPackagesForOrganizationForbidden BasicError

func (*PackagesListPackagesForOrganizationForbidden) packagesListPackagesForOrganizationRes() {}

type PackagesListPackagesForOrganizationOKApplicationJSON []Package

func (*PackagesListPackagesForOrganizationOKApplicationJSON) packagesListPackagesForOrganizationRes() {
}

type PackagesListPackagesForOrganizationPackageType string

const (
	PackagesListPackagesForOrganizationPackageTypeNpm       PackagesListPackagesForOrganizationPackageType = "npm"
	PackagesListPackagesForOrganizationPackageTypeMaven     PackagesListPackagesForOrganizationPackageType = "maven"
	PackagesListPackagesForOrganizationPackageTypeRubygems  PackagesListPackagesForOrganizationPackageType = "rubygems"
	PackagesListPackagesForOrganizationPackageTypeDocker    PackagesListPackagesForOrganizationPackageType = "docker"
	PackagesListPackagesForOrganizationPackageTypeNuget     PackagesListPackagesForOrganizationPackageType = "nuget"
	PackagesListPackagesForOrganizationPackageTypeContainer PackagesListPackagesForOrganizationPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesListPackagesForOrganizationPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesListPackagesForOrganizationPackageTypeNpm:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationPackageTypeMaven:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationPackageTypeRubygems:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationPackageTypeDocker:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationPackageTypeNuget:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesListPackagesForOrganizationPackageType) UnmarshalText(data []byte) error {
	switch PackagesListPackagesForOrganizationPackageType(data) {
	case PackagesListPackagesForOrganizationPackageTypeNpm:
		*s = PackagesListPackagesForOrganizationPackageTypeNpm
		return nil
	case PackagesListPackagesForOrganizationPackageTypeMaven:
		*s = PackagesListPackagesForOrganizationPackageTypeMaven
		return nil
	case PackagesListPackagesForOrganizationPackageTypeRubygems:
		*s = PackagesListPackagesForOrganizationPackageTypeRubygems
		return nil
	case PackagesListPackagesForOrganizationPackageTypeDocker:
		*s = PackagesListPackagesForOrganizationPackageTypeDocker
		return nil
	case PackagesListPackagesForOrganizationPackageTypeNuget:
		*s = PackagesListPackagesForOrganizationPackageTypeNuget
		return nil
	case PackagesListPackagesForOrganizationPackageTypeContainer:
		*s = PackagesListPackagesForOrganizationPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesListPackagesForOrganizationUnauthorized BasicError

func (*PackagesListPackagesForOrganizationUnauthorized) packagesListPackagesForOrganizationRes() {}

type PackagesListPackagesForOrganizationVisibility string

const (
	PackagesListPackagesForOrganizationVisibilityPublic   PackagesListPackagesForOrganizationVisibility = "public"
	PackagesListPackagesForOrganizationVisibilityPrivate  PackagesListPackagesForOrganizationVisibility = "private"
	PackagesListPackagesForOrganizationVisibilityInternal PackagesListPackagesForOrganizationVisibility = "internal"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesListPackagesForOrganizationVisibility) MarshalText() ([]byte, error) {
	switch s {
	case PackagesListPackagesForOrganizationVisibilityPublic:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationVisibilityPrivate:
		return []byte(s), nil
	case PackagesListPackagesForOrganizationVisibilityInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesListPackagesForOrganizationVisibility) UnmarshalText(data []byte) error {
	switch PackagesListPackagesForOrganizationVisibility(data) {
	case PackagesListPackagesForOrganizationVisibilityPublic:
		*s = PackagesListPackagesForOrganizationVisibilityPublic
		return nil
	case PackagesListPackagesForOrganizationVisibilityPrivate:
		*s = PackagesListPackagesForOrganizationVisibilityPrivate
		return nil
	case PackagesListPackagesForOrganizationVisibilityInternal:
		*s = PackagesListPackagesForOrganizationVisibilityInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesListPackagesForUserForbidden BasicError

func (*PackagesListPackagesForUserForbidden) packagesListPackagesForUserRes() {}

type PackagesListPackagesForUserOKApplicationJSON []Package

func (*PackagesListPackagesForUserOKApplicationJSON) packagesListPackagesForUserRes() {}

type PackagesListPackagesForUserPackageType string

const (
	PackagesListPackagesForUserPackageTypeNpm       PackagesListPackagesForUserPackageType = "npm"
	PackagesListPackagesForUserPackageTypeMaven     PackagesListPackagesForUserPackageType = "maven"
	PackagesListPackagesForUserPackageTypeRubygems  PackagesListPackagesForUserPackageType = "rubygems"
	PackagesListPackagesForUserPackageTypeDocker    PackagesListPackagesForUserPackageType = "docker"
	PackagesListPackagesForUserPackageTypeNuget     PackagesListPackagesForUserPackageType = "nuget"
	PackagesListPackagesForUserPackageTypeContainer PackagesListPackagesForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesListPackagesForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesListPackagesForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesListPackagesForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesListPackagesForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesListPackagesForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesListPackagesForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesListPackagesForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesListPackagesForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesListPackagesForUserPackageType(data) {
	case PackagesListPackagesForUserPackageTypeNpm:
		*s = PackagesListPackagesForUserPackageTypeNpm
		return nil
	case PackagesListPackagesForUserPackageTypeMaven:
		*s = PackagesListPackagesForUserPackageTypeMaven
		return nil
	case PackagesListPackagesForUserPackageTypeRubygems:
		*s = PackagesListPackagesForUserPackageTypeRubygems
		return nil
	case PackagesListPackagesForUserPackageTypeDocker:
		*s = PackagesListPackagesForUserPackageTypeDocker
		return nil
	case PackagesListPackagesForUserPackageTypeNuget:
		*s = PackagesListPackagesForUserPackageTypeNuget
		return nil
	case PackagesListPackagesForUserPackageTypeContainer:
		*s = PackagesListPackagesForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesListPackagesForUserUnauthorized BasicError

func (*PackagesListPackagesForUserUnauthorized) packagesListPackagesForUserRes() {}

type PackagesListPackagesForUserVisibility string

const (
	PackagesListPackagesForUserVisibilityPublic   PackagesListPackagesForUserVisibility = "public"
	PackagesListPackagesForUserVisibilityPrivate  PackagesListPackagesForUserVisibility = "private"
	PackagesListPackagesForUserVisibilityInternal PackagesListPackagesForUserVisibility = "internal"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesListPackagesForUserVisibility) MarshalText() ([]byte, error) {
	switch s {
	case PackagesListPackagesForUserVisibilityPublic:
		return []byte(s), nil
	case PackagesListPackagesForUserVisibilityPrivate:
		return []byte(s), nil
	case PackagesListPackagesForUserVisibilityInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesListPackagesForUserVisibility) UnmarshalText(data []byte) error {
	switch PackagesListPackagesForUserVisibility(data) {
	case PackagesListPackagesForUserVisibilityPublic:
		*s = PackagesListPackagesForUserVisibilityPublic
		return nil
	case PackagesListPackagesForUserVisibilityPrivate:
		*s = PackagesListPackagesForUserVisibilityPrivate
		return nil
	case PackagesListPackagesForUserVisibilityInternal:
		*s = PackagesListPackagesForUserVisibilityInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageForAuthenticatedUserForbidden BasicError

func (*PackagesRestorePackageForAuthenticatedUserForbidden) packagesRestorePackageForAuthenticatedUserRes() {
}

// PackagesRestorePackageForAuthenticatedUserNoContent is response for PackagesRestorePackageForAuthenticatedUser operation.
type PackagesRestorePackageForAuthenticatedUserNoContent struct{}

func (*PackagesRestorePackageForAuthenticatedUserNoContent) packagesRestorePackageForAuthenticatedUserRes() {
}

type PackagesRestorePackageForAuthenticatedUserNotFound BasicError

func (*PackagesRestorePackageForAuthenticatedUserNotFound) packagesRestorePackageForAuthenticatedUserRes() {
}

type PackagesRestorePackageForAuthenticatedUserPackageType string

const (
	PackagesRestorePackageForAuthenticatedUserPackageTypeNpm       PackagesRestorePackageForAuthenticatedUserPackageType = "npm"
	PackagesRestorePackageForAuthenticatedUserPackageTypeMaven     PackagesRestorePackageForAuthenticatedUserPackageType = "maven"
	PackagesRestorePackageForAuthenticatedUserPackageTypeRubygems  PackagesRestorePackageForAuthenticatedUserPackageType = "rubygems"
	PackagesRestorePackageForAuthenticatedUserPackageTypeDocker    PackagesRestorePackageForAuthenticatedUserPackageType = "docker"
	PackagesRestorePackageForAuthenticatedUserPackageTypeNuget     PackagesRestorePackageForAuthenticatedUserPackageType = "nuget"
	PackagesRestorePackageForAuthenticatedUserPackageTypeContainer PackagesRestorePackageForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesRestorePackageForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesRestorePackageForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesRestorePackageForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesRestorePackageForAuthenticatedUserPackageType(data) {
	case PackagesRestorePackageForAuthenticatedUserPackageTypeNpm:
		*s = PackagesRestorePackageForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeMaven:
		*s = PackagesRestorePackageForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesRestorePackageForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeDocker:
		*s = PackagesRestorePackageForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeNuget:
		*s = PackagesRestorePackageForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesRestorePackageForAuthenticatedUserPackageTypeContainer:
		*s = PackagesRestorePackageForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageForAuthenticatedUserUnauthorized BasicError

func (*PackagesRestorePackageForAuthenticatedUserUnauthorized) packagesRestorePackageForAuthenticatedUserRes() {
}

type PackagesRestorePackageForOrgForbidden BasicError

func (*PackagesRestorePackageForOrgForbidden) packagesRestorePackageForOrgRes() {}

// PackagesRestorePackageForOrgNoContent is response for PackagesRestorePackageForOrg operation.
type PackagesRestorePackageForOrgNoContent struct{}

func (*PackagesRestorePackageForOrgNoContent) packagesRestorePackageForOrgRes() {}

type PackagesRestorePackageForOrgNotFound BasicError

func (*PackagesRestorePackageForOrgNotFound) packagesRestorePackageForOrgRes() {}

type PackagesRestorePackageForOrgPackageType string

const (
	PackagesRestorePackageForOrgPackageTypeNpm       PackagesRestorePackageForOrgPackageType = "npm"
	PackagesRestorePackageForOrgPackageTypeMaven     PackagesRestorePackageForOrgPackageType = "maven"
	PackagesRestorePackageForOrgPackageTypeRubygems  PackagesRestorePackageForOrgPackageType = "rubygems"
	PackagesRestorePackageForOrgPackageTypeDocker    PackagesRestorePackageForOrgPackageType = "docker"
	PackagesRestorePackageForOrgPackageTypeNuget     PackagesRestorePackageForOrgPackageType = "nuget"
	PackagesRestorePackageForOrgPackageTypeContainer PackagesRestorePackageForOrgPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesRestorePackageForOrgPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesRestorePackageForOrgPackageTypeNpm:
		return []byte(s), nil
	case PackagesRestorePackageForOrgPackageTypeMaven:
		return []byte(s), nil
	case PackagesRestorePackageForOrgPackageTypeRubygems:
		return []byte(s), nil
	case PackagesRestorePackageForOrgPackageTypeDocker:
		return []byte(s), nil
	case PackagesRestorePackageForOrgPackageTypeNuget:
		return []byte(s), nil
	case PackagesRestorePackageForOrgPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesRestorePackageForOrgPackageType) UnmarshalText(data []byte) error {
	switch PackagesRestorePackageForOrgPackageType(data) {
	case PackagesRestorePackageForOrgPackageTypeNpm:
		*s = PackagesRestorePackageForOrgPackageTypeNpm
		return nil
	case PackagesRestorePackageForOrgPackageTypeMaven:
		*s = PackagesRestorePackageForOrgPackageTypeMaven
		return nil
	case PackagesRestorePackageForOrgPackageTypeRubygems:
		*s = PackagesRestorePackageForOrgPackageTypeRubygems
		return nil
	case PackagesRestorePackageForOrgPackageTypeDocker:
		*s = PackagesRestorePackageForOrgPackageTypeDocker
		return nil
	case PackagesRestorePackageForOrgPackageTypeNuget:
		*s = PackagesRestorePackageForOrgPackageTypeNuget
		return nil
	case PackagesRestorePackageForOrgPackageTypeContainer:
		*s = PackagesRestorePackageForOrgPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageForOrgUnauthorized BasicError

func (*PackagesRestorePackageForOrgUnauthorized) packagesRestorePackageForOrgRes() {}

type PackagesRestorePackageForUserForbidden BasicError

func (*PackagesRestorePackageForUserForbidden) packagesRestorePackageForUserRes() {}

// PackagesRestorePackageForUserNoContent is response for PackagesRestorePackageForUser operation.
type PackagesRestorePackageForUserNoContent struct{}

func (*PackagesRestorePackageForUserNoContent) packagesRestorePackageForUserRes() {}

type PackagesRestorePackageForUserNotFound BasicError

func (*PackagesRestorePackageForUserNotFound) packagesRestorePackageForUserRes() {}

type PackagesRestorePackageForUserPackageType string

const (
	PackagesRestorePackageForUserPackageTypeNpm       PackagesRestorePackageForUserPackageType = "npm"
	PackagesRestorePackageForUserPackageTypeMaven     PackagesRestorePackageForUserPackageType = "maven"
	PackagesRestorePackageForUserPackageTypeRubygems  PackagesRestorePackageForUserPackageType = "rubygems"
	PackagesRestorePackageForUserPackageTypeDocker    PackagesRestorePackageForUserPackageType = "docker"
	PackagesRestorePackageForUserPackageTypeNuget     PackagesRestorePackageForUserPackageType = "nuget"
	PackagesRestorePackageForUserPackageTypeContainer PackagesRestorePackageForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesRestorePackageForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesRestorePackageForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesRestorePackageForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesRestorePackageForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesRestorePackageForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesRestorePackageForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesRestorePackageForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesRestorePackageForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesRestorePackageForUserPackageType(data) {
	case PackagesRestorePackageForUserPackageTypeNpm:
		*s = PackagesRestorePackageForUserPackageTypeNpm
		return nil
	case PackagesRestorePackageForUserPackageTypeMaven:
		*s = PackagesRestorePackageForUserPackageTypeMaven
		return nil
	case PackagesRestorePackageForUserPackageTypeRubygems:
		*s = PackagesRestorePackageForUserPackageTypeRubygems
		return nil
	case PackagesRestorePackageForUserPackageTypeDocker:
		*s = PackagesRestorePackageForUserPackageTypeDocker
		return nil
	case PackagesRestorePackageForUserPackageTypeNuget:
		*s = PackagesRestorePackageForUserPackageTypeNuget
		return nil
	case PackagesRestorePackageForUserPackageTypeContainer:
		*s = PackagesRestorePackageForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageForUserUnauthorized BasicError

func (*PackagesRestorePackageForUserUnauthorized) packagesRestorePackageForUserRes() {}

type PackagesRestorePackageVersionForAuthenticatedUserForbidden BasicError

func (*PackagesRestorePackageVersionForAuthenticatedUserForbidden) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

// PackagesRestorePackageVersionForAuthenticatedUserNoContent is response for PackagesRestorePackageVersionForAuthenticatedUser operation.
type PackagesRestorePackageVersionForAuthenticatedUserNoContent struct{}

func (*PackagesRestorePackageVersionForAuthenticatedUserNoContent) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

type PackagesRestorePackageVersionForAuthenticatedUserNotFound BasicError

func (*PackagesRestorePackageVersionForAuthenticatedUserNotFound) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

type PackagesRestorePackageVersionForAuthenticatedUserPackageType string

const (
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNpm       PackagesRestorePackageVersionForAuthenticatedUserPackageType = "npm"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeMaven     PackagesRestorePackageVersionForAuthenticatedUserPackageType = "maven"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeRubygems  PackagesRestorePackageVersionForAuthenticatedUserPackageType = "rubygems"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeDocker    PackagesRestorePackageVersionForAuthenticatedUserPackageType = "docker"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNuget     PackagesRestorePackageVersionForAuthenticatedUserPackageType = "nuget"
	PackagesRestorePackageVersionForAuthenticatedUserPackageTypeContainer PackagesRestorePackageVersionForAuthenticatedUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesRestorePackageVersionForAuthenticatedUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesRestorePackageVersionForAuthenticatedUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesRestorePackageVersionForAuthenticatedUserPackageType(data) {
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNpm:
		*s = PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNpm
		return nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeMaven:
		*s = PackagesRestorePackageVersionForAuthenticatedUserPackageTypeMaven
		return nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeRubygems:
		*s = PackagesRestorePackageVersionForAuthenticatedUserPackageTypeRubygems
		return nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeDocker:
		*s = PackagesRestorePackageVersionForAuthenticatedUserPackageTypeDocker
		return nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNuget:
		*s = PackagesRestorePackageVersionForAuthenticatedUserPackageTypeNuget
		return nil
	case PackagesRestorePackageVersionForAuthenticatedUserPackageTypeContainer:
		*s = PackagesRestorePackageVersionForAuthenticatedUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageVersionForAuthenticatedUserUnauthorized BasicError

func (*PackagesRestorePackageVersionForAuthenticatedUserUnauthorized) packagesRestorePackageVersionForAuthenticatedUserRes() {
}

type PackagesRestorePackageVersionForOrgForbidden BasicError

func (*PackagesRestorePackageVersionForOrgForbidden) packagesRestorePackageVersionForOrgRes() {}

// PackagesRestorePackageVersionForOrgNoContent is response for PackagesRestorePackageVersionForOrg operation.
type PackagesRestorePackageVersionForOrgNoContent struct{}

func (*PackagesRestorePackageVersionForOrgNoContent) packagesRestorePackageVersionForOrgRes() {}

type PackagesRestorePackageVersionForOrgNotFound BasicError

func (*PackagesRestorePackageVersionForOrgNotFound) packagesRestorePackageVersionForOrgRes() {}

type PackagesRestorePackageVersionForOrgPackageType string

const (
	PackagesRestorePackageVersionForOrgPackageTypeNpm       PackagesRestorePackageVersionForOrgPackageType = "npm"
	PackagesRestorePackageVersionForOrgPackageTypeMaven     PackagesRestorePackageVersionForOrgPackageType = "maven"
	PackagesRestorePackageVersionForOrgPackageTypeRubygems  PackagesRestorePackageVersionForOrgPackageType = "rubygems"
	PackagesRestorePackageVersionForOrgPackageTypeDocker    PackagesRestorePackageVersionForOrgPackageType = "docker"
	PackagesRestorePackageVersionForOrgPackageTypeNuget     PackagesRestorePackageVersionForOrgPackageType = "nuget"
	PackagesRestorePackageVersionForOrgPackageTypeContainer PackagesRestorePackageVersionForOrgPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesRestorePackageVersionForOrgPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesRestorePackageVersionForOrgPackageTypeNpm:
		return []byte(s), nil
	case PackagesRestorePackageVersionForOrgPackageTypeMaven:
		return []byte(s), nil
	case PackagesRestorePackageVersionForOrgPackageTypeRubygems:
		return []byte(s), nil
	case PackagesRestorePackageVersionForOrgPackageTypeDocker:
		return []byte(s), nil
	case PackagesRestorePackageVersionForOrgPackageTypeNuget:
		return []byte(s), nil
	case PackagesRestorePackageVersionForOrgPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesRestorePackageVersionForOrgPackageType) UnmarshalText(data []byte) error {
	switch PackagesRestorePackageVersionForOrgPackageType(data) {
	case PackagesRestorePackageVersionForOrgPackageTypeNpm:
		*s = PackagesRestorePackageVersionForOrgPackageTypeNpm
		return nil
	case PackagesRestorePackageVersionForOrgPackageTypeMaven:
		*s = PackagesRestorePackageVersionForOrgPackageTypeMaven
		return nil
	case PackagesRestorePackageVersionForOrgPackageTypeRubygems:
		*s = PackagesRestorePackageVersionForOrgPackageTypeRubygems
		return nil
	case PackagesRestorePackageVersionForOrgPackageTypeDocker:
		*s = PackagesRestorePackageVersionForOrgPackageTypeDocker
		return nil
	case PackagesRestorePackageVersionForOrgPackageTypeNuget:
		*s = PackagesRestorePackageVersionForOrgPackageTypeNuget
		return nil
	case PackagesRestorePackageVersionForOrgPackageTypeContainer:
		*s = PackagesRestorePackageVersionForOrgPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageVersionForOrgUnauthorized BasicError

func (*PackagesRestorePackageVersionForOrgUnauthorized) packagesRestorePackageVersionForOrgRes() {}

type PackagesRestorePackageVersionForUserForbidden BasicError

func (*PackagesRestorePackageVersionForUserForbidden) packagesRestorePackageVersionForUserRes() {}

// PackagesRestorePackageVersionForUserNoContent is response for PackagesRestorePackageVersionForUser operation.
type PackagesRestorePackageVersionForUserNoContent struct{}

func (*PackagesRestorePackageVersionForUserNoContent) packagesRestorePackageVersionForUserRes() {}

type PackagesRestorePackageVersionForUserNotFound BasicError

func (*PackagesRestorePackageVersionForUserNotFound) packagesRestorePackageVersionForUserRes() {}

type PackagesRestorePackageVersionForUserPackageType string

const (
	PackagesRestorePackageVersionForUserPackageTypeNpm       PackagesRestorePackageVersionForUserPackageType = "npm"
	PackagesRestorePackageVersionForUserPackageTypeMaven     PackagesRestorePackageVersionForUserPackageType = "maven"
	PackagesRestorePackageVersionForUserPackageTypeRubygems  PackagesRestorePackageVersionForUserPackageType = "rubygems"
	PackagesRestorePackageVersionForUserPackageTypeDocker    PackagesRestorePackageVersionForUserPackageType = "docker"
	PackagesRestorePackageVersionForUserPackageTypeNuget     PackagesRestorePackageVersionForUserPackageType = "nuget"
	PackagesRestorePackageVersionForUserPackageTypeContainer PackagesRestorePackageVersionForUserPackageType = "container"
)

// MarshalText implements encoding.TextMarshaler.
func (s PackagesRestorePackageVersionForUserPackageType) MarshalText() ([]byte, error) {
	switch s {
	case PackagesRestorePackageVersionForUserPackageTypeNpm:
		return []byte(s), nil
	case PackagesRestorePackageVersionForUserPackageTypeMaven:
		return []byte(s), nil
	case PackagesRestorePackageVersionForUserPackageTypeRubygems:
		return []byte(s), nil
	case PackagesRestorePackageVersionForUserPackageTypeDocker:
		return []byte(s), nil
	case PackagesRestorePackageVersionForUserPackageTypeNuget:
		return []byte(s), nil
	case PackagesRestorePackageVersionForUserPackageTypeContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PackagesRestorePackageVersionForUserPackageType) UnmarshalText(data []byte) error {
	switch PackagesRestorePackageVersionForUserPackageType(data) {
	case PackagesRestorePackageVersionForUserPackageTypeNpm:
		*s = PackagesRestorePackageVersionForUserPackageTypeNpm
		return nil
	case PackagesRestorePackageVersionForUserPackageTypeMaven:
		*s = PackagesRestorePackageVersionForUserPackageTypeMaven
		return nil
	case PackagesRestorePackageVersionForUserPackageTypeRubygems:
		*s = PackagesRestorePackageVersionForUserPackageTypeRubygems
		return nil
	case PackagesRestorePackageVersionForUserPackageTypeDocker:
		*s = PackagesRestorePackageVersionForUserPackageTypeDocker
		return nil
	case PackagesRestorePackageVersionForUserPackageTypeNuget:
		*s = PackagesRestorePackageVersionForUserPackageTypeNuget
		return nil
	case PackagesRestorePackageVersionForUserPackageTypeContainer:
		*s = PackagesRestorePackageVersionForUserPackageTypeContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PackagesRestorePackageVersionForUserUnauthorized BasicError

func (*PackagesRestorePackageVersionForUserUnauthorized) packagesRestorePackageVersionForUserRes() {}

// The configuration for GitHub Pages for a repository.
// Ref: #/components/schemas/page
type Page struct {
	// The API address for accessing this Page resource.
	URL url.URL `json:"url"`
	// The status of the most recent build of the Page.
	Status NilPageStatus `json:"status"`
	// The Pages site's custom domain.
	Cname NilString `json:"cname"`
	// The state if the domain is protected.
	ProtectedDomainState OptNilPageProtectedDomainState `json:"protected_domain_state"`
	// The timestamp when a pending domain becomes unverified.
	PendingDomainUnverifiedAt OptNilDateTime `json:"pending_domain_unverified_at"`
	// Whether the Page has a custom 404 page.
	Custom404 bool `json:"custom_404"`
	// The web address the Page can be accessed from.
	HTMLURL OptURI             `json:"html_url"`
	Source  OptPagesSourceHash `json:"source"`
	// Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to
	// anyone on the internet. If set to `false`, the site will only be accessible to users who have at
	// least `read` access to the repository that published the site.
	Public           bool                     `json:"public"`
	HTTPSCertificate OptPagesHTTPSCertificate `json:"https_certificate"`
	// Whether https is enabled on the domain.
	HTTPSEnforced OptBool `json:"https_enforced"`
}

// GetURL returns the value of URL.
func (s *Page) GetURL() url.URL {
	return s.URL
}

// GetStatus returns the value of Status.
func (s *Page) GetStatus() NilPageStatus {
	return s.Status
}

// GetCname returns the value of Cname.
func (s *Page) GetCname() NilString {
	return s.Cname
}

// GetProtectedDomainState returns the value of ProtectedDomainState.
func (s *Page) GetProtectedDomainState() OptNilPageProtectedDomainState {
	return s.ProtectedDomainState
}

// GetPendingDomainUnverifiedAt returns the value of PendingDomainUnverifiedAt.
func (s *Page) GetPendingDomainUnverifiedAt() OptNilDateTime {
	return s.PendingDomainUnverifiedAt
}

// GetCustom404 returns the value of Custom404.
func (s *Page) GetCustom404() bool {
	return s.Custom404
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Page) GetHTMLURL() OptURI {
	return s.HTMLURL
}

// GetSource returns the value of Source.
func (s *Page) GetSource() OptPagesSourceHash {
	return s.Source
}

// GetPublic returns the value of Public.
func (s *Page) GetPublic() bool {
	return s.Public
}

// GetHTTPSCertificate returns the value of HTTPSCertificate.
func (s *Page) GetHTTPSCertificate() OptPagesHTTPSCertificate {
	return s.HTTPSCertificate
}

// GetHTTPSEnforced returns the value of HTTPSEnforced.
func (s *Page) GetHTTPSEnforced() OptBool {
	return s.HTTPSEnforced
}

// SetURL sets the value of URL.
func (s *Page) SetURL(val url.URL) {
	s.URL = val
}

// SetStatus sets the value of Status.
func (s *Page) SetStatus(val NilPageStatus) {
	s.Status = val
}

// SetCname sets the value of Cname.
func (s *Page) SetCname(val NilString) {
	s.Cname = val
}

// SetProtectedDomainState sets the value of ProtectedDomainState.
func (s *Page) SetProtectedDomainState(val OptNilPageProtectedDomainState) {
	s.ProtectedDomainState = val
}

// SetPendingDomainUnverifiedAt sets the value of PendingDomainUnverifiedAt.
func (s *Page) SetPendingDomainUnverifiedAt(val OptNilDateTime) {
	s.PendingDomainUnverifiedAt = val
}

// SetCustom404 sets the value of Custom404.
func (s *Page) SetCustom404(val bool) {
	s.Custom404 = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Page) SetHTMLURL(val OptURI) {
	s.HTMLURL = val
}

// SetSource sets the value of Source.
func (s *Page) SetSource(val OptPagesSourceHash) {
	s.Source = val
}

// SetPublic sets the value of Public.
func (s *Page) SetPublic(val bool) {
	s.Public = val
}

// SetHTTPSCertificate sets the value of HTTPSCertificate.
func (s *Page) SetHTTPSCertificate(val OptPagesHTTPSCertificate) {
	s.HTTPSCertificate = val
}

// SetHTTPSEnforced sets the value of HTTPSEnforced.
func (s *Page) SetHTTPSEnforced(val OptBool) {
	s.HTTPSEnforced = val
}

func (*Page) reposCreatePagesSiteRes() {}
func (*Page) reposGetPagesRes()        {}

// Page Build.
// Ref: #/components/schemas/page-build
type PageBuild struct {
	URL       url.URL               `json:"url"`
	Status    string                `json:"status"`
	Error     PageBuildError        `json:"error"`
	Pusher    NilNullableSimpleUser `json:"pusher"`
	Commit    string                `json:"commit"`
	Duration  int                   `json:"duration"`
	CreatedAt time.Time             `json:"created_at"`
	UpdatedAt time.Time             `json:"updated_at"`
}

// GetURL returns the value of URL.
func (s *PageBuild) GetURL() url.URL {
	return s.URL
}

// GetStatus returns the value of Status.
func (s *PageBuild) GetStatus() string {
	return s.Status
}

// GetError returns the value of Error.
func (s *PageBuild) GetError() PageBuildError {
	return s.Error
}

// GetPusher returns the value of Pusher.
func (s *PageBuild) GetPusher() NilNullableSimpleUser {
	return s.Pusher
}

// GetCommit returns the value of Commit.
func (s *PageBuild) GetCommit() string {
	return s.Commit
}

// GetDuration returns the value of Duration.
func (s *PageBuild) GetDuration() int {
	return s.Duration
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PageBuild) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PageBuild) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetURL sets the value of URL.
func (s *PageBuild) SetURL(val url.URL) {
	s.URL = val
}

// SetStatus sets the value of Status.
func (s *PageBuild) SetStatus(val string) {
	s.Status = val
}

// SetError sets the value of Error.
func (s *PageBuild) SetError(val PageBuildError) {
	s.Error = val
}

// SetPusher sets the value of Pusher.
func (s *PageBuild) SetPusher(val NilNullableSimpleUser) {
	s.Pusher = val
}

// SetCommit sets the value of Commit.
func (s *PageBuild) SetCommit(val string) {
	s.Commit = val
}

// SetDuration sets the value of Duration.
func (s *PageBuild) SetDuration(val int) {
	s.Duration = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PageBuild) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PageBuild) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type PageBuildError struct {
	Message NilString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *PageBuildError) GetMessage() NilString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *PageBuildError) SetMessage(val NilString) {
	s.Message = val
}

// Page Build Status.
// Ref: #/components/schemas/page-build-status
type PageBuildStatus struct {
	URL    url.URL `json:"url"`
	Status string  `json:"status"`
}

// GetURL returns the value of URL.
func (s *PageBuildStatus) GetURL() url.URL {
	return s.URL
}

// GetStatus returns the value of Status.
func (s *PageBuildStatus) GetStatus() string {
	return s.Status
}

// SetURL sets the value of URL.
func (s *PageBuildStatus) SetURL(val url.URL) {
	s.URL = val
}

// SetStatus sets the value of Status.
func (s *PageBuildStatus) SetStatus(val string) {
	s.Status = val
}

// The state if the domain is protected.
type PageProtectedDomainState string

const (
	PageProtectedDomainStatePending    PageProtectedDomainState = "pending"
	PageProtectedDomainStateVerified   PageProtectedDomainState = "verified"
	PageProtectedDomainStateUnverified PageProtectedDomainState = "unverified"
)

// MarshalText implements encoding.TextMarshaler.
func (s PageProtectedDomainState) MarshalText() ([]byte, error) {
	switch s {
	case PageProtectedDomainStatePending:
		return []byte(s), nil
	case PageProtectedDomainStateVerified:
		return []byte(s), nil
	case PageProtectedDomainStateUnverified:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PageProtectedDomainState) UnmarshalText(data []byte) error {
	switch PageProtectedDomainState(data) {
	case PageProtectedDomainStatePending:
		*s = PageProtectedDomainStatePending
		return nil
	case PageProtectedDomainStateVerified:
		*s = PageProtectedDomainStateVerified
		return nil
	case PageProtectedDomainStateUnverified:
		*s = PageProtectedDomainStateUnverified
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the most recent build of the Page.
type PageStatus string

const (
	PageStatusBuilt    PageStatus = "built"
	PageStatusBuilding PageStatus = "building"
	PageStatusErrored  PageStatus = "errored"
)

// MarshalText implements encoding.TextMarshaler.
func (s PageStatus) MarshalText() ([]byte, error) {
	switch s {
	case PageStatusBuilt:
		return []byte(s), nil
	case PageStatusBuilding:
		return []byte(s), nil
	case PageStatusErrored:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PageStatus) UnmarshalText(data []byte) error {
	switch PageStatus(data) {
	case PageStatusBuilt:
		*s = PageStatusBuilt
		return nil
	case PageStatusBuilding:
		*s = PageStatusBuilding
		return nil
	case PageStatusErrored:
		*s = PageStatusErrored
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/pages-https-certificate
type PagesHTTPSCertificate struct {
	State       PagesHTTPSCertificateState `json:"state"`
	Description string                     `json:"description"`
	// Array of the domain set and its alternate name (if it is configured).
	Domains   []jx.Raw `json:"domains"`
	ExpiresAt OptDate  `json:"expires_at"`
}

// GetState returns the value of State.
func (s *PagesHTTPSCertificate) GetState() PagesHTTPSCertificateState {
	return s.State
}

// GetDescription returns the value of Description.
func (s *PagesHTTPSCertificate) GetDescription() string {
	return s.Description
}

// GetDomains returns the value of Domains.
func (s *PagesHTTPSCertificate) GetDomains() []jx.Raw {
	return s.Domains
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *PagesHTTPSCertificate) GetExpiresAt() OptDate {
	return s.ExpiresAt
}

// SetState sets the value of State.
func (s *PagesHTTPSCertificate) SetState(val PagesHTTPSCertificateState) {
	s.State = val
}

// SetDescription sets the value of Description.
func (s *PagesHTTPSCertificate) SetDescription(val string) {
	s.Description = val
}

// SetDomains sets the value of Domains.
func (s *PagesHTTPSCertificate) SetDomains(val []jx.Raw) {
	s.Domains = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *PagesHTTPSCertificate) SetExpiresAt(val OptDate) {
	s.ExpiresAt = val
}

type PagesHTTPSCertificateState string

const (
	PagesHTTPSCertificateStateNew                  PagesHTTPSCertificateState = "new"
	PagesHTTPSCertificateStateAuthorizationCreated PagesHTTPSCertificateState = "authorization_created"
	PagesHTTPSCertificateStateAuthorizationPending PagesHTTPSCertificateState = "authorization_pending"
	PagesHTTPSCertificateStateAuthorized           PagesHTTPSCertificateState = "authorized"
	PagesHTTPSCertificateStateAuthorizationRevoked PagesHTTPSCertificateState = "authorization_revoked"
	PagesHTTPSCertificateStateIssued               PagesHTTPSCertificateState = "issued"
	PagesHTTPSCertificateStateUploaded             PagesHTTPSCertificateState = "uploaded"
	PagesHTTPSCertificateStateApproved             PagesHTTPSCertificateState = "approved"
	PagesHTTPSCertificateStateErrored              PagesHTTPSCertificateState = "errored"
	PagesHTTPSCertificateStateBadAuthz             PagesHTTPSCertificateState = "bad_authz"
	PagesHTTPSCertificateStateDestroyPending       PagesHTTPSCertificateState = "destroy_pending"
	PagesHTTPSCertificateStateDNSChanged           PagesHTTPSCertificateState = "dns_changed"
)

// MarshalText implements encoding.TextMarshaler.
func (s PagesHTTPSCertificateState) MarshalText() ([]byte, error) {
	switch s {
	case PagesHTTPSCertificateStateNew:
		return []byte(s), nil
	case PagesHTTPSCertificateStateAuthorizationCreated:
		return []byte(s), nil
	case PagesHTTPSCertificateStateAuthorizationPending:
		return []byte(s), nil
	case PagesHTTPSCertificateStateAuthorized:
		return []byte(s), nil
	case PagesHTTPSCertificateStateAuthorizationRevoked:
		return []byte(s), nil
	case PagesHTTPSCertificateStateIssued:
		return []byte(s), nil
	case PagesHTTPSCertificateStateUploaded:
		return []byte(s), nil
	case PagesHTTPSCertificateStateApproved:
		return []byte(s), nil
	case PagesHTTPSCertificateStateErrored:
		return []byte(s), nil
	case PagesHTTPSCertificateStateBadAuthz:
		return []byte(s), nil
	case PagesHTTPSCertificateStateDestroyPending:
		return []byte(s), nil
	case PagesHTTPSCertificateStateDNSChanged:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PagesHTTPSCertificateState) UnmarshalText(data []byte) error {
	switch PagesHTTPSCertificateState(data) {
	case PagesHTTPSCertificateStateNew:
		*s = PagesHTTPSCertificateStateNew
		return nil
	case PagesHTTPSCertificateStateAuthorizationCreated:
		*s = PagesHTTPSCertificateStateAuthorizationCreated
		return nil
	case PagesHTTPSCertificateStateAuthorizationPending:
		*s = PagesHTTPSCertificateStateAuthorizationPending
		return nil
	case PagesHTTPSCertificateStateAuthorized:
		*s = PagesHTTPSCertificateStateAuthorized
		return nil
	case PagesHTTPSCertificateStateAuthorizationRevoked:
		*s = PagesHTTPSCertificateStateAuthorizationRevoked
		return nil
	case PagesHTTPSCertificateStateIssued:
		*s = PagesHTTPSCertificateStateIssued
		return nil
	case PagesHTTPSCertificateStateUploaded:
		*s = PagesHTTPSCertificateStateUploaded
		return nil
	case PagesHTTPSCertificateStateApproved:
		*s = PagesHTTPSCertificateStateApproved
		return nil
	case PagesHTTPSCertificateStateErrored:
		*s = PagesHTTPSCertificateStateErrored
		return nil
	case PagesHTTPSCertificateStateBadAuthz:
		*s = PagesHTTPSCertificateStateBadAuthz
		return nil
	case PagesHTTPSCertificateStateDestroyPending:
		*s = PagesHTTPSCertificateStateDestroyPending
		return nil
	case PagesHTTPSCertificateStateDNSChanged:
		*s = PagesHTTPSCertificateStateDNSChanged
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Pages Health Check Status.
// Ref: #/components/schemas/pages-health-check
type PagesHealthCheck struct {
	Domain    OptPagesHealthCheckDomain       `json:"domain"`
	AltDomain OptNilPagesHealthCheckAltDomain `json:"alt_domain"`
}

// GetDomain returns the value of Domain.
func (s *PagesHealthCheck) GetDomain() OptPagesHealthCheckDomain {
	return s.Domain
}

// GetAltDomain returns the value of AltDomain.
func (s *PagesHealthCheck) GetAltDomain() OptNilPagesHealthCheckAltDomain {
	return s.AltDomain
}

// SetDomain sets the value of Domain.
func (s *PagesHealthCheck) SetDomain(val OptPagesHealthCheckDomain) {
	s.Domain = val
}

// SetAltDomain sets the value of AltDomain.
func (s *PagesHealthCheck) SetAltDomain(val OptNilPagesHealthCheckAltDomain) {
	s.AltDomain = val
}

func (*PagesHealthCheck) reposGetPagesHealthCheckRes() {}

type PagesHealthCheckAltDomain struct {
	Host                          OptString    `json:"host"`
	URI                           OptString    `json:"uri"`
	Nameservers                   OptString    `json:"nameservers"`
	DNSResolves                   OptBool      `json:"dns_resolves"`
	IsProxied                     OptNilBool   `json:"is_proxied"`
	IsCloudflareIP                OptNilBool   `json:"is_cloudflare_ip"`
	IsFastlyIP                    OptNilBool   `json:"is_fastly_ip"`
	IsOldIPAddress                OptNilBool   `json:"is_old_ip_address"`
	IsARecord                     OptNilBool   `json:"is_a_record"`
	HasCnameRecord                OptNilBool   `json:"has_cname_record"`
	HasMxRecordsPresent           OptNilBool   `json:"has_mx_records_present"`
	IsValidDomain                 OptBool      `json:"is_valid_domain"`
	IsApexDomain                  OptBool      `json:"is_apex_domain"`
	ShouldBeARecord               OptNilBool   `json:"should_be_a_record"`
	IsCnameToGithubUserDomain     OptNilBool   `json:"is_cname_to_github_user_domain"`
	IsCnameToPagesDotGithubDotCom OptNilBool   `json:"is_cname_to_pages_dot_github_dot_com"`
	IsCnameToFastly               OptNilBool   `json:"is_cname_to_fastly"`
	IsPointedToGithubPagesIP      OptNilBool   `json:"is_pointed_to_github_pages_ip"`
	IsNonGithubPagesIPPresent     OptNilBool   `json:"is_non_github_pages_ip_present"`
	IsPagesDomain                 OptBool      `json:"is_pages_domain"`
	IsServedByPages               OptNilBool   `json:"is_served_by_pages"`
	IsValid                       OptBool      `json:"is_valid"`
	Reason                        OptNilString `json:"reason"`
	RespondsToHTTPS               OptBool      `json:"responds_to_https"`
	EnforcesHTTPS                 OptBool      `json:"enforces_https"`
	HTTPSError                    OptNilString `json:"https_error"`
	IsHTTPSEligible               OptNilBool   `json:"is_https_eligible"`
	CaaError                      OptNilString `json:"caa_error"`
}

// GetHost returns the value of Host.
func (s *PagesHealthCheckAltDomain) GetHost() OptString {
	return s.Host
}

// GetURI returns the value of URI.
func (s *PagesHealthCheckAltDomain) GetURI() OptString {
	return s.URI
}

// GetNameservers returns the value of Nameservers.
func (s *PagesHealthCheckAltDomain) GetNameservers() OptString {
	return s.Nameservers
}

// GetDNSResolves returns the value of DNSResolves.
func (s *PagesHealthCheckAltDomain) GetDNSResolves() OptBool {
	return s.DNSResolves
}

// GetIsProxied returns the value of IsProxied.
func (s *PagesHealthCheckAltDomain) GetIsProxied() OptNilBool {
	return s.IsProxied
}

// GetIsCloudflareIP returns the value of IsCloudflareIP.
func (s *PagesHealthCheckAltDomain) GetIsCloudflareIP() OptNilBool {
	return s.IsCloudflareIP
}

// GetIsFastlyIP returns the value of IsFastlyIP.
func (s *PagesHealthCheckAltDomain) GetIsFastlyIP() OptNilBool {
	return s.IsFastlyIP
}

// GetIsOldIPAddress returns the value of IsOldIPAddress.
func (s *PagesHealthCheckAltDomain) GetIsOldIPAddress() OptNilBool {
	return s.IsOldIPAddress
}

// GetIsARecord returns the value of IsARecord.
func (s *PagesHealthCheckAltDomain) GetIsARecord() OptNilBool {
	return s.IsARecord
}

// GetHasCnameRecord returns the value of HasCnameRecord.
func (s *PagesHealthCheckAltDomain) GetHasCnameRecord() OptNilBool {
	return s.HasCnameRecord
}

// GetHasMxRecordsPresent returns the value of HasMxRecordsPresent.
func (s *PagesHealthCheckAltDomain) GetHasMxRecordsPresent() OptNilBool {
	return s.HasMxRecordsPresent
}

// GetIsValidDomain returns the value of IsValidDomain.
func (s *PagesHealthCheckAltDomain) GetIsValidDomain() OptBool {
	return s.IsValidDomain
}

// GetIsApexDomain returns the value of IsApexDomain.
func (s *PagesHealthCheckAltDomain) GetIsApexDomain() OptBool {
	return s.IsApexDomain
}

// GetShouldBeARecord returns the value of ShouldBeARecord.
func (s *PagesHealthCheckAltDomain) GetShouldBeARecord() OptNilBool {
	return s.ShouldBeARecord
}

// GetIsCnameToGithubUserDomain returns the value of IsCnameToGithubUserDomain.
func (s *PagesHealthCheckAltDomain) GetIsCnameToGithubUserDomain() OptNilBool {
	return s.IsCnameToGithubUserDomain
}

// GetIsCnameToPagesDotGithubDotCom returns the value of IsCnameToPagesDotGithubDotCom.
func (s *PagesHealthCheckAltDomain) GetIsCnameToPagesDotGithubDotCom() OptNilBool {
	return s.IsCnameToPagesDotGithubDotCom
}

// GetIsCnameToFastly returns the value of IsCnameToFastly.
func (s *PagesHealthCheckAltDomain) GetIsCnameToFastly() OptNilBool {
	return s.IsCnameToFastly
}

// GetIsPointedToGithubPagesIP returns the value of IsPointedToGithubPagesIP.
func (s *PagesHealthCheckAltDomain) GetIsPointedToGithubPagesIP() OptNilBool {
	return s.IsPointedToGithubPagesIP
}

// GetIsNonGithubPagesIPPresent returns the value of IsNonGithubPagesIPPresent.
func (s *PagesHealthCheckAltDomain) GetIsNonGithubPagesIPPresent() OptNilBool {
	return s.IsNonGithubPagesIPPresent
}

// GetIsPagesDomain returns the value of IsPagesDomain.
func (s *PagesHealthCheckAltDomain) GetIsPagesDomain() OptBool {
	return s.IsPagesDomain
}

// GetIsServedByPages returns the value of IsServedByPages.
func (s *PagesHealthCheckAltDomain) GetIsServedByPages() OptNilBool {
	return s.IsServedByPages
}

// GetIsValid returns the value of IsValid.
func (s *PagesHealthCheckAltDomain) GetIsValid() OptBool {
	return s.IsValid
}

// GetReason returns the value of Reason.
func (s *PagesHealthCheckAltDomain) GetReason() OptNilString {
	return s.Reason
}

// GetRespondsToHTTPS returns the value of RespondsToHTTPS.
func (s *PagesHealthCheckAltDomain) GetRespondsToHTTPS() OptBool {
	return s.RespondsToHTTPS
}

// GetEnforcesHTTPS returns the value of EnforcesHTTPS.
func (s *PagesHealthCheckAltDomain) GetEnforcesHTTPS() OptBool {
	return s.EnforcesHTTPS
}

// GetHTTPSError returns the value of HTTPSError.
func (s *PagesHealthCheckAltDomain) GetHTTPSError() OptNilString {
	return s.HTTPSError
}

// GetIsHTTPSEligible returns the value of IsHTTPSEligible.
func (s *PagesHealthCheckAltDomain) GetIsHTTPSEligible() OptNilBool {
	return s.IsHTTPSEligible
}

// GetCaaError returns the value of CaaError.
func (s *PagesHealthCheckAltDomain) GetCaaError() OptNilString {
	return s.CaaError
}

// SetHost sets the value of Host.
func (s *PagesHealthCheckAltDomain) SetHost(val OptString) {
	s.Host = val
}

// SetURI sets the value of URI.
func (s *PagesHealthCheckAltDomain) SetURI(val OptString) {
	s.URI = val
}

// SetNameservers sets the value of Nameservers.
func (s *PagesHealthCheckAltDomain) SetNameservers(val OptString) {
	s.Nameservers = val
}

// SetDNSResolves sets the value of DNSResolves.
func (s *PagesHealthCheckAltDomain) SetDNSResolves(val OptBool) {
	s.DNSResolves = val
}

// SetIsProxied sets the value of IsProxied.
func (s *PagesHealthCheckAltDomain) SetIsProxied(val OptNilBool) {
	s.IsProxied = val
}

// SetIsCloudflareIP sets the value of IsCloudflareIP.
func (s *PagesHealthCheckAltDomain) SetIsCloudflareIP(val OptNilBool) {
	s.IsCloudflareIP = val
}

// SetIsFastlyIP sets the value of IsFastlyIP.
func (s *PagesHealthCheckAltDomain) SetIsFastlyIP(val OptNilBool) {
	s.IsFastlyIP = val
}

// SetIsOldIPAddress sets the value of IsOldIPAddress.
func (s *PagesHealthCheckAltDomain) SetIsOldIPAddress(val OptNilBool) {
	s.IsOldIPAddress = val
}

// SetIsARecord sets the value of IsARecord.
func (s *PagesHealthCheckAltDomain) SetIsARecord(val OptNilBool) {
	s.IsARecord = val
}

// SetHasCnameRecord sets the value of HasCnameRecord.
func (s *PagesHealthCheckAltDomain) SetHasCnameRecord(val OptNilBool) {
	s.HasCnameRecord = val
}

// SetHasMxRecordsPresent sets the value of HasMxRecordsPresent.
func (s *PagesHealthCheckAltDomain) SetHasMxRecordsPresent(val OptNilBool) {
	s.HasMxRecordsPresent = val
}

// SetIsValidDomain sets the value of IsValidDomain.
func (s *PagesHealthCheckAltDomain) SetIsValidDomain(val OptBool) {
	s.IsValidDomain = val
}

// SetIsApexDomain sets the value of IsApexDomain.
func (s *PagesHealthCheckAltDomain) SetIsApexDomain(val OptBool) {
	s.IsApexDomain = val
}

// SetShouldBeARecord sets the value of ShouldBeARecord.
func (s *PagesHealthCheckAltDomain) SetShouldBeARecord(val OptNilBool) {
	s.ShouldBeARecord = val
}

// SetIsCnameToGithubUserDomain sets the value of IsCnameToGithubUserDomain.
func (s *PagesHealthCheckAltDomain) SetIsCnameToGithubUserDomain(val OptNilBool) {
	s.IsCnameToGithubUserDomain = val
}

// SetIsCnameToPagesDotGithubDotCom sets the value of IsCnameToPagesDotGithubDotCom.
func (s *PagesHealthCheckAltDomain) SetIsCnameToPagesDotGithubDotCom(val OptNilBool) {
	s.IsCnameToPagesDotGithubDotCom = val
}

// SetIsCnameToFastly sets the value of IsCnameToFastly.
func (s *PagesHealthCheckAltDomain) SetIsCnameToFastly(val OptNilBool) {
	s.IsCnameToFastly = val
}

// SetIsPointedToGithubPagesIP sets the value of IsPointedToGithubPagesIP.
func (s *PagesHealthCheckAltDomain) SetIsPointedToGithubPagesIP(val OptNilBool) {
	s.IsPointedToGithubPagesIP = val
}

// SetIsNonGithubPagesIPPresent sets the value of IsNonGithubPagesIPPresent.
func (s *PagesHealthCheckAltDomain) SetIsNonGithubPagesIPPresent(val OptNilBool) {
	s.IsNonGithubPagesIPPresent = val
}

// SetIsPagesDomain sets the value of IsPagesDomain.
func (s *PagesHealthCheckAltDomain) SetIsPagesDomain(val OptBool) {
	s.IsPagesDomain = val
}

// SetIsServedByPages sets the value of IsServedByPages.
func (s *PagesHealthCheckAltDomain) SetIsServedByPages(val OptNilBool) {
	s.IsServedByPages = val
}

// SetIsValid sets the value of IsValid.
func (s *PagesHealthCheckAltDomain) SetIsValid(val OptBool) {
	s.IsValid = val
}

// SetReason sets the value of Reason.
func (s *PagesHealthCheckAltDomain) SetReason(val OptNilString) {
	s.Reason = val
}

// SetRespondsToHTTPS sets the value of RespondsToHTTPS.
func (s *PagesHealthCheckAltDomain) SetRespondsToHTTPS(val OptBool) {
	s.RespondsToHTTPS = val
}

// SetEnforcesHTTPS sets the value of EnforcesHTTPS.
func (s *PagesHealthCheckAltDomain) SetEnforcesHTTPS(val OptBool) {
	s.EnforcesHTTPS = val
}

// SetHTTPSError sets the value of HTTPSError.
func (s *PagesHealthCheckAltDomain) SetHTTPSError(val OptNilString) {
	s.HTTPSError = val
}

// SetIsHTTPSEligible sets the value of IsHTTPSEligible.
func (s *PagesHealthCheckAltDomain) SetIsHTTPSEligible(val OptNilBool) {
	s.IsHTTPSEligible = val
}

// SetCaaError sets the value of CaaError.
func (s *PagesHealthCheckAltDomain) SetCaaError(val OptNilString) {
	s.CaaError = val
}

type PagesHealthCheckDomain struct {
	Host                          OptString    `json:"host"`
	URI                           OptString    `json:"uri"`
	Nameservers                   OptString    `json:"nameservers"`
	DNSResolves                   OptBool      `json:"dns_resolves"`
	IsProxied                     OptNilBool   `json:"is_proxied"`
	IsCloudflareIP                OptNilBool   `json:"is_cloudflare_ip"`
	IsFastlyIP                    OptNilBool   `json:"is_fastly_ip"`
	IsOldIPAddress                OptNilBool   `json:"is_old_ip_address"`
	IsARecord                     OptNilBool   `json:"is_a_record"`
	HasCnameRecord                OptNilBool   `json:"has_cname_record"`
	HasMxRecordsPresent           OptNilBool   `json:"has_mx_records_present"`
	IsValidDomain                 OptBool      `json:"is_valid_domain"`
	IsApexDomain                  OptBool      `json:"is_apex_domain"`
	ShouldBeARecord               OptNilBool   `json:"should_be_a_record"`
	IsCnameToGithubUserDomain     OptNilBool   `json:"is_cname_to_github_user_domain"`
	IsCnameToPagesDotGithubDotCom OptNilBool   `json:"is_cname_to_pages_dot_github_dot_com"`
	IsCnameToFastly               OptNilBool   `json:"is_cname_to_fastly"`
	IsPointedToGithubPagesIP      OptNilBool   `json:"is_pointed_to_github_pages_ip"`
	IsNonGithubPagesIPPresent     OptNilBool   `json:"is_non_github_pages_ip_present"`
	IsPagesDomain                 OptBool      `json:"is_pages_domain"`
	IsServedByPages               OptNilBool   `json:"is_served_by_pages"`
	IsValid                       OptBool      `json:"is_valid"`
	Reason                        OptNilString `json:"reason"`
	RespondsToHTTPS               OptBool      `json:"responds_to_https"`
	EnforcesHTTPS                 OptBool      `json:"enforces_https"`
	HTTPSError                    OptNilString `json:"https_error"`
	IsHTTPSEligible               OptNilBool   `json:"is_https_eligible"`
	CaaError                      OptNilString `json:"caa_error"`
}

// GetHost returns the value of Host.
func (s *PagesHealthCheckDomain) GetHost() OptString {
	return s.Host
}

// GetURI returns the value of URI.
func (s *PagesHealthCheckDomain) GetURI() OptString {
	return s.URI
}

// GetNameservers returns the value of Nameservers.
func (s *PagesHealthCheckDomain) GetNameservers() OptString {
	return s.Nameservers
}

// GetDNSResolves returns the value of DNSResolves.
func (s *PagesHealthCheckDomain) GetDNSResolves() OptBool {
	return s.DNSResolves
}

// GetIsProxied returns the value of IsProxied.
func (s *PagesHealthCheckDomain) GetIsProxied() OptNilBool {
	return s.IsProxied
}

// GetIsCloudflareIP returns the value of IsCloudflareIP.
func (s *PagesHealthCheckDomain) GetIsCloudflareIP() OptNilBool {
	return s.IsCloudflareIP
}

// GetIsFastlyIP returns the value of IsFastlyIP.
func (s *PagesHealthCheckDomain) GetIsFastlyIP() OptNilBool {
	return s.IsFastlyIP
}

// GetIsOldIPAddress returns the value of IsOldIPAddress.
func (s *PagesHealthCheckDomain) GetIsOldIPAddress() OptNilBool {
	return s.IsOldIPAddress
}

// GetIsARecord returns the value of IsARecord.
func (s *PagesHealthCheckDomain) GetIsARecord() OptNilBool {
	return s.IsARecord
}

// GetHasCnameRecord returns the value of HasCnameRecord.
func (s *PagesHealthCheckDomain) GetHasCnameRecord() OptNilBool {
	return s.HasCnameRecord
}

// GetHasMxRecordsPresent returns the value of HasMxRecordsPresent.
func (s *PagesHealthCheckDomain) GetHasMxRecordsPresent() OptNilBool {
	return s.HasMxRecordsPresent
}

// GetIsValidDomain returns the value of IsValidDomain.
func (s *PagesHealthCheckDomain) GetIsValidDomain() OptBool {
	return s.IsValidDomain
}

// GetIsApexDomain returns the value of IsApexDomain.
func (s *PagesHealthCheckDomain) GetIsApexDomain() OptBool {
	return s.IsApexDomain
}

// GetShouldBeARecord returns the value of ShouldBeARecord.
func (s *PagesHealthCheckDomain) GetShouldBeARecord() OptNilBool {
	return s.ShouldBeARecord
}

// GetIsCnameToGithubUserDomain returns the value of IsCnameToGithubUserDomain.
func (s *PagesHealthCheckDomain) GetIsCnameToGithubUserDomain() OptNilBool {
	return s.IsCnameToGithubUserDomain
}

// GetIsCnameToPagesDotGithubDotCom returns the value of IsCnameToPagesDotGithubDotCom.
func (s *PagesHealthCheckDomain) GetIsCnameToPagesDotGithubDotCom() OptNilBool {
	return s.IsCnameToPagesDotGithubDotCom
}

// GetIsCnameToFastly returns the value of IsCnameToFastly.
func (s *PagesHealthCheckDomain) GetIsCnameToFastly() OptNilBool {
	return s.IsCnameToFastly
}

// GetIsPointedToGithubPagesIP returns the value of IsPointedToGithubPagesIP.
func (s *PagesHealthCheckDomain) GetIsPointedToGithubPagesIP() OptNilBool {
	return s.IsPointedToGithubPagesIP
}

// GetIsNonGithubPagesIPPresent returns the value of IsNonGithubPagesIPPresent.
func (s *PagesHealthCheckDomain) GetIsNonGithubPagesIPPresent() OptNilBool {
	return s.IsNonGithubPagesIPPresent
}

// GetIsPagesDomain returns the value of IsPagesDomain.
func (s *PagesHealthCheckDomain) GetIsPagesDomain() OptBool {
	return s.IsPagesDomain
}

// GetIsServedByPages returns the value of IsServedByPages.
func (s *PagesHealthCheckDomain) GetIsServedByPages() OptNilBool {
	return s.IsServedByPages
}

// GetIsValid returns the value of IsValid.
func (s *PagesHealthCheckDomain) GetIsValid() OptBool {
	return s.IsValid
}

// GetReason returns the value of Reason.
func (s *PagesHealthCheckDomain) GetReason() OptNilString {
	return s.Reason
}

// GetRespondsToHTTPS returns the value of RespondsToHTTPS.
func (s *PagesHealthCheckDomain) GetRespondsToHTTPS() OptBool {
	return s.RespondsToHTTPS
}

// GetEnforcesHTTPS returns the value of EnforcesHTTPS.
func (s *PagesHealthCheckDomain) GetEnforcesHTTPS() OptBool {
	return s.EnforcesHTTPS
}

// GetHTTPSError returns the value of HTTPSError.
func (s *PagesHealthCheckDomain) GetHTTPSError() OptNilString {
	return s.HTTPSError
}

// GetIsHTTPSEligible returns the value of IsHTTPSEligible.
func (s *PagesHealthCheckDomain) GetIsHTTPSEligible() OptNilBool {
	return s.IsHTTPSEligible
}

// GetCaaError returns the value of CaaError.
func (s *PagesHealthCheckDomain) GetCaaError() OptNilString {
	return s.CaaError
}

// SetHost sets the value of Host.
func (s *PagesHealthCheckDomain) SetHost(val OptString) {
	s.Host = val
}

// SetURI sets the value of URI.
func (s *PagesHealthCheckDomain) SetURI(val OptString) {
	s.URI = val
}

// SetNameservers sets the value of Nameservers.
func (s *PagesHealthCheckDomain) SetNameservers(val OptString) {
	s.Nameservers = val
}

// SetDNSResolves sets the value of DNSResolves.
func (s *PagesHealthCheckDomain) SetDNSResolves(val OptBool) {
	s.DNSResolves = val
}

// SetIsProxied sets the value of IsProxied.
func (s *PagesHealthCheckDomain) SetIsProxied(val OptNilBool) {
	s.IsProxied = val
}

// SetIsCloudflareIP sets the value of IsCloudflareIP.
func (s *PagesHealthCheckDomain) SetIsCloudflareIP(val OptNilBool) {
	s.IsCloudflareIP = val
}

// SetIsFastlyIP sets the value of IsFastlyIP.
func (s *PagesHealthCheckDomain) SetIsFastlyIP(val OptNilBool) {
	s.IsFastlyIP = val
}

// SetIsOldIPAddress sets the value of IsOldIPAddress.
func (s *PagesHealthCheckDomain) SetIsOldIPAddress(val OptNilBool) {
	s.IsOldIPAddress = val
}

// SetIsARecord sets the value of IsARecord.
func (s *PagesHealthCheckDomain) SetIsARecord(val OptNilBool) {
	s.IsARecord = val
}

// SetHasCnameRecord sets the value of HasCnameRecord.
func (s *PagesHealthCheckDomain) SetHasCnameRecord(val OptNilBool) {
	s.HasCnameRecord = val
}

// SetHasMxRecordsPresent sets the value of HasMxRecordsPresent.
func (s *PagesHealthCheckDomain) SetHasMxRecordsPresent(val OptNilBool) {
	s.HasMxRecordsPresent = val
}

// SetIsValidDomain sets the value of IsValidDomain.
func (s *PagesHealthCheckDomain) SetIsValidDomain(val OptBool) {
	s.IsValidDomain = val
}

// SetIsApexDomain sets the value of IsApexDomain.
func (s *PagesHealthCheckDomain) SetIsApexDomain(val OptBool) {
	s.IsApexDomain = val
}

// SetShouldBeARecord sets the value of ShouldBeARecord.
func (s *PagesHealthCheckDomain) SetShouldBeARecord(val OptNilBool) {
	s.ShouldBeARecord = val
}

// SetIsCnameToGithubUserDomain sets the value of IsCnameToGithubUserDomain.
func (s *PagesHealthCheckDomain) SetIsCnameToGithubUserDomain(val OptNilBool) {
	s.IsCnameToGithubUserDomain = val
}

// SetIsCnameToPagesDotGithubDotCom sets the value of IsCnameToPagesDotGithubDotCom.
func (s *PagesHealthCheckDomain) SetIsCnameToPagesDotGithubDotCom(val OptNilBool) {
	s.IsCnameToPagesDotGithubDotCom = val
}

// SetIsCnameToFastly sets the value of IsCnameToFastly.
func (s *PagesHealthCheckDomain) SetIsCnameToFastly(val OptNilBool) {
	s.IsCnameToFastly = val
}

// SetIsPointedToGithubPagesIP sets the value of IsPointedToGithubPagesIP.
func (s *PagesHealthCheckDomain) SetIsPointedToGithubPagesIP(val OptNilBool) {
	s.IsPointedToGithubPagesIP = val
}

// SetIsNonGithubPagesIPPresent sets the value of IsNonGithubPagesIPPresent.
func (s *PagesHealthCheckDomain) SetIsNonGithubPagesIPPresent(val OptNilBool) {
	s.IsNonGithubPagesIPPresent = val
}

// SetIsPagesDomain sets the value of IsPagesDomain.
func (s *PagesHealthCheckDomain) SetIsPagesDomain(val OptBool) {
	s.IsPagesDomain = val
}

// SetIsServedByPages sets the value of IsServedByPages.
func (s *PagesHealthCheckDomain) SetIsServedByPages(val OptNilBool) {
	s.IsServedByPages = val
}

// SetIsValid sets the value of IsValid.
func (s *PagesHealthCheckDomain) SetIsValid(val OptBool) {
	s.IsValid = val
}

// SetReason sets the value of Reason.
func (s *PagesHealthCheckDomain) SetReason(val OptNilString) {
	s.Reason = val
}

// SetRespondsToHTTPS sets the value of RespondsToHTTPS.
func (s *PagesHealthCheckDomain) SetRespondsToHTTPS(val OptBool) {
	s.RespondsToHTTPS = val
}

// SetEnforcesHTTPS sets the value of EnforcesHTTPS.
func (s *PagesHealthCheckDomain) SetEnforcesHTTPS(val OptBool) {
	s.EnforcesHTTPS = val
}

// SetHTTPSError sets the value of HTTPSError.
func (s *PagesHealthCheckDomain) SetHTTPSError(val OptNilString) {
	s.HTTPSError = val
}

// SetIsHTTPSEligible sets the value of IsHTTPSEligible.
func (s *PagesHealthCheckDomain) SetIsHTTPSEligible(val OptNilBool) {
	s.IsHTTPSEligible = val
}

// SetCaaError sets the value of CaaError.
func (s *PagesHealthCheckDomain) SetCaaError(val OptNilString) {
	s.CaaError = val
}

// Ref: #/components/schemas/pages-source-hash
type PagesSourceHash struct {
	Branch string `json:"branch"`
	Path   string `json:"path"`
}

// GetBranch returns the value of Branch.
func (s *PagesSourceHash) GetBranch() string {
	return s.Branch
}

// GetPath returns the value of Path.
func (s *PagesSourceHash) GetPath() string {
	return s.Path
}

// SetBranch sets the value of Branch.
func (s *PagesSourceHash) SetBranch(val string) {
	s.Branch = val
}

// SetPath sets the value of Path.
func (s *PagesSourceHash) SetPath(val string) {
	s.Path = val
}

// Ref: #/components/schemas/participation-stats
type ParticipationStats struct {
	All   []int `json:"all"`
	Owner []int `json:"owner"`
}

// GetAll returns the value of All.
func (s *ParticipationStats) GetAll() []int {
	return s.All
}

// GetOwner returns the value of Owner.
func (s *ParticipationStats) GetOwner() []int {
	return s.Owner
}

// SetAll sets the value of All.
func (s *ParticipationStats) SetAll(val []int) {
	s.All = val
}

// SetOwner sets the value of Owner.
func (s *ParticipationStats) SetOwner(val []int) {
	s.Owner = val
}

func (*ParticipationStats) reposGetParticipationStatsRes() {}

// Porter Author.
// Ref: #/components/schemas/porter-author
type PorterAuthor struct {
	ID         int     `json:"id"`
	RemoteID   string  `json:"remote_id"`
	RemoteName string  `json:"remote_name"`
	Email      string  `json:"email"`
	Name       string  `json:"name"`
	URL        url.URL `json:"url"`
	ImportURL  url.URL `json:"import_url"`
}

// GetID returns the value of ID.
func (s *PorterAuthor) GetID() int {
	return s.ID
}

// GetRemoteID returns the value of RemoteID.
func (s *PorterAuthor) GetRemoteID() string {
	return s.RemoteID
}

// GetRemoteName returns the value of RemoteName.
func (s *PorterAuthor) GetRemoteName() string {
	return s.RemoteName
}

// GetEmail returns the value of Email.
func (s *PorterAuthor) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *PorterAuthor) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *PorterAuthor) GetURL() url.URL {
	return s.URL
}

// GetImportURL returns the value of ImportURL.
func (s *PorterAuthor) GetImportURL() url.URL {
	return s.ImportURL
}

// SetID sets the value of ID.
func (s *PorterAuthor) SetID(val int) {
	s.ID = val
}

// SetRemoteID sets the value of RemoteID.
func (s *PorterAuthor) SetRemoteID(val string) {
	s.RemoteID = val
}

// SetRemoteName sets the value of RemoteName.
func (s *PorterAuthor) SetRemoteName(val string) {
	s.RemoteName = val
}

// SetEmail sets the value of Email.
func (s *PorterAuthor) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *PorterAuthor) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *PorterAuthor) SetURL(val url.URL) {
	s.URL = val
}

// SetImportURL sets the value of ImportURL.
func (s *PorterAuthor) SetImportURL(val url.URL) {
	s.ImportURL = val
}

func (*PorterAuthor) migrationsMapCommitAuthorRes() {}

// Porter Large File.
// Ref: #/components/schemas/porter-large-file
type PorterLargeFile struct {
	RefName string `json:"ref_name"`
	Path    string `json:"path"`
	Oid     string `json:"oid"`
	Size    int    `json:"size"`
}

// GetRefName returns the value of RefName.
func (s *PorterLargeFile) GetRefName() string {
	return s.RefName
}

// GetPath returns the value of Path.
func (s *PorterLargeFile) GetPath() string {
	return s.Path
}

// GetOid returns the value of Oid.
func (s *PorterLargeFile) GetOid() string {
	return s.Oid
}

// GetSize returns the value of Size.
func (s *PorterLargeFile) GetSize() int {
	return s.Size
}

// SetRefName sets the value of RefName.
func (s *PorterLargeFile) SetRefName(val string) {
	s.RefName = val
}

// SetPath sets the value of Path.
func (s *PorterLargeFile) SetPath(val string) {
	s.Path = val
}

// SetOid sets the value of Oid.
func (s *PorterLargeFile) SetOid(val string) {
	s.Oid = val
}

// SetSize sets the value of Size.
func (s *PorterLargeFile) SetSize(val int) {
	s.Size = val
}

type PreviewHeaderMissing struct {
	Message          string `json:"message"`
	DocumentationURL string `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *PreviewHeaderMissing) GetMessage() string {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *PreviewHeaderMissing) GetDocumentationURL() string {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *PreviewHeaderMissing) SetMessage(val string) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *PreviewHeaderMissing) SetDocumentationURL(val string) {
	s.DocumentationURL = val
}

func (*PreviewHeaderMissing) appsCreateContentAttachmentRes()                {}
func (*PreviewHeaderMissing) appsCreateInstallationAccessTokenRes()          {}
func (*PreviewHeaderMissing) appsGetBySlugRes()                              {}
func (*PreviewHeaderMissing) orgsListBlockedUsersRes()                       {}
func (*PreviewHeaderMissing) projectsCreateForAuthenticatedUserRes()         {}
func (*PreviewHeaderMissing) reactionsCreateForCommitCommentRes()            {}
func (*PreviewHeaderMissing) reactionsCreateForIssueCommentRes()             {}
func (*PreviewHeaderMissing) reactionsCreateForIssueRes()                    {}
func (*PreviewHeaderMissing) reactionsCreateForPullRequestReviewCommentRes() {}
func (*PreviewHeaderMissing) reactionsCreateForReleaseRes()                  {}
func (*PreviewHeaderMissing) reactionsDeleteLegacyRes()                      {}
func (*PreviewHeaderMissing) reactionsListForCommitCommentRes()              {}
func (*PreviewHeaderMissing) reactionsListForIssueCommentRes()               {}
func (*PreviewHeaderMissing) reactionsListForIssueRes()                      {}
func (*PreviewHeaderMissing) reactionsListForPullRequestReviewCommentRes()   {}
func (*PreviewHeaderMissing) reposCreatePagesSiteRes()                       {}
func (*PreviewHeaderMissing) reposDeletePagesSiteRes()                       {}
func (*PreviewHeaderMissing) reposGetAllTopicsRes()                          {}
func (*PreviewHeaderMissing) reposGetBranchRes()                             {}
func (*PreviewHeaderMissing) reposGetDeploymentStatusRes()                   {}
func (*PreviewHeaderMissing) reposGetReleaseAssetRes()                       {}
func (*PreviewHeaderMissing) reposReplaceAllTopicsRes()                      {}
func (*PreviewHeaderMissing) searchCommitsRes()                              {}
func (*PreviewHeaderMissing) searchTopicsRes()                               {}
func (*PreviewHeaderMissing) teamsRemoveProjectLegacyRes()                   {}
func (*PreviewHeaderMissing) usersListBlockedByAuthenticatedRes()            {}

// Private User.
// Ref: #/components/schemas/private-user
type PrivateUser struct {
	Login                   string             `json:"login"`
	ID                      int                `json:"id"`
	NodeID                  string             `json:"node_id"`
	AvatarURL               url.URL            `json:"avatar_url"`
	GravatarID              NilString          `json:"gravatar_id"`
	URL                     url.URL            `json:"url"`
	HTMLURL                 url.URL            `json:"html_url"`
	FollowersURL            url.URL            `json:"followers_url"`
	FollowingURL            string             `json:"following_url"`
	GistsURL                string             `json:"gists_url"`
	StarredURL              string             `json:"starred_url"`
	SubscriptionsURL        url.URL            `json:"subscriptions_url"`
	OrganizationsURL        url.URL            `json:"organizations_url"`
	ReposURL                url.URL            `json:"repos_url"`
	EventsURL               string             `json:"events_url"`
	ReceivedEventsURL       url.URL            `json:"received_events_url"`
	Type                    string             `json:"type"`
	SiteAdmin               bool               `json:"site_admin"`
	Name                    NilString          `json:"name"`
	Company                 NilString          `json:"company"`
	Blog                    NilString          `json:"blog"`
	Location                NilString          `json:"location"`
	Email                   NilString          `json:"email"`
	Hireable                NilBool            `json:"hireable"`
	Bio                     NilString          `json:"bio"`
	TwitterUsername         OptNilString       `json:"twitter_username"`
	PublicRepos             int                `json:"public_repos"`
	PublicGists             int                `json:"public_gists"`
	Followers               int                `json:"followers"`
	Following               int                `json:"following"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	PrivateGists            int                `json:"private_gists"`
	TotalPrivateRepos       int                `json:"total_private_repos"`
	OwnedPrivateRepos       int                `json:"owned_private_repos"`
	DiskUsage               int                `json:"disk_usage"`
	Collaborators           int                `json:"collaborators"`
	TwoFactorAuthentication bool               `json:"two_factor_authentication"`
	Plan                    OptPrivateUserPlan `json:"plan"`
	SuspendedAt             OptNilDateTime     `json:"suspended_at"`
	BusinessPlus            OptBool            `json:"business_plus"`
	LdapDn                  OptString          `json:"ldap_dn"`
}

// GetLogin returns the value of Login.
func (s *PrivateUser) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *PrivateUser) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PrivateUser) GetNodeID() string {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *PrivateUser) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *PrivateUser) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *PrivateUser) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PrivateUser) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *PrivateUser) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *PrivateUser) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *PrivateUser) GetGistsURL() string {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *PrivateUser) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *PrivateUser) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *PrivateUser) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *PrivateUser) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PrivateUser) GetEventsURL() string {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *PrivateUser) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *PrivateUser) GetType() string {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *PrivateUser) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetName returns the value of Name.
func (s *PrivateUser) GetName() NilString {
	return s.Name
}

// GetCompany returns the value of Company.
func (s *PrivateUser) GetCompany() NilString {
	return s.Company
}

// GetBlog returns the value of Blog.
func (s *PrivateUser) GetBlog() NilString {
	return s.Blog
}

// GetLocation returns the value of Location.
func (s *PrivateUser) GetLocation() NilString {
	return s.Location
}

// GetEmail returns the value of Email.
func (s *PrivateUser) GetEmail() NilString {
	return s.Email
}

// GetHireable returns the value of Hireable.
func (s *PrivateUser) GetHireable() NilBool {
	return s.Hireable
}

// GetBio returns the value of Bio.
func (s *PrivateUser) GetBio() NilString {
	return s.Bio
}

// GetTwitterUsername returns the value of TwitterUsername.
func (s *PrivateUser) GetTwitterUsername() OptNilString {
	return s.TwitterUsername
}

// GetPublicRepos returns the value of PublicRepos.
func (s *PrivateUser) GetPublicRepos() int {
	return s.PublicRepos
}

// GetPublicGists returns the value of PublicGists.
func (s *PrivateUser) GetPublicGists() int {
	return s.PublicGists
}

// GetFollowers returns the value of Followers.
func (s *PrivateUser) GetFollowers() int {
	return s.Followers
}

// GetFollowing returns the value of Following.
func (s *PrivateUser) GetFollowing() int {
	return s.Following
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PrivateUser) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PrivateUser) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPrivateGists returns the value of PrivateGists.
func (s *PrivateUser) GetPrivateGists() int {
	return s.PrivateGists
}

// GetTotalPrivateRepos returns the value of TotalPrivateRepos.
func (s *PrivateUser) GetTotalPrivateRepos() int {
	return s.TotalPrivateRepos
}

// GetOwnedPrivateRepos returns the value of OwnedPrivateRepos.
func (s *PrivateUser) GetOwnedPrivateRepos() int {
	return s.OwnedPrivateRepos
}

// GetDiskUsage returns the value of DiskUsage.
func (s *PrivateUser) GetDiskUsage() int {
	return s.DiskUsage
}

// GetCollaborators returns the value of Collaborators.
func (s *PrivateUser) GetCollaborators() int {
	return s.Collaborators
}

// GetTwoFactorAuthentication returns the value of TwoFactorAuthentication.
func (s *PrivateUser) GetTwoFactorAuthentication() bool {
	return s.TwoFactorAuthentication
}

// GetPlan returns the value of Plan.
func (s *PrivateUser) GetPlan() OptPrivateUserPlan {
	return s.Plan
}

// GetSuspendedAt returns the value of SuspendedAt.
func (s *PrivateUser) GetSuspendedAt() OptNilDateTime {
	return s.SuspendedAt
}

// GetBusinessPlus returns the value of BusinessPlus.
func (s *PrivateUser) GetBusinessPlus() OptBool {
	return s.BusinessPlus
}

// GetLdapDn returns the value of LdapDn.
func (s *PrivateUser) GetLdapDn() OptString {
	return s.LdapDn
}

// SetLogin sets the value of Login.
func (s *PrivateUser) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *PrivateUser) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PrivateUser) SetNodeID(val string) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *PrivateUser) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *PrivateUser) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *PrivateUser) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PrivateUser) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *PrivateUser) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *PrivateUser) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *PrivateUser) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *PrivateUser) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *PrivateUser) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *PrivateUser) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *PrivateUser) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PrivateUser) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *PrivateUser) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *PrivateUser) SetType(val string) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *PrivateUser) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetName sets the value of Name.
func (s *PrivateUser) SetName(val NilString) {
	s.Name = val
}

// SetCompany sets the value of Company.
func (s *PrivateUser) SetCompany(val NilString) {
	s.Company = val
}

// SetBlog sets the value of Blog.
func (s *PrivateUser) SetBlog(val NilString) {
	s.Blog = val
}

// SetLocation sets the value of Location.
func (s *PrivateUser) SetLocation(val NilString) {
	s.Location = val
}

// SetEmail sets the value of Email.
func (s *PrivateUser) SetEmail(val NilString) {
	s.Email = val
}

// SetHireable sets the value of Hireable.
func (s *PrivateUser) SetHireable(val NilBool) {
	s.Hireable = val
}

// SetBio sets the value of Bio.
func (s *PrivateUser) SetBio(val NilString) {
	s.Bio = val
}

// SetTwitterUsername sets the value of TwitterUsername.
func (s *PrivateUser) SetTwitterUsername(val OptNilString) {
	s.TwitterUsername = val
}

// SetPublicRepos sets the value of PublicRepos.
func (s *PrivateUser) SetPublicRepos(val int) {
	s.PublicRepos = val
}

// SetPublicGists sets the value of PublicGists.
func (s *PrivateUser) SetPublicGists(val int) {
	s.PublicGists = val
}

// SetFollowers sets the value of Followers.
func (s *PrivateUser) SetFollowers(val int) {
	s.Followers = val
}

// SetFollowing sets the value of Following.
func (s *PrivateUser) SetFollowing(val int) {
	s.Following = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PrivateUser) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PrivateUser) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPrivateGists sets the value of PrivateGists.
func (s *PrivateUser) SetPrivateGists(val int) {
	s.PrivateGists = val
}

// SetTotalPrivateRepos sets the value of TotalPrivateRepos.
func (s *PrivateUser) SetTotalPrivateRepos(val int) {
	s.TotalPrivateRepos = val
}

// SetOwnedPrivateRepos sets the value of OwnedPrivateRepos.
func (s *PrivateUser) SetOwnedPrivateRepos(val int) {
	s.OwnedPrivateRepos = val
}

// SetDiskUsage sets the value of DiskUsage.
func (s *PrivateUser) SetDiskUsage(val int) {
	s.DiskUsage = val
}

// SetCollaborators sets the value of Collaborators.
func (s *PrivateUser) SetCollaborators(val int) {
	s.Collaborators = val
}

// SetTwoFactorAuthentication sets the value of TwoFactorAuthentication.
func (s *PrivateUser) SetTwoFactorAuthentication(val bool) {
	s.TwoFactorAuthentication = val
}

// SetPlan sets the value of Plan.
func (s *PrivateUser) SetPlan(val OptPrivateUserPlan) {
	s.Plan = val
}

// SetSuspendedAt sets the value of SuspendedAt.
func (s *PrivateUser) SetSuspendedAt(val OptNilDateTime) {
	s.SuspendedAt = val
}

// SetBusinessPlus sets the value of BusinessPlus.
func (s *PrivateUser) SetBusinessPlus(val OptBool) {
	s.BusinessPlus = val
}

// SetLdapDn sets the value of LdapDn.
func (s *PrivateUser) SetLdapDn(val OptString) {
	s.LdapDn = val
}

func (*PrivateUser) usersUpdateAuthenticatedRes() {}

type PrivateUserPlan struct {
	Collaborators int    `json:"collaborators"`
	Name          string `json:"name"`
	Space         int    `json:"space"`
	PrivateRepos  int    `json:"private_repos"`
}

// GetCollaborators returns the value of Collaborators.
func (s *PrivateUserPlan) GetCollaborators() int {
	return s.Collaborators
}

// GetName returns the value of Name.
func (s *PrivateUserPlan) GetName() string {
	return s.Name
}

// GetSpace returns the value of Space.
func (s *PrivateUserPlan) GetSpace() int {
	return s.Space
}

// GetPrivateRepos returns the value of PrivateRepos.
func (s *PrivateUserPlan) GetPrivateRepos() int {
	return s.PrivateRepos
}

// SetCollaborators sets the value of Collaborators.
func (s *PrivateUserPlan) SetCollaborators(val int) {
	s.Collaborators = val
}

// SetName sets the value of Name.
func (s *PrivateUserPlan) SetName(val string) {
	s.Name = val
}

// SetSpace sets the value of Space.
func (s *PrivateUserPlan) SetSpace(val int) {
	s.Space = val
}

// SetPrivateRepos sets the value of PrivateRepos.
func (s *PrivateUserPlan) SetPrivateRepos(val int) {
	s.PrivateRepos = val
}

// Projects are a way to organize columns and cards of work.
// Ref: #/components/schemas/project
type Project struct {
	OwnerURL   url.URL `json:"owner_url"`
	URL        url.URL `json:"url"`
	HTMLURL    url.URL `json:"html_url"`
	ColumnsURL url.URL `json:"columns_url"`
	ID         int     `json:"id"`
	NodeID     string  `json:"node_id"`
	// Name of the project.
	Name string `json:"name"`
	// Body of the project.
	Body   NilString `json:"body"`
	Number int       `json:"number"`
	// State of the project; either 'open' or 'closed'.
	State     string                `json:"state"`
	Creator   NilNullableSimpleUser `json:"creator"`
	CreatedAt time.Time             `json:"created_at"`
	UpdatedAt time.Time             `json:"updated_at"`
	// The baseline permission that all organization members have on this project. Only present if owner
	// is an organization.
	OrganizationPermission OptProjectOrganizationPermission `json:"organization_permission"`
	// Whether or not this project can be seen by everyone. Only present if owner is an organization.
	Private OptBool `json:"private"`
}

// GetOwnerURL returns the value of OwnerURL.
func (s *Project) GetOwnerURL() url.URL {
	return s.OwnerURL
}

// GetURL returns the value of URL.
func (s *Project) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Project) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetColumnsURL returns the value of ColumnsURL.
func (s *Project) GetColumnsURL() url.URL {
	return s.ColumnsURL
}

// GetID returns the value of ID.
func (s *Project) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Project) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *Project) GetName() string {
	return s.Name
}

// GetBody returns the value of Body.
func (s *Project) GetBody() NilString {
	return s.Body
}

// GetNumber returns the value of Number.
func (s *Project) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *Project) GetState() string {
	return s.State
}

// GetCreator returns the value of Creator.
func (s *Project) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Project) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Project) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetOrganizationPermission returns the value of OrganizationPermission.
func (s *Project) GetOrganizationPermission() OptProjectOrganizationPermission {
	return s.OrganizationPermission
}

// GetPrivate returns the value of Private.
func (s *Project) GetPrivate() OptBool {
	return s.Private
}

// SetOwnerURL sets the value of OwnerURL.
func (s *Project) SetOwnerURL(val url.URL) {
	s.OwnerURL = val
}

// SetURL sets the value of URL.
func (s *Project) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Project) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetColumnsURL sets the value of ColumnsURL.
func (s *Project) SetColumnsURL(val url.URL) {
	s.ColumnsURL = val
}

// SetID sets the value of ID.
func (s *Project) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Project) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *Project) SetName(val string) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *Project) SetBody(val NilString) {
	s.Body = val
}

// SetNumber sets the value of Number.
func (s *Project) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *Project) SetState(val string) {
	s.State = val
}

// SetCreator sets the value of Creator.
func (s *Project) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Project) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Project) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetOrganizationPermission sets the value of OrganizationPermission.
func (s *Project) SetOrganizationPermission(val OptProjectOrganizationPermission) {
	s.OrganizationPermission = val
}

// SetPrivate sets the value of Private.
func (s *Project) SetPrivate(val OptBool) {
	s.Private = val
}

func (*Project) projectsCreateForAuthenticatedUserRes() {}
func (*Project) projectsCreateForOrgRes()               {}
func (*Project) projectsCreateForRepoRes()              {}
func (*Project) projectsGetRes()                        {}
func (*Project) projectsUpdateRes()                     {}

// Project cards represent a scope of work.
// Ref: #/components/schemas/project-card
type ProjectCard struct {
	URL url.URL `json:"url"`
	// The project card's ID.
	ID        int                   `json:"id"`
	NodeID    string                `json:"node_id"`
	Note      NilString             `json:"note"`
	Creator   NilNullableSimpleUser `json:"creator"`
	CreatedAt time.Time             `json:"created_at"`
	UpdatedAt time.Time             `json:"updated_at"`
	// Whether or not the card is archived.
	Archived   OptBool   `json:"archived"`
	ColumnName OptString `json:"column_name"`
	ProjectID  OptString `json:"project_id"`
	ColumnURL  url.URL   `json:"column_url"`
	ContentURL OptURI    `json:"content_url"`
	ProjectURL url.URL   `json:"project_url"`
}

// GetURL returns the value of URL.
func (s *ProjectCard) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *ProjectCard) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *ProjectCard) GetNodeID() string {
	return s.NodeID
}

// GetNote returns the value of Note.
func (s *ProjectCard) GetNote() NilString {
	return s.Note
}

// GetCreator returns the value of Creator.
func (s *ProjectCard) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProjectCard) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProjectCard) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetArchived returns the value of Archived.
func (s *ProjectCard) GetArchived() OptBool {
	return s.Archived
}

// GetColumnName returns the value of ColumnName.
func (s *ProjectCard) GetColumnName() OptString {
	return s.ColumnName
}

// GetProjectID returns the value of ProjectID.
func (s *ProjectCard) GetProjectID() OptString {
	return s.ProjectID
}

// GetColumnURL returns the value of ColumnURL.
func (s *ProjectCard) GetColumnURL() url.URL {
	return s.ColumnURL
}

// GetContentURL returns the value of ContentURL.
func (s *ProjectCard) GetContentURL() OptURI {
	return s.ContentURL
}

// GetProjectURL returns the value of ProjectURL.
func (s *ProjectCard) GetProjectURL() url.URL {
	return s.ProjectURL
}

// SetURL sets the value of URL.
func (s *ProjectCard) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *ProjectCard) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *ProjectCard) SetNodeID(val string) {
	s.NodeID = val
}

// SetNote sets the value of Note.
func (s *ProjectCard) SetNote(val NilString) {
	s.Note = val
}

// SetCreator sets the value of Creator.
func (s *ProjectCard) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProjectCard) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProjectCard) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetArchived sets the value of Archived.
func (s *ProjectCard) SetArchived(val OptBool) {
	s.Archived = val
}

// SetColumnName sets the value of ColumnName.
func (s *ProjectCard) SetColumnName(val OptString) {
	s.ColumnName = val
}

// SetProjectID sets the value of ProjectID.
func (s *ProjectCard) SetProjectID(val OptString) {
	s.ProjectID = val
}

// SetColumnURL sets the value of ColumnURL.
func (s *ProjectCard) SetColumnURL(val url.URL) {
	s.ColumnURL = val
}

// SetContentURL sets the value of ContentURL.
func (s *ProjectCard) SetContentURL(val OptURI) {
	s.ContentURL = val
}

// SetProjectURL sets the value of ProjectURL.
func (s *ProjectCard) SetProjectURL(val url.URL) {
	s.ProjectURL = val
}

func (*ProjectCard) projectsGetCardRes()    {}
func (*ProjectCard) projectsUpdateCardRes() {}

// Project columns contain cards of work.
// Ref: #/components/schemas/project-column
type ProjectColumn struct {
	URL        url.URL `json:"url"`
	ProjectURL url.URL `json:"project_url"`
	CardsURL   url.URL `json:"cards_url"`
	// The unique identifier of the project column.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// Name of the project column.
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetURL returns the value of URL.
func (s *ProjectColumn) GetURL() url.URL {
	return s.URL
}

// GetProjectURL returns the value of ProjectURL.
func (s *ProjectColumn) GetProjectURL() url.URL {
	return s.ProjectURL
}

// GetCardsURL returns the value of CardsURL.
func (s *ProjectColumn) GetCardsURL() url.URL {
	return s.CardsURL
}

// GetID returns the value of ID.
func (s *ProjectColumn) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *ProjectColumn) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *ProjectColumn) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProjectColumn) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProjectColumn) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetURL sets the value of URL.
func (s *ProjectColumn) SetURL(val url.URL) {
	s.URL = val
}

// SetProjectURL sets the value of ProjectURL.
func (s *ProjectColumn) SetProjectURL(val url.URL) {
	s.ProjectURL = val
}

// SetCardsURL sets the value of CardsURL.
func (s *ProjectColumn) SetCardsURL(val url.URL) {
	s.CardsURL = val
}

// SetID sets the value of ID.
func (s *ProjectColumn) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *ProjectColumn) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *ProjectColumn) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProjectColumn) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProjectColumn) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*ProjectColumn) projectsCreateColumnRes() {}
func (*ProjectColumn) projectsGetColumnRes()    {}
func (*ProjectColumn) projectsUpdateColumnRes() {}

// The baseline permission that all organization members have on this project. Only present if owner
// is an organization.
type ProjectOrganizationPermission string

const (
	ProjectOrganizationPermissionRead  ProjectOrganizationPermission = "read"
	ProjectOrganizationPermissionWrite ProjectOrganizationPermission = "write"
	ProjectOrganizationPermissionAdmin ProjectOrganizationPermission = "admin"
	ProjectOrganizationPermissionNone  ProjectOrganizationPermission = "none"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectOrganizationPermission) MarshalText() ([]byte, error) {
	switch s {
	case ProjectOrganizationPermissionRead:
		return []byte(s), nil
	case ProjectOrganizationPermissionWrite:
		return []byte(s), nil
	case ProjectOrganizationPermissionAdmin:
		return []byte(s), nil
	case ProjectOrganizationPermissionNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectOrganizationPermission) UnmarshalText(data []byte) error {
	switch ProjectOrganizationPermission(data) {
	case ProjectOrganizationPermissionRead:
		*s = ProjectOrganizationPermissionRead
		return nil
	case ProjectOrganizationPermissionWrite:
		*s = ProjectOrganizationPermissionWrite
		return nil
	case ProjectOrganizationPermissionAdmin:
		*s = ProjectOrganizationPermissionAdmin
		return nil
	case ProjectOrganizationPermissionNone:
		*s = ProjectOrganizationPermissionNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsAddCollaboratorForbidden BasicError

func (*ProjectsAddCollaboratorForbidden) projectsAddCollaboratorRes() {}

// ProjectsAddCollaboratorNoContent is response for ProjectsAddCollaborator operation.
type ProjectsAddCollaboratorNoContent struct{}

func (*ProjectsAddCollaboratorNoContent) projectsAddCollaboratorRes() {}

type ProjectsAddCollaboratorNotFound BasicError

func (*ProjectsAddCollaboratorNotFound) projectsAddCollaboratorRes() {}

type ProjectsAddCollaboratorReq struct {
	// The permission to grant the collaborator.
	Permission OptProjectsAddCollaboratorReqPermission `json:"permission"`
}

// GetPermission returns the value of Permission.
func (s *ProjectsAddCollaboratorReq) GetPermission() OptProjectsAddCollaboratorReqPermission {
	return s.Permission
}

// SetPermission sets the value of Permission.
func (s *ProjectsAddCollaboratorReq) SetPermission(val OptProjectsAddCollaboratorReqPermission) {
	s.Permission = val
}

// The permission to grant the collaborator.
type ProjectsAddCollaboratorReqPermission string

const (
	ProjectsAddCollaboratorReqPermissionRead  ProjectsAddCollaboratorReqPermission = "read"
	ProjectsAddCollaboratorReqPermissionWrite ProjectsAddCollaboratorReqPermission = "write"
	ProjectsAddCollaboratorReqPermissionAdmin ProjectsAddCollaboratorReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsAddCollaboratorReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsAddCollaboratorReqPermissionRead:
		return []byte(s), nil
	case ProjectsAddCollaboratorReqPermissionWrite:
		return []byte(s), nil
	case ProjectsAddCollaboratorReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsAddCollaboratorReqPermission) UnmarshalText(data []byte) error {
	switch ProjectsAddCollaboratorReqPermission(data) {
	case ProjectsAddCollaboratorReqPermissionRead:
		*s = ProjectsAddCollaboratorReqPermissionRead
		return nil
	case ProjectsAddCollaboratorReqPermissionWrite:
		*s = ProjectsAddCollaboratorReqPermissionWrite
		return nil
	case ProjectsAddCollaboratorReqPermissionAdmin:
		*s = ProjectsAddCollaboratorReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsAddCollaboratorUnauthorized BasicError

func (*ProjectsAddCollaboratorUnauthorized) projectsAddCollaboratorRes() {}

type ProjectsCreateColumnForbidden BasicError

func (*ProjectsCreateColumnForbidden) projectsCreateColumnRes() {}

type ProjectsCreateColumnReq struct {
	// Name of the project column.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *ProjectsCreateColumnReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *ProjectsCreateColumnReq) SetName(val string) {
	s.Name = val
}

type ProjectsCreateColumnUnauthorized BasicError

func (*ProjectsCreateColumnUnauthorized) projectsCreateColumnRes() {}

type ProjectsCreateForAuthenticatedUserForbidden BasicError

func (*ProjectsCreateForAuthenticatedUserForbidden) projectsCreateForAuthenticatedUserRes() {}

type ProjectsCreateForAuthenticatedUserReq struct {
	// Name of the project.
	Name string `json:"name"`
	// Body of the project.
	Body OptNilString `json:"body"`
}

// GetName returns the value of Name.
func (s *ProjectsCreateForAuthenticatedUserReq) GetName() string {
	return s.Name
}

// GetBody returns the value of Body.
func (s *ProjectsCreateForAuthenticatedUserReq) GetBody() OptNilString {
	return s.Body
}

// SetName sets the value of Name.
func (s *ProjectsCreateForAuthenticatedUserReq) SetName(val string) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *ProjectsCreateForAuthenticatedUserReq) SetBody(val OptNilString) {
	s.Body = val
}

type ProjectsCreateForAuthenticatedUserUnauthorized BasicError

func (*ProjectsCreateForAuthenticatedUserUnauthorized) projectsCreateForAuthenticatedUserRes() {}

type ProjectsCreateForOrgForbidden BasicError

func (*ProjectsCreateForOrgForbidden) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgGone BasicError

func (*ProjectsCreateForOrgGone) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgNotFound BasicError

func (*ProjectsCreateForOrgNotFound) projectsCreateForOrgRes() {}

type ProjectsCreateForOrgReq struct {
	// The name of the project.
	Name string `json:"name"`
	// The description of the project.
	Body OptString `json:"body"`
}

// GetName returns the value of Name.
func (s *ProjectsCreateForOrgReq) GetName() string {
	return s.Name
}

// GetBody returns the value of Body.
func (s *ProjectsCreateForOrgReq) GetBody() OptString {
	return s.Body
}

// SetName sets the value of Name.
func (s *ProjectsCreateForOrgReq) SetName(val string) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *ProjectsCreateForOrgReq) SetBody(val OptString) {
	s.Body = val
}

type ProjectsCreateForOrgUnauthorized BasicError

func (*ProjectsCreateForOrgUnauthorized) projectsCreateForOrgRes() {}

type ProjectsCreateForRepoForbidden BasicError

func (*ProjectsCreateForRepoForbidden) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoGone BasicError

func (*ProjectsCreateForRepoGone) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoNotFound BasicError

func (*ProjectsCreateForRepoNotFound) projectsCreateForRepoRes() {}

type ProjectsCreateForRepoReq struct {
	// The name of the project.
	Name string `json:"name"`
	// The description of the project.
	Body OptString `json:"body"`
}

// GetName returns the value of Name.
func (s *ProjectsCreateForRepoReq) GetName() string {
	return s.Name
}

// GetBody returns the value of Body.
func (s *ProjectsCreateForRepoReq) GetBody() OptString {
	return s.Body
}

// SetName sets the value of Name.
func (s *ProjectsCreateForRepoReq) SetName(val string) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *ProjectsCreateForRepoReq) SetBody(val OptString) {
	s.Body = val
}

type ProjectsCreateForRepoUnauthorized BasicError

func (*ProjectsCreateForRepoUnauthorized) projectsCreateForRepoRes() {}

type ProjectsDeleteCardForbidden struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
	Errors           []string  `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ProjectsDeleteCardForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ProjectsDeleteCardForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ProjectsDeleteCardForbidden) GetErrors() []string {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ProjectsDeleteCardForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ProjectsDeleteCardForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ProjectsDeleteCardForbidden) SetErrors(val []string) {
	s.Errors = val
}

func (*ProjectsDeleteCardForbidden) projectsDeleteCardRes() {}

// ProjectsDeleteCardNoContent is response for ProjectsDeleteCard operation.
type ProjectsDeleteCardNoContent struct{}

func (*ProjectsDeleteCardNoContent) projectsDeleteCardRes() {}

type ProjectsDeleteCardNotFound BasicError

func (*ProjectsDeleteCardNotFound) projectsDeleteCardRes() {}

type ProjectsDeleteCardUnauthorized BasicError

func (*ProjectsDeleteCardUnauthorized) projectsDeleteCardRes() {}

type ProjectsDeleteColumnForbidden BasicError

func (*ProjectsDeleteColumnForbidden) projectsDeleteColumnRes() {}

// ProjectsDeleteColumnNoContent is response for ProjectsDeleteColumn operation.
type ProjectsDeleteColumnNoContent struct{}

func (*ProjectsDeleteColumnNoContent) projectsDeleteColumnRes() {}

type ProjectsDeleteColumnUnauthorized BasicError

func (*ProjectsDeleteColumnUnauthorized) projectsDeleteColumnRes() {}

type ProjectsDeleteForbidden struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
	Errors           []string  `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ProjectsDeleteForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ProjectsDeleteForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ProjectsDeleteForbidden) GetErrors() []string {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ProjectsDeleteForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ProjectsDeleteForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ProjectsDeleteForbidden) SetErrors(val []string) {
	s.Errors = val
}

func (*ProjectsDeleteForbidden) projectsDeleteRes() {}

type ProjectsDeleteGone BasicError

func (*ProjectsDeleteGone) projectsDeleteRes() {}

// ProjectsDeleteNoContent is response for ProjectsDelete operation.
type ProjectsDeleteNoContent struct{}

func (*ProjectsDeleteNoContent) projectsDeleteRes() {}

type ProjectsDeleteNotFound BasicError

func (*ProjectsDeleteNotFound) projectsDeleteRes() {}

type ProjectsDeleteUnauthorized BasicError

func (*ProjectsDeleteUnauthorized) projectsDeleteRes() {}

type ProjectsGetCardForbidden BasicError

func (*ProjectsGetCardForbidden) projectsGetCardRes() {}

type ProjectsGetCardNotFound BasicError

func (*ProjectsGetCardNotFound) projectsGetCardRes() {}

type ProjectsGetCardUnauthorized BasicError

func (*ProjectsGetCardUnauthorized) projectsGetCardRes() {}

type ProjectsGetColumnForbidden BasicError

func (*ProjectsGetColumnForbidden) projectsGetColumnRes() {}

type ProjectsGetColumnNotFound BasicError

func (*ProjectsGetColumnNotFound) projectsGetColumnRes() {}

type ProjectsGetColumnUnauthorized BasicError

func (*ProjectsGetColumnUnauthorized) projectsGetColumnRes() {}

type ProjectsGetForbidden BasicError

func (*ProjectsGetForbidden) projectsGetRes() {}

type ProjectsGetPermissionForUserForbidden BasicError

func (*ProjectsGetPermissionForUserForbidden) projectsGetPermissionForUserRes() {}

type ProjectsGetPermissionForUserNotFound BasicError

func (*ProjectsGetPermissionForUserNotFound) projectsGetPermissionForUserRes() {}

type ProjectsGetPermissionForUserUnauthorized BasicError

func (*ProjectsGetPermissionForUserUnauthorized) projectsGetPermissionForUserRes() {}

type ProjectsGetUnauthorized BasicError

func (*ProjectsGetUnauthorized) projectsGetRes() {}

type ProjectsListCardsArchivedState string

const (
	ProjectsListCardsArchivedStateAll         ProjectsListCardsArchivedState = "all"
	ProjectsListCardsArchivedStateArchived    ProjectsListCardsArchivedState = "archived"
	ProjectsListCardsArchivedStateNotArchived ProjectsListCardsArchivedState = "not_archived"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsListCardsArchivedState) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsListCardsArchivedStateAll:
		return []byte(s), nil
	case ProjectsListCardsArchivedStateArchived:
		return []byte(s), nil
	case ProjectsListCardsArchivedStateNotArchived:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsListCardsArchivedState) UnmarshalText(data []byte) error {
	switch ProjectsListCardsArchivedState(data) {
	case ProjectsListCardsArchivedStateAll:
		*s = ProjectsListCardsArchivedStateAll
		return nil
	case ProjectsListCardsArchivedStateArchived:
		*s = ProjectsListCardsArchivedStateArchived
		return nil
	case ProjectsListCardsArchivedStateNotArchived:
		*s = ProjectsListCardsArchivedStateNotArchived
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsListCardsForbidden BasicError

func (*ProjectsListCardsForbidden) projectsListCardsRes() {}

// ProjectsListCardsOKHeaders wraps []ProjectCard with response headers.
type ProjectsListCardsOKHeaders struct {
	Link     OptString
	Response []ProjectCard
}

// GetLink returns the value of Link.
func (s *ProjectsListCardsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ProjectsListCardsOKHeaders) GetResponse() []ProjectCard {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ProjectsListCardsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ProjectsListCardsOKHeaders) SetResponse(val []ProjectCard) {
	s.Response = val
}

func (*ProjectsListCardsOKHeaders) projectsListCardsRes() {}

type ProjectsListCardsUnauthorized BasicError

func (*ProjectsListCardsUnauthorized) projectsListCardsRes() {}

type ProjectsListCollaboratorsAffiliation string

const (
	ProjectsListCollaboratorsAffiliationOutside ProjectsListCollaboratorsAffiliation = "outside"
	ProjectsListCollaboratorsAffiliationDirect  ProjectsListCollaboratorsAffiliation = "direct"
	ProjectsListCollaboratorsAffiliationAll     ProjectsListCollaboratorsAffiliation = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsListCollaboratorsAffiliation) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsListCollaboratorsAffiliationOutside:
		return []byte(s), nil
	case ProjectsListCollaboratorsAffiliationDirect:
		return []byte(s), nil
	case ProjectsListCollaboratorsAffiliationAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsListCollaboratorsAffiliation) UnmarshalText(data []byte) error {
	switch ProjectsListCollaboratorsAffiliation(data) {
	case ProjectsListCollaboratorsAffiliationOutside:
		*s = ProjectsListCollaboratorsAffiliationOutside
		return nil
	case ProjectsListCollaboratorsAffiliationDirect:
		*s = ProjectsListCollaboratorsAffiliationDirect
		return nil
	case ProjectsListCollaboratorsAffiliationAll:
		*s = ProjectsListCollaboratorsAffiliationAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsListCollaboratorsForbidden BasicError

func (*ProjectsListCollaboratorsForbidden) projectsListCollaboratorsRes() {}

type ProjectsListCollaboratorsNotFound BasicError

func (*ProjectsListCollaboratorsNotFound) projectsListCollaboratorsRes() {}

// ProjectsListCollaboratorsOKHeaders wraps []SimpleUser with response headers.
type ProjectsListCollaboratorsOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *ProjectsListCollaboratorsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ProjectsListCollaboratorsOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ProjectsListCollaboratorsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ProjectsListCollaboratorsOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*ProjectsListCollaboratorsOKHeaders) projectsListCollaboratorsRes() {}

type ProjectsListCollaboratorsUnauthorized BasicError

func (*ProjectsListCollaboratorsUnauthorized) projectsListCollaboratorsRes() {}

type ProjectsListColumnsForbidden BasicError

func (*ProjectsListColumnsForbidden) projectsListColumnsRes() {}

// ProjectsListColumnsOKHeaders wraps []ProjectColumn with response headers.
type ProjectsListColumnsOKHeaders struct {
	Link     OptString
	Response []ProjectColumn
}

// GetLink returns the value of Link.
func (s *ProjectsListColumnsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ProjectsListColumnsOKHeaders) GetResponse() []ProjectColumn {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ProjectsListColumnsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ProjectsListColumnsOKHeaders) SetResponse(val []ProjectColumn) {
	s.Response = val
}

func (*ProjectsListColumnsOKHeaders) projectsListColumnsRes() {}

type ProjectsListColumnsUnauthorized BasicError

func (*ProjectsListColumnsUnauthorized) projectsListColumnsRes() {}

// ProjectsListForOrgOKHeaders wraps []Project with response headers.
type ProjectsListForOrgOKHeaders struct {
	Link     OptString
	Response []Project
}

// GetLink returns the value of Link.
func (s *ProjectsListForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ProjectsListForOrgOKHeaders) GetResponse() []Project {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ProjectsListForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ProjectsListForOrgOKHeaders) SetResponse(val []Project) {
	s.Response = val
}

func (*ProjectsListForOrgOKHeaders) projectsListForOrgRes() {}

type ProjectsListForOrgState string

const (
	ProjectsListForOrgStateOpen   ProjectsListForOrgState = "open"
	ProjectsListForOrgStateClosed ProjectsListForOrgState = "closed"
	ProjectsListForOrgStateAll    ProjectsListForOrgState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsListForOrgState) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsListForOrgStateOpen:
		return []byte(s), nil
	case ProjectsListForOrgStateClosed:
		return []byte(s), nil
	case ProjectsListForOrgStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsListForOrgState) UnmarshalText(data []byte) error {
	switch ProjectsListForOrgState(data) {
	case ProjectsListForOrgStateOpen:
		*s = ProjectsListForOrgStateOpen
		return nil
	case ProjectsListForOrgStateClosed:
		*s = ProjectsListForOrgStateClosed
		return nil
	case ProjectsListForOrgStateAll:
		*s = ProjectsListForOrgStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsListForRepoForbidden BasicError

func (*ProjectsListForRepoForbidden) projectsListForRepoRes() {}

type ProjectsListForRepoGone BasicError

func (*ProjectsListForRepoGone) projectsListForRepoRes() {}

type ProjectsListForRepoNotFound BasicError

func (*ProjectsListForRepoNotFound) projectsListForRepoRes() {}

// ProjectsListForRepoOKHeaders wraps []Project with response headers.
type ProjectsListForRepoOKHeaders struct {
	Link     OptString
	Response []Project
}

// GetLink returns the value of Link.
func (s *ProjectsListForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ProjectsListForRepoOKHeaders) GetResponse() []Project {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ProjectsListForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ProjectsListForRepoOKHeaders) SetResponse(val []Project) {
	s.Response = val
}

func (*ProjectsListForRepoOKHeaders) projectsListForRepoRes() {}

type ProjectsListForRepoState string

const (
	ProjectsListForRepoStateOpen   ProjectsListForRepoState = "open"
	ProjectsListForRepoStateClosed ProjectsListForRepoState = "closed"
	ProjectsListForRepoStateAll    ProjectsListForRepoState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsListForRepoState) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsListForRepoStateOpen:
		return []byte(s), nil
	case ProjectsListForRepoStateClosed:
		return []byte(s), nil
	case ProjectsListForRepoStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsListForRepoState) UnmarshalText(data []byte) error {
	switch ProjectsListForRepoState(data) {
	case ProjectsListForRepoStateOpen:
		*s = ProjectsListForRepoStateOpen
		return nil
	case ProjectsListForRepoStateClosed:
		*s = ProjectsListForRepoStateClosed
		return nil
	case ProjectsListForRepoStateAll:
		*s = ProjectsListForRepoStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsListForRepoUnauthorized BasicError

func (*ProjectsListForRepoUnauthorized) projectsListForRepoRes() {}

// ProjectsListForUserOKHeaders wraps []Project with response headers.
type ProjectsListForUserOKHeaders struct {
	Link     OptString
	Response []Project
}

// GetLink returns the value of Link.
func (s *ProjectsListForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ProjectsListForUserOKHeaders) GetResponse() []Project {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ProjectsListForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ProjectsListForUserOKHeaders) SetResponse(val []Project) {
	s.Response = val
}

func (*ProjectsListForUserOKHeaders) projectsListForUserRes() {}

type ProjectsListForUserState string

const (
	ProjectsListForUserStateOpen   ProjectsListForUserState = "open"
	ProjectsListForUserStateClosed ProjectsListForUserState = "closed"
	ProjectsListForUserStateAll    ProjectsListForUserState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsListForUserState) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsListForUserStateOpen:
		return []byte(s), nil
	case ProjectsListForUserStateClosed:
		return []byte(s), nil
	case ProjectsListForUserStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsListForUserState) UnmarshalText(data []byte) error {
	switch ProjectsListForUserState(data) {
	case ProjectsListForUserStateOpen:
		*s = ProjectsListForUserStateOpen
		return nil
	case ProjectsListForUserStateClosed:
		*s = ProjectsListForUserStateClosed
		return nil
	case ProjectsListForUserStateAll:
		*s = ProjectsListForUserStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsMoveCardCreated struct{}

func (*ProjectsMoveCardCreated) projectsMoveCardRes() {}

type ProjectsMoveCardForbidden struct {
	Message          OptString                             `json:"message"`
	DocumentationURL OptString                             `json:"documentation_url"`
	Errors           []ProjectsMoveCardForbiddenErrorsItem `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ProjectsMoveCardForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ProjectsMoveCardForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ProjectsMoveCardForbidden) GetErrors() []ProjectsMoveCardForbiddenErrorsItem {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ProjectsMoveCardForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ProjectsMoveCardForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ProjectsMoveCardForbidden) SetErrors(val []ProjectsMoveCardForbiddenErrorsItem) {
	s.Errors = val
}

func (*ProjectsMoveCardForbidden) projectsMoveCardRes() {}

type ProjectsMoveCardForbiddenErrorsItem struct {
	Code     OptString `json:"code"`
	Message  OptString `json:"message"`
	Resource OptString `json:"resource"`
	Field    OptString `json:"field"`
}

// GetCode returns the value of Code.
func (s *ProjectsMoveCardForbiddenErrorsItem) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProjectsMoveCardForbiddenErrorsItem) GetMessage() OptString {
	return s.Message
}

// GetResource returns the value of Resource.
func (s *ProjectsMoveCardForbiddenErrorsItem) GetResource() OptString {
	return s.Resource
}

// GetField returns the value of Field.
func (s *ProjectsMoveCardForbiddenErrorsItem) GetField() OptString {
	return s.Field
}

// SetCode sets the value of Code.
func (s *ProjectsMoveCardForbiddenErrorsItem) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProjectsMoveCardForbiddenErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

// SetResource sets the value of Resource.
func (s *ProjectsMoveCardForbiddenErrorsItem) SetResource(val OptString) {
	s.Resource = val
}

// SetField sets the value of Field.
func (s *ProjectsMoveCardForbiddenErrorsItem) SetField(val OptString) {
	s.Field = val
}

type ProjectsMoveCardReq struct {
	// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to
	// place after the specified card.
	Position string `json:"position"`
	// The unique identifier of the column the card should be moved to.
	ColumnID OptInt `json:"column_id"`
}

// GetPosition returns the value of Position.
func (s *ProjectsMoveCardReq) GetPosition() string {
	return s.Position
}

// GetColumnID returns the value of ColumnID.
func (s *ProjectsMoveCardReq) GetColumnID() OptInt {
	return s.ColumnID
}

// SetPosition sets the value of Position.
func (s *ProjectsMoveCardReq) SetPosition(val string) {
	s.Position = val
}

// SetColumnID sets the value of ColumnID.
func (s *ProjectsMoveCardReq) SetColumnID(val OptInt) {
	s.ColumnID = val
}

type ProjectsMoveCardServiceUnavailable struct {
	Code             OptString                                      `json:"code"`
	Message          OptString                                      `json:"message"`
	DocumentationURL OptString                                      `json:"documentation_url"`
	Errors           []ProjectsMoveCardServiceUnavailableErrorsItem `json:"errors"`
}

// GetCode returns the value of Code.
func (s *ProjectsMoveCardServiceUnavailable) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProjectsMoveCardServiceUnavailable) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ProjectsMoveCardServiceUnavailable) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ProjectsMoveCardServiceUnavailable) GetErrors() []ProjectsMoveCardServiceUnavailableErrorsItem {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *ProjectsMoveCardServiceUnavailable) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProjectsMoveCardServiceUnavailable) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ProjectsMoveCardServiceUnavailable) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ProjectsMoveCardServiceUnavailable) SetErrors(val []ProjectsMoveCardServiceUnavailableErrorsItem) {
	s.Errors = val
}

func (*ProjectsMoveCardServiceUnavailable) projectsMoveCardRes() {}

type ProjectsMoveCardServiceUnavailableErrorsItem struct {
	Code    OptString `json:"code"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *ProjectsMoveCardServiceUnavailableErrorsItem) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ProjectsMoveCardServiceUnavailableErrorsItem) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ProjectsMoveCardServiceUnavailableErrorsItem) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ProjectsMoveCardServiceUnavailableErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

type ProjectsMoveColumnCreated struct{}

func (*ProjectsMoveColumnCreated) projectsMoveColumnRes() {}

type ProjectsMoveColumnForbidden BasicError

func (*ProjectsMoveColumnForbidden) projectsMoveColumnRes() {}

type ProjectsMoveColumnReq struct {
	// The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to
	// place after the specified column.
	Position string `json:"position"`
}

// GetPosition returns the value of Position.
func (s *ProjectsMoveColumnReq) GetPosition() string {
	return s.Position
}

// SetPosition sets the value of Position.
func (s *ProjectsMoveColumnReq) SetPosition(val string) {
	s.Position = val
}

type ProjectsMoveColumnUnauthorized BasicError

func (*ProjectsMoveColumnUnauthorized) projectsMoveColumnRes() {}

type ProjectsRemoveCollaboratorForbidden BasicError

func (*ProjectsRemoveCollaboratorForbidden) projectsRemoveCollaboratorRes() {}

// ProjectsRemoveCollaboratorNoContent is response for ProjectsRemoveCollaborator operation.
type ProjectsRemoveCollaboratorNoContent struct{}

func (*ProjectsRemoveCollaboratorNoContent) projectsRemoveCollaboratorRes() {}

type ProjectsRemoveCollaboratorNotFound BasicError

func (*ProjectsRemoveCollaboratorNotFound) projectsRemoveCollaboratorRes() {}

type ProjectsRemoveCollaboratorUnauthorized BasicError

func (*ProjectsRemoveCollaboratorUnauthorized) projectsRemoveCollaboratorRes() {}

type ProjectsUpdateCardForbidden BasicError

func (*ProjectsUpdateCardForbidden) projectsUpdateCardRes() {}

type ProjectsUpdateCardNotFound BasicError

func (*ProjectsUpdateCardNotFound) projectsUpdateCardRes() {}

type ProjectsUpdateCardReq struct {
	// The project card's note.
	Note OptNilString `json:"note"`
	// Whether or not the card is archived.
	Archived OptBool `json:"archived"`
}

// GetNote returns the value of Note.
func (s *ProjectsUpdateCardReq) GetNote() OptNilString {
	return s.Note
}

// GetArchived returns the value of Archived.
func (s *ProjectsUpdateCardReq) GetArchived() OptBool {
	return s.Archived
}

// SetNote sets the value of Note.
func (s *ProjectsUpdateCardReq) SetNote(val OptNilString) {
	s.Note = val
}

// SetArchived sets the value of Archived.
func (s *ProjectsUpdateCardReq) SetArchived(val OptBool) {
	s.Archived = val
}

type ProjectsUpdateCardUnauthorized BasicError

func (*ProjectsUpdateCardUnauthorized) projectsUpdateCardRes() {}

type ProjectsUpdateColumnForbidden BasicError

func (*ProjectsUpdateColumnForbidden) projectsUpdateColumnRes() {}

type ProjectsUpdateColumnReq struct {
	// Name of the project column.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *ProjectsUpdateColumnReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *ProjectsUpdateColumnReq) SetName(val string) {
	s.Name = val
}

type ProjectsUpdateColumnUnauthorized BasicError

func (*ProjectsUpdateColumnUnauthorized) projectsUpdateColumnRes() {}

type ProjectsUpdateForbidden struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
	Errors           []string  `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ProjectsUpdateForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ProjectsUpdateForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ProjectsUpdateForbidden) GetErrors() []string {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ProjectsUpdateForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ProjectsUpdateForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ProjectsUpdateForbidden) SetErrors(val []string) {
	s.Errors = val
}

func (*ProjectsUpdateForbidden) projectsUpdateRes() {}

type ProjectsUpdateGone BasicError

func (*ProjectsUpdateGone) projectsUpdateRes() {}

// ProjectsUpdateNotFound is response for ProjectsUpdate operation.
type ProjectsUpdateNotFound struct{}

func (*ProjectsUpdateNotFound) projectsUpdateRes() {}

type ProjectsUpdateReq struct {
	// Name of the project.
	Name OptString `json:"name"`
	// Body of the project.
	Body OptNilString `json:"body"`
	// State of the project; either 'open' or 'closed'.
	State OptString `json:"state"`
	// The baseline permission that all organization members have on this project.
	OrganizationPermission OptProjectsUpdateReqOrganizationPermission `json:"organization_permission"`
	// Whether or not this project can be seen by everyone.
	Private OptBool `json:"private"`
}

// GetName returns the value of Name.
func (s *ProjectsUpdateReq) GetName() OptString {
	return s.Name
}

// GetBody returns the value of Body.
func (s *ProjectsUpdateReq) GetBody() OptNilString {
	return s.Body
}

// GetState returns the value of State.
func (s *ProjectsUpdateReq) GetState() OptString {
	return s.State
}

// GetOrganizationPermission returns the value of OrganizationPermission.
func (s *ProjectsUpdateReq) GetOrganizationPermission() OptProjectsUpdateReqOrganizationPermission {
	return s.OrganizationPermission
}

// GetPrivate returns the value of Private.
func (s *ProjectsUpdateReq) GetPrivate() OptBool {
	return s.Private
}

// SetName sets the value of Name.
func (s *ProjectsUpdateReq) SetName(val OptString) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *ProjectsUpdateReq) SetBody(val OptNilString) {
	s.Body = val
}

// SetState sets the value of State.
func (s *ProjectsUpdateReq) SetState(val OptString) {
	s.State = val
}

// SetOrganizationPermission sets the value of OrganizationPermission.
func (s *ProjectsUpdateReq) SetOrganizationPermission(val OptProjectsUpdateReqOrganizationPermission) {
	s.OrganizationPermission = val
}

// SetPrivate sets the value of Private.
func (s *ProjectsUpdateReq) SetPrivate(val OptBool) {
	s.Private = val
}

// The baseline permission that all organization members have on this project.
type ProjectsUpdateReqOrganizationPermission string

const (
	ProjectsUpdateReqOrganizationPermissionRead  ProjectsUpdateReqOrganizationPermission = "read"
	ProjectsUpdateReqOrganizationPermissionWrite ProjectsUpdateReqOrganizationPermission = "write"
	ProjectsUpdateReqOrganizationPermissionAdmin ProjectsUpdateReqOrganizationPermission = "admin"
	ProjectsUpdateReqOrganizationPermissionNone  ProjectsUpdateReqOrganizationPermission = "none"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProjectsUpdateReqOrganizationPermission) MarshalText() ([]byte, error) {
	switch s {
	case ProjectsUpdateReqOrganizationPermissionRead:
		return []byte(s), nil
	case ProjectsUpdateReqOrganizationPermissionWrite:
		return []byte(s), nil
	case ProjectsUpdateReqOrganizationPermissionAdmin:
		return []byte(s), nil
	case ProjectsUpdateReqOrganizationPermissionNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectsUpdateReqOrganizationPermission) UnmarshalText(data []byte) error {
	switch ProjectsUpdateReqOrganizationPermission(data) {
	case ProjectsUpdateReqOrganizationPermissionRead:
		*s = ProjectsUpdateReqOrganizationPermissionRead
		return nil
	case ProjectsUpdateReqOrganizationPermissionWrite:
		*s = ProjectsUpdateReqOrganizationPermissionWrite
		return nil
	case ProjectsUpdateReqOrganizationPermissionAdmin:
		*s = ProjectsUpdateReqOrganizationPermissionAdmin
		return nil
	case ProjectsUpdateReqOrganizationPermissionNone:
		*s = ProjectsUpdateReqOrganizationPermissionNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectsUpdateUnauthorized BasicError

func (*ProjectsUpdateUnauthorized) projectsUpdateRes() {}

// Branch protections protect branches.
// Ref: #/components/schemas/protected-branch
type ProtectedBranch struct {
	URL                            url.URL                                          `json:"url"`
	RequiredStatusChecks           OptStatusCheckPolicy                             `json:"required_status_checks"`
	RequiredPullRequestReviews     OptProtectedBranchRequiredPullRequestReviews     `json:"required_pull_request_reviews"`
	RequiredSignatures             OptProtectedBranchRequiredSignatures             `json:"required_signatures"`
	EnforceAdmins                  OptProtectedBranchEnforceAdmins                  `json:"enforce_admins"`
	RequiredLinearHistory          OptProtectedBranchRequiredLinearHistory          `json:"required_linear_history"`
	AllowForcePushes               OptProtectedBranchAllowForcePushes               `json:"allow_force_pushes"`
	AllowDeletions                 OptProtectedBranchAllowDeletions                 `json:"allow_deletions"`
	Restrictions                   OptBranchRestrictionPolicy                       `json:"restrictions"`
	RequiredConversationResolution OptProtectedBranchRequiredConversationResolution `json:"required_conversation_resolution"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranch) GetURL() url.URL {
	return s.URL
}

// GetRequiredStatusChecks returns the value of RequiredStatusChecks.
func (s *ProtectedBranch) GetRequiredStatusChecks() OptStatusCheckPolicy {
	return s.RequiredStatusChecks
}

// GetRequiredPullRequestReviews returns the value of RequiredPullRequestReviews.
func (s *ProtectedBranch) GetRequiredPullRequestReviews() OptProtectedBranchRequiredPullRequestReviews {
	return s.RequiredPullRequestReviews
}

// GetRequiredSignatures returns the value of RequiredSignatures.
func (s *ProtectedBranch) GetRequiredSignatures() OptProtectedBranchRequiredSignatures {
	return s.RequiredSignatures
}

// GetEnforceAdmins returns the value of EnforceAdmins.
func (s *ProtectedBranch) GetEnforceAdmins() OptProtectedBranchEnforceAdmins {
	return s.EnforceAdmins
}

// GetRequiredLinearHistory returns the value of RequiredLinearHistory.
func (s *ProtectedBranch) GetRequiredLinearHistory() OptProtectedBranchRequiredLinearHistory {
	return s.RequiredLinearHistory
}

// GetAllowForcePushes returns the value of AllowForcePushes.
func (s *ProtectedBranch) GetAllowForcePushes() OptProtectedBranchAllowForcePushes {
	return s.AllowForcePushes
}

// GetAllowDeletions returns the value of AllowDeletions.
func (s *ProtectedBranch) GetAllowDeletions() OptProtectedBranchAllowDeletions {
	return s.AllowDeletions
}

// GetRestrictions returns the value of Restrictions.
func (s *ProtectedBranch) GetRestrictions() OptBranchRestrictionPolicy {
	return s.Restrictions
}

// GetRequiredConversationResolution returns the value of RequiredConversationResolution.
func (s *ProtectedBranch) GetRequiredConversationResolution() OptProtectedBranchRequiredConversationResolution {
	return s.RequiredConversationResolution
}

// SetURL sets the value of URL.
func (s *ProtectedBranch) SetURL(val url.URL) {
	s.URL = val
}

// SetRequiredStatusChecks sets the value of RequiredStatusChecks.
func (s *ProtectedBranch) SetRequiredStatusChecks(val OptStatusCheckPolicy) {
	s.RequiredStatusChecks = val
}

// SetRequiredPullRequestReviews sets the value of RequiredPullRequestReviews.
func (s *ProtectedBranch) SetRequiredPullRequestReviews(val OptProtectedBranchRequiredPullRequestReviews) {
	s.RequiredPullRequestReviews = val
}

// SetRequiredSignatures sets the value of RequiredSignatures.
func (s *ProtectedBranch) SetRequiredSignatures(val OptProtectedBranchRequiredSignatures) {
	s.RequiredSignatures = val
}

// SetEnforceAdmins sets the value of EnforceAdmins.
func (s *ProtectedBranch) SetEnforceAdmins(val OptProtectedBranchEnforceAdmins) {
	s.EnforceAdmins = val
}

// SetRequiredLinearHistory sets the value of RequiredLinearHistory.
func (s *ProtectedBranch) SetRequiredLinearHistory(val OptProtectedBranchRequiredLinearHistory) {
	s.RequiredLinearHistory = val
}

// SetAllowForcePushes sets the value of AllowForcePushes.
func (s *ProtectedBranch) SetAllowForcePushes(val OptProtectedBranchAllowForcePushes) {
	s.AllowForcePushes = val
}

// SetAllowDeletions sets the value of AllowDeletions.
func (s *ProtectedBranch) SetAllowDeletions(val OptProtectedBranchAllowDeletions) {
	s.AllowDeletions = val
}

// SetRestrictions sets the value of Restrictions.
func (s *ProtectedBranch) SetRestrictions(val OptBranchRestrictionPolicy) {
	s.Restrictions = val
}

// SetRequiredConversationResolution sets the value of RequiredConversationResolution.
func (s *ProtectedBranch) SetRequiredConversationResolution(val OptProtectedBranchRequiredConversationResolution) {
	s.RequiredConversationResolution = val
}

func (*ProtectedBranch) reposUpdateBranchProtectionRes() {}

// Protected Branch Admin Enforced.
// Ref: #/components/schemas/protected-branch-admin-enforced
type ProtectedBranchAdminEnforced struct {
	URL     url.URL `json:"url"`
	Enabled bool    `json:"enabled"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranchAdminEnforced) GetURL() url.URL {
	return s.URL
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchAdminEnforced) GetEnabled() bool {
	return s.Enabled
}

// SetURL sets the value of URL.
func (s *ProtectedBranchAdminEnforced) SetURL(val url.URL) {
	s.URL = val
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchAdminEnforced) SetEnabled(val bool) {
	s.Enabled = val
}

func (*ProtectedBranchAdminEnforced) reposCreateCommitSignatureProtectionRes() {}
func (*ProtectedBranchAdminEnforced) reposGetCommitSignatureProtectionRes()    {}

type ProtectedBranchAllowDeletions struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchAllowDeletions) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchAllowDeletions) SetEnabled(val bool) {
	s.Enabled = val
}

type ProtectedBranchAllowForcePushes struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchAllowForcePushes) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchAllowForcePushes) SetEnabled(val bool) {
	s.Enabled = val
}

type ProtectedBranchEnforceAdmins struct {
	URL     url.URL `json:"url"`
	Enabled bool    `json:"enabled"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranchEnforceAdmins) GetURL() url.URL {
	return s.URL
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchEnforceAdmins) GetEnabled() bool {
	return s.Enabled
}

// SetURL sets the value of URL.
func (s *ProtectedBranchEnforceAdmins) SetURL(val url.URL) {
	s.URL = val
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchEnforceAdmins) SetEnabled(val bool) {
	s.Enabled = val
}

// Protected Branch Pull Request Review.
// Ref: #/components/schemas/protected-branch-pull-request-review
type ProtectedBranchPullRequestReview struct {
	URL                          OptURI                                                   `json:"url"`
	DismissalRestrictions        OptProtectedBranchPullRequestReviewDismissalRestrictions `json:"dismissal_restrictions"`
	DismissStaleReviews          bool                                                     `json:"dismiss_stale_reviews"`
	RequireCodeOwnerReviews      bool                                                     `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount OptInt                                                   `json:"required_approving_review_count"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranchPullRequestReview) GetURL() OptURI {
	return s.URL
}

// GetDismissalRestrictions returns the value of DismissalRestrictions.
func (s *ProtectedBranchPullRequestReview) GetDismissalRestrictions() OptProtectedBranchPullRequestReviewDismissalRestrictions {
	return s.DismissalRestrictions
}

// GetDismissStaleReviews returns the value of DismissStaleReviews.
func (s *ProtectedBranchPullRequestReview) GetDismissStaleReviews() bool {
	return s.DismissStaleReviews
}

// GetRequireCodeOwnerReviews returns the value of RequireCodeOwnerReviews.
func (s *ProtectedBranchPullRequestReview) GetRequireCodeOwnerReviews() bool {
	return s.RequireCodeOwnerReviews
}

// GetRequiredApprovingReviewCount returns the value of RequiredApprovingReviewCount.
func (s *ProtectedBranchPullRequestReview) GetRequiredApprovingReviewCount() OptInt {
	return s.RequiredApprovingReviewCount
}

// SetURL sets the value of URL.
func (s *ProtectedBranchPullRequestReview) SetURL(val OptURI) {
	s.URL = val
}

// SetDismissalRestrictions sets the value of DismissalRestrictions.
func (s *ProtectedBranchPullRequestReview) SetDismissalRestrictions(val OptProtectedBranchPullRequestReviewDismissalRestrictions) {
	s.DismissalRestrictions = val
}

// SetDismissStaleReviews sets the value of DismissStaleReviews.
func (s *ProtectedBranchPullRequestReview) SetDismissStaleReviews(val bool) {
	s.DismissStaleReviews = val
}

// SetRequireCodeOwnerReviews sets the value of RequireCodeOwnerReviews.
func (s *ProtectedBranchPullRequestReview) SetRequireCodeOwnerReviews(val bool) {
	s.RequireCodeOwnerReviews = val
}

// SetRequiredApprovingReviewCount sets the value of RequiredApprovingReviewCount.
func (s *ProtectedBranchPullRequestReview) SetRequiredApprovingReviewCount(val OptInt) {
	s.RequiredApprovingReviewCount = val
}

func (*ProtectedBranchPullRequestReview) reposUpdatePullRequestReviewProtectionRes() {}

type ProtectedBranchPullRequestReviewDismissalRestrictions struct {
	// The list of users with review dismissal access.
	Users []SimpleUser `json:"users"`
	// The list of teams with review dismissal access.
	Teams    []Team    `json:"teams"`
	URL      OptString `json:"url"`
	UsersURL OptString `json:"users_url"`
	TeamsURL OptString `json:"teams_url"`
}

// GetUsers returns the value of Users.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) GetUsers() []SimpleUser {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) GetTeams() []Team {
	return s.Teams
}

// GetURL returns the value of URL.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) GetURL() OptString {
	return s.URL
}

// GetUsersURL returns the value of UsersURL.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) GetUsersURL() OptString {
	return s.UsersURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) GetTeamsURL() OptString {
	return s.TeamsURL
}

// SetUsers sets the value of Users.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) SetUsers(val []SimpleUser) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) SetTeams(val []Team) {
	s.Teams = val
}

// SetURL sets the value of URL.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) SetURL(val OptString) {
	s.URL = val
}

// SetUsersURL sets the value of UsersURL.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) SetUsersURL(val OptString) {
	s.UsersURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *ProtectedBranchPullRequestReviewDismissalRestrictions) SetTeamsURL(val OptString) {
	s.TeamsURL = val
}

type ProtectedBranchRequiredConversationResolution struct {
	Enabled OptBool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchRequiredConversationResolution) GetEnabled() OptBool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchRequiredConversationResolution) SetEnabled(val OptBool) {
	s.Enabled = val
}

type ProtectedBranchRequiredLinearHistory struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchRequiredLinearHistory) GetEnabled() bool {
	return s.Enabled
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchRequiredLinearHistory) SetEnabled(val bool) {
	s.Enabled = val
}

type ProtectedBranchRequiredPullRequestReviews struct {
	URL                          url.URL                                                           `json:"url"`
	DismissStaleReviews          OptBool                                                           `json:"dismiss_stale_reviews"`
	RequireCodeOwnerReviews      OptBool                                                           `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount OptInt                                                            `json:"required_approving_review_count"`
	DismissalRestrictions        OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranchRequiredPullRequestReviews) GetURL() url.URL {
	return s.URL
}

// GetDismissStaleReviews returns the value of DismissStaleReviews.
func (s *ProtectedBranchRequiredPullRequestReviews) GetDismissStaleReviews() OptBool {
	return s.DismissStaleReviews
}

// GetRequireCodeOwnerReviews returns the value of RequireCodeOwnerReviews.
func (s *ProtectedBranchRequiredPullRequestReviews) GetRequireCodeOwnerReviews() OptBool {
	return s.RequireCodeOwnerReviews
}

// GetRequiredApprovingReviewCount returns the value of RequiredApprovingReviewCount.
func (s *ProtectedBranchRequiredPullRequestReviews) GetRequiredApprovingReviewCount() OptInt {
	return s.RequiredApprovingReviewCount
}

// GetDismissalRestrictions returns the value of DismissalRestrictions.
func (s *ProtectedBranchRequiredPullRequestReviews) GetDismissalRestrictions() OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {
	return s.DismissalRestrictions
}

// SetURL sets the value of URL.
func (s *ProtectedBranchRequiredPullRequestReviews) SetURL(val url.URL) {
	s.URL = val
}

// SetDismissStaleReviews sets the value of DismissStaleReviews.
func (s *ProtectedBranchRequiredPullRequestReviews) SetDismissStaleReviews(val OptBool) {
	s.DismissStaleReviews = val
}

// SetRequireCodeOwnerReviews sets the value of RequireCodeOwnerReviews.
func (s *ProtectedBranchRequiredPullRequestReviews) SetRequireCodeOwnerReviews(val OptBool) {
	s.RequireCodeOwnerReviews = val
}

// SetRequiredApprovingReviewCount sets the value of RequiredApprovingReviewCount.
func (s *ProtectedBranchRequiredPullRequestReviews) SetRequiredApprovingReviewCount(val OptInt) {
	s.RequiredApprovingReviewCount = val
}

// SetDismissalRestrictions sets the value of DismissalRestrictions.
func (s *ProtectedBranchRequiredPullRequestReviews) SetDismissalRestrictions(val OptProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) {
	s.DismissalRestrictions = val
}

type ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	URL      url.URL      `json:"url"`
	UsersURL url.URL      `json:"users_url"`
	TeamsURL url.URL      `json:"teams_url"`
	Users    []SimpleUser `json:"users"`
	Teams    []Team       `json:"teams"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) GetURL() url.URL {
	return s.URL
}

// GetUsersURL returns the value of UsersURL.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) GetUsersURL() url.URL {
	return s.UsersURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetUsers returns the value of Users.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) GetUsers() []SimpleUser {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) GetTeams() []Team {
	return s.Teams
}

// SetURL sets the value of URL.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetURL(val url.URL) {
	s.URL = val
}

// SetUsersURL sets the value of UsersURL.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetUsersURL(val url.URL) {
	s.UsersURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetUsers sets the value of Users.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetUsers(val []SimpleUser) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) SetTeams(val []Team) {
	s.Teams = val
}

type ProtectedBranchRequiredSignatures struct {
	URL     url.URL `json:"url"`
	Enabled bool    `json:"enabled"`
}

// GetURL returns the value of URL.
func (s *ProtectedBranchRequiredSignatures) GetURL() url.URL {
	return s.URL
}

// GetEnabled returns the value of Enabled.
func (s *ProtectedBranchRequiredSignatures) GetEnabled() bool {
	return s.Enabled
}

// SetURL sets the value of URL.
func (s *ProtectedBranchRequiredSignatures) SetURL(val url.URL) {
	s.URL = val
}

// SetEnabled sets the value of Enabled.
func (s *ProtectedBranchRequiredSignatures) SetEnabled(val bool) {
	s.Enabled = val
}

// Public User.
// Ref: #/components/schemas/public-user
type PublicUser struct {
	Login             string            `json:"login"`
	ID                int               `json:"id"`
	NodeID            string            `json:"node_id"`
	AvatarURL         url.URL           `json:"avatar_url"`
	GravatarID        NilString         `json:"gravatar_id"`
	URL               url.URL           `json:"url"`
	HTMLURL           url.URL           `json:"html_url"`
	FollowersURL      url.URL           `json:"followers_url"`
	FollowingURL      string            `json:"following_url"`
	GistsURL          string            `json:"gists_url"`
	StarredURL        string            `json:"starred_url"`
	SubscriptionsURL  url.URL           `json:"subscriptions_url"`
	OrganizationsURL  url.URL           `json:"organizations_url"`
	ReposURL          url.URL           `json:"repos_url"`
	EventsURL         string            `json:"events_url"`
	ReceivedEventsURL url.URL           `json:"received_events_url"`
	Type              string            `json:"type"`
	SiteAdmin         bool              `json:"site_admin"`
	Name              NilString         `json:"name"`
	Company           NilString         `json:"company"`
	Blog              NilString         `json:"blog"`
	Location          NilString         `json:"location"`
	Email             NilString         `json:"email"`
	Hireable          NilBool           `json:"hireable"`
	Bio               NilString         `json:"bio"`
	TwitterUsername   OptNilString      `json:"twitter_username"`
	PublicRepos       int               `json:"public_repos"`
	PublicGists       int               `json:"public_gists"`
	Followers         int               `json:"followers"`
	Following         int               `json:"following"`
	CreatedAt         time.Time         `json:"created_at"`
	UpdatedAt         time.Time         `json:"updated_at"`
	Plan              OptPublicUserPlan `json:"plan"`
	SuspendedAt       OptNilDateTime    `json:"suspended_at"`
	PrivateGists      OptInt            `json:"private_gists"`
	TotalPrivateRepos OptInt            `json:"total_private_repos"`
	OwnedPrivateRepos OptInt            `json:"owned_private_repos"`
	DiskUsage         OptInt            `json:"disk_usage"`
	Collaborators     OptInt            `json:"collaborators"`
}

// GetLogin returns the value of Login.
func (s *PublicUser) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *PublicUser) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PublicUser) GetNodeID() string {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *PublicUser) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *PublicUser) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *PublicUser) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PublicUser) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *PublicUser) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *PublicUser) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *PublicUser) GetGistsURL() string {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *PublicUser) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *PublicUser) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *PublicUser) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *PublicUser) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PublicUser) GetEventsURL() string {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *PublicUser) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *PublicUser) GetType() string {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *PublicUser) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetName returns the value of Name.
func (s *PublicUser) GetName() NilString {
	return s.Name
}

// GetCompany returns the value of Company.
func (s *PublicUser) GetCompany() NilString {
	return s.Company
}

// GetBlog returns the value of Blog.
func (s *PublicUser) GetBlog() NilString {
	return s.Blog
}

// GetLocation returns the value of Location.
func (s *PublicUser) GetLocation() NilString {
	return s.Location
}

// GetEmail returns the value of Email.
func (s *PublicUser) GetEmail() NilString {
	return s.Email
}

// GetHireable returns the value of Hireable.
func (s *PublicUser) GetHireable() NilBool {
	return s.Hireable
}

// GetBio returns the value of Bio.
func (s *PublicUser) GetBio() NilString {
	return s.Bio
}

// GetTwitterUsername returns the value of TwitterUsername.
func (s *PublicUser) GetTwitterUsername() OptNilString {
	return s.TwitterUsername
}

// GetPublicRepos returns the value of PublicRepos.
func (s *PublicUser) GetPublicRepos() int {
	return s.PublicRepos
}

// GetPublicGists returns the value of PublicGists.
func (s *PublicUser) GetPublicGists() int {
	return s.PublicGists
}

// GetFollowers returns the value of Followers.
func (s *PublicUser) GetFollowers() int {
	return s.Followers
}

// GetFollowing returns the value of Following.
func (s *PublicUser) GetFollowing() int {
	return s.Following
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PublicUser) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PublicUser) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPlan returns the value of Plan.
func (s *PublicUser) GetPlan() OptPublicUserPlan {
	return s.Plan
}

// GetSuspendedAt returns the value of SuspendedAt.
func (s *PublicUser) GetSuspendedAt() OptNilDateTime {
	return s.SuspendedAt
}

// GetPrivateGists returns the value of PrivateGists.
func (s *PublicUser) GetPrivateGists() OptInt {
	return s.PrivateGists
}

// GetTotalPrivateRepos returns the value of TotalPrivateRepos.
func (s *PublicUser) GetTotalPrivateRepos() OptInt {
	return s.TotalPrivateRepos
}

// GetOwnedPrivateRepos returns the value of OwnedPrivateRepos.
func (s *PublicUser) GetOwnedPrivateRepos() OptInt {
	return s.OwnedPrivateRepos
}

// GetDiskUsage returns the value of DiskUsage.
func (s *PublicUser) GetDiskUsage() OptInt {
	return s.DiskUsage
}

// GetCollaborators returns the value of Collaborators.
func (s *PublicUser) GetCollaborators() OptInt {
	return s.Collaborators
}

// SetLogin sets the value of Login.
func (s *PublicUser) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *PublicUser) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PublicUser) SetNodeID(val string) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *PublicUser) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *PublicUser) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *PublicUser) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PublicUser) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *PublicUser) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *PublicUser) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *PublicUser) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *PublicUser) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *PublicUser) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *PublicUser) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *PublicUser) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PublicUser) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *PublicUser) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *PublicUser) SetType(val string) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *PublicUser) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetName sets the value of Name.
func (s *PublicUser) SetName(val NilString) {
	s.Name = val
}

// SetCompany sets the value of Company.
func (s *PublicUser) SetCompany(val NilString) {
	s.Company = val
}

// SetBlog sets the value of Blog.
func (s *PublicUser) SetBlog(val NilString) {
	s.Blog = val
}

// SetLocation sets the value of Location.
func (s *PublicUser) SetLocation(val NilString) {
	s.Location = val
}

// SetEmail sets the value of Email.
func (s *PublicUser) SetEmail(val NilString) {
	s.Email = val
}

// SetHireable sets the value of Hireable.
func (s *PublicUser) SetHireable(val NilBool) {
	s.Hireable = val
}

// SetBio sets the value of Bio.
func (s *PublicUser) SetBio(val NilString) {
	s.Bio = val
}

// SetTwitterUsername sets the value of TwitterUsername.
func (s *PublicUser) SetTwitterUsername(val OptNilString) {
	s.TwitterUsername = val
}

// SetPublicRepos sets the value of PublicRepos.
func (s *PublicUser) SetPublicRepos(val int) {
	s.PublicRepos = val
}

// SetPublicGists sets the value of PublicGists.
func (s *PublicUser) SetPublicGists(val int) {
	s.PublicGists = val
}

// SetFollowers sets the value of Followers.
func (s *PublicUser) SetFollowers(val int) {
	s.Followers = val
}

// SetFollowing sets the value of Following.
func (s *PublicUser) SetFollowing(val int) {
	s.Following = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PublicUser) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PublicUser) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPlan sets the value of Plan.
func (s *PublicUser) SetPlan(val OptPublicUserPlan) {
	s.Plan = val
}

// SetSuspendedAt sets the value of SuspendedAt.
func (s *PublicUser) SetSuspendedAt(val OptNilDateTime) {
	s.SuspendedAt = val
}

// SetPrivateGists sets the value of PrivateGists.
func (s *PublicUser) SetPrivateGists(val OptInt) {
	s.PrivateGists = val
}

// SetTotalPrivateRepos sets the value of TotalPrivateRepos.
func (s *PublicUser) SetTotalPrivateRepos(val OptInt) {
	s.TotalPrivateRepos = val
}

// SetOwnedPrivateRepos sets the value of OwnedPrivateRepos.
func (s *PublicUser) SetOwnedPrivateRepos(val OptInt) {
	s.OwnedPrivateRepos = val
}

// SetDiskUsage sets the value of DiskUsage.
func (s *PublicUser) SetDiskUsage(val OptInt) {
	s.DiskUsage = val
}

// SetCollaborators sets the value of Collaborators.
func (s *PublicUser) SetCollaborators(val OptInt) {
	s.Collaborators = val
}

type PublicUserPlan struct {
	Collaborators int    `json:"collaborators"`
	Name          string `json:"name"`
	Space         int    `json:"space"`
	PrivateRepos  int    `json:"private_repos"`
}

// GetCollaborators returns the value of Collaborators.
func (s *PublicUserPlan) GetCollaborators() int {
	return s.Collaborators
}

// GetName returns the value of Name.
func (s *PublicUserPlan) GetName() string {
	return s.Name
}

// GetSpace returns the value of Space.
func (s *PublicUserPlan) GetSpace() int {
	return s.Space
}

// GetPrivateRepos returns the value of PrivateRepos.
func (s *PublicUserPlan) GetPrivateRepos() int {
	return s.PrivateRepos
}

// SetCollaborators sets the value of Collaborators.
func (s *PublicUserPlan) SetCollaborators(val int) {
	s.Collaborators = val
}

// SetName sets the value of Name.
func (s *PublicUserPlan) SetName(val string) {
	s.Name = val
}

// SetSpace sets the value of Space.
func (s *PublicUserPlan) SetSpace(val int) {
	s.Space = val
}

// SetPrivateRepos sets the value of PrivateRepos.
func (s *PublicUserPlan) SetPrivateRepos(val int) {
	s.PrivateRepos = val
}

// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a
// pull request is sent, interested parties can review the set of changes, discuss potential
// modifications, and even push follow-up commits if necessary.
// Ref: #/components/schemas/pull-request
type PullRequest struct {
	URL               url.URL `json:"url"`
	ID                int     `json:"id"`
	NodeID            string  `json:"node_id"`
	HTMLURL           url.URL `json:"html_url"`
	DiffURL           url.URL `json:"diff_url"`
	PatchURL          url.URL `json:"patch_url"`
	IssueURL          url.URL `json:"issue_url"`
	CommitsURL        url.URL `json:"commits_url"`
	ReviewCommentsURL url.URL `json:"review_comments_url"`
	ReviewCommentURL  string  `json:"review_comment_url"`
	CommentsURL       url.URL `json:"comments_url"`
	StatusesURL       url.URL `json:"statuses_url"`
	// Number uniquely identifying the pull request within its repository.
	Number int `json:"number"`
	// State of this Pull Request. Either `open` or `closed`.
	State  PullRequestState `json:"state"`
	Locked bool             `json:"locked"`
	// The title of the pull request.
	Title              string                  `json:"title"`
	User               NilNullableSimpleUser   `json:"user"`
	Body               NilString               `json:"body"`
	Labels             []PullRequestLabelsItem `json:"labels"`
	Milestone          NilNullableMilestone    `json:"milestone"`
	ActiveLockReason   OptNilString            `json:"active_lock_reason"`
	CreatedAt          time.Time               `json:"created_at"`
	UpdatedAt          time.Time               `json:"updated_at"`
	ClosedAt           NilDateTime             `json:"closed_at"`
	MergedAt           NilDateTime             `json:"merged_at"`
	MergeCommitSha     NilString               `json:"merge_commit_sha"`
	Assignee           NilNullableSimpleUser   `json:"assignee"`
	Assignees          OptNilSimpleUserArray   `json:"assignees"`
	RequestedReviewers OptNilSimpleUserArray   `json:"requested_reviewers"`
	RequestedTeams     OptNilTeamSimpleArray   `json:"requested_teams"`
	Head               PullRequestHead         `json:"head"`
	Base               PullRequestBase         `json:"base"`
	Links              PullRequestLinks        `json:"_links"`
	AuthorAssociation  AuthorAssociation       `json:"author_association"`
	AutoMerge          NilAutoMerge            `json:"auto_merge"`
	// Indicates whether or not the pull request is a draft.
	Draft          OptBool               `json:"draft"`
	Merged         bool                  `json:"merged"`
	Mergeable      NilBool               `json:"mergeable"`
	Rebaseable     OptNilBool            `json:"rebaseable"`
	MergeableState string                `json:"mergeable_state"`
	MergedBy       NilNullableSimpleUser `json:"merged_by"`
	Comments       int                   `json:"comments"`
	ReviewComments int                   `json:"review_comments"`
	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify bool `json:"maintainer_can_modify"`
	Commits             int  `json:"commits"`
	Additions           int  `json:"additions"`
	Deletions           int  `json:"deletions"`
	ChangedFiles        int  `json:"changed_files"`
}

// GetURL returns the value of URL.
func (s *PullRequest) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *PullRequest) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequest) GetNodeID() string {
	return s.NodeID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequest) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDiffURL returns the value of DiffURL.
func (s *PullRequest) GetDiffURL() url.URL {
	return s.DiffURL
}

// GetPatchURL returns the value of PatchURL.
func (s *PullRequest) GetPatchURL() url.URL {
	return s.PatchURL
}

// GetIssueURL returns the value of IssueURL.
func (s *PullRequest) GetIssueURL() url.URL {
	return s.IssueURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *PullRequest) GetCommitsURL() url.URL {
	return s.CommitsURL
}

// GetReviewCommentsURL returns the value of ReviewCommentsURL.
func (s *PullRequest) GetReviewCommentsURL() url.URL {
	return s.ReviewCommentsURL
}

// GetReviewCommentURL returns the value of ReviewCommentURL.
func (s *PullRequest) GetReviewCommentURL() string {
	return s.ReviewCommentURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *PullRequest) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *PullRequest) GetStatusesURL() url.URL {
	return s.StatusesURL
}

// GetNumber returns the value of Number.
func (s *PullRequest) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *PullRequest) GetState() PullRequestState {
	return s.State
}

// GetLocked returns the value of Locked.
func (s *PullRequest) GetLocked() bool {
	return s.Locked
}

// GetTitle returns the value of Title.
func (s *PullRequest) GetTitle() string {
	return s.Title
}

// GetUser returns the value of User.
func (s *PullRequest) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetBody returns the value of Body.
func (s *PullRequest) GetBody() NilString {
	return s.Body
}

// GetLabels returns the value of Labels.
func (s *PullRequest) GetLabels() []PullRequestLabelsItem {
	return s.Labels
}

// GetMilestone returns the value of Milestone.
func (s *PullRequest) GetMilestone() NilNullableMilestone {
	return s.Milestone
}

// GetActiveLockReason returns the value of ActiveLockReason.
func (s *PullRequest) GetActiveLockReason() OptNilString {
	return s.ActiveLockReason
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PullRequest) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PullRequest) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetClosedAt returns the value of ClosedAt.
func (s *PullRequest) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetMergedAt returns the value of MergedAt.
func (s *PullRequest) GetMergedAt() NilDateTime {
	return s.MergedAt
}

// GetMergeCommitSha returns the value of MergeCommitSha.
func (s *PullRequest) GetMergeCommitSha() NilString {
	return s.MergeCommitSha
}

// GetAssignee returns the value of Assignee.
func (s *PullRequest) GetAssignee() NilNullableSimpleUser {
	return s.Assignee
}

// GetAssignees returns the value of Assignees.
func (s *PullRequest) GetAssignees() OptNilSimpleUserArray {
	return s.Assignees
}

// GetRequestedReviewers returns the value of RequestedReviewers.
func (s *PullRequest) GetRequestedReviewers() OptNilSimpleUserArray {
	return s.RequestedReviewers
}

// GetRequestedTeams returns the value of RequestedTeams.
func (s *PullRequest) GetRequestedTeams() OptNilTeamSimpleArray {
	return s.RequestedTeams
}

// GetHead returns the value of Head.
func (s *PullRequest) GetHead() PullRequestHead {
	return s.Head
}

// GetBase returns the value of Base.
func (s *PullRequest) GetBase() PullRequestBase {
	return s.Base
}

// GetLinks returns the value of Links.
func (s *PullRequest) GetLinks() PullRequestLinks {
	return s.Links
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *PullRequest) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetAutoMerge returns the value of AutoMerge.
func (s *PullRequest) GetAutoMerge() NilAutoMerge {
	return s.AutoMerge
}

// GetDraft returns the value of Draft.
func (s *PullRequest) GetDraft() OptBool {
	return s.Draft
}

// GetMerged returns the value of Merged.
func (s *PullRequest) GetMerged() bool {
	return s.Merged
}

// GetMergeable returns the value of Mergeable.
func (s *PullRequest) GetMergeable() NilBool {
	return s.Mergeable
}

// GetRebaseable returns the value of Rebaseable.
func (s *PullRequest) GetRebaseable() OptNilBool {
	return s.Rebaseable
}

// GetMergeableState returns the value of MergeableState.
func (s *PullRequest) GetMergeableState() string {
	return s.MergeableState
}

// GetMergedBy returns the value of MergedBy.
func (s *PullRequest) GetMergedBy() NilNullableSimpleUser {
	return s.MergedBy
}

// GetComments returns the value of Comments.
func (s *PullRequest) GetComments() int {
	return s.Comments
}

// GetReviewComments returns the value of ReviewComments.
func (s *PullRequest) GetReviewComments() int {
	return s.ReviewComments
}

// GetMaintainerCanModify returns the value of MaintainerCanModify.
func (s *PullRequest) GetMaintainerCanModify() bool {
	return s.MaintainerCanModify
}

// GetCommits returns the value of Commits.
func (s *PullRequest) GetCommits() int {
	return s.Commits
}

// GetAdditions returns the value of Additions.
func (s *PullRequest) GetAdditions() int {
	return s.Additions
}

// GetDeletions returns the value of Deletions.
func (s *PullRequest) GetDeletions() int {
	return s.Deletions
}

// GetChangedFiles returns the value of ChangedFiles.
func (s *PullRequest) GetChangedFiles() int {
	return s.ChangedFiles
}

// SetURL sets the value of URL.
func (s *PullRequest) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *PullRequest) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequest) SetNodeID(val string) {
	s.NodeID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequest) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDiffURL sets the value of DiffURL.
func (s *PullRequest) SetDiffURL(val url.URL) {
	s.DiffURL = val
}

// SetPatchURL sets the value of PatchURL.
func (s *PullRequest) SetPatchURL(val url.URL) {
	s.PatchURL = val
}

// SetIssueURL sets the value of IssueURL.
func (s *PullRequest) SetIssueURL(val url.URL) {
	s.IssueURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *PullRequest) SetCommitsURL(val url.URL) {
	s.CommitsURL = val
}

// SetReviewCommentsURL sets the value of ReviewCommentsURL.
func (s *PullRequest) SetReviewCommentsURL(val url.URL) {
	s.ReviewCommentsURL = val
}

// SetReviewCommentURL sets the value of ReviewCommentURL.
func (s *PullRequest) SetReviewCommentURL(val string) {
	s.ReviewCommentURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *PullRequest) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *PullRequest) SetStatusesURL(val url.URL) {
	s.StatusesURL = val
}

// SetNumber sets the value of Number.
func (s *PullRequest) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *PullRequest) SetState(val PullRequestState) {
	s.State = val
}

// SetLocked sets the value of Locked.
func (s *PullRequest) SetLocked(val bool) {
	s.Locked = val
}

// SetTitle sets the value of Title.
func (s *PullRequest) SetTitle(val string) {
	s.Title = val
}

// SetUser sets the value of User.
func (s *PullRequest) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetBody sets the value of Body.
func (s *PullRequest) SetBody(val NilString) {
	s.Body = val
}

// SetLabels sets the value of Labels.
func (s *PullRequest) SetLabels(val []PullRequestLabelsItem) {
	s.Labels = val
}

// SetMilestone sets the value of Milestone.
func (s *PullRequest) SetMilestone(val NilNullableMilestone) {
	s.Milestone = val
}

// SetActiveLockReason sets the value of ActiveLockReason.
func (s *PullRequest) SetActiveLockReason(val OptNilString) {
	s.ActiveLockReason = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PullRequest) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PullRequest) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *PullRequest) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetMergedAt sets the value of MergedAt.
func (s *PullRequest) SetMergedAt(val NilDateTime) {
	s.MergedAt = val
}

// SetMergeCommitSha sets the value of MergeCommitSha.
func (s *PullRequest) SetMergeCommitSha(val NilString) {
	s.MergeCommitSha = val
}

// SetAssignee sets the value of Assignee.
func (s *PullRequest) SetAssignee(val NilNullableSimpleUser) {
	s.Assignee = val
}

// SetAssignees sets the value of Assignees.
func (s *PullRequest) SetAssignees(val OptNilSimpleUserArray) {
	s.Assignees = val
}

// SetRequestedReviewers sets the value of RequestedReviewers.
func (s *PullRequest) SetRequestedReviewers(val OptNilSimpleUserArray) {
	s.RequestedReviewers = val
}

// SetRequestedTeams sets the value of RequestedTeams.
func (s *PullRequest) SetRequestedTeams(val OptNilTeamSimpleArray) {
	s.RequestedTeams = val
}

// SetHead sets the value of Head.
func (s *PullRequest) SetHead(val PullRequestHead) {
	s.Head = val
}

// SetBase sets the value of Base.
func (s *PullRequest) SetBase(val PullRequestBase) {
	s.Base = val
}

// SetLinks sets the value of Links.
func (s *PullRequest) SetLinks(val PullRequestLinks) {
	s.Links = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *PullRequest) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetAutoMerge sets the value of AutoMerge.
func (s *PullRequest) SetAutoMerge(val NilAutoMerge) {
	s.AutoMerge = val
}

// SetDraft sets the value of Draft.
func (s *PullRequest) SetDraft(val OptBool) {
	s.Draft = val
}

// SetMerged sets the value of Merged.
func (s *PullRequest) SetMerged(val bool) {
	s.Merged = val
}

// SetMergeable sets the value of Mergeable.
func (s *PullRequest) SetMergeable(val NilBool) {
	s.Mergeable = val
}

// SetRebaseable sets the value of Rebaseable.
func (s *PullRequest) SetRebaseable(val OptNilBool) {
	s.Rebaseable = val
}

// SetMergeableState sets the value of MergeableState.
func (s *PullRequest) SetMergeableState(val string) {
	s.MergeableState = val
}

// SetMergedBy sets the value of MergedBy.
func (s *PullRequest) SetMergedBy(val NilNullableSimpleUser) {
	s.MergedBy = val
}

// SetComments sets the value of Comments.
func (s *PullRequest) SetComments(val int) {
	s.Comments = val
}

// SetReviewComments sets the value of ReviewComments.
func (s *PullRequest) SetReviewComments(val int) {
	s.ReviewComments = val
}

// SetMaintainerCanModify sets the value of MaintainerCanModify.
func (s *PullRequest) SetMaintainerCanModify(val bool) {
	s.MaintainerCanModify = val
}

// SetCommits sets the value of Commits.
func (s *PullRequest) SetCommits(val int) {
	s.Commits = val
}

// SetAdditions sets the value of Additions.
func (s *PullRequest) SetAdditions(val int) {
	s.Additions = val
}

// SetDeletions sets the value of Deletions.
func (s *PullRequest) SetDeletions(val int) {
	s.Deletions = val
}

// SetChangedFiles sets the value of ChangedFiles.
func (s *PullRequest) SetChangedFiles(val int) {
	s.ChangedFiles = val
}

func (*PullRequest) pullsGetRes()    {}
func (*PullRequest) pullsUpdateRes() {}

type PullRequestBase struct {
	Label string              `json:"label"`
	Ref   string              `json:"ref"`
	Repo  PullRequestBaseRepo `json:"repo"`
	Sha   string              `json:"sha"`
	User  PullRequestBaseUser `json:"user"`
}

// GetLabel returns the value of Label.
func (s *PullRequestBase) GetLabel() string {
	return s.Label
}

// GetRef returns the value of Ref.
func (s *PullRequestBase) GetRef() string {
	return s.Ref
}

// GetRepo returns the value of Repo.
func (s *PullRequestBase) GetRepo() PullRequestBaseRepo {
	return s.Repo
}

// GetSha returns the value of Sha.
func (s *PullRequestBase) GetSha() string {
	return s.Sha
}

// GetUser returns the value of User.
func (s *PullRequestBase) GetUser() PullRequestBaseUser {
	return s.User
}

// SetLabel sets the value of Label.
func (s *PullRequestBase) SetLabel(val string) {
	s.Label = val
}

// SetRef sets the value of Ref.
func (s *PullRequestBase) SetRef(val string) {
	s.Ref = val
}

// SetRepo sets the value of Repo.
func (s *PullRequestBase) SetRepo(val PullRequestBaseRepo) {
	s.Repo = val
}

// SetSha sets the value of Sha.
func (s *PullRequestBase) SetSha(val string) {
	s.Sha = val
}

// SetUser sets the value of User.
func (s *PullRequestBase) SetUser(val PullRequestBaseUser) {
	s.User = val
}

type PullRequestBaseRepo struct {
	ArchiveURL       string                            `json:"archive_url"`
	AssigneesURL     string                            `json:"assignees_url"`
	BlobsURL         string                            `json:"blobs_url"`
	BranchesURL      string                            `json:"branches_url"`
	CollaboratorsURL string                            `json:"collaborators_url"`
	CommentsURL      string                            `json:"comments_url"`
	CommitsURL       string                            `json:"commits_url"`
	CompareURL       string                            `json:"compare_url"`
	ContentsURL      string                            `json:"contents_url"`
	ContributorsURL  url.URL                           `json:"contributors_url"`
	DeploymentsURL   url.URL                           `json:"deployments_url"`
	Description      NilString                         `json:"description"`
	DownloadsURL     url.URL                           `json:"downloads_url"`
	EventsURL        url.URL                           `json:"events_url"`
	Fork             bool                              `json:"fork"`
	ForksURL         url.URL                           `json:"forks_url"`
	FullName         string                            `json:"full_name"`
	GitCommitsURL    string                            `json:"git_commits_url"`
	GitRefsURL       string                            `json:"git_refs_url"`
	GitTagsURL       string                            `json:"git_tags_url"`
	HooksURL         url.URL                           `json:"hooks_url"`
	HTMLURL          url.URL                           `json:"html_url"`
	ID               int                               `json:"id"`
	NodeID           string                            `json:"node_id"`
	IssueCommentURL  string                            `json:"issue_comment_url"`
	IssueEventsURL   string                            `json:"issue_events_url"`
	IssuesURL        string                            `json:"issues_url"`
	KeysURL          string                            `json:"keys_url"`
	LabelsURL        string                            `json:"labels_url"`
	LanguagesURL     url.URL                           `json:"languages_url"`
	MergesURL        url.URL                           `json:"merges_url"`
	MilestonesURL    string                            `json:"milestones_url"`
	Name             string                            `json:"name"`
	NotificationsURL string                            `json:"notifications_url"`
	Owner            PullRequestBaseRepoOwner          `json:"owner"`
	Private          bool                              `json:"private"`
	PullsURL         string                            `json:"pulls_url"`
	ReleasesURL      string                            `json:"releases_url"`
	StargazersURL    url.URL                           `json:"stargazers_url"`
	StatusesURL      string                            `json:"statuses_url"`
	SubscribersURL   url.URL                           `json:"subscribers_url"`
	SubscriptionURL  url.URL                           `json:"subscription_url"`
	TagsURL          url.URL                           `json:"tags_url"`
	TeamsURL         url.URL                           `json:"teams_url"`
	TreesURL         string                            `json:"trees_url"`
	URL              url.URL                           `json:"url"`
	CloneURL         string                            `json:"clone_url"`
	DefaultBranch    string                            `json:"default_branch"`
	Forks            int                               `json:"forks"`
	ForksCount       int                               `json:"forks_count"`
	GitURL           string                            `json:"git_url"`
	HasDownloads     bool                              `json:"has_downloads"`
	HasIssues        bool                              `json:"has_issues"`
	HasProjects      bool                              `json:"has_projects"`
	HasWiki          bool                              `json:"has_wiki"`
	HasPages         bool                              `json:"has_pages"`
	Homepage         NilURI                            `json:"homepage"`
	Language         NilString                         `json:"language"`
	MasterBranch     OptString                         `json:"master_branch"`
	Archived         bool                              `json:"archived"`
	Disabled         bool                              `json:"disabled"`
	MirrorURL        NilURI                            `json:"mirror_url"`
	OpenIssues       int                               `json:"open_issues"`
	OpenIssuesCount  int                               `json:"open_issues_count"`
	Permissions      OptPullRequestBaseRepoPermissions `json:"permissions"`
	TempCloneToken   OptString                         `json:"temp_clone_token"`
	AllowMergeCommit OptBool                           `json:"allow_merge_commit"`
	AllowSquashMerge OptBool                           `json:"allow_squash_merge"`
	AllowRebaseMerge OptBool                           `json:"allow_rebase_merge"`
	License          NilNullableLicenseSimple          `json:"license"`
	PushedAt         time.Time                         `json:"pushed_at"`
	Size             int                               `json:"size"`
	SSHURL           string                            `json:"ssh_url"`
	StargazersCount  int                               `json:"stargazers_count"`
	SvnURL           url.URL                           `json:"svn_url"`
	Topics           []string                          `json:"topics"`
	Watchers         int                               `json:"watchers"`
	WatchersCount    int                               `json:"watchers_count"`
	CreatedAt        time.Time                         `json:"created_at"`
	UpdatedAt        time.Time                         `json:"updated_at"`
	AllowForking     OptBool                           `json:"allow_forking"`
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *PullRequestBaseRepo) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *PullRequestBaseRepo) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *PullRequestBaseRepo) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *PullRequestBaseRepo) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *PullRequestBaseRepo) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *PullRequestBaseRepo) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *PullRequestBaseRepo) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *PullRequestBaseRepo) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *PullRequestBaseRepo) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *PullRequestBaseRepo) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *PullRequestBaseRepo) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDescription returns the value of Description.
func (s *PullRequestBaseRepo) GetDescription() NilString {
	return s.Description
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *PullRequestBaseRepo) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PullRequestBaseRepo) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetFork returns the value of Fork.
func (s *PullRequestBaseRepo) GetFork() bool {
	return s.Fork
}

// GetForksURL returns the value of ForksURL.
func (s *PullRequestBaseRepo) GetForksURL() url.URL {
	return s.ForksURL
}

// GetFullName returns the value of FullName.
func (s *PullRequestBaseRepo) GetFullName() string {
	return s.FullName
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *PullRequestBaseRepo) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *PullRequestBaseRepo) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *PullRequestBaseRepo) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetHooksURL returns the value of HooksURL.
func (s *PullRequestBaseRepo) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestBaseRepo) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *PullRequestBaseRepo) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestBaseRepo) GetNodeID() string {
	return s.NodeID
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *PullRequestBaseRepo) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *PullRequestBaseRepo) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *PullRequestBaseRepo) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *PullRequestBaseRepo) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *PullRequestBaseRepo) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *PullRequestBaseRepo) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *PullRequestBaseRepo) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *PullRequestBaseRepo) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetName returns the value of Name.
func (s *PullRequestBaseRepo) GetName() string {
	return s.Name
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *PullRequestBaseRepo) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetOwner returns the value of Owner.
func (s *PullRequestBaseRepo) GetOwner() PullRequestBaseRepoOwner {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *PullRequestBaseRepo) GetPrivate() bool {
	return s.Private
}

// GetPullsURL returns the value of PullsURL.
func (s *PullRequestBaseRepo) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *PullRequestBaseRepo) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *PullRequestBaseRepo) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *PullRequestBaseRepo) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *PullRequestBaseRepo) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *PullRequestBaseRepo) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *PullRequestBaseRepo) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *PullRequestBaseRepo) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *PullRequestBaseRepo) GetTreesURL() string {
	return s.TreesURL
}

// GetURL returns the value of URL.
func (s *PullRequestBaseRepo) GetURL() url.URL {
	return s.URL
}

// GetCloneURL returns the value of CloneURL.
func (s *PullRequestBaseRepo) GetCloneURL() string {
	return s.CloneURL
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *PullRequestBaseRepo) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetForks returns the value of Forks.
func (s *PullRequestBaseRepo) GetForks() int {
	return s.Forks
}

// GetForksCount returns the value of ForksCount.
func (s *PullRequestBaseRepo) GetForksCount() int {
	return s.ForksCount
}

// GetGitURL returns the value of GitURL.
func (s *PullRequestBaseRepo) GetGitURL() string {
	return s.GitURL
}

// GetHasDownloads returns the value of HasDownloads.
func (s *PullRequestBaseRepo) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetHasIssues returns the value of HasIssues.
func (s *PullRequestBaseRepo) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *PullRequestBaseRepo) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *PullRequestBaseRepo) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *PullRequestBaseRepo) GetHasPages() bool {
	return s.HasPages
}

// GetHomepage returns the value of Homepage.
func (s *PullRequestBaseRepo) GetHomepage() NilURI {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *PullRequestBaseRepo) GetLanguage() NilString {
	return s.Language
}

// GetMasterBranch returns the value of MasterBranch.
func (s *PullRequestBaseRepo) GetMasterBranch() OptString {
	return s.MasterBranch
}

// GetArchived returns the value of Archived.
func (s *PullRequestBaseRepo) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *PullRequestBaseRepo) GetDisabled() bool {
	return s.Disabled
}

// GetMirrorURL returns the value of MirrorURL.
func (s *PullRequestBaseRepo) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetOpenIssues returns the value of OpenIssues.
func (s *PullRequestBaseRepo) GetOpenIssues() int {
	return s.OpenIssues
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *PullRequestBaseRepo) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetPermissions returns the value of Permissions.
func (s *PullRequestBaseRepo) GetPermissions() OptPullRequestBaseRepoPermissions {
	return s.Permissions
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *PullRequestBaseRepo) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *PullRequestBaseRepo) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *PullRequestBaseRepo) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *PullRequestBaseRepo) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetLicense returns the value of License.
func (s *PullRequestBaseRepo) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetPushedAt returns the value of PushedAt.
func (s *PullRequestBaseRepo) GetPushedAt() time.Time {
	return s.PushedAt
}

// GetSize returns the value of Size.
func (s *PullRequestBaseRepo) GetSize() int {
	return s.Size
}

// GetSSHURL returns the value of SSHURL.
func (s *PullRequestBaseRepo) GetSSHURL() string {
	return s.SSHURL
}

// GetStargazersCount returns the value of StargazersCount.
func (s *PullRequestBaseRepo) GetStargazersCount() int {
	return s.StargazersCount
}

// GetSvnURL returns the value of SvnURL.
func (s *PullRequestBaseRepo) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetTopics returns the value of Topics.
func (s *PullRequestBaseRepo) GetTopics() []string {
	return s.Topics
}

// GetWatchers returns the value of Watchers.
func (s *PullRequestBaseRepo) GetWatchers() int {
	return s.Watchers
}

// GetWatchersCount returns the value of WatchersCount.
func (s *PullRequestBaseRepo) GetWatchersCount() int {
	return s.WatchersCount
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PullRequestBaseRepo) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PullRequestBaseRepo) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetAllowForking returns the value of AllowForking.
func (s *PullRequestBaseRepo) GetAllowForking() OptBool {
	return s.AllowForking
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *PullRequestBaseRepo) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *PullRequestBaseRepo) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *PullRequestBaseRepo) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *PullRequestBaseRepo) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *PullRequestBaseRepo) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *PullRequestBaseRepo) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *PullRequestBaseRepo) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *PullRequestBaseRepo) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *PullRequestBaseRepo) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *PullRequestBaseRepo) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *PullRequestBaseRepo) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDescription sets the value of Description.
func (s *PullRequestBaseRepo) SetDescription(val NilString) {
	s.Description = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *PullRequestBaseRepo) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PullRequestBaseRepo) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetFork sets the value of Fork.
func (s *PullRequestBaseRepo) SetFork(val bool) {
	s.Fork = val
}

// SetForksURL sets the value of ForksURL.
func (s *PullRequestBaseRepo) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetFullName sets the value of FullName.
func (s *PullRequestBaseRepo) SetFullName(val string) {
	s.FullName = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *PullRequestBaseRepo) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *PullRequestBaseRepo) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *PullRequestBaseRepo) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *PullRequestBaseRepo) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestBaseRepo) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *PullRequestBaseRepo) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestBaseRepo) SetNodeID(val string) {
	s.NodeID = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *PullRequestBaseRepo) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *PullRequestBaseRepo) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *PullRequestBaseRepo) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *PullRequestBaseRepo) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *PullRequestBaseRepo) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *PullRequestBaseRepo) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *PullRequestBaseRepo) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *PullRequestBaseRepo) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetName sets the value of Name.
func (s *PullRequestBaseRepo) SetName(val string) {
	s.Name = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *PullRequestBaseRepo) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetOwner sets the value of Owner.
func (s *PullRequestBaseRepo) SetOwner(val PullRequestBaseRepoOwner) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *PullRequestBaseRepo) SetPrivate(val bool) {
	s.Private = val
}

// SetPullsURL sets the value of PullsURL.
func (s *PullRequestBaseRepo) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *PullRequestBaseRepo) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *PullRequestBaseRepo) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *PullRequestBaseRepo) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *PullRequestBaseRepo) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *PullRequestBaseRepo) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *PullRequestBaseRepo) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *PullRequestBaseRepo) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *PullRequestBaseRepo) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetURL sets the value of URL.
func (s *PullRequestBaseRepo) SetURL(val url.URL) {
	s.URL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *PullRequestBaseRepo) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *PullRequestBaseRepo) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetForks sets the value of Forks.
func (s *PullRequestBaseRepo) SetForks(val int) {
	s.Forks = val
}

// SetForksCount sets the value of ForksCount.
func (s *PullRequestBaseRepo) SetForksCount(val int) {
	s.ForksCount = val
}

// SetGitURL sets the value of GitURL.
func (s *PullRequestBaseRepo) SetGitURL(val string) {
	s.GitURL = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *PullRequestBaseRepo) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetHasIssues sets the value of HasIssues.
func (s *PullRequestBaseRepo) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *PullRequestBaseRepo) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *PullRequestBaseRepo) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *PullRequestBaseRepo) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHomepage sets the value of Homepage.
func (s *PullRequestBaseRepo) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *PullRequestBaseRepo) SetLanguage(val NilString) {
	s.Language = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *PullRequestBaseRepo) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

// SetArchived sets the value of Archived.
func (s *PullRequestBaseRepo) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *PullRequestBaseRepo) SetDisabled(val bool) {
	s.Disabled = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *PullRequestBaseRepo) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *PullRequestBaseRepo) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *PullRequestBaseRepo) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetPermissions sets the value of Permissions.
func (s *PullRequestBaseRepo) SetPermissions(val OptPullRequestBaseRepoPermissions) {
	s.Permissions = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *PullRequestBaseRepo) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *PullRequestBaseRepo) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *PullRequestBaseRepo) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *PullRequestBaseRepo) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetLicense sets the value of License.
func (s *PullRequestBaseRepo) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetPushedAt sets the value of PushedAt.
func (s *PullRequestBaseRepo) SetPushedAt(val time.Time) {
	s.PushedAt = val
}

// SetSize sets the value of Size.
func (s *PullRequestBaseRepo) SetSize(val int) {
	s.Size = val
}

// SetSSHURL sets the value of SSHURL.
func (s *PullRequestBaseRepo) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *PullRequestBaseRepo) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetSvnURL sets the value of SvnURL.
func (s *PullRequestBaseRepo) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetTopics sets the value of Topics.
func (s *PullRequestBaseRepo) SetTopics(val []string) {
	s.Topics = val
}

// SetWatchers sets the value of Watchers.
func (s *PullRequestBaseRepo) SetWatchers(val int) {
	s.Watchers = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *PullRequestBaseRepo) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PullRequestBaseRepo) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PullRequestBaseRepo) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetAllowForking sets the value of AllowForking.
func (s *PullRequestBaseRepo) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

type PullRequestBaseRepoOwner struct {
	AvatarURL         url.URL   `json:"avatar_url"`
	EventsURL         string    `json:"events_url"`
	FollowersURL      url.URL   `json:"followers_url"`
	FollowingURL      string    `json:"following_url"`
	GistsURL          string    `json:"gists_url"`
	GravatarID        NilString `json:"gravatar_id"`
	HTMLURL           url.URL   `json:"html_url"`
	ID                int       `json:"id"`
	NodeID            string    `json:"node_id"`
	Login             string    `json:"login"`
	OrganizationsURL  url.URL   `json:"organizations_url"`
	ReceivedEventsURL url.URL   `json:"received_events_url"`
	ReposURL          url.URL   `json:"repos_url"`
	SiteAdmin         bool      `json:"site_admin"`
	StarredURL        string    `json:"starred_url"`
	SubscriptionsURL  url.URL   `json:"subscriptions_url"`
	Type              string    `json:"type"`
	URL               url.URL   `json:"url"`
}

// GetAvatarURL returns the value of AvatarURL.
func (s *PullRequestBaseRepoOwner) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PullRequestBaseRepoOwner) GetEventsURL() string {
	return s.EventsURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *PullRequestBaseRepoOwner) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *PullRequestBaseRepoOwner) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *PullRequestBaseRepoOwner) GetGistsURL() string {
	return s.GistsURL
}

// GetGravatarID returns the value of GravatarID.
func (s *PullRequestBaseRepoOwner) GetGravatarID() NilString {
	return s.GravatarID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestBaseRepoOwner) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *PullRequestBaseRepoOwner) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestBaseRepoOwner) GetNodeID() string {
	return s.NodeID
}

// GetLogin returns the value of Login.
func (s *PullRequestBaseRepoOwner) GetLogin() string {
	return s.Login
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *PullRequestBaseRepoOwner) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *PullRequestBaseRepoOwner) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetReposURL returns the value of ReposURL.
func (s *PullRequestBaseRepoOwner) GetReposURL() url.URL {
	return s.ReposURL
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *PullRequestBaseRepoOwner) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetStarredURL returns the value of StarredURL.
func (s *PullRequestBaseRepoOwner) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *PullRequestBaseRepoOwner) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetType returns the value of Type.
func (s *PullRequestBaseRepoOwner) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *PullRequestBaseRepoOwner) GetURL() url.URL {
	return s.URL
}

// SetAvatarURL sets the value of AvatarURL.
func (s *PullRequestBaseRepoOwner) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PullRequestBaseRepoOwner) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *PullRequestBaseRepoOwner) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *PullRequestBaseRepoOwner) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *PullRequestBaseRepoOwner) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *PullRequestBaseRepoOwner) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestBaseRepoOwner) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *PullRequestBaseRepoOwner) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestBaseRepoOwner) SetNodeID(val string) {
	s.NodeID = val
}

// SetLogin sets the value of Login.
func (s *PullRequestBaseRepoOwner) SetLogin(val string) {
	s.Login = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *PullRequestBaseRepoOwner) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *PullRequestBaseRepoOwner) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *PullRequestBaseRepoOwner) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *PullRequestBaseRepoOwner) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetStarredURL sets the value of StarredURL.
func (s *PullRequestBaseRepoOwner) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *PullRequestBaseRepoOwner) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetType sets the value of Type.
func (s *PullRequestBaseRepoOwner) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *PullRequestBaseRepoOwner) SetURL(val url.URL) {
	s.URL = val
}

type PullRequestBaseRepoPermissions struct {
	Admin    bool    `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     bool    `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     bool    `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *PullRequestBaseRepoPermissions) GetAdmin() bool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *PullRequestBaseRepoPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *PullRequestBaseRepoPermissions) GetPush() bool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *PullRequestBaseRepoPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *PullRequestBaseRepoPermissions) GetPull() bool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *PullRequestBaseRepoPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *PullRequestBaseRepoPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *PullRequestBaseRepoPermissions) SetPush(val bool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *PullRequestBaseRepoPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *PullRequestBaseRepoPermissions) SetPull(val bool) {
	s.Pull = val
}

type PullRequestBaseUser struct {
	AvatarURL         url.URL   `json:"avatar_url"`
	EventsURL         string    `json:"events_url"`
	FollowersURL      url.URL   `json:"followers_url"`
	FollowingURL      string    `json:"following_url"`
	GistsURL          string    `json:"gists_url"`
	GravatarID        NilString `json:"gravatar_id"`
	HTMLURL           url.URL   `json:"html_url"`
	ID                int       `json:"id"`
	NodeID            string    `json:"node_id"`
	Login             string    `json:"login"`
	OrganizationsURL  url.URL   `json:"organizations_url"`
	ReceivedEventsURL url.URL   `json:"received_events_url"`
	ReposURL          url.URL   `json:"repos_url"`
	SiteAdmin         bool      `json:"site_admin"`
	StarredURL        string    `json:"starred_url"`
	SubscriptionsURL  url.URL   `json:"subscriptions_url"`
	Type              string    `json:"type"`
	URL               url.URL   `json:"url"`
}

// GetAvatarURL returns the value of AvatarURL.
func (s *PullRequestBaseUser) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PullRequestBaseUser) GetEventsURL() string {
	return s.EventsURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *PullRequestBaseUser) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *PullRequestBaseUser) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *PullRequestBaseUser) GetGistsURL() string {
	return s.GistsURL
}

// GetGravatarID returns the value of GravatarID.
func (s *PullRequestBaseUser) GetGravatarID() NilString {
	return s.GravatarID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestBaseUser) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *PullRequestBaseUser) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestBaseUser) GetNodeID() string {
	return s.NodeID
}

// GetLogin returns the value of Login.
func (s *PullRequestBaseUser) GetLogin() string {
	return s.Login
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *PullRequestBaseUser) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *PullRequestBaseUser) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetReposURL returns the value of ReposURL.
func (s *PullRequestBaseUser) GetReposURL() url.URL {
	return s.ReposURL
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *PullRequestBaseUser) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetStarredURL returns the value of StarredURL.
func (s *PullRequestBaseUser) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *PullRequestBaseUser) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetType returns the value of Type.
func (s *PullRequestBaseUser) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *PullRequestBaseUser) GetURL() url.URL {
	return s.URL
}

// SetAvatarURL sets the value of AvatarURL.
func (s *PullRequestBaseUser) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PullRequestBaseUser) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *PullRequestBaseUser) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *PullRequestBaseUser) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *PullRequestBaseUser) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *PullRequestBaseUser) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestBaseUser) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *PullRequestBaseUser) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestBaseUser) SetNodeID(val string) {
	s.NodeID = val
}

// SetLogin sets the value of Login.
func (s *PullRequestBaseUser) SetLogin(val string) {
	s.Login = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *PullRequestBaseUser) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *PullRequestBaseUser) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *PullRequestBaseUser) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *PullRequestBaseUser) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetStarredURL sets the value of StarredURL.
func (s *PullRequestBaseUser) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *PullRequestBaseUser) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetType sets the value of Type.
func (s *PullRequestBaseUser) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *PullRequestBaseUser) SetURL(val url.URL) {
	s.URL = val
}

type PullRequestHead struct {
	Label string                 `json:"label"`
	Ref   string                 `json:"ref"`
	Repo  NilPullRequestHeadRepo `json:"repo"`
	Sha   string                 `json:"sha"`
	User  PullRequestHeadUser    `json:"user"`
}

// GetLabel returns the value of Label.
func (s *PullRequestHead) GetLabel() string {
	return s.Label
}

// GetRef returns the value of Ref.
func (s *PullRequestHead) GetRef() string {
	return s.Ref
}

// GetRepo returns the value of Repo.
func (s *PullRequestHead) GetRepo() NilPullRequestHeadRepo {
	return s.Repo
}

// GetSha returns the value of Sha.
func (s *PullRequestHead) GetSha() string {
	return s.Sha
}

// GetUser returns the value of User.
func (s *PullRequestHead) GetUser() PullRequestHeadUser {
	return s.User
}

// SetLabel sets the value of Label.
func (s *PullRequestHead) SetLabel(val string) {
	s.Label = val
}

// SetRef sets the value of Ref.
func (s *PullRequestHead) SetRef(val string) {
	s.Ref = val
}

// SetRepo sets the value of Repo.
func (s *PullRequestHead) SetRepo(val NilPullRequestHeadRepo) {
	s.Repo = val
}

// SetSha sets the value of Sha.
func (s *PullRequestHead) SetSha(val string) {
	s.Sha = val
}

// SetUser sets the value of User.
func (s *PullRequestHead) SetUser(val PullRequestHeadUser) {
	s.User = val
}

type PullRequestHeadRepo struct {
	ArchiveURL       string                            `json:"archive_url"`
	AssigneesURL     string                            `json:"assignees_url"`
	BlobsURL         string                            `json:"blobs_url"`
	BranchesURL      string                            `json:"branches_url"`
	CollaboratorsURL string                            `json:"collaborators_url"`
	CommentsURL      string                            `json:"comments_url"`
	CommitsURL       string                            `json:"commits_url"`
	CompareURL       string                            `json:"compare_url"`
	ContentsURL      string                            `json:"contents_url"`
	ContributorsURL  url.URL                           `json:"contributors_url"`
	DeploymentsURL   url.URL                           `json:"deployments_url"`
	Description      NilString                         `json:"description"`
	DownloadsURL     url.URL                           `json:"downloads_url"`
	EventsURL        url.URL                           `json:"events_url"`
	Fork             bool                              `json:"fork"`
	ForksURL         url.URL                           `json:"forks_url"`
	FullName         string                            `json:"full_name"`
	GitCommitsURL    string                            `json:"git_commits_url"`
	GitRefsURL       string                            `json:"git_refs_url"`
	GitTagsURL       string                            `json:"git_tags_url"`
	HooksURL         url.URL                           `json:"hooks_url"`
	HTMLURL          url.URL                           `json:"html_url"`
	ID               int                               `json:"id"`
	NodeID           string                            `json:"node_id"`
	IssueCommentURL  string                            `json:"issue_comment_url"`
	IssueEventsURL   string                            `json:"issue_events_url"`
	IssuesURL        string                            `json:"issues_url"`
	KeysURL          string                            `json:"keys_url"`
	LabelsURL        string                            `json:"labels_url"`
	LanguagesURL     url.URL                           `json:"languages_url"`
	MergesURL        url.URL                           `json:"merges_url"`
	MilestonesURL    string                            `json:"milestones_url"`
	Name             string                            `json:"name"`
	NotificationsURL string                            `json:"notifications_url"`
	Owner            PullRequestHeadRepoOwner          `json:"owner"`
	Private          bool                              `json:"private"`
	PullsURL         string                            `json:"pulls_url"`
	ReleasesURL      string                            `json:"releases_url"`
	StargazersURL    url.URL                           `json:"stargazers_url"`
	StatusesURL      string                            `json:"statuses_url"`
	SubscribersURL   url.URL                           `json:"subscribers_url"`
	SubscriptionURL  url.URL                           `json:"subscription_url"`
	TagsURL          url.URL                           `json:"tags_url"`
	TeamsURL         url.URL                           `json:"teams_url"`
	TreesURL         string                            `json:"trees_url"`
	URL              url.URL                           `json:"url"`
	CloneURL         string                            `json:"clone_url"`
	DefaultBranch    string                            `json:"default_branch"`
	Forks            int                               `json:"forks"`
	ForksCount       int                               `json:"forks_count"`
	GitURL           string                            `json:"git_url"`
	HasDownloads     bool                              `json:"has_downloads"`
	HasIssues        bool                              `json:"has_issues"`
	HasProjects      bool                              `json:"has_projects"`
	HasWiki          bool                              `json:"has_wiki"`
	HasPages         bool                              `json:"has_pages"`
	Homepage         NilURI                            `json:"homepage"`
	Language         NilString                         `json:"language"`
	MasterBranch     OptString                         `json:"master_branch"`
	Archived         bool                              `json:"archived"`
	Disabled         bool                              `json:"disabled"`
	MirrorURL        NilURI                            `json:"mirror_url"`
	OpenIssues       int                               `json:"open_issues"`
	OpenIssuesCount  int                               `json:"open_issues_count"`
	Permissions      OptPullRequestHeadRepoPermissions `json:"permissions"`
	TempCloneToken   OptString                         `json:"temp_clone_token"`
	AllowMergeCommit OptBool                           `json:"allow_merge_commit"`
	AllowSquashMerge OptBool                           `json:"allow_squash_merge"`
	AllowRebaseMerge OptBool                           `json:"allow_rebase_merge"`
	License          NilPullRequestHeadRepoLicense     `json:"license"`
	PushedAt         time.Time                         `json:"pushed_at"`
	Size             int                               `json:"size"`
	SSHURL           string                            `json:"ssh_url"`
	StargazersCount  int                               `json:"stargazers_count"`
	SvnURL           url.URL                           `json:"svn_url"`
	Topics           []string                          `json:"topics"`
	Watchers         int                               `json:"watchers"`
	WatchersCount    int                               `json:"watchers_count"`
	CreatedAt        time.Time                         `json:"created_at"`
	UpdatedAt        time.Time                         `json:"updated_at"`
	AllowForking     OptBool                           `json:"allow_forking"`
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *PullRequestHeadRepo) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *PullRequestHeadRepo) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *PullRequestHeadRepo) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *PullRequestHeadRepo) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *PullRequestHeadRepo) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *PullRequestHeadRepo) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *PullRequestHeadRepo) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *PullRequestHeadRepo) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *PullRequestHeadRepo) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *PullRequestHeadRepo) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *PullRequestHeadRepo) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDescription returns the value of Description.
func (s *PullRequestHeadRepo) GetDescription() NilString {
	return s.Description
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *PullRequestHeadRepo) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PullRequestHeadRepo) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetFork returns the value of Fork.
func (s *PullRequestHeadRepo) GetFork() bool {
	return s.Fork
}

// GetForksURL returns the value of ForksURL.
func (s *PullRequestHeadRepo) GetForksURL() url.URL {
	return s.ForksURL
}

// GetFullName returns the value of FullName.
func (s *PullRequestHeadRepo) GetFullName() string {
	return s.FullName
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *PullRequestHeadRepo) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *PullRequestHeadRepo) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *PullRequestHeadRepo) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetHooksURL returns the value of HooksURL.
func (s *PullRequestHeadRepo) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestHeadRepo) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *PullRequestHeadRepo) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestHeadRepo) GetNodeID() string {
	return s.NodeID
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *PullRequestHeadRepo) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *PullRequestHeadRepo) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *PullRequestHeadRepo) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *PullRequestHeadRepo) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *PullRequestHeadRepo) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *PullRequestHeadRepo) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *PullRequestHeadRepo) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *PullRequestHeadRepo) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetName returns the value of Name.
func (s *PullRequestHeadRepo) GetName() string {
	return s.Name
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *PullRequestHeadRepo) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetOwner returns the value of Owner.
func (s *PullRequestHeadRepo) GetOwner() PullRequestHeadRepoOwner {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *PullRequestHeadRepo) GetPrivate() bool {
	return s.Private
}

// GetPullsURL returns the value of PullsURL.
func (s *PullRequestHeadRepo) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *PullRequestHeadRepo) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *PullRequestHeadRepo) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *PullRequestHeadRepo) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *PullRequestHeadRepo) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *PullRequestHeadRepo) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *PullRequestHeadRepo) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *PullRequestHeadRepo) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *PullRequestHeadRepo) GetTreesURL() string {
	return s.TreesURL
}

// GetURL returns the value of URL.
func (s *PullRequestHeadRepo) GetURL() url.URL {
	return s.URL
}

// GetCloneURL returns the value of CloneURL.
func (s *PullRequestHeadRepo) GetCloneURL() string {
	return s.CloneURL
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *PullRequestHeadRepo) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetForks returns the value of Forks.
func (s *PullRequestHeadRepo) GetForks() int {
	return s.Forks
}

// GetForksCount returns the value of ForksCount.
func (s *PullRequestHeadRepo) GetForksCount() int {
	return s.ForksCount
}

// GetGitURL returns the value of GitURL.
func (s *PullRequestHeadRepo) GetGitURL() string {
	return s.GitURL
}

// GetHasDownloads returns the value of HasDownloads.
func (s *PullRequestHeadRepo) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetHasIssues returns the value of HasIssues.
func (s *PullRequestHeadRepo) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *PullRequestHeadRepo) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *PullRequestHeadRepo) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *PullRequestHeadRepo) GetHasPages() bool {
	return s.HasPages
}

// GetHomepage returns the value of Homepage.
func (s *PullRequestHeadRepo) GetHomepage() NilURI {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *PullRequestHeadRepo) GetLanguage() NilString {
	return s.Language
}

// GetMasterBranch returns the value of MasterBranch.
func (s *PullRequestHeadRepo) GetMasterBranch() OptString {
	return s.MasterBranch
}

// GetArchived returns the value of Archived.
func (s *PullRequestHeadRepo) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *PullRequestHeadRepo) GetDisabled() bool {
	return s.Disabled
}

// GetMirrorURL returns the value of MirrorURL.
func (s *PullRequestHeadRepo) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetOpenIssues returns the value of OpenIssues.
func (s *PullRequestHeadRepo) GetOpenIssues() int {
	return s.OpenIssues
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *PullRequestHeadRepo) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetPermissions returns the value of Permissions.
func (s *PullRequestHeadRepo) GetPermissions() OptPullRequestHeadRepoPermissions {
	return s.Permissions
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *PullRequestHeadRepo) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *PullRequestHeadRepo) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *PullRequestHeadRepo) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *PullRequestHeadRepo) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetLicense returns the value of License.
func (s *PullRequestHeadRepo) GetLicense() NilPullRequestHeadRepoLicense {
	return s.License
}

// GetPushedAt returns the value of PushedAt.
func (s *PullRequestHeadRepo) GetPushedAt() time.Time {
	return s.PushedAt
}

// GetSize returns the value of Size.
func (s *PullRequestHeadRepo) GetSize() int {
	return s.Size
}

// GetSSHURL returns the value of SSHURL.
func (s *PullRequestHeadRepo) GetSSHURL() string {
	return s.SSHURL
}

// GetStargazersCount returns the value of StargazersCount.
func (s *PullRequestHeadRepo) GetStargazersCount() int {
	return s.StargazersCount
}

// GetSvnURL returns the value of SvnURL.
func (s *PullRequestHeadRepo) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetTopics returns the value of Topics.
func (s *PullRequestHeadRepo) GetTopics() []string {
	return s.Topics
}

// GetWatchers returns the value of Watchers.
func (s *PullRequestHeadRepo) GetWatchers() int {
	return s.Watchers
}

// GetWatchersCount returns the value of WatchersCount.
func (s *PullRequestHeadRepo) GetWatchersCount() int {
	return s.WatchersCount
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PullRequestHeadRepo) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PullRequestHeadRepo) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetAllowForking returns the value of AllowForking.
func (s *PullRequestHeadRepo) GetAllowForking() OptBool {
	return s.AllowForking
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *PullRequestHeadRepo) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *PullRequestHeadRepo) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *PullRequestHeadRepo) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *PullRequestHeadRepo) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *PullRequestHeadRepo) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *PullRequestHeadRepo) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *PullRequestHeadRepo) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *PullRequestHeadRepo) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *PullRequestHeadRepo) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *PullRequestHeadRepo) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *PullRequestHeadRepo) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDescription sets the value of Description.
func (s *PullRequestHeadRepo) SetDescription(val NilString) {
	s.Description = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *PullRequestHeadRepo) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PullRequestHeadRepo) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetFork sets the value of Fork.
func (s *PullRequestHeadRepo) SetFork(val bool) {
	s.Fork = val
}

// SetForksURL sets the value of ForksURL.
func (s *PullRequestHeadRepo) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetFullName sets the value of FullName.
func (s *PullRequestHeadRepo) SetFullName(val string) {
	s.FullName = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *PullRequestHeadRepo) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *PullRequestHeadRepo) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *PullRequestHeadRepo) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *PullRequestHeadRepo) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestHeadRepo) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *PullRequestHeadRepo) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestHeadRepo) SetNodeID(val string) {
	s.NodeID = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *PullRequestHeadRepo) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *PullRequestHeadRepo) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *PullRequestHeadRepo) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *PullRequestHeadRepo) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *PullRequestHeadRepo) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *PullRequestHeadRepo) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *PullRequestHeadRepo) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *PullRequestHeadRepo) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetName sets the value of Name.
func (s *PullRequestHeadRepo) SetName(val string) {
	s.Name = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *PullRequestHeadRepo) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetOwner sets the value of Owner.
func (s *PullRequestHeadRepo) SetOwner(val PullRequestHeadRepoOwner) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *PullRequestHeadRepo) SetPrivate(val bool) {
	s.Private = val
}

// SetPullsURL sets the value of PullsURL.
func (s *PullRequestHeadRepo) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *PullRequestHeadRepo) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *PullRequestHeadRepo) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *PullRequestHeadRepo) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *PullRequestHeadRepo) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *PullRequestHeadRepo) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *PullRequestHeadRepo) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *PullRequestHeadRepo) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *PullRequestHeadRepo) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetURL sets the value of URL.
func (s *PullRequestHeadRepo) SetURL(val url.URL) {
	s.URL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *PullRequestHeadRepo) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *PullRequestHeadRepo) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetForks sets the value of Forks.
func (s *PullRequestHeadRepo) SetForks(val int) {
	s.Forks = val
}

// SetForksCount sets the value of ForksCount.
func (s *PullRequestHeadRepo) SetForksCount(val int) {
	s.ForksCount = val
}

// SetGitURL sets the value of GitURL.
func (s *PullRequestHeadRepo) SetGitURL(val string) {
	s.GitURL = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *PullRequestHeadRepo) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetHasIssues sets the value of HasIssues.
func (s *PullRequestHeadRepo) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *PullRequestHeadRepo) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *PullRequestHeadRepo) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *PullRequestHeadRepo) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHomepage sets the value of Homepage.
func (s *PullRequestHeadRepo) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *PullRequestHeadRepo) SetLanguage(val NilString) {
	s.Language = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *PullRequestHeadRepo) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

// SetArchived sets the value of Archived.
func (s *PullRequestHeadRepo) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *PullRequestHeadRepo) SetDisabled(val bool) {
	s.Disabled = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *PullRequestHeadRepo) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *PullRequestHeadRepo) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *PullRequestHeadRepo) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetPermissions sets the value of Permissions.
func (s *PullRequestHeadRepo) SetPermissions(val OptPullRequestHeadRepoPermissions) {
	s.Permissions = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *PullRequestHeadRepo) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *PullRequestHeadRepo) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *PullRequestHeadRepo) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *PullRequestHeadRepo) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetLicense sets the value of License.
func (s *PullRequestHeadRepo) SetLicense(val NilPullRequestHeadRepoLicense) {
	s.License = val
}

// SetPushedAt sets the value of PushedAt.
func (s *PullRequestHeadRepo) SetPushedAt(val time.Time) {
	s.PushedAt = val
}

// SetSize sets the value of Size.
func (s *PullRequestHeadRepo) SetSize(val int) {
	s.Size = val
}

// SetSSHURL sets the value of SSHURL.
func (s *PullRequestHeadRepo) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *PullRequestHeadRepo) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetSvnURL sets the value of SvnURL.
func (s *PullRequestHeadRepo) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetTopics sets the value of Topics.
func (s *PullRequestHeadRepo) SetTopics(val []string) {
	s.Topics = val
}

// SetWatchers sets the value of Watchers.
func (s *PullRequestHeadRepo) SetWatchers(val int) {
	s.Watchers = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *PullRequestHeadRepo) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PullRequestHeadRepo) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PullRequestHeadRepo) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetAllowForking sets the value of AllowForking.
func (s *PullRequestHeadRepo) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

type PullRequestHeadRepoLicense struct {
	Key    string    `json:"key"`
	Name   string    `json:"name"`
	URL    NilURI    `json:"url"`
	SpdxID NilString `json:"spdx_id"`
	NodeID string    `json:"node_id"`
}

// GetKey returns the value of Key.
func (s *PullRequestHeadRepoLicense) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *PullRequestHeadRepoLicense) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *PullRequestHeadRepoLicense) GetURL() NilURI {
	return s.URL
}

// GetSpdxID returns the value of SpdxID.
func (s *PullRequestHeadRepoLicense) GetSpdxID() NilString {
	return s.SpdxID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestHeadRepoLicense) GetNodeID() string {
	return s.NodeID
}

// SetKey sets the value of Key.
func (s *PullRequestHeadRepoLicense) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *PullRequestHeadRepoLicense) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *PullRequestHeadRepoLicense) SetURL(val NilURI) {
	s.URL = val
}

// SetSpdxID sets the value of SpdxID.
func (s *PullRequestHeadRepoLicense) SetSpdxID(val NilString) {
	s.SpdxID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestHeadRepoLicense) SetNodeID(val string) {
	s.NodeID = val
}

type PullRequestHeadRepoOwner struct {
	AvatarURL         url.URL   `json:"avatar_url"`
	EventsURL         string    `json:"events_url"`
	FollowersURL      url.URL   `json:"followers_url"`
	FollowingURL      string    `json:"following_url"`
	GistsURL          string    `json:"gists_url"`
	GravatarID        NilString `json:"gravatar_id"`
	HTMLURL           url.URL   `json:"html_url"`
	ID                int       `json:"id"`
	NodeID            string    `json:"node_id"`
	Login             string    `json:"login"`
	OrganizationsURL  url.URL   `json:"organizations_url"`
	ReceivedEventsURL url.URL   `json:"received_events_url"`
	ReposURL          url.URL   `json:"repos_url"`
	SiteAdmin         bool      `json:"site_admin"`
	StarredURL        string    `json:"starred_url"`
	SubscriptionsURL  url.URL   `json:"subscriptions_url"`
	Type              string    `json:"type"`
	URL               url.URL   `json:"url"`
}

// GetAvatarURL returns the value of AvatarURL.
func (s *PullRequestHeadRepoOwner) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PullRequestHeadRepoOwner) GetEventsURL() string {
	return s.EventsURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *PullRequestHeadRepoOwner) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *PullRequestHeadRepoOwner) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *PullRequestHeadRepoOwner) GetGistsURL() string {
	return s.GistsURL
}

// GetGravatarID returns the value of GravatarID.
func (s *PullRequestHeadRepoOwner) GetGravatarID() NilString {
	return s.GravatarID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestHeadRepoOwner) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *PullRequestHeadRepoOwner) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestHeadRepoOwner) GetNodeID() string {
	return s.NodeID
}

// GetLogin returns the value of Login.
func (s *PullRequestHeadRepoOwner) GetLogin() string {
	return s.Login
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *PullRequestHeadRepoOwner) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *PullRequestHeadRepoOwner) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetReposURL returns the value of ReposURL.
func (s *PullRequestHeadRepoOwner) GetReposURL() url.URL {
	return s.ReposURL
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *PullRequestHeadRepoOwner) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetStarredURL returns the value of StarredURL.
func (s *PullRequestHeadRepoOwner) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *PullRequestHeadRepoOwner) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetType returns the value of Type.
func (s *PullRequestHeadRepoOwner) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *PullRequestHeadRepoOwner) GetURL() url.URL {
	return s.URL
}

// SetAvatarURL sets the value of AvatarURL.
func (s *PullRequestHeadRepoOwner) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PullRequestHeadRepoOwner) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *PullRequestHeadRepoOwner) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *PullRequestHeadRepoOwner) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *PullRequestHeadRepoOwner) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *PullRequestHeadRepoOwner) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestHeadRepoOwner) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *PullRequestHeadRepoOwner) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestHeadRepoOwner) SetNodeID(val string) {
	s.NodeID = val
}

// SetLogin sets the value of Login.
func (s *PullRequestHeadRepoOwner) SetLogin(val string) {
	s.Login = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *PullRequestHeadRepoOwner) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *PullRequestHeadRepoOwner) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *PullRequestHeadRepoOwner) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *PullRequestHeadRepoOwner) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetStarredURL sets the value of StarredURL.
func (s *PullRequestHeadRepoOwner) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *PullRequestHeadRepoOwner) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetType sets the value of Type.
func (s *PullRequestHeadRepoOwner) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *PullRequestHeadRepoOwner) SetURL(val url.URL) {
	s.URL = val
}

type PullRequestHeadRepoPermissions struct {
	Admin    bool    `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     bool    `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     bool    `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *PullRequestHeadRepoPermissions) GetAdmin() bool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *PullRequestHeadRepoPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *PullRequestHeadRepoPermissions) GetPush() bool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *PullRequestHeadRepoPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *PullRequestHeadRepoPermissions) GetPull() bool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *PullRequestHeadRepoPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *PullRequestHeadRepoPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *PullRequestHeadRepoPermissions) SetPush(val bool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *PullRequestHeadRepoPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *PullRequestHeadRepoPermissions) SetPull(val bool) {
	s.Pull = val
}

type PullRequestHeadUser struct {
	AvatarURL         url.URL   `json:"avatar_url"`
	EventsURL         string    `json:"events_url"`
	FollowersURL      url.URL   `json:"followers_url"`
	FollowingURL      string    `json:"following_url"`
	GistsURL          string    `json:"gists_url"`
	GravatarID        NilString `json:"gravatar_id"`
	HTMLURL           url.URL   `json:"html_url"`
	ID                int       `json:"id"`
	NodeID            string    `json:"node_id"`
	Login             string    `json:"login"`
	OrganizationsURL  url.URL   `json:"organizations_url"`
	ReceivedEventsURL url.URL   `json:"received_events_url"`
	ReposURL          url.URL   `json:"repos_url"`
	SiteAdmin         bool      `json:"site_admin"`
	StarredURL        string    `json:"starred_url"`
	SubscriptionsURL  url.URL   `json:"subscriptions_url"`
	Type              string    `json:"type"`
	URL               url.URL   `json:"url"`
}

// GetAvatarURL returns the value of AvatarURL.
func (s *PullRequestHeadUser) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetEventsURL returns the value of EventsURL.
func (s *PullRequestHeadUser) GetEventsURL() string {
	return s.EventsURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *PullRequestHeadUser) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *PullRequestHeadUser) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *PullRequestHeadUser) GetGistsURL() string {
	return s.GistsURL
}

// GetGravatarID returns the value of GravatarID.
func (s *PullRequestHeadUser) GetGravatarID() NilString {
	return s.GravatarID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestHeadUser) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetID returns the value of ID.
func (s *PullRequestHeadUser) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestHeadUser) GetNodeID() string {
	return s.NodeID
}

// GetLogin returns the value of Login.
func (s *PullRequestHeadUser) GetLogin() string {
	return s.Login
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *PullRequestHeadUser) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *PullRequestHeadUser) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetReposURL returns the value of ReposURL.
func (s *PullRequestHeadUser) GetReposURL() url.URL {
	return s.ReposURL
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *PullRequestHeadUser) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetStarredURL returns the value of StarredURL.
func (s *PullRequestHeadUser) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *PullRequestHeadUser) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetType returns the value of Type.
func (s *PullRequestHeadUser) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *PullRequestHeadUser) GetURL() url.URL {
	return s.URL
}

// SetAvatarURL sets the value of AvatarURL.
func (s *PullRequestHeadUser) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *PullRequestHeadUser) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *PullRequestHeadUser) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *PullRequestHeadUser) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *PullRequestHeadUser) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *PullRequestHeadUser) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestHeadUser) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetID sets the value of ID.
func (s *PullRequestHeadUser) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestHeadUser) SetNodeID(val string) {
	s.NodeID = val
}

// SetLogin sets the value of Login.
func (s *PullRequestHeadUser) SetLogin(val string) {
	s.Login = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *PullRequestHeadUser) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *PullRequestHeadUser) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *PullRequestHeadUser) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *PullRequestHeadUser) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetStarredURL sets the value of StarredURL.
func (s *PullRequestHeadUser) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *PullRequestHeadUser) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetType sets the value of Type.
func (s *PullRequestHeadUser) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *PullRequestHeadUser) SetURL(val url.URL) {
	s.URL = val
}

// PullRequestHeaders wraps PullRequest with response headers.
type PullRequestHeaders struct {
	Location OptString
	Response PullRequest
}

// GetLocation returns the value of Location.
func (s *PullRequestHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *PullRequestHeaders) GetResponse() PullRequest {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *PullRequestHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *PullRequestHeaders) SetResponse(val PullRequest) {
	s.Response = val
}

func (*PullRequestHeaders) pullsCreateRes() {}

type PullRequestLabelsItem struct {
	ID          OptInt64     `json:"id"`
	NodeID      OptString    `json:"node_id"`
	URL         OptString    `json:"url"`
	Name        OptString    `json:"name"`
	Description OptNilString `json:"description"`
	Color       OptString    `json:"color"`
	Default     OptBool      `json:"default"`
}

// GetID returns the value of ID.
func (s *PullRequestLabelsItem) GetID() OptInt64 {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestLabelsItem) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *PullRequestLabelsItem) GetURL() OptString {
	return s.URL
}

// GetName returns the value of Name.
func (s *PullRequestLabelsItem) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PullRequestLabelsItem) GetDescription() OptNilString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *PullRequestLabelsItem) GetColor() OptString {
	return s.Color
}

// GetDefault returns the value of Default.
func (s *PullRequestLabelsItem) GetDefault() OptBool {
	return s.Default
}

// SetID sets the value of ID.
func (s *PullRequestLabelsItem) SetID(val OptInt64) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestLabelsItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *PullRequestLabelsItem) SetURL(val OptString) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *PullRequestLabelsItem) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PullRequestLabelsItem) SetDescription(val OptNilString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *PullRequestLabelsItem) SetColor(val OptString) {
	s.Color = val
}

// SetDefault sets the value of Default.
func (s *PullRequestLabelsItem) SetDefault(val OptBool) {
	s.Default = val
}

type PullRequestLinks struct {
	Comments       Link `json:"comments"`
	Commits        Link `json:"commits"`
	Statuses       Link `json:"statuses"`
	HTML           Link `json:"html"`
	Issue          Link `json:"issue"`
	ReviewComments Link `json:"review_comments"`
	ReviewComment  Link `json:"review_comment"`
	Self           Link `json:"self"`
}

// GetComments returns the value of Comments.
func (s *PullRequestLinks) GetComments() Link {
	return s.Comments
}

// GetCommits returns the value of Commits.
func (s *PullRequestLinks) GetCommits() Link {
	return s.Commits
}

// GetStatuses returns the value of Statuses.
func (s *PullRequestLinks) GetStatuses() Link {
	return s.Statuses
}

// GetHTML returns the value of HTML.
func (s *PullRequestLinks) GetHTML() Link {
	return s.HTML
}

// GetIssue returns the value of Issue.
func (s *PullRequestLinks) GetIssue() Link {
	return s.Issue
}

// GetReviewComments returns the value of ReviewComments.
func (s *PullRequestLinks) GetReviewComments() Link {
	return s.ReviewComments
}

// GetReviewComment returns the value of ReviewComment.
func (s *PullRequestLinks) GetReviewComment() Link {
	return s.ReviewComment
}

// GetSelf returns the value of Self.
func (s *PullRequestLinks) GetSelf() Link {
	return s.Self
}

// SetComments sets the value of Comments.
func (s *PullRequestLinks) SetComments(val Link) {
	s.Comments = val
}

// SetCommits sets the value of Commits.
func (s *PullRequestLinks) SetCommits(val Link) {
	s.Commits = val
}

// SetStatuses sets the value of Statuses.
func (s *PullRequestLinks) SetStatuses(val Link) {
	s.Statuses = val
}

// SetHTML sets the value of HTML.
func (s *PullRequestLinks) SetHTML(val Link) {
	s.HTML = val
}

// SetIssue sets the value of Issue.
func (s *PullRequestLinks) SetIssue(val Link) {
	s.Issue = val
}

// SetReviewComments sets the value of ReviewComments.
func (s *PullRequestLinks) SetReviewComments(val Link) {
	s.ReviewComments = val
}

// SetReviewComment sets the value of ReviewComment.
func (s *PullRequestLinks) SetReviewComment(val Link) {
	s.ReviewComment = val
}

// SetSelf sets the value of Self.
func (s *PullRequestLinks) SetSelf(val Link) {
	s.Self = val
}

// Pull Request Merge Result.
// Ref: #/components/schemas/pull-request-merge-result
type PullRequestMergeResult struct {
	Sha     string `json:"sha"`
	Merged  bool   `json:"merged"`
	Message string `json:"message"`
}

// GetSha returns the value of Sha.
func (s *PullRequestMergeResult) GetSha() string {
	return s.Sha
}

// GetMerged returns the value of Merged.
func (s *PullRequestMergeResult) GetMerged() bool {
	return s.Merged
}

// GetMessage returns the value of Message.
func (s *PullRequestMergeResult) GetMessage() string {
	return s.Message
}

// SetSha sets the value of Sha.
func (s *PullRequestMergeResult) SetSha(val string) {
	s.Sha = val
}

// SetMerged sets the value of Merged.
func (s *PullRequestMergeResult) SetMerged(val bool) {
	s.Merged = val
}

// SetMessage sets the value of Message.
func (s *PullRequestMergeResult) SetMessage(val string) {
	s.Message = val
}

func (*PullRequestMergeResult) pullsMergeRes() {}

// Ref: #/components/schemas/pull-request-minimal
type PullRequestMinimal struct {
	ID     int                    `json:"id"`
	Number int                    `json:"number"`
	URL    string                 `json:"url"`
	Head   PullRequestMinimalHead `json:"head"`
	Base   PullRequestMinimalBase `json:"base"`
}

// GetID returns the value of ID.
func (s *PullRequestMinimal) GetID() int {
	return s.ID
}

// GetNumber returns the value of Number.
func (s *PullRequestMinimal) GetNumber() int {
	return s.Number
}

// GetURL returns the value of URL.
func (s *PullRequestMinimal) GetURL() string {
	return s.URL
}

// GetHead returns the value of Head.
func (s *PullRequestMinimal) GetHead() PullRequestMinimalHead {
	return s.Head
}

// GetBase returns the value of Base.
func (s *PullRequestMinimal) GetBase() PullRequestMinimalBase {
	return s.Base
}

// SetID sets the value of ID.
func (s *PullRequestMinimal) SetID(val int) {
	s.ID = val
}

// SetNumber sets the value of Number.
func (s *PullRequestMinimal) SetNumber(val int) {
	s.Number = val
}

// SetURL sets the value of URL.
func (s *PullRequestMinimal) SetURL(val string) {
	s.URL = val
}

// SetHead sets the value of Head.
func (s *PullRequestMinimal) SetHead(val PullRequestMinimalHead) {
	s.Head = val
}

// SetBase sets the value of Base.
func (s *PullRequestMinimal) SetBase(val PullRequestMinimalBase) {
	s.Base = val
}

type PullRequestMinimalBase struct {
	Ref  string                     `json:"ref"`
	Sha  string                     `json:"sha"`
	Repo PullRequestMinimalBaseRepo `json:"repo"`
}

// GetRef returns the value of Ref.
func (s *PullRequestMinimalBase) GetRef() string {
	return s.Ref
}

// GetSha returns the value of Sha.
func (s *PullRequestMinimalBase) GetSha() string {
	return s.Sha
}

// GetRepo returns the value of Repo.
func (s *PullRequestMinimalBase) GetRepo() PullRequestMinimalBaseRepo {
	return s.Repo
}

// SetRef sets the value of Ref.
func (s *PullRequestMinimalBase) SetRef(val string) {
	s.Ref = val
}

// SetSha sets the value of Sha.
func (s *PullRequestMinimalBase) SetSha(val string) {
	s.Sha = val
}

// SetRepo sets the value of Repo.
func (s *PullRequestMinimalBase) SetRepo(val PullRequestMinimalBaseRepo) {
	s.Repo = val
}

type PullRequestMinimalBaseRepo struct {
	ID   int    `json:"id"`
	URL  string `json:"url"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *PullRequestMinimalBaseRepo) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *PullRequestMinimalBaseRepo) GetURL() string {
	return s.URL
}

// GetName returns the value of Name.
func (s *PullRequestMinimalBaseRepo) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *PullRequestMinimalBaseRepo) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *PullRequestMinimalBaseRepo) SetURL(val string) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *PullRequestMinimalBaseRepo) SetName(val string) {
	s.Name = val
}

type PullRequestMinimalHead struct {
	Ref  string                     `json:"ref"`
	Sha  string                     `json:"sha"`
	Repo PullRequestMinimalHeadRepo `json:"repo"`
}

// GetRef returns the value of Ref.
func (s *PullRequestMinimalHead) GetRef() string {
	return s.Ref
}

// GetSha returns the value of Sha.
func (s *PullRequestMinimalHead) GetSha() string {
	return s.Sha
}

// GetRepo returns the value of Repo.
func (s *PullRequestMinimalHead) GetRepo() PullRequestMinimalHeadRepo {
	return s.Repo
}

// SetRef sets the value of Ref.
func (s *PullRequestMinimalHead) SetRef(val string) {
	s.Ref = val
}

// SetSha sets the value of Sha.
func (s *PullRequestMinimalHead) SetSha(val string) {
	s.Sha = val
}

// SetRepo sets the value of Repo.
func (s *PullRequestMinimalHead) SetRepo(val PullRequestMinimalHeadRepo) {
	s.Repo = val
}

type PullRequestMinimalHeadRepo struct {
	ID   int    `json:"id"`
	URL  string `json:"url"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *PullRequestMinimalHeadRepo) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *PullRequestMinimalHeadRepo) GetURL() string {
	return s.URL
}

// GetName returns the value of Name.
func (s *PullRequestMinimalHeadRepo) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *PullRequestMinimalHeadRepo) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *PullRequestMinimalHeadRepo) SetURL(val string) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *PullRequestMinimalHeadRepo) SetName(val string) {
	s.Name = val
}

// Pull Request Reviews are reviews on pull requests.
// Ref: #/components/schemas/pull-request-review
type PullRequestReview struct {
	// Unique identifier of the review.
	ID     int                   `json:"id"`
	NodeID string                `json:"node_id"`
	User   NilNullableSimpleUser `json:"user"`
	// The text of the review.
	Body           string                 `json:"body"`
	State          string                 `json:"state"`
	HTMLURL        url.URL                `json:"html_url"`
	PullRequestURL url.URL                `json:"pull_request_url"`
	Links          PullRequestReviewLinks `json:"_links"`
	SubmittedAt    OptDateTime            `json:"submitted_at"`
	// A commit SHA for the review.
	CommitID          string            `json:"commit_id"`
	BodyHTML          OptString         `json:"body_html"`
	BodyText          OptString         `json:"body_text"`
	AuthorAssociation AuthorAssociation `json:"author_association"`
}

// GetID returns the value of ID.
func (s *PullRequestReview) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestReview) GetNodeID() string {
	return s.NodeID
}

// GetUser returns the value of User.
func (s *PullRequestReview) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetBody returns the value of Body.
func (s *PullRequestReview) GetBody() string {
	return s.Body
}

// GetState returns the value of State.
func (s *PullRequestReview) GetState() string {
	return s.State
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestReview) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetPullRequestURL returns the value of PullRequestURL.
func (s *PullRequestReview) GetPullRequestURL() url.URL {
	return s.PullRequestURL
}

// GetLinks returns the value of Links.
func (s *PullRequestReview) GetLinks() PullRequestReviewLinks {
	return s.Links
}

// GetSubmittedAt returns the value of SubmittedAt.
func (s *PullRequestReview) GetSubmittedAt() OptDateTime {
	return s.SubmittedAt
}

// GetCommitID returns the value of CommitID.
func (s *PullRequestReview) GetCommitID() string {
	return s.CommitID
}

// GetBodyHTML returns the value of BodyHTML.
func (s *PullRequestReview) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetBodyText returns the value of BodyText.
func (s *PullRequestReview) GetBodyText() OptString {
	return s.BodyText
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *PullRequestReview) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// SetID sets the value of ID.
func (s *PullRequestReview) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestReview) SetNodeID(val string) {
	s.NodeID = val
}

// SetUser sets the value of User.
func (s *PullRequestReview) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetBody sets the value of Body.
func (s *PullRequestReview) SetBody(val string) {
	s.Body = val
}

// SetState sets the value of State.
func (s *PullRequestReview) SetState(val string) {
	s.State = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestReview) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetPullRequestURL sets the value of PullRequestURL.
func (s *PullRequestReview) SetPullRequestURL(val url.URL) {
	s.PullRequestURL = val
}

// SetLinks sets the value of Links.
func (s *PullRequestReview) SetLinks(val PullRequestReviewLinks) {
	s.Links = val
}

// SetSubmittedAt sets the value of SubmittedAt.
func (s *PullRequestReview) SetSubmittedAt(val OptDateTime) {
	s.SubmittedAt = val
}

// SetCommitID sets the value of CommitID.
func (s *PullRequestReview) SetCommitID(val string) {
	s.CommitID = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *PullRequestReview) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetBodyText sets the value of BodyText.
func (s *PullRequestReview) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *PullRequestReview) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

func (*PullRequestReview) pullsCreateReviewRes()        {}
func (*PullRequestReview) pullsDeletePendingReviewRes() {}
func (*PullRequestReview) pullsDismissReviewRes()       {}
func (*PullRequestReview) pullsGetReviewRes()           {}
func (*PullRequestReview) pullsSubmitReviewRes()        {}
func (*PullRequestReview) pullsUpdateReviewRes()        {}

// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
// Ref: #/components/schemas/pull-request-review-comment
type PullRequestReviewComment struct {
	// URL for the pull request review comment.
	URL string `json:"url"`
	// The ID of the pull request review to which the comment belongs.
	PullRequestReviewID NilInt `json:"pull_request_review_id"`
	// The ID of the pull request review comment.
	ID int `json:"id"`
	// The node ID of the pull request review comment.
	NodeID string `json:"node_id"`
	// The diff of the line that the comment refers to.
	DiffHunk string `json:"diff_hunk"`
	// The relative path of the file to which the comment applies.
	Path string `json:"path"`
	// The line index in the diff to which the comment applies.
	Position int `json:"position"`
	// The index of the original line in the diff to which the comment applies.
	OriginalPosition int `json:"original_position"`
	// The SHA of the commit to which the comment applies.
	CommitID string `json:"commit_id"`
	// The SHA of the original commit to which the comment applies.
	OriginalCommitID string `json:"original_commit_id"`
	// The comment ID to reply to.
	InReplyToID OptInt     `json:"in_reply_to_id"`
	User        SimpleUser `json:"user"`
	// The text of the comment.
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	// HTML URL for the pull request review comment.
	HTMLURL url.URL `json:"html_url"`
	// URL for the pull request that the review comment belongs to.
	PullRequestURL    url.URL                       `json:"pull_request_url"`
	AuthorAssociation AuthorAssociation             `json:"author_association"`
	Links             PullRequestReviewCommentLinks `json:"_links"`
	// The first line of the range for a multi-line comment.
	StartLine OptNilInt `json:"start_line"`
	// The first line of the range for a multi-line comment.
	OriginalStartLine OptNilInt `json:"original_start_line"`
	// The side of the first line of the range for a multi-line comment.
	StartSide OptNilPullRequestReviewCommentStartSide `json:"start_side"`
	// The line of the blob to which the comment applies. The last line of the range for a multi-line
	// comment.
	Line OptInt `json:"line"`
	// The line of the blob to which the comment applies. The last line of the range for a multi-line
	// comment.
	OriginalLine OptInt `json:"original_line"`
	// The side of the diff to which the comment applies. The side of the last line of the range for a
	// multi-line comment.
	Side      OptPullRequestReviewCommentSide `json:"side"`
	Reactions OptReactionRollup               `json:"reactions"`
	BodyHTML  OptString                       `json:"body_html"`
	BodyText  OptString                       `json:"body_text"`
}

// GetURL returns the value of URL.
func (s *PullRequestReviewComment) GetURL() string {
	return s.URL
}

// GetPullRequestReviewID returns the value of PullRequestReviewID.
func (s *PullRequestReviewComment) GetPullRequestReviewID() NilInt {
	return s.PullRequestReviewID
}

// GetID returns the value of ID.
func (s *PullRequestReviewComment) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestReviewComment) GetNodeID() string {
	return s.NodeID
}

// GetDiffHunk returns the value of DiffHunk.
func (s *PullRequestReviewComment) GetDiffHunk() string {
	return s.DiffHunk
}

// GetPath returns the value of Path.
func (s *PullRequestReviewComment) GetPath() string {
	return s.Path
}

// GetPosition returns the value of Position.
func (s *PullRequestReviewComment) GetPosition() int {
	return s.Position
}

// GetOriginalPosition returns the value of OriginalPosition.
func (s *PullRequestReviewComment) GetOriginalPosition() int {
	return s.OriginalPosition
}

// GetCommitID returns the value of CommitID.
func (s *PullRequestReviewComment) GetCommitID() string {
	return s.CommitID
}

// GetOriginalCommitID returns the value of OriginalCommitID.
func (s *PullRequestReviewComment) GetOriginalCommitID() string {
	return s.OriginalCommitID
}

// GetInReplyToID returns the value of InReplyToID.
func (s *PullRequestReviewComment) GetInReplyToID() OptInt {
	return s.InReplyToID
}

// GetUser returns the value of User.
func (s *PullRequestReviewComment) GetUser() SimpleUser {
	return s.User
}

// GetBody returns the value of Body.
func (s *PullRequestReviewComment) GetBody() string {
	return s.Body
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PullRequestReviewComment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PullRequestReviewComment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestReviewComment) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetPullRequestURL returns the value of PullRequestURL.
func (s *PullRequestReviewComment) GetPullRequestURL() url.URL {
	return s.PullRequestURL
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *PullRequestReviewComment) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetLinks returns the value of Links.
func (s *PullRequestReviewComment) GetLinks() PullRequestReviewCommentLinks {
	return s.Links
}

// GetStartLine returns the value of StartLine.
func (s *PullRequestReviewComment) GetStartLine() OptNilInt {
	return s.StartLine
}

// GetOriginalStartLine returns the value of OriginalStartLine.
func (s *PullRequestReviewComment) GetOriginalStartLine() OptNilInt {
	return s.OriginalStartLine
}

// GetStartSide returns the value of StartSide.
func (s *PullRequestReviewComment) GetStartSide() OptNilPullRequestReviewCommentStartSide {
	return s.StartSide
}

// GetLine returns the value of Line.
func (s *PullRequestReviewComment) GetLine() OptInt {
	return s.Line
}

// GetOriginalLine returns the value of OriginalLine.
func (s *PullRequestReviewComment) GetOriginalLine() OptInt {
	return s.OriginalLine
}

// GetSide returns the value of Side.
func (s *PullRequestReviewComment) GetSide() OptPullRequestReviewCommentSide {
	return s.Side
}

// GetReactions returns the value of Reactions.
func (s *PullRequestReviewComment) GetReactions() OptReactionRollup {
	return s.Reactions
}

// GetBodyHTML returns the value of BodyHTML.
func (s *PullRequestReviewComment) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetBodyText returns the value of BodyText.
func (s *PullRequestReviewComment) GetBodyText() OptString {
	return s.BodyText
}

// SetURL sets the value of URL.
func (s *PullRequestReviewComment) SetURL(val string) {
	s.URL = val
}

// SetPullRequestReviewID sets the value of PullRequestReviewID.
func (s *PullRequestReviewComment) SetPullRequestReviewID(val NilInt) {
	s.PullRequestReviewID = val
}

// SetID sets the value of ID.
func (s *PullRequestReviewComment) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestReviewComment) SetNodeID(val string) {
	s.NodeID = val
}

// SetDiffHunk sets the value of DiffHunk.
func (s *PullRequestReviewComment) SetDiffHunk(val string) {
	s.DiffHunk = val
}

// SetPath sets the value of Path.
func (s *PullRequestReviewComment) SetPath(val string) {
	s.Path = val
}

// SetPosition sets the value of Position.
func (s *PullRequestReviewComment) SetPosition(val int) {
	s.Position = val
}

// SetOriginalPosition sets the value of OriginalPosition.
func (s *PullRequestReviewComment) SetOriginalPosition(val int) {
	s.OriginalPosition = val
}

// SetCommitID sets the value of CommitID.
func (s *PullRequestReviewComment) SetCommitID(val string) {
	s.CommitID = val
}

// SetOriginalCommitID sets the value of OriginalCommitID.
func (s *PullRequestReviewComment) SetOriginalCommitID(val string) {
	s.OriginalCommitID = val
}

// SetInReplyToID sets the value of InReplyToID.
func (s *PullRequestReviewComment) SetInReplyToID(val OptInt) {
	s.InReplyToID = val
}

// SetUser sets the value of User.
func (s *PullRequestReviewComment) SetUser(val SimpleUser) {
	s.User = val
}

// SetBody sets the value of Body.
func (s *PullRequestReviewComment) SetBody(val string) {
	s.Body = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PullRequestReviewComment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PullRequestReviewComment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestReviewComment) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetPullRequestURL sets the value of PullRequestURL.
func (s *PullRequestReviewComment) SetPullRequestURL(val url.URL) {
	s.PullRequestURL = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *PullRequestReviewComment) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetLinks sets the value of Links.
func (s *PullRequestReviewComment) SetLinks(val PullRequestReviewCommentLinks) {
	s.Links = val
}

// SetStartLine sets the value of StartLine.
func (s *PullRequestReviewComment) SetStartLine(val OptNilInt) {
	s.StartLine = val
}

// SetOriginalStartLine sets the value of OriginalStartLine.
func (s *PullRequestReviewComment) SetOriginalStartLine(val OptNilInt) {
	s.OriginalStartLine = val
}

// SetStartSide sets the value of StartSide.
func (s *PullRequestReviewComment) SetStartSide(val OptNilPullRequestReviewCommentStartSide) {
	s.StartSide = val
}

// SetLine sets the value of Line.
func (s *PullRequestReviewComment) SetLine(val OptInt) {
	s.Line = val
}

// SetOriginalLine sets the value of OriginalLine.
func (s *PullRequestReviewComment) SetOriginalLine(val OptInt) {
	s.OriginalLine = val
}

// SetSide sets the value of Side.
func (s *PullRequestReviewComment) SetSide(val OptPullRequestReviewCommentSide) {
	s.Side = val
}

// SetReactions sets the value of Reactions.
func (s *PullRequestReviewComment) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *PullRequestReviewComment) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetBodyText sets the value of BodyText.
func (s *PullRequestReviewComment) SetBodyText(val OptString) {
	s.BodyText = val
}

func (*PullRequestReviewComment) pullsGetReviewCommentRes() {}

// PullRequestReviewCommentHeaders wraps PullRequestReviewComment with response headers.
type PullRequestReviewCommentHeaders struct {
	Location OptString
	Response PullRequestReviewComment
}

// GetLocation returns the value of Location.
func (s *PullRequestReviewCommentHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *PullRequestReviewCommentHeaders) GetResponse() PullRequestReviewComment {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *PullRequestReviewCommentHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *PullRequestReviewCommentHeaders) SetResponse(val PullRequestReviewComment) {
	s.Response = val
}

func (*PullRequestReviewCommentHeaders) pullsCreateReplyForReviewCommentRes() {}
func (*PullRequestReviewCommentHeaders) pullsCreateReviewCommentRes()         {}

type PullRequestReviewCommentLinks struct {
	Self        PullRequestReviewCommentLinksSelf        `json:"self"`
	HTML        PullRequestReviewCommentLinksHTML        `json:"html"`
	PullRequest PullRequestReviewCommentLinksPullRequest `json:"pull_request"`
}

// GetSelf returns the value of Self.
func (s *PullRequestReviewCommentLinks) GetSelf() PullRequestReviewCommentLinksSelf {
	return s.Self
}

// GetHTML returns the value of HTML.
func (s *PullRequestReviewCommentLinks) GetHTML() PullRequestReviewCommentLinksHTML {
	return s.HTML
}

// GetPullRequest returns the value of PullRequest.
func (s *PullRequestReviewCommentLinks) GetPullRequest() PullRequestReviewCommentLinksPullRequest {
	return s.PullRequest
}

// SetSelf sets the value of Self.
func (s *PullRequestReviewCommentLinks) SetSelf(val PullRequestReviewCommentLinksSelf) {
	s.Self = val
}

// SetHTML sets the value of HTML.
func (s *PullRequestReviewCommentLinks) SetHTML(val PullRequestReviewCommentLinksHTML) {
	s.HTML = val
}

// SetPullRequest sets the value of PullRequest.
func (s *PullRequestReviewCommentLinks) SetPullRequest(val PullRequestReviewCommentLinksPullRequest) {
	s.PullRequest = val
}

type PullRequestReviewCommentLinksHTML struct {
	Href url.URL `json:"href"`
}

// GetHref returns the value of Href.
func (s *PullRequestReviewCommentLinksHTML) GetHref() url.URL {
	return s.Href
}

// SetHref sets the value of Href.
func (s *PullRequestReviewCommentLinksHTML) SetHref(val url.URL) {
	s.Href = val
}

type PullRequestReviewCommentLinksPullRequest struct {
	Href url.URL `json:"href"`
}

// GetHref returns the value of Href.
func (s *PullRequestReviewCommentLinksPullRequest) GetHref() url.URL {
	return s.Href
}

// SetHref sets the value of Href.
func (s *PullRequestReviewCommentLinksPullRequest) SetHref(val url.URL) {
	s.Href = val
}

type PullRequestReviewCommentLinksSelf struct {
	Href url.URL `json:"href"`
}

// GetHref returns the value of Href.
func (s *PullRequestReviewCommentLinksSelf) GetHref() url.URL {
	return s.Href
}

// SetHref sets the value of Href.
func (s *PullRequestReviewCommentLinksSelf) SetHref(val url.URL) {
	s.Href = val
}

// The side of the diff to which the comment applies. The side of the last line of the range for a
// multi-line comment.
type PullRequestReviewCommentSide string

const (
	PullRequestReviewCommentSideLEFT  PullRequestReviewCommentSide = "LEFT"
	PullRequestReviewCommentSideRIGHT PullRequestReviewCommentSide = "RIGHT"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullRequestReviewCommentSide) MarshalText() ([]byte, error) {
	switch s {
	case PullRequestReviewCommentSideLEFT:
		return []byte(s), nil
	case PullRequestReviewCommentSideRIGHT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullRequestReviewCommentSide) UnmarshalText(data []byte) error {
	switch PullRequestReviewCommentSide(data) {
	case PullRequestReviewCommentSideLEFT:
		*s = PullRequestReviewCommentSideLEFT
		return nil
	case PullRequestReviewCommentSideRIGHT:
		*s = PullRequestReviewCommentSideRIGHT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The side of the first line of the range for a multi-line comment.
type PullRequestReviewCommentStartSide string

const (
	PullRequestReviewCommentStartSideLEFT  PullRequestReviewCommentStartSide = "LEFT"
	PullRequestReviewCommentStartSideRIGHT PullRequestReviewCommentStartSide = "RIGHT"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullRequestReviewCommentStartSide) MarshalText() ([]byte, error) {
	switch s {
	case PullRequestReviewCommentStartSideLEFT:
		return []byte(s), nil
	case PullRequestReviewCommentStartSideRIGHT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullRequestReviewCommentStartSide) UnmarshalText(data []byte) error {
	switch PullRequestReviewCommentStartSide(data) {
	case PullRequestReviewCommentStartSideLEFT:
		*s = PullRequestReviewCommentStartSideLEFT
		return nil
	case PullRequestReviewCommentStartSideRIGHT:
		*s = PullRequestReviewCommentStartSideRIGHT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullRequestReviewLinks struct {
	HTML        PullRequestReviewLinksHTML        `json:"html"`
	PullRequest PullRequestReviewLinksPullRequest `json:"pull_request"`
}

// GetHTML returns the value of HTML.
func (s *PullRequestReviewLinks) GetHTML() PullRequestReviewLinksHTML {
	return s.HTML
}

// GetPullRequest returns the value of PullRequest.
func (s *PullRequestReviewLinks) GetPullRequest() PullRequestReviewLinksPullRequest {
	return s.PullRequest
}

// SetHTML sets the value of HTML.
func (s *PullRequestReviewLinks) SetHTML(val PullRequestReviewLinksHTML) {
	s.HTML = val
}

// SetPullRequest sets the value of PullRequest.
func (s *PullRequestReviewLinks) SetPullRequest(val PullRequestReviewLinksPullRequest) {
	s.PullRequest = val
}

type PullRequestReviewLinksHTML struct {
	Href string `json:"href"`
}

// GetHref returns the value of Href.
func (s *PullRequestReviewLinksHTML) GetHref() string {
	return s.Href
}

// SetHref sets the value of Href.
func (s *PullRequestReviewLinksHTML) SetHref(val string) {
	s.Href = val
}

type PullRequestReviewLinksPullRequest struct {
	Href string `json:"href"`
}

// GetHref returns the value of Href.
func (s *PullRequestReviewLinksPullRequest) GetHref() string {
	return s.Href
}

// SetHref sets the value of Href.
func (s *PullRequestReviewLinksPullRequest) SetHref(val string) {
	s.Href = val
}

// Pull Request Review Request.
// Ref: #/components/schemas/pull-request-review-request
type PullRequestReviewRequest struct {
	Users []SimpleUser `json:"users"`
	Teams []Team       `json:"teams"`
}

// GetUsers returns the value of Users.
func (s *PullRequestReviewRequest) GetUsers() []SimpleUser {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *PullRequestReviewRequest) GetTeams() []Team {
	return s.Teams
}

// SetUsers sets the value of Users.
func (s *PullRequestReviewRequest) SetUsers(val []SimpleUser) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *PullRequestReviewRequest) SetTeams(val []Team) {
	s.Teams = val
}

// PullRequestReviewRequestHeaders wraps PullRequestReviewRequest with response headers.
type PullRequestReviewRequestHeaders struct {
	Link     OptString
	Response PullRequestReviewRequest
}

// GetLink returns the value of Link.
func (s *PullRequestReviewRequestHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullRequestReviewRequestHeaders) GetResponse() PullRequestReviewRequest {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullRequestReviewRequestHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullRequestReviewRequestHeaders) SetResponse(val PullRequestReviewRequest) {
	s.Response = val
}

// Pull Request Simple.
// Ref: #/components/schemas/pull-request-simple
type PullRequestSimple struct {
	URL                url.URL                       `json:"url"`
	ID                 int                           `json:"id"`
	NodeID             string                        `json:"node_id"`
	HTMLURL            url.URL                       `json:"html_url"`
	DiffURL            url.URL                       `json:"diff_url"`
	PatchURL           url.URL                       `json:"patch_url"`
	IssueURL           url.URL                       `json:"issue_url"`
	CommitsURL         url.URL                       `json:"commits_url"`
	ReviewCommentsURL  url.URL                       `json:"review_comments_url"`
	ReviewCommentURL   string                        `json:"review_comment_url"`
	CommentsURL        url.URL                       `json:"comments_url"`
	StatusesURL        url.URL                       `json:"statuses_url"`
	Number             int                           `json:"number"`
	State              string                        `json:"state"`
	Locked             bool                          `json:"locked"`
	Title              string                        `json:"title"`
	User               NilNullableSimpleUser         `json:"user"`
	Body               NilString                     `json:"body"`
	Labels             []PullRequestSimpleLabelsItem `json:"labels"`
	Milestone          NilNullableMilestone          `json:"milestone"`
	ActiveLockReason   OptNilString                  `json:"active_lock_reason"`
	CreatedAt          time.Time                     `json:"created_at"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	ClosedAt           NilDateTime                   `json:"closed_at"`
	MergedAt           NilDateTime                   `json:"merged_at"`
	MergeCommitSha     NilString                     `json:"merge_commit_sha"`
	Assignee           NilNullableSimpleUser         `json:"assignee"`
	Assignees          OptNilSimpleUserArray         `json:"assignees"`
	RequestedReviewers OptNilSimpleUserArray         `json:"requested_reviewers"`
	RequestedTeams     OptNilTeamArray               `json:"requested_teams"`
	Head               PullRequestSimpleHead         `json:"head"`
	Base               PullRequestSimpleBase         `json:"base"`
	Links              PullRequestSimpleLinks        `json:"_links"`
	AuthorAssociation  AuthorAssociation             `json:"author_association"`
	AutoMerge          NilAutoMerge                  `json:"auto_merge"`
	// Indicates whether or not the pull request is a draft.
	Draft OptBool `json:"draft"`
}

// GetURL returns the value of URL.
func (s *PullRequestSimple) GetURL() url.URL {
	return s.URL
}

// GetID returns the value of ID.
func (s *PullRequestSimple) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestSimple) GetNodeID() string {
	return s.NodeID
}

// GetHTMLURL returns the value of HTMLURL.
func (s *PullRequestSimple) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDiffURL returns the value of DiffURL.
func (s *PullRequestSimple) GetDiffURL() url.URL {
	return s.DiffURL
}

// GetPatchURL returns the value of PatchURL.
func (s *PullRequestSimple) GetPatchURL() url.URL {
	return s.PatchURL
}

// GetIssueURL returns the value of IssueURL.
func (s *PullRequestSimple) GetIssueURL() url.URL {
	return s.IssueURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *PullRequestSimple) GetCommitsURL() url.URL {
	return s.CommitsURL
}

// GetReviewCommentsURL returns the value of ReviewCommentsURL.
func (s *PullRequestSimple) GetReviewCommentsURL() url.URL {
	return s.ReviewCommentsURL
}

// GetReviewCommentURL returns the value of ReviewCommentURL.
func (s *PullRequestSimple) GetReviewCommentURL() string {
	return s.ReviewCommentURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *PullRequestSimple) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *PullRequestSimple) GetStatusesURL() url.URL {
	return s.StatusesURL
}

// GetNumber returns the value of Number.
func (s *PullRequestSimple) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *PullRequestSimple) GetState() string {
	return s.State
}

// GetLocked returns the value of Locked.
func (s *PullRequestSimple) GetLocked() bool {
	return s.Locked
}

// GetTitle returns the value of Title.
func (s *PullRequestSimple) GetTitle() string {
	return s.Title
}

// GetUser returns the value of User.
func (s *PullRequestSimple) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetBody returns the value of Body.
func (s *PullRequestSimple) GetBody() NilString {
	return s.Body
}

// GetLabels returns the value of Labels.
func (s *PullRequestSimple) GetLabels() []PullRequestSimpleLabelsItem {
	return s.Labels
}

// GetMilestone returns the value of Milestone.
func (s *PullRequestSimple) GetMilestone() NilNullableMilestone {
	return s.Milestone
}

// GetActiveLockReason returns the value of ActiveLockReason.
func (s *PullRequestSimple) GetActiveLockReason() OptNilString {
	return s.ActiveLockReason
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PullRequestSimple) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PullRequestSimple) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetClosedAt returns the value of ClosedAt.
func (s *PullRequestSimple) GetClosedAt() NilDateTime {
	return s.ClosedAt
}

// GetMergedAt returns the value of MergedAt.
func (s *PullRequestSimple) GetMergedAt() NilDateTime {
	return s.MergedAt
}

// GetMergeCommitSha returns the value of MergeCommitSha.
func (s *PullRequestSimple) GetMergeCommitSha() NilString {
	return s.MergeCommitSha
}

// GetAssignee returns the value of Assignee.
func (s *PullRequestSimple) GetAssignee() NilNullableSimpleUser {
	return s.Assignee
}

// GetAssignees returns the value of Assignees.
func (s *PullRequestSimple) GetAssignees() OptNilSimpleUserArray {
	return s.Assignees
}

// GetRequestedReviewers returns the value of RequestedReviewers.
func (s *PullRequestSimple) GetRequestedReviewers() OptNilSimpleUserArray {
	return s.RequestedReviewers
}

// GetRequestedTeams returns the value of RequestedTeams.
func (s *PullRequestSimple) GetRequestedTeams() OptNilTeamArray {
	return s.RequestedTeams
}

// GetHead returns the value of Head.
func (s *PullRequestSimple) GetHead() PullRequestSimpleHead {
	return s.Head
}

// GetBase returns the value of Base.
func (s *PullRequestSimple) GetBase() PullRequestSimpleBase {
	return s.Base
}

// GetLinks returns the value of Links.
func (s *PullRequestSimple) GetLinks() PullRequestSimpleLinks {
	return s.Links
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *PullRequestSimple) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetAutoMerge returns the value of AutoMerge.
func (s *PullRequestSimple) GetAutoMerge() NilAutoMerge {
	return s.AutoMerge
}

// GetDraft returns the value of Draft.
func (s *PullRequestSimple) GetDraft() OptBool {
	return s.Draft
}

// SetURL sets the value of URL.
func (s *PullRequestSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetID sets the value of ID.
func (s *PullRequestSimple) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *PullRequestSimple) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDiffURL sets the value of DiffURL.
func (s *PullRequestSimple) SetDiffURL(val url.URL) {
	s.DiffURL = val
}

// SetPatchURL sets the value of PatchURL.
func (s *PullRequestSimple) SetPatchURL(val url.URL) {
	s.PatchURL = val
}

// SetIssueURL sets the value of IssueURL.
func (s *PullRequestSimple) SetIssueURL(val url.URL) {
	s.IssueURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *PullRequestSimple) SetCommitsURL(val url.URL) {
	s.CommitsURL = val
}

// SetReviewCommentsURL sets the value of ReviewCommentsURL.
func (s *PullRequestSimple) SetReviewCommentsURL(val url.URL) {
	s.ReviewCommentsURL = val
}

// SetReviewCommentURL sets the value of ReviewCommentURL.
func (s *PullRequestSimple) SetReviewCommentURL(val string) {
	s.ReviewCommentURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *PullRequestSimple) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *PullRequestSimple) SetStatusesURL(val url.URL) {
	s.StatusesURL = val
}

// SetNumber sets the value of Number.
func (s *PullRequestSimple) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *PullRequestSimple) SetState(val string) {
	s.State = val
}

// SetLocked sets the value of Locked.
func (s *PullRequestSimple) SetLocked(val bool) {
	s.Locked = val
}

// SetTitle sets the value of Title.
func (s *PullRequestSimple) SetTitle(val string) {
	s.Title = val
}

// SetUser sets the value of User.
func (s *PullRequestSimple) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetBody sets the value of Body.
func (s *PullRequestSimple) SetBody(val NilString) {
	s.Body = val
}

// SetLabels sets the value of Labels.
func (s *PullRequestSimple) SetLabels(val []PullRequestSimpleLabelsItem) {
	s.Labels = val
}

// SetMilestone sets the value of Milestone.
func (s *PullRequestSimple) SetMilestone(val NilNullableMilestone) {
	s.Milestone = val
}

// SetActiveLockReason sets the value of ActiveLockReason.
func (s *PullRequestSimple) SetActiveLockReason(val OptNilString) {
	s.ActiveLockReason = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PullRequestSimple) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PullRequestSimple) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetClosedAt sets the value of ClosedAt.
func (s *PullRequestSimple) SetClosedAt(val NilDateTime) {
	s.ClosedAt = val
}

// SetMergedAt sets the value of MergedAt.
func (s *PullRequestSimple) SetMergedAt(val NilDateTime) {
	s.MergedAt = val
}

// SetMergeCommitSha sets the value of MergeCommitSha.
func (s *PullRequestSimple) SetMergeCommitSha(val NilString) {
	s.MergeCommitSha = val
}

// SetAssignee sets the value of Assignee.
func (s *PullRequestSimple) SetAssignee(val NilNullableSimpleUser) {
	s.Assignee = val
}

// SetAssignees sets the value of Assignees.
func (s *PullRequestSimple) SetAssignees(val OptNilSimpleUserArray) {
	s.Assignees = val
}

// SetRequestedReviewers sets the value of RequestedReviewers.
func (s *PullRequestSimple) SetRequestedReviewers(val OptNilSimpleUserArray) {
	s.RequestedReviewers = val
}

// SetRequestedTeams sets the value of RequestedTeams.
func (s *PullRequestSimple) SetRequestedTeams(val OptNilTeamArray) {
	s.RequestedTeams = val
}

// SetHead sets the value of Head.
func (s *PullRequestSimple) SetHead(val PullRequestSimpleHead) {
	s.Head = val
}

// SetBase sets the value of Base.
func (s *PullRequestSimple) SetBase(val PullRequestSimpleBase) {
	s.Base = val
}

// SetLinks sets the value of Links.
func (s *PullRequestSimple) SetLinks(val PullRequestSimpleLinks) {
	s.Links = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *PullRequestSimple) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetAutoMerge sets the value of AutoMerge.
func (s *PullRequestSimple) SetAutoMerge(val NilAutoMerge) {
	s.AutoMerge = val
}

// SetDraft sets the value of Draft.
func (s *PullRequestSimple) SetDraft(val OptBool) {
	s.Draft = val
}

func (*PullRequestSimple) pullsRemoveRequestedReviewersRes() {}

type PullRequestSimpleBase struct {
	Label string                `json:"label"`
	Ref   string                `json:"ref"`
	Repo  Repository            `json:"repo"`
	Sha   string                `json:"sha"`
	User  NilNullableSimpleUser `json:"user"`
}

// GetLabel returns the value of Label.
func (s *PullRequestSimpleBase) GetLabel() string {
	return s.Label
}

// GetRef returns the value of Ref.
func (s *PullRequestSimpleBase) GetRef() string {
	return s.Ref
}

// GetRepo returns the value of Repo.
func (s *PullRequestSimpleBase) GetRepo() Repository {
	return s.Repo
}

// GetSha returns the value of Sha.
func (s *PullRequestSimpleBase) GetSha() string {
	return s.Sha
}

// GetUser returns the value of User.
func (s *PullRequestSimpleBase) GetUser() NilNullableSimpleUser {
	return s.User
}

// SetLabel sets the value of Label.
func (s *PullRequestSimpleBase) SetLabel(val string) {
	s.Label = val
}

// SetRef sets the value of Ref.
func (s *PullRequestSimpleBase) SetRef(val string) {
	s.Ref = val
}

// SetRepo sets the value of Repo.
func (s *PullRequestSimpleBase) SetRepo(val Repository) {
	s.Repo = val
}

// SetSha sets the value of Sha.
func (s *PullRequestSimpleBase) SetSha(val string) {
	s.Sha = val
}

// SetUser sets the value of User.
func (s *PullRequestSimpleBase) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

type PullRequestSimpleHead struct {
	Label string                `json:"label"`
	Ref   string                `json:"ref"`
	Repo  Repository            `json:"repo"`
	Sha   string                `json:"sha"`
	User  NilNullableSimpleUser `json:"user"`
}

// GetLabel returns the value of Label.
func (s *PullRequestSimpleHead) GetLabel() string {
	return s.Label
}

// GetRef returns the value of Ref.
func (s *PullRequestSimpleHead) GetRef() string {
	return s.Ref
}

// GetRepo returns the value of Repo.
func (s *PullRequestSimpleHead) GetRepo() Repository {
	return s.Repo
}

// GetSha returns the value of Sha.
func (s *PullRequestSimpleHead) GetSha() string {
	return s.Sha
}

// GetUser returns the value of User.
func (s *PullRequestSimpleHead) GetUser() NilNullableSimpleUser {
	return s.User
}

// SetLabel sets the value of Label.
func (s *PullRequestSimpleHead) SetLabel(val string) {
	s.Label = val
}

// SetRef sets the value of Ref.
func (s *PullRequestSimpleHead) SetRef(val string) {
	s.Ref = val
}

// SetRepo sets the value of Repo.
func (s *PullRequestSimpleHead) SetRepo(val Repository) {
	s.Repo = val
}

// SetSha sets the value of Sha.
func (s *PullRequestSimpleHead) SetSha(val string) {
	s.Sha = val
}

// SetUser sets the value of User.
func (s *PullRequestSimpleHead) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

type PullRequestSimpleLabelsItem struct {
	ID          OptInt64  `json:"id"`
	NodeID      OptString `json:"node_id"`
	URL         OptString `json:"url"`
	Name        OptString `json:"name"`
	Description OptString `json:"description"`
	Color       OptString `json:"color"`
	Default     OptBool   `json:"default"`
}

// GetID returns the value of ID.
func (s *PullRequestSimpleLabelsItem) GetID() OptInt64 {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *PullRequestSimpleLabelsItem) GetNodeID() OptString {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *PullRequestSimpleLabelsItem) GetURL() OptString {
	return s.URL
}

// GetName returns the value of Name.
func (s *PullRequestSimpleLabelsItem) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PullRequestSimpleLabelsItem) GetDescription() OptString {
	return s.Description
}

// GetColor returns the value of Color.
func (s *PullRequestSimpleLabelsItem) GetColor() OptString {
	return s.Color
}

// GetDefault returns the value of Default.
func (s *PullRequestSimpleLabelsItem) GetDefault() OptBool {
	return s.Default
}

// SetID sets the value of ID.
func (s *PullRequestSimpleLabelsItem) SetID(val OptInt64) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *PullRequestSimpleLabelsItem) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *PullRequestSimpleLabelsItem) SetURL(val OptString) {
	s.URL = val
}

// SetName sets the value of Name.
func (s *PullRequestSimpleLabelsItem) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PullRequestSimpleLabelsItem) SetDescription(val OptString) {
	s.Description = val
}

// SetColor sets the value of Color.
func (s *PullRequestSimpleLabelsItem) SetColor(val OptString) {
	s.Color = val
}

// SetDefault sets the value of Default.
func (s *PullRequestSimpleLabelsItem) SetDefault(val OptBool) {
	s.Default = val
}

type PullRequestSimpleLinks struct {
	Comments       Link `json:"comments"`
	Commits        Link `json:"commits"`
	Statuses       Link `json:"statuses"`
	HTML           Link `json:"html"`
	Issue          Link `json:"issue"`
	ReviewComments Link `json:"review_comments"`
	ReviewComment  Link `json:"review_comment"`
	Self           Link `json:"self"`
}

// GetComments returns the value of Comments.
func (s *PullRequestSimpleLinks) GetComments() Link {
	return s.Comments
}

// GetCommits returns the value of Commits.
func (s *PullRequestSimpleLinks) GetCommits() Link {
	return s.Commits
}

// GetStatuses returns the value of Statuses.
func (s *PullRequestSimpleLinks) GetStatuses() Link {
	return s.Statuses
}

// GetHTML returns the value of HTML.
func (s *PullRequestSimpleLinks) GetHTML() Link {
	return s.HTML
}

// GetIssue returns the value of Issue.
func (s *PullRequestSimpleLinks) GetIssue() Link {
	return s.Issue
}

// GetReviewComments returns the value of ReviewComments.
func (s *PullRequestSimpleLinks) GetReviewComments() Link {
	return s.ReviewComments
}

// GetReviewComment returns the value of ReviewComment.
func (s *PullRequestSimpleLinks) GetReviewComment() Link {
	return s.ReviewComment
}

// GetSelf returns the value of Self.
func (s *PullRequestSimpleLinks) GetSelf() Link {
	return s.Self
}

// SetComments sets the value of Comments.
func (s *PullRequestSimpleLinks) SetComments(val Link) {
	s.Comments = val
}

// SetCommits sets the value of Commits.
func (s *PullRequestSimpleLinks) SetCommits(val Link) {
	s.Commits = val
}

// SetStatuses sets the value of Statuses.
func (s *PullRequestSimpleLinks) SetStatuses(val Link) {
	s.Statuses = val
}

// SetHTML sets the value of HTML.
func (s *PullRequestSimpleLinks) SetHTML(val Link) {
	s.HTML = val
}

// SetIssue sets the value of Issue.
func (s *PullRequestSimpleLinks) SetIssue(val Link) {
	s.Issue = val
}

// SetReviewComments sets the value of ReviewComments.
func (s *PullRequestSimpleLinks) SetReviewComments(val Link) {
	s.ReviewComments = val
}

// SetReviewComment sets the value of ReviewComment.
func (s *PullRequestSimpleLinks) SetReviewComment(val Link) {
	s.ReviewComment = val
}

// SetSelf sets the value of Self.
func (s *PullRequestSimpleLinks) SetSelf(val Link) {
	s.Self = val
}

// State of this Pull Request. Either `open` or `closed`.
type PullRequestState string

const (
	PullRequestStateOpen   PullRequestState = "open"
	PullRequestStateClosed PullRequestState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullRequestState) MarshalText() ([]byte, error) {
	switch s {
	case PullRequestStateOpen:
		return []byte(s), nil
	case PullRequestStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullRequestState) UnmarshalText(data []byte) error {
	switch PullRequestState(data) {
	case PullRequestStateOpen:
		*s = PullRequestStateOpen
		return nil
	case PullRequestStateClosed:
		*s = PullRequestStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PullsCheckIfMergedNoContent is response for PullsCheckIfMerged operation.
type PullsCheckIfMergedNoContent struct{}

func (*PullsCheckIfMergedNoContent) pullsCheckIfMergedRes() {}

// PullsCheckIfMergedNotFound is response for PullsCheckIfMerged operation.
type PullsCheckIfMergedNotFound struct{}

func (*PullsCheckIfMergedNotFound) pullsCheckIfMergedRes() {}

type PullsCreateReplyForReviewCommentReq struct {
	// The text of the review comment.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *PullsCreateReplyForReviewCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *PullsCreateReplyForReviewCommentReq) SetBody(val string) {
	s.Body = val
}

type PullsCreateReq struct {
	// The title of the new pull request.
	Title OptString `json:"title"`
	// The name of the branch where your changes are implemented. For cross-repository pull requests in
	// the same network, namespace `head` with a user like this: `username:branch`.
	Head string `json:"head"`
	// The name of the branch you want the changes pulled into. This should be an existing branch on the
	// current repository. You cannot submit a pull request to one repository that requests a merge to a
	// base of another repository.
	Base string `json:"base"`
	// The contents of the pull request.
	Body OptString `json:"body"`
	// Indicates whether [maintainers can modify](https://help.github.
	// com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify OptBool `json:"maintainer_can_modify"`
	// Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.
	// com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to
	// learn more.
	Draft OptBool `json:"draft"`
	Issue OptInt  `json:"issue"`
}

// GetTitle returns the value of Title.
func (s *PullsCreateReq) GetTitle() OptString {
	return s.Title
}

// GetHead returns the value of Head.
func (s *PullsCreateReq) GetHead() string {
	return s.Head
}

// GetBase returns the value of Base.
func (s *PullsCreateReq) GetBase() string {
	return s.Base
}

// GetBody returns the value of Body.
func (s *PullsCreateReq) GetBody() OptString {
	return s.Body
}

// GetMaintainerCanModify returns the value of MaintainerCanModify.
func (s *PullsCreateReq) GetMaintainerCanModify() OptBool {
	return s.MaintainerCanModify
}

// GetDraft returns the value of Draft.
func (s *PullsCreateReq) GetDraft() OptBool {
	return s.Draft
}

// GetIssue returns the value of Issue.
func (s *PullsCreateReq) GetIssue() OptInt {
	return s.Issue
}

// SetTitle sets the value of Title.
func (s *PullsCreateReq) SetTitle(val OptString) {
	s.Title = val
}

// SetHead sets the value of Head.
func (s *PullsCreateReq) SetHead(val string) {
	s.Head = val
}

// SetBase sets the value of Base.
func (s *PullsCreateReq) SetBase(val string) {
	s.Base = val
}

// SetBody sets the value of Body.
func (s *PullsCreateReq) SetBody(val OptString) {
	s.Body = val
}

// SetMaintainerCanModify sets the value of MaintainerCanModify.
func (s *PullsCreateReq) SetMaintainerCanModify(val OptBool) {
	s.MaintainerCanModify = val
}

// SetDraft sets the value of Draft.
func (s *PullsCreateReq) SetDraft(val OptBool) {
	s.Draft = val
}

// SetIssue sets the value of Issue.
func (s *PullsCreateReq) SetIssue(val OptInt) {
	s.Issue = val
}

type PullsCreateReviewCommentReq struct {
	// The text of the review comment.
	Body string `json:"body"`
	// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment
	// outdated if a subsequent commit modifies the line you specify as the `position`.
	CommitID OptString `json:"commit_id"`
	// The relative path to the file that necessitates a comment.
	Path OptString `json:"path"`
	// **Required without `comfort-fade` preview**. The position in the diff where you want to add a
	// review comment. Note this value is not the same as the line number in the file. For help finding
	// the position value, read the note above.
	Position OptInt `json:"position"`
	// **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull
	// request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red.
	//  Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are
	// shown for context. For a multi-line comment, side represents whether the last line of the comment
	// range is a deletion or addition. For more information, see "[Diff view options](https://help.
	// github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub
	// Help documentation.
	Side OptPullsCreateReviewCommentReqSide `json:"side"`
	// **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the
	// comment applies to. For a multi-line comment, the last line of the range that your comment applies
	// to.
	Line OptInt `json:"line"`
	// **Required when using multi-line comments**. To create multi-line comments, you must use the
	// `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that
	// your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a
	// pull request](https://help.github.
	// com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the
	// GitHub Help documentation.
	StartLine OptInt `json:"start_line"`
	// **Required when using multi-line comments**. To create multi-line comments, you must use the
	// `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment
	// applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on
	// a pull request](https://help.github.
	// com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the
	// GitHub Help documentation. See `side` in this table for additional context.
	StartSide OptPullsCreateReviewCommentReqStartSide `json:"start_side"`
	InReplyTo OptInt                                  `json:"in_reply_to"`
}

// GetBody returns the value of Body.
func (s *PullsCreateReviewCommentReq) GetBody() string {
	return s.Body
}

// GetCommitID returns the value of CommitID.
func (s *PullsCreateReviewCommentReq) GetCommitID() OptString {
	return s.CommitID
}

// GetPath returns the value of Path.
func (s *PullsCreateReviewCommentReq) GetPath() OptString {
	return s.Path
}

// GetPosition returns the value of Position.
func (s *PullsCreateReviewCommentReq) GetPosition() OptInt {
	return s.Position
}

// GetSide returns the value of Side.
func (s *PullsCreateReviewCommentReq) GetSide() OptPullsCreateReviewCommentReqSide {
	return s.Side
}

// GetLine returns the value of Line.
func (s *PullsCreateReviewCommentReq) GetLine() OptInt {
	return s.Line
}

// GetStartLine returns the value of StartLine.
func (s *PullsCreateReviewCommentReq) GetStartLine() OptInt {
	return s.StartLine
}

// GetStartSide returns the value of StartSide.
func (s *PullsCreateReviewCommentReq) GetStartSide() OptPullsCreateReviewCommentReqStartSide {
	return s.StartSide
}

// GetInReplyTo returns the value of InReplyTo.
func (s *PullsCreateReviewCommentReq) GetInReplyTo() OptInt {
	return s.InReplyTo
}

// SetBody sets the value of Body.
func (s *PullsCreateReviewCommentReq) SetBody(val string) {
	s.Body = val
}

// SetCommitID sets the value of CommitID.
func (s *PullsCreateReviewCommentReq) SetCommitID(val OptString) {
	s.CommitID = val
}

// SetPath sets the value of Path.
func (s *PullsCreateReviewCommentReq) SetPath(val OptString) {
	s.Path = val
}

// SetPosition sets the value of Position.
func (s *PullsCreateReviewCommentReq) SetPosition(val OptInt) {
	s.Position = val
}

// SetSide sets the value of Side.
func (s *PullsCreateReviewCommentReq) SetSide(val OptPullsCreateReviewCommentReqSide) {
	s.Side = val
}

// SetLine sets the value of Line.
func (s *PullsCreateReviewCommentReq) SetLine(val OptInt) {
	s.Line = val
}

// SetStartLine sets the value of StartLine.
func (s *PullsCreateReviewCommentReq) SetStartLine(val OptInt) {
	s.StartLine = val
}

// SetStartSide sets the value of StartSide.
func (s *PullsCreateReviewCommentReq) SetStartSide(val OptPullsCreateReviewCommentReqStartSide) {
	s.StartSide = val
}

// SetInReplyTo sets the value of InReplyTo.
func (s *PullsCreateReviewCommentReq) SetInReplyTo(val OptInt) {
	s.InReplyTo = val
}

// **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull
// request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red.
//
//	Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are
//
// shown for context. For a multi-line comment, side represents whether the last line of the comment
// range is a deletion or addition. For more information, see "[Diff view options](https://help.
// github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub
// Help documentation.
type PullsCreateReviewCommentReqSide string

const (
	PullsCreateReviewCommentReqSideLEFT  PullsCreateReviewCommentReqSide = "LEFT"
	PullsCreateReviewCommentReqSideRIGHT PullsCreateReviewCommentReqSide = "RIGHT"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsCreateReviewCommentReqSide) MarshalText() ([]byte, error) {
	switch s {
	case PullsCreateReviewCommentReqSideLEFT:
		return []byte(s), nil
	case PullsCreateReviewCommentReqSideRIGHT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsCreateReviewCommentReqSide) UnmarshalText(data []byte) error {
	switch PullsCreateReviewCommentReqSide(data) {
	case PullsCreateReviewCommentReqSideLEFT:
		*s = PullsCreateReviewCommentReqSideLEFT
		return nil
	case PullsCreateReviewCommentReqSideRIGHT:
		*s = PullsCreateReviewCommentReqSideRIGHT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// **Required when using multi-line comments**. To create multi-line comments, you must use the
// `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment
// applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on
// a pull request](https://help.github.
// com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the
// GitHub Help documentation. See `side` in this table for additional context.
type PullsCreateReviewCommentReqStartSide string

const (
	PullsCreateReviewCommentReqStartSideLEFT  PullsCreateReviewCommentReqStartSide = "LEFT"
	PullsCreateReviewCommentReqStartSideRIGHT PullsCreateReviewCommentReqStartSide = "RIGHT"
	PullsCreateReviewCommentReqStartSideSide  PullsCreateReviewCommentReqStartSide = "side"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsCreateReviewCommentReqStartSide) MarshalText() ([]byte, error) {
	switch s {
	case PullsCreateReviewCommentReqStartSideLEFT:
		return []byte(s), nil
	case PullsCreateReviewCommentReqStartSideRIGHT:
		return []byte(s), nil
	case PullsCreateReviewCommentReqStartSideSide:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsCreateReviewCommentReqStartSide) UnmarshalText(data []byte) error {
	switch PullsCreateReviewCommentReqStartSide(data) {
	case PullsCreateReviewCommentReqStartSideLEFT:
		*s = PullsCreateReviewCommentReqStartSideLEFT
		return nil
	case PullsCreateReviewCommentReqStartSideRIGHT:
		*s = PullsCreateReviewCommentReqStartSideRIGHT
		return nil
	case PullsCreateReviewCommentReqStartSideSide:
		*s = PullsCreateReviewCommentReqStartSideSide
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsCreateReviewReq struct {
	// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review
	// comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults
	// to the most recent commit in the pull request when you do not specify a value.
	CommitID OptString `json:"commit_id"`
	// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of
	// the pull request review.
	Body OptString `json:"body"`
	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
	// or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you
	// will need to [submit the pull request review](https://docs.github.
	// com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
	Event OptPullsCreateReviewReqEvent `json:"event"`
	// Use the following table to specify the location, destination, and contents of the draft review
	// comment.
	Comments []PullsCreateReviewReqCommentsItem `json:"comments"`
}

// GetCommitID returns the value of CommitID.
func (s *PullsCreateReviewReq) GetCommitID() OptString {
	return s.CommitID
}

// GetBody returns the value of Body.
func (s *PullsCreateReviewReq) GetBody() OptString {
	return s.Body
}

// GetEvent returns the value of Event.
func (s *PullsCreateReviewReq) GetEvent() OptPullsCreateReviewReqEvent {
	return s.Event
}

// GetComments returns the value of Comments.
func (s *PullsCreateReviewReq) GetComments() []PullsCreateReviewReqCommentsItem {
	return s.Comments
}

// SetCommitID sets the value of CommitID.
func (s *PullsCreateReviewReq) SetCommitID(val OptString) {
	s.CommitID = val
}

// SetBody sets the value of Body.
func (s *PullsCreateReviewReq) SetBody(val OptString) {
	s.Body = val
}

// SetEvent sets the value of Event.
func (s *PullsCreateReviewReq) SetEvent(val OptPullsCreateReviewReqEvent) {
	s.Event = val
}

// SetComments sets the value of Comments.
func (s *PullsCreateReviewReq) SetComments(val []PullsCreateReviewReqCommentsItem) {
	s.Comments = val
}

type PullsCreateReviewReqCommentsItem struct {
	// The relative path to the file that necessitates a review comment.
	Path string `json:"path"`
	// The position in the diff where you want to add a review comment. Note this value is not the same
	// as the line number in the file. For help finding the position value, read the note below.
	Position OptInt `json:"position"`
	// Text of the review comment.
	Body      string    `json:"body"`
	Line      OptInt    `json:"line"`
	Side      OptString `json:"side"`
	StartLine OptInt    `json:"start_line"`
	StartSide OptString `json:"start_side"`
}

// GetPath returns the value of Path.
func (s *PullsCreateReviewReqCommentsItem) GetPath() string {
	return s.Path
}

// GetPosition returns the value of Position.
func (s *PullsCreateReviewReqCommentsItem) GetPosition() OptInt {
	return s.Position
}

// GetBody returns the value of Body.
func (s *PullsCreateReviewReqCommentsItem) GetBody() string {
	return s.Body
}

// GetLine returns the value of Line.
func (s *PullsCreateReviewReqCommentsItem) GetLine() OptInt {
	return s.Line
}

// GetSide returns the value of Side.
func (s *PullsCreateReviewReqCommentsItem) GetSide() OptString {
	return s.Side
}

// GetStartLine returns the value of StartLine.
func (s *PullsCreateReviewReqCommentsItem) GetStartLine() OptInt {
	return s.StartLine
}

// GetStartSide returns the value of StartSide.
func (s *PullsCreateReviewReqCommentsItem) GetStartSide() OptString {
	return s.StartSide
}

// SetPath sets the value of Path.
func (s *PullsCreateReviewReqCommentsItem) SetPath(val string) {
	s.Path = val
}

// SetPosition sets the value of Position.
func (s *PullsCreateReviewReqCommentsItem) SetPosition(val OptInt) {
	s.Position = val
}

// SetBody sets the value of Body.
func (s *PullsCreateReviewReqCommentsItem) SetBody(val string) {
	s.Body = val
}

// SetLine sets the value of Line.
func (s *PullsCreateReviewReqCommentsItem) SetLine(val OptInt) {
	s.Line = val
}

// SetSide sets the value of Side.
func (s *PullsCreateReviewReqCommentsItem) SetSide(val OptString) {
	s.Side = val
}

// SetStartLine sets the value of StartLine.
func (s *PullsCreateReviewReqCommentsItem) SetStartLine(val OptInt) {
	s.StartLine = val
}

// SetStartSide sets the value of StartSide.
func (s *PullsCreateReviewReqCommentsItem) SetStartSide(val OptString) {
	s.StartSide = val
}

// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
// or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you
// will need to [submit the pull request review](https://docs.github.
// com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
type PullsCreateReviewReqEvent string

const (
	PullsCreateReviewReqEventAPPROVE        PullsCreateReviewReqEvent = "APPROVE"
	PullsCreateReviewReqEventREQUESTCHANGES PullsCreateReviewReqEvent = "REQUEST_CHANGES"
	PullsCreateReviewReqEventCOMMENT        PullsCreateReviewReqEvent = "COMMENT"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsCreateReviewReqEvent) MarshalText() ([]byte, error) {
	switch s {
	case PullsCreateReviewReqEventAPPROVE:
		return []byte(s), nil
	case PullsCreateReviewReqEventREQUESTCHANGES:
		return []byte(s), nil
	case PullsCreateReviewReqEventCOMMENT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsCreateReviewReqEvent) UnmarshalText(data []byte) error {
	switch PullsCreateReviewReqEvent(data) {
	case PullsCreateReviewReqEventAPPROVE:
		*s = PullsCreateReviewReqEventAPPROVE
		return nil
	case PullsCreateReviewReqEventREQUESTCHANGES:
		*s = PullsCreateReviewReqEventREQUESTCHANGES
		return nil
	case PullsCreateReviewReqEventCOMMENT:
		*s = PullsCreateReviewReqEventCOMMENT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PullsDeleteReviewCommentNoContent is response for PullsDeleteReviewComment operation.
type PullsDeleteReviewCommentNoContent struct{}

func (*PullsDeleteReviewCommentNoContent) pullsDeleteReviewCommentRes() {}

type PullsDismissReviewReq struct {
	// The message for the pull request review dismissal.
	Message string    `json:"message"`
	Event   OptString `json:"event"`
}

// GetMessage returns the value of Message.
func (s *PullsDismissReviewReq) GetMessage() string {
	return s.Message
}

// GetEvent returns the value of Event.
func (s *PullsDismissReviewReq) GetEvent() OptString {
	return s.Event
}

// SetMessage sets the value of Message.
func (s *PullsDismissReviewReq) SetMessage(val string) {
	s.Message = val
}

// SetEvent sets the value of Event.
func (s *PullsDismissReviewReq) SetEvent(val OptString) {
	s.Event = val
}

type PullsGetInternalServerError BasicError

func (*PullsGetInternalServerError) pullsGetRes() {}

type PullsGetNotFound BasicError

func (*PullsGetNotFound) pullsGetRes() {}

// PullsListCommentsForReviewOKHeaders wraps []ReviewComment with response headers.
type PullsListCommentsForReviewOKHeaders struct {
	Link     OptString
	Response []ReviewComment
}

// GetLink returns the value of Link.
func (s *PullsListCommentsForReviewOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListCommentsForReviewOKHeaders) GetResponse() []ReviewComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListCommentsForReviewOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListCommentsForReviewOKHeaders) SetResponse(val []ReviewComment) {
	s.Response = val
}

func (*PullsListCommentsForReviewOKHeaders) pullsListCommentsForReviewRes() {}

// PullsListCommitsOKHeaders wraps []Commit with response headers.
type PullsListCommitsOKHeaders struct {
	Link     OptString
	Response []Commit
}

// GetLink returns the value of Link.
func (s *PullsListCommitsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListCommitsOKHeaders) GetResponse() []Commit {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListCommitsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListCommitsOKHeaders) SetResponse(val []Commit) {
	s.Response = val
}

type PullsListDirection string

const (
	PullsListDirectionAsc  PullsListDirection = "asc"
	PullsListDirectionDesc PullsListDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListDirection) MarshalText() ([]byte, error) {
	switch s {
	case PullsListDirectionAsc:
		return []byte(s), nil
	case PullsListDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListDirection) UnmarshalText(data []byte) error {
	switch PullsListDirection(data) {
	case PullsListDirectionAsc:
		*s = PullsListDirectionAsc
		return nil
	case PullsListDirectionDesc:
		*s = PullsListDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PullsListFilesOKHeaders wraps []DiffEntry with response headers.
type PullsListFilesOKHeaders struct {
	Link     OptString
	Response []DiffEntry
}

// GetLink returns the value of Link.
func (s *PullsListFilesOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListFilesOKHeaders) GetResponse() []DiffEntry {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListFilesOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListFilesOKHeaders) SetResponse(val []DiffEntry) {
	s.Response = val
}

func (*PullsListFilesOKHeaders) pullsListFilesRes() {}

// PullsListOKHeaders wraps []PullRequestSimple with response headers.
type PullsListOKHeaders struct {
	Link     OptString
	Response []PullRequestSimple
}

// GetLink returns the value of Link.
func (s *PullsListOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListOKHeaders) GetResponse() []PullRequestSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListOKHeaders) SetResponse(val []PullRequestSimple) {
	s.Response = val
}

func (*PullsListOKHeaders) pullsListRes() {}

type PullsListReviewCommentsDirection string

const (
	PullsListReviewCommentsDirectionAsc  PullsListReviewCommentsDirection = "asc"
	PullsListReviewCommentsDirectionDesc PullsListReviewCommentsDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListReviewCommentsDirection) MarshalText() ([]byte, error) {
	switch s {
	case PullsListReviewCommentsDirectionAsc:
		return []byte(s), nil
	case PullsListReviewCommentsDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListReviewCommentsDirection) UnmarshalText(data []byte) error {
	switch PullsListReviewCommentsDirection(data) {
	case PullsListReviewCommentsDirectionAsc:
		*s = PullsListReviewCommentsDirectionAsc
		return nil
	case PullsListReviewCommentsDirectionDesc:
		*s = PullsListReviewCommentsDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsListReviewCommentsForRepoDirection string

const (
	PullsListReviewCommentsForRepoDirectionAsc  PullsListReviewCommentsForRepoDirection = "asc"
	PullsListReviewCommentsForRepoDirectionDesc PullsListReviewCommentsForRepoDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListReviewCommentsForRepoDirection) MarshalText() ([]byte, error) {
	switch s {
	case PullsListReviewCommentsForRepoDirectionAsc:
		return []byte(s), nil
	case PullsListReviewCommentsForRepoDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListReviewCommentsForRepoDirection) UnmarshalText(data []byte) error {
	switch PullsListReviewCommentsForRepoDirection(data) {
	case PullsListReviewCommentsForRepoDirectionAsc:
		*s = PullsListReviewCommentsForRepoDirectionAsc
		return nil
	case PullsListReviewCommentsForRepoDirectionDesc:
		*s = PullsListReviewCommentsForRepoDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PullsListReviewCommentsForRepoOKHeaders wraps []PullRequestReviewComment with response headers.
type PullsListReviewCommentsForRepoOKHeaders struct {
	Link     OptString
	Response []PullRequestReviewComment
}

// GetLink returns the value of Link.
func (s *PullsListReviewCommentsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListReviewCommentsForRepoOKHeaders) GetResponse() []PullRequestReviewComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListReviewCommentsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListReviewCommentsForRepoOKHeaders) SetResponse(val []PullRequestReviewComment) {
	s.Response = val
}

type PullsListReviewCommentsForRepoSort string

const (
	PullsListReviewCommentsForRepoSortCreated   PullsListReviewCommentsForRepoSort = "created"
	PullsListReviewCommentsForRepoSortUpdated   PullsListReviewCommentsForRepoSort = "updated"
	PullsListReviewCommentsForRepoSortCreatedAt PullsListReviewCommentsForRepoSort = "created_at"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListReviewCommentsForRepoSort) MarshalText() ([]byte, error) {
	switch s {
	case PullsListReviewCommentsForRepoSortCreated:
		return []byte(s), nil
	case PullsListReviewCommentsForRepoSortUpdated:
		return []byte(s), nil
	case PullsListReviewCommentsForRepoSortCreatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListReviewCommentsForRepoSort) UnmarshalText(data []byte) error {
	switch PullsListReviewCommentsForRepoSort(data) {
	case PullsListReviewCommentsForRepoSortCreated:
		*s = PullsListReviewCommentsForRepoSortCreated
		return nil
	case PullsListReviewCommentsForRepoSortUpdated:
		*s = PullsListReviewCommentsForRepoSortUpdated
		return nil
	case PullsListReviewCommentsForRepoSortCreatedAt:
		*s = PullsListReviewCommentsForRepoSortCreatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PullsListReviewCommentsOKHeaders wraps []PullRequestReviewComment with response headers.
type PullsListReviewCommentsOKHeaders struct {
	Link     OptString
	Response []PullRequestReviewComment
}

// GetLink returns the value of Link.
func (s *PullsListReviewCommentsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListReviewCommentsOKHeaders) GetResponse() []PullRequestReviewComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListReviewCommentsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListReviewCommentsOKHeaders) SetResponse(val []PullRequestReviewComment) {
	s.Response = val
}

type PullsListReviewCommentsSort string

const (
	PullsListReviewCommentsSortCreated PullsListReviewCommentsSort = "created"
	PullsListReviewCommentsSortUpdated PullsListReviewCommentsSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListReviewCommentsSort) MarshalText() ([]byte, error) {
	switch s {
	case PullsListReviewCommentsSortCreated:
		return []byte(s), nil
	case PullsListReviewCommentsSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListReviewCommentsSort) UnmarshalText(data []byte) error {
	switch PullsListReviewCommentsSort(data) {
	case PullsListReviewCommentsSortCreated:
		*s = PullsListReviewCommentsSortCreated
		return nil
	case PullsListReviewCommentsSortUpdated:
		*s = PullsListReviewCommentsSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PullsListReviewsOKHeaders wraps []PullRequestReview with response headers.
type PullsListReviewsOKHeaders struct {
	Link     OptString
	Response []PullRequestReview
}

// GetLink returns the value of Link.
func (s *PullsListReviewsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *PullsListReviewsOKHeaders) GetResponse() []PullRequestReview {
	return s.Response
}

// SetLink sets the value of Link.
func (s *PullsListReviewsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *PullsListReviewsOKHeaders) SetResponse(val []PullRequestReview) {
	s.Response = val
}

type PullsListSort string

const (
	PullsListSortCreated     PullsListSort = "created"
	PullsListSortUpdated     PullsListSort = "updated"
	PullsListSortPopularity  PullsListSort = "popularity"
	PullsListSortLongRunning PullsListSort = "long-running"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListSort) MarshalText() ([]byte, error) {
	switch s {
	case PullsListSortCreated:
		return []byte(s), nil
	case PullsListSortUpdated:
		return []byte(s), nil
	case PullsListSortPopularity:
		return []byte(s), nil
	case PullsListSortLongRunning:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListSort) UnmarshalText(data []byte) error {
	switch PullsListSort(data) {
	case PullsListSortCreated:
		*s = PullsListSortCreated
		return nil
	case PullsListSortUpdated:
		*s = PullsListSortUpdated
		return nil
	case PullsListSortPopularity:
		*s = PullsListSortPopularity
		return nil
	case PullsListSortLongRunning:
		*s = PullsListSortLongRunning
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsListState string

const (
	PullsListStateOpen   PullsListState = "open"
	PullsListStateClosed PullsListState = "closed"
	PullsListStateAll    PullsListState = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsListState) MarshalText() ([]byte, error) {
	switch s {
	case PullsListStateOpen:
		return []byte(s), nil
	case PullsListStateClosed:
		return []byte(s), nil
	case PullsListStateAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsListState) UnmarshalText(data []byte) error {
	switch PullsListState(data) {
	case PullsListStateOpen:
		*s = PullsListStateOpen
		return nil
	case PullsListStateClosed:
		*s = PullsListStateClosed
		return nil
	case PullsListStateAll:
		*s = PullsListStateAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsMergeConflict struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *PullsMergeConflict) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *PullsMergeConflict) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *PullsMergeConflict) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *PullsMergeConflict) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*PullsMergeConflict) pullsMergeRes() {}

type PullsMergeForbidden BasicError

func (*PullsMergeForbidden) pullsMergeRes() {}

type PullsMergeMethodNotAllowed struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *PullsMergeMethodNotAllowed) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *PullsMergeMethodNotAllowed) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *PullsMergeMethodNotAllowed) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *PullsMergeMethodNotAllowed) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*PullsMergeMethodNotAllowed) pullsMergeRes() {}

type PullsMergeNotFound BasicError

func (*PullsMergeNotFound) pullsMergeRes() {}

type PullsMergeReq struct {
	// Title for the automatic commit message.
	CommitTitle OptString `json:"commit_title"`
	// Extra detail to append to automatic commit message.
	CommitMessage OptString `json:"commit_message"`
	// SHA that pull request head must match to allow merge.
	Sha OptString `json:"sha"`
	// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
	MergeMethod OptPullsMergeReqMergeMethod `json:"merge_method"`
}

// GetCommitTitle returns the value of CommitTitle.
func (s *PullsMergeReq) GetCommitTitle() OptString {
	return s.CommitTitle
}

// GetCommitMessage returns the value of CommitMessage.
func (s *PullsMergeReq) GetCommitMessage() OptString {
	return s.CommitMessage
}

// GetSha returns the value of Sha.
func (s *PullsMergeReq) GetSha() OptString {
	return s.Sha
}

// GetMergeMethod returns the value of MergeMethod.
func (s *PullsMergeReq) GetMergeMethod() OptPullsMergeReqMergeMethod {
	return s.MergeMethod
}

// SetCommitTitle sets the value of CommitTitle.
func (s *PullsMergeReq) SetCommitTitle(val OptString) {
	s.CommitTitle = val
}

// SetCommitMessage sets the value of CommitMessage.
func (s *PullsMergeReq) SetCommitMessage(val OptString) {
	s.CommitMessage = val
}

// SetSha sets the value of Sha.
func (s *PullsMergeReq) SetSha(val OptString) {
	s.Sha = val
}

// SetMergeMethod sets the value of MergeMethod.
func (s *PullsMergeReq) SetMergeMethod(val OptPullsMergeReqMergeMethod) {
	s.MergeMethod = val
}

// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
type PullsMergeReqMergeMethod string

const (
	PullsMergeReqMergeMethodMerge  PullsMergeReqMergeMethod = "merge"
	PullsMergeReqMergeMethodSquash PullsMergeReqMergeMethod = "squash"
	PullsMergeReqMergeMethodRebase PullsMergeReqMergeMethod = "rebase"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsMergeReqMergeMethod) MarshalText() ([]byte, error) {
	switch s {
	case PullsMergeReqMergeMethodMerge:
		return []byte(s), nil
	case PullsMergeReqMergeMethodSquash:
		return []byte(s), nil
	case PullsMergeReqMergeMethodRebase:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsMergeReqMergeMethod) UnmarshalText(data []byte) error {
	switch PullsMergeReqMergeMethod(data) {
	case PullsMergeReqMergeMethodMerge:
		*s = PullsMergeReqMergeMethodMerge
		return nil
	case PullsMergeReqMergeMethodSquash:
		*s = PullsMergeReqMergeMethodSquash
		return nil
	case PullsMergeReqMergeMethodRebase:
		*s = PullsMergeReqMergeMethodRebase
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsRemoveRequestedReviewersReq struct {
	// An array of user `login`s that will be removed.
	Reviewers []string `json:"reviewers"`
	// An array of team `slug`s that will be removed.
	TeamReviewers []string `json:"team_reviewers"`
}

// GetReviewers returns the value of Reviewers.
func (s *PullsRemoveRequestedReviewersReq) GetReviewers() []string {
	return s.Reviewers
}

// GetTeamReviewers returns the value of TeamReviewers.
func (s *PullsRemoveRequestedReviewersReq) GetTeamReviewers() []string {
	return s.TeamReviewers
}

// SetReviewers sets the value of Reviewers.
func (s *PullsRemoveRequestedReviewersReq) SetReviewers(val []string) {
	s.Reviewers = val
}

// SetTeamReviewers sets the value of TeamReviewers.
func (s *PullsRemoveRequestedReviewersReq) SetTeamReviewers(val []string) {
	s.TeamReviewers = val
}

type PullsSubmitReviewForbidden BasicError

func (*PullsSubmitReviewForbidden) pullsSubmitReviewRes() {}

type PullsSubmitReviewNotFound BasicError

func (*PullsSubmitReviewNotFound) pullsSubmitReviewRes() {}

type PullsSubmitReviewReq struct {
	// The body text of the pull request review.
	Body OptString `json:"body"`
	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
	// or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and
	// sets the review action state to `PENDING`, which means you will need to re-submit the pull request
	// review using a review action.
	Event PullsSubmitReviewReqEvent `json:"event"`
}

// GetBody returns the value of Body.
func (s *PullsSubmitReviewReq) GetBody() OptString {
	return s.Body
}

// GetEvent returns the value of Event.
func (s *PullsSubmitReviewReq) GetEvent() PullsSubmitReviewReqEvent {
	return s.Event
}

// SetBody sets the value of Body.
func (s *PullsSubmitReviewReq) SetBody(val OptString) {
	s.Body = val
}

// SetEvent sets the value of Event.
func (s *PullsSubmitReviewReq) SetEvent(val PullsSubmitReviewReqEvent) {
	s.Event = val
}

// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`,
// or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and
// sets the review action state to `PENDING`, which means you will need to re-submit the pull request
// review using a review action.
type PullsSubmitReviewReqEvent string

const (
	PullsSubmitReviewReqEventAPPROVE        PullsSubmitReviewReqEvent = "APPROVE"
	PullsSubmitReviewReqEventREQUESTCHANGES PullsSubmitReviewReqEvent = "REQUEST_CHANGES"
	PullsSubmitReviewReqEventCOMMENT        PullsSubmitReviewReqEvent = "COMMENT"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsSubmitReviewReqEvent) MarshalText() ([]byte, error) {
	switch s {
	case PullsSubmitReviewReqEventAPPROVE:
		return []byte(s), nil
	case PullsSubmitReviewReqEventREQUESTCHANGES:
		return []byte(s), nil
	case PullsSubmitReviewReqEventCOMMENT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsSubmitReviewReqEvent) UnmarshalText(data []byte) error {
	switch PullsSubmitReviewReqEvent(data) {
	case PullsSubmitReviewReqEventAPPROVE:
		*s = PullsSubmitReviewReqEventAPPROVE
		return nil
	case PullsSubmitReviewReqEventREQUESTCHANGES:
		*s = PullsSubmitReviewReqEventREQUESTCHANGES
		return nil
	case PullsSubmitReviewReqEventCOMMENT:
		*s = PullsSubmitReviewReqEventCOMMENT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsUpdateBranchAccepted struct {
	Message OptString `json:"message"`
	URL     OptString `json:"url"`
}

// GetMessage returns the value of Message.
func (s *PullsUpdateBranchAccepted) GetMessage() OptString {
	return s.Message
}

// GetURL returns the value of URL.
func (s *PullsUpdateBranchAccepted) GetURL() OptString {
	return s.URL
}

// SetMessage sets the value of Message.
func (s *PullsUpdateBranchAccepted) SetMessage(val OptString) {
	s.Message = val
}

// SetURL sets the value of URL.
func (s *PullsUpdateBranchAccepted) SetURL(val OptString) {
	s.URL = val
}

func (*PullsUpdateBranchAccepted) pullsUpdateBranchRes() {}

type PullsUpdateBranchReq struct {
	// The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull
	// request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a
	// `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.
	// com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA
	// of the pull request's current HEAD ref.
	ExpectedHeadSha OptString `json:"expected_head_sha"`
}

// GetExpectedHeadSha returns the value of ExpectedHeadSha.
func (s *PullsUpdateBranchReq) GetExpectedHeadSha() OptString {
	return s.ExpectedHeadSha
}

// SetExpectedHeadSha sets the value of ExpectedHeadSha.
func (s *PullsUpdateBranchReq) SetExpectedHeadSha(val OptString) {
	s.ExpectedHeadSha = val
}

type PullsUpdateReq struct {
	// The title of the pull request.
	Title OptString `json:"title"`
	// The contents of the pull request.
	Body OptString `json:"body"`
	// State of this Pull Request. Either `open` or `closed`.
	State OptPullsUpdateReqState `json:"state"`
	// The name of the branch you want your changes pulled into. This should be an existing branch on the
	// current repository. You cannot update the base branch on a pull request to point to another
	// repository.
	Base OptString `json:"base"`
	// Indicates whether [maintainers can modify](https://help.github.
	// com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify OptBool `json:"maintainer_can_modify"`
}

// GetTitle returns the value of Title.
func (s *PullsUpdateReq) GetTitle() OptString {
	return s.Title
}

// GetBody returns the value of Body.
func (s *PullsUpdateReq) GetBody() OptString {
	return s.Body
}

// GetState returns the value of State.
func (s *PullsUpdateReq) GetState() OptPullsUpdateReqState {
	return s.State
}

// GetBase returns the value of Base.
func (s *PullsUpdateReq) GetBase() OptString {
	return s.Base
}

// GetMaintainerCanModify returns the value of MaintainerCanModify.
func (s *PullsUpdateReq) GetMaintainerCanModify() OptBool {
	return s.MaintainerCanModify
}

// SetTitle sets the value of Title.
func (s *PullsUpdateReq) SetTitle(val OptString) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *PullsUpdateReq) SetBody(val OptString) {
	s.Body = val
}

// SetState sets the value of State.
func (s *PullsUpdateReq) SetState(val OptPullsUpdateReqState) {
	s.State = val
}

// SetBase sets the value of Base.
func (s *PullsUpdateReq) SetBase(val OptString) {
	s.Base = val
}

// SetMaintainerCanModify sets the value of MaintainerCanModify.
func (s *PullsUpdateReq) SetMaintainerCanModify(val OptBool) {
	s.MaintainerCanModify = val
}

// State of this Pull Request. Either `open` or `closed`.
type PullsUpdateReqState string

const (
	PullsUpdateReqStateOpen   PullsUpdateReqState = "open"
	PullsUpdateReqStateClosed PullsUpdateReqState = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s PullsUpdateReqState) MarshalText() ([]byte, error) {
	switch s {
	case PullsUpdateReqStateOpen:
		return []byte(s), nil
	case PullsUpdateReqStateClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PullsUpdateReqState) UnmarshalText(data []byte) error {
	switch PullsUpdateReqState(data) {
	case PullsUpdateReqStateOpen:
		*s = PullsUpdateReqStateOpen
		return nil
	case PullsUpdateReqStateClosed:
		*s = PullsUpdateReqStateClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PullsUpdateReviewCommentReq struct {
	// The text of the reply to the review comment.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *PullsUpdateReviewCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *PullsUpdateReviewCommentReq) SetBody(val string) {
	s.Body = val
}

type PullsUpdateReviewReq struct {
	// The body text of the pull request review.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *PullsUpdateReviewReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *PullsUpdateReviewReq) SetBody(val string) {
	s.Body = val
}

// Ref: #/components/schemas/rate-limit
type RateLimit struct {
	Limit     int `json:"limit"`
	Remaining int `json:"remaining"`
	Reset     int `json:"reset"`
	Used      int `json:"used"`
}

// GetLimit returns the value of Limit.
func (s *RateLimit) GetLimit() int {
	return s.Limit
}

// GetRemaining returns the value of Remaining.
func (s *RateLimit) GetRemaining() int {
	return s.Remaining
}

// GetReset returns the value of Reset.
func (s *RateLimit) GetReset() int {
	return s.Reset
}

// GetUsed returns the value of Used.
func (s *RateLimit) GetUsed() int {
	return s.Used
}

// SetLimit sets the value of Limit.
func (s *RateLimit) SetLimit(val int) {
	s.Limit = val
}

// SetRemaining sets the value of Remaining.
func (s *RateLimit) SetRemaining(val int) {
	s.Remaining = val
}

// SetReset sets the value of Reset.
func (s *RateLimit) SetReset(val int) {
	s.Reset = val
}

// SetUsed sets the value of Used.
func (s *RateLimit) SetUsed(val int) {
	s.Used = val
}

// Rate Limit Overview.
// Ref: #/components/schemas/rate-limit-overview
type RateLimitOverview struct {
	Resources RateLimitOverviewResources `json:"resources"`
	Rate      RateLimit                  `json:"rate"`
}

// GetResources returns the value of Resources.
func (s *RateLimitOverview) GetResources() RateLimitOverviewResources {
	return s.Resources
}

// GetRate returns the value of Rate.
func (s *RateLimitOverview) GetRate() RateLimit {
	return s.Rate
}

// SetResources sets the value of Resources.
func (s *RateLimitOverview) SetResources(val RateLimitOverviewResources) {
	s.Resources = val
}

// SetRate sets the value of Rate.
func (s *RateLimitOverview) SetRate(val RateLimit) {
	s.Rate = val
}

// RateLimitOverviewHeaders wraps RateLimitOverview with response headers.
type RateLimitOverviewHeaders struct {
	XRateLimitLimit     OptInt
	XRateLimitRemaining OptInt
	XRateLimitReset     OptInt
	Response            RateLimitOverview
}

// GetXRateLimitLimit returns the value of XRateLimitLimit.
func (s *RateLimitOverviewHeaders) GetXRateLimitLimit() OptInt {
	return s.XRateLimitLimit
}

// GetXRateLimitRemaining returns the value of XRateLimitRemaining.
func (s *RateLimitOverviewHeaders) GetXRateLimitRemaining() OptInt {
	return s.XRateLimitRemaining
}

// GetXRateLimitReset returns the value of XRateLimitReset.
func (s *RateLimitOverviewHeaders) GetXRateLimitReset() OptInt {
	return s.XRateLimitReset
}

// GetResponse returns the value of Response.
func (s *RateLimitOverviewHeaders) GetResponse() RateLimitOverview {
	return s.Response
}

// SetXRateLimitLimit sets the value of XRateLimitLimit.
func (s *RateLimitOverviewHeaders) SetXRateLimitLimit(val OptInt) {
	s.XRateLimitLimit = val
}

// SetXRateLimitRemaining sets the value of XRateLimitRemaining.
func (s *RateLimitOverviewHeaders) SetXRateLimitRemaining(val OptInt) {
	s.XRateLimitRemaining = val
}

// SetXRateLimitReset sets the value of XRateLimitReset.
func (s *RateLimitOverviewHeaders) SetXRateLimitReset(val OptInt) {
	s.XRateLimitReset = val
}

// SetResponse sets the value of Response.
func (s *RateLimitOverviewHeaders) SetResponse(val RateLimitOverview) {
	s.Response = val
}

func (*RateLimitOverviewHeaders) rateLimitGetRes() {}

type RateLimitOverviewResources struct {
	Core                      RateLimit    `json:"core"`
	Graphql                   OptRateLimit `json:"graphql"`
	Search                    RateLimit    `json:"search"`
	SourceImport              OptRateLimit `json:"source_import"`
	IntegrationManifest       OptRateLimit `json:"integration_manifest"`
	CodeScanningUpload        OptRateLimit `json:"code_scanning_upload"`
	ActionsRunnerRegistration OptRateLimit `json:"actions_runner_registration"`
}

// GetCore returns the value of Core.
func (s *RateLimitOverviewResources) GetCore() RateLimit {
	return s.Core
}

// GetGraphql returns the value of Graphql.
func (s *RateLimitOverviewResources) GetGraphql() OptRateLimit {
	return s.Graphql
}

// GetSearch returns the value of Search.
func (s *RateLimitOverviewResources) GetSearch() RateLimit {
	return s.Search
}

// GetSourceImport returns the value of SourceImport.
func (s *RateLimitOverviewResources) GetSourceImport() OptRateLimit {
	return s.SourceImport
}

// GetIntegrationManifest returns the value of IntegrationManifest.
func (s *RateLimitOverviewResources) GetIntegrationManifest() OptRateLimit {
	return s.IntegrationManifest
}

// GetCodeScanningUpload returns the value of CodeScanningUpload.
func (s *RateLimitOverviewResources) GetCodeScanningUpload() OptRateLimit {
	return s.CodeScanningUpload
}

// GetActionsRunnerRegistration returns the value of ActionsRunnerRegistration.
func (s *RateLimitOverviewResources) GetActionsRunnerRegistration() OptRateLimit {
	return s.ActionsRunnerRegistration
}

// SetCore sets the value of Core.
func (s *RateLimitOverviewResources) SetCore(val RateLimit) {
	s.Core = val
}

// SetGraphql sets the value of Graphql.
func (s *RateLimitOverviewResources) SetGraphql(val OptRateLimit) {
	s.Graphql = val
}

// SetSearch sets the value of Search.
func (s *RateLimitOverviewResources) SetSearch(val RateLimit) {
	s.Search = val
}

// SetSourceImport sets the value of SourceImport.
func (s *RateLimitOverviewResources) SetSourceImport(val OptRateLimit) {
	s.SourceImport = val
}

// SetIntegrationManifest sets the value of IntegrationManifest.
func (s *RateLimitOverviewResources) SetIntegrationManifest(val OptRateLimit) {
	s.IntegrationManifest = val
}

// SetCodeScanningUpload sets the value of CodeScanningUpload.
func (s *RateLimitOverviewResources) SetCodeScanningUpload(val OptRateLimit) {
	s.CodeScanningUpload = val
}

// SetActionsRunnerRegistration sets the value of ActionsRunnerRegistration.
func (s *RateLimitOverviewResources) SetActionsRunnerRegistration(val OptRateLimit) {
	s.ActionsRunnerRegistration = val
}

// Reactions to conversations provide a way to help people express their feelings more simply and
// effectively.
// Ref: #/components/schemas/reaction
type Reaction struct {
	ID     int                   `json:"id"`
	NodeID string                `json:"node_id"`
	User   NilNullableSimpleUser `json:"user"`
	// The reaction to use.
	Content   ReactionContent `json:"content"`
	CreatedAt time.Time       `json:"created_at"`
}

// GetID returns the value of ID.
func (s *Reaction) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Reaction) GetNodeID() string {
	return s.NodeID
}

// GetUser returns the value of User.
func (s *Reaction) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetContent returns the value of Content.
func (s *Reaction) GetContent() ReactionContent {
	return s.Content
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Reaction) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *Reaction) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Reaction) SetNodeID(val string) {
	s.NodeID = val
}

// SetUser sets the value of User.
func (s *Reaction) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetContent sets the value of Content.
func (s *Reaction) SetContent(val ReactionContent) {
	s.Content = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Reaction) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// The reaction to use.
type ReactionContent string

const (
	ReactionContentPlus1    ReactionContent = "+1"
	ReactionContentMinus1   ReactionContent = "-1"
	ReactionContentLaugh    ReactionContent = "laugh"
	ReactionContentConfused ReactionContent = "confused"
	ReactionContentHeart    ReactionContent = "heart"
	ReactionContentHooray   ReactionContent = "hooray"
	ReactionContentRocket   ReactionContent = "rocket"
	ReactionContentEyes     ReactionContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionContentPlus1:
		return []byte(s), nil
	case ReactionContentMinus1:
		return []byte(s), nil
	case ReactionContentLaugh:
		return []byte(s), nil
	case ReactionContentConfused:
		return []byte(s), nil
	case ReactionContentHeart:
		return []byte(s), nil
	case ReactionContentHooray:
		return []byte(s), nil
	case ReactionContentRocket:
		return []byte(s), nil
	case ReactionContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionContent) UnmarshalText(data []byte) error {
	switch ReactionContent(data) {
	case ReactionContentPlus1:
		*s = ReactionContentPlus1
		return nil
	case ReactionContentMinus1:
		*s = ReactionContentMinus1
		return nil
	case ReactionContentLaugh:
		*s = ReactionContentLaugh
		return nil
	case ReactionContentConfused:
		*s = ReactionContentConfused
		return nil
	case ReactionContentHeart:
		*s = ReactionContentHeart
		return nil
	case ReactionContentHooray:
		*s = ReactionContentHooray
		return nil
	case ReactionContentRocket:
		*s = ReactionContentRocket
		return nil
	case ReactionContentEyes:
		*s = ReactionContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/reaction-rollup
type ReactionRollup struct {
	URL        url.URL `json:"url"`
	TotalCount int     `json:"total_count"`
	Plus1      int     `json:"+1"`
	Minus1     int     `json:"-1"`
	Laugh      int     `json:"laugh"`
	Confused   int     `json:"confused"`
	Heart      int     `json:"heart"`
	Hooray     int     `json:"hooray"`
	Eyes       int     `json:"eyes"`
	Rocket     int     `json:"rocket"`
}

// GetURL returns the value of URL.
func (s *ReactionRollup) GetURL() url.URL {
	return s.URL
}

// GetTotalCount returns the value of TotalCount.
func (s *ReactionRollup) GetTotalCount() int {
	return s.TotalCount
}

// GetPlus1 returns the value of Plus1.
func (s *ReactionRollup) GetPlus1() int {
	return s.Plus1
}

// GetMinus1 returns the value of Minus1.
func (s *ReactionRollup) GetMinus1() int {
	return s.Minus1
}

// GetLaugh returns the value of Laugh.
func (s *ReactionRollup) GetLaugh() int {
	return s.Laugh
}

// GetConfused returns the value of Confused.
func (s *ReactionRollup) GetConfused() int {
	return s.Confused
}

// GetHeart returns the value of Heart.
func (s *ReactionRollup) GetHeart() int {
	return s.Heart
}

// GetHooray returns the value of Hooray.
func (s *ReactionRollup) GetHooray() int {
	return s.Hooray
}

// GetEyes returns the value of Eyes.
func (s *ReactionRollup) GetEyes() int {
	return s.Eyes
}

// GetRocket returns the value of Rocket.
func (s *ReactionRollup) GetRocket() int {
	return s.Rocket
}

// SetURL sets the value of URL.
func (s *ReactionRollup) SetURL(val url.URL) {
	s.URL = val
}

// SetTotalCount sets the value of TotalCount.
func (s *ReactionRollup) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetPlus1 sets the value of Plus1.
func (s *ReactionRollup) SetPlus1(val int) {
	s.Plus1 = val
}

// SetMinus1 sets the value of Minus1.
func (s *ReactionRollup) SetMinus1(val int) {
	s.Minus1 = val
}

// SetLaugh sets the value of Laugh.
func (s *ReactionRollup) SetLaugh(val int) {
	s.Laugh = val
}

// SetConfused sets the value of Confused.
func (s *ReactionRollup) SetConfused(val int) {
	s.Confused = val
}

// SetHeart sets the value of Heart.
func (s *ReactionRollup) SetHeart(val int) {
	s.Heart = val
}

// SetHooray sets the value of Hooray.
func (s *ReactionRollup) SetHooray(val int) {
	s.Hooray = val
}

// SetEyes sets the value of Eyes.
func (s *ReactionRollup) SetEyes(val int) {
	s.Eyes = val
}

// SetRocket sets the value of Rocket.
func (s *ReactionRollup) SetRocket(val int) {
	s.Rocket = val
}

type ReactionsCreateForCommitCommentCreated Reaction

func (*ReactionsCreateForCommitCommentCreated) reactionsCreateForCommitCommentRes() {}

type ReactionsCreateForCommitCommentOK Reaction

func (*ReactionsCreateForCommitCommentOK) reactionsCreateForCommitCommentRes() {}

type ReactionsCreateForCommitCommentReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// commit comment.
	Content ReactionsCreateForCommitCommentReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForCommitCommentReq) GetContent() ReactionsCreateForCommitCommentReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForCommitCommentReq) SetContent(val ReactionsCreateForCommitCommentReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// commit comment.
type ReactionsCreateForCommitCommentReqContent string

const (
	ReactionsCreateForCommitCommentReqContentPlus1    ReactionsCreateForCommitCommentReqContent = "+1"
	ReactionsCreateForCommitCommentReqContentMinus1   ReactionsCreateForCommitCommentReqContent = "-1"
	ReactionsCreateForCommitCommentReqContentLaugh    ReactionsCreateForCommitCommentReqContent = "laugh"
	ReactionsCreateForCommitCommentReqContentConfused ReactionsCreateForCommitCommentReqContent = "confused"
	ReactionsCreateForCommitCommentReqContentHeart    ReactionsCreateForCommitCommentReqContent = "heart"
	ReactionsCreateForCommitCommentReqContentHooray   ReactionsCreateForCommitCommentReqContent = "hooray"
	ReactionsCreateForCommitCommentReqContentRocket   ReactionsCreateForCommitCommentReqContent = "rocket"
	ReactionsCreateForCommitCommentReqContentEyes     ReactionsCreateForCommitCommentReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForCommitCommentReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForCommitCommentReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForCommitCommentReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForCommitCommentReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForCommitCommentReqContent(data) {
	case ReactionsCreateForCommitCommentReqContentPlus1:
		*s = ReactionsCreateForCommitCommentReqContentPlus1
		return nil
	case ReactionsCreateForCommitCommentReqContentMinus1:
		*s = ReactionsCreateForCommitCommentReqContentMinus1
		return nil
	case ReactionsCreateForCommitCommentReqContentLaugh:
		*s = ReactionsCreateForCommitCommentReqContentLaugh
		return nil
	case ReactionsCreateForCommitCommentReqContentConfused:
		*s = ReactionsCreateForCommitCommentReqContentConfused
		return nil
	case ReactionsCreateForCommitCommentReqContentHeart:
		*s = ReactionsCreateForCommitCommentReqContentHeart
		return nil
	case ReactionsCreateForCommitCommentReqContentHooray:
		*s = ReactionsCreateForCommitCommentReqContentHooray
		return nil
	case ReactionsCreateForCommitCommentReqContentRocket:
		*s = ReactionsCreateForCommitCommentReqContentRocket
		return nil
	case ReactionsCreateForCommitCommentReqContentEyes:
		*s = ReactionsCreateForCommitCommentReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForIssueCommentCreated Reaction

func (*ReactionsCreateForIssueCommentCreated) reactionsCreateForIssueCommentRes() {}

type ReactionsCreateForIssueCommentOK Reaction

func (*ReactionsCreateForIssueCommentOK) reactionsCreateForIssueCommentRes() {}

type ReactionsCreateForIssueCommentReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// issue comment.
	Content ReactionsCreateForIssueCommentReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForIssueCommentReq) GetContent() ReactionsCreateForIssueCommentReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForIssueCommentReq) SetContent(val ReactionsCreateForIssueCommentReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// issue comment.
type ReactionsCreateForIssueCommentReqContent string

const (
	ReactionsCreateForIssueCommentReqContentPlus1    ReactionsCreateForIssueCommentReqContent = "+1"
	ReactionsCreateForIssueCommentReqContentMinus1   ReactionsCreateForIssueCommentReqContent = "-1"
	ReactionsCreateForIssueCommentReqContentLaugh    ReactionsCreateForIssueCommentReqContent = "laugh"
	ReactionsCreateForIssueCommentReqContentConfused ReactionsCreateForIssueCommentReqContent = "confused"
	ReactionsCreateForIssueCommentReqContentHeart    ReactionsCreateForIssueCommentReqContent = "heart"
	ReactionsCreateForIssueCommentReqContentHooray   ReactionsCreateForIssueCommentReqContent = "hooray"
	ReactionsCreateForIssueCommentReqContentRocket   ReactionsCreateForIssueCommentReqContent = "rocket"
	ReactionsCreateForIssueCommentReqContentEyes     ReactionsCreateForIssueCommentReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForIssueCommentReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForIssueCommentReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForIssueCommentReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForIssueCommentReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForIssueCommentReqContent(data) {
	case ReactionsCreateForIssueCommentReqContentPlus1:
		*s = ReactionsCreateForIssueCommentReqContentPlus1
		return nil
	case ReactionsCreateForIssueCommentReqContentMinus1:
		*s = ReactionsCreateForIssueCommentReqContentMinus1
		return nil
	case ReactionsCreateForIssueCommentReqContentLaugh:
		*s = ReactionsCreateForIssueCommentReqContentLaugh
		return nil
	case ReactionsCreateForIssueCommentReqContentConfused:
		*s = ReactionsCreateForIssueCommentReqContentConfused
		return nil
	case ReactionsCreateForIssueCommentReqContentHeart:
		*s = ReactionsCreateForIssueCommentReqContentHeart
		return nil
	case ReactionsCreateForIssueCommentReqContentHooray:
		*s = ReactionsCreateForIssueCommentReqContentHooray
		return nil
	case ReactionsCreateForIssueCommentReqContentRocket:
		*s = ReactionsCreateForIssueCommentReqContentRocket
		return nil
	case ReactionsCreateForIssueCommentReqContentEyes:
		*s = ReactionsCreateForIssueCommentReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForIssueCreated Reaction

func (*ReactionsCreateForIssueCreated) reactionsCreateForIssueRes() {}

type ReactionsCreateForIssueOK Reaction

func (*ReactionsCreateForIssueOK) reactionsCreateForIssueRes() {}

type ReactionsCreateForIssueReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// issue.
	Content ReactionsCreateForIssueReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForIssueReq) GetContent() ReactionsCreateForIssueReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForIssueReq) SetContent(val ReactionsCreateForIssueReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// issue.
type ReactionsCreateForIssueReqContent string

const (
	ReactionsCreateForIssueReqContentPlus1    ReactionsCreateForIssueReqContent = "+1"
	ReactionsCreateForIssueReqContentMinus1   ReactionsCreateForIssueReqContent = "-1"
	ReactionsCreateForIssueReqContentLaugh    ReactionsCreateForIssueReqContent = "laugh"
	ReactionsCreateForIssueReqContentConfused ReactionsCreateForIssueReqContent = "confused"
	ReactionsCreateForIssueReqContentHeart    ReactionsCreateForIssueReqContent = "heart"
	ReactionsCreateForIssueReqContentHooray   ReactionsCreateForIssueReqContent = "hooray"
	ReactionsCreateForIssueReqContentRocket   ReactionsCreateForIssueReqContent = "rocket"
	ReactionsCreateForIssueReqContentEyes     ReactionsCreateForIssueReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForIssueReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForIssueReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForIssueReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForIssueReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForIssueReqContent(data) {
	case ReactionsCreateForIssueReqContentPlus1:
		*s = ReactionsCreateForIssueReqContentPlus1
		return nil
	case ReactionsCreateForIssueReqContentMinus1:
		*s = ReactionsCreateForIssueReqContentMinus1
		return nil
	case ReactionsCreateForIssueReqContentLaugh:
		*s = ReactionsCreateForIssueReqContentLaugh
		return nil
	case ReactionsCreateForIssueReqContentConfused:
		*s = ReactionsCreateForIssueReqContentConfused
		return nil
	case ReactionsCreateForIssueReqContentHeart:
		*s = ReactionsCreateForIssueReqContentHeart
		return nil
	case ReactionsCreateForIssueReqContentHooray:
		*s = ReactionsCreateForIssueReqContentHooray
		return nil
	case ReactionsCreateForIssueReqContentRocket:
		*s = ReactionsCreateForIssueReqContentRocket
		return nil
	case ReactionsCreateForIssueReqContentEyes:
		*s = ReactionsCreateForIssueReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForPullRequestReviewCommentCreated Reaction

func (*ReactionsCreateForPullRequestReviewCommentCreated) reactionsCreateForPullRequestReviewCommentRes() {
}

type ReactionsCreateForPullRequestReviewCommentOK Reaction

func (*ReactionsCreateForPullRequestReviewCommentOK) reactionsCreateForPullRequestReviewCommentRes() {
}

type ReactionsCreateForPullRequestReviewCommentReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// pull request review comment.
	Content ReactionsCreateForPullRequestReviewCommentReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForPullRequestReviewCommentReq) GetContent() ReactionsCreateForPullRequestReviewCommentReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForPullRequestReviewCommentReq) SetContent(val ReactionsCreateForPullRequestReviewCommentReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// pull request review comment.
type ReactionsCreateForPullRequestReviewCommentReqContent string

const (
	ReactionsCreateForPullRequestReviewCommentReqContentPlus1    ReactionsCreateForPullRequestReviewCommentReqContent = "+1"
	ReactionsCreateForPullRequestReviewCommentReqContentMinus1   ReactionsCreateForPullRequestReviewCommentReqContent = "-1"
	ReactionsCreateForPullRequestReviewCommentReqContentLaugh    ReactionsCreateForPullRequestReviewCommentReqContent = "laugh"
	ReactionsCreateForPullRequestReviewCommentReqContentConfused ReactionsCreateForPullRequestReviewCommentReqContent = "confused"
	ReactionsCreateForPullRequestReviewCommentReqContentHeart    ReactionsCreateForPullRequestReviewCommentReqContent = "heart"
	ReactionsCreateForPullRequestReviewCommentReqContentHooray   ReactionsCreateForPullRequestReviewCommentReqContent = "hooray"
	ReactionsCreateForPullRequestReviewCommentReqContentRocket   ReactionsCreateForPullRequestReviewCommentReqContent = "rocket"
	ReactionsCreateForPullRequestReviewCommentReqContentEyes     ReactionsCreateForPullRequestReviewCommentReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForPullRequestReviewCommentReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForPullRequestReviewCommentReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForPullRequestReviewCommentReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForPullRequestReviewCommentReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForPullRequestReviewCommentReqContent(data) {
	case ReactionsCreateForPullRequestReviewCommentReqContentPlus1:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentPlus1
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentMinus1:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentMinus1
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentLaugh:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentLaugh
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentConfused:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentConfused
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentHeart:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentHeart
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentHooray:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentHooray
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentRocket:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentRocket
		return nil
	case ReactionsCreateForPullRequestReviewCommentReqContentEyes:
		*s = ReactionsCreateForPullRequestReviewCommentReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForReleaseCreated Reaction

func (*ReactionsCreateForReleaseCreated) reactionsCreateForReleaseRes() {}

type ReactionsCreateForReleaseOK Reaction

func (*ReactionsCreateForReleaseOK) reactionsCreateForReleaseRes() {}

type ReactionsCreateForReleaseReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// release.
	Content ReactionsCreateForReleaseReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForReleaseReq) GetContent() ReactionsCreateForReleaseReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForReleaseReq) SetContent(val ReactionsCreateForReleaseReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// release.
type ReactionsCreateForReleaseReqContent string

const (
	ReactionsCreateForReleaseReqContentPlus1  ReactionsCreateForReleaseReqContent = "+1"
	ReactionsCreateForReleaseReqContentLaugh  ReactionsCreateForReleaseReqContent = "laugh"
	ReactionsCreateForReleaseReqContentHeart  ReactionsCreateForReleaseReqContent = "heart"
	ReactionsCreateForReleaseReqContentHooray ReactionsCreateForReleaseReqContent = "hooray"
	ReactionsCreateForReleaseReqContentRocket ReactionsCreateForReleaseReqContent = "rocket"
	ReactionsCreateForReleaseReqContentEyes   ReactionsCreateForReleaseReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForReleaseReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForReleaseReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForReleaseReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForReleaseReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForReleaseReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForReleaseReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForReleaseReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForReleaseReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForReleaseReqContent(data) {
	case ReactionsCreateForReleaseReqContentPlus1:
		*s = ReactionsCreateForReleaseReqContentPlus1
		return nil
	case ReactionsCreateForReleaseReqContentLaugh:
		*s = ReactionsCreateForReleaseReqContentLaugh
		return nil
	case ReactionsCreateForReleaseReqContentHeart:
		*s = ReactionsCreateForReleaseReqContentHeart
		return nil
	case ReactionsCreateForReleaseReqContentHooray:
		*s = ReactionsCreateForReleaseReqContentHooray
		return nil
	case ReactionsCreateForReleaseReqContentRocket:
		*s = ReactionsCreateForReleaseReqContentRocket
		return nil
	case ReactionsCreateForReleaseReqContentEyes:
		*s = ReactionsCreateForReleaseReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForTeamDiscussionCommentInOrgCreated Reaction

func (*ReactionsCreateForTeamDiscussionCommentInOrgCreated) reactionsCreateForTeamDiscussionCommentInOrgRes() {
}

type ReactionsCreateForTeamDiscussionCommentInOrgOK Reaction

func (*ReactionsCreateForTeamDiscussionCommentInOrgOK) reactionsCreateForTeamDiscussionCommentInOrgRes() {
}

type ReactionsCreateForTeamDiscussionCommentInOrgReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion comment.
	Content ReactionsCreateForTeamDiscussionCommentInOrgReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReq) GetContent() ReactionsCreateForTeamDiscussionCommentInOrgReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReq) SetContent(val ReactionsCreateForTeamDiscussionCommentInOrgReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion comment.
type ReactionsCreateForTeamDiscussionCommentInOrgReqContent string

const (
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentPlus1    ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "+1"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentMinus1   ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "-1"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentLaugh    ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "laugh"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentConfused ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "confused"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentHeart    ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "heart"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentHooray   ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "hooray"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentRocket   ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "rocket"
	ReactionsCreateForTeamDiscussionCommentInOrgReqContentEyes     ReactionsCreateForTeamDiscussionCommentInOrgReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForTeamDiscussionCommentInOrgReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForTeamDiscussionCommentInOrgReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForTeamDiscussionCommentInOrgReqContent(data) {
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentPlus1:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentPlus1
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentMinus1:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentMinus1
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentLaugh:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentLaugh
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentConfused:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentConfused
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentHeart:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentHeart
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentHooray:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentHooray
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentRocket:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentRocket
		return nil
	case ReactionsCreateForTeamDiscussionCommentInOrgReqContentEyes:
		*s = ReactionsCreateForTeamDiscussionCommentInOrgReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForTeamDiscussionCommentLegacyReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion comment.
	Content ReactionsCreateForTeamDiscussionCommentLegacyReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReq) GetContent() ReactionsCreateForTeamDiscussionCommentLegacyReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReq) SetContent(val ReactionsCreateForTeamDiscussionCommentLegacyReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion comment.
type ReactionsCreateForTeamDiscussionCommentLegacyReqContent string

const (
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentPlus1    ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "+1"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentMinus1   ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "-1"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentLaugh    ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "laugh"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentConfused ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "confused"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentHeart    ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "heart"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentHooray   ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "hooray"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentRocket   ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "rocket"
	ReactionsCreateForTeamDiscussionCommentLegacyReqContentEyes     ReactionsCreateForTeamDiscussionCommentLegacyReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForTeamDiscussionCommentLegacyReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForTeamDiscussionCommentLegacyReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForTeamDiscussionCommentLegacyReqContent(data) {
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentPlus1:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentPlus1
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentMinus1:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentMinus1
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentLaugh:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentLaugh
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentConfused:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentConfused
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentHeart:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentHeart
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentHooray:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentHooray
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentRocket:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentRocket
		return nil
	case ReactionsCreateForTeamDiscussionCommentLegacyReqContentEyes:
		*s = ReactionsCreateForTeamDiscussionCommentLegacyReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForTeamDiscussionInOrgCreated Reaction

func (*ReactionsCreateForTeamDiscussionInOrgCreated) reactionsCreateForTeamDiscussionInOrgRes() {}

type ReactionsCreateForTeamDiscussionInOrgOK Reaction

func (*ReactionsCreateForTeamDiscussionInOrgOK) reactionsCreateForTeamDiscussionInOrgRes() {}

type ReactionsCreateForTeamDiscussionInOrgReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion.
	Content ReactionsCreateForTeamDiscussionInOrgReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForTeamDiscussionInOrgReq) GetContent() ReactionsCreateForTeamDiscussionInOrgReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForTeamDiscussionInOrgReq) SetContent(val ReactionsCreateForTeamDiscussionInOrgReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion.
type ReactionsCreateForTeamDiscussionInOrgReqContent string

const (
	ReactionsCreateForTeamDiscussionInOrgReqContentPlus1    ReactionsCreateForTeamDiscussionInOrgReqContent = "+1"
	ReactionsCreateForTeamDiscussionInOrgReqContentMinus1   ReactionsCreateForTeamDiscussionInOrgReqContent = "-1"
	ReactionsCreateForTeamDiscussionInOrgReqContentLaugh    ReactionsCreateForTeamDiscussionInOrgReqContent = "laugh"
	ReactionsCreateForTeamDiscussionInOrgReqContentConfused ReactionsCreateForTeamDiscussionInOrgReqContent = "confused"
	ReactionsCreateForTeamDiscussionInOrgReqContentHeart    ReactionsCreateForTeamDiscussionInOrgReqContent = "heart"
	ReactionsCreateForTeamDiscussionInOrgReqContentHooray   ReactionsCreateForTeamDiscussionInOrgReqContent = "hooray"
	ReactionsCreateForTeamDiscussionInOrgReqContentRocket   ReactionsCreateForTeamDiscussionInOrgReqContent = "rocket"
	ReactionsCreateForTeamDiscussionInOrgReqContentEyes     ReactionsCreateForTeamDiscussionInOrgReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForTeamDiscussionInOrgReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForTeamDiscussionInOrgReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForTeamDiscussionInOrgReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForTeamDiscussionInOrgReqContent(data) {
	case ReactionsCreateForTeamDiscussionInOrgReqContentPlus1:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentPlus1
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentMinus1:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentMinus1
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentLaugh:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentLaugh
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentConfused:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentConfused
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentHeart:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentHeart
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentHooray:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentHooray
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentRocket:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentRocket
		return nil
	case ReactionsCreateForTeamDiscussionInOrgReqContentEyes:
		*s = ReactionsCreateForTeamDiscussionInOrgReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsCreateForTeamDiscussionLegacyReq struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
	// team discussion.
	Content ReactionsCreateForTeamDiscussionLegacyReqContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *ReactionsCreateForTeamDiscussionLegacyReq) GetContent() ReactionsCreateForTeamDiscussionLegacyReqContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *ReactionsCreateForTeamDiscussionLegacyReq) SetContent(val ReactionsCreateForTeamDiscussionLegacyReqContent) {
	s.Content = val
}

// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the
// team discussion.
type ReactionsCreateForTeamDiscussionLegacyReqContent string

const (
	ReactionsCreateForTeamDiscussionLegacyReqContentPlus1    ReactionsCreateForTeamDiscussionLegacyReqContent = "+1"
	ReactionsCreateForTeamDiscussionLegacyReqContentMinus1   ReactionsCreateForTeamDiscussionLegacyReqContent = "-1"
	ReactionsCreateForTeamDiscussionLegacyReqContentLaugh    ReactionsCreateForTeamDiscussionLegacyReqContent = "laugh"
	ReactionsCreateForTeamDiscussionLegacyReqContentConfused ReactionsCreateForTeamDiscussionLegacyReqContent = "confused"
	ReactionsCreateForTeamDiscussionLegacyReqContentHeart    ReactionsCreateForTeamDiscussionLegacyReqContent = "heart"
	ReactionsCreateForTeamDiscussionLegacyReqContentHooray   ReactionsCreateForTeamDiscussionLegacyReqContent = "hooray"
	ReactionsCreateForTeamDiscussionLegacyReqContentRocket   ReactionsCreateForTeamDiscussionLegacyReqContent = "rocket"
	ReactionsCreateForTeamDiscussionLegacyReqContentEyes     ReactionsCreateForTeamDiscussionLegacyReqContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsCreateForTeamDiscussionLegacyReqContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsCreateForTeamDiscussionLegacyReqContentPlus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentMinus1:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentLaugh:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentConfused:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentHeart:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentHooray:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentRocket:
		return []byte(s), nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsCreateForTeamDiscussionLegacyReqContent) UnmarshalText(data []byte) error {
	switch ReactionsCreateForTeamDiscussionLegacyReqContent(data) {
	case ReactionsCreateForTeamDiscussionLegacyReqContentPlus1:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentPlus1
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentMinus1:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentMinus1
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentLaugh:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentLaugh
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentConfused:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentConfused
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentHeart:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentHeart
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentHooray:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentHooray
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentRocket:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentRocket
		return nil
	case ReactionsCreateForTeamDiscussionLegacyReqContentEyes:
		*s = ReactionsCreateForTeamDiscussionLegacyReqContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsDeleteForCommitCommentNoContent is response for ReactionsDeleteForCommitComment operation.
type ReactionsDeleteForCommitCommentNoContent struct{}

// ReactionsDeleteForIssueCommentNoContent is response for ReactionsDeleteForIssueComment operation.
type ReactionsDeleteForIssueCommentNoContent struct{}

// ReactionsDeleteForIssueNoContent is response for ReactionsDeleteForIssue operation.
type ReactionsDeleteForIssueNoContent struct{}

// ReactionsDeleteForPullRequestCommentNoContent is response for ReactionsDeleteForPullRequestComment operation.
type ReactionsDeleteForPullRequestCommentNoContent struct{}

// ReactionsDeleteForTeamDiscussionCommentNoContent is response for ReactionsDeleteForTeamDiscussionComment operation.
type ReactionsDeleteForTeamDiscussionCommentNoContent struct{}

// ReactionsDeleteForTeamDiscussionNoContent is response for ReactionsDeleteForTeamDiscussion operation.
type ReactionsDeleteForTeamDiscussionNoContent struct{}

type ReactionsDeleteLegacyForbidden BasicError

func (*ReactionsDeleteLegacyForbidden) reactionsDeleteLegacyRes() {}

type ReactionsDeleteLegacyGone BasicError

func (*ReactionsDeleteLegacyGone) reactionsDeleteLegacyRes() {}

// ReactionsDeleteLegacyNoContent is response for ReactionsDeleteLegacy operation.
type ReactionsDeleteLegacyNoContent struct{}

func (*ReactionsDeleteLegacyNoContent) reactionsDeleteLegacyRes() {}

type ReactionsDeleteLegacyUnauthorized BasicError

func (*ReactionsDeleteLegacyUnauthorized) reactionsDeleteLegacyRes() {}

type ReactionsListForCommitCommentContent string

const (
	ReactionsListForCommitCommentContentPlus1    ReactionsListForCommitCommentContent = "+1"
	ReactionsListForCommitCommentContentMinus1   ReactionsListForCommitCommentContent = "-1"
	ReactionsListForCommitCommentContentLaugh    ReactionsListForCommitCommentContent = "laugh"
	ReactionsListForCommitCommentContentConfused ReactionsListForCommitCommentContent = "confused"
	ReactionsListForCommitCommentContentHeart    ReactionsListForCommitCommentContent = "heart"
	ReactionsListForCommitCommentContentHooray   ReactionsListForCommitCommentContent = "hooray"
	ReactionsListForCommitCommentContentRocket   ReactionsListForCommitCommentContent = "rocket"
	ReactionsListForCommitCommentContentEyes     ReactionsListForCommitCommentContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForCommitCommentContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForCommitCommentContentPlus1:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentMinus1:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentLaugh:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentConfused:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentHeart:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentHooray:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentRocket:
		return []byte(s), nil
	case ReactionsListForCommitCommentContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForCommitCommentContent) UnmarshalText(data []byte) error {
	switch ReactionsListForCommitCommentContent(data) {
	case ReactionsListForCommitCommentContentPlus1:
		*s = ReactionsListForCommitCommentContentPlus1
		return nil
	case ReactionsListForCommitCommentContentMinus1:
		*s = ReactionsListForCommitCommentContentMinus1
		return nil
	case ReactionsListForCommitCommentContentLaugh:
		*s = ReactionsListForCommitCommentContentLaugh
		return nil
	case ReactionsListForCommitCommentContentConfused:
		*s = ReactionsListForCommitCommentContentConfused
		return nil
	case ReactionsListForCommitCommentContentHeart:
		*s = ReactionsListForCommitCommentContentHeart
		return nil
	case ReactionsListForCommitCommentContentHooray:
		*s = ReactionsListForCommitCommentContentHooray
		return nil
	case ReactionsListForCommitCommentContentRocket:
		*s = ReactionsListForCommitCommentContentRocket
		return nil
	case ReactionsListForCommitCommentContentEyes:
		*s = ReactionsListForCommitCommentContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForCommitCommentOKHeaders wraps []Reaction with response headers.
type ReactionsListForCommitCommentOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForCommitCommentOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForCommitCommentOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForCommitCommentOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForCommitCommentOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

func (*ReactionsListForCommitCommentOKHeaders) reactionsListForCommitCommentRes() {}

type ReactionsListForIssueCommentContent string

const (
	ReactionsListForIssueCommentContentPlus1    ReactionsListForIssueCommentContent = "+1"
	ReactionsListForIssueCommentContentMinus1   ReactionsListForIssueCommentContent = "-1"
	ReactionsListForIssueCommentContentLaugh    ReactionsListForIssueCommentContent = "laugh"
	ReactionsListForIssueCommentContentConfused ReactionsListForIssueCommentContent = "confused"
	ReactionsListForIssueCommentContentHeart    ReactionsListForIssueCommentContent = "heart"
	ReactionsListForIssueCommentContentHooray   ReactionsListForIssueCommentContent = "hooray"
	ReactionsListForIssueCommentContentRocket   ReactionsListForIssueCommentContent = "rocket"
	ReactionsListForIssueCommentContentEyes     ReactionsListForIssueCommentContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForIssueCommentContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForIssueCommentContentPlus1:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentMinus1:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentLaugh:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentConfused:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentHeart:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentHooray:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentRocket:
		return []byte(s), nil
	case ReactionsListForIssueCommentContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForIssueCommentContent) UnmarshalText(data []byte) error {
	switch ReactionsListForIssueCommentContent(data) {
	case ReactionsListForIssueCommentContentPlus1:
		*s = ReactionsListForIssueCommentContentPlus1
		return nil
	case ReactionsListForIssueCommentContentMinus1:
		*s = ReactionsListForIssueCommentContentMinus1
		return nil
	case ReactionsListForIssueCommentContentLaugh:
		*s = ReactionsListForIssueCommentContentLaugh
		return nil
	case ReactionsListForIssueCommentContentConfused:
		*s = ReactionsListForIssueCommentContentConfused
		return nil
	case ReactionsListForIssueCommentContentHeart:
		*s = ReactionsListForIssueCommentContentHeart
		return nil
	case ReactionsListForIssueCommentContentHooray:
		*s = ReactionsListForIssueCommentContentHooray
		return nil
	case ReactionsListForIssueCommentContentRocket:
		*s = ReactionsListForIssueCommentContentRocket
		return nil
	case ReactionsListForIssueCommentContentEyes:
		*s = ReactionsListForIssueCommentContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForIssueCommentOKHeaders wraps []Reaction with response headers.
type ReactionsListForIssueCommentOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForIssueCommentOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForIssueCommentOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForIssueCommentOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForIssueCommentOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

func (*ReactionsListForIssueCommentOKHeaders) reactionsListForIssueCommentRes() {}

type ReactionsListForIssueContent string

const (
	ReactionsListForIssueContentPlus1    ReactionsListForIssueContent = "+1"
	ReactionsListForIssueContentMinus1   ReactionsListForIssueContent = "-1"
	ReactionsListForIssueContentLaugh    ReactionsListForIssueContent = "laugh"
	ReactionsListForIssueContentConfused ReactionsListForIssueContent = "confused"
	ReactionsListForIssueContentHeart    ReactionsListForIssueContent = "heart"
	ReactionsListForIssueContentHooray   ReactionsListForIssueContent = "hooray"
	ReactionsListForIssueContentRocket   ReactionsListForIssueContent = "rocket"
	ReactionsListForIssueContentEyes     ReactionsListForIssueContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForIssueContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForIssueContentPlus1:
		return []byte(s), nil
	case ReactionsListForIssueContentMinus1:
		return []byte(s), nil
	case ReactionsListForIssueContentLaugh:
		return []byte(s), nil
	case ReactionsListForIssueContentConfused:
		return []byte(s), nil
	case ReactionsListForIssueContentHeart:
		return []byte(s), nil
	case ReactionsListForIssueContentHooray:
		return []byte(s), nil
	case ReactionsListForIssueContentRocket:
		return []byte(s), nil
	case ReactionsListForIssueContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForIssueContent) UnmarshalText(data []byte) error {
	switch ReactionsListForIssueContent(data) {
	case ReactionsListForIssueContentPlus1:
		*s = ReactionsListForIssueContentPlus1
		return nil
	case ReactionsListForIssueContentMinus1:
		*s = ReactionsListForIssueContentMinus1
		return nil
	case ReactionsListForIssueContentLaugh:
		*s = ReactionsListForIssueContentLaugh
		return nil
	case ReactionsListForIssueContentConfused:
		*s = ReactionsListForIssueContentConfused
		return nil
	case ReactionsListForIssueContentHeart:
		*s = ReactionsListForIssueContentHeart
		return nil
	case ReactionsListForIssueContentHooray:
		*s = ReactionsListForIssueContentHooray
		return nil
	case ReactionsListForIssueContentRocket:
		*s = ReactionsListForIssueContentRocket
		return nil
	case ReactionsListForIssueContentEyes:
		*s = ReactionsListForIssueContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReactionsListForIssueGone BasicError

func (*ReactionsListForIssueGone) reactionsListForIssueRes() {}

type ReactionsListForIssueNotFound BasicError

func (*ReactionsListForIssueNotFound) reactionsListForIssueRes() {}

// ReactionsListForIssueOKHeaders wraps []Reaction with response headers.
type ReactionsListForIssueOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForIssueOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForIssueOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForIssueOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForIssueOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

func (*ReactionsListForIssueOKHeaders) reactionsListForIssueRes() {}

type ReactionsListForPullRequestReviewCommentContent string

const (
	ReactionsListForPullRequestReviewCommentContentPlus1    ReactionsListForPullRequestReviewCommentContent = "+1"
	ReactionsListForPullRequestReviewCommentContentMinus1   ReactionsListForPullRequestReviewCommentContent = "-1"
	ReactionsListForPullRequestReviewCommentContentLaugh    ReactionsListForPullRequestReviewCommentContent = "laugh"
	ReactionsListForPullRequestReviewCommentContentConfused ReactionsListForPullRequestReviewCommentContent = "confused"
	ReactionsListForPullRequestReviewCommentContentHeart    ReactionsListForPullRequestReviewCommentContent = "heart"
	ReactionsListForPullRequestReviewCommentContentHooray   ReactionsListForPullRequestReviewCommentContent = "hooray"
	ReactionsListForPullRequestReviewCommentContentRocket   ReactionsListForPullRequestReviewCommentContent = "rocket"
	ReactionsListForPullRequestReviewCommentContentEyes     ReactionsListForPullRequestReviewCommentContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForPullRequestReviewCommentContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForPullRequestReviewCommentContentPlus1:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentMinus1:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentLaugh:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentConfused:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentHeart:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentHooray:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentRocket:
		return []byte(s), nil
	case ReactionsListForPullRequestReviewCommentContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForPullRequestReviewCommentContent) UnmarshalText(data []byte) error {
	switch ReactionsListForPullRequestReviewCommentContent(data) {
	case ReactionsListForPullRequestReviewCommentContentPlus1:
		*s = ReactionsListForPullRequestReviewCommentContentPlus1
		return nil
	case ReactionsListForPullRequestReviewCommentContentMinus1:
		*s = ReactionsListForPullRequestReviewCommentContentMinus1
		return nil
	case ReactionsListForPullRequestReviewCommentContentLaugh:
		*s = ReactionsListForPullRequestReviewCommentContentLaugh
		return nil
	case ReactionsListForPullRequestReviewCommentContentConfused:
		*s = ReactionsListForPullRequestReviewCommentContentConfused
		return nil
	case ReactionsListForPullRequestReviewCommentContentHeart:
		*s = ReactionsListForPullRequestReviewCommentContentHeart
		return nil
	case ReactionsListForPullRequestReviewCommentContentHooray:
		*s = ReactionsListForPullRequestReviewCommentContentHooray
		return nil
	case ReactionsListForPullRequestReviewCommentContentRocket:
		*s = ReactionsListForPullRequestReviewCommentContentRocket
		return nil
	case ReactionsListForPullRequestReviewCommentContentEyes:
		*s = ReactionsListForPullRequestReviewCommentContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForPullRequestReviewCommentOKHeaders wraps []Reaction with response headers.
type ReactionsListForPullRequestReviewCommentOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForPullRequestReviewCommentOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForPullRequestReviewCommentOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForPullRequestReviewCommentOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForPullRequestReviewCommentOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

func (*ReactionsListForPullRequestReviewCommentOKHeaders) reactionsListForPullRequestReviewCommentRes() {
}

type ReactionsListForTeamDiscussionCommentInOrgContent string

const (
	ReactionsListForTeamDiscussionCommentInOrgContentPlus1    ReactionsListForTeamDiscussionCommentInOrgContent = "+1"
	ReactionsListForTeamDiscussionCommentInOrgContentMinus1   ReactionsListForTeamDiscussionCommentInOrgContent = "-1"
	ReactionsListForTeamDiscussionCommentInOrgContentLaugh    ReactionsListForTeamDiscussionCommentInOrgContent = "laugh"
	ReactionsListForTeamDiscussionCommentInOrgContentConfused ReactionsListForTeamDiscussionCommentInOrgContent = "confused"
	ReactionsListForTeamDiscussionCommentInOrgContentHeart    ReactionsListForTeamDiscussionCommentInOrgContent = "heart"
	ReactionsListForTeamDiscussionCommentInOrgContentHooray   ReactionsListForTeamDiscussionCommentInOrgContent = "hooray"
	ReactionsListForTeamDiscussionCommentInOrgContentRocket   ReactionsListForTeamDiscussionCommentInOrgContent = "rocket"
	ReactionsListForTeamDiscussionCommentInOrgContentEyes     ReactionsListForTeamDiscussionCommentInOrgContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForTeamDiscussionCommentInOrgContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForTeamDiscussionCommentInOrgContentPlus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentMinus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentLaugh:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentConfused:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentHeart:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentHooray:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentRocket:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentInOrgContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForTeamDiscussionCommentInOrgContent) UnmarshalText(data []byte) error {
	switch ReactionsListForTeamDiscussionCommentInOrgContent(data) {
	case ReactionsListForTeamDiscussionCommentInOrgContentPlus1:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentPlus1
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentMinus1:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentMinus1
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentLaugh:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentLaugh
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentConfused:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentConfused
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentHeart:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentHeart
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentHooray:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentHooray
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentRocket:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentRocket
		return nil
	case ReactionsListForTeamDiscussionCommentInOrgContentEyes:
		*s = ReactionsListForTeamDiscussionCommentInOrgContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForTeamDiscussionCommentInOrgOKHeaders wraps []Reaction with response headers.
type ReactionsListForTeamDiscussionCommentInOrgOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForTeamDiscussionCommentInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForTeamDiscussionCommentInOrgOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForTeamDiscussionCommentInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForTeamDiscussionCommentInOrgOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

type ReactionsListForTeamDiscussionCommentLegacyContent string

const (
	ReactionsListForTeamDiscussionCommentLegacyContentPlus1    ReactionsListForTeamDiscussionCommentLegacyContent = "+1"
	ReactionsListForTeamDiscussionCommentLegacyContentMinus1   ReactionsListForTeamDiscussionCommentLegacyContent = "-1"
	ReactionsListForTeamDiscussionCommentLegacyContentLaugh    ReactionsListForTeamDiscussionCommentLegacyContent = "laugh"
	ReactionsListForTeamDiscussionCommentLegacyContentConfused ReactionsListForTeamDiscussionCommentLegacyContent = "confused"
	ReactionsListForTeamDiscussionCommentLegacyContentHeart    ReactionsListForTeamDiscussionCommentLegacyContent = "heart"
	ReactionsListForTeamDiscussionCommentLegacyContentHooray   ReactionsListForTeamDiscussionCommentLegacyContent = "hooray"
	ReactionsListForTeamDiscussionCommentLegacyContentRocket   ReactionsListForTeamDiscussionCommentLegacyContent = "rocket"
	ReactionsListForTeamDiscussionCommentLegacyContentEyes     ReactionsListForTeamDiscussionCommentLegacyContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForTeamDiscussionCommentLegacyContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForTeamDiscussionCommentLegacyContentPlus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentMinus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentLaugh:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentConfused:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentHeart:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentHooray:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentRocket:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionCommentLegacyContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForTeamDiscussionCommentLegacyContent) UnmarshalText(data []byte) error {
	switch ReactionsListForTeamDiscussionCommentLegacyContent(data) {
	case ReactionsListForTeamDiscussionCommentLegacyContentPlus1:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentPlus1
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentMinus1:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentMinus1
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentLaugh:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentLaugh
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentConfused:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentConfused
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentHeart:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentHeart
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentHooray:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentHooray
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentRocket:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentRocket
		return nil
	case ReactionsListForTeamDiscussionCommentLegacyContentEyes:
		*s = ReactionsListForTeamDiscussionCommentLegacyContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForTeamDiscussionCommentLegacyOKHeaders wraps []Reaction with response headers.
type ReactionsListForTeamDiscussionCommentLegacyOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForTeamDiscussionCommentLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForTeamDiscussionCommentLegacyOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForTeamDiscussionCommentLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForTeamDiscussionCommentLegacyOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

type ReactionsListForTeamDiscussionInOrgContent string

const (
	ReactionsListForTeamDiscussionInOrgContentPlus1    ReactionsListForTeamDiscussionInOrgContent = "+1"
	ReactionsListForTeamDiscussionInOrgContentMinus1   ReactionsListForTeamDiscussionInOrgContent = "-1"
	ReactionsListForTeamDiscussionInOrgContentLaugh    ReactionsListForTeamDiscussionInOrgContent = "laugh"
	ReactionsListForTeamDiscussionInOrgContentConfused ReactionsListForTeamDiscussionInOrgContent = "confused"
	ReactionsListForTeamDiscussionInOrgContentHeart    ReactionsListForTeamDiscussionInOrgContent = "heart"
	ReactionsListForTeamDiscussionInOrgContentHooray   ReactionsListForTeamDiscussionInOrgContent = "hooray"
	ReactionsListForTeamDiscussionInOrgContentRocket   ReactionsListForTeamDiscussionInOrgContent = "rocket"
	ReactionsListForTeamDiscussionInOrgContentEyes     ReactionsListForTeamDiscussionInOrgContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForTeamDiscussionInOrgContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForTeamDiscussionInOrgContentPlus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentMinus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentLaugh:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentConfused:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentHeart:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentHooray:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentRocket:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionInOrgContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForTeamDiscussionInOrgContent) UnmarshalText(data []byte) error {
	switch ReactionsListForTeamDiscussionInOrgContent(data) {
	case ReactionsListForTeamDiscussionInOrgContentPlus1:
		*s = ReactionsListForTeamDiscussionInOrgContentPlus1
		return nil
	case ReactionsListForTeamDiscussionInOrgContentMinus1:
		*s = ReactionsListForTeamDiscussionInOrgContentMinus1
		return nil
	case ReactionsListForTeamDiscussionInOrgContentLaugh:
		*s = ReactionsListForTeamDiscussionInOrgContentLaugh
		return nil
	case ReactionsListForTeamDiscussionInOrgContentConfused:
		*s = ReactionsListForTeamDiscussionInOrgContentConfused
		return nil
	case ReactionsListForTeamDiscussionInOrgContentHeart:
		*s = ReactionsListForTeamDiscussionInOrgContentHeart
		return nil
	case ReactionsListForTeamDiscussionInOrgContentHooray:
		*s = ReactionsListForTeamDiscussionInOrgContentHooray
		return nil
	case ReactionsListForTeamDiscussionInOrgContentRocket:
		*s = ReactionsListForTeamDiscussionInOrgContentRocket
		return nil
	case ReactionsListForTeamDiscussionInOrgContentEyes:
		*s = ReactionsListForTeamDiscussionInOrgContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForTeamDiscussionInOrgOKHeaders wraps []Reaction with response headers.
type ReactionsListForTeamDiscussionInOrgOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForTeamDiscussionInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForTeamDiscussionInOrgOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForTeamDiscussionInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForTeamDiscussionInOrgOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

type ReactionsListForTeamDiscussionLegacyContent string

const (
	ReactionsListForTeamDiscussionLegacyContentPlus1    ReactionsListForTeamDiscussionLegacyContent = "+1"
	ReactionsListForTeamDiscussionLegacyContentMinus1   ReactionsListForTeamDiscussionLegacyContent = "-1"
	ReactionsListForTeamDiscussionLegacyContentLaugh    ReactionsListForTeamDiscussionLegacyContent = "laugh"
	ReactionsListForTeamDiscussionLegacyContentConfused ReactionsListForTeamDiscussionLegacyContent = "confused"
	ReactionsListForTeamDiscussionLegacyContentHeart    ReactionsListForTeamDiscussionLegacyContent = "heart"
	ReactionsListForTeamDiscussionLegacyContentHooray   ReactionsListForTeamDiscussionLegacyContent = "hooray"
	ReactionsListForTeamDiscussionLegacyContentRocket   ReactionsListForTeamDiscussionLegacyContent = "rocket"
	ReactionsListForTeamDiscussionLegacyContentEyes     ReactionsListForTeamDiscussionLegacyContent = "eyes"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReactionsListForTeamDiscussionLegacyContent) MarshalText() ([]byte, error) {
	switch s {
	case ReactionsListForTeamDiscussionLegacyContentPlus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentMinus1:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentLaugh:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentConfused:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentHeart:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentHooray:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentRocket:
		return []byte(s), nil
	case ReactionsListForTeamDiscussionLegacyContentEyes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReactionsListForTeamDiscussionLegacyContent) UnmarshalText(data []byte) error {
	switch ReactionsListForTeamDiscussionLegacyContent(data) {
	case ReactionsListForTeamDiscussionLegacyContentPlus1:
		*s = ReactionsListForTeamDiscussionLegacyContentPlus1
		return nil
	case ReactionsListForTeamDiscussionLegacyContentMinus1:
		*s = ReactionsListForTeamDiscussionLegacyContentMinus1
		return nil
	case ReactionsListForTeamDiscussionLegacyContentLaugh:
		*s = ReactionsListForTeamDiscussionLegacyContentLaugh
		return nil
	case ReactionsListForTeamDiscussionLegacyContentConfused:
		*s = ReactionsListForTeamDiscussionLegacyContentConfused
		return nil
	case ReactionsListForTeamDiscussionLegacyContentHeart:
		*s = ReactionsListForTeamDiscussionLegacyContentHeart
		return nil
	case ReactionsListForTeamDiscussionLegacyContentHooray:
		*s = ReactionsListForTeamDiscussionLegacyContentHooray
		return nil
	case ReactionsListForTeamDiscussionLegacyContentRocket:
		*s = ReactionsListForTeamDiscussionLegacyContentRocket
		return nil
	case ReactionsListForTeamDiscussionLegacyContentEyes:
		*s = ReactionsListForTeamDiscussionLegacyContentEyes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReactionsListForTeamDiscussionLegacyOKHeaders wraps []Reaction with response headers.
type ReactionsListForTeamDiscussionLegacyOKHeaders struct {
	Link     OptString
	Response []Reaction
}

// GetLink returns the value of Link.
func (s *ReactionsListForTeamDiscussionLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReactionsListForTeamDiscussionLegacyOKHeaders) GetResponse() []Reaction {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReactionsListForTeamDiscussionLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReactionsListForTeamDiscussionLegacyOKHeaders) SetResponse(val []Reaction) {
	s.Response = val
}

// Referrer Traffic.
// Ref: #/components/schemas/referrer-traffic
type ReferrerTraffic struct {
	Referrer string `json:"referrer"`
	Count    int    `json:"count"`
	Uniques  int    `json:"uniques"`
}

// GetReferrer returns the value of Referrer.
func (s *ReferrerTraffic) GetReferrer() string {
	return s.Referrer
}

// GetCount returns the value of Count.
func (s *ReferrerTraffic) GetCount() int {
	return s.Count
}

// GetUniques returns the value of Uniques.
func (s *ReferrerTraffic) GetUniques() int {
	return s.Uniques
}

// SetReferrer sets the value of Referrer.
func (s *ReferrerTraffic) SetReferrer(val string) {
	s.Referrer = val
}

// SetCount sets the value of Count.
func (s *ReferrerTraffic) SetCount(val int) {
	s.Count = val
}

// SetUniques sets the value of Uniques.
func (s *ReferrerTraffic) SetUniques(val int) {
	s.Uniques = val
}

// A release.
// Ref: #/components/schemas/release
type Release struct {
	URL        url.URL `json:"url"`
	HTMLURL    url.URL `json:"html_url"`
	AssetsURL  url.URL `json:"assets_url"`
	UploadURL  string  `json:"upload_url"`
	TarballURL NilURI  `json:"tarball_url"`
	ZipballURL NilURI  `json:"zipball_url"`
	ID         int     `json:"id"`
	NodeID     string  `json:"node_id"`
	// The name of the tag.
	TagName string `json:"tag_name"`
	// Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish string       `json:"target_commitish"`
	Name            NilString    `json:"name"`
	Body            OptNilString `json:"body"`
	// True to create a draft (unpublished) release, false to create a published one.
	Draft bool `json:"draft"`
	// Whether to identify the release as a prerelease or a full release.
	Prerelease    bool           `json:"prerelease"`
	CreatedAt     time.Time      `json:"created_at"`
	PublishedAt   NilDateTime    `json:"published_at"`
	Author        SimpleUser     `json:"author"`
	Assets        []ReleaseAsset `json:"assets"`
	BodyHTML      OptString      `json:"body_html"`
	BodyText      OptString      `json:"body_text"`
	MentionsCount OptInt         `json:"mentions_count"`
	// The URL of the release discussion.
	DiscussionURL OptURI            `json:"discussion_url"`
	Reactions     OptReactionRollup `json:"reactions"`
}

// GetURL returns the value of URL.
func (s *Release) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Release) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetAssetsURL returns the value of AssetsURL.
func (s *Release) GetAssetsURL() url.URL {
	return s.AssetsURL
}

// GetUploadURL returns the value of UploadURL.
func (s *Release) GetUploadURL() string {
	return s.UploadURL
}

// GetTarballURL returns the value of TarballURL.
func (s *Release) GetTarballURL() NilURI {
	return s.TarballURL
}

// GetZipballURL returns the value of ZipballURL.
func (s *Release) GetZipballURL() NilURI {
	return s.ZipballURL
}

// GetID returns the value of ID.
func (s *Release) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Release) GetNodeID() string {
	return s.NodeID
}

// GetTagName returns the value of TagName.
func (s *Release) GetTagName() string {
	return s.TagName
}

// GetTargetCommitish returns the value of TargetCommitish.
func (s *Release) GetTargetCommitish() string {
	return s.TargetCommitish
}

// GetName returns the value of Name.
func (s *Release) GetName() NilString {
	return s.Name
}

// GetBody returns the value of Body.
func (s *Release) GetBody() OptNilString {
	return s.Body
}

// GetDraft returns the value of Draft.
func (s *Release) GetDraft() bool {
	return s.Draft
}

// GetPrerelease returns the value of Prerelease.
func (s *Release) GetPrerelease() bool {
	return s.Prerelease
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Release) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetPublishedAt returns the value of PublishedAt.
func (s *Release) GetPublishedAt() NilDateTime {
	return s.PublishedAt
}

// GetAuthor returns the value of Author.
func (s *Release) GetAuthor() SimpleUser {
	return s.Author
}

// GetAssets returns the value of Assets.
func (s *Release) GetAssets() []ReleaseAsset {
	return s.Assets
}

// GetBodyHTML returns the value of BodyHTML.
func (s *Release) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetBodyText returns the value of BodyText.
func (s *Release) GetBodyText() OptString {
	return s.BodyText
}

// GetMentionsCount returns the value of MentionsCount.
func (s *Release) GetMentionsCount() OptInt {
	return s.MentionsCount
}

// GetDiscussionURL returns the value of DiscussionURL.
func (s *Release) GetDiscussionURL() OptURI {
	return s.DiscussionURL
}

// GetReactions returns the value of Reactions.
func (s *Release) GetReactions() OptReactionRollup {
	return s.Reactions
}

// SetURL sets the value of URL.
func (s *Release) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Release) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetAssetsURL sets the value of AssetsURL.
func (s *Release) SetAssetsURL(val url.URL) {
	s.AssetsURL = val
}

// SetUploadURL sets the value of UploadURL.
func (s *Release) SetUploadURL(val string) {
	s.UploadURL = val
}

// SetTarballURL sets the value of TarballURL.
func (s *Release) SetTarballURL(val NilURI) {
	s.TarballURL = val
}

// SetZipballURL sets the value of ZipballURL.
func (s *Release) SetZipballURL(val NilURI) {
	s.ZipballURL = val
}

// SetID sets the value of ID.
func (s *Release) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Release) SetNodeID(val string) {
	s.NodeID = val
}

// SetTagName sets the value of TagName.
func (s *Release) SetTagName(val string) {
	s.TagName = val
}

// SetTargetCommitish sets the value of TargetCommitish.
func (s *Release) SetTargetCommitish(val string) {
	s.TargetCommitish = val
}

// SetName sets the value of Name.
func (s *Release) SetName(val NilString) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *Release) SetBody(val OptNilString) {
	s.Body = val
}

// SetDraft sets the value of Draft.
func (s *Release) SetDraft(val bool) {
	s.Draft = val
}

// SetPrerelease sets the value of Prerelease.
func (s *Release) SetPrerelease(val bool) {
	s.Prerelease = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Release) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetPublishedAt sets the value of PublishedAt.
func (s *Release) SetPublishedAt(val NilDateTime) {
	s.PublishedAt = val
}

// SetAuthor sets the value of Author.
func (s *Release) SetAuthor(val SimpleUser) {
	s.Author = val
}

// SetAssets sets the value of Assets.
func (s *Release) SetAssets(val []ReleaseAsset) {
	s.Assets = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *Release) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetBodyText sets the value of BodyText.
func (s *Release) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetMentionsCount sets the value of MentionsCount.
func (s *Release) SetMentionsCount(val OptInt) {
	s.MentionsCount = val
}

// SetDiscussionURL sets the value of DiscussionURL.
func (s *Release) SetDiscussionURL(val OptURI) {
	s.DiscussionURL = val
}

// SetReactions sets the value of Reactions.
func (s *Release) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

func (*Release) reposGetReleaseByTagRes() {}
func (*Release) reposGetReleaseRes()      {}
func (*Release) reposUpdateReleaseRes()   {}

// Data related to a release.
// Ref: #/components/schemas/release-asset
type ReleaseAsset struct {
	URL                url.URL `json:"url"`
	BrowserDownloadURL url.URL `json:"browser_download_url"`
	ID                 int     `json:"id"`
	NodeID             string  `json:"node_id"`
	// The file name of the asset.
	Name  string    `json:"name"`
	Label NilString `json:"label"`
	// State of the release asset.
	State         ReleaseAssetState     `json:"state"`
	ContentType   string                `json:"content_type"`
	Size          int                   `json:"size"`
	DownloadCount int                   `json:"download_count"`
	CreatedAt     time.Time             `json:"created_at"`
	UpdatedAt     time.Time             `json:"updated_at"`
	Uploader      NilNullableSimpleUser `json:"uploader"`
}

// GetURL returns the value of URL.
func (s *ReleaseAsset) GetURL() url.URL {
	return s.URL
}

// GetBrowserDownloadURL returns the value of BrowserDownloadURL.
func (s *ReleaseAsset) GetBrowserDownloadURL() url.URL {
	return s.BrowserDownloadURL
}

// GetID returns the value of ID.
func (s *ReleaseAsset) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *ReleaseAsset) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *ReleaseAsset) GetName() string {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *ReleaseAsset) GetLabel() NilString {
	return s.Label
}

// GetState returns the value of State.
func (s *ReleaseAsset) GetState() ReleaseAssetState {
	return s.State
}

// GetContentType returns the value of ContentType.
func (s *ReleaseAsset) GetContentType() string {
	return s.ContentType
}

// GetSize returns the value of Size.
func (s *ReleaseAsset) GetSize() int {
	return s.Size
}

// GetDownloadCount returns the value of DownloadCount.
func (s *ReleaseAsset) GetDownloadCount() int {
	return s.DownloadCount
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ReleaseAsset) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ReleaseAsset) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetUploader returns the value of Uploader.
func (s *ReleaseAsset) GetUploader() NilNullableSimpleUser {
	return s.Uploader
}

// SetURL sets the value of URL.
func (s *ReleaseAsset) SetURL(val url.URL) {
	s.URL = val
}

// SetBrowserDownloadURL sets the value of BrowserDownloadURL.
func (s *ReleaseAsset) SetBrowserDownloadURL(val url.URL) {
	s.BrowserDownloadURL = val
}

// SetID sets the value of ID.
func (s *ReleaseAsset) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *ReleaseAsset) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *ReleaseAsset) SetName(val string) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *ReleaseAsset) SetLabel(val NilString) {
	s.Label = val
}

// SetState sets the value of State.
func (s *ReleaseAsset) SetState(val ReleaseAssetState) {
	s.State = val
}

// SetContentType sets the value of ContentType.
func (s *ReleaseAsset) SetContentType(val string) {
	s.ContentType = val
}

// SetSize sets the value of Size.
func (s *ReleaseAsset) SetSize(val int) {
	s.Size = val
}

// SetDownloadCount sets the value of DownloadCount.
func (s *ReleaseAsset) SetDownloadCount(val int) {
	s.DownloadCount = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ReleaseAsset) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ReleaseAsset) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetUploader sets the value of Uploader.
func (s *ReleaseAsset) SetUploader(val NilNullableSimpleUser) {
	s.Uploader = val
}

func (*ReleaseAsset) reposGetReleaseAssetRes() {}

// State of the release asset.
type ReleaseAssetState string

const (
	ReleaseAssetStateUploaded ReleaseAssetState = "uploaded"
	ReleaseAssetStateOpen     ReleaseAssetState = "open"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReleaseAssetState) MarshalText() ([]byte, error) {
	switch s {
	case ReleaseAssetStateUploaded:
		return []byte(s), nil
	case ReleaseAssetStateOpen:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReleaseAssetState) UnmarshalText(data []byte) error {
	switch ReleaseAssetState(data) {
	case ReleaseAssetStateUploaded:
		*s = ReleaseAssetStateUploaded
		return nil
	case ReleaseAssetStateOpen:
		*s = ReleaseAssetStateOpen
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReleaseHeaders wraps Release with response headers.
type ReleaseHeaders struct {
	Location OptString
	Response Release
}

// GetLocation returns the value of Location.
func (s *ReleaseHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *ReleaseHeaders) GetResponse() Release {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *ReleaseHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *ReleaseHeaders) SetResponse(val Release) {
	s.Response = val
}

func (*ReleaseHeaders) reposCreateReleaseRes() {}

// Repo Search Result Item.
// Ref: #/components/schemas/repo-search-result-item
type RepoSearchResultItem struct {
	ID               int                   `json:"id"`
	NodeID           string                `json:"node_id"`
	Name             string                `json:"name"`
	FullName         string                `json:"full_name"`
	Owner            NilNullableSimpleUser `json:"owner"`
	Private          bool                  `json:"private"`
	HTMLURL          url.URL               `json:"html_url"`
	Description      NilString             `json:"description"`
	Fork             bool                  `json:"fork"`
	URL              url.URL               `json:"url"`
	CreatedAt        time.Time             `json:"created_at"`
	UpdatedAt        time.Time             `json:"updated_at"`
	PushedAt         time.Time             `json:"pushed_at"`
	Homepage         NilURI                `json:"homepage"`
	Size             int                   `json:"size"`
	StargazersCount  int                   `json:"stargazers_count"`
	WatchersCount    int                   `json:"watchers_count"`
	Language         NilString             `json:"language"`
	ForksCount       int                   `json:"forks_count"`
	OpenIssuesCount  int                   `json:"open_issues_count"`
	MasterBranch     OptString             `json:"master_branch"`
	DefaultBranch    string                `json:"default_branch"`
	Score            float64               `json:"score"`
	ForksURL         url.URL               `json:"forks_url"`
	KeysURL          string                `json:"keys_url"`
	CollaboratorsURL string                `json:"collaborators_url"`
	TeamsURL         url.URL               `json:"teams_url"`
	HooksURL         url.URL               `json:"hooks_url"`
	IssueEventsURL   string                `json:"issue_events_url"`
	EventsURL        url.URL               `json:"events_url"`
	AssigneesURL     string                `json:"assignees_url"`
	BranchesURL      string                `json:"branches_url"`
	TagsURL          url.URL               `json:"tags_url"`
	BlobsURL         string                `json:"blobs_url"`
	GitTagsURL       string                `json:"git_tags_url"`
	GitRefsURL       string                `json:"git_refs_url"`
	TreesURL         string                `json:"trees_url"`
	StatusesURL      string                `json:"statuses_url"`
	LanguagesURL     url.URL               `json:"languages_url"`
	StargazersURL    url.URL               `json:"stargazers_url"`
	ContributorsURL  url.URL               `json:"contributors_url"`
	SubscribersURL   url.URL               `json:"subscribers_url"`
	SubscriptionURL  url.URL               `json:"subscription_url"`
	CommitsURL       string                `json:"commits_url"`
	GitCommitsURL    string                `json:"git_commits_url"`
	CommentsURL      string                `json:"comments_url"`
	IssueCommentURL  string                `json:"issue_comment_url"`
	ContentsURL      string                `json:"contents_url"`
	CompareURL       string                `json:"compare_url"`
	MergesURL        url.URL               `json:"merges_url"`
	ArchiveURL       string                `json:"archive_url"`
	DownloadsURL     url.URL               `json:"downloads_url"`
	IssuesURL        string                `json:"issues_url"`
	PullsURL         string                `json:"pulls_url"`
	MilestonesURL    string                `json:"milestones_url"`
	NotificationsURL string                `json:"notifications_url"`
	LabelsURL        string                `json:"labels_url"`
	ReleasesURL      string                `json:"releases_url"`
	DeploymentsURL   url.URL               `json:"deployments_url"`
	GitURL           string                `json:"git_url"`
	SSHURL           string                `json:"ssh_url"`
	CloneURL         string                `json:"clone_url"`
	SvnURL           url.URL               `json:"svn_url"`
	Forks            int                   `json:"forks"`
	OpenIssues       int                   `json:"open_issues"`
	Watchers         int                   `json:"watchers"`
	Topics           []string              `json:"topics"`
	MirrorURL        NilURI                `json:"mirror_url"`
	HasIssues        bool                  `json:"has_issues"`
	HasProjects      bool                  `json:"has_projects"`
	HasPages         bool                  `json:"has_pages"`
	HasWiki          bool                  `json:"has_wiki"`
	HasDownloads     bool                  `json:"has_downloads"`
	Archived         bool                  `json:"archived"`
	// Returns whether or not this repository disabled.
	Disabled            bool                               `json:"disabled"`
	License             NilNullableLicenseSimple           `json:"license"`
	Permissions         OptRepoSearchResultItemPermissions `json:"permissions"`
	TextMatches         *SearchResultTextMatches           `json:"text_matches"`
	TempCloneToken      OptString                          `json:"temp_clone_token"`
	AllowMergeCommit    OptBool                            `json:"allow_merge_commit"`
	AllowSquashMerge    OptBool                            `json:"allow_squash_merge"`
	AllowRebaseMerge    OptBool                            `json:"allow_rebase_merge"`
	AllowAutoMerge      OptBool                            `json:"allow_auto_merge"`
	DeleteBranchOnMerge OptBool                            `json:"delete_branch_on_merge"`
	AllowForking        OptBool                            `json:"allow_forking"`
}

// GetID returns the value of ID.
func (s *RepoSearchResultItem) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *RepoSearchResultItem) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *RepoSearchResultItem) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *RepoSearchResultItem) GetFullName() string {
	return s.FullName
}

// GetOwner returns the value of Owner.
func (s *RepoSearchResultItem) GetOwner() NilNullableSimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *RepoSearchResultItem) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *RepoSearchResultItem) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *RepoSearchResultItem) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *RepoSearchResultItem) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *RepoSearchResultItem) GetURL() url.URL {
	return s.URL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RepoSearchResultItem) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RepoSearchResultItem) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPushedAt returns the value of PushedAt.
func (s *RepoSearchResultItem) GetPushedAt() time.Time {
	return s.PushedAt
}

// GetHomepage returns the value of Homepage.
func (s *RepoSearchResultItem) GetHomepage() NilURI {
	return s.Homepage
}

// GetSize returns the value of Size.
func (s *RepoSearchResultItem) GetSize() int {
	return s.Size
}

// GetStargazersCount returns the value of StargazersCount.
func (s *RepoSearchResultItem) GetStargazersCount() int {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *RepoSearchResultItem) GetWatchersCount() int {
	return s.WatchersCount
}

// GetLanguage returns the value of Language.
func (s *RepoSearchResultItem) GetLanguage() NilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *RepoSearchResultItem) GetForksCount() int {
	return s.ForksCount
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *RepoSearchResultItem) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetMasterBranch returns the value of MasterBranch.
func (s *RepoSearchResultItem) GetMasterBranch() OptString {
	return s.MasterBranch
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *RepoSearchResultItem) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetScore returns the value of Score.
func (s *RepoSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetForksURL returns the value of ForksURL.
func (s *RepoSearchResultItem) GetForksURL() url.URL {
	return s.ForksURL
}

// GetKeysURL returns the value of KeysURL.
func (s *RepoSearchResultItem) GetKeysURL() string {
	return s.KeysURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *RepoSearchResultItem) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *RepoSearchResultItem) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetHooksURL returns the value of HooksURL.
func (s *RepoSearchResultItem) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *RepoSearchResultItem) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *RepoSearchResultItem) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *RepoSearchResultItem) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *RepoSearchResultItem) GetBranchesURL() string {
	return s.BranchesURL
}

// GetTagsURL returns the value of TagsURL.
func (s *RepoSearchResultItem) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *RepoSearchResultItem) GetBlobsURL() string {
	return s.BlobsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *RepoSearchResultItem) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *RepoSearchResultItem) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *RepoSearchResultItem) GetTreesURL() string {
	return s.TreesURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *RepoSearchResultItem) GetStatusesURL() string {
	return s.StatusesURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *RepoSearchResultItem) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *RepoSearchResultItem) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *RepoSearchResultItem) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *RepoSearchResultItem) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *RepoSearchResultItem) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *RepoSearchResultItem) GetCommitsURL() string {
	return s.CommitsURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *RepoSearchResultItem) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *RepoSearchResultItem) GetCommentsURL() string {
	return s.CommentsURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *RepoSearchResultItem) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *RepoSearchResultItem) GetContentsURL() string {
	return s.ContentsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *RepoSearchResultItem) GetCompareURL() string {
	return s.CompareURL
}

// GetMergesURL returns the value of MergesURL.
func (s *RepoSearchResultItem) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *RepoSearchResultItem) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *RepoSearchResultItem) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *RepoSearchResultItem) GetIssuesURL() string {
	return s.IssuesURL
}

// GetPullsURL returns the value of PullsURL.
func (s *RepoSearchResultItem) GetPullsURL() string {
	return s.PullsURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *RepoSearchResultItem) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *RepoSearchResultItem) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *RepoSearchResultItem) GetLabelsURL() string {
	return s.LabelsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *RepoSearchResultItem) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *RepoSearchResultItem) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetGitURL returns the value of GitURL.
func (s *RepoSearchResultItem) GetGitURL() string {
	return s.GitURL
}

// GetSSHURL returns the value of SSHURL.
func (s *RepoSearchResultItem) GetSSHURL() string {
	return s.SSHURL
}

// GetCloneURL returns the value of CloneURL.
func (s *RepoSearchResultItem) GetCloneURL() string {
	return s.CloneURL
}

// GetSvnURL returns the value of SvnURL.
func (s *RepoSearchResultItem) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetForks returns the value of Forks.
func (s *RepoSearchResultItem) GetForks() int {
	return s.Forks
}

// GetOpenIssues returns the value of OpenIssues.
func (s *RepoSearchResultItem) GetOpenIssues() int {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *RepoSearchResultItem) GetWatchers() int {
	return s.Watchers
}

// GetTopics returns the value of Topics.
func (s *RepoSearchResultItem) GetTopics() []string {
	return s.Topics
}

// GetMirrorURL returns the value of MirrorURL.
func (s *RepoSearchResultItem) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetHasIssues returns the value of HasIssues.
func (s *RepoSearchResultItem) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *RepoSearchResultItem) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasPages returns the value of HasPages.
func (s *RepoSearchResultItem) GetHasPages() bool {
	return s.HasPages
}

// GetHasWiki returns the value of HasWiki.
func (s *RepoSearchResultItem) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasDownloads returns the value of HasDownloads.
func (s *RepoSearchResultItem) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *RepoSearchResultItem) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *RepoSearchResultItem) GetDisabled() bool {
	return s.Disabled
}

// GetLicense returns the value of License.
func (s *RepoSearchResultItem) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetPermissions returns the value of Permissions.
func (s *RepoSearchResultItem) GetPermissions() OptRepoSearchResultItemPermissions {
	return s.Permissions
}

// GetTextMatches returns the value of TextMatches.
func (s *RepoSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *RepoSearchResultItem) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *RepoSearchResultItem) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *RepoSearchResultItem) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *RepoSearchResultItem) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *RepoSearchResultItem) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *RepoSearchResultItem) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowForking returns the value of AllowForking.
func (s *RepoSearchResultItem) GetAllowForking() OptBool {
	return s.AllowForking
}

// SetID sets the value of ID.
func (s *RepoSearchResultItem) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *RepoSearchResultItem) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *RepoSearchResultItem) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *RepoSearchResultItem) SetFullName(val string) {
	s.FullName = val
}

// SetOwner sets the value of Owner.
func (s *RepoSearchResultItem) SetOwner(val NilNullableSimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *RepoSearchResultItem) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *RepoSearchResultItem) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *RepoSearchResultItem) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *RepoSearchResultItem) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *RepoSearchResultItem) SetURL(val url.URL) {
	s.URL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RepoSearchResultItem) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RepoSearchResultItem) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPushedAt sets the value of PushedAt.
func (s *RepoSearchResultItem) SetPushedAt(val time.Time) {
	s.PushedAt = val
}

// SetHomepage sets the value of Homepage.
func (s *RepoSearchResultItem) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetSize sets the value of Size.
func (s *RepoSearchResultItem) SetSize(val int) {
	s.Size = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *RepoSearchResultItem) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *RepoSearchResultItem) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetLanguage sets the value of Language.
func (s *RepoSearchResultItem) SetLanguage(val NilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *RepoSearchResultItem) SetForksCount(val int) {
	s.ForksCount = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *RepoSearchResultItem) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *RepoSearchResultItem) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *RepoSearchResultItem) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetScore sets the value of Score.
func (s *RepoSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetForksURL sets the value of ForksURL.
func (s *RepoSearchResultItem) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *RepoSearchResultItem) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *RepoSearchResultItem) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *RepoSearchResultItem) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *RepoSearchResultItem) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *RepoSearchResultItem) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *RepoSearchResultItem) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *RepoSearchResultItem) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *RepoSearchResultItem) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *RepoSearchResultItem) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *RepoSearchResultItem) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *RepoSearchResultItem) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *RepoSearchResultItem) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *RepoSearchResultItem) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *RepoSearchResultItem) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *RepoSearchResultItem) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *RepoSearchResultItem) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *RepoSearchResultItem) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *RepoSearchResultItem) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *RepoSearchResultItem) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *RepoSearchResultItem) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *RepoSearchResultItem) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *RepoSearchResultItem) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *RepoSearchResultItem) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *RepoSearchResultItem) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *RepoSearchResultItem) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *RepoSearchResultItem) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *RepoSearchResultItem) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *RepoSearchResultItem) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *RepoSearchResultItem) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *RepoSearchResultItem) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *RepoSearchResultItem) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *RepoSearchResultItem) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *RepoSearchResultItem) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *RepoSearchResultItem) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *RepoSearchResultItem) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *RepoSearchResultItem) SetGitURL(val string) {
	s.GitURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *RepoSearchResultItem) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *RepoSearchResultItem) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *RepoSearchResultItem) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetForks sets the value of Forks.
func (s *RepoSearchResultItem) SetForks(val int) {
	s.Forks = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *RepoSearchResultItem) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *RepoSearchResultItem) SetWatchers(val int) {
	s.Watchers = val
}

// SetTopics sets the value of Topics.
func (s *RepoSearchResultItem) SetTopics(val []string) {
	s.Topics = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *RepoSearchResultItem) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetHasIssues sets the value of HasIssues.
func (s *RepoSearchResultItem) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *RepoSearchResultItem) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasPages sets the value of HasPages.
func (s *RepoSearchResultItem) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHasWiki sets the value of HasWiki.
func (s *RepoSearchResultItem) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *RepoSearchResultItem) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *RepoSearchResultItem) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *RepoSearchResultItem) SetDisabled(val bool) {
	s.Disabled = val
}

// SetLicense sets the value of License.
func (s *RepoSearchResultItem) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetPermissions sets the value of Permissions.
func (s *RepoSearchResultItem) SetPermissions(val OptRepoSearchResultItemPermissions) {
	s.Permissions = val
}

// SetTextMatches sets the value of TextMatches.
func (s *RepoSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *RepoSearchResultItem) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *RepoSearchResultItem) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *RepoSearchResultItem) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *RepoSearchResultItem) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *RepoSearchResultItem) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *RepoSearchResultItem) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowForking sets the value of AllowForking.
func (s *RepoSearchResultItem) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

type RepoSearchResultItemPermissions struct {
	Admin    bool    `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     bool    `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     bool    `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *RepoSearchResultItemPermissions) GetAdmin() bool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *RepoSearchResultItemPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *RepoSearchResultItemPermissions) GetPush() bool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *RepoSearchResultItemPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *RepoSearchResultItemPermissions) GetPull() bool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *RepoSearchResultItemPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *RepoSearchResultItemPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *RepoSearchResultItemPermissions) SetPush(val bool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *RepoSearchResultItemPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *RepoSearchResultItemPermissions) SetPull(val bool) {
	s.Pull = val
}

type ReposAcceptInvitationConflict BasicError

func (*ReposAcceptInvitationConflict) reposAcceptInvitationRes() {}

type ReposAcceptInvitationForbidden BasicError

func (*ReposAcceptInvitationForbidden) reposAcceptInvitationRes() {}

// ReposAcceptInvitationNoContent is response for ReposAcceptInvitation operation.
type ReposAcceptInvitationNoContent struct{}

func (*ReposAcceptInvitationNoContent) reposAcceptInvitationRes() {}

type ReposAcceptInvitationNotFound BasicError

func (*ReposAcceptInvitationNotFound) reposAcceptInvitationRes() {}

type ReposAddAppAccessRestrictionsOKApplicationJSON []Integration

func (*ReposAddAppAccessRestrictionsOKApplicationJSON) reposAddAppAccessRestrictionsRes() {}

// ReposAddAppAccessRestrictionsReq represents sum type.
type ReposAddAppAccessRestrictionsReq struct {
	Type                              ReposAddAppAccessRestrictionsReqType // switch on this field
	ReposAddAppAccessRestrictionsReq0 ReposAddAppAccessRestrictionsReq0
	StringArray                       []string
}

// ReposAddAppAccessRestrictionsReqType is oneOf type of ReposAddAppAccessRestrictionsReq.
type ReposAddAppAccessRestrictionsReqType string

// Possible values for ReposAddAppAccessRestrictionsReqType.
const (
	ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq ReposAddAppAccessRestrictionsReqType = "ReposAddAppAccessRestrictionsReq0"
	StringArrayReposAddAppAccessRestrictionsReq                       ReposAddAppAccessRestrictionsReqType = "[]string"
)

// IsReposAddAppAccessRestrictionsReq0 reports whether ReposAddAppAccessRestrictionsReq is ReposAddAppAccessRestrictionsReq0.
func (s ReposAddAppAccessRestrictionsReq) IsReposAddAppAccessRestrictionsReq0() bool {
	return s.Type == ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq
}

// IsStringArray reports whether ReposAddAppAccessRestrictionsReq is []string.
func (s ReposAddAppAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddAppAccessRestrictionsReq
}

// SetReposAddAppAccessRestrictionsReq0 sets ReposAddAppAccessRestrictionsReq to ReposAddAppAccessRestrictionsReq0.
func (s *ReposAddAppAccessRestrictionsReq) SetReposAddAppAccessRestrictionsReq0(v ReposAddAppAccessRestrictionsReq0) {
	s.Type = ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq
	s.ReposAddAppAccessRestrictionsReq0 = v
}

// GetReposAddAppAccessRestrictionsReq0 returns ReposAddAppAccessRestrictionsReq0 and true boolean if ReposAddAppAccessRestrictionsReq is ReposAddAppAccessRestrictionsReq0.
func (s ReposAddAppAccessRestrictionsReq) GetReposAddAppAccessRestrictionsReq0() (v ReposAddAppAccessRestrictionsReq0, ok bool) {
	if !s.IsReposAddAppAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposAddAppAccessRestrictionsReq0, true
}

// NewReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq returns new ReposAddAppAccessRestrictionsReq from ReposAddAppAccessRestrictionsReq0.
func NewReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq(v ReposAddAppAccessRestrictionsReq0) ReposAddAppAccessRestrictionsReq {
	var s ReposAddAppAccessRestrictionsReq
	s.SetReposAddAppAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposAddAppAccessRestrictionsReq to []string.
func (s *ReposAddAppAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddAppAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddAppAccessRestrictionsReq is []string.
func (s ReposAddAppAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddAppAccessRestrictionsReq returns new ReposAddAppAccessRestrictionsReq from []string.
func NewStringArrayReposAddAppAccessRestrictionsReq(v []string) ReposAddAppAccessRestrictionsReq {
	var s ReposAddAppAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposAddAppAccessRestrictionsReq0 struct {
	// Apps parameter.
	Apps []string `json:"apps"`
}

// GetApps returns the value of Apps.
func (s *ReposAddAppAccessRestrictionsReq0) GetApps() []string {
	return s.Apps
}

// SetApps sets the value of Apps.
func (s *ReposAddAppAccessRestrictionsReq0) SetApps(val []string) {
	s.Apps = val
}

// ReposAddCollaboratorNoContent is response for ReposAddCollaborator operation.
type ReposAddCollaboratorNoContent struct{}

func (*ReposAddCollaboratorNoContent) reposAddCollaboratorRes() {}

type ReposAddCollaboratorReq struct {
	// The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can
	// be one of:
	// \* `pull` - can pull, but not push to or administer this repository.
	// \* `push` - can pull and push, but not administer this repository.
	// \* `admin` - can pull, push and administer this repository.
	// \* `maintain` - Recommended for project managers who need to manage the repository without access
	// to sensitive or destructive actions.
	// \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests
	// without write access.
	// \* custom repository role name - Can assign a custom repository role if the owning organization
	// has defined any.
	Permission  OptReposAddCollaboratorReqPermission `json:"permission"`
	Permissions OptString                            `json:"permissions"`
}

// GetPermission returns the value of Permission.
func (s *ReposAddCollaboratorReq) GetPermission() OptReposAddCollaboratorReqPermission {
	return s.Permission
}

// GetPermissions returns the value of Permissions.
func (s *ReposAddCollaboratorReq) GetPermissions() OptString {
	return s.Permissions
}

// SetPermission sets the value of Permission.
func (s *ReposAddCollaboratorReq) SetPermission(val OptReposAddCollaboratorReqPermission) {
	s.Permission = val
}

// SetPermissions sets the value of Permissions.
func (s *ReposAddCollaboratorReq) SetPermissions(val OptString) {
	s.Permissions = val
}

// The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can
// be one of:
// \* `pull` - can pull, but not push to or administer this repository.
// \* `push` - can pull and push, but not administer this repository.
// \* `admin` - can pull, push and administer this repository.
// \* `maintain` - Recommended for project managers who need to manage the repository without access
// to sensitive or destructive actions.
// \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests
// without write access.
// \* custom repository role name - Can assign a custom repository role if the owning organization
// has defined any.
type ReposAddCollaboratorReqPermission string

const (
	ReposAddCollaboratorReqPermissionPull     ReposAddCollaboratorReqPermission = "pull"
	ReposAddCollaboratorReqPermissionPush     ReposAddCollaboratorReqPermission = "push"
	ReposAddCollaboratorReqPermissionAdmin    ReposAddCollaboratorReqPermission = "admin"
	ReposAddCollaboratorReqPermissionMaintain ReposAddCollaboratorReqPermission = "maintain"
	ReposAddCollaboratorReqPermissionTriage   ReposAddCollaboratorReqPermission = "triage"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposAddCollaboratorReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case ReposAddCollaboratorReqPermissionPull:
		return []byte(s), nil
	case ReposAddCollaboratorReqPermissionPush:
		return []byte(s), nil
	case ReposAddCollaboratorReqPermissionAdmin:
		return []byte(s), nil
	case ReposAddCollaboratorReqPermissionMaintain:
		return []byte(s), nil
	case ReposAddCollaboratorReqPermissionTriage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposAddCollaboratorReqPermission) UnmarshalText(data []byte) error {
	switch ReposAddCollaboratorReqPermission(data) {
	case ReposAddCollaboratorReqPermissionPull:
		*s = ReposAddCollaboratorReqPermissionPull
		return nil
	case ReposAddCollaboratorReqPermissionPush:
		*s = ReposAddCollaboratorReqPermissionPush
		return nil
	case ReposAddCollaboratorReqPermissionAdmin:
		*s = ReposAddCollaboratorReqPermissionAdmin
		return nil
	case ReposAddCollaboratorReqPermissionMaintain:
		*s = ReposAddCollaboratorReqPermissionMaintain
		return nil
	case ReposAddCollaboratorReqPermissionTriage:
		*s = ReposAddCollaboratorReqPermissionTriage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposAddStatusCheckContextsForbidden BasicError

func (*ReposAddStatusCheckContextsForbidden) reposAddStatusCheckContextsRes() {}

type ReposAddStatusCheckContextsNotFound BasicError

func (*ReposAddStatusCheckContextsNotFound) reposAddStatusCheckContextsRes() {}

type ReposAddStatusCheckContextsOKApplicationJSON []string

func (*ReposAddStatusCheckContextsOKApplicationJSON) reposAddStatusCheckContextsRes() {}

// ReposAddStatusCheckContextsReq represents sum type.
type ReposAddStatusCheckContextsReq struct {
	Type                            ReposAddStatusCheckContextsReqType // switch on this field
	ReposAddStatusCheckContextsReq0 ReposAddStatusCheckContextsReq0
	StringArray                     []string
}

// ReposAddStatusCheckContextsReqType is oneOf type of ReposAddStatusCheckContextsReq.
type ReposAddStatusCheckContextsReqType string

// Possible values for ReposAddStatusCheckContextsReqType.
const (
	ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq ReposAddStatusCheckContextsReqType = "ReposAddStatusCheckContextsReq0"
	StringArrayReposAddStatusCheckContextsReq                     ReposAddStatusCheckContextsReqType = "[]string"
)

// IsReposAddStatusCheckContextsReq0 reports whether ReposAddStatusCheckContextsReq is ReposAddStatusCheckContextsReq0.
func (s ReposAddStatusCheckContextsReq) IsReposAddStatusCheckContextsReq0() bool {
	return s.Type == ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq
}

// IsStringArray reports whether ReposAddStatusCheckContextsReq is []string.
func (s ReposAddStatusCheckContextsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddStatusCheckContextsReq
}

// SetReposAddStatusCheckContextsReq0 sets ReposAddStatusCheckContextsReq to ReposAddStatusCheckContextsReq0.
func (s *ReposAddStatusCheckContextsReq) SetReposAddStatusCheckContextsReq0(v ReposAddStatusCheckContextsReq0) {
	s.Type = ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq
	s.ReposAddStatusCheckContextsReq0 = v
}

// GetReposAddStatusCheckContextsReq0 returns ReposAddStatusCheckContextsReq0 and true boolean if ReposAddStatusCheckContextsReq is ReposAddStatusCheckContextsReq0.
func (s ReposAddStatusCheckContextsReq) GetReposAddStatusCheckContextsReq0() (v ReposAddStatusCheckContextsReq0, ok bool) {
	if !s.IsReposAddStatusCheckContextsReq0() {
		return v, false
	}
	return s.ReposAddStatusCheckContextsReq0, true
}

// NewReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq returns new ReposAddStatusCheckContextsReq from ReposAddStatusCheckContextsReq0.
func NewReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq(v ReposAddStatusCheckContextsReq0) ReposAddStatusCheckContextsReq {
	var s ReposAddStatusCheckContextsReq
	s.SetReposAddStatusCheckContextsReq0(v)
	return s
}

// SetStringArray sets ReposAddStatusCheckContextsReq to []string.
func (s *ReposAddStatusCheckContextsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddStatusCheckContextsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddStatusCheckContextsReq is []string.
func (s ReposAddStatusCheckContextsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddStatusCheckContextsReq returns new ReposAddStatusCheckContextsReq from []string.
func NewStringArrayReposAddStatusCheckContextsReq(v []string) ReposAddStatusCheckContextsReq {
	var s ReposAddStatusCheckContextsReq
	s.SetStringArray(v)
	return s
}

type ReposAddStatusCheckContextsReq0 struct {
	// Contexts parameter.
	Contexts []string `json:"contexts"`
}

// GetContexts returns the value of Contexts.
func (s *ReposAddStatusCheckContextsReq0) GetContexts() []string {
	return s.Contexts
}

// SetContexts sets the value of Contexts.
func (s *ReposAddStatusCheckContextsReq0) SetContexts(val []string) {
	s.Contexts = val
}

type ReposAddTeamAccessRestrictionsOKApplicationJSON []Team

func (*ReposAddTeamAccessRestrictionsOKApplicationJSON) reposAddTeamAccessRestrictionsRes() {}

// ReposAddTeamAccessRestrictionsReq represents sum type.
type ReposAddTeamAccessRestrictionsReq struct {
	Type                               ReposAddTeamAccessRestrictionsReqType // switch on this field
	ReposAddTeamAccessRestrictionsReq0 ReposAddTeamAccessRestrictionsReq0
	StringArray                        []string
}

// ReposAddTeamAccessRestrictionsReqType is oneOf type of ReposAddTeamAccessRestrictionsReq.
type ReposAddTeamAccessRestrictionsReqType string

// Possible values for ReposAddTeamAccessRestrictionsReqType.
const (
	ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq ReposAddTeamAccessRestrictionsReqType = "ReposAddTeamAccessRestrictionsReq0"
	StringArrayReposAddTeamAccessRestrictionsReq                        ReposAddTeamAccessRestrictionsReqType = "[]string"
)

// IsReposAddTeamAccessRestrictionsReq0 reports whether ReposAddTeamAccessRestrictionsReq is ReposAddTeamAccessRestrictionsReq0.
func (s ReposAddTeamAccessRestrictionsReq) IsReposAddTeamAccessRestrictionsReq0() bool {
	return s.Type == ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq
}

// IsStringArray reports whether ReposAddTeamAccessRestrictionsReq is []string.
func (s ReposAddTeamAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddTeamAccessRestrictionsReq
}

// SetReposAddTeamAccessRestrictionsReq0 sets ReposAddTeamAccessRestrictionsReq to ReposAddTeamAccessRestrictionsReq0.
func (s *ReposAddTeamAccessRestrictionsReq) SetReposAddTeamAccessRestrictionsReq0(v ReposAddTeamAccessRestrictionsReq0) {
	s.Type = ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq
	s.ReposAddTeamAccessRestrictionsReq0 = v
}

// GetReposAddTeamAccessRestrictionsReq0 returns ReposAddTeamAccessRestrictionsReq0 and true boolean if ReposAddTeamAccessRestrictionsReq is ReposAddTeamAccessRestrictionsReq0.
func (s ReposAddTeamAccessRestrictionsReq) GetReposAddTeamAccessRestrictionsReq0() (v ReposAddTeamAccessRestrictionsReq0, ok bool) {
	if !s.IsReposAddTeamAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposAddTeamAccessRestrictionsReq0, true
}

// NewReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq returns new ReposAddTeamAccessRestrictionsReq from ReposAddTeamAccessRestrictionsReq0.
func NewReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq(v ReposAddTeamAccessRestrictionsReq0) ReposAddTeamAccessRestrictionsReq {
	var s ReposAddTeamAccessRestrictionsReq
	s.SetReposAddTeamAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposAddTeamAccessRestrictionsReq to []string.
func (s *ReposAddTeamAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddTeamAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddTeamAccessRestrictionsReq is []string.
func (s ReposAddTeamAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddTeamAccessRestrictionsReq returns new ReposAddTeamAccessRestrictionsReq from []string.
func NewStringArrayReposAddTeamAccessRestrictionsReq(v []string) ReposAddTeamAccessRestrictionsReq {
	var s ReposAddTeamAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposAddTeamAccessRestrictionsReq0 struct {
	// Teams parameter.
	Teams []string `json:"teams"`
}

// GetTeams returns the value of Teams.
func (s *ReposAddTeamAccessRestrictionsReq0) GetTeams() []string {
	return s.Teams
}

// SetTeams sets the value of Teams.
func (s *ReposAddTeamAccessRestrictionsReq0) SetTeams(val []string) {
	s.Teams = val
}

type ReposAddUserAccessRestrictionsOKApplicationJSON []SimpleUser

func (*ReposAddUserAccessRestrictionsOKApplicationJSON) reposAddUserAccessRestrictionsRes() {}

// ReposAddUserAccessRestrictionsReq represents sum type.
type ReposAddUserAccessRestrictionsReq struct {
	Type                               ReposAddUserAccessRestrictionsReqType // switch on this field
	ReposAddUserAccessRestrictionsReq0 ReposAddUserAccessRestrictionsReq0
	StringArray                        []string
}

// ReposAddUserAccessRestrictionsReqType is oneOf type of ReposAddUserAccessRestrictionsReq.
type ReposAddUserAccessRestrictionsReqType string

// Possible values for ReposAddUserAccessRestrictionsReqType.
const (
	ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq ReposAddUserAccessRestrictionsReqType = "ReposAddUserAccessRestrictionsReq0"
	StringArrayReposAddUserAccessRestrictionsReq                        ReposAddUserAccessRestrictionsReqType = "[]string"
)

// IsReposAddUserAccessRestrictionsReq0 reports whether ReposAddUserAccessRestrictionsReq is ReposAddUserAccessRestrictionsReq0.
func (s ReposAddUserAccessRestrictionsReq) IsReposAddUserAccessRestrictionsReq0() bool {
	return s.Type == ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq
}

// IsStringArray reports whether ReposAddUserAccessRestrictionsReq is []string.
func (s ReposAddUserAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposAddUserAccessRestrictionsReq
}

// SetReposAddUserAccessRestrictionsReq0 sets ReposAddUserAccessRestrictionsReq to ReposAddUserAccessRestrictionsReq0.
func (s *ReposAddUserAccessRestrictionsReq) SetReposAddUserAccessRestrictionsReq0(v ReposAddUserAccessRestrictionsReq0) {
	s.Type = ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq
	s.ReposAddUserAccessRestrictionsReq0 = v
}

// GetReposAddUserAccessRestrictionsReq0 returns ReposAddUserAccessRestrictionsReq0 and true boolean if ReposAddUserAccessRestrictionsReq is ReposAddUserAccessRestrictionsReq0.
func (s ReposAddUserAccessRestrictionsReq) GetReposAddUserAccessRestrictionsReq0() (v ReposAddUserAccessRestrictionsReq0, ok bool) {
	if !s.IsReposAddUserAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposAddUserAccessRestrictionsReq0, true
}

// NewReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq returns new ReposAddUserAccessRestrictionsReq from ReposAddUserAccessRestrictionsReq0.
func NewReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq(v ReposAddUserAccessRestrictionsReq0) ReposAddUserAccessRestrictionsReq {
	var s ReposAddUserAccessRestrictionsReq
	s.SetReposAddUserAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposAddUserAccessRestrictionsReq to []string.
func (s *ReposAddUserAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposAddUserAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposAddUserAccessRestrictionsReq is []string.
func (s ReposAddUserAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposAddUserAccessRestrictionsReq returns new ReposAddUserAccessRestrictionsReq from []string.
func NewStringArrayReposAddUserAccessRestrictionsReq(v []string) ReposAddUserAccessRestrictionsReq {
	var s ReposAddUserAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposAddUserAccessRestrictionsReq0 struct {
	// Users parameter.
	Users []string `json:"users"`
}

// GetUsers returns the value of Users.
func (s *ReposAddUserAccessRestrictionsReq0) GetUsers() []string {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *ReposAddUserAccessRestrictionsReq0) SetUsers(val []string) {
	s.Users = val
}

// ReposCheckCollaboratorNoContent is response for ReposCheckCollaborator operation.
type ReposCheckCollaboratorNoContent struct{}

func (*ReposCheckCollaboratorNoContent) reposCheckCollaboratorRes() {}

// ReposCheckCollaboratorNotFound is response for ReposCheckCollaborator operation.
type ReposCheckCollaboratorNotFound struct{}

func (*ReposCheckCollaboratorNotFound) reposCheckCollaboratorRes() {}

// ReposCheckVulnerabilityAlertsNoContent is response for ReposCheckVulnerabilityAlerts operation.
type ReposCheckVulnerabilityAlertsNoContent struct{}

func (*ReposCheckVulnerabilityAlertsNoContent) reposCheckVulnerabilityAlertsRes() {}

// ReposCheckVulnerabilityAlertsNotFound is response for ReposCheckVulnerabilityAlerts operation.
type ReposCheckVulnerabilityAlertsNotFound struct{}

func (*ReposCheckVulnerabilityAlertsNotFound) reposCheckVulnerabilityAlertsRes() {}

type ReposCompareCommitsInternalServerError BasicError

func (*ReposCompareCommitsInternalServerError) reposCompareCommitsRes() {}

type ReposCompareCommitsNotFound BasicError

func (*ReposCompareCommitsNotFound) reposCompareCommitsRes() {}

type ReposCreateAutolinkReq struct {
	// The prefix appended by a number will generate a link any time it is found in an issue, pull
	// request, or commit.
	KeyPrefix string `json:"key_prefix"`
	// The URL must contain <num> for the reference number.
	URLTemplate string `json:"url_template"`
}

// GetKeyPrefix returns the value of KeyPrefix.
func (s *ReposCreateAutolinkReq) GetKeyPrefix() string {
	return s.KeyPrefix
}

// GetURLTemplate returns the value of URLTemplate.
func (s *ReposCreateAutolinkReq) GetURLTemplate() string {
	return s.URLTemplate
}

// SetKeyPrefix sets the value of KeyPrefix.
func (s *ReposCreateAutolinkReq) SetKeyPrefix(val string) {
	s.KeyPrefix = val
}

// SetURLTemplate sets the value of URLTemplate.
func (s *ReposCreateAutolinkReq) SetURLTemplate(val string) {
	s.URLTemplate = val
}

type ReposCreateCommitCommentReq struct {
	// The contents of the comment.
	Body string `json:"body"`
	// Relative path of the file to comment on.
	Path OptString `json:"path"`
	// Line index in the diff to comment on.
	Position OptInt `json:"position"`
	// **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
	Line OptInt `json:"line"`
}

// GetBody returns the value of Body.
func (s *ReposCreateCommitCommentReq) GetBody() string {
	return s.Body
}

// GetPath returns the value of Path.
func (s *ReposCreateCommitCommentReq) GetPath() OptString {
	return s.Path
}

// GetPosition returns the value of Position.
func (s *ReposCreateCommitCommentReq) GetPosition() OptInt {
	return s.Position
}

// GetLine returns the value of Line.
func (s *ReposCreateCommitCommentReq) GetLine() OptInt {
	return s.Line
}

// SetBody sets the value of Body.
func (s *ReposCreateCommitCommentReq) SetBody(val string) {
	s.Body = val
}

// SetPath sets the value of Path.
func (s *ReposCreateCommitCommentReq) SetPath(val OptString) {
	s.Path = val
}

// SetPosition sets the value of Position.
func (s *ReposCreateCommitCommentReq) SetPosition(val OptInt) {
	s.Position = val
}

// SetLine sets the value of Line.
func (s *ReposCreateCommitCommentReq) SetLine(val OptInt) {
	s.Line = val
}

type ReposCreateCommitStatusReq struct {
	// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
	State ReposCreateCommitStatusReqState `json:"state"`
	// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow
	// users to easily see the source of the status.
	// For example, if your continuous integration system is posting build status, you would want to
	// provide the deep link for the build output for this specific SHA:
	// `http://ci.example.com/user/repo/build/sha`.
	TargetURL OptString `json:"target_url"`
	// A short description of the status.
	Description OptString `json:"description"`
	// A string label to differentiate this status from the status of other systems. This field is
	// case-insensitive.
	Context OptString `json:"context"`
}

// GetState returns the value of State.
func (s *ReposCreateCommitStatusReq) GetState() ReposCreateCommitStatusReqState {
	return s.State
}

// GetTargetURL returns the value of TargetURL.
func (s *ReposCreateCommitStatusReq) GetTargetURL() OptString {
	return s.TargetURL
}

// GetDescription returns the value of Description.
func (s *ReposCreateCommitStatusReq) GetDescription() OptString {
	return s.Description
}

// GetContext returns the value of Context.
func (s *ReposCreateCommitStatusReq) GetContext() OptString {
	return s.Context
}

// SetState sets the value of State.
func (s *ReposCreateCommitStatusReq) SetState(val ReposCreateCommitStatusReqState) {
	s.State = val
}

// SetTargetURL sets the value of TargetURL.
func (s *ReposCreateCommitStatusReq) SetTargetURL(val OptString) {
	s.TargetURL = val
}

// SetDescription sets the value of Description.
func (s *ReposCreateCommitStatusReq) SetDescription(val OptString) {
	s.Description = val
}

// SetContext sets the value of Context.
func (s *ReposCreateCommitStatusReq) SetContext(val OptString) {
	s.Context = val
}

// The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
type ReposCreateCommitStatusReqState string

const (
	ReposCreateCommitStatusReqStateError   ReposCreateCommitStatusReqState = "error"
	ReposCreateCommitStatusReqStateFailure ReposCreateCommitStatusReqState = "failure"
	ReposCreateCommitStatusReqStatePending ReposCreateCommitStatusReqState = "pending"
	ReposCreateCommitStatusReqStateSuccess ReposCreateCommitStatusReqState = "success"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposCreateCommitStatusReqState) MarshalText() ([]byte, error) {
	switch s {
	case ReposCreateCommitStatusReqStateError:
		return []byte(s), nil
	case ReposCreateCommitStatusReqStateFailure:
		return []byte(s), nil
	case ReposCreateCommitStatusReqStatePending:
		return []byte(s), nil
	case ReposCreateCommitStatusReqStateSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposCreateCommitStatusReqState) UnmarshalText(data []byte) error {
	switch ReposCreateCommitStatusReqState(data) {
	case ReposCreateCommitStatusReqStateError:
		*s = ReposCreateCommitStatusReqStateError
		return nil
	case ReposCreateCommitStatusReqStateFailure:
		*s = ReposCreateCommitStatusReqStateFailure
		return nil
	case ReposCreateCommitStatusReqStatePending:
		*s = ReposCreateCommitStatusReqStatePending
		return nil
	case ReposCreateCommitStatusReqStateSuccess:
		*s = ReposCreateCommitStatusReqStateSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposCreateDeployKeyReq struct {
	// A name for the key.
	Title OptString `json:"title"`
	// The contents of the key.
	Key string `json:"key"`
	// If `true`, the key will only be able to read repository contents. Otherwise, the key will be able
	// to read and write.
	// Deploy keys with write access can perform the same actions as an organization member with admin
	// access, or a collaborator on a personal repository. For more information, see "[Repository
	// permission levels for an organization](https://help.github.
	// com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a
	// user account repository](https://help.github.
	// com/articles/permission-levels-for-a-user-account-repository/).".
	ReadOnly OptBool `json:"read_only"`
}

// GetTitle returns the value of Title.
func (s *ReposCreateDeployKeyReq) GetTitle() OptString {
	return s.Title
}

// GetKey returns the value of Key.
func (s *ReposCreateDeployKeyReq) GetKey() string {
	return s.Key
}

// GetReadOnly returns the value of ReadOnly.
func (s *ReposCreateDeployKeyReq) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetTitle sets the value of Title.
func (s *ReposCreateDeployKeyReq) SetTitle(val OptString) {
	s.Title = val
}

// SetKey sets the value of Key.
func (s *ReposCreateDeployKeyReq) SetKey(val string) {
	s.Key = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *ReposCreateDeployKeyReq) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

type ReposCreateDeploymentAccepted struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ReposCreateDeploymentAccepted) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ReposCreateDeploymentAccepted) SetMessage(val OptString) {
	s.Message = val
}

func (*ReposCreateDeploymentAccepted) reposCreateDeploymentRes() {}

// ReposCreateDeploymentConflict is response for ReposCreateDeployment operation.
type ReposCreateDeploymentConflict struct{}

func (*ReposCreateDeploymentConflict) reposCreateDeploymentRes() {}

type ReposCreateDeploymentReq struct {
	// The ref to deploy. This can be a branch, tag, or SHA.
	Ref string `json:"ref"`
	// Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
	Task OptString `json:"task"`
	// Attempts to automatically merge the default branch into the requested ref, if it's behind the
	// default branch.
	AutoMerge OptBool `json:"auto_merge"`
	// The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against
	// commit status checks. If you omit this parameter, GitHub verifies all unique contexts before
	// creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique
	// contexts.
	RequiredContexts []string                           `json:"required_contexts"`
	Payload          OptReposCreateDeploymentReqPayload `json:"payload"`
	// Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
	Environment OptString `json:"environment"`
	// Short description of the deployment.
	Description OptNilString `json:"description"`
	// Specifies if the given environment is specific to the deployment and will no longer exist at some
	// point in the future. Default: `false`
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	TransientEnvironment OptBool `json:"transient_environment"`
	// Specifies if the given environment is one that end-users directly interact with. Default: `true`
	// when `environment` is `production` and `false` otherwise.
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	ProductionEnvironment OptBool `json:"production_environment"`
}

// GetRef returns the value of Ref.
func (s *ReposCreateDeploymentReq) GetRef() string {
	return s.Ref
}

// GetTask returns the value of Task.
func (s *ReposCreateDeploymentReq) GetTask() OptString {
	return s.Task
}

// GetAutoMerge returns the value of AutoMerge.
func (s *ReposCreateDeploymentReq) GetAutoMerge() OptBool {
	return s.AutoMerge
}

// GetRequiredContexts returns the value of RequiredContexts.
func (s *ReposCreateDeploymentReq) GetRequiredContexts() []string {
	return s.RequiredContexts
}

// GetPayload returns the value of Payload.
func (s *ReposCreateDeploymentReq) GetPayload() OptReposCreateDeploymentReqPayload {
	return s.Payload
}

// GetEnvironment returns the value of Environment.
func (s *ReposCreateDeploymentReq) GetEnvironment() OptString {
	return s.Environment
}

// GetDescription returns the value of Description.
func (s *ReposCreateDeploymentReq) GetDescription() OptNilString {
	return s.Description
}

// GetTransientEnvironment returns the value of TransientEnvironment.
func (s *ReposCreateDeploymentReq) GetTransientEnvironment() OptBool {
	return s.TransientEnvironment
}

// GetProductionEnvironment returns the value of ProductionEnvironment.
func (s *ReposCreateDeploymentReq) GetProductionEnvironment() OptBool {
	return s.ProductionEnvironment
}

// SetRef sets the value of Ref.
func (s *ReposCreateDeploymentReq) SetRef(val string) {
	s.Ref = val
}

// SetTask sets the value of Task.
func (s *ReposCreateDeploymentReq) SetTask(val OptString) {
	s.Task = val
}

// SetAutoMerge sets the value of AutoMerge.
func (s *ReposCreateDeploymentReq) SetAutoMerge(val OptBool) {
	s.AutoMerge = val
}

// SetRequiredContexts sets the value of RequiredContexts.
func (s *ReposCreateDeploymentReq) SetRequiredContexts(val []string) {
	s.RequiredContexts = val
}

// SetPayload sets the value of Payload.
func (s *ReposCreateDeploymentReq) SetPayload(val OptReposCreateDeploymentReqPayload) {
	s.Payload = val
}

// SetEnvironment sets the value of Environment.
func (s *ReposCreateDeploymentReq) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetDescription sets the value of Description.
func (s *ReposCreateDeploymentReq) SetDescription(val OptNilString) {
	s.Description = val
}

// SetTransientEnvironment sets the value of TransientEnvironment.
func (s *ReposCreateDeploymentReq) SetTransientEnvironment(val OptBool) {
	s.TransientEnvironment = val
}

// SetProductionEnvironment sets the value of ProductionEnvironment.
func (s *ReposCreateDeploymentReq) SetProductionEnvironment(val OptBool) {
	s.ProductionEnvironment = val
}

// ReposCreateDeploymentReqPayload represents sum type.
type ReposCreateDeploymentReqPayload struct {
	Type                             ReposCreateDeploymentReqPayloadType // switch on this field
	ReposCreateDeploymentReqPayload0 ReposCreateDeploymentReqPayload0
	String                           string
}

// ReposCreateDeploymentReqPayloadType is oneOf type of ReposCreateDeploymentReqPayload.
type ReposCreateDeploymentReqPayloadType string

// Possible values for ReposCreateDeploymentReqPayloadType.
const (
	ReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload ReposCreateDeploymentReqPayloadType = "ReposCreateDeploymentReqPayload0"
	StringReposCreateDeploymentReqPayload                           ReposCreateDeploymentReqPayloadType = "string"
)

// IsReposCreateDeploymentReqPayload0 reports whether ReposCreateDeploymentReqPayload is ReposCreateDeploymentReqPayload0.
func (s ReposCreateDeploymentReqPayload) IsReposCreateDeploymentReqPayload0() bool {
	return s.Type == ReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload
}

// IsString reports whether ReposCreateDeploymentReqPayload is string.
func (s ReposCreateDeploymentReqPayload) IsString() bool {
	return s.Type == StringReposCreateDeploymentReqPayload
}

// SetReposCreateDeploymentReqPayload0 sets ReposCreateDeploymentReqPayload to ReposCreateDeploymentReqPayload0.
func (s *ReposCreateDeploymentReqPayload) SetReposCreateDeploymentReqPayload0(v ReposCreateDeploymentReqPayload0) {
	s.Type = ReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload
	s.ReposCreateDeploymentReqPayload0 = v
}

// GetReposCreateDeploymentReqPayload0 returns ReposCreateDeploymentReqPayload0 and true boolean if ReposCreateDeploymentReqPayload is ReposCreateDeploymentReqPayload0.
func (s ReposCreateDeploymentReqPayload) GetReposCreateDeploymentReqPayload0() (v ReposCreateDeploymentReqPayload0, ok bool) {
	if !s.IsReposCreateDeploymentReqPayload0() {
		return v, false
	}
	return s.ReposCreateDeploymentReqPayload0, true
}

// NewReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload returns new ReposCreateDeploymentReqPayload from ReposCreateDeploymentReqPayload0.
func NewReposCreateDeploymentReqPayload0ReposCreateDeploymentReqPayload(v ReposCreateDeploymentReqPayload0) ReposCreateDeploymentReqPayload {
	var s ReposCreateDeploymentReqPayload
	s.SetReposCreateDeploymentReqPayload0(v)
	return s
}

// SetString sets ReposCreateDeploymentReqPayload to string.
func (s *ReposCreateDeploymentReqPayload) SetString(v string) {
	s.Type = StringReposCreateDeploymentReqPayload
	s.String = v
}

// GetString returns string and true boolean if ReposCreateDeploymentReqPayload is string.
func (s ReposCreateDeploymentReqPayload) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringReposCreateDeploymentReqPayload returns new ReposCreateDeploymentReqPayload from string.
func NewStringReposCreateDeploymentReqPayload(v string) ReposCreateDeploymentReqPayload {
	var s ReposCreateDeploymentReqPayload
	s.SetString(v)
	return s
}

type ReposCreateDeploymentReqPayload0 map[string]jx.Raw

func (s *ReposCreateDeploymentReqPayload0) init() ReposCreateDeploymentReqPayload0 {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReposCreateDeploymentStatusReq struct {
	// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`
	// `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the
	// [`application/vnd.github.ant-man-preview+json`](https://docs.github.
	// com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress`
	// and `queued` states, you must provide the [`application/vnd.github.
	// flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses)
	// custom media type. When you set a transient deployment to `inactive`, the deployment will be shown
	// as `destroyed` in GitHub.
	State ReposCreateDeploymentStatusReqState `json:"state"`
	// The target URL to associate with this status. This URL should contain output to keep the user
	// updated while the task is running or serve as historical information for what happened in the
	// deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
	TargetURL OptString `json:"target_url"`
	// The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to
	// accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`.
	//  Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	LogURL OptString `json:"log_url"`
	// A short description of the status. The maximum description length is 140 characters.
	Description OptString `json:"description"`
	// Name for the target deployment environment, which can be changed when setting a deploy status. For
	// example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the
	// [`application/vnd.github.flash-preview+json`](https://docs.github.
	// com/rest/overview/api-previews#deployment-statuses) custom media type.
	Environment OptReposCreateDeploymentStatusReqEnvironment `json:"environment"`
	// Sets the URL for accessing your environment. Default: `""`
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	EnvironmentURL OptString `json:"environment_url"`
	// Adds a new `inactive` status to all prior non-transient, non-production environment deployments
	// with the same repository and `environment` name as the created status's deployment. An `inactive`
	// status is only added to deployments that had a `success` state. Default: `true`
	// **Note:** To add an `inactive` status to `production` environments, you must use the
	// [`application/vnd.github.flash-preview+json`](https://docs.github.
	// com/rest/overview/api-previews#deployment-statuses) custom media type.
	// **Note:** This parameter requires you to use the [`application/vnd.github.
	// ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments)
	// custom media type.
	AutoInactive OptBool `json:"auto_inactive"`
}

// GetState returns the value of State.
func (s *ReposCreateDeploymentStatusReq) GetState() ReposCreateDeploymentStatusReqState {
	return s.State
}

// GetTargetURL returns the value of TargetURL.
func (s *ReposCreateDeploymentStatusReq) GetTargetURL() OptString {
	return s.TargetURL
}

// GetLogURL returns the value of LogURL.
func (s *ReposCreateDeploymentStatusReq) GetLogURL() OptString {
	return s.LogURL
}

// GetDescription returns the value of Description.
func (s *ReposCreateDeploymentStatusReq) GetDescription() OptString {
	return s.Description
}

// GetEnvironment returns the value of Environment.
func (s *ReposCreateDeploymentStatusReq) GetEnvironment() OptReposCreateDeploymentStatusReqEnvironment {
	return s.Environment
}

// GetEnvironmentURL returns the value of EnvironmentURL.
func (s *ReposCreateDeploymentStatusReq) GetEnvironmentURL() OptString {
	return s.EnvironmentURL
}

// GetAutoInactive returns the value of AutoInactive.
func (s *ReposCreateDeploymentStatusReq) GetAutoInactive() OptBool {
	return s.AutoInactive
}

// SetState sets the value of State.
func (s *ReposCreateDeploymentStatusReq) SetState(val ReposCreateDeploymentStatusReqState) {
	s.State = val
}

// SetTargetURL sets the value of TargetURL.
func (s *ReposCreateDeploymentStatusReq) SetTargetURL(val OptString) {
	s.TargetURL = val
}

// SetLogURL sets the value of LogURL.
func (s *ReposCreateDeploymentStatusReq) SetLogURL(val OptString) {
	s.LogURL = val
}

// SetDescription sets the value of Description.
func (s *ReposCreateDeploymentStatusReq) SetDescription(val OptString) {
	s.Description = val
}

// SetEnvironment sets the value of Environment.
func (s *ReposCreateDeploymentStatusReq) SetEnvironment(val OptReposCreateDeploymentStatusReqEnvironment) {
	s.Environment = val
}

// SetEnvironmentURL sets the value of EnvironmentURL.
func (s *ReposCreateDeploymentStatusReq) SetEnvironmentURL(val OptString) {
	s.EnvironmentURL = val
}

// SetAutoInactive sets the value of AutoInactive.
func (s *ReposCreateDeploymentStatusReq) SetAutoInactive(val OptBool) {
	s.AutoInactive = val
}

// Name for the target deployment environment, which can be changed when setting a deploy status. For
// example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the
// [`application/vnd.github.flash-preview+json`](https://docs.github.
// com/rest/overview/api-previews#deployment-statuses) custom media type.
type ReposCreateDeploymentStatusReqEnvironment string

const (
	ReposCreateDeploymentStatusReqEnvironmentProduction ReposCreateDeploymentStatusReqEnvironment = "production"
	ReposCreateDeploymentStatusReqEnvironmentStaging    ReposCreateDeploymentStatusReqEnvironment = "staging"
	ReposCreateDeploymentStatusReqEnvironmentQa         ReposCreateDeploymentStatusReqEnvironment = "qa"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposCreateDeploymentStatusReqEnvironment) MarshalText() ([]byte, error) {
	switch s {
	case ReposCreateDeploymentStatusReqEnvironmentProduction:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqEnvironmentStaging:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqEnvironmentQa:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposCreateDeploymentStatusReqEnvironment) UnmarshalText(data []byte) error {
	switch ReposCreateDeploymentStatusReqEnvironment(data) {
	case ReposCreateDeploymentStatusReqEnvironmentProduction:
		*s = ReposCreateDeploymentStatusReqEnvironmentProduction
		return nil
	case ReposCreateDeploymentStatusReqEnvironmentStaging:
		*s = ReposCreateDeploymentStatusReqEnvironmentStaging
		return nil
	case ReposCreateDeploymentStatusReqEnvironmentQa:
		*s = ReposCreateDeploymentStatusReqEnvironmentQa
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`
// `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the
// [`application/vnd.github.ant-man-preview+json`](https://docs.github.
// com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress`
// and `queued` states, you must provide the [`application/vnd.github.
// flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses)
// custom media type. When you set a transient deployment to `inactive`, the deployment will be shown
// as `destroyed` in GitHub.
type ReposCreateDeploymentStatusReqState string

const (
	ReposCreateDeploymentStatusReqStateError      ReposCreateDeploymentStatusReqState = "error"
	ReposCreateDeploymentStatusReqStateFailure    ReposCreateDeploymentStatusReqState = "failure"
	ReposCreateDeploymentStatusReqStateInactive   ReposCreateDeploymentStatusReqState = "inactive"
	ReposCreateDeploymentStatusReqStateInProgress ReposCreateDeploymentStatusReqState = "in_progress"
	ReposCreateDeploymentStatusReqStateQueued     ReposCreateDeploymentStatusReqState = "queued"
	ReposCreateDeploymentStatusReqStatePending    ReposCreateDeploymentStatusReqState = "pending"
	ReposCreateDeploymentStatusReqStateSuccess    ReposCreateDeploymentStatusReqState = "success"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposCreateDeploymentStatusReqState) MarshalText() ([]byte, error) {
	switch s {
	case ReposCreateDeploymentStatusReqStateError:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqStateFailure:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqStateInactive:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqStateInProgress:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqStateQueued:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqStatePending:
		return []byte(s), nil
	case ReposCreateDeploymentStatusReqStateSuccess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposCreateDeploymentStatusReqState) UnmarshalText(data []byte) error {
	switch ReposCreateDeploymentStatusReqState(data) {
	case ReposCreateDeploymentStatusReqStateError:
		*s = ReposCreateDeploymentStatusReqStateError
		return nil
	case ReposCreateDeploymentStatusReqStateFailure:
		*s = ReposCreateDeploymentStatusReqStateFailure
		return nil
	case ReposCreateDeploymentStatusReqStateInactive:
		*s = ReposCreateDeploymentStatusReqStateInactive
		return nil
	case ReposCreateDeploymentStatusReqStateInProgress:
		*s = ReposCreateDeploymentStatusReqStateInProgress
		return nil
	case ReposCreateDeploymentStatusReqStateQueued:
		*s = ReposCreateDeploymentStatusReqStateQueued
		return nil
	case ReposCreateDeploymentStatusReqStatePending:
		*s = ReposCreateDeploymentStatusReqStatePending
		return nil
	case ReposCreateDeploymentStatusReqStateSuccess:
		*s = ReposCreateDeploymentStatusReqStateSuccess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReposCreateDispatchEventNoContent is response for ReposCreateDispatchEvent operation.
type ReposCreateDispatchEventNoContent struct{}

func (*ReposCreateDispatchEventNoContent) reposCreateDispatchEventRes() {}

type ReposCreateDispatchEventReq struct {
	// A custom webhook event name.
	EventType string `json:"event_type"`
	// JSON payload with extra information about the webhook event that your action or worklow may use.
	ClientPayload OptReposCreateDispatchEventReqClientPayload `json:"client_payload"`
}

// GetEventType returns the value of EventType.
func (s *ReposCreateDispatchEventReq) GetEventType() string {
	return s.EventType
}

// GetClientPayload returns the value of ClientPayload.
func (s *ReposCreateDispatchEventReq) GetClientPayload() OptReposCreateDispatchEventReqClientPayload {
	return s.ClientPayload
}

// SetEventType sets the value of EventType.
func (s *ReposCreateDispatchEventReq) SetEventType(val string) {
	s.EventType = val
}

// SetClientPayload sets the value of ClientPayload.
func (s *ReposCreateDispatchEventReq) SetClientPayload(val OptReposCreateDispatchEventReqClientPayload) {
	s.ClientPayload = val
}

// JSON payload with extra information about the webhook event that your action or worklow may use.
type ReposCreateDispatchEventReqClientPayload map[string]jx.Raw

func (s *ReposCreateDispatchEventReqClientPayload) init() ReposCreateDispatchEventReqClientPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReposCreateForAuthenticatedUserBadRequest BasicError

func (*ReposCreateForAuthenticatedUserBadRequest) reposCreateForAuthenticatedUserRes() {}

type ReposCreateForAuthenticatedUserForbidden BasicError

func (*ReposCreateForAuthenticatedUserForbidden) reposCreateForAuthenticatedUserRes() {}

type ReposCreateForAuthenticatedUserNotFound BasicError

func (*ReposCreateForAuthenticatedUserNotFound) reposCreateForAuthenticatedUserRes() {}

type ReposCreateForAuthenticatedUserReq struct {
	// The name of the repository.
	Name string `json:"name"`
	// A short description of the repository.
	Description OptString `json:"description"`
	// A URL with more information about the repository.
	Homepage OptString `json:"homepage"`
	// Whether the repository is private.
	Private OptBool `json:"private"`
	// Whether issues are enabled.
	HasIssues OptBool `json:"has_issues"`
	// Whether projects are enabled.
	HasProjects OptBool `json:"has_projects"`
	// Whether the wiki is enabled.
	HasWiki OptBool `json:"has_wiki"`
	// The id of the team that will be granted access to this repository. This is only valid when
	// creating a repository in an organization.
	TeamID OptInt `json:"team_id"`
	// Whether the repository is initialized with a minimal README.
	AutoInit OptBool `json:"auto_init"`
	// The desired language or platform to apply to the .gitignore.
	GitignoreTemplate OptString `json:"gitignore_template"`
	// The license keyword of the open source license for this repository.
	LicenseTemplate OptString `json:"license_template"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool `json:"allow_squash_merge"`
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool `json:"allow_merge_commit"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge OptBool `json:"allow_rebase_merge"`
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool `json:"allow_auto_merge"`
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool `json:"delete_branch_on_merge"`
	// Whether downloads are enabled.
	HasDownloads OptBool `json:"has_downloads"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool `json:"is_template"`
}

// GetName returns the value of Name.
func (s *ReposCreateForAuthenticatedUserReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ReposCreateForAuthenticatedUserReq) GetDescription() OptString {
	return s.Description
}

// GetHomepage returns the value of Homepage.
func (s *ReposCreateForAuthenticatedUserReq) GetHomepage() OptString {
	return s.Homepage
}

// GetPrivate returns the value of Private.
func (s *ReposCreateForAuthenticatedUserReq) GetPrivate() OptBool {
	return s.Private
}

// GetHasIssues returns the value of HasIssues.
func (s *ReposCreateForAuthenticatedUserReq) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *ReposCreateForAuthenticatedUserReq) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *ReposCreateForAuthenticatedUserReq) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetTeamID returns the value of TeamID.
func (s *ReposCreateForAuthenticatedUserReq) GetTeamID() OptInt {
	return s.TeamID
}

// GetAutoInit returns the value of AutoInit.
func (s *ReposCreateForAuthenticatedUserReq) GetAutoInit() OptBool {
	return s.AutoInit
}

// GetGitignoreTemplate returns the value of GitignoreTemplate.
func (s *ReposCreateForAuthenticatedUserReq) GetGitignoreTemplate() OptString {
	return s.GitignoreTemplate
}

// GetLicenseTemplate returns the value of LicenseTemplate.
func (s *ReposCreateForAuthenticatedUserReq) GetLicenseTemplate() OptString {
	return s.LicenseTemplate
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *ReposCreateForAuthenticatedUserReq) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *ReposCreateForAuthenticatedUserReq) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *ReposCreateForAuthenticatedUserReq) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *ReposCreateForAuthenticatedUserReq) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *ReposCreateForAuthenticatedUserReq) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetHasDownloads returns the value of HasDownloads.
func (s *ReposCreateForAuthenticatedUserReq) GetHasDownloads() OptBool {
	return s.HasDownloads
}

// GetIsTemplate returns the value of IsTemplate.
func (s *ReposCreateForAuthenticatedUserReq) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// SetName sets the value of Name.
func (s *ReposCreateForAuthenticatedUserReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ReposCreateForAuthenticatedUserReq) SetDescription(val OptString) {
	s.Description = val
}

// SetHomepage sets the value of Homepage.
func (s *ReposCreateForAuthenticatedUserReq) SetHomepage(val OptString) {
	s.Homepage = val
}

// SetPrivate sets the value of Private.
func (s *ReposCreateForAuthenticatedUserReq) SetPrivate(val OptBool) {
	s.Private = val
}

// SetHasIssues sets the value of HasIssues.
func (s *ReposCreateForAuthenticatedUserReq) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *ReposCreateForAuthenticatedUserReq) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *ReposCreateForAuthenticatedUserReq) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetTeamID sets the value of TeamID.
func (s *ReposCreateForAuthenticatedUserReq) SetTeamID(val OptInt) {
	s.TeamID = val
}

// SetAutoInit sets the value of AutoInit.
func (s *ReposCreateForAuthenticatedUserReq) SetAutoInit(val OptBool) {
	s.AutoInit = val
}

// SetGitignoreTemplate sets the value of GitignoreTemplate.
func (s *ReposCreateForAuthenticatedUserReq) SetGitignoreTemplate(val OptString) {
	s.GitignoreTemplate = val
}

// SetLicenseTemplate sets the value of LicenseTemplate.
func (s *ReposCreateForAuthenticatedUserReq) SetLicenseTemplate(val OptString) {
	s.LicenseTemplate = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *ReposCreateForAuthenticatedUserReq) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *ReposCreateForAuthenticatedUserReq) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *ReposCreateForAuthenticatedUserReq) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *ReposCreateForAuthenticatedUserReq) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *ReposCreateForAuthenticatedUserReq) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *ReposCreateForAuthenticatedUserReq) SetHasDownloads(val OptBool) {
	s.HasDownloads = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *ReposCreateForAuthenticatedUserReq) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

type ReposCreateForAuthenticatedUserUnauthorized BasicError

func (*ReposCreateForAuthenticatedUserUnauthorized) reposCreateForAuthenticatedUserRes() {}

type ReposCreateForkBadRequest BasicError

func (*ReposCreateForkBadRequest) reposCreateForkRes() {}

type ReposCreateForkForbidden BasicError

func (*ReposCreateForkForbidden) reposCreateForkRes() {}

type ReposCreateForkNotFound BasicError

func (*ReposCreateForkNotFound) reposCreateForkRes() {}

type ReposCreateForkReq struct {
	// Optional parameter to specify the organization name if forking into an organization.
	Organization OptString `json:"organization"`
}

// GetOrganization returns the value of Organization.
func (s *ReposCreateForkReq) GetOrganization() OptString {
	return s.Organization
}

// SetOrganization sets the value of Organization.
func (s *ReposCreateForkReq) SetOrganization(val OptString) {
	s.Organization = val
}

type ReposCreateInOrgReq struct {
	// The name of the repository.
	Name string `json:"name"`
	// A short description of the repository.
	Description OptString `json:"description"`
	// A URL with more information about the repository.
	Homepage OptString `json:"homepage"`
	// Whether the repository is private.
	Private OptBool `json:"private"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using
	// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
	// Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories
	// available to all users on the enterprise. For more information, see "[Creating an internal
	// repository](https://help.github.
	// com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
	// The `visibility` parameter overrides the `private` parameter when you use both parameters with the
	// `nebula-preview` preview header.
	Visibility OptReposCreateInOrgReqVisibility `json:"visibility"`
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues OptBool `json:"has_issues"`
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If
	// you're creating a repository in an organization that has disabled repository projects, the default
	// is `false`, and if you pass `true`, the API returns an error.
	HasProjects OptBool `json:"has_projects"`
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki OptBool `json:"has_wiki"`
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate OptBool `json:"is_template"`
	// The id of the team that will be granted access to this repository. This is only valid when
	// creating a repository in an organization.
	TeamID OptInt `json:"team_id"`
	// Pass `true` to create an initial commit with empty README.
	AutoInit OptBool `json:"auto_init"`
	// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply.
	// Use the name of the template without the extension. For example, "Haskell".
	GitignoreTemplate OptString `json:"gitignore_template"`
	// Choose an [open source license template](https://choosealicense.com/) that best suits your needs,
	// and then use the [license keyword](https://help.github.
	// com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template`
	// string. For example, "mit" or "mpl-2.0".
	LicenseTemplate OptString `json:"license_template"`
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge OptBool `json:"allow_squash_merge"`
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging
	// pull requests with merge commits.
	AllowMergeCommit OptBool `json:"allow_merge_commit"`
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge OptBool `json:"allow_rebase_merge"`
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge OptBool `json:"allow_auto_merge"`
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or
	// `false` to prevent automatic deletion.
	DeleteBranchOnMerge OptBool `json:"delete_branch_on_merge"`
}

// GetName returns the value of Name.
func (s *ReposCreateInOrgReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ReposCreateInOrgReq) GetDescription() OptString {
	return s.Description
}

// GetHomepage returns the value of Homepage.
func (s *ReposCreateInOrgReq) GetHomepage() OptString {
	return s.Homepage
}

// GetPrivate returns the value of Private.
func (s *ReposCreateInOrgReq) GetPrivate() OptBool {
	return s.Private
}

// GetVisibility returns the value of Visibility.
func (s *ReposCreateInOrgReq) GetVisibility() OptReposCreateInOrgReqVisibility {
	return s.Visibility
}

// GetHasIssues returns the value of HasIssues.
func (s *ReposCreateInOrgReq) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *ReposCreateInOrgReq) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *ReposCreateInOrgReq) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetIsTemplate returns the value of IsTemplate.
func (s *ReposCreateInOrgReq) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTeamID returns the value of TeamID.
func (s *ReposCreateInOrgReq) GetTeamID() OptInt {
	return s.TeamID
}

// GetAutoInit returns the value of AutoInit.
func (s *ReposCreateInOrgReq) GetAutoInit() OptBool {
	return s.AutoInit
}

// GetGitignoreTemplate returns the value of GitignoreTemplate.
func (s *ReposCreateInOrgReq) GetGitignoreTemplate() OptString {
	return s.GitignoreTemplate
}

// GetLicenseTemplate returns the value of LicenseTemplate.
func (s *ReposCreateInOrgReq) GetLicenseTemplate() OptString {
	return s.LicenseTemplate
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *ReposCreateInOrgReq) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *ReposCreateInOrgReq) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *ReposCreateInOrgReq) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *ReposCreateInOrgReq) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *ReposCreateInOrgReq) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// SetName sets the value of Name.
func (s *ReposCreateInOrgReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ReposCreateInOrgReq) SetDescription(val OptString) {
	s.Description = val
}

// SetHomepage sets the value of Homepage.
func (s *ReposCreateInOrgReq) SetHomepage(val OptString) {
	s.Homepage = val
}

// SetPrivate sets the value of Private.
func (s *ReposCreateInOrgReq) SetPrivate(val OptBool) {
	s.Private = val
}

// SetVisibility sets the value of Visibility.
func (s *ReposCreateInOrgReq) SetVisibility(val OptReposCreateInOrgReqVisibility) {
	s.Visibility = val
}

// SetHasIssues sets the value of HasIssues.
func (s *ReposCreateInOrgReq) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *ReposCreateInOrgReq) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *ReposCreateInOrgReq) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *ReposCreateInOrgReq) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTeamID sets the value of TeamID.
func (s *ReposCreateInOrgReq) SetTeamID(val OptInt) {
	s.TeamID = val
}

// SetAutoInit sets the value of AutoInit.
func (s *ReposCreateInOrgReq) SetAutoInit(val OptBool) {
	s.AutoInit = val
}

// SetGitignoreTemplate sets the value of GitignoreTemplate.
func (s *ReposCreateInOrgReq) SetGitignoreTemplate(val OptString) {
	s.GitignoreTemplate = val
}

// SetLicenseTemplate sets the value of LicenseTemplate.
func (s *ReposCreateInOrgReq) SetLicenseTemplate(val OptString) {
	s.LicenseTemplate = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *ReposCreateInOrgReq) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *ReposCreateInOrgReq) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *ReposCreateInOrgReq) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *ReposCreateInOrgReq) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *ReposCreateInOrgReq) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// Can be `public` or `private`. If your organization is associated with an enterprise account using
// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
// Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories
// available to all users on the enterprise. For more information, see "[Creating an internal
// repository](https://help.github.
// com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
// The `visibility` parameter overrides the `private` parameter when you use both parameters with the
// `nebula-preview` preview header.
type ReposCreateInOrgReqVisibility string

const (
	ReposCreateInOrgReqVisibilityPublic     ReposCreateInOrgReqVisibility = "public"
	ReposCreateInOrgReqVisibilityPrivate    ReposCreateInOrgReqVisibility = "private"
	ReposCreateInOrgReqVisibilityVisibility ReposCreateInOrgReqVisibility = "visibility"
	ReposCreateInOrgReqVisibilityInternal   ReposCreateInOrgReqVisibility = "internal"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposCreateInOrgReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ReposCreateInOrgReqVisibilityPublic:
		return []byte(s), nil
	case ReposCreateInOrgReqVisibilityPrivate:
		return []byte(s), nil
	case ReposCreateInOrgReqVisibilityVisibility:
		return []byte(s), nil
	case ReposCreateInOrgReqVisibilityInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposCreateInOrgReqVisibility) UnmarshalText(data []byte) error {
	switch ReposCreateInOrgReqVisibility(data) {
	case ReposCreateInOrgReqVisibilityPublic:
		*s = ReposCreateInOrgReqVisibilityPublic
		return nil
	case ReposCreateInOrgReqVisibilityPrivate:
		*s = ReposCreateInOrgReqVisibilityPrivate
		return nil
	case ReposCreateInOrgReqVisibilityVisibility:
		*s = ReposCreateInOrgReqVisibilityVisibility
		return nil
	case ReposCreateInOrgReqVisibilityInternal:
		*s = ReposCreateInOrgReqVisibilityInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposCreateOrUpdateFileContentsConflict BasicError

func (*ReposCreateOrUpdateFileContentsConflict) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsCreated FileCommit

func (*ReposCreateOrUpdateFileContentsCreated) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsNotFound BasicError

func (*ReposCreateOrUpdateFileContentsNotFound) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsOK FileCommit

func (*ReposCreateOrUpdateFileContentsOK) reposCreateOrUpdateFileContentsRes() {}

type ReposCreateOrUpdateFileContentsReq struct {
	// The commit message.
	Message string `json:"message"`
	// The new file content, using Base64 encoding.
	Content string `json:"content"`
	// **Required if you are updating a file**. The blob SHA of the file being replaced.
	Sha OptString `json:"sha"`
	// The branch name. Default: the repository’s default branch (usually `master`).
	Branch OptString `json:"branch"`
	// The person that committed the file. Default: the authenticated user.
	Committer OptReposCreateOrUpdateFileContentsReqCommitter `json:"committer"`
	// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
	Author OptReposCreateOrUpdateFileContentsReqAuthor `json:"author"`
}

// GetMessage returns the value of Message.
func (s *ReposCreateOrUpdateFileContentsReq) GetMessage() string {
	return s.Message
}

// GetContent returns the value of Content.
func (s *ReposCreateOrUpdateFileContentsReq) GetContent() string {
	return s.Content
}

// GetSha returns the value of Sha.
func (s *ReposCreateOrUpdateFileContentsReq) GetSha() OptString {
	return s.Sha
}

// GetBranch returns the value of Branch.
func (s *ReposCreateOrUpdateFileContentsReq) GetBranch() OptString {
	return s.Branch
}

// GetCommitter returns the value of Committer.
func (s *ReposCreateOrUpdateFileContentsReq) GetCommitter() OptReposCreateOrUpdateFileContentsReqCommitter {
	return s.Committer
}

// GetAuthor returns the value of Author.
func (s *ReposCreateOrUpdateFileContentsReq) GetAuthor() OptReposCreateOrUpdateFileContentsReqAuthor {
	return s.Author
}

// SetMessage sets the value of Message.
func (s *ReposCreateOrUpdateFileContentsReq) SetMessage(val string) {
	s.Message = val
}

// SetContent sets the value of Content.
func (s *ReposCreateOrUpdateFileContentsReq) SetContent(val string) {
	s.Content = val
}

// SetSha sets the value of Sha.
func (s *ReposCreateOrUpdateFileContentsReq) SetSha(val OptString) {
	s.Sha = val
}

// SetBranch sets the value of Branch.
func (s *ReposCreateOrUpdateFileContentsReq) SetBranch(val OptString) {
	s.Branch = val
}

// SetCommitter sets the value of Committer.
func (s *ReposCreateOrUpdateFileContentsReq) SetCommitter(val OptReposCreateOrUpdateFileContentsReqCommitter) {
	s.Committer = val
}

// SetAuthor sets the value of Author.
func (s *ReposCreateOrUpdateFileContentsReq) SetAuthor(val OptReposCreateOrUpdateFileContentsReqAuthor) {
	s.Author = val
}

// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
type ReposCreateOrUpdateFileContentsReqAuthor struct {
	// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is
	// omitted.
	Name string `json:"name"`
	// The email of the author or committer of the commit. You'll receive a `422` status code if `email`
	// is omitted.
	Email string    `json:"email"`
	Date  OptString `json:"date"`
}

// GetName returns the value of Name.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) GetEmail() string {
	return s.Email
}

// GetDate returns the value of Date.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) GetDate() OptString {
	return s.Date
}

// SetName sets the value of Name.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) SetEmail(val string) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *ReposCreateOrUpdateFileContentsReqAuthor) SetDate(val OptString) {
	s.Date = val
}

// The person that committed the file. Default: the authenticated user.
type ReposCreateOrUpdateFileContentsReqCommitter struct {
	// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is
	// omitted.
	Name string `json:"name"`
	// The email of the author or committer of the commit. You'll receive a `422` status code if `email`
	// is omitted.
	Email string    `json:"email"`
	Date  OptString `json:"date"`
}

// GetName returns the value of Name.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) GetEmail() string {
	return s.Email
}

// GetDate returns the value of Date.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) GetDate() OptString {
	return s.Date
}

// SetName sets the value of Name.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) SetEmail(val string) {
	s.Email = val
}

// SetDate sets the value of Date.
func (s *ReposCreateOrUpdateFileContentsReqCommitter) SetDate(val OptString) {
	s.Date = val
}

// The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteReq struct {
	// The source branch and directory used to publish your Pages site.
	Source ReposCreatePagesSiteReqSource `json:"source"`
}

// GetSource returns the value of Source.
func (s *ReposCreatePagesSiteReq) GetSource() ReposCreatePagesSiteReqSource {
	return s.Source
}

// SetSource sets the value of Source.
func (s *ReposCreatePagesSiteReq) SetSource(val ReposCreatePagesSiteReqSource) {
	s.Source = val
}

// The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteReqSource struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/`
	// or `/docs`. Default: `/`.
	Path OptReposCreatePagesSiteReqSourcePath `json:"path"`
}

// GetBranch returns the value of Branch.
func (s *ReposCreatePagesSiteReqSource) GetBranch() string {
	return s.Branch
}

// GetPath returns the value of Path.
func (s *ReposCreatePagesSiteReqSource) GetPath() OptReposCreatePagesSiteReqSourcePath {
	return s.Path
}

// SetBranch sets the value of Branch.
func (s *ReposCreatePagesSiteReqSource) SetBranch(val string) {
	s.Branch = val
}

// SetPath sets the value of Path.
func (s *ReposCreatePagesSiteReqSource) SetPath(val OptReposCreatePagesSiteReqSourcePath) {
	s.Path = val
}

// The repository directory that includes the source files for the Pages site. Allowed paths are `/`
// or `/docs`. Default: `/`.
type ReposCreatePagesSiteReqSourcePath string

const (
	ReposCreatePagesSiteReqSourcePathSlash     ReposCreatePagesSiteReqSourcePath = "/"
	ReposCreatePagesSiteReqSourcePathSlashDocs ReposCreatePagesSiteReqSourcePath = "/docs"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposCreatePagesSiteReqSourcePath) MarshalText() ([]byte, error) {
	switch s {
	case ReposCreatePagesSiteReqSourcePathSlash:
		return []byte(s), nil
	case ReposCreatePagesSiteReqSourcePathSlashDocs:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposCreatePagesSiteReqSourcePath) UnmarshalText(data []byte) error {
	switch ReposCreatePagesSiteReqSourcePath(data) {
	case ReposCreatePagesSiteReqSourcePathSlash:
		*s = ReposCreatePagesSiteReqSourcePathSlash
		return nil
	case ReposCreatePagesSiteReqSourcePathSlashDocs:
		*s = ReposCreatePagesSiteReqSourcePathSlashDocs
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposCreateReleaseReq struct {
	// The name of the tag.
	TagName string `json:"tag_name"`
	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch
	// or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch
	// (usually `master`).
	TargetCommitish OptString `json:"target_commitish"`
	// The name of the release.
	Name OptString `json:"name"`
	// Text describing the contents of the tag.
	Body OptString `json:"body"`
	// `true` to create a draft (unpublished) release, `false` to create a published one.
	Draft OptBool `json:"draft"`
	// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
	Prerelease OptBool `json:"prerelease"`
	// If specified, a discussion of the specified category is created and linked to the release. The
	// value must be a category that already exists in the repository. For more information, see
	// "[Managing categories for discussions in your repository](https://docs.github.
	// com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).".
	DiscussionCategoryName OptString `json:"discussion_category_name"`
}

// GetTagName returns the value of TagName.
func (s *ReposCreateReleaseReq) GetTagName() string {
	return s.TagName
}

// GetTargetCommitish returns the value of TargetCommitish.
func (s *ReposCreateReleaseReq) GetTargetCommitish() OptString {
	return s.TargetCommitish
}

// GetName returns the value of Name.
func (s *ReposCreateReleaseReq) GetName() OptString {
	return s.Name
}

// GetBody returns the value of Body.
func (s *ReposCreateReleaseReq) GetBody() OptString {
	return s.Body
}

// GetDraft returns the value of Draft.
func (s *ReposCreateReleaseReq) GetDraft() OptBool {
	return s.Draft
}

// GetPrerelease returns the value of Prerelease.
func (s *ReposCreateReleaseReq) GetPrerelease() OptBool {
	return s.Prerelease
}

// GetDiscussionCategoryName returns the value of DiscussionCategoryName.
func (s *ReposCreateReleaseReq) GetDiscussionCategoryName() OptString {
	return s.DiscussionCategoryName
}

// SetTagName sets the value of TagName.
func (s *ReposCreateReleaseReq) SetTagName(val string) {
	s.TagName = val
}

// SetTargetCommitish sets the value of TargetCommitish.
func (s *ReposCreateReleaseReq) SetTargetCommitish(val OptString) {
	s.TargetCommitish = val
}

// SetName sets the value of Name.
func (s *ReposCreateReleaseReq) SetName(val OptString) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *ReposCreateReleaseReq) SetBody(val OptString) {
	s.Body = val
}

// SetDraft sets the value of Draft.
func (s *ReposCreateReleaseReq) SetDraft(val OptBool) {
	s.Draft = val
}

// SetPrerelease sets the value of Prerelease.
func (s *ReposCreateReleaseReq) SetPrerelease(val OptBool) {
	s.Prerelease = val
}

// SetDiscussionCategoryName sets the value of DiscussionCategoryName.
func (s *ReposCreateReleaseReq) SetDiscussionCategoryName(val OptString) {
	s.DiscussionCategoryName = val
}

type ReposCreateUsingTemplateReq struct {
	// The organization or person who will own the new repository. To create a new repository in an
	// organization, the authenticated user must be a member of the specified organization.
	Owner OptString `json:"owner"`
	// The name of the new repository.
	Name string `json:"name"`
	// A short description of the new repository.
	Description OptString `json:"description"`
	// Set to `true` to include the directory structure and files from all branches in the template
	// repository, and not just the default branch. Default: `false`.
	IncludeAllBranches OptBool `json:"include_all_branches"`
	// Either `true` to create a new private repository or `false` to create a new public one.
	Private OptBool `json:"private"`
}

// GetOwner returns the value of Owner.
func (s *ReposCreateUsingTemplateReq) GetOwner() OptString {
	return s.Owner
}

// GetName returns the value of Name.
func (s *ReposCreateUsingTemplateReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ReposCreateUsingTemplateReq) GetDescription() OptString {
	return s.Description
}

// GetIncludeAllBranches returns the value of IncludeAllBranches.
func (s *ReposCreateUsingTemplateReq) GetIncludeAllBranches() OptBool {
	return s.IncludeAllBranches
}

// GetPrivate returns the value of Private.
func (s *ReposCreateUsingTemplateReq) GetPrivate() OptBool {
	return s.Private
}

// SetOwner sets the value of Owner.
func (s *ReposCreateUsingTemplateReq) SetOwner(val OptString) {
	s.Owner = val
}

// SetName sets the value of Name.
func (s *ReposCreateUsingTemplateReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ReposCreateUsingTemplateReq) SetDescription(val OptString) {
	s.Description = val
}

// SetIncludeAllBranches sets the value of IncludeAllBranches.
func (s *ReposCreateUsingTemplateReq) SetIncludeAllBranches(val OptBool) {
	s.IncludeAllBranches = val
}

// SetPrivate sets the value of Private.
func (s *ReposCreateUsingTemplateReq) SetPrivate(val OptBool) {
	s.Private = val
}

type ReposCreateWebhookForbidden BasicError

func (*ReposCreateWebhookForbidden) reposCreateWebhookRes() {}

type ReposCreateWebhookNotFound BasicError

func (*ReposCreateWebhookNotFound) reposCreateWebhookRes() {}

type ReposCreateWebhookReq struct {
	// Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
	Name OptString `json:"name"`
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/repos#create-hook-config-params).
	Config OptReposCreateWebhookReqConfig `json:"config"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for.
	Events []string `json:"events"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool `json:"active"`
}

// GetName returns the value of Name.
func (s *ReposCreateWebhookReq) GetName() OptString {
	return s.Name
}

// GetConfig returns the value of Config.
func (s *ReposCreateWebhookReq) GetConfig() OptReposCreateWebhookReqConfig {
	return s.Config
}

// GetEvents returns the value of Events.
func (s *ReposCreateWebhookReq) GetEvents() []string {
	return s.Events
}

// GetActive returns the value of Active.
func (s *ReposCreateWebhookReq) GetActive() OptBool {
	return s.Active
}

// SetName sets the value of Name.
func (s *ReposCreateWebhookReq) SetName(val OptString) {
	s.Name = val
}

// SetConfig sets the value of Config.
func (s *ReposCreateWebhookReq) SetConfig(val OptReposCreateWebhookReqConfig) {
	s.Config = val
}

// SetEvents sets the value of Events.
func (s *ReposCreateWebhookReq) SetEvents(val []string) {
	s.Events = val
}

// SetActive sets the value of Active.
func (s *ReposCreateWebhookReq) SetActive(val OptBool) {
	s.Active = val
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/repos#create-hook-config-params).
type ReposCreateWebhookReqConfig struct {
	URL         OptWebhookConfigURL         `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
	Token       OptString                   `json:"token"`
	Digest      OptString                   `json:"digest"`
}

// GetURL returns the value of URL.
func (s *ReposCreateWebhookReqConfig) GetURL() OptWebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *ReposCreateWebhookReqConfig) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *ReposCreateWebhookReqConfig) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *ReposCreateWebhookReqConfig) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// GetToken returns the value of Token.
func (s *ReposCreateWebhookReqConfig) GetToken() OptString {
	return s.Token
}

// GetDigest returns the value of Digest.
func (s *ReposCreateWebhookReqConfig) GetDigest() OptString {
	return s.Digest
}

// SetURL sets the value of URL.
func (s *ReposCreateWebhookReqConfig) SetURL(val OptWebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *ReposCreateWebhookReqConfig) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *ReposCreateWebhookReqConfig) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *ReposCreateWebhookReqConfig) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

// SetToken sets the value of Token.
func (s *ReposCreateWebhookReqConfig) SetToken(val OptString) {
	s.Token = val
}

// SetDigest sets the value of Digest.
func (s *ReposCreateWebhookReqConfig) SetDigest(val OptString) {
	s.Digest = val
}

type ReposDeclineInvitationConflict BasicError

func (*ReposDeclineInvitationConflict) reposDeclineInvitationRes() {}

type ReposDeclineInvitationForbidden BasicError

func (*ReposDeclineInvitationForbidden) reposDeclineInvitationRes() {}

// ReposDeclineInvitationNoContent is response for ReposDeclineInvitation operation.
type ReposDeclineInvitationNoContent struct{}

func (*ReposDeclineInvitationNoContent) reposDeclineInvitationRes() {}

type ReposDeclineInvitationNotFound BasicError

func (*ReposDeclineInvitationNotFound) reposDeclineInvitationRes() {}

// ReposDeleteAccessRestrictionsNoContent is response for ReposDeleteAccessRestrictions operation.
type ReposDeleteAccessRestrictionsNoContent struct{}

// ReposDeleteAdminBranchProtectionNoContent is response for ReposDeleteAdminBranchProtection operation.
type ReposDeleteAdminBranchProtectionNoContent struct{}

func (*ReposDeleteAdminBranchProtectionNoContent) reposDeleteAdminBranchProtectionRes() {}

// ReposDeleteAnEnvironmentNoContent is response for ReposDeleteAnEnvironment operation.
type ReposDeleteAnEnvironmentNoContent struct{}

// ReposDeleteAutolinkNoContent is response for ReposDeleteAutolink operation.
type ReposDeleteAutolinkNoContent struct{}

func (*ReposDeleteAutolinkNoContent) reposDeleteAutolinkRes() {}

// ReposDeleteBranchProtectionNoContent is response for ReposDeleteBranchProtection operation.
type ReposDeleteBranchProtectionNoContent struct{}

func (*ReposDeleteBranchProtectionNoContent) reposDeleteBranchProtectionRes() {}

// ReposDeleteCommitCommentNoContent is response for ReposDeleteCommitComment operation.
type ReposDeleteCommitCommentNoContent struct{}

func (*ReposDeleteCommitCommentNoContent) reposDeleteCommitCommentRes() {}

// ReposDeleteCommitSignatureProtectionNoContent is response for ReposDeleteCommitSignatureProtection operation.
type ReposDeleteCommitSignatureProtectionNoContent struct{}

func (*ReposDeleteCommitSignatureProtectionNoContent) reposDeleteCommitSignatureProtectionRes() {}

// ReposDeleteDeployKeyNoContent is response for ReposDeleteDeployKey operation.
type ReposDeleteDeployKeyNoContent struct{}

// ReposDeleteDeploymentNoContent is response for ReposDeleteDeployment operation.
type ReposDeleteDeploymentNoContent struct{}

func (*ReposDeleteDeploymentNoContent) reposDeleteDeploymentRes() {}

type ReposDeleteFileConflict BasicError

func (*ReposDeleteFileConflict) reposDeleteFileRes() {}

type ReposDeleteFileNotFound BasicError

func (*ReposDeleteFileNotFound) reposDeleteFileRes() {}

type ReposDeleteFileReq struct {
	// The commit message.
	Message string `json:"message"`
	// The blob SHA of the file being replaced.
	Sha string `json:"sha"`
	// The branch name. Default: the repository’s default branch (usually `master`).
	Branch OptString `json:"branch"`
	// Object containing information about the committer.
	Committer OptReposDeleteFileReqCommitter `json:"committer"`
	// Object containing information about the author.
	Author OptReposDeleteFileReqAuthor `json:"author"`
}

// GetMessage returns the value of Message.
func (s *ReposDeleteFileReq) GetMessage() string {
	return s.Message
}

// GetSha returns the value of Sha.
func (s *ReposDeleteFileReq) GetSha() string {
	return s.Sha
}

// GetBranch returns the value of Branch.
func (s *ReposDeleteFileReq) GetBranch() OptString {
	return s.Branch
}

// GetCommitter returns the value of Committer.
func (s *ReposDeleteFileReq) GetCommitter() OptReposDeleteFileReqCommitter {
	return s.Committer
}

// GetAuthor returns the value of Author.
func (s *ReposDeleteFileReq) GetAuthor() OptReposDeleteFileReqAuthor {
	return s.Author
}

// SetMessage sets the value of Message.
func (s *ReposDeleteFileReq) SetMessage(val string) {
	s.Message = val
}

// SetSha sets the value of Sha.
func (s *ReposDeleteFileReq) SetSha(val string) {
	s.Sha = val
}

// SetBranch sets the value of Branch.
func (s *ReposDeleteFileReq) SetBranch(val OptString) {
	s.Branch = val
}

// SetCommitter sets the value of Committer.
func (s *ReposDeleteFileReq) SetCommitter(val OptReposDeleteFileReqCommitter) {
	s.Committer = val
}

// SetAuthor sets the value of Author.
func (s *ReposDeleteFileReq) SetAuthor(val OptReposDeleteFileReqAuthor) {
	s.Author = val
}

// Object containing information about the author.
type ReposDeleteFileReqAuthor struct {
	// The name of the author (or committer) of the commit.
	Name OptString `json:"name"`
	// The email of the author (or committer) of the commit.
	Email OptString `json:"email"`
}

// GetName returns the value of Name.
func (s *ReposDeleteFileReqAuthor) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *ReposDeleteFileReqAuthor) GetEmail() OptString {
	return s.Email
}

// SetName sets the value of Name.
func (s *ReposDeleteFileReqAuthor) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *ReposDeleteFileReqAuthor) SetEmail(val OptString) {
	s.Email = val
}

// Object containing information about the committer.
type ReposDeleteFileReqCommitter struct {
	// The name of the author (or committer) of the commit.
	Name OptString `json:"name"`
	// The email of the author (or committer) of the commit.
	Email OptString `json:"email"`
}

// GetName returns the value of Name.
func (s *ReposDeleteFileReqCommitter) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *ReposDeleteFileReqCommitter) GetEmail() OptString {
	return s.Email
}

// SetName sets the value of Name.
func (s *ReposDeleteFileReqCommitter) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *ReposDeleteFileReqCommitter) SetEmail(val OptString) {
	s.Email = val
}

type ReposDeleteForbidden struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *ReposDeleteForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ReposDeleteForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *ReposDeleteForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ReposDeleteForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*ReposDeleteForbidden) reposDeleteRes() {}

// ReposDeleteInvitationNoContent is response for ReposDeleteInvitation operation.
type ReposDeleteInvitationNoContent struct{}

// ReposDeleteNoContent is response for ReposDelete operation.
type ReposDeleteNoContent struct{}

func (*ReposDeleteNoContent) reposDeleteRes() {}

type ReposDeleteNotFound BasicError

func (*ReposDeleteNotFound) reposDeleteRes() {}

// ReposDeletePagesSiteNoContent is response for ReposDeletePagesSite operation.
type ReposDeletePagesSiteNoContent struct{}

func (*ReposDeletePagesSiteNoContent) reposDeletePagesSiteRes() {}

// ReposDeletePullRequestReviewProtectionNoContent is response for ReposDeletePullRequestReviewProtection operation.
type ReposDeletePullRequestReviewProtectionNoContent struct{}

func (*ReposDeletePullRequestReviewProtectionNoContent) reposDeletePullRequestReviewProtectionRes() {}

// ReposDeleteReleaseAssetNoContent is response for ReposDeleteReleaseAsset operation.
type ReposDeleteReleaseAssetNoContent struct{}

// ReposDeleteReleaseNoContent is response for ReposDeleteRelease operation.
type ReposDeleteReleaseNoContent struct{}

type ReposDeleteTemporaryRedirect BasicError

func (*ReposDeleteTemporaryRedirect) reposDeleteRes() {}

// ReposDeleteWebhookNoContent is response for ReposDeleteWebhook operation.
type ReposDeleteWebhookNoContent struct{}

func (*ReposDeleteWebhookNoContent) reposDeleteWebhookRes() {}

// ReposDisableAutomatedSecurityFixesNoContent is response for ReposDisableAutomatedSecurityFixes operation.
type ReposDisableAutomatedSecurityFixesNoContent struct{}

// ReposDisableLfsForRepoNoContent is response for ReposDisableLfsForRepo operation.
type ReposDisableLfsForRepoNoContent struct{}

// ReposDisableVulnerabilityAlertsNoContent is response for ReposDisableVulnerabilityAlerts operation.
type ReposDisableVulnerabilityAlertsNoContent struct{}

// ReposDownloadTarballArchiveFound is response for ReposDownloadTarballArchive operation.
type ReposDownloadTarballArchiveFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *ReposDownloadTarballArchiveFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *ReposDownloadTarballArchiveFound) SetLocation(val OptString) {
	s.Location = val
}

// ReposDownloadZipballArchiveFound is response for ReposDownloadZipballArchive operation.
type ReposDownloadZipballArchiveFound struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *ReposDownloadZipballArchiveFound) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *ReposDownloadZipballArchiveFound) SetLocation(val OptString) {
	s.Location = val
}

// ReposEnableAutomatedSecurityFixesNoContent is response for ReposEnableAutomatedSecurityFixes operation.
type ReposEnableAutomatedSecurityFixesNoContent struct{}

// ReposEnableLfsForRepoForbidden is response for ReposEnableLfsForRepo operation.
type ReposEnableLfsForRepoForbidden struct{}

func (*ReposEnableLfsForRepoForbidden) reposEnableLfsForRepoRes() {}

// ReposEnableVulnerabilityAlertsNoContent is response for ReposEnableVulnerabilityAlerts operation.
type ReposEnableVulnerabilityAlertsNoContent struct{}

type ReposGetAllStatusCheckContextsOKApplicationJSON []string

func (*ReposGetAllStatusCheckContextsOKApplicationJSON) reposGetAllStatusCheckContextsRes() {}

type ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON []Integration

func (*ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) reposGetAppsWithAccessToProtectedBranchRes() {
}

type ReposGetBranchMovedPermanently BasicError

func (*ReposGetBranchMovedPermanently) reposGetBranchRes() {}

type ReposGetBranchNotFound BasicError

func (*ReposGetBranchNotFound) reposGetBranchRes() {}

type ReposGetClonesPer string

const (
	ReposGetClonesPerEmpty ReposGetClonesPer = ""
	ReposGetClonesPerDay   ReposGetClonesPer = "day"
	ReposGetClonesPerWeek  ReposGetClonesPer = "week"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposGetClonesPer) MarshalText() ([]byte, error) {
	switch s {
	case ReposGetClonesPerEmpty:
		return []byte(s), nil
	case ReposGetClonesPerDay:
		return []byte(s), nil
	case ReposGetClonesPerWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposGetClonesPer) UnmarshalText(data []byte) error {
	switch ReposGetClonesPer(data) {
	case ReposGetClonesPerEmpty:
		*s = ReposGetClonesPerEmpty
		return nil
	case ReposGetClonesPerDay:
		*s = ReposGetClonesPerDay
		return nil
	case ReposGetClonesPerWeek:
		*s = ReposGetClonesPerWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposGetCodeFrequencyStatsOKApplicationJSON []CodeFrequencyStat

func (*ReposGetCodeFrequencyStatsOKApplicationJSON) reposGetCodeFrequencyStatsRes() {}

type ReposGetCommitActivityStatsOKApplicationJSON []CommitActivity

func (*ReposGetCommitActivityStatsOKApplicationJSON) reposGetCommitActivityStatsRes() {}

type ReposGetCommitInternalServerError BasicError

func (*ReposGetCommitInternalServerError) reposGetCommitRes() {}

type ReposGetCommitNotFound BasicError

func (*ReposGetCommitNotFound) reposGetCommitRes() {}

type ReposGetContributorsStatsOKApplicationJSON []ContributorActivity

func (*ReposGetContributorsStatsOKApplicationJSON) reposGetContributorsStatsRes() {}

type ReposGetForbidden BasicError

func (*ReposGetForbidden) reposGetRes() {}

type ReposGetMovedPermanently BasicError

func (*ReposGetMovedPermanently) reposGetRes() {}

type ReposGetNotFound BasicError

func (*ReposGetNotFound) reposGetRes() {}

// ReposGetPagesHealthCheckBadRequest is response for ReposGetPagesHealthCheck operation.
type ReposGetPagesHealthCheckBadRequest struct{}

func (*ReposGetPagesHealthCheckBadRequest) reposGetPagesHealthCheckRes() {}

// ReposGetPagesHealthCheckUnprocessableEntity is response for ReposGetPagesHealthCheck operation.
type ReposGetPagesHealthCheckUnprocessableEntity struct{}

func (*ReposGetPagesHealthCheckUnprocessableEntity) reposGetPagesHealthCheckRes() {}

type ReposGetPunchCardStatsOKApplicationJSON []CodeFrequencyStat

func (*ReposGetPunchCardStatsOKApplicationJSON) reposGetPunchCardStatsRes() {}

type ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON []Team

func (*ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) reposGetTeamsWithAccessToProtectedBranchRes() {
}

type ReposGetTopPathsOKApplicationJSON []ContentTraffic

func (*ReposGetTopPathsOKApplicationJSON) reposGetTopPathsRes() {}

type ReposGetTopReferrersOKApplicationJSON []ReferrerTraffic

func (*ReposGetTopReferrersOKApplicationJSON) reposGetTopReferrersRes() {}

type ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON []SimpleUser

func (*ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) reposGetUsersWithAccessToProtectedBranchRes() {
}

type ReposGetViewsPer string

const (
	ReposGetViewsPerEmpty ReposGetViewsPer = ""
	ReposGetViewsPerDay   ReposGetViewsPer = "day"
	ReposGetViewsPerWeek  ReposGetViewsPer = "week"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposGetViewsPer) MarshalText() ([]byte, error) {
	switch s {
	case ReposGetViewsPerEmpty:
		return []byte(s), nil
	case ReposGetViewsPerDay:
		return []byte(s), nil
	case ReposGetViewsPerWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposGetViewsPer) UnmarshalText(data []byte) error {
	switch ReposGetViewsPer(data) {
	case ReposGetViewsPerEmpty:
		*s = ReposGetViewsPerEmpty
		return nil
	case ReposGetViewsPerDay:
		*s = ReposGetViewsPerDay
		return nil
	case ReposGetViewsPerWeek:
		*s = ReposGetViewsPerWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListBranchesForHeadCommitOKApplicationJSON []BranchShort

func (*ReposListBranchesForHeadCommitOKApplicationJSON) reposListBranchesForHeadCommitRes() {}

// ReposListBranchesOKHeaders wraps []ShortBranch with response headers.
type ReposListBranchesOKHeaders struct {
	Link     OptString
	Response []ShortBranch
}

// GetLink returns the value of Link.
func (s *ReposListBranchesOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListBranchesOKHeaders) GetResponse() []ShortBranch {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListBranchesOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListBranchesOKHeaders) SetResponse(val []ShortBranch) {
	s.Response = val
}

func (*ReposListBranchesOKHeaders) reposListBranchesRes() {}

type ReposListCollaboratorsAffiliation string

const (
	ReposListCollaboratorsAffiliationOutside ReposListCollaboratorsAffiliation = "outside"
	ReposListCollaboratorsAffiliationDirect  ReposListCollaboratorsAffiliation = "direct"
	ReposListCollaboratorsAffiliationAll     ReposListCollaboratorsAffiliation = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListCollaboratorsAffiliation) MarshalText() ([]byte, error) {
	switch s {
	case ReposListCollaboratorsAffiliationOutside:
		return []byte(s), nil
	case ReposListCollaboratorsAffiliationDirect:
		return []byte(s), nil
	case ReposListCollaboratorsAffiliationAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListCollaboratorsAffiliation) UnmarshalText(data []byte) error {
	switch ReposListCollaboratorsAffiliation(data) {
	case ReposListCollaboratorsAffiliationOutside:
		*s = ReposListCollaboratorsAffiliationOutside
		return nil
	case ReposListCollaboratorsAffiliationDirect:
		*s = ReposListCollaboratorsAffiliationDirect
		return nil
	case ReposListCollaboratorsAffiliationAll:
		*s = ReposListCollaboratorsAffiliationAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReposListCollaboratorsOKHeaders wraps []Collaborator with response headers.
type ReposListCollaboratorsOKHeaders struct {
	Link     OptString
	Response []Collaborator
}

// GetLink returns the value of Link.
func (s *ReposListCollaboratorsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListCollaboratorsOKHeaders) GetResponse() []Collaborator {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListCollaboratorsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListCollaboratorsOKHeaders) SetResponse(val []Collaborator) {
	s.Response = val
}

func (*ReposListCollaboratorsOKHeaders) reposListCollaboratorsRes() {}

// ReposListCommentsForCommitOKHeaders wraps []CommitComment with response headers.
type ReposListCommentsForCommitOKHeaders struct {
	Link     OptString
	Response []CommitComment
}

// GetLink returns the value of Link.
func (s *ReposListCommentsForCommitOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListCommentsForCommitOKHeaders) GetResponse() []CommitComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListCommentsForCommitOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListCommentsForCommitOKHeaders) SetResponse(val []CommitComment) {
	s.Response = val
}

// ReposListCommitCommentsForRepoOKHeaders wraps []CommitComment with response headers.
type ReposListCommitCommentsForRepoOKHeaders struct {
	Link     OptString
	Response []CommitComment
}

// GetLink returns the value of Link.
func (s *ReposListCommitCommentsForRepoOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListCommitCommentsForRepoOKHeaders) GetResponse() []CommitComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListCommitCommentsForRepoOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListCommitCommentsForRepoOKHeaders) SetResponse(val []CommitComment) {
	s.Response = val
}

// ReposListCommitStatusesForRefOKHeaders wraps []Status with response headers.
type ReposListCommitStatusesForRefOKHeaders struct {
	Link     OptString
	Response []Status
}

// GetLink returns the value of Link.
func (s *ReposListCommitStatusesForRefOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListCommitStatusesForRefOKHeaders) GetResponse() []Status {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListCommitStatusesForRefOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListCommitStatusesForRefOKHeaders) SetResponse(val []Status) {
	s.Response = val
}

func (*ReposListCommitStatusesForRefOKHeaders) reposListCommitStatusesForRefRes() {}

type ReposListCommitsBadRequest BasicError

func (*ReposListCommitsBadRequest) reposListCommitsRes() {}

type ReposListCommitsConflict BasicError

func (*ReposListCommitsConflict) reposListCommitsRes() {}

type ReposListCommitsInternalServerError BasicError

func (*ReposListCommitsInternalServerError) reposListCommitsRes() {}

type ReposListCommitsNotFound BasicError

func (*ReposListCommitsNotFound) reposListCommitsRes() {}

// ReposListCommitsOKHeaders wraps []Commit with response headers.
type ReposListCommitsOKHeaders struct {
	Link     OptString
	Response []Commit
}

// GetLink returns the value of Link.
func (s *ReposListCommitsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListCommitsOKHeaders) GetResponse() []Commit {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListCommitsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListCommitsOKHeaders) SetResponse(val []Commit) {
	s.Response = val
}

func (*ReposListCommitsOKHeaders) reposListCommitsRes() {}

type ReposListContributorsForbidden BasicError

func (*ReposListContributorsForbidden) reposListContributorsRes() {}

// ReposListContributorsNoContent is response for ReposListContributors operation.
type ReposListContributorsNoContent struct{}

func (*ReposListContributorsNoContent) reposListContributorsRes() {}

type ReposListContributorsNotFound BasicError

func (*ReposListContributorsNotFound) reposListContributorsRes() {}

// ReposListContributorsOKHeaders wraps []Contributor with response headers.
type ReposListContributorsOKHeaders struct {
	Link     OptString
	Response []Contributor
}

// GetLink returns the value of Link.
func (s *ReposListContributorsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListContributorsOKHeaders) GetResponse() []Contributor {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListContributorsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListContributorsOKHeaders) SetResponse(val []Contributor) {
	s.Response = val
}

func (*ReposListContributorsOKHeaders) reposListContributorsRes() {}

// ReposListDeployKeysOKHeaders wraps []DeployKey with response headers.
type ReposListDeployKeysOKHeaders struct {
	Link     OptString
	Response []DeployKey
}

// GetLink returns the value of Link.
func (s *ReposListDeployKeysOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListDeployKeysOKHeaders) GetResponse() []DeployKey {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListDeployKeysOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListDeployKeysOKHeaders) SetResponse(val []DeployKey) {
	s.Response = val
}

// ReposListDeploymentStatusesOKHeaders wraps []DeploymentStatus with response headers.
type ReposListDeploymentStatusesOKHeaders struct {
	Link     OptString
	Response []DeploymentStatus
}

// GetLink returns the value of Link.
func (s *ReposListDeploymentStatusesOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListDeploymentStatusesOKHeaders) GetResponse() []DeploymentStatus {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListDeploymentStatusesOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListDeploymentStatusesOKHeaders) SetResponse(val []DeploymentStatus) {
	s.Response = val
}

func (*ReposListDeploymentStatusesOKHeaders) reposListDeploymentStatusesRes() {}

// ReposListDeploymentsOKHeaders wraps []Deployment with response headers.
type ReposListDeploymentsOKHeaders struct {
	Link     OptString
	Response []Deployment
}

// GetLink returns the value of Link.
func (s *ReposListDeploymentsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListDeploymentsOKHeaders) GetResponse() []Deployment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListDeploymentsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListDeploymentsOKHeaders) SetResponse(val []Deployment) {
	s.Response = val
}

type ReposListForAuthenticatedUserDirection string

const (
	ReposListForAuthenticatedUserDirectionAsc  ReposListForAuthenticatedUserDirection = "asc"
	ReposListForAuthenticatedUserDirectionDesc ReposListForAuthenticatedUserDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForAuthenticatedUserDirection) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForAuthenticatedUserDirectionAsc:
		return []byte(s), nil
	case ReposListForAuthenticatedUserDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForAuthenticatedUserDirection) UnmarshalText(data []byte) error {
	switch ReposListForAuthenticatedUserDirection(data) {
	case ReposListForAuthenticatedUserDirectionAsc:
		*s = ReposListForAuthenticatedUserDirectionAsc
		return nil
	case ReposListForAuthenticatedUserDirectionDesc:
		*s = ReposListForAuthenticatedUserDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForAuthenticatedUserForbidden BasicError

func (*ReposListForAuthenticatedUserForbidden) reposListForAuthenticatedUserRes() {}

type ReposListForAuthenticatedUserOKApplicationJSON []Repository

func (*ReposListForAuthenticatedUserOKApplicationJSON) reposListForAuthenticatedUserRes() {}

type ReposListForAuthenticatedUserSort string

const (
	ReposListForAuthenticatedUserSortCreated  ReposListForAuthenticatedUserSort = "created"
	ReposListForAuthenticatedUserSortUpdated  ReposListForAuthenticatedUserSort = "updated"
	ReposListForAuthenticatedUserSortPushed   ReposListForAuthenticatedUserSort = "pushed"
	ReposListForAuthenticatedUserSortFullName ReposListForAuthenticatedUserSort = "full_name"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForAuthenticatedUserSort) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForAuthenticatedUserSortCreated:
		return []byte(s), nil
	case ReposListForAuthenticatedUserSortUpdated:
		return []byte(s), nil
	case ReposListForAuthenticatedUserSortPushed:
		return []byte(s), nil
	case ReposListForAuthenticatedUserSortFullName:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForAuthenticatedUserSort) UnmarshalText(data []byte) error {
	switch ReposListForAuthenticatedUserSort(data) {
	case ReposListForAuthenticatedUserSortCreated:
		*s = ReposListForAuthenticatedUserSortCreated
		return nil
	case ReposListForAuthenticatedUserSortUpdated:
		*s = ReposListForAuthenticatedUserSortUpdated
		return nil
	case ReposListForAuthenticatedUserSortPushed:
		*s = ReposListForAuthenticatedUserSortPushed
		return nil
	case ReposListForAuthenticatedUserSortFullName:
		*s = ReposListForAuthenticatedUserSortFullName
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForAuthenticatedUserType string

const (
	ReposListForAuthenticatedUserTypeAll     ReposListForAuthenticatedUserType = "all"
	ReposListForAuthenticatedUserTypeOwner   ReposListForAuthenticatedUserType = "owner"
	ReposListForAuthenticatedUserTypePublic  ReposListForAuthenticatedUserType = "public"
	ReposListForAuthenticatedUserTypePrivate ReposListForAuthenticatedUserType = "private"
	ReposListForAuthenticatedUserTypeMember  ReposListForAuthenticatedUserType = "member"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForAuthenticatedUserType) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForAuthenticatedUserTypeAll:
		return []byte(s), nil
	case ReposListForAuthenticatedUserTypeOwner:
		return []byte(s), nil
	case ReposListForAuthenticatedUserTypePublic:
		return []byte(s), nil
	case ReposListForAuthenticatedUserTypePrivate:
		return []byte(s), nil
	case ReposListForAuthenticatedUserTypeMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForAuthenticatedUserType) UnmarshalText(data []byte) error {
	switch ReposListForAuthenticatedUserType(data) {
	case ReposListForAuthenticatedUserTypeAll:
		*s = ReposListForAuthenticatedUserTypeAll
		return nil
	case ReposListForAuthenticatedUserTypeOwner:
		*s = ReposListForAuthenticatedUserTypeOwner
		return nil
	case ReposListForAuthenticatedUserTypePublic:
		*s = ReposListForAuthenticatedUserTypePublic
		return nil
	case ReposListForAuthenticatedUserTypePrivate:
		*s = ReposListForAuthenticatedUserTypePrivate
		return nil
	case ReposListForAuthenticatedUserTypeMember:
		*s = ReposListForAuthenticatedUserTypeMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForAuthenticatedUserUnauthorized BasicError

func (*ReposListForAuthenticatedUserUnauthorized) reposListForAuthenticatedUserRes() {}

type ReposListForAuthenticatedUserVisibility string

const (
	ReposListForAuthenticatedUserVisibilityAll     ReposListForAuthenticatedUserVisibility = "all"
	ReposListForAuthenticatedUserVisibilityPublic  ReposListForAuthenticatedUserVisibility = "public"
	ReposListForAuthenticatedUserVisibilityPrivate ReposListForAuthenticatedUserVisibility = "private"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForAuthenticatedUserVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForAuthenticatedUserVisibilityAll:
		return []byte(s), nil
	case ReposListForAuthenticatedUserVisibilityPublic:
		return []byte(s), nil
	case ReposListForAuthenticatedUserVisibilityPrivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForAuthenticatedUserVisibility) UnmarshalText(data []byte) error {
	switch ReposListForAuthenticatedUserVisibility(data) {
	case ReposListForAuthenticatedUserVisibilityAll:
		*s = ReposListForAuthenticatedUserVisibilityAll
		return nil
	case ReposListForAuthenticatedUserVisibilityPublic:
		*s = ReposListForAuthenticatedUserVisibilityPublic
		return nil
	case ReposListForAuthenticatedUserVisibilityPrivate:
		*s = ReposListForAuthenticatedUserVisibilityPrivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForOrgDirection string

const (
	ReposListForOrgDirectionAsc  ReposListForOrgDirection = "asc"
	ReposListForOrgDirectionDesc ReposListForOrgDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForOrgDirection) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForOrgDirectionAsc:
		return []byte(s), nil
	case ReposListForOrgDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForOrgDirection) UnmarshalText(data []byte) error {
	switch ReposListForOrgDirection(data) {
	case ReposListForOrgDirectionAsc:
		*s = ReposListForOrgDirectionAsc
		return nil
	case ReposListForOrgDirectionDesc:
		*s = ReposListForOrgDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReposListForOrgOKHeaders wraps []MinimalRepository with response headers.
type ReposListForOrgOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *ReposListForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListForOrgOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListForOrgOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

type ReposListForOrgSort string

const (
	ReposListForOrgSortCreated  ReposListForOrgSort = "created"
	ReposListForOrgSortUpdated  ReposListForOrgSort = "updated"
	ReposListForOrgSortPushed   ReposListForOrgSort = "pushed"
	ReposListForOrgSortFullName ReposListForOrgSort = "full_name"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForOrgSort) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForOrgSortCreated:
		return []byte(s), nil
	case ReposListForOrgSortUpdated:
		return []byte(s), nil
	case ReposListForOrgSortPushed:
		return []byte(s), nil
	case ReposListForOrgSortFullName:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForOrgSort) UnmarshalText(data []byte) error {
	switch ReposListForOrgSort(data) {
	case ReposListForOrgSortCreated:
		*s = ReposListForOrgSortCreated
		return nil
	case ReposListForOrgSortUpdated:
		*s = ReposListForOrgSortUpdated
		return nil
	case ReposListForOrgSortPushed:
		*s = ReposListForOrgSortPushed
		return nil
	case ReposListForOrgSortFullName:
		*s = ReposListForOrgSortFullName
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForOrgType string

const (
	ReposListForOrgTypeAll      ReposListForOrgType = "all"
	ReposListForOrgTypePublic   ReposListForOrgType = "public"
	ReposListForOrgTypePrivate  ReposListForOrgType = "private"
	ReposListForOrgTypeForks    ReposListForOrgType = "forks"
	ReposListForOrgTypeSources  ReposListForOrgType = "sources"
	ReposListForOrgTypeMember   ReposListForOrgType = "member"
	ReposListForOrgTypeInternal ReposListForOrgType = "internal"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForOrgType) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForOrgTypeAll:
		return []byte(s), nil
	case ReposListForOrgTypePublic:
		return []byte(s), nil
	case ReposListForOrgTypePrivate:
		return []byte(s), nil
	case ReposListForOrgTypeForks:
		return []byte(s), nil
	case ReposListForOrgTypeSources:
		return []byte(s), nil
	case ReposListForOrgTypeMember:
		return []byte(s), nil
	case ReposListForOrgTypeInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForOrgType) UnmarshalText(data []byte) error {
	switch ReposListForOrgType(data) {
	case ReposListForOrgTypeAll:
		*s = ReposListForOrgTypeAll
		return nil
	case ReposListForOrgTypePublic:
		*s = ReposListForOrgTypePublic
		return nil
	case ReposListForOrgTypePrivate:
		*s = ReposListForOrgTypePrivate
		return nil
	case ReposListForOrgTypeForks:
		*s = ReposListForOrgTypeForks
		return nil
	case ReposListForOrgTypeSources:
		*s = ReposListForOrgTypeSources
		return nil
	case ReposListForOrgTypeMember:
		*s = ReposListForOrgTypeMember
		return nil
	case ReposListForOrgTypeInternal:
		*s = ReposListForOrgTypeInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForUserDirection string

const (
	ReposListForUserDirectionAsc  ReposListForUserDirection = "asc"
	ReposListForUserDirectionDesc ReposListForUserDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForUserDirection) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForUserDirectionAsc:
		return []byte(s), nil
	case ReposListForUserDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForUserDirection) UnmarshalText(data []byte) error {
	switch ReposListForUserDirection(data) {
	case ReposListForUserDirectionAsc:
		*s = ReposListForUserDirectionAsc
		return nil
	case ReposListForUserDirectionDesc:
		*s = ReposListForUserDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReposListForUserOKHeaders wraps []MinimalRepository with response headers.
type ReposListForUserOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *ReposListForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListForUserOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListForUserOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

type ReposListForUserSort string

const (
	ReposListForUserSortCreated  ReposListForUserSort = "created"
	ReposListForUserSortUpdated  ReposListForUserSort = "updated"
	ReposListForUserSortPushed   ReposListForUserSort = "pushed"
	ReposListForUserSortFullName ReposListForUserSort = "full_name"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForUserSort) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForUserSortCreated:
		return []byte(s), nil
	case ReposListForUserSortUpdated:
		return []byte(s), nil
	case ReposListForUserSortPushed:
		return []byte(s), nil
	case ReposListForUserSortFullName:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForUserSort) UnmarshalText(data []byte) error {
	switch ReposListForUserSort(data) {
	case ReposListForUserSortCreated:
		*s = ReposListForUserSortCreated
		return nil
	case ReposListForUserSortUpdated:
		*s = ReposListForUserSortUpdated
		return nil
	case ReposListForUserSortPushed:
		*s = ReposListForUserSortPushed
		return nil
	case ReposListForUserSortFullName:
		*s = ReposListForUserSortFullName
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListForUserType string

const (
	ReposListForUserTypeAll    ReposListForUserType = "all"
	ReposListForUserTypeOwner  ReposListForUserType = "owner"
	ReposListForUserTypeMember ReposListForUserType = "member"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForUserType) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForUserTypeAll:
		return []byte(s), nil
	case ReposListForUserTypeOwner:
		return []byte(s), nil
	case ReposListForUserTypeMember:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForUserType) UnmarshalText(data []byte) error {
	switch ReposListForUserType(data) {
	case ReposListForUserTypeAll:
		*s = ReposListForUserTypeAll
		return nil
	case ReposListForUserTypeOwner:
		*s = ReposListForUserTypeOwner
		return nil
	case ReposListForUserTypeMember:
		*s = ReposListForUserTypeMember
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReposListForksOKHeaders wraps []MinimalRepository with response headers.
type ReposListForksOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *ReposListForksOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListForksOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListForksOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListForksOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

func (*ReposListForksOKHeaders) reposListForksRes() {}

type ReposListForksSort string

const (
	ReposListForksSortNewest     ReposListForksSort = "newest"
	ReposListForksSortOldest     ReposListForksSort = "oldest"
	ReposListForksSortStargazers ReposListForksSort = "stargazers"
	ReposListForksSortWatchers   ReposListForksSort = "watchers"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposListForksSort) MarshalText() ([]byte, error) {
	switch s {
	case ReposListForksSortNewest:
		return []byte(s), nil
	case ReposListForksSortOldest:
		return []byte(s), nil
	case ReposListForksSortStargazers:
		return []byte(s), nil
	case ReposListForksSortWatchers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposListForksSort) UnmarshalText(data []byte) error {
	switch ReposListForksSort(data) {
	case ReposListForksSortNewest:
		*s = ReposListForksSortNewest
		return nil
	case ReposListForksSortOldest:
		*s = ReposListForksSortOldest
		return nil
	case ReposListForksSortStargazers:
		*s = ReposListForksSortStargazers
		return nil
	case ReposListForksSortWatchers:
		*s = ReposListForksSortWatchers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposListInvitationsForAuthenticatedUserForbidden BasicError

func (*ReposListInvitationsForAuthenticatedUserForbidden) reposListInvitationsForAuthenticatedUserRes() {
}

type ReposListInvitationsForAuthenticatedUserNotFound BasicError

func (*ReposListInvitationsForAuthenticatedUserNotFound) reposListInvitationsForAuthenticatedUserRes() {
}

// ReposListInvitationsForAuthenticatedUserOKHeaders wraps []RepositoryInvitation with response headers.
type ReposListInvitationsForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []RepositoryInvitation
}

// GetLink returns the value of Link.
func (s *ReposListInvitationsForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListInvitationsForAuthenticatedUserOKHeaders) GetResponse() []RepositoryInvitation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListInvitationsForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListInvitationsForAuthenticatedUserOKHeaders) SetResponse(val []RepositoryInvitation) {
	s.Response = val
}

func (*ReposListInvitationsForAuthenticatedUserOKHeaders) reposListInvitationsForAuthenticatedUserRes() {
}

type ReposListInvitationsForAuthenticatedUserUnauthorized BasicError

func (*ReposListInvitationsForAuthenticatedUserUnauthorized) reposListInvitationsForAuthenticatedUserRes() {
}

// ReposListInvitationsOKHeaders wraps []RepositoryInvitation with response headers.
type ReposListInvitationsOKHeaders struct {
	Link     OptString
	Response []RepositoryInvitation
}

// GetLink returns the value of Link.
func (s *ReposListInvitationsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListInvitationsOKHeaders) GetResponse() []RepositoryInvitation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListInvitationsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListInvitationsOKHeaders) SetResponse(val []RepositoryInvitation) {
	s.Response = val
}

// ReposListPagesBuildsOKHeaders wraps []PageBuild with response headers.
type ReposListPagesBuildsOKHeaders struct {
	Link     OptString
	Response []PageBuild
}

// GetLink returns the value of Link.
func (s *ReposListPagesBuildsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListPagesBuildsOKHeaders) GetResponse() []PageBuild {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListPagesBuildsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListPagesBuildsOKHeaders) SetResponse(val []PageBuild) {
	s.Response = val
}

// ReposListPublicOKHeaders wraps []MinimalRepository with response headers.
type ReposListPublicOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *ReposListPublicOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListPublicOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListPublicOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListPublicOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

func (*ReposListPublicOKHeaders) reposListPublicRes() {}

// ReposListPullRequestsAssociatedWithCommitOKHeaders wraps []PullRequestSimple with response headers.
type ReposListPullRequestsAssociatedWithCommitOKHeaders struct {
	Link     OptString
	Response []PullRequestSimple
}

// GetLink returns the value of Link.
func (s *ReposListPullRequestsAssociatedWithCommitOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListPullRequestsAssociatedWithCommitOKHeaders) GetResponse() []PullRequestSimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListPullRequestsAssociatedWithCommitOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListPullRequestsAssociatedWithCommitOKHeaders) SetResponse(val []PullRequestSimple) {
	s.Response = val
}

// ReposListReleaseAssetsOKHeaders wraps []ReleaseAsset with response headers.
type ReposListReleaseAssetsOKHeaders struct {
	Link     OptString
	Response []ReleaseAsset
}

// GetLink returns the value of Link.
func (s *ReposListReleaseAssetsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListReleaseAssetsOKHeaders) GetResponse() []ReleaseAsset {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListReleaseAssetsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListReleaseAssetsOKHeaders) SetResponse(val []ReleaseAsset) {
	s.Response = val
}

// ReposListReleasesOKHeaders wraps []Release with response headers.
type ReposListReleasesOKHeaders struct {
	Link     OptString
	Response []Release
}

// GetLink returns the value of Link.
func (s *ReposListReleasesOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListReleasesOKHeaders) GetResponse() []Release {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListReleasesOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListReleasesOKHeaders) SetResponse(val []Release) {
	s.Response = val
}

func (*ReposListReleasesOKHeaders) reposListReleasesRes() {}

// ReposListTagsOKHeaders wraps []Tag with response headers.
type ReposListTagsOKHeaders struct {
	Link     OptString
	Response []Tag
}

// GetLink returns the value of Link.
func (s *ReposListTagsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListTagsOKHeaders) GetResponse() []Tag {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListTagsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListTagsOKHeaders) SetResponse(val []Tag) {
	s.Response = val
}

// ReposListTeamsOKHeaders wraps []Team with response headers.
type ReposListTeamsOKHeaders struct {
	Link     OptString
	Response []Team
}

// GetLink returns the value of Link.
func (s *ReposListTeamsOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListTeamsOKHeaders) GetResponse() []Team {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListTeamsOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListTeamsOKHeaders) SetResponse(val []Team) {
	s.Response = val
}

type ReposListWebhookDeliveriesOKApplicationJSON []HookDeliveryItem

func (*ReposListWebhookDeliveriesOKApplicationJSON) reposListWebhookDeliveriesRes() {}

// ReposListWebhooksOKHeaders wraps []Hook with response headers.
type ReposListWebhooksOKHeaders struct {
	Link     OptString
	Response []Hook
}

// GetLink returns the value of Link.
func (s *ReposListWebhooksOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *ReposListWebhooksOKHeaders) GetResponse() []Hook {
	return s.Response
}

// SetLink sets the value of Link.
func (s *ReposListWebhooksOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *ReposListWebhooksOKHeaders) SetResponse(val []Hook) {
	s.Response = val
}

func (*ReposListWebhooksOKHeaders) reposListWebhooksRes() {}

// ReposMergeConflict is response for ReposMerge operation.
type ReposMergeConflict struct{}

func (*ReposMergeConflict) reposMergeRes() {}

// ReposMergeNoContent is response for ReposMerge operation.
type ReposMergeNoContent struct{}

func (*ReposMergeNoContent) reposMergeRes() {}

// ReposMergeNotFound is response for ReposMerge operation.
type ReposMergeNotFound struct{}

func (*ReposMergeNotFound) reposMergeRes() {}

type ReposMergeReq struct {
	// The name of the base branch that the head will be merged into.
	Base string `json:"base"`
	// The head to merge. This can be a branch name or a commit SHA1.
	Head string `json:"head"`
	// Commit message to use for the merge commit. If omitted, a default message will be used.
	CommitMessage OptString `json:"commit_message"`
}

// GetBase returns the value of Base.
func (s *ReposMergeReq) GetBase() string {
	return s.Base
}

// GetHead returns the value of Head.
func (s *ReposMergeReq) GetHead() string {
	return s.Head
}

// GetCommitMessage returns the value of CommitMessage.
func (s *ReposMergeReq) GetCommitMessage() OptString {
	return s.CommitMessage
}

// SetBase sets the value of Base.
func (s *ReposMergeReq) SetBase(val string) {
	s.Base = val
}

// SetHead sets the value of Head.
func (s *ReposMergeReq) SetHead(val string) {
	s.Head = val
}

// SetCommitMessage sets the value of CommitMessage.
func (s *ReposMergeReq) SetCommitMessage(val OptString) {
	s.CommitMessage = val
}

// ReposMergeUpstreamConflict is response for ReposMergeUpstream operation.
type ReposMergeUpstreamConflict struct{}

func (*ReposMergeUpstreamConflict) reposMergeUpstreamRes() {}

type ReposMergeUpstreamReq struct {
	// The name of the branch which should be updated to match upstream.
	Branch string `json:"branch"`
}

// GetBranch returns the value of Branch.
func (s *ReposMergeUpstreamReq) GetBranch() string {
	return s.Branch
}

// SetBranch sets the value of Branch.
func (s *ReposMergeUpstreamReq) SetBranch(val string) {
	s.Branch = val
}

// ReposMergeUpstreamUnprocessableEntity is response for ReposMergeUpstream operation.
type ReposMergeUpstreamUnprocessableEntity struct{}

func (*ReposMergeUpstreamUnprocessableEntity) reposMergeUpstreamRes() {}

// ReposPingWebhookNoContent is response for ReposPingWebhook operation.
type ReposPingWebhookNoContent struct{}

func (*ReposPingWebhookNoContent) reposPingWebhookRes() {}

type ReposRemoveAppAccessRestrictionsOKApplicationJSON []Integration

func (*ReposRemoveAppAccessRestrictionsOKApplicationJSON) reposRemoveAppAccessRestrictionsRes() {}

// ReposRemoveAppAccessRestrictionsReq represents sum type.
type ReposRemoveAppAccessRestrictionsReq struct {
	Type                                 ReposRemoveAppAccessRestrictionsReqType // switch on this field
	ReposRemoveAppAccessRestrictionsReq0 ReposRemoveAppAccessRestrictionsReq0
	StringArray                          []string
}

// ReposRemoveAppAccessRestrictionsReqType is oneOf type of ReposRemoveAppAccessRestrictionsReq.
type ReposRemoveAppAccessRestrictionsReqType string

// Possible values for ReposRemoveAppAccessRestrictionsReqType.
const (
	ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq ReposRemoveAppAccessRestrictionsReqType = "ReposRemoveAppAccessRestrictionsReq0"
	StringArrayReposRemoveAppAccessRestrictionsReq                          ReposRemoveAppAccessRestrictionsReqType = "[]string"
)

// IsReposRemoveAppAccessRestrictionsReq0 reports whether ReposRemoveAppAccessRestrictionsReq is ReposRemoveAppAccessRestrictionsReq0.
func (s ReposRemoveAppAccessRestrictionsReq) IsReposRemoveAppAccessRestrictionsReq0() bool {
	return s.Type == ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq
}

// IsStringArray reports whether ReposRemoveAppAccessRestrictionsReq is []string.
func (s ReposRemoveAppAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveAppAccessRestrictionsReq
}

// SetReposRemoveAppAccessRestrictionsReq0 sets ReposRemoveAppAccessRestrictionsReq to ReposRemoveAppAccessRestrictionsReq0.
func (s *ReposRemoveAppAccessRestrictionsReq) SetReposRemoveAppAccessRestrictionsReq0(v ReposRemoveAppAccessRestrictionsReq0) {
	s.Type = ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq
	s.ReposRemoveAppAccessRestrictionsReq0 = v
}

// GetReposRemoveAppAccessRestrictionsReq0 returns ReposRemoveAppAccessRestrictionsReq0 and true boolean if ReposRemoveAppAccessRestrictionsReq is ReposRemoveAppAccessRestrictionsReq0.
func (s ReposRemoveAppAccessRestrictionsReq) GetReposRemoveAppAccessRestrictionsReq0() (v ReposRemoveAppAccessRestrictionsReq0, ok bool) {
	if !s.IsReposRemoveAppAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposRemoveAppAccessRestrictionsReq0, true
}

// NewReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq returns new ReposRemoveAppAccessRestrictionsReq from ReposRemoveAppAccessRestrictionsReq0.
func NewReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq(v ReposRemoveAppAccessRestrictionsReq0) ReposRemoveAppAccessRestrictionsReq {
	var s ReposRemoveAppAccessRestrictionsReq
	s.SetReposRemoveAppAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveAppAccessRestrictionsReq to []string.
func (s *ReposRemoveAppAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveAppAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveAppAccessRestrictionsReq is []string.
func (s ReposRemoveAppAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveAppAccessRestrictionsReq returns new ReposRemoveAppAccessRestrictionsReq from []string.
func NewStringArrayReposRemoveAppAccessRestrictionsReq(v []string) ReposRemoveAppAccessRestrictionsReq {
	var s ReposRemoveAppAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveAppAccessRestrictionsReq0 struct {
	// Apps parameter.
	Apps []string `json:"apps"`
}

// GetApps returns the value of Apps.
func (s *ReposRemoveAppAccessRestrictionsReq0) GetApps() []string {
	return s.Apps
}

// SetApps sets the value of Apps.
func (s *ReposRemoveAppAccessRestrictionsReq0) SetApps(val []string) {
	s.Apps = val
}

// ReposRemoveCollaboratorNoContent is response for ReposRemoveCollaborator operation.
type ReposRemoveCollaboratorNoContent struct{}

type ReposRemoveStatusCheckContextsOKApplicationJSON []string

func (*ReposRemoveStatusCheckContextsOKApplicationJSON) reposRemoveStatusCheckContextsRes() {}

// ReposRemoveStatusCheckContextsReq represents sum type.
type ReposRemoveStatusCheckContextsReq struct {
	Type                               ReposRemoveStatusCheckContextsReqType // switch on this field
	ReposRemoveStatusCheckContextsReq0 ReposRemoveStatusCheckContextsReq0
	StringArray                        []string
}

// ReposRemoveStatusCheckContextsReqType is oneOf type of ReposRemoveStatusCheckContextsReq.
type ReposRemoveStatusCheckContextsReqType string

// Possible values for ReposRemoveStatusCheckContextsReqType.
const (
	ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq ReposRemoveStatusCheckContextsReqType = "ReposRemoveStatusCheckContextsReq0"
	StringArrayReposRemoveStatusCheckContextsReq                        ReposRemoveStatusCheckContextsReqType = "[]string"
)

// IsReposRemoveStatusCheckContextsReq0 reports whether ReposRemoveStatusCheckContextsReq is ReposRemoveStatusCheckContextsReq0.
func (s ReposRemoveStatusCheckContextsReq) IsReposRemoveStatusCheckContextsReq0() bool {
	return s.Type == ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq
}

// IsStringArray reports whether ReposRemoveStatusCheckContextsReq is []string.
func (s ReposRemoveStatusCheckContextsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveStatusCheckContextsReq
}

// SetReposRemoveStatusCheckContextsReq0 sets ReposRemoveStatusCheckContextsReq to ReposRemoveStatusCheckContextsReq0.
func (s *ReposRemoveStatusCheckContextsReq) SetReposRemoveStatusCheckContextsReq0(v ReposRemoveStatusCheckContextsReq0) {
	s.Type = ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq
	s.ReposRemoveStatusCheckContextsReq0 = v
}

// GetReposRemoveStatusCheckContextsReq0 returns ReposRemoveStatusCheckContextsReq0 and true boolean if ReposRemoveStatusCheckContextsReq is ReposRemoveStatusCheckContextsReq0.
func (s ReposRemoveStatusCheckContextsReq) GetReposRemoveStatusCheckContextsReq0() (v ReposRemoveStatusCheckContextsReq0, ok bool) {
	if !s.IsReposRemoveStatusCheckContextsReq0() {
		return v, false
	}
	return s.ReposRemoveStatusCheckContextsReq0, true
}

// NewReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq returns new ReposRemoveStatusCheckContextsReq from ReposRemoveStatusCheckContextsReq0.
func NewReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq(v ReposRemoveStatusCheckContextsReq0) ReposRemoveStatusCheckContextsReq {
	var s ReposRemoveStatusCheckContextsReq
	s.SetReposRemoveStatusCheckContextsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveStatusCheckContextsReq to []string.
func (s *ReposRemoveStatusCheckContextsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveStatusCheckContextsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveStatusCheckContextsReq is []string.
func (s ReposRemoveStatusCheckContextsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveStatusCheckContextsReq returns new ReposRemoveStatusCheckContextsReq from []string.
func NewStringArrayReposRemoveStatusCheckContextsReq(v []string) ReposRemoveStatusCheckContextsReq {
	var s ReposRemoveStatusCheckContextsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveStatusCheckContextsReq0 struct {
	// Contexts parameter.
	Contexts []string `json:"contexts"`
}

// GetContexts returns the value of Contexts.
func (s *ReposRemoveStatusCheckContextsReq0) GetContexts() []string {
	return s.Contexts
}

// SetContexts sets the value of Contexts.
func (s *ReposRemoveStatusCheckContextsReq0) SetContexts(val []string) {
	s.Contexts = val
}

// ReposRemoveStatusCheckProtectionNoContent is response for ReposRemoveStatusCheckProtection operation.
type ReposRemoveStatusCheckProtectionNoContent struct{}

type ReposRemoveTeamAccessRestrictionsOKApplicationJSON []Team

func (*ReposRemoveTeamAccessRestrictionsOKApplicationJSON) reposRemoveTeamAccessRestrictionsRes() {}

// ReposRemoveTeamAccessRestrictionsReq represents sum type.
type ReposRemoveTeamAccessRestrictionsReq struct {
	Type                                  ReposRemoveTeamAccessRestrictionsReqType // switch on this field
	ReposRemoveTeamAccessRestrictionsReq0 ReposRemoveTeamAccessRestrictionsReq0
	StringArray                           []string
}

// ReposRemoveTeamAccessRestrictionsReqType is oneOf type of ReposRemoveTeamAccessRestrictionsReq.
type ReposRemoveTeamAccessRestrictionsReqType string

// Possible values for ReposRemoveTeamAccessRestrictionsReqType.
const (
	ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq ReposRemoveTeamAccessRestrictionsReqType = "ReposRemoveTeamAccessRestrictionsReq0"
	StringArrayReposRemoveTeamAccessRestrictionsReq                           ReposRemoveTeamAccessRestrictionsReqType = "[]string"
)

// IsReposRemoveTeamAccessRestrictionsReq0 reports whether ReposRemoveTeamAccessRestrictionsReq is ReposRemoveTeamAccessRestrictionsReq0.
func (s ReposRemoveTeamAccessRestrictionsReq) IsReposRemoveTeamAccessRestrictionsReq0() bool {
	return s.Type == ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq
}

// IsStringArray reports whether ReposRemoveTeamAccessRestrictionsReq is []string.
func (s ReposRemoveTeamAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveTeamAccessRestrictionsReq
}

// SetReposRemoveTeamAccessRestrictionsReq0 sets ReposRemoveTeamAccessRestrictionsReq to ReposRemoveTeamAccessRestrictionsReq0.
func (s *ReposRemoveTeamAccessRestrictionsReq) SetReposRemoveTeamAccessRestrictionsReq0(v ReposRemoveTeamAccessRestrictionsReq0) {
	s.Type = ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq
	s.ReposRemoveTeamAccessRestrictionsReq0 = v
}

// GetReposRemoveTeamAccessRestrictionsReq0 returns ReposRemoveTeamAccessRestrictionsReq0 and true boolean if ReposRemoveTeamAccessRestrictionsReq is ReposRemoveTeamAccessRestrictionsReq0.
func (s ReposRemoveTeamAccessRestrictionsReq) GetReposRemoveTeamAccessRestrictionsReq0() (v ReposRemoveTeamAccessRestrictionsReq0, ok bool) {
	if !s.IsReposRemoveTeamAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposRemoveTeamAccessRestrictionsReq0, true
}

// NewReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq returns new ReposRemoveTeamAccessRestrictionsReq from ReposRemoveTeamAccessRestrictionsReq0.
func NewReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq(v ReposRemoveTeamAccessRestrictionsReq0) ReposRemoveTeamAccessRestrictionsReq {
	var s ReposRemoveTeamAccessRestrictionsReq
	s.SetReposRemoveTeamAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveTeamAccessRestrictionsReq to []string.
func (s *ReposRemoveTeamAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveTeamAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveTeamAccessRestrictionsReq is []string.
func (s ReposRemoveTeamAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveTeamAccessRestrictionsReq returns new ReposRemoveTeamAccessRestrictionsReq from []string.
func NewStringArrayReposRemoveTeamAccessRestrictionsReq(v []string) ReposRemoveTeamAccessRestrictionsReq {
	var s ReposRemoveTeamAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveTeamAccessRestrictionsReq0 struct {
	// Teams parameter.
	Teams []string `json:"teams"`
}

// GetTeams returns the value of Teams.
func (s *ReposRemoveTeamAccessRestrictionsReq0) GetTeams() []string {
	return s.Teams
}

// SetTeams sets the value of Teams.
func (s *ReposRemoveTeamAccessRestrictionsReq0) SetTeams(val []string) {
	s.Teams = val
}

type ReposRemoveUserAccessRestrictionsOKApplicationJSON []SimpleUser

func (*ReposRemoveUserAccessRestrictionsOKApplicationJSON) reposRemoveUserAccessRestrictionsRes() {}

// ReposRemoveUserAccessRestrictionsReq represents sum type.
type ReposRemoveUserAccessRestrictionsReq struct {
	Type                                  ReposRemoveUserAccessRestrictionsReqType // switch on this field
	ReposRemoveUserAccessRestrictionsReq0 ReposRemoveUserAccessRestrictionsReq0
	StringArray                           []string
}

// ReposRemoveUserAccessRestrictionsReqType is oneOf type of ReposRemoveUserAccessRestrictionsReq.
type ReposRemoveUserAccessRestrictionsReqType string

// Possible values for ReposRemoveUserAccessRestrictionsReqType.
const (
	ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq ReposRemoveUserAccessRestrictionsReqType = "ReposRemoveUserAccessRestrictionsReq0"
	StringArrayReposRemoveUserAccessRestrictionsReq                           ReposRemoveUserAccessRestrictionsReqType = "[]string"
)

// IsReposRemoveUserAccessRestrictionsReq0 reports whether ReposRemoveUserAccessRestrictionsReq is ReposRemoveUserAccessRestrictionsReq0.
func (s ReposRemoveUserAccessRestrictionsReq) IsReposRemoveUserAccessRestrictionsReq0() bool {
	return s.Type == ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq
}

// IsStringArray reports whether ReposRemoveUserAccessRestrictionsReq is []string.
func (s ReposRemoveUserAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposRemoveUserAccessRestrictionsReq
}

// SetReposRemoveUserAccessRestrictionsReq0 sets ReposRemoveUserAccessRestrictionsReq to ReposRemoveUserAccessRestrictionsReq0.
func (s *ReposRemoveUserAccessRestrictionsReq) SetReposRemoveUserAccessRestrictionsReq0(v ReposRemoveUserAccessRestrictionsReq0) {
	s.Type = ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq
	s.ReposRemoveUserAccessRestrictionsReq0 = v
}

// GetReposRemoveUserAccessRestrictionsReq0 returns ReposRemoveUserAccessRestrictionsReq0 and true boolean if ReposRemoveUserAccessRestrictionsReq is ReposRemoveUserAccessRestrictionsReq0.
func (s ReposRemoveUserAccessRestrictionsReq) GetReposRemoveUserAccessRestrictionsReq0() (v ReposRemoveUserAccessRestrictionsReq0, ok bool) {
	if !s.IsReposRemoveUserAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposRemoveUserAccessRestrictionsReq0, true
}

// NewReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq returns new ReposRemoveUserAccessRestrictionsReq from ReposRemoveUserAccessRestrictionsReq0.
func NewReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq(v ReposRemoveUserAccessRestrictionsReq0) ReposRemoveUserAccessRestrictionsReq {
	var s ReposRemoveUserAccessRestrictionsReq
	s.SetReposRemoveUserAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposRemoveUserAccessRestrictionsReq to []string.
func (s *ReposRemoveUserAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposRemoveUserAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposRemoveUserAccessRestrictionsReq is []string.
func (s ReposRemoveUserAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposRemoveUserAccessRestrictionsReq returns new ReposRemoveUserAccessRestrictionsReq from []string.
func NewStringArrayReposRemoveUserAccessRestrictionsReq(v []string) ReposRemoveUserAccessRestrictionsReq {
	var s ReposRemoveUserAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposRemoveUserAccessRestrictionsReq0 struct {
	// Users parameter.
	Users []string `json:"users"`
}

// GetUsers returns the value of Users.
func (s *ReposRemoveUserAccessRestrictionsReq0) GetUsers() []string {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *ReposRemoveUserAccessRestrictionsReq0) SetUsers(val []string) {
	s.Users = val
}

type ReposRenameBranchForbidden BasicError

func (*ReposRenameBranchForbidden) reposRenameBranchRes() {}

type ReposRenameBranchNotFound BasicError

func (*ReposRenameBranchNotFound) reposRenameBranchRes() {}

type ReposRenameBranchReq struct {
	// The new name of the branch.
	NewName string `json:"new_name"`
}

// GetNewName returns the value of NewName.
func (s *ReposRenameBranchReq) GetNewName() string {
	return s.NewName
}

// SetNewName sets the value of NewName.
func (s *ReposRenameBranchReq) SetNewName(val string) {
	s.NewName = val
}

type ReposReplaceAllTopicsReq struct {
	// An array of topics to add to the repository. Pass one or more topics to _replace_ the set of
	// existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:**
	// Topic `names` cannot contain uppercase letters.
	Names []string `json:"names"`
}

// GetNames returns the value of Names.
func (s *ReposReplaceAllTopicsReq) GetNames() []string {
	return s.Names
}

// SetNames sets the value of Names.
func (s *ReposReplaceAllTopicsReq) SetNames(val []string) {
	s.Names = val
}

type ReposSetAppAccessRestrictionsOKApplicationJSON []Integration

func (*ReposSetAppAccessRestrictionsOKApplicationJSON) reposSetAppAccessRestrictionsRes() {}

// ReposSetAppAccessRestrictionsReq represents sum type.
type ReposSetAppAccessRestrictionsReq struct {
	Type                              ReposSetAppAccessRestrictionsReqType // switch on this field
	ReposSetAppAccessRestrictionsReq0 ReposSetAppAccessRestrictionsReq0
	StringArray                       []string
}

// ReposSetAppAccessRestrictionsReqType is oneOf type of ReposSetAppAccessRestrictionsReq.
type ReposSetAppAccessRestrictionsReqType string

// Possible values for ReposSetAppAccessRestrictionsReqType.
const (
	ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq ReposSetAppAccessRestrictionsReqType = "ReposSetAppAccessRestrictionsReq0"
	StringArrayReposSetAppAccessRestrictionsReq                       ReposSetAppAccessRestrictionsReqType = "[]string"
)

// IsReposSetAppAccessRestrictionsReq0 reports whether ReposSetAppAccessRestrictionsReq is ReposSetAppAccessRestrictionsReq0.
func (s ReposSetAppAccessRestrictionsReq) IsReposSetAppAccessRestrictionsReq0() bool {
	return s.Type == ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq
}

// IsStringArray reports whether ReposSetAppAccessRestrictionsReq is []string.
func (s ReposSetAppAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetAppAccessRestrictionsReq
}

// SetReposSetAppAccessRestrictionsReq0 sets ReposSetAppAccessRestrictionsReq to ReposSetAppAccessRestrictionsReq0.
func (s *ReposSetAppAccessRestrictionsReq) SetReposSetAppAccessRestrictionsReq0(v ReposSetAppAccessRestrictionsReq0) {
	s.Type = ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq
	s.ReposSetAppAccessRestrictionsReq0 = v
}

// GetReposSetAppAccessRestrictionsReq0 returns ReposSetAppAccessRestrictionsReq0 and true boolean if ReposSetAppAccessRestrictionsReq is ReposSetAppAccessRestrictionsReq0.
func (s ReposSetAppAccessRestrictionsReq) GetReposSetAppAccessRestrictionsReq0() (v ReposSetAppAccessRestrictionsReq0, ok bool) {
	if !s.IsReposSetAppAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposSetAppAccessRestrictionsReq0, true
}

// NewReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq returns new ReposSetAppAccessRestrictionsReq from ReposSetAppAccessRestrictionsReq0.
func NewReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq(v ReposSetAppAccessRestrictionsReq0) ReposSetAppAccessRestrictionsReq {
	var s ReposSetAppAccessRestrictionsReq
	s.SetReposSetAppAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposSetAppAccessRestrictionsReq to []string.
func (s *ReposSetAppAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetAppAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetAppAccessRestrictionsReq is []string.
func (s ReposSetAppAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetAppAccessRestrictionsReq returns new ReposSetAppAccessRestrictionsReq from []string.
func NewStringArrayReposSetAppAccessRestrictionsReq(v []string) ReposSetAppAccessRestrictionsReq {
	var s ReposSetAppAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposSetAppAccessRestrictionsReq0 struct {
	// Apps parameter.
	Apps []string `json:"apps"`
}

// GetApps returns the value of Apps.
func (s *ReposSetAppAccessRestrictionsReq0) GetApps() []string {
	return s.Apps
}

// SetApps sets the value of Apps.
func (s *ReposSetAppAccessRestrictionsReq0) SetApps(val []string) {
	s.Apps = val
}

type ReposSetStatusCheckContextsOKApplicationJSON []string

func (*ReposSetStatusCheckContextsOKApplicationJSON) reposSetStatusCheckContextsRes() {}

// ReposSetStatusCheckContextsReq represents sum type.
type ReposSetStatusCheckContextsReq struct {
	Type                            ReposSetStatusCheckContextsReqType // switch on this field
	ReposSetStatusCheckContextsReq0 ReposSetStatusCheckContextsReq0
	StringArray                     []string
}

// ReposSetStatusCheckContextsReqType is oneOf type of ReposSetStatusCheckContextsReq.
type ReposSetStatusCheckContextsReqType string

// Possible values for ReposSetStatusCheckContextsReqType.
const (
	ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq ReposSetStatusCheckContextsReqType = "ReposSetStatusCheckContextsReq0"
	StringArrayReposSetStatusCheckContextsReq                     ReposSetStatusCheckContextsReqType = "[]string"
)

// IsReposSetStatusCheckContextsReq0 reports whether ReposSetStatusCheckContextsReq is ReposSetStatusCheckContextsReq0.
func (s ReposSetStatusCheckContextsReq) IsReposSetStatusCheckContextsReq0() bool {
	return s.Type == ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq
}

// IsStringArray reports whether ReposSetStatusCheckContextsReq is []string.
func (s ReposSetStatusCheckContextsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetStatusCheckContextsReq
}

// SetReposSetStatusCheckContextsReq0 sets ReposSetStatusCheckContextsReq to ReposSetStatusCheckContextsReq0.
func (s *ReposSetStatusCheckContextsReq) SetReposSetStatusCheckContextsReq0(v ReposSetStatusCheckContextsReq0) {
	s.Type = ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq
	s.ReposSetStatusCheckContextsReq0 = v
}

// GetReposSetStatusCheckContextsReq0 returns ReposSetStatusCheckContextsReq0 and true boolean if ReposSetStatusCheckContextsReq is ReposSetStatusCheckContextsReq0.
func (s ReposSetStatusCheckContextsReq) GetReposSetStatusCheckContextsReq0() (v ReposSetStatusCheckContextsReq0, ok bool) {
	if !s.IsReposSetStatusCheckContextsReq0() {
		return v, false
	}
	return s.ReposSetStatusCheckContextsReq0, true
}

// NewReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq returns new ReposSetStatusCheckContextsReq from ReposSetStatusCheckContextsReq0.
func NewReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq(v ReposSetStatusCheckContextsReq0) ReposSetStatusCheckContextsReq {
	var s ReposSetStatusCheckContextsReq
	s.SetReposSetStatusCheckContextsReq0(v)
	return s
}

// SetStringArray sets ReposSetStatusCheckContextsReq to []string.
func (s *ReposSetStatusCheckContextsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetStatusCheckContextsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetStatusCheckContextsReq is []string.
func (s ReposSetStatusCheckContextsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetStatusCheckContextsReq returns new ReposSetStatusCheckContextsReq from []string.
func NewStringArrayReposSetStatusCheckContextsReq(v []string) ReposSetStatusCheckContextsReq {
	var s ReposSetStatusCheckContextsReq
	s.SetStringArray(v)
	return s
}

type ReposSetStatusCheckContextsReq0 struct {
	// Contexts parameter.
	Contexts []string `json:"contexts"`
}

// GetContexts returns the value of Contexts.
func (s *ReposSetStatusCheckContextsReq0) GetContexts() []string {
	return s.Contexts
}

// SetContexts sets the value of Contexts.
func (s *ReposSetStatusCheckContextsReq0) SetContexts(val []string) {
	s.Contexts = val
}

type ReposSetTeamAccessRestrictionsOKApplicationJSON []Team

func (*ReposSetTeamAccessRestrictionsOKApplicationJSON) reposSetTeamAccessRestrictionsRes() {}

// ReposSetTeamAccessRestrictionsReq represents sum type.
type ReposSetTeamAccessRestrictionsReq struct {
	Type                               ReposSetTeamAccessRestrictionsReqType // switch on this field
	ReposSetTeamAccessRestrictionsReq0 ReposSetTeamAccessRestrictionsReq0
	StringArray                        []string
}

// ReposSetTeamAccessRestrictionsReqType is oneOf type of ReposSetTeamAccessRestrictionsReq.
type ReposSetTeamAccessRestrictionsReqType string

// Possible values for ReposSetTeamAccessRestrictionsReqType.
const (
	ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq ReposSetTeamAccessRestrictionsReqType = "ReposSetTeamAccessRestrictionsReq0"
	StringArrayReposSetTeamAccessRestrictionsReq                        ReposSetTeamAccessRestrictionsReqType = "[]string"
)

// IsReposSetTeamAccessRestrictionsReq0 reports whether ReposSetTeamAccessRestrictionsReq is ReposSetTeamAccessRestrictionsReq0.
func (s ReposSetTeamAccessRestrictionsReq) IsReposSetTeamAccessRestrictionsReq0() bool {
	return s.Type == ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq
}

// IsStringArray reports whether ReposSetTeamAccessRestrictionsReq is []string.
func (s ReposSetTeamAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetTeamAccessRestrictionsReq
}

// SetReposSetTeamAccessRestrictionsReq0 sets ReposSetTeamAccessRestrictionsReq to ReposSetTeamAccessRestrictionsReq0.
func (s *ReposSetTeamAccessRestrictionsReq) SetReposSetTeamAccessRestrictionsReq0(v ReposSetTeamAccessRestrictionsReq0) {
	s.Type = ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq
	s.ReposSetTeamAccessRestrictionsReq0 = v
}

// GetReposSetTeamAccessRestrictionsReq0 returns ReposSetTeamAccessRestrictionsReq0 and true boolean if ReposSetTeamAccessRestrictionsReq is ReposSetTeamAccessRestrictionsReq0.
func (s ReposSetTeamAccessRestrictionsReq) GetReposSetTeamAccessRestrictionsReq0() (v ReposSetTeamAccessRestrictionsReq0, ok bool) {
	if !s.IsReposSetTeamAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposSetTeamAccessRestrictionsReq0, true
}

// NewReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq returns new ReposSetTeamAccessRestrictionsReq from ReposSetTeamAccessRestrictionsReq0.
func NewReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq(v ReposSetTeamAccessRestrictionsReq0) ReposSetTeamAccessRestrictionsReq {
	var s ReposSetTeamAccessRestrictionsReq
	s.SetReposSetTeamAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposSetTeamAccessRestrictionsReq to []string.
func (s *ReposSetTeamAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetTeamAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetTeamAccessRestrictionsReq is []string.
func (s ReposSetTeamAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetTeamAccessRestrictionsReq returns new ReposSetTeamAccessRestrictionsReq from []string.
func NewStringArrayReposSetTeamAccessRestrictionsReq(v []string) ReposSetTeamAccessRestrictionsReq {
	var s ReposSetTeamAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposSetTeamAccessRestrictionsReq0 struct {
	// Teams parameter.
	Teams []string `json:"teams"`
}

// GetTeams returns the value of Teams.
func (s *ReposSetTeamAccessRestrictionsReq0) GetTeams() []string {
	return s.Teams
}

// SetTeams sets the value of Teams.
func (s *ReposSetTeamAccessRestrictionsReq0) SetTeams(val []string) {
	s.Teams = val
}

type ReposSetUserAccessRestrictionsOKApplicationJSON []SimpleUser

func (*ReposSetUserAccessRestrictionsOKApplicationJSON) reposSetUserAccessRestrictionsRes() {}

// ReposSetUserAccessRestrictionsReq represents sum type.
type ReposSetUserAccessRestrictionsReq struct {
	Type                               ReposSetUserAccessRestrictionsReqType // switch on this field
	ReposSetUserAccessRestrictionsReq0 ReposSetUserAccessRestrictionsReq0
	StringArray                        []string
}

// ReposSetUserAccessRestrictionsReqType is oneOf type of ReposSetUserAccessRestrictionsReq.
type ReposSetUserAccessRestrictionsReqType string

// Possible values for ReposSetUserAccessRestrictionsReqType.
const (
	ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq ReposSetUserAccessRestrictionsReqType = "ReposSetUserAccessRestrictionsReq0"
	StringArrayReposSetUserAccessRestrictionsReq                        ReposSetUserAccessRestrictionsReqType = "[]string"
)

// IsReposSetUserAccessRestrictionsReq0 reports whether ReposSetUserAccessRestrictionsReq is ReposSetUserAccessRestrictionsReq0.
func (s ReposSetUserAccessRestrictionsReq) IsReposSetUserAccessRestrictionsReq0() bool {
	return s.Type == ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq
}

// IsStringArray reports whether ReposSetUserAccessRestrictionsReq is []string.
func (s ReposSetUserAccessRestrictionsReq) IsStringArray() bool {
	return s.Type == StringArrayReposSetUserAccessRestrictionsReq
}

// SetReposSetUserAccessRestrictionsReq0 sets ReposSetUserAccessRestrictionsReq to ReposSetUserAccessRestrictionsReq0.
func (s *ReposSetUserAccessRestrictionsReq) SetReposSetUserAccessRestrictionsReq0(v ReposSetUserAccessRestrictionsReq0) {
	s.Type = ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq
	s.ReposSetUserAccessRestrictionsReq0 = v
}

// GetReposSetUserAccessRestrictionsReq0 returns ReposSetUserAccessRestrictionsReq0 and true boolean if ReposSetUserAccessRestrictionsReq is ReposSetUserAccessRestrictionsReq0.
func (s ReposSetUserAccessRestrictionsReq) GetReposSetUserAccessRestrictionsReq0() (v ReposSetUserAccessRestrictionsReq0, ok bool) {
	if !s.IsReposSetUserAccessRestrictionsReq0() {
		return v, false
	}
	return s.ReposSetUserAccessRestrictionsReq0, true
}

// NewReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq returns new ReposSetUserAccessRestrictionsReq from ReposSetUserAccessRestrictionsReq0.
func NewReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq(v ReposSetUserAccessRestrictionsReq0) ReposSetUserAccessRestrictionsReq {
	var s ReposSetUserAccessRestrictionsReq
	s.SetReposSetUserAccessRestrictionsReq0(v)
	return s
}

// SetStringArray sets ReposSetUserAccessRestrictionsReq to []string.
func (s *ReposSetUserAccessRestrictionsReq) SetStringArray(v []string) {
	s.Type = StringArrayReposSetUserAccessRestrictionsReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ReposSetUserAccessRestrictionsReq is []string.
func (s ReposSetUserAccessRestrictionsReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayReposSetUserAccessRestrictionsReq returns new ReposSetUserAccessRestrictionsReq from []string.
func NewStringArrayReposSetUserAccessRestrictionsReq(v []string) ReposSetUserAccessRestrictionsReq {
	var s ReposSetUserAccessRestrictionsReq
	s.SetStringArray(v)
	return s
}

type ReposSetUserAccessRestrictionsReq0 struct {
	// Users parameter.
	Users []string `json:"users"`
}

// GetUsers returns the value of Users.
func (s *ReposSetUserAccessRestrictionsReq0) GetUsers() []string {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *ReposSetUserAccessRestrictionsReq0) SetUsers(val []string) {
	s.Users = val
}

// ReposTestPushWebhookNoContent is response for ReposTestPushWebhook operation.
type ReposTestPushWebhookNoContent struct{}

func (*ReposTestPushWebhookNoContent) reposTestPushWebhookRes() {}

type ReposTransferReq struct {
	// The username or organization name the repository will be transferred to.
	NewOwner string `json:"new_owner"`
	// ID of the team or teams to add to the repository. Teams can only be added to organization-owned
	// repositories.
	TeamIds []int `json:"team_ids"`
}

// GetNewOwner returns the value of NewOwner.
func (s *ReposTransferReq) GetNewOwner() string {
	return s.NewOwner
}

// GetTeamIds returns the value of TeamIds.
func (s *ReposTransferReq) GetTeamIds() []int {
	return s.TeamIds
}

// SetNewOwner sets the value of NewOwner.
func (s *ReposTransferReq) SetNewOwner(val string) {
	s.NewOwner = val
}

// SetTeamIds sets the value of TeamIds.
func (s *ReposTransferReq) SetTeamIds(val []int) {
	s.TeamIds = val
}

type ReposUpdateBranchProtectionForbidden BasicError

func (*ReposUpdateBranchProtectionForbidden) reposUpdateBranchProtectionRes() {}

type ReposUpdateBranchProtectionNotFound BasicError

func (*ReposUpdateBranchProtectionNotFound) reposUpdateBranchProtectionRes() {}

type ReposUpdateBranchProtectionReq struct {
	// Require status checks to pass before merging. Set to `null` to disable.
	RequiredStatusChecks NilReposUpdateBranchProtectionReqRequiredStatusChecks `json:"required_status_checks"`
	// Enforce all configured restrictions for administrators. Set to `true` to enforce required status
	// checks for repository administrators. Set to `null` to disable.
	EnforceAdmins NilBool `json:"enforce_admins"`
	// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
	RequiredPullRequestReviews NilReposUpdateBranchProtectionReqRequiredPullRequestReviews `json:"required_pull_request_reviews"`
	// Restrict who can push to the protected branch. User, app, and team `restrictions` are only
	// available for organization-owned repositories. Set to `null` to disable.
	Restrictions NilReposUpdateBranchProtectionReqRestrictions `json:"restrictions"`
	// Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch.
	//  Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git
	// history. Your repository must allow squash merging or rebase merging before you can enable a
	// linear commit history. Default: `false`. For more information, see "[Requiring a linear commit
	// history](https://help.github.
	// com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help
	// documentation.
	RequiredLinearHistory OptBool `json:"required_linear_history"`
	// Permits force pushes to the protected branch by anyone with write access to the repository. Set to
	// `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`.
	// For more information, see "[Enabling force pushes to a protected branch](https://help.github.
	// com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the
	// GitHub Help documentation.".
	AllowForcePushes OptNilBool `json:"allow_force_pushes"`
	// Allows deletion of the protected branch by anyone with write access to the repository. Set to
	// `false` to prevent deletion of the protected branch. Default: `false`. For more information, see
	// "[Enabling force pushes to a protected branch](https://help.github.
	// com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the
	// GitHub Help documentation.
	AllowDeletions OptBool `json:"allow_deletions"`
	// Requires all conversations on code to be resolved before a pull request can be merged into a
	// branch that matches this rule. Set to `false` to disable. Default: `false`.
	RequiredConversationResolution OptBool `json:"required_conversation_resolution"`
}

// GetRequiredStatusChecks returns the value of RequiredStatusChecks.
func (s *ReposUpdateBranchProtectionReq) GetRequiredStatusChecks() NilReposUpdateBranchProtectionReqRequiredStatusChecks {
	return s.RequiredStatusChecks
}

// GetEnforceAdmins returns the value of EnforceAdmins.
func (s *ReposUpdateBranchProtectionReq) GetEnforceAdmins() NilBool {
	return s.EnforceAdmins
}

// GetRequiredPullRequestReviews returns the value of RequiredPullRequestReviews.
func (s *ReposUpdateBranchProtectionReq) GetRequiredPullRequestReviews() NilReposUpdateBranchProtectionReqRequiredPullRequestReviews {
	return s.RequiredPullRequestReviews
}

// GetRestrictions returns the value of Restrictions.
func (s *ReposUpdateBranchProtectionReq) GetRestrictions() NilReposUpdateBranchProtectionReqRestrictions {
	return s.Restrictions
}

// GetRequiredLinearHistory returns the value of RequiredLinearHistory.
func (s *ReposUpdateBranchProtectionReq) GetRequiredLinearHistory() OptBool {
	return s.RequiredLinearHistory
}

// GetAllowForcePushes returns the value of AllowForcePushes.
func (s *ReposUpdateBranchProtectionReq) GetAllowForcePushes() OptNilBool {
	return s.AllowForcePushes
}

// GetAllowDeletions returns the value of AllowDeletions.
func (s *ReposUpdateBranchProtectionReq) GetAllowDeletions() OptBool {
	return s.AllowDeletions
}

// GetRequiredConversationResolution returns the value of RequiredConversationResolution.
func (s *ReposUpdateBranchProtectionReq) GetRequiredConversationResolution() OptBool {
	return s.RequiredConversationResolution
}

// SetRequiredStatusChecks sets the value of RequiredStatusChecks.
func (s *ReposUpdateBranchProtectionReq) SetRequiredStatusChecks(val NilReposUpdateBranchProtectionReqRequiredStatusChecks) {
	s.RequiredStatusChecks = val
}

// SetEnforceAdmins sets the value of EnforceAdmins.
func (s *ReposUpdateBranchProtectionReq) SetEnforceAdmins(val NilBool) {
	s.EnforceAdmins = val
}

// SetRequiredPullRequestReviews sets the value of RequiredPullRequestReviews.
func (s *ReposUpdateBranchProtectionReq) SetRequiredPullRequestReviews(val NilReposUpdateBranchProtectionReqRequiredPullRequestReviews) {
	s.RequiredPullRequestReviews = val
}

// SetRestrictions sets the value of Restrictions.
func (s *ReposUpdateBranchProtectionReq) SetRestrictions(val NilReposUpdateBranchProtectionReqRestrictions) {
	s.Restrictions = val
}

// SetRequiredLinearHistory sets the value of RequiredLinearHistory.
func (s *ReposUpdateBranchProtectionReq) SetRequiredLinearHistory(val OptBool) {
	s.RequiredLinearHistory = val
}

// SetAllowForcePushes sets the value of AllowForcePushes.
func (s *ReposUpdateBranchProtectionReq) SetAllowForcePushes(val OptNilBool) {
	s.AllowForcePushes = val
}

// SetAllowDeletions sets the value of AllowDeletions.
func (s *ReposUpdateBranchProtectionReq) SetAllowDeletions(val OptBool) {
	s.AllowDeletions = val
}

// SetRequiredConversationResolution sets the value of RequiredConversationResolution.
func (s *ReposUpdateBranchProtectionReq) SetRequiredConversationResolution(val OptBool) {
	s.RequiredConversationResolution = val
}

// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
type ReposUpdateBranchProtectionReqRequiredPullRequestReviews struct {
	// Specify which users and teams can dismiss pull request reviews. Pass an empty
	// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
	// available for organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions"`
	// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new
	// commit.
	DismissStaleReviews OptBool `json:"dismiss_stale_reviews"`
	// Blocks merging pull requests until [code owners](https://help.github.
	// com/articles/about-code-owners/) review them.
	RequireCodeOwnerReviews OptBool `json:"require_code_owner_reviews"`
	// Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.
	RequiredApprovingReviewCount OptInt `json:"required_approving_review_count"`
}

// GetDismissalRestrictions returns the value of DismissalRestrictions.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) GetDismissalRestrictions() OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions {
	return s.DismissalRestrictions
}

// GetDismissStaleReviews returns the value of DismissStaleReviews.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) GetDismissStaleReviews() OptBool {
	return s.DismissStaleReviews
}

// GetRequireCodeOwnerReviews returns the value of RequireCodeOwnerReviews.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) GetRequireCodeOwnerReviews() OptBool {
	return s.RequireCodeOwnerReviews
}

// GetRequiredApprovingReviewCount returns the value of RequiredApprovingReviewCount.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) GetRequiredApprovingReviewCount() OptInt {
	return s.RequiredApprovingReviewCount
}

// SetDismissalRestrictions sets the value of DismissalRestrictions.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetDismissalRestrictions(val OptReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) {
	s.DismissalRestrictions = val
}

// SetDismissStaleReviews sets the value of DismissStaleReviews.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetDismissStaleReviews(val OptBool) {
	s.DismissStaleReviews = val
}

// SetRequireCodeOwnerReviews sets the value of RequireCodeOwnerReviews.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetRequireCodeOwnerReviews(val OptBool) {
	s.RequireCodeOwnerReviews = val
}

// SetRequiredApprovingReviewCount sets the value of RequiredApprovingReviewCount.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviews) SetRequiredApprovingReviewCount(val OptInt) {
	s.RequiredApprovingReviewCount = val
}

// Specify which users and teams can dismiss pull request reviews. Pass an empty
// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
// available for organization-owned repositories. Omit this parameter for personal repositories.
type ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions struct {
	// The list of user `login`s with dismissal access.
	Users []string `json:"users"`
	// The list of team `slug`s with dismissal access.
	Teams []string `json:"teams"`
}

// GetUsers returns the value of Users.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) GetUsers() []string {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) GetTeams() []string {
	return s.Teams
}

// SetUsers sets the value of Users.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) SetUsers(val []string) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *ReposUpdateBranchProtectionReqRequiredPullRequestReviewsDismissalRestrictions) SetTeams(val []string) {
	s.Teams = val
}

// Require status checks to pass before merging. Set to `null` to disable.
type ReposUpdateBranchProtectionReqRequiredStatusChecks struct {
	// Require branches to be up to date before merging.
	Strict bool `json:"strict"`
	// The list of status checks to require in order to merge into this branch.
	Contexts []string `json:"contexts"`
}

// GetStrict returns the value of Strict.
func (s *ReposUpdateBranchProtectionReqRequiredStatusChecks) GetStrict() bool {
	return s.Strict
}

// GetContexts returns the value of Contexts.
func (s *ReposUpdateBranchProtectionReqRequiredStatusChecks) GetContexts() []string {
	return s.Contexts
}

// SetStrict sets the value of Strict.
func (s *ReposUpdateBranchProtectionReqRequiredStatusChecks) SetStrict(val bool) {
	s.Strict = val
}

// SetContexts sets the value of Contexts.
func (s *ReposUpdateBranchProtectionReqRequiredStatusChecks) SetContexts(val []string) {
	s.Contexts = val
}

// Restrict who can push to the protected branch. User, app, and team `restrictions` are only
// available for organization-owned repositories. Set to `null` to disable.
type ReposUpdateBranchProtectionReqRestrictions struct {
	// The list of user `login`s with push access.
	Users []string `json:"users"`
	// The list of team `slug`s with push access.
	Teams []string `json:"teams"`
	// The list of app `slug`s with push access.
	Apps []string `json:"apps"`
}

// GetUsers returns the value of Users.
func (s *ReposUpdateBranchProtectionReqRestrictions) GetUsers() []string {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *ReposUpdateBranchProtectionReqRestrictions) GetTeams() []string {
	return s.Teams
}

// GetApps returns the value of Apps.
func (s *ReposUpdateBranchProtectionReqRestrictions) GetApps() []string {
	return s.Apps
}

// SetUsers sets the value of Users.
func (s *ReposUpdateBranchProtectionReqRestrictions) SetUsers(val []string) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *ReposUpdateBranchProtectionReqRestrictions) SetTeams(val []string) {
	s.Teams = val
}

// SetApps sets the value of Apps.
func (s *ReposUpdateBranchProtectionReqRestrictions) SetApps(val []string) {
	s.Apps = val
}

type ReposUpdateCommitCommentReq struct {
	// The contents of the comment.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *ReposUpdateCommitCommentReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *ReposUpdateCommitCommentReq) SetBody(val string) {
	s.Body = val
}

type ReposUpdateForbidden BasicError

func (*ReposUpdateForbidden) reposUpdateRes() {}

type ReposUpdateInvitationReq struct {
	// The permissions that the associated user will have on the repository. Valid values are `read`,
	// `write`, `maintain`, `triage`, and `admin`.
	Permissions OptReposUpdateInvitationReqPermissions `json:"permissions"`
}

// GetPermissions returns the value of Permissions.
func (s *ReposUpdateInvitationReq) GetPermissions() OptReposUpdateInvitationReqPermissions {
	return s.Permissions
}

// SetPermissions sets the value of Permissions.
func (s *ReposUpdateInvitationReq) SetPermissions(val OptReposUpdateInvitationReqPermissions) {
	s.Permissions = val
}

// The permissions that the associated user will have on the repository. Valid values are `read`,
// `write`, `maintain`, `triage`, and `admin`.
type ReposUpdateInvitationReqPermissions string

const (
	ReposUpdateInvitationReqPermissionsRead     ReposUpdateInvitationReqPermissions = "read"
	ReposUpdateInvitationReqPermissionsWrite    ReposUpdateInvitationReqPermissions = "write"
	ReposUpdateInvitationReqPermissionsMaintain ReposUpdateInvitationReqPermissions = "maintain"
	ReposUpdateInvitationReqPermissionsTriage   ReposUpdateInvitationReqPermissions = "triage"
	ReposUpdateInvitationReqPermissionsAdmin    ReposUpdateInvitationReqPermissions = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposUpdateInvitationReqPermissions) MarshalText() ([]byte, error) {
	switch s {
	case ReposUpdateInvitationReqPermissionsRead:
		return []byte(s), nil
	case ReposUpdateInvitationReqPermissionsWrite:
		return []byte(s), nil
	case ReposUpdateInvitationReqPermissionsMaintain:
		return []byte(s), nil
	case ReposUpdateInvitationReqPermissionsTriage:
		return []byte(s), nil
	case ReposUpdateInvitationReqPermissionsAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposUpdateInvitationReqPermissions) UnmarshalText(data []byte) error {
	switch ReposUpdateInvitationReqPermissions(data) {
	case ReposUpdateInvitationReqPermissionsRead:
		*s = ReposUpdateInvitationReqPermissionsRead
		return nil
	case ReposUpdateInvitationReqPermissionsWrite:
		*s = ReposUpdateInvitationReqPermissionsWrite
		return nil
	case ReposUpdateInvitationReqPermissionsMaintain:
		*s = ReposUpdateInvitationReqPermissionsMaintain
		return nil
	case ReposUpdateInvitationReqPermissionsTriage:
		*s = ReposUpdateInvitationReqPermissionsTriage
		return nil
	case ReposUpdateInvitationReqPermissionsAdmin:
		*s = ReposUpdateInvitationReqPermissionsAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposUpdateNotFound BasicError

func (*ReposUpdateNotFound) reposUpdateRes() {}

type ReposUpdatePullRequestReviewProtectionReq struct {
	// Specify which users and teams can dismiss pull request reviews. Pass an empty
	// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
	// available for organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions `json:"dismissal_restrictions"`
	// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new
	// commit.
	DismissStaleReviews OptBool `json:"dismiss_stale_reviews"`
	// Blocks merging pull requests until [code owners](https://help.github.
	// com/articles/about-code-owners/) have reviewed.
	RequireCodeOwnerReviews OptBool `json:"require_code_owner_reviews"`
	// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
	RequiredApprovingReviewCount OptInt `json:"required_approving_review_count"`
}

// GetDismissalRestrictions returns the value of DismissalRestrictions.
func (s *ReposUpdatePullRequestReviewProtectionReq) GetDismissalRestrictions() OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions {
	return s.DismissalRestrictions
}

// GetDismissStaleReviews returns the value of DismissStaleReviews.
func (s *ReposUpdatePullRequestReviewProtectionReq) GetDismissStaleReviews() OptBool {
	return s.DismissStaleReviews
}

// GetRequireCodeOwnerReviews returns the value of RequireCodeOwnerReviews.
func (s *ReposUpdatePullRequestReviewProtectionReq) GetRequireCodeOwnerReviews() OptBool {
	return s.RequireCodeOwnerReviews
}

// GetRequiredApprovingReviewCount returns the value of RequiredApprovingReviewCount.
func (s *ReposUpdatePullRequestReviewProtectionReq) GetRequiredApprovingReviewCount() OptInt {
	return s.RequiredApprovingReviewCount
}

// SetDismissalRestrictions sets the value of DismissalRestrictions.
func (s *ReposUpdatePullRequestReviewProtectionReq) SetDismissalRestrictions(val OptReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) {
	s.DismissalRestrictions = val
}

// SetDismissStaleReviews sets the value of DismissStaleReviews.
func (s *ReposUpdatePullRequestReviewProtectionReq) SetDismissStaleReviews(val OptBool) {
	s.DismissStaleReviews = val
}

// SetRequireCodeOwnerReviews sets the value of RequireCodeOwnerReviews.
func (s *ReposUpdatePullRequestReviewProtectionReq) SetRequireCodeOwnerReviews(val OptBool) {
	s.RequireCodeOwnerReviews = val
}

// SetRequiredApprovingReviewCount sets the value of RequiredApprovingReviewCount.
func (s *ReposUpdatePullRequestReviewProtectionReq) SetRequiredApprovingReviewCount(val OptInt) {
	s.RequiredApprovingReviewCount = val
}

// Specify which users and teams can dismiss pull request reviews. Pass an empty
// `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only
// available for organization-owned repositories. Omit this parameter for personal repositories.
type ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions struct {
	// The list of user `login`s with dismissal access.
	Users []string `json:"users"`
	// The list of team `slug`s with dismissal access.
	Teams []string `json:"teams"`
}

// GetUsers returns the value of Users.
func (s *ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) GetUsers() []string {
	return s.Users
}

// GetTeams returns the value of Teams.
func (s *ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) GetTeams() []string {
	return s.Teams
}

// SetUsers sets the value of Users.
func (s *ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) SetUsers(val []string) {
	s.Users = val
}

// SetTeams sets the value of Teams.
func (s *ReposUpdatePullRequestReviewProtectionReqDismissalRestrictions) SetTeams(val []string) {
	s.Teams = val
}

type ReposUpdateReleaseAssetReq struct {
	// The file name of the asset.
	Name OptString `json:"name"`
	// An alternate short description of the asset. Used in place of the filename.
	Label OptString `json:"label"`
	State OptString `json:"state"`
}

// GetName returns the value of Name.
func (s *ReposUpdateReleaseAssetReq) GetName() OptString {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *ReposUpdateReleaseAssetReq) GetLabel() OptString {
	return s.Label
}

// GetState returns the value of State.
func (s *ReposUpdateReleaseAssetReq) GetState() OptString {
	return s.State
}

// SetName sets the value of Name.
func (s *ReposUpdateReleaseAssetReq) SetName(val OptString) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *ReposUpdateReleaseAssetReq) SetLabel(val OptString) {
	s.Label = val
}

// SetState sets the value of State.
func (s *ReposUpdateReleaseAssetReq) SetState(val OptString) {
	s.State = val
}

type ReposUpdateReleaseReq struct {
	// The name of the tag.
	TagName OptString `json:"tag_name"`
	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch
	// or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch
	// (usually `master`).
	TargetCommitish OptString `json:"target_commitish"`
	// The name of the release.
	Name OptString `json:"name"`
	// Text describing the contents of the tag.
	Body OptString `json:"body"`
	// `true` makes the release a draft, and `false` publishes the release.
	Draft OptBool `json:"draft"`
	// `true` to identify the release as a prerelease, `false` to identify the release as a full release.
	Prerelease OptBool `json:"prerelease"`
	// If specified, a discussion of the specified category is created and linked to the release. The
	// value must be a category that already exists in the repository. If there is already a discussion
	// linked to the release, this parameter is ignored. For more information, see "[Managing categories
	// for discussions in your repository](https://docs.github.
	// com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).".
	DiscussionCategoryName OptString `json:"discussion_category_name"`
}

// GetTagName returns the value of TagName.
func (s *ReposUpdateReleaseReq) GetTagName() OptString {
	return s.TagName
}

// GetTargetCommitish returns the value of TargetCommitish.
func (s *ReposUpdateReleaseReq) GetTargetCommitish() OptString {
	return s.TargetCommitish
}

// GetName returns the value of Name.
func (s *ReposUpdateReleaseReq) GetName() OptString {
	return s.Name
}

// GetBody returns the value of Body.
func (s *ReposUpdateReleaseReq) GetBody() OptString {
	return s.Body
}

// GetDraft returns the value of Draft.
func (s *ReposUpdateReleaseReq) GetDraft() OptBool {
	return s.Draft
}

// GetPrerelease returns the value of Prerelease.
func (s *ReposUpdateReleaseReq) GetPrerelease() OptBool {
	return s.Prerelease
}

// GetDiscussionCategoryName returns the value of DiscussionCategoryName.
func (s *ReposUpdateReleaseReq) GetDiscussionCategoryName() OptString {
	return s.DiscussionCategoryName
}

// SetTagName sets the value of TagName.
func (s *ReposUpdateReleaseReq) SetTagName(val OptString) {
	s.TagName = val
}

// SetTargetCommitish sets the value of TargetCommitish.
func (s *ReposUpdateReleaseReq) SetTargetCommitish(val OptString) {
	s.TargetCommitish = val
}

// SetName sets the value of Name.
func (s *ReposUpdateReleaseReq) SetName(val OptString) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *ReposUpdateReleaseReq) SetBody(val OptString) {
	s.Body = val
}

// SetDraft sets the value of Draft.
func (s *ReposUpdateReleaseReq) SetDraft(val OptBool) {
	s.Draft = val
}

// SetPrerelease sets the value of Prerelease.
func (s *ReposUpdateReleaseReq) SetPrerelease(val OptBool) {
	s.Prerelease = val
}

// SetDiscussionCategoryName sets the value of DiscussionCategoryName.
func (s *ReposUpdateReleaseReq) SetDiscussionCategoryName(val OptString) {
	s.DiscussionCategoryName = val
}

type ReposUpdateReq struct {
	// The name of the repository.
	Name OptString `json:"name"`
	// A short description of the repository.
	Description OptString `json:"description"`
	// A URL with more information about the repository.
	Homepage OptString `json:"homepage"`
	// Either `true` to make the repository private or `false` to make it public. Default: `false`.
	// **Note**: You will get a `422` error if the organization restricts [changing repository
	// visibility](https://help.github.
	// com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
	Private OptBool `json:"private"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using
	// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
	// The `visibility` parameter overrides the `private` parameter when you use both along with the
	// `nebula-preview` preview header.
	Visibility OptReposUpdateReqVisibility `json:"visibility"`
	// Specify which security and analysis features to enable or disable. For example, to enable GitHub
	// Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis":
	// {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private
	// repository covered by an Advanced Security license, you can check which security and analysis
	// features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
	SecurityAndAnalysis OptNilReposUpdateReqSecurityAndAnalysis `json:"security_and_analysis"`
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues OptBool `json:"has_issues"`
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If
	// you're creating a repository in an organization that has disabled repository projects, the default
	// is `false`, and if you pass `true`, the API returns an error.
	HasProjects OptBool `json:"has_projects"`
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki OptBool `json:"has_wiki"`
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate OptBool `json:"is_template"`
	// Updates the default branch for this repository.
	DefaultBranch OptString `json:"default_branch"`
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge OptBool `json:"allow_squash_merge"`
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging
	// pull requests with merge commits.
	AllowMergeCommit OptBool `json:"allow_merge_commit"`
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge OptBool `json:"allow_rebase_merge"`
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge OptBool `json:"allow_auto_merge"`
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or
	// `false` to prevent automatic deletion.
	DeleteBranchOnMerge OptBool `json:"delete_branch_on_merge"`
	// `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
	Archived OptBool `json:"archived"`
	// Either `true` to allow private forks, or `false` to prevent private forks.
	AllowForking OptBool `json:"allow_forking"`
}

// GetName returns the value of Name.
func (s *ReposUpdateReq) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ReposUpdateReq) GetDescription() OptString {
	return s.Description
}

// GetHomepage returns the value of Homepage.
func (s *ReposUpdateReq) GetHomepage() OptString {
	return s.Homepage
}

// GetPrivate returns the value of Private.
func (s *ReposUpdateReq) GetPrivate() OptBool {
	return s.Private
}

// GetVisibility returns the value of Visibility.
func (s *ReposUpdateReq) GetVisibility() OptReposUpdateReqVisibility {
	return s.Visibility
}

// GetSecurityAndAnalysis returns the value of SecurityAndAnalysis.
func (s *ReposUpdateReq) GetSecurityAndAnalysis() OptNilReposUpdateReqSecurityAndAnalysis {
	return s.SecurityAndAnalysis
}

// GetHasIssues returns the value of HasIssues.
func (s *ReposUpdateReq) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *ReposUpdateReq) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *ReposUpdateReq) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetIsTemplate returns the value of IsTemplate.
func (s *ReposUpdateReq) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *ReposUpdateReq) GetDefaultBranch() OptString {
	return s.DefaultBranch
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *ReposUpdateReq) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *ReposUpdateReq) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *ReposUpdateReq) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *ReposUpdateReq) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *ReposUpdateReq) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetArchived returns the value of Archived.
func (s *ReposUpdateReq) GetArchived() OptBool {
	return s.Archived
}

// GetAllowForking returns the value of AllowForking.
func (s *ReposUpdateReq) GetAllowForking() OptBool {
	return s.AllowForking
}

// SetName sets the value of Name.
func (s *ReposUpdateReq) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ReposUpdateReq) SetDescription(val OptString) {
	s.Description = val
}

// SetHomepage sets the value of Homepage.
func (s *ReposUpdateReq) SetHomepage(val OptString) {
	s.Homepage = val
}

// SetPrivate sets the value of Private.
func (s *ReposUpdateReq) SetPrivate(val OptBool) {
	s.Private = val
}

// SetVisibility sets the value of Visibility.
func (s *ReposUpdateReq) SetVisibility(val OptReposUpdateReqVisibility) {
	s.Visibility = val
}

// SetSecurityAndAnalysis sets the value of SecurityAndAnalysis.
func (s *ReposUpdateReq) SetSecurityAndAnalysis(val OptNilReposUpdateReqSecurityAndAnalysis) {
	s.SecurityAndAnalysis = val
}

// SetHasIssues sets the value of HasIssues.
func (s *ReposUpdateReq) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *ReposUpdateReq) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *ReposUpdateReq) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *ReposUpdateReq) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *ReposUpdateReq) SetDefaultBranch(val OptString) {
	s.DefaultBranch = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *ReposUpdateReq) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *ReposUpdateReq) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *ReposUpdateReq) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *ReposUpdateReq) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *ReposUpdateReq) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetArchived sets the value of Archived.
func (s *ReposUpdateReq) SetArchived(val OptBool) {
	s.Archived = val
}

// SetAllowForking sets the value of AllowForking.
func (s *ReposUpdateReq) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

// Specify which security and analysis features to enable or disable. For example, to enable GitHub
// Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis":
// {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private
// repository covered by an Advanced Security license, you can check which security and analysis
// features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
type ReposUpdateReqSecurityAndAnalysis struct {
	// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For
	// more information, see "[About GitHub Advanced
	// Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).".
	AdvancedSecurity OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity `json:"advanced_security"`
	// Use the `status` property to enable or disable secret scanning for this repository. For more
	// information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning).".
	SecretScanning OptReposUpdateReqSecurityAndAnalysisSecretScanning `json:"secret_scanning"`
}

// GetAdvancedSecurity returns the value of AdvancedSecurity.
func (s *ReposUpdateReqSecurityAndAnalysis) GetAdvancedSecurity() OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity {
	return s.AdvancedSecurity
}

// GetSecretScanning returns the value of SecretScanning.
func (s *ReposUpdateReqSecurityAndAnalysis) GetSecretScanning() OptReposUpdateReqSecurityAndAnalysisSecretScanning {
	return s.SecretScanning
}

// SetAdvancedSecurity sets the value of AdvancedSecurity.
func (s *ReposUpdateReqSecurityAndAnalysis) SetAdvancedSecurity(val OptReposUpdateReqSecurityAndAnalysisAdvancedSecurity) {
	s.AdvancedSecurity = val
}

// SetSecretScanning sets the value of SecretScanning.
func (s *ReposUpdateReqSecurityAndAnalysis) SetSecretScanning(val OptReposUpdateReqSecurityAndAnalysisSecretScanning) {
	s.SecretScanning = val
}

// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For
// more information, see "[About GitHub Advanced
// Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).".
type ReposUpdateReqSecurityAndAnalysisAdvancedSecurity struct {
	// Can be `enabled` or `disabled`.
	Status OptString `json:"status"`
}

// GetStatus returns the value of Status.
func (s *ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) GetStatus() OptString {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *ReposUpdateReqSecurityAndAnalysisAdvancedSecurity) SetStatus(val OptString) {
	s.Status = val
}

// Use the `status` property to enable or disable secret scanning for this repository. For more
// information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning).".
type ReposUpdateReqSecurityAndAnalysisSecretScanning struct {
	// Can be `enabled` or `disabled`.
	Status OptString `json:"status"`
}

// GetStatus returns the value of Status.
func (s *ReposUpdateReqSecurityAndAnalysisSecretScanning) GetStatus() OptString {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *ReposUpdateReqSecurityAndAnalysisSecretScanning) SetStatus(val OptString) {
	s.Status = val
}

// Can be `public` or `private`. If your organization is associated with an enterprise account using
// GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.
// The `visibility` parameter overrides the `private` parameter when you use both along with the
// `nebula-preview` preview header.
type ReposUpdateReqVisibility string

const (
	ReposUpdateReqVisibilityPublic     ReposUpdateReqVisibility = "public"
	ReposUpdateReqVisibilityPrivate    ReposUpdateReqVisibility = "private"
	ReposUpdateReqVisibilityVisibility ReposUpdateReqVisibility = "visibility"
	ReposUpdateReqVisibilityInternal   ReposUpdateReqVisibility = "internal"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReposUpdateReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ReposUpdateReqVisibilityPublic:
		return []byte(s), nil
	case ReposUpdateReqVisibilityPrivate:
		return []byte(s), nil
	case ReposUpdateReqVisibilityVisibility:
		return []byte(s), nil
	case ReposUpdateReqVisibilityInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReposUpdateReqVisibility) UnmarshalText(data []byte) error {
	switch ReposUpdateReqVisibility(data) {
	case ReposUpdateReqVisibilityPublic:
		*s = ReposUpdateReqVisibilityPublic
		return nil
	case ReposUpdateReqVisibilityPrivate:
		*s = ReposUpdateReqVisibilityPrivate
		return nil
	case ReposUpdateReqVisibilityVisibility:
		*s = ReposUpdateReqVisibilityVisibility
		return nil
	case ReposUpdateReqVisibilityInternal:
		*s = ReposUpdateReqVisibilityInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReposUpdateStatusCheckProtectionReq struct {
	// Require branches to be up to date before merging.
	Strict OptBool `json:"strict"`
	// The list of status checks to require in order to merge into this branch.
	Contexts []string `json:"contexts"`
}

// GetStrict returns the value of Strict.
func (s *ReposUpdateStatusCheckProtectionReq) GetStrict() OptBool {
	return s.Strict
}

// GetContexts returns the value of Contexts.
func (s *ReposUpdateStatusCheckProtectionReq) GetContexts() []string {
	return s.Contexts
}

// SetStrict sets the value of Strict.
func (s *ReposUpdateStatusCheckProtectionReq) SetStrict(val OptBool) {
	s.Strict = val
}

// SetContexts sets the value of Contexts.
func (s *ReposUpdateStatusCheckProtectionReq) SetContexts(val []string) {
	s.Contexts = val
}

type ReposUpdateTemporaryRedirect BasicError

func (*ReposUpdateTemporaryRedirect) reposUpdateRes() {}

type ReposUpdateWebhookConfigForRepoReq struct {
	URL         OptWebhookConfigURL         `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
}

// GetURL returns the value of URL.
func (s *ReposUpdateWebhookConfigForRepoReq) GetURL() OptWebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *ReposUpdateWebhookConfigForRepoReq) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *ReposUpdateWebhookConfigForRepoReq) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *ReposUpdateWebhookConfigForRepoReq) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// SetURL sets the value of URL.
func (s *ReposUpdateWebhookConfigForRepoReq) SetURL(val OptWebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *ReposUpdateWebhookConfigForRepoReq) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *ReposUpdateWebhookConfigForRepoReq) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *ReposUpdateWebhookConfigForRepoReq) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

type ReposUpdateWebhookReq struct {
	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
	// github.com/rest/reference/repos#create-hook-config-params).
	Config OptReposUpdateWebhookReqConfig `json:"config"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered
	// for. This replaces the entire array of events.
	Events []string `json:"events"`
	// Determines a list of events to be added to the list of events that the Hook triggers for.
	AddEvents []string `json:"add_events"`
	// Determines a list of events to be removed from the list of events that the Hook triggers for.
	RemoveEvents []string `json:"remove_events"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send
	// notifications.
	Active OptBool `json:"active"`
}

// GetConfig returns the value of Config.
func (s *ReposUpdateWebhookReq) GetConfig() OptReposUpdateWebhookReqConfig {
	return s.Config
}

// GetEvents returns the value of Events.
func (s *ReposUpdateWebhookReq) GetEvents() []string {
	return s.Events
}

// GetAddEvents returns the value of AddEvents.
func (s *ReposUpdateWebhookReq) GetAddEvents() []string {
	return s.AddEvents
}

// GetRemoveEvents returns the value of RemoveEvents.
func (s *ReposUpdateWebhookReq) GetRemoveEvents() []string {
	return s.RemoveEvents
}

// GetActive returns the value of Active.
func (s *ReposUpdateWebhookReq) GetActive() OptBool {
	return s.Active
}

// SetConfig sets the value of Config.
func (s *ReposUpdateWebhookReq) SetConfig(val OptReposUpdateWebhookReqConfig) {
	s.Config = val
}

// SetEvents sets the value of Events.
func (s *ReposUpdateWebhookReq) SetEvents(val []string) {
	s.Events = val
}

// SetAddEvents sets the value of AddEvents.
func (s *ReposUpdateWebhookReq) SetAddEvents(val []string) {
	s.AddEvents = val
}

// SetRemoveEvents sets the value of RemoveEvents.
func (s *ReposUpdateWebhookReq) SetRemoveEvents(val []string) {
	s.RemoveEvents = val
}

// SetActive sets the value of Active.
func (s *ReposUpdateWebhookReq) SetActive(val OptBool) {
	s.Active = val
}

// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.
// github.com/rest/reference/repos#create-hook-config-params).
type ReposUpdateWebhookReqConfig struct {
	URL         WebhookConfigURL            `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
	Address     OptString                   `json:"address"`
	Room        OptString                   `json:"room"`
}

// GetURL returns the value of URL.
func (s *ReposUpdateWebhookReqConfig) GetURL() WebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *ReposUpdateWebhookReqConfig) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *ReposUpdateWebhookReqConfig) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *ReposUpdateWebhookReqConfig) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// GetAddress returns the value of Address.
func (s *ReposUpdateWebhookReqConfig) GetAddress() OptString {
	return s.Address
}

// GetRoom returns the value of Room.
func (s *ReposUpdateWebhookReqConfig) GetRoom() OptString {
	return s.Room
}

// SetURL sets the value of URL.
func (s *ReposUpdateWebhookReqConfig) SetURL(val WebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *ReposUpdateWebhookReqConfig) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *ReposUpdateWebhookReqConfig) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *ReposUpdateWebhookReqConfig) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

// SetAddress sets the value of Address.
func (s *ReposUpdateWebhookReqConfig) SetAddress(val OptString) {
	s.Address = val
}

// SetRoom sets the value of Room.
func (s *ReposUpdateWebhookReqConfig) SetRoom(val OptString) {
	s.Room = val
}

// The raw file data.
type ReposUploadReleaseAssetReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReposUploadReleaseAssetReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

// ReposUploadReleaseAssetReqWithContentType wraps ReposUploadReleaseAssetReq with Content-Type.
type ReposUploadReleaseAssetReqWithContentType struct {
	ContentType string
	Content     ReposUploadReleaseAssetReq
}

// GetContentType returns the value of ContentType.
func (s *ReposUploadReleaseAssetReqWithContentType) GetContentType() string {
	return s.ContentType
}

// GetContent returns the value of Content.
func (s *ReposUploadReleaseAssetReqWithContentType) GetContent() ReposUploadReleaseAssetReq {
	return s.Content
}

// SetContentType sets the value of ContentType.
func (s *ReposUploadReleaseAssetReqWithContentType) SetContentType(val string) {
	s.ContentType = val
}

// SetContent sets the value of Content.
func (s *ReposUploadReleaseAssetReqWithContentType) SetContent(val ReposUploadReleaseAssetReq) {
	s.Content = val
}

// A git repository.
// Ref: #/components/schemas/repository
type Repository struct {
	// Unique identifier of the repository.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// The name of the repository.
	Name         string                   `json:"name"`
	FullName     string                   `json:"full_name"`
	License      NilNullableLicenseSimple `json:"license"`
	Organization OptNilNullableSimpleUser `json:"organization"`
	Forks        int                      `json:"forks"`
	Permissions  OptRepositoryPermissions `json:"permissions"`
	Owner        SimpleUser               `json:"owner"`
	// Whether the repository is private or public.
	Private          bool      `json:"private"`
	HTMLURL          url.URL   `json:"html_url"`
	Description      NilString `json:"description"`
	Fork             bool      `json:"fork"`
	URL              url.URL   `json:"url"`
	ArchiveURL       string    `json:"archive_url"`
	AssigneesURL     string    `json:"assignees_url"`
	BlobsURL         string    `json:"blobs_url"`
	BranchesURL      string    `json:"branches_url"`
	CollaboratorsURL string    `json:"collaborators_url"`
	CommentsURL      string    `json:"comments_url"`
	CommitsURL       string    `json:"commits_url"`
	CompareURL       string    `json:"compare_url"`
	ContentsURL      string    `json:"contents_url"`
	ContributorsURL  url.URL   `json:"contributors_url"`
	DeploymentsURL   url.URL   `json:"deployments_url"`
	DownloadsURL     url.URL   `json:"downloads_url"`
	EventsURL        url.URL   `json:"events_url"`
	ForksURL         url.URL   `json:"forks_url"`
	GitCommitsURL    string    `json:"git_commits_url"`
	GitRefsURL       string    `json:"git_refs_url"`
	GitTagsURL       string    `json:"git_tags_url"`
	GitURL           string    `json:"git_url"`
	IssueCommentURL  string    `json:"issue_comment_url"`
	IssueEventsURL   string    `json:"issue_events_url"`
	IssuesURL        string    `json:"issues_url"`
	KeysURL          string    `json:"keys_url"`
	LabelsURL        string    `json:"labels_url"`
	LanguagesURL     url.URL   `json:"languages_url"`
	MergesURL        url.URL   `json:"merges_url"`
	MilestonesURL    string    `json:"milestones_url"`
	NotificationsURL string    `json:"notifications_url"`
	PullsURL         string    `json:"pulls_url"`
	ReleasesURL      string    `json:"releases_url"`
	SSHURL           string    `json:"ssh_url"`
	StargazersURL    url.URL   `json:"stargazers_url"`
	StatusesURL      string    `json:"statuses_url"`
	SubscribersURL   url.URL   `json:"subscribers_url"`
	SubscriptionURL  url.URL   `json:"subscription_url"`
	TagsURL          url.URL   `json:"tags_url"`
	TeamsURL         url.URL   `json:"teams_url"`
	TreesURL         string    `json:"trees_url"`
	CloneURL         string    `json:"clone_url"`
	MirrorURL        NilURI    `json:"mirror_url"`
	HooksURL         url.URL   `json:"hooks_url"`
	SvnURL           url.URL   `json:"svn_url"`
	Homepage         NilURI    `json:"homepage"`
	Language         NilString `json:"language"`
	ForksCount       int       `json:"forks_count"`
	StargazersCount  int       `json:"stargazers_count"`
	WatchersCount    int       `json:"watchers_count"`
	Size             int       `json:"size"`
	// The default branch of the repository.
	DefaultBranch   string `json:"default_branch"`
	OpenIssuesCount int    `json:"open_issues_count"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool  `json:"is_template"`
	Topics     []string `json:"topics"`
	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`
	// Whether the wiki is enabled.
	HasWiki  bool `json:"has_wiki"`
	HasPages bool `json:"has_pages"`
	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`
	// Whether the repository is archived.
	Archived bool `json:"archived"`
	// Returns whether or not this repository disabled.
	Disabled bool `json:"disabled"`
	// The repository visibility: public, private, or internal.
	Visibility OptString   `json:"visibility"`
	PushedAt   NilDateTime `json:"pushed_at"`
	CreatedAt  NilDateTime `json:"created_at"`
	UpdatedAt  NilDateTime `json:"updated_at"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge   OptBool                            `json:"allow_rebase_merge"`
	TemplateRepository OptNilRepositoryTemplateRepository `json:"template_repository"`
	TempCloneToken     OptString                          `json:"temp_clone_token"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool `json:"allow_squash_merge"`
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool `json:"allow_auto_merge"`
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool `json:"delete_branch_on_merge"`
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool `json:"allow_merge_commit"`
	// Whether to allow forking this repo.
	AllowForking     OptBool   `json:"allow_forking"`
	SubscribersCount OptInt    `json:"subscribers_count"`
	NetworkCount     OptInt    `json:"network_count"`
	OpenIssues       int       `json:"open_issues"`
	Watchers         int       `json:"watchers"`
	MasterBranch     OptString `json:"master_branch"`
	StarredAt        OptString `json:"starred_at"`
}

// GetID returns the value of ID.
func (s *Repository) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Repository) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *Repository) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *Repository) GetFullName() string {
	return s.FullName
}

// GetLicense returns the value of License.
func (s *Repository) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetOrganization returns the value of Organization.
func (s *Repository) GetOrganization() OptNilNullableSimpleUser {
	return s.Organization
}

// GetForks returns the value of Forks.
func (s *Repository) GetForks() int {
	return s.Forks
}

// GetPermissions returns the value of Permissions.
func (s *Repository) GetPermissions() OptRepositoryPermissions {
	return s.Permissions
}

// GetOwner returns the value of Owner.
func (s *Repository) GetOwner() SimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *Repository) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Repository) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *Repository) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *Repository) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *Repository) GetURL() url.URL {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *Repository) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *Repository) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *Repository) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *Repository) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *Repository) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *Repository) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *Repository) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *Repository) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *Repository) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *Repository) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *Repository) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *Repository) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *Repository) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *Repository) GetForksURL() url.URL {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *Repository) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *Repository) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *Repository) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *Repository) GetGitURL() string {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *Repository) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *Repository) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *Repository) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *Repository) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *Repository) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *Repository) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *Repository) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *Repository) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *Repository) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *Repository) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *Repository) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *Repository) GetSSHURL() string {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *Repository) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *Repository) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *Repository) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *Repository) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *Repository) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *Repository) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *Repository) GetTreesURL() string {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *Repository) GetCloneURL() string {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *Repository) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *Repository) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *Repository) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *Repository) GetHomepage() NilURI {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *Repository) GetLanguage() NilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *Repository) GetForksCount() int {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *Repository) GetStargazersCount() int {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *Repository) GetWatchersCount() int {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *Repository) GetSize() int {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *Repository) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *Repository) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *Repository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *Repository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *Repository) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *Repository) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *Repository) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *Repository) GetHasPages() bool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *Repository) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *Repository) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *Repository) GetDisabled() bool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *Repository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *Repository) GetPushedAt() NilDateTime {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Repository) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Repository) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *Repository) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetTemplateRepository returns the value of TemplateRepository.
func (s *Repository) GetTemplateRepository() OptNilRepositoryTemplateRepository {
	return s.TemplateRepository
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *Repository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *Repository) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *Repository) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *Repository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *Repository) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowForking returns the value of AllowForking.
func (s *Repository) GetAllowForking() OptBool {
	return s.AllowForking
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *Repository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *Repository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// GetOpenIssues returns the value of OpenIssues.
func (s *Repository) GetOpenIssues() int {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *Repository) GetWatchers() int {
	return s.Watchers
}

// GetMasterBranch returns the value of MasterBranch.
func (s *Repository) GetMasterBranch() OptString {
	return s.MasterBranch
}

// GetStarredAt returns the value of StarredAt.
func (s *Repository) GetStarredAt() OptString {
	return s.StarredAt
}

// SetID sets the value of ID.
func (s *Repository) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Repository) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *Repository) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *Repository) SetFullName(val string) {
	s.FullName = val
}

// SetLicense sets the value of License.
func (s *Repository) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetOrganization sets the value of Organization.
func (s *Repository) SetOrganization(val OptNilNullableSimpleUser) {
	s.Organization = val
}

// SetForks sets the value of Forks.
func (s *Repository) SetForks(val int) {
	s.Forks = val
}

// SetPermissions sets the value of Permissions.
func (s *Repository) SetPermissions(val OptRepositoryPermissions) {
	s.Permissions = val
}

// SetOwner sets the value of Owner.
func (s *Repository) SetOwner(val SimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *Repository) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Repository) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *Repository) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *Repository) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *Repository) SetURL(val url.URL) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *Repository) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *Repository) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *Repository) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *Repository) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *Repository) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *Repository) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *Repository) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *Repository) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *Repository) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *Repository) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *Repository) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *Repository) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *Repository) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *Repository) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *Repository) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *Repository) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *Repository) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *Repository) SetGitURL(val string) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *Repository) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *Repository) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *Repository) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *Repository) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *Repository) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *Repository) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *Repository) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *Repository) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *Repository) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *Repository) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *Repository) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *Repository) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *Repository) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *Repository) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *Repository) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *Repository) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *Repository) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *Repository) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *Repository) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *Repository) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *Repository) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *Repository) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *Repository) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *Repository) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *Repository) SetLanguage(val NilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *Repository) SetForksCount(val int) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *Repository) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *Repository) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *Repository) SetSize(val int) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *Repository) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *Repository) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *Repository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *Repository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *Repository) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *Repository) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *Repository) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *Repository) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *Repository) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *Repository) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *Repository) SetDisabled(val bool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *Repository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *Repository) SetPushedAt(val NilDateTime) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Repository) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Repository) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *Repository) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetTemplateRepository sets the value of TemplateRepository.
func (s *Repository) SetTemplateRepository(val OptNilRepositoryTemplateRepository) {
	s.TemplateRepository = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *Repository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *Repository) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *Repository) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *Repository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *Repository) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowForking sets the value of AllowForking.
func (s *Repository) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *Repository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *Repository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *Repository) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *Repository) SetWatchers(val int) {
	s.Watchers = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *Repository) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

// SetStarredAt sets the value of StarredAt.
func (s *Repository) SetStarredAt(val OptString) {
	s.StarredAt = val
}

// Repository Collaborator Permission.
// Ref: #/components/schemas/repository-collaborator-permission
type RepositoryCollaboratorPermission struct {
	Permission string                `json:"permission"`
	User       NilNullableSimpleUser `json:"user"`
}

// GetPermission returns the value of Permission.
func (s *RepositoryCollaboratorPermission) GetPermission() string {
	return s.Permission
}

// GetUser returns the value of User.
func (s *RepositoryCollaboratorPermission) GetUser() NilNullableSimpleUser {
	return s.User
}

// SetPermission sets the value of Permission.
func (s *RepositoryCollaboratorPermission) SetPermission(val string) {
	s.Permission = val
}

// SetUser sets the value of User.
func (s *RepositoryCollaboratorPermission) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

func (*RepositoryCollaboratorPermission) projectsGetPermissionForUserRes()        {}
func (*RepositoryCollaboratorPermission) reposGetCollaboratorPermissionLevelRes() {}

// RepositoryHeaders wraps Repository with response headers.
type RepositoryHeaders struct {
	Location OptString
	Response Repository
}

// GetLocation returns the value of Location.
func (s *RepositoryHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *RepositoryHeaders) GetResponse() Repository {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *RepositoryHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *RepositoryHeaders) SetResponse(val Repository) {
	s.Response = val
}

func (*RepositoryHeaders) reposCreateForAuthenticatedUserRes() {}
func (*RepositoryHeaders) reposCreateInOrgRes()                {}

// Repository invitations let you manage who you collaborate with.
// Ref: #/components/schemas/repository-invitation
type RepositoryInvitation struct {
	// Unique identifier of the repository invitation.
	ID         int                   `json:"id"`
	Repository MinimalRepository     `json:"repository"`
	Invitee    NilNullableSimpleUser `json:"invitee"`
	Inviter    NilNullableSimpleUser `json:"inviter"`
	// The permission associated with the invitation.
	Permissions RepositoryInvitationPermissions `json:"permissions"`
	CreatedAt   time.Time                       `json:"created_at"`
	// Whether or not the invitation has expired.
	Expired OptBool `json:"expired"`
	// URL for the repository invitation.
	URL     string `json:"url"`
	HTMLURL string `json:"html_url"`
	NodeID  string `json:"node_id"`
}

// GetID returns the value of ID.
func (s *RepositoryInvitation) GetID() int {
	return s.ID
}

// GetRepository returns the value of Repository.
func (s *RepositoryInvitation) GetRepository() MinimalRepository {
	return s.Repository
}

// GetInvitee returns the value of Invitee.
func (s *RepositoryInvitation) GetInvitee() NilNullableSimpleUser {
	return s.Invitee
}

// GetInviter returns the value of Inviter.
func (s *RepositoryInvitation) GetInviter() NilNullableSimpleUser {
	return s.Inviter
}

// GetPermissions returns the value of Permissions.
func (s *RepositoryInvitation) GetPermissions() RepositoryInvitationPermissions {
	return s.Permissions
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RepositoryInvitation) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetExpired returns the value of Expired.
func (s *RepositoryInvitation) GetExpired() OptBool {
	return s.Expired
}

// GetURL returns the value of URL.
func (s *RepositoryInvitation) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *RepositoryInvitation) GetHTMLURL() string {
	return s.HTMLURL
}

// GetNodeID returns the value of NodeID.
func (s *RepositoryInvitation) GetNodeID() string {
	return s.NodeID
}

// SetID sets the value of ID.
func (s *RepositoryInvitation) SetID(val int) {
	s.ID = val
}

// SetRepository sets the value of Repository.
func (s *RepositoryInvitation) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetInvitee sets the value of Invitee.
func (s *RepositoryInvitation) SetInvitee(val NilNullableSimpleUser) {
	s.Invitee = val
}

// SetInviter sets the value of Inviter.
func (s *RepositoryInvitation) SetInviter(val NilNullableSimpleUser) {
	s.Inviter = val
}

// SetPermissions sets the value of Permissions.
func (s *RepositoryInvitation) SetPermissions(val RepositoryInvitationPermissions) {
	s.Permissions = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RepositoryInvitation) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetExpired sets the value of Expired.
func (s *RepositoryInvitation) SetExpired(val OptBool) {
	s.Expired = val
}

// SetURL sets the value of URL.
func (s *RepositoryInvitation) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *RepositoryInvitation) SetHTMLURL(val string) {
	s.HTMLURL = val
}

// SetNodeID sets the value of NodeID.
func (s *RepositoryInvitation) SetNodeID(val string) {
	s.NodeID = val
}

func (*RepositoryInvitation) reposAddCollaboratorRes() {}

// The permission associated with the invitation.
type RepositoryInvitationPermissions string

const (
	RepositoryInvitationPermissionsRead     RepositoryInvitationPermissions = "read"
	RepositoryInvitationPermissionsWrite    RepositoryInvitationPermissions = "write"
	RepositoryInvitationPermissionsAdmin    RepositoryInvitationPermissions = "admin"
	RepositoryInvitationPermissionsTriage   RepositoryInvitationPermissions = "triage"
	RepositoryInvitationPermissionsMaintain RepositoryInvitationPermissions = "maintain"
)

// MarshalText implements encoding.TextMarshaler.
func (s RepositoryInvitationPermissions) MarshalText() ([]byte, error) {
	switch s {
	case RepositoryInvitationPermissionsRead:
		return []byte(s), nil
	case RepositoryInvitationPermissionsWrite:
		return []byte(s), nil
	case RepositoryInvitationPermissionsAdmin:
		return []byte(s), nil
	case RepositoryInvitationPermissionsTriage:
		return []byte(s), nil
	case RepositoryInvitationPermissionsMaintain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RepositoryInvitationPermissions) UnmarshalText(data []byte) error {
	switch RepositoryInvitationPermissions(data) {
	case RepositoryInvitationPermissionsRead:
		*s = RepositoryInvitationPermissionsRead
		return nil
	case RepositoryInvitationPermissionsWrite:
		*s = RepositoryInvitationPermissionsWrite
		return nil
	case RepositoryInvitationPermissionsAdmin:
		*s = RepositoryInvitationPermissionsAdmin
		return nil
	case RepositoryInvitationPermissionsTriage:
		*s = RepositoryInvitationPermissionsTriage
		return nil
	case RepositoryInvitationPermissionsMaintain:
		*s = RepositoryInvitationPermissionsMaintain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RepositoryPermissions struct {
	Admin    bool    `json:"admin"`
	Pull     bool    `json:"pull"`
	Triage   OptBool `json:"triage"`
	Push     bool    `json:"push"`
	Maintain OptBool `json:"maintain"`
}

// GetAdmin returns the value of Admin.
func (s *RepositoryPermissions) GetAdmin() bool {
	return s.Admin
}

// GetPull returns the value of Pull.
func (s *RepositoryPermissions) GetPull() bool {
	return s.Pull
}

// GetTriage returns the value of Triage.
func (s *RepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPush returns the value of Push.
func (s *RepositoryPermissions) GetPush() bool {
	return s.Push
}

// GetMaintain returns the value of Maintain.
func (s *RepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// SetAdmin sets the value of Admin.
func (s *RepositoryPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetPull sets the value of Pull.
func (s *RepositoryPermissions) SetPull(val bool) {
	s.Pull = val
}

// SetTriage sets the value of Triage.
func (s *RepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPush sets the value of Push.
func (s *RepositoryPermissions) SetPush(val bool) {
	s.Push = val
}

// SetMaintain sets the value of Maintain.
func (s *RepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// Repository invitations let you manage who you collaborate with.
// Ref: #/components/schemas/repository-subscription
type RepositorySubscription struct {
	// Determines if notifications should be received from this repository.
	Subscribed bool `json:"subscribed"`
	// Determines if all notifications should be blocked from this repository.
	Ignored       bool      `json:"ignored"`
	Reason        NilString `json:"reason"`
	CreatedAt     time.Time `json:"created_at"`
	URL           url.URL   `json:"url"`
	RepositoryURL url.URL   `json:"repository_url"`
}

// GetSubscribed returns the value of Subscribed.
func (s *RepositorySubscription) GetSubscribed() bool {
	return s.Subscribed
}

// GetIgnored returns the value of Ignored.
func (s *RepositorySubscription) GetIgnored() bool {
	return s.Ignored
}

// GetReason returns the value of Reason.
func (s *RepositorySubscription) GetReason() NilString {
	return s.Reason
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RepositorySubscription) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *RepositorySubscription) GetURL() url.URL {
	return s.URL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *RepositorySubscription) GetRepositoryURL() url.URL {
	return s.RepositoryURL
}

// SetSubscribed sets the value of Subscribed.
func (s *RepositorySubscription) SetSubscribed(val bool) {
	s.Subscribed = val
}

// SetIgnored sets the value of Ignored.
func (s *RepositorySubscription) SetIgnored(val bool) {
	s.Ignored = val
}

// SetReason sets the value of Reason.
func (s *RepositorySubscription) SetReason(val NilString) {
	s.Reason = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RepositorySubscription) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *RepositorySubscription) SetURL(val url.URL) {
	s.URL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *RepositorySubscription) SetRepositoryURL(val url.URL) {
	s.RepositoryURL = val
}

func (*RepositorySubscription) activityGetRepoSubscriptionRes() {}

type RepositoryTemplateRepository struct {
	ID                  OptInt                                     `json:"id"`
	NodeID              OptString                                  `json:"node_id"`
	Name                OptString                                  `json:"name"`
	FullName            OptString                                  `json:"full_name"`
	Owner               OptRepositoryTemplateRepositoryOwner       `json:"owner"`
	Private             OptBool                                    `json:"private"`
	HTMLURL             OptString                                  `json:"html_url"`
	Description         OptString                                  `json:"description"`
	Fork                OptBool                                    `json:"fork"`
	URL                 OptString                                  `json:"url"`
	ArchiveURL          OptString                                  `json:"archive_url"`
	AssigneesURL        OptString                                  `json:"assignees_url"`
	BlobsURL            OptString                                  `json:"blobs_url"`
	BranchesURL         OptString                                  `json:"branches_url"`
	CollaboratorsURL    OptString                                  `json:"collaborators_url"`
	CommentsURL         OptString                                  `json:"comments_url"`
	CommitsURL          OptString                                  `json:"commits_url"`
	CompareURL          OptString                                  `json:"compare_url"`
	ContentsURL         OptString                                  `json:"contents_url"`
	ContributorsURL     OptString                                  `json:"contributors_url"`
	DeploymentsURL      OptString                                  `json:"deployments_url"`
	DownloadsURL        OptString                                  `json:"downloads_url"`
	EventsURL           OptString                                  `json:"events_url"`
	ForksURL            OptString                                  `json:"forks_url"`
	GitCommitsURL       OptString                                  `json:"git_commits_url"`
	GitRefsURL          OptString                                  `json:"git_refs_url"`
	GitTagsURL          OptString                                  `json:"git_tags_url"`
	GitURL              OptString                                  `json:"git_url"`
	IssueCommentURL     OptString                                  `json:"issue_comment_url"`
	IssueEventsURL      OptString                                  `json:"issue_events_url"`
	IssuesURL           OptString                                  `json:"issues_url"`
	KeysURL             OptString                                  `json:"keys_url"`
	LabelsURL           OptString                                  `json:"labels_url"`
	LanguagesURL        OptString                                  `json:"languages_url"`
	MergesURL           OptString                                  `json:"merges_url"`
	MilestonesURL       OptString                                  `json:"milestones_url"`
	NotificationsURL    OptString                                  `json:"notifications_url"`
	PullsURL            OptString                                  `json:"pulls_url"`
	ReleasesURL         OptString                                  `json:"releases_url"`
	SSHURL              OptString                                  `json:"ssh_url"`
	StargazersURL       OptString                                  `json:"stargazers_url"`
	StatusesURL         OptString                                  `json:"statuses_url"`
	SubscribersURL      OptString                                  `json:"subscribers_url"`
	SubscriptionURL     OptString                                  `json:"subscription_url"`
	TagsURL             OptString                                  `json:"tags_url"`
	TeamsURL            OptString                                  `json:"teams_url"`
	TreesURL            OptString                                  `json:"trees_url"`
	CloneURL            OptString                                  `json:"clone_url"`
	MirrorURL           OptString                                  `json:"mirror_url"`
	HooksURL            OptString                                  `json:"hooks_url"`
	SvnURL              OptString                                  `json:"svn_url"`
	Homepage            OptString                                  `json:"homepage"`
	Language            OptString                                  `json:"language"`
	ForksCount          OptInt                                     `json:"forks_count"`
	StargazersCount     OptInt                                     `json:"stargazers_count"`
	WatchersCount       OptInt                                     `json:"watchers_count"`
	Size                OptInt                                     `json:"size"`
	DefaultBranch       OptString                                  `json:"default_branch"`
	OpenIssuesCount     OptInt                                     `json:"open_issues_count"`
	IsTemplate          OptBool                                    `json:"is_template"`
	Topics              []string                                   `json:"topics"`
	HasIssues           OptBool                                    `json:"has_issues"`
	HasProjects         OptBool                                    `json:"has_projects"`
	HasWiki             OptBool                                    `json:"has_wiki"`
	HasPages            OptBool                                    `json:"has_pages"`
	HasDownloads        OptBool                                    `json:"has_downloads"`
	Archived            OptBool                                    `json:"archived"`
	Disabled            OptBool                                    `json:"disabled"`
	Visibility          OptString                                  `json:"visibility"`
	PushedAt            OptString                                  `json:"pushed_at"`
	CreatedAt           OptString                                  `json:"created_at"`
	UpdatedAt           OptString                                  `json:"updated_at"`
	Permissions         OptRepositoryTemplateRepositoryPermissions `json:"permissions"`
	AllowRebaseMerge    OptBool                                    `json:"allow_rebase_merge"`
	TempCloneToken      OptString                                  `json:"temp_clone_token"`
	AllowSquashMerge    OptBool                                    `json:"allow_squash_merge"`
	AllowAutoMerge      OptBool                                    `json:"allow_auto_merge"`
	DeleteBranchOnMerge OptBool                                    `json:"delete_branch_on_merge"`
	AllowMergeCommit    OptBool                                    `json:"allow_merge_commit"`
	SubscribersCount    OptInt                                     `json:"subscribers_count"`
	NetworkCount        OptInt                                     `json:"network_count"`
}

// GetID returns the value of ID.
func (s *RepositoryTemplateRepository) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *RepositoryTemplateRepository) GetNodeID() OptString {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *RepositoryTemplateRepository) GetName() OptString {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *RepositoryTemplateRepository) GetFullName() OptString {
	return s.FullName
}

// GetOwner returns the value of Owner.
func (s *RepositoryTemplateRepository) GetOwner() OptRepositoryTemplateRepositoryOwner {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *RepositoryTemplateRepository) GetPrivate() OptBool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *RepositoryTemplateRepository) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *RepositoryTemplateRepository) GetDescription() OptString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *RepositoryTemplateRepository) GetFork() OptBool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *RepositoryTemplateRepository) GetURL() OptString {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *RepositoryTemplateRepository) GetArchiveURL() OptString {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *RepositoryTemplateRepository) GetAssigneesURL() OptString {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *RepositoryTemplateRepository) GetBlobsURL() OptString {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *RepositoryTemplateRepository) GetBranchesURL() OptString {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *RepositoryTemplateRepository) GetCollaboratorsURL() OptString {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *RepositoryTemplateRepository) GetCommentsURL() OptString {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *RepositoryTemplateRepository) GetCommitsURL() OptString {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *RepositoryTemplateRepository) GetCompareURL() OptString {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *RepositoryTemplateRepository) GetContentsURL() OptString {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *RepositoryTemplateRepository) GetContributorsURL() OptString {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *RepositoryTemplateRepository) GetDeploymentsURL() OptString {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *RepositoryTemplateRepository) GetDownloadsURL() OptString {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *RepositoryTemplateRepository) GetEventsURL() OptString {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *RepositoryTemplateRepository) GetForksURL() OptString {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *RepositoryTemplateRepository) GetGitCommitsURL() OptString {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *RepositoryTemplateRepository) GetGitRefsURL() OptString {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *RepositoryTemplateRepository) GetGitTagsURL() OptString {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *RepositoryTemplateRepository) GetGitURL() OptString {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *RepositoryTemplateRepository) GetIssueCommentURL() OptString {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *RepositoryTemplateRepository) GetIssueEventsURL() OptString {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *RepositoryTemplateRepository) GetIssuesURL() OptString {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *RepositoryTemplateRepository) GetKeysURL() OptString {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *RepositoryTemplateRepository) GetLabelsURL() OptString {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *RepositoryTemplateRepository) GetLanguagesURL() OptString {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *RepositoryTemplateRepository) GetMergesURL() OptString {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *RepositoryTemplateRepository) GetMilestonesURL() OptString {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *RepositoryTemplateRepository) GetNotificationsURL() OptString {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *RepositoryTemplateRepository) GetPullsURL() OptString {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *RepositoryTemplateRepository) GetReleasesURL() OptString {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *RepositoryTemplateRepository) GetSSHURL() OptString {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *RepositoryTemplateRepository) GetStargazersURL() OptString {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *RepositoryTemplateRepository) GetStatusesURL() OptString {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *RepositoryTemplateRepository) GetSubscribersURL() OptString {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *RepositoryTemplateRepository) GetSubscriptionURL() OptString {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *RepositoryTemplateRepository) GetTagsURL() OptString {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *RepositoryTemplateRepository) GetTeamsURL() OptString {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *RepositoryTemplateRepository) GetTreesURL() OptString {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *RepositoryTemplateRepository) GetCloneURL() OptString {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *RepositoryTemplateRepository) GetMirrorURL() OptString {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *RepositoryTemplateRepository) GetHooksURL() OptString {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *RepositoryTemplateRepository) GetSvnURL() OptString {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *RepositoryTemplateRepository) GetHomepage() OptString {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *RepositoryTemplateRepository) GetLanguage() OptString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *RepositoryTemplateRepository) GetForksCount() OptInt {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *RepositoryTemplateRepository) GetStargazersCount() OptInt {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *RepositoryTemplateRepository) GetWatchersCount() OptInt {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *RepositoryTemplateRepository) GetSize() OptInt {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *RepositoryTemplateRepository) GetDefaultBranch() OptString {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *RepositoryTemplateRepository) GetOpenIssuesCount() OptInt {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *RepositoryTemplateRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *RepositoryTemplateRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *RepositoryTemplateRepository) GetHasIssues() OptBool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *RepositoryTemplateRepository) GetHasProjects() OptBool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *RepositoryTemplateRepository) GetHasWiki() OptBool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *RepositoryTemplateRepository) GetHasPages() OptBool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *RepositoryTemplateRepository) GetHasDownloads() OptBool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *RepositoryTemplateRepository) GetArchived() OptBool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *RepositoryTemplateRepository) GetDisabled() OptBool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *RepositoryTemplateRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *RepositoryTemplateRepository) GetPushedAt() OptString {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RepositoryTemplateRepository) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RepositoryTemplateRepository) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPermissions returns the value of Permissions.
func (s *RepositoryTemplateRepository) GetPermissions() OptRepositoryTemplateRepositoryPermissions {
	return s.Permissions
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *RepositoryTemplateRepository) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *RepositoryTemplateRepository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *RepositoryTemplateRepository) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *RepositoryTemplateRepository) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *RepositoryTemplateRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *RepositoryTemplateRepository) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *RepositoryTemplateRepository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *RepositoryTemplateRepository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// SetID sets the value of ID.
func (s *RepositoryTemplateRepository) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *RepositoryTemplateRepository) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *RepositoryTemplateRepository) SetName(val OptString) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *RepositoryTemplateRepository) SetFullName(val OptString) {
	s.FullName = val
}

// SetOwner sets the value of Owner.
func (s *RepositoryTemplateRepository) SetOwner(val OptRepositoryTemplateRepositoryOwner) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *RepositoryTemplateRepository) SetPrivate(val OptBool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *RepositoryTemplateRepository) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *RepositoryTemplateRepository) SetDescription(val OptString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *RepositoryTemplateRepository) SetFork(val OptBool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *RepositoryTemplateRepository) SetURL(val OptString) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *RepositoryTemplateRepository) SetArchiveURL(val OptString) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *RepositoryTemplateRepository) SetAssigneesURL(val OptString) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *RepositoryTemplateRepository) SetBlobsURL(val OptString) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *RepositoryTemplateRepository) SetBranchesURL(val OptString) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *RepositoryTemplateRepository) SetCollaboratorsURL(val OptString) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *RepositoryTemplateRepository) SetCommentsURL(val OptString) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *RepositoryTemplateRepository) SetCommitsURL(val OptString) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *RepositoryTemplateRepository) SetCompareURL(val OptString) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *RepositoryTemplateRepository) SetContentsURL(val OptString) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *RepositoryTemplateRepository) SetContributorsURL(val OptString) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *RepositoryTemplateRepository) SetDeploymentsURL(val OptString) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *RepositoryTemplateRepository) SetDownloadsURL(val OptString) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *RepositoryTemplateRepository) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *RepositoryTemplateRepository) SetForksURL(val OptString) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *RepositoryTemplateRepository) SetGitCommitsURL(val OptString) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *RepositoryTemplateRepository) SetGitRefsURL(val OptString) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *RepositoryTemplateRepository) SetGitTagsURL(val OptString) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *RepositoryTemplateRepository) SetGitURL(val OptString) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *RepositoryTemplateRepository) SetIssueCommentURL(val OptString) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *RepositoryTemplateRepository) SetIssueEventsURL(val OptString) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *RepositoryTemplateRepository) SetIssuesURL(val OptString) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *RepositoryTemplateRepository) SetKeysURL(val OptString) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *RepositoryTemplateRepository) SetLabelsURL(val OptString) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *RepositoryTemplateRepository) SetLanguagesURL(val OptString) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *RepositoryTemplateRepository) SetMergesURL(val OptString) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *RepositoryTemplateRepository) SetMilestonesURL(val OptString) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *RepositoryTemplateRepository) SetNotificationsURL(val OptString) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *RepositoryTemplateRepository) SetPullsURL(val OptString) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *RepositoryTemplateRepository) SetReleasesURL(val OptString) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *RepositoryTemplateRepository) SetSSHURL(val OptString) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *RepositoryTemplateRepository) SetStargazersURL(val OptString) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *RepositoryTemplateRepository) SetStatusesURL(val OptString) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *RepositoryTemplateRepository) SetSubscribersURL(val OptString) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *RepositoryTemplateRepository) SetSubscriptionURL(val OptString) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *RepositoryTemplateRepository) SetTagsURL(val OptString) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *RepositoryTemplateRepository) SetTeamsURL(val OptString) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *RepositoryTemplateRepository) SetTreesURL(val OptString) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *RepositoryTemplateRepository) SetCloneURL(val OptString) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *RepositoryTemplateRepository) SetMirrorURL(val OptString) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *RepositoryTemplateRepository) SetHooksURL(val OptString) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *RepositoryTemplateRepository) SetSvnURL(val OptString) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *RepositoryTemplateRepository) SetHomepage(val OptString) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *RepositoryTemplateRepository) SetLanguage(val OptString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *RepositoryTemplateRepository) SetForksCount(val OptInt) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *RepositoryTemplateRepository) SetStargazersCount(val OptInt) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *RepositoryTemplateRepository) SetWatchersCount(val OptInt) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *RepositoryTemplateRepository) SetSize(val OptInt) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *RepositoryTemplateRepository) SetDefaultBranch(val OptString) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *RepositoryTemplateRepository) SetOpenIssuesCount(val OptInt) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *RepositoryTemplateRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *RepositoryTemplateRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *RepositoryTemplateRepository) SetHasIssues(val OptBool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *RepositoryTemplateRepository) SetHasProjects(val OptBool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *RepositoryTemplateRepository) SetHasWiki(val OptBool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *RepositoryTemplateRepository) SetHasPages(val OptBool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *RepositoryTemplateRepository) SetHasDownloads(val OptBool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *RepositoryTemplateRepository) SetArchived(val OptBool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *RepositoryTemplateRepository) SetDisabled(val OptBool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *RepositoryTemplateRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *RepositoryTemplateRepository) SetPushedAt(val OptString) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RepositoryTemplateRepository) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RepositoryTemplateRepository) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPermissions sets the value of Permissions.
func (s *RepositoryTemplateRepository) SetPermissions(val OptRepositoryTemplateRepositoryPermissions) {
	s.Permissions = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *RepositoryTemplateRepository) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *RepositoryTemplateRepository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *RepositoryTemplateRepository) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *RepositoryTemplateRepository) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *RepositoryTemplateRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *RepositoryTemplateRepository) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *RepositoryTemplateRepository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *RepositoryTemplateRepository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

type RepositoryTemplateRepositoryOwner struct {
	Login             OptString `json:"login"`
	ID                OptInt    `json:"id"`
	NodeID            OptString `json:"node_id"`
	AvatarURL         OptString `json:"avatar_url"`
	GravatarID        OptString `json:"gravatar_id"`
	URL               OptString `json:"url"`
	HTMLURL           OptString `json:"html_url"`
	FollowersURL      OptString `json:"followers_url"`
	FollowingURL      OptString `json:"following_url"`
	GistsURL          OptString `json:"gists_url"`
	StarredURL        OptString `json:"starred_url"`
	SubscriptionsURL  OptString `json:"subscriptions_url"`
	OrganizationsURL  OptString `json:"organizations_url"`
	ReposURL          OptString `json:"repos_url"`
	EventsURL         OptString `json:"events_url"`
	ReceivedEventsURL OptString `json:"received_events_url"`
	Type              OptString `json:"type"`
	SiteAdmin         OptBool   `json:"site_admin"`
}

// GetLogin returns the value of Login.
func (s *RepositoryTemplateRepositoryOwner) GetLogin() OptString {
	return s.Login
}

// GetID returns the value of ID.
func (s *RepositoryTemplateRepositoryOwner) GetID() OptInt {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *RepositoryTemplateRepositoryOwner) GetNodeID() OptString {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *RepositoryTemplateRepositoryOwner) GetAvatarURL() OptString {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *RepositoryTemplateRepositoryOwner) GetGravatarID() OptString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *RepositoryTemplateRepositoryOwner) GetURL() OptString {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *RepositoryTemplateRepositoryOwner) GetHTMLURL() OptString {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *RepositoryTemplateRepositoryOwner) GetFollowersURL() OptString {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *RepositoryTemplateRepositoryOwner) GetFollowingURL() OptString {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *RepositoryTemplateRepositoryOwner) GetGistsURL() OptString {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *RepositoryTemplateRepositoryOwner) GetStarredURL() OptString {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *RepositoryTemplateRepositoryOwner) GetSubscriptionsURL() OptString {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *RepositoryTemplateRepositoryOwner) GetOrganizationsURL() OptString {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *RepositoryTemplateRepositoryOwner) GetReposURL() OptString {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *RepositoryTemplateRepositoryOwner) GetEventsURL() OptString {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *RepositoryTemplateRepositoryOwner) GetReceivedEventsURL() OptString {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *RepositoryTemplateRepositoryOwner) GetType() OptString {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *RepositoryTemplateRepositoryOwner) GetSiteAdmin() OptBool {
	return s.SiteAdmin
}

// SetLogin sets the value of Login.
func (s *RepositoryTemplateRepositoryOwner) SetLogin(val OptString) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *RepositoryTemplateRepositoryOwner) SetID(val OptInt) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *RepositoryTemplateRepositoryOwner) SetNodeID(val OptString) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *RepositoryTemplateRepositoryOwner) SetAvatarURL(val OptString) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *RepositoryTemplateRepositoryOwner) SetGravatarID(val OptString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *RepositoryTemplateRepositoryOwner) SetURL(val OptString) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *RepositoryTemplateRepositoryOwner) SetHTMLURL(val OptString) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *RepositoryTemplateRepositoryOwner) SetFollowersURL(val OptString) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *RepositoryTemplateRepositoryOwner) SetFollowingURL(val OptString) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *RepositoryTemplateRepositoryOwner) SetGistsURL(val OptString) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *RepositoryTemplateRepositoryOwner) SetStarredURL(val OptString) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *RepositoryTemplateRepositoryOwner) SetSubscriptionsURL(val OptString) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *RepositoryTemplateRepositoryOwner) SetOrganizationsURL(val OptString) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *RepositoryTemplateRepositoryOwner) SetReposURL(val OptString) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *RepositoryTemplateRepositoryOwner) SetEventsURL(val OptString) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *RepositoryTemplateRepositoryOwner) SetReceivedEventsURL(val OptString) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *RepositoryTemplateRepositoryOwner) SetType(val OptString) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *RepositoryTemplateRepositoryOwner) SetSiteAdmin(val OptBool) {
	s.SiteAdmin = val
}

type RepositoryTemplateRepositoryPermissions struct {
	Admin    OptBool `json:"admin"`
	Maintain OptBool `json:"maintain"`
	Push     OptBool `json:"push"`
	Triage   OptBool `json:"triage"`
	Pull     OptBool `json:"pull"`
}

// GetAdmin returns the value of Admin.
func (s *RepositoryTemplateRepositoryPermissions) GetAdmin() OptBool {
	return s.Admin
}

// GetMaintain returns the value of Maintain.
func (s *RepositoryTemplateRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// GetPush returns the value of Push.
func (s *RepositoryTemplateRepositoryPermissions) GetPush() OptBool {
	return s.Push
}

// GetTriage returns the value of Triage.
func (s *RepositoryTemplateRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPull returns the value of Pull.
func (s *RepositoryTemplateRepositoryPermissions) GetPull() OptBool {
	return s.Pull
}

// SetAdmin sets the value of Admin.
func (s *RepositoryTemplateRepositoryPermissions) SetAdmin(val OptBool) {
	s.Admin = val
}

// SetMaintain sets the value of Maintain.
func (s *RepositoryTemplateRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// SetPush sets the value of Push.
func (s *RepositoryTemplateRepositoryPermissions) SetPush(val OptBool) {
	s.Push = val
}

// SetTriage sets the value of Triage.
func (s *RepositoryTemplateRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPull sets the value of Pull.
func (s *RepositoryTemplateRepositoryPermissions) SetPull(val OptBool) {
	s.Pull = val
}

// Legacy Review Comment.
// Ref: #/components/schemas/review-comment
type ReviewComment struct {
	URL                 url.URL               `json:"url"`
	PullRequestReviewID NilInt                `json:"pull_request_review_id"`
	ID                  int                   `json:"id"`
	NodeID              string                `json:"node_id"`
	DiffHunk            string                `json:"diff_hunk"`
	Path                string                `json:"path"`
	Position            NilInt                `json:"position"`
	OriginalPosition    int                   `json:"original_position"`
	CommitID            string                `json:"commit_id"`
	OriginalCommitID    string                `json:"original_commit_id"`
	InReplyToID         OptInt                `json:"in_reply_to_id"`
	User                NilNullableSimpleUser `json:"user"`
	Body                string                `json:"body"`
	CreatedAt           time.Time             `json:"created_at"`
	UpdatedAt           time.Time             `json:"updated_at"`
	HTMLURL             url.URL               `json:"html_url"`
	PullRequestURL      url.URL               `json:"pull_request_url"`
	AuthorAssociation   AuthorAssociation     `json:"author_association"`
	Links               ReviewCommentLinks    `json:"_links"`
	BodyText            OptString             `json:"body_text"`
	BodyHTML            OptString             `json:"body_html"`
	Reactions           OptReactionRollup     `json:"reactions"`
	// The side of the first line of the range for a multi-line comment.
	Side OptReviewCommentSide `json:"side"`
	// The side of the first line of the range for a multi-line comment.
	StartSide OptNilReviewCommentStartSide `json:"start_side"`
	// The line of the blob to which the comment applies. The last line of the range for a multi-line
	// comment.
	Line OptInt `json:"line"`
	// The original line of the blob to which the comment applies. The last line of the range for a
	// multi-line comment.
	OriginalLine OptInt `json:"original_line"`
	// The first line of the range for a multi-line comment.
	StartLine OptNilInt `json:"start_line"`
	// The original first line of the range for a multi-line comment.
	OriginalStartLine OptNilInt `json:"original_start_line"`
}

// GetURL returns the value of URL.
func (s *ReviewComment) GetURL() url.URL {
	return s.URL
}

// GetPullRequestReviewID returns the value of PullRequestReviewID.
func (s *ReviewComment) GetPullRequestReviewID() NilInt {
	return s.PullRequestReviewID
}

// GetID returns the value of ID.
func (s *ReviewComment) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *ReviewComment) GetNodeID() string {
	return s.NodeID
}

// GetDiffHunk returns the value of DiffHunk.
func (s *ReviewComment) GetDiffHunk() string {
	return s.DiffHunk
}

// GetPath returns the value of Path.
func (s *ReviewComment) GetPath() string {
	return s.Path
}

// GetPosition returns the value of Position.
func (s *ReviewComment) GetPosition() NilInt {
	return s.Position
}

// GetOriginalPosition returns the value of OriginalPosition.
func (s *ReviewComment) GetOriginalPosition() int {
	return s.OriginalPosition
}

// GetCommitID returns the value of CommitID.
func (s *ReviewComment) GetCommitID() string {
	return s.CommitID
}

// GetOriginalCommitID returns the value of OriginalCommitID.
func (s *ReviewComment) GetOriginalCommitID() string {
	return s.OriginalCommitID
}

// GetInReplyToID returns the value of InReplyToID.
func (s *ReviewComment) GetInReplyToID() OptInt {
	return s.InReplyToID
}

// GetUser returns the value of User.
func (s *ReviewComment) GetUser() NilNullableSimpleUser {
	return s.User
}

// GetBody returns the value of Body.
func (s *ReviewComment) GetBody() string {
	return s.Body
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ReviewComment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ReviewComment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetHTMLURL returns the value of HTMLURL.
func (s *ReviewComment) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetPullRequestURL returns the value of PullRequestURL.
func (s *ReviewComment) GetPullRequestURL() url.URL {
	return s.PullRequestURL
}

// GetAuthorAssociation returns the value of AuthorAssociation.
func (s *ReviewComment) GetAuthorAssociation() AuthorAssociation {
	return s.AuthorAssociation
}

// GetLinks returns the value of Links.
func (s *ReviewComment) GetLinks() ReviewCommentLinks {
	return s.Links
}

// GetBodyText returns the value of BodyText.
func (s *ReviewComment) GetBodyText() OptString {
	return s.BodyText
}

// GetBodyHTML returns the value of BodyHTML.
func (s *ReviewComment) GetBodyHTML() OptString {
	return s.BodyHTML
}

// GetReactions returns the value of Reactions.
func (s *ReviewComment) GetReactions() OptReactionRollup {
	return s.Reactions
}

// GetSide returns the value of Side.
func (s *ReviewComment) GetSide() OptReviewCommentSide {
	return s.Side
}

// GetStartSide returns the value of StartSide.
func (s *ReviewComment) GetStartSide() OptNilReviewCommentStartSide {
	return s.StartSide
}

// GetLine returns the value of Line.
func (s *ReviewComment) GetLine() OptInt {
	return s.Line
}

// GetOriginalLine returns the value of OriginalLine.
func (s *ReviewComment) GetOriginalLine() OptInt {
	return s.OriginalLine
}

// GetStartLine returns the value of StartLine.
func (s *ReviewComment) GetStartLine() OptNilInt {
	return s.StartLine
}

// GetOriginalStartLine returns the value of OriginalStartLine.
func (s *ReviewComment) GetOriginalStartLine() OptNilInt {
	return s.OriginalStartLine
}

// SetURL sets the value of URL.
func (s *ReviewComment) SetURL(val url.URL) {
	s.URL = val
}

// SetPullRequestReviewID sets the value of PullRequestReviewID.
func (s *ReviewComment) SetPullRequestReviewID(val NilInt) {
	s.PullRequestReviewID = val
}

// SetID sets the value of ID.
func (s *ReviewComment) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *ReviewComment) SetNodeID(val string) {
	s.NodeID = val
}

// SetDiffHunk sets the value of DiffHunk.
func (s *ReviewComment) SetDiffHunk(val string) {
	s.DiffHunk = val
}

// SetPath sets the value of Path.
func (s *ReviewComment) SetPath(val string) {
	s.Path = val
}

// SetPosition sets the value of Position.
func (s *ReviewComment) SetPosition(val NilInt) {
	s.Position = val
}

// SetOriginalPosition sets the value of OriginalPosition.
func (s *ReviewComment) SetOriginalPosition(val int) {
	s.OriginalPosition = val
}

// SetCommitID sets the value of CommitID.
func (s *ReviewComment) SetCommitID(val string) {
	s.CommitID = val
}

// SetOriginalCommitID sets the value of OriginalCommitID.
func (s *ReviewComment) SetOriginalCommitID(val string) {
	s.OriginalCommitID = val
}

// SetInReplyToID sets the value of InReplyToID.
func (s *ReviewComment) SetInReplyToID(val OptInt) {
	s.InReplyToID = val
}

// SetUser sets the value of User.
func (s *ReviewComment) SetUser(val NilNullableSimpleUser) {
	s.User = val
}

// SetBody sets the value of Body.
func (s *ReviewComment) SetBody(val string) {
	s.Body = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ReviewComment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ReviewComment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *ReviewComment) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetPullRequestURL sets the value of PullRequestURL.
func (s *ReviewComment) SetPullRequestURL(val url.URL) {
	s.PullRequestURL = val
}

// SetAuthorAssociation sets the value of AuthorAssociation.
func (s *ReviewComment) SetAuthorAssociation(val AuthorAssociation) {
	s.AuthorAssociation = val
}

// SetLinks sets the value of Links.
func (s *ReviewComment) SetLinks(val ReviewCommentLinks) {
	s.Links = val
}

// SetBodyText sets the value of BodyText.
func (s *ReviewComment) SetBodyText(val OptString) {
	s.BodyText = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *ReviewComment) SetBodyHTML(val OptString) {
	s.BodyHTML = val
}

// SetReactions sets the value of Reactions.
func (s *ReviewComment) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

// SetSide sets the value of Side.
func (s *ReviewComment) SetSide(val OptReviewCommentSide) {
	s.Side = val
}

// SetStartSide sets the value of StartSide.
func (s *ReviewComment) SetStartSide(val OptNilReviewCommentStartSide) {
	s.StartSide = val
}

// SetLine sets the value of Line.
func (s *ReviewComment) SetLine(val OptInt) {
	s.Line = val
}

// SetOriginalLine sets the value of OriginalLine.
func (s *ReviewComment) SetOriginalLine(val OptInt) {
	s.OriginalLine = val
}

// SetStartLine sets the value of StartLine.
func (s *ReviewComment) SetStartLine(val OptNilInt) {
	s.StartLine = val
}

// SetOriginalStartLine sets the value of OriginalStartLine.
func (s *ReviewComment) SetOriginalStartLine(val OptNilInt) {
	s.OriginalStartLine = val
}

type ReviewCommentLinks struct {
	Self        Link `json:"self"`
	HTML        Link `json:"html"`
	PullRequest Link `json:"pull_request"`
}

// GetSelf returns the value of Self.
func (s *ReviewCommentLinks) GetSelf() Link {
	return s.Self
}

// GetHTML returns the value of HTML.
func (s *ReviewCommentLinks) GetHTML() Link {
	return s.HTML
}

// GetPullRequest returns the value of PullRequest.
func (s *ReviewCommentLinks) GetPullRequest() Link {
	return s.PullRequest
}

// SetSelf sets the value of Self.
func (s *ReviewCommentLinks) SetSelf(val Link) {
	s.Self = val
}

// SetHTML sets the value of HTML.
func (s *ReviewCommentLinks) SetHTML(val Link) {
	s.HTML = val
}

// SetPullRequest sets the value of PullRequest.
func (s *ReviewCommentLinks) SetPullRequest(val Link) {
	s.PullRequest = val
}

// The side of the first line of the range for a multi-line comment.
type ReviewCommentSide string

const (
	ReviewCommentSideLEFT  ReviewCommentSide = "LEFT"
	ReviewCommentSideRIGHT ReviewCommentSide = "RIGHT"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReviewCommentSide) MarshalText() ([]byte, error) {
	switch s {
	case ReviewCommentSideLEFT:
		return []byte(s), nil
	case ReviewCommentSideRIGHT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReviewCommentSide) UnmarshalText(data []byte) error {
	switch ReviewCommentSide(data) {
	case ReviewCommentSideLEFT:
		*s = ReviewCommentSideLEFT
		return nil
	case ReviewCommentSideRIGHT:
		*s = ReviewCommentSideRIGHT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The side of the first line of the range for a multi-line comment.
type ReviewCommentStartSide string

const (
	ReviewCommentStartSideLEFT  ReviewCommentStartSide = "LEFT"
	ReviewCommentStartSideRIGHT ReviewCommentStartSide = "RIGHT"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReviewCommentStartSide) MarshalText() ([]byte, error) {
	switch s {
	case ReviewCommentStartSideLEFT:
		return []byte(s), nil
	case ReviewCommentStartSideRIGHT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReviewCommentStartSide) UnmarshalText(data []byte) error {
	switch ReviewCommentStartSide(data) {
	case ReviewCommentStartSideLEFT:
		*s = ReviewCommentStartSideLEFT
		return nil
	case ReviewCommentStartSideRIGHT:
		*s = ReviewCommentStartSideRIGHT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A self hosted runner.
// Ref: #/components/schemas/runner
type Runner struct {
	// The id of the runner.
	ID int `json:"id"`
	// The name of the runner.
	Name string `json:"name"`
	// The Operating System of the runner.
	Os string `json:"os"`
	// The status of the runner.
	Status string             `json:"status"`
	Busy   bool               `json:"busy"`
	Labels []RunnerLabelsItem `json:"labels"`
}

// GetID returns the value of ID.
func (s *Runner) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Runner) GetName() string {
	return s.Name
}

// GetOs returns the value of Os.
func (s *Runner) GetOs() string {
	return s.Os
}

// GetStatus returns the value of Status.
func (s *Runner) GetStatus() string {
	return s.Status
}

// GetBusy returns the value of Busy.
func (s *Runner) GetBusy() bool {
	return s.Busy
}

// GetLabels returns the value of Labels.
func (s *Runner) GetLabels() []RunnerLabelsItem {
	return s.Labels
}

// SetID sets the value of ID.
func (s *Runner) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Runner) SetName(val string) {
	s.Name = val
}

// SetOs sets the value of Os.
func (s *Runner) SetOs(val string) {
	s.Os = val
}

// SetStatus sets the value of Status.
func (s *Runner) SetStatus(val string) {
	s.Status = val
}

// SetBusy sets the value of Busy.
func (s *Runner) SetBusy(val bool) {
	s.Busy = val
}

// SetLabels sets the value of Labels.
func (s *Runner) SetLabels(val []RunnerLabelsItem) {
	s.Labels = val
}

// Runner Application.
// Ref: #/components/schemas/runner-application
type RunnerApplication struct {
	Os           string `json:"os"`
	Architecture string `json:"architecture"`
	DownloadURL  string `json:"download_url"`
	Filename     string `json:"filename"`
	// A short lived bearer token used to download the runner, if needed.
	TempDownloadToken OptString `json:"temp_download_token"`
	SHA256Checksum    OptString `json:"sha256_checksum"`
}

// GetOs returns the value of Os.
func (s *RunnerApplication) GetOs() string {
	return s.Os
}

// GetArchitecture returns the value of Architecture.
func (s *RunnerApplication) GetArchitecture() string {
	return s.Architecture
}

// GetDownloadURL returns the value of DownloadURL.
func (s *RunnerApplication) GetDownloadURL() string {
	return s.DownloadURL
}

// GetFilename returns the value of Filename.
func (s *RunnerApplication) GetFilename() string {
	return s.Filename
}

// GetTempDownloadToken returns the value of TempDownloadToken.
func (s *RunnerApplication) GetTempDownloadToken() OptString {
	return s.TempDownloadToken
}

// GetSHA256Checksum returns the value of SHA256Checksum.
func (s *RunnerApplication) GetSHA256Checksum() OptString {
	return s.SHA256Checksum
}

// SetOs sets the value of Os.
func (s *RunnerApplication) SetOs(val string) {
	s.Os = val
}

// SetArchitecture sets the value of Architecture.
func (s *RunnerApplication) SetArchitecture(val string) {
	s.Architecture = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *RunnerApplication) SetDownloadURL(val string) {
	s.DownloadURL = val
}

// SetFilename sets the value of Filename.
func (s *RunnerApplication) SetFilename(val string) {
	s.Filename = val
}

// SetTempDownloadToken sets the value of TempDownloadToken.
func (s *RunnerApplication) SetTempDownloadToken(val OptString) {
	s.TempDownloadToken = val
}

// SetSHA256Checksum sets the value of SHA256Checksum.
func (s *RunnerApplication) SetSHA256Checksum(val OptString) {
	s.SHA256Checksum = val
}

// Ref: #/components/schemas/runner-groups-enterprise
type RunnerGroupsEnterprise struct {
	ID                       float64   `json:"id"`
	Name                     string    `json:"name"`
	Visibility               string    `json:"visibility"`
	Default                  bool      `json:"default"`
	SelectedOrganizationsURL OptString `json:"selected_organizations_url"`
	RunnersURL               string    `json:"runners_url"`
	AllowsPublicRepositories bool      `json:"allows_public_repositories"`
}

// GetID returns the value of ID.
func (s *RunnerGroupsEnterprise) GetID() float64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *RunnerGroupsEnterprise) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *RunnerGroupsEnterprise) GetVisibility() string {
	return s.Visibility
}

// GetDefault returns the value of Default.
func (s *RunnerGroupsEnterprise) GetDefault() bool {
	return s.Default
}

// GetSelectedOrganizationsURL returns the value of SelectedOrganizationsURL.
func (s *RunnerGroupsEnterprise) GetSelectedOrganizationsURL() OptString {
	return s.SelectedOrganizationsURL
}

// GetRunnersURL returns the value of RunnersURL.
func (s *RunnerGroupsEnterprise) GetRunnersURL() string {
	return s.RunnersURL
}

// GetAllowsPublicRepositories returns the value of AllowsPublicRepositories.
func (s *RunnerGroupsEnterprise) GetAllowsPublicRepositories() bool {
	return s.AllowsPublicRepositories
}

// SetID sets the value of ID.
func (s *RunnerGroupsEnterprise) SetID(val float64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RunnerGroupsEnterprise) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *RunnerGroupsEnterprise) SetVisibility(val string) {
	s.Visibility = val
}

// SetDefault sets the value of Default.
func (s *RunnerGroupsEnterprise) SetDefault(val bool) {
	s.Default = val
}

// SetSelectedOrganizationsURL sets the value of SelectedOrganizationsURL.
func (s *RunnerGroupsEnterprise) SetSelectedOrganizationsURL(val OptString) {
	s.SelectedOrganizationsURL = val
}

// SetRunnersURL sets the value of RunnersURL.
func (s *RunnerGroupsEnterprise) SetRunnersURL(val string) {
	s.RunnersURL = val
}

// SetAllowsPublicRepositories sets the value of AllowsPublicRepositories.
func (s *RunnerGroupsEnterprise) SetAllowsPublicRepositories(val bool) {
	s.AllowsPublicRepositories = val
}

// Ref: #/components/schemas/runner-groups-org
type RunnerGroupsOrg struct {
	ID         float64 `json:"id"`
	Name       string  `json:"name"`
	Visibility string  `json:"visibility"`
	Default    bool    `json:"default"`
	// Link to the selected repositories resource for this runner group. Not present unless visibility
	// was set to `selected`.
	SelectedRepositoriesURL           OptString `json:"selected_repositories_url"`
	RunnersURL                        string    `json:"runners_url"`
	Inherited                         bool      `json:"inherited"`
	InheritedAllowsPublicRepositories OptBool   `json:"inherited_allows_public_repositories"`
	AllowsPublicRepositories          bool      `json:"allows_public_repositories"`
}

// GetID returns the value of ID.
func (s *RunnerGroupsOrg) GetID() float64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *RunnerGroupsOrg) GetName() string {
	return s.Name
}

// GetVisibility returns the value of Visibility.
func (s *RunnerGroupsOrg) GetVisibility() string {
	return s.Visibility
}

// GetDefault returns the value of Default.
func (s *RunnerGroupsOrg) GetDefault() bool {
	return s.Default
}

// GetSelectedRepositoriesURL returns the value of SelectedRepositoriesURL.
func (s *RunnerGroupsOrg) GetSelectedRepositoriesURL() OptString {
	return s.SelectedRepositoriesURL
}

// GetRunnersURL returns the value of RunnersURL.
func (s *RunnerGroupsOrg) GetRunnersURL() string {
	return s.RunnersURL
}

// GetInherited returns the value of Inherited.
func (s *RunnerGroupsOrg) GetInherited() bool {
	return s.Inherited
}

// GetInheritedAllowsPublicRepositories returns the value of InheritedAllowsPublicRepositories.
func (s *RunnerGroupsOrg) GetInheritedAllowsPublicRepositories() OptBool {
	return s.InheritedAllowsPublicRepositories
}

// GetAllowsPublicRepositories returns the value of AllowsPublicRepositories.
func (s *RunnerGroupsOrg) GetAllowsPublicRepositories() bool {
	return s.AllowsPublicRepositories
}

// SetID sets the value of ID.
func (s *RunnerGroupsOrg) SetID(val float64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RunnerGroupsOrg) SetName(val string) {
	s.Name = val
}

// SetVisibility sets the value of Visibility.
func (s *RunnerGroupsOrg) SetVisibility(val string) {
	s.Visibility = val
}

// SetDefault sets the value of Default.
func (s *RunnerGroupsOrg) SetDefault(val bool) {
	s.Default = val
}

// SetSelectedRepositoriesURL sets the value of SelectedRepositoriesURL.
func (s *RunnerGroupsOrg) SetSelectedRepositoriesURL(val OptString) {
	s.SelectedRepositoriesURL = val
}

// SetRunnersURL sets the value of RunnersURL.
func (s *RunnerGroupsOrg) SetRunnersURL(val string) {
	s.RunnersURL = val
}

// SetInherited sets the value of Inherited.
func (s *RunnerGroupsOrg) SetInherited(val bool) {
	s.Inherited = val
}

// SetInheritedAllowsPublicRepositories sets the value of InheritedAllowsPublicRepositories.
func (s *RunnerGroupsOrg) SetInheritedAllowsPublicRepositories(val OptBool) {
	s.InheritedAllowsPublicRepositories = val
}

// SetAllowsPublicRepositories sets the value of AllowsPublicRepositories.
func (s *RunnerGroupsOrg) SetAllowsPublicRepositories(val bool) {
	s.AllowsPublicRepositories = val
}

type RunnerLabelsItem struct {
	// Unique identifier of the label.
	ID OptInt `json:"id"`
	// Name of the label.
	Name OptString `json:"name"`
	// The type of label. Read-only labels are applied automatically when the runner is configured.
	Type OptRunnerLabelsItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *RunnerLabelsItem) GetID() OptInt {
	return s.ID
}

// GetName returns the value of Name.
func (s *RunnerLabelsItem) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *RunnerLabelsItem) GetType() OptRunnerLabelsItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *RunnerLabelsItem) SetID(val OptInt) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RunnerLabelsItem) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *RunnerLabelsItem) SetType(val OptRunnerLabelsItemType) {
	s.Type = val
}

// The type of label. Read-only labels are applied automatically when the runner is configured.
type RunnerLabelsItemType string

const (
	RunnerLabelsItemTypeReadOnly RunnerLabelsItemType = "read-only"
	RunnerLabelsItemTypeCustom   RunnerLabelsItemType = "custom"
)

// MarshalText implements encoding.TextMarshaler.
func (s RunnerLabelsItemType) MarshalText() ([]byte, error) {
	switch s {
	case RunnerLabelsItemTypeReadOnly:
		return []byte(s), nil
	case RunnerLabelsItemTypeCustom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunnerLabelsItemType) UnmarshalText(data []byte) error {
	switch RunnerLabelsItemType(data) {
	case RunnerLabelsItemTypeReadOnly:
		*s = RunnerLabelsItemTypeReadOnly
		return nil
	case RunnerLabelsItemTypeCustom:
		*s = RunnerLabelsItemTypeCustom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ScimDeleteUserFromOrgForbidden ScimError

func (*ScimDeleteUserFromOrgForbidden) scimDeleteUserFromOrgRes() {}

// ScimDeleteUserFromOrgNoContent is response for ScimDeleteUserFromOrg operation.
type ScimDeleteUserFromOrgNoContent struct{}

func (*ScimDeleteUserFromOrgNoContent) scimDeleteUserFromOrgRes() {}

type ScimDeleteUserFromOrgNotFound ScimError

func (*ScimDeleteUserFromOrgNotFound) scimDeleteUserFromOrgRes() {}

// Ref: #/components/schemas/scim-enterprise-group
type ScimEnterpriseGroup struct {
	Schemas     []string                         `json:"schemas"`
	ID          string                           `json:"id"`
	ExternalId  OptNilString                     `json:"externalId"`
	DisplayName OptString                        `json:"displayName"`
	Members     []ScimEnterpriseGroupMembersItem `json:"members"`
	Meta        OptScimEnterpriseGroupMeta       `json:"meta"`
}

// GetSchemas returns the value of Schemas.
func (s *ScimEnterpriseGroup) GetSchemas() []string {
	return s.Schemas
}

// GetID returns the value of ID.
func (s *ScimEnterpriseGroup) GetID() string {
	return s.ID
}

// GetExternalId returns the value of ExternalId.
func (s *ScimEnterpriseGroup) GetExternalId() OptNilString {
	return s.ExternalId
}

// GetDisplayName returns the value of DisplayName.
func (s *ScimEnterpriseGroup) GetDisplayName() OptString {
	return s.DisplayName
}

// GetMembers returns the value of Members.
func (s *ScimEnterpriseGroup) GetMembers() []ScimEnterpriseGroupMembersItem {
	return s.Members
}

// GetMeta returns the value of Meta.
func (s *ScimEnterpriseGroup) GetMeta() OptScimEnterpriseGroupMeta {
	return s.Meta
}

// SetSchemas sets the value of Schemas.
func (s *ScimEnterpriseGroup) SetSchemas(val []string) {
	s.Schemas = val
}

// SetID sets the value of ID.
func (s *ScimEnterpriseGroup) SetID(val string) {
	s.ID = val
}

// SetExternalId sets the value of ExternalId.
func (s *ScimEnterpriseGroup) SetExternalId(val OptNilString) {
	s.ExternalId = val
}

// SetDisplayName sets the value of DisplayName.
func (s *ScimEnterpriseGroup) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetMembers sets the value of Members.
func (s *ScimEnterpriseGroup) SetMembers(val []ScimEnterpriseGroupMembersItem) {
	s.Members = val
}

// SetMeta sets the value of Meta.
func (s *ScimEnterpriseGroup) SetMeta(val OptScimEnterpriseGroupMeta) {
	s.Meta = val
}

type ScimEnterpriseGroupMembersItem struct {
	Value   OptString `json:"value"`
	Ref     OptString `json:"$ref"`
	Display OptString `json:"display"`
}

// GetValue returns the value of Value.
func (s *ScimEnterpriseGroupMembersItem) GetValue() OptString {
	return s.Value
}

// GetRef returns the value of Ref.
func (s *ScimEnterpriseGroupMembersItem) GetRef() OptString {
	return s.Ref
}

// GetDisplay returns the value of Display.
func (s *ScimEnterpriseGroupMembersItem) GetDisplay() OptString {
	return s.Display
}

// SetValue sets the value of Value.
func (s *ScimEnterpriseGroupMembersItem) SetValue(val OptString) {
	s.Value = val
}

// SetRef sets the value of Ref.
func (s *ScimEnterpriseGroupMembersItem) SetRef(val OptString) {
	s.Ref = val
}

// SetDisplay sets the value of Display.
func (s *ScimEnterpriseGroupMembersItem) SetDisplay(val OptString) {
	s.Display = val
}

type ScimEnterpriseGroupMeta struct {
	ResourceType OptString `json:"resourceType"`
	Created      OptString `json:"created"`
	LastModified OptString `json:"lastModified"`
	Location     OptString `json:"location"`
}

// GetResourceType returns the value of ResourceType.
func (s *ScimEnterpriseGroupMeta) GetResourceType() OptString {
	return s.ResourceType
}

// GetCreated returns the value of Created.
func (s *ScimEnterpriseGroupMeta) GetCreated() OptString {
	return s.Created
}

// GetLastModified returns the value of LastModified.
func (s *ScimEnterpriseGroupMeta) GetLastModified() OptString {
	return s.LastModified
}

// GetLocation returns the value of Location.
func (s *ScimEnterpriseGroupMeta) GetLocation() OptString {
	return s.Location
}

// SetResourceType sets the value of ResourceType.
func (s *ScimEnterpriseGroupMeta) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetCreated sets the value of Created.
func (s *ScimEnterpriseGroupMeta) SetCreated(val OptString) {
	s.Created = val
}

// SetLastModified sets the value of LastModified.
func (s *ScimEnterpriseGroupMeta) SetLastModified(val OptString) {
	s.LastModified = val
}

// SetLocation sets the value of Location.
func (s *ScimEnterpriseGroupMeta) SetLocation(val OptString) {
	s.Location = val
}

// Ref: #/components/schemas/scim-enterprise-user
type ScimEnterpriseUser struct {
	Schemas    []string                       `json:"schemas"`
	ID         string                         `json:"id"`
	ExternalId OptString                      `json:"externalId"`
	UserName   OptString                      `json:"userName"`
	Name       OptScimEnterpriseUserName      `json:"name"`
	Emails     []ScimEnterpriseUserEmailsItem `json:"emails"`
	Groups     []ScimEnterpriseUserGroupsItem `json:"groups"`
	Active     OptBool                        `json:"active"`
	Meta       OptScimEnterpriseUserMeta      `json:"meta"`
}

// GetSchemas returns the value of Schemas.
func (s *ScimEnterpriseUser) GetSchemas() []string {
	return s.Schemas
}

// GetID returns the value of ID.
func (s *ScimEnterpriseUser) GetID() string {
	return s.ID
}

// GetExternalId returns the value of ExternalId.
func (s *ScimEnterpriseUser) GetExternalId() OptString {
	return s.ExternalId
}

// GetUserName returns the value of UserName.
func (s *ScimEnterpriseUser) GetUserName() OptString {
	return s.UserName
}

// GetName returns the value of Name.
func (s *ScimEnterpriseUser) GetName() OptScimEnterpriseUserName {
	return s.Name
}

// GetEmails returns the value of Emails.
func (s *ScimEnterpriseUser) GetEmails() []ScimEnterpriseUserEmailsItem {
	return s.Emails
}

// GetGroups returns the value of Groups.
func (s *ScimEnterpriseUser) GetGroups() []ScimEnterpriseUserGroupsItem {
	return s.Groups
}

// GetActive returns the value of Active.
func (s *ScimEnterpriseUser) GetActive() OptBool {
	return s.Active
}

// GetMeta returns the value of Meta.
func (s *ScimEnterpriseUser) GetMeta() OptScimEnterpriseUserMeta {
	return s.Meta
}

// SetSchemas sets the value of Schemas.
func (s *ScimEnterpriseUser) SetSchemas(val []string) {
	s.Schemas = val
}

// SetID sets the value of ID.
func (s *ScimEnterpriseUser) SetID(val string) {
	s.ID = val
}

// SetExternalId sets the value of ExternalId.
func (s *ScimEnterpriseUser) SetExternalId(val OptString) {
	s.ExternalId = val
}

// SetUserName sets the value of UserName.
func (s *ScimEnterpriseUser) SetUserName(val OptString) {
	s.UserName = val
}

// SetName sets the value of Name.
func (s *ScimEnterpriseUser) SetName(val OptScimEnterpriseUserName) {
	s.Name = val
}

// SetEmails sets the value of Emails.
func (s *ScimEnterpriseUser) SetEmails(val []ScimEnterpriseUserEmailsItem) {
	s.Emails = val
}

// SetGroups sets the value of Groups.
func (s *ScimEnterpriseUser) SetGroups(val []ScimEnterpriseUserGroupsItem) {
	s.Groups = val
}

// SetActive sets the value of Active.
func (s *ScimEnterpriseUser) SetActive(val OptBool) {
	s.Active = val
}

// SetMeta sets the value of Meta.
func (s *ScimEnterpriseUser) SetMeta(val OptScimEnterpriseUserMeta) {
	s.Meta = val
}

type ScimEnterpriseUserEmailsItem struct {
	Value   OptString `json:"value"`
	Type    OptString `json:"type"`
	Primary OptBool   `json:"primary"`
}

// GetValue returns the value of Value.
func (s *ScimEnterpriseUserEmailsItem) GetValue() OptString {
	return s.Value
}

// GetType returns the value of Type.
func (s *ScimEnterpriseUserEmailsItem) GetType() OptString {
	return s.Type
}

// GetPrimary returns the value of Primary.
func (s *ScimEnterpriseUserEmailsItem) GetPrimary() OptBool {
	return s.Primary
}

// SetValue sets the value of Value.
func (s *ScimEnterpriseUserEmailsItem) SetValue(val OptString) {
	s.Value = val
}

// SetType sets the value of Type.
func (s *ScimEnterpriseUserEmailsItem) SetType(val OptString) {
	s.Type = val
}

// SetPrimary sets the value of Primary.
func (s *ScimEnterpriseUserEmailsItem) SetPrimary(val OptBool) {
	s.Primary = val
}

type ScimEnterpriseUserGroupsItem struct {
	Value OptString `json:"value"`
}

// GetValue returns the value of Value.
func (s *ScimEnterpriseUserGroupsItem) GetValue() OptString {
	return s.Value
}

// SetValue sets the value of Value.
func (s *ScimEnterpriseUserGroupsItem) SetValue(val OptString) {
	s.Value = val
}

type ScimEnterpriseUserMeta struct {
	ResourceType OptString `json:"resourceType"`
	Created      OptString `json:"created"`
	LastModified OptString `json:"lastModified"`
	Location     OptString `json:"location"`
}

// GetResourceType returns the value of ResourceType.
func (s *ScimEnterpriseUserMeta) GetResourceType() OptString {
	return s.ResourceType
}

// GetCreated returns the value of Created.
func (s *ScimEnterpriseUserMeta) GetCreated() OptString {
	return s.Created
}

// GetLastModified returns the value of LastModified.
func (s *ScimEnterpriseUserMeta) GetLastModified() OptString {
	return s.LastModified
}

// GetLocation returns the value of Location.
func (s *ScimEnterpriseUserMeta) GetLocation() OptString {
	return s.Location
}

// SetResourceType sets the value of ResourceType.
func (s *ScimEnterpriseUserMeta) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetCreated sets the value of Created.
func (s *ScimEnterpriseUserMeta) SetCreated(val OptString) {
	s.Created = val
}

// SetLastModified sets the value of LastModified.
func (s *ScimEnterpriseUserMeta) SetLastModified(val OptString) {
	s.LastModified = val
}

// SetLocation sets the value of Location.
func (s *ScimEnterpriseUserMeta) SetLocation(val OptString) {
	s.Location = val
}

type ScimEnterpriseUserName struct {
	GivenName  OptString `json:"givenName"`
	FamilyName OptString `json:"familyName"`
}

// GetGivenName returns the value of GivenName.
func (s *ScimEnterpriseUserName) GetGivenName() OptString {
	return s.GivenName
}

// GetFamilyName returns the value of FamilyName.
func (s *ScimEnterpriseUserName) GetFamilyName() OptString {
	return s.FamilyName
}

// SetGivenName sets the value of GivenName.
func (s *ScimEnterpriseUserName) SetGivenName(val OptString) {
	s.GivenName = val
}

// SetFamilyName sets the value of FamilyName.
func (s *ScimEnterpriseUserName) SetFamilyName(val OptString) {
	s.FamilyName = val
}

// Scim Error.
// Ref: #/components/schemas/scim-error
type ScimError struct {
	Message          OptNilString `json:"message"`
	DocumentationURL OptNilString `json:"documentation_url"`
	Detail           OptNilString `json:"detail"`
	Status           OptInt       `json:"status"`
	ScimType         OptNilString `json:"scimType"`
	Schemas          []string     `json:"schemas"`
}

// GetMessage returns the value of Message.
func (s *ScimError) GetMessage() OptNilString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ScimError) GetDocumentationURL() OptNilString {
	return s.DocumentationURL
}

// GetDetail returns the value of Detail.
func (s *ScimError) GetDetail() OptNilString {
	return s.Detail
}

// GetStatus returns the value of Status.
func (s *ScimError) GetStatus() OptInt {
	return s.Status
}

// GetScimType returns the value of ScimType.
func (s *ScimError) GetScimType() OptNilString {
	return s.ScimType
}

// GetSchemas returns the value of Schemas.
func (s *ScimError) GetSchemas() []string {
	return s.Schemas
}

// SetMessage sets the value of Message.
func (s *ScimError) SetMessage(val OptNilString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ScimError) SetDocumentationURL(val OptNilString) {
	s.DocumentationURL = val
}

// SetDetail sets the value of Detail.
func (s *ScimError) SetDetail(val OptNilString) {
	s.Detail = val
}

// SetStatus sets the value of Status.
func (s *ScimError) SetStatus(val OptInt) {
	s.Status = val
}

// SetScimType sets the value of ScimType.
func (s *ScimError) SetScimType(val OptNilString) {
	s.ScimType = val
}

// SetSchemas sets the value of Schemas.
func (s *ScimError) SetSchemas(val []string) {
	s.Schemas = val
}

// Ref: #/components/schemas/scim-group-list-enterprise
type ScimGroupListEnterprise struct {
	Schemas      []string                               `json:"schemas"`
	TotalResults float64                                `json:"totalResults"`
	ItemsPerPage float64                                `json:"itemsPerPage"`
	StartIndex   float64                                `json:"startIndex"`
	Resources    []ScimGroupListEnterpriseResourcesItem `json:"Resources"`
}

// GetSchemas returns the value of Schemas.
func (s *ScimGroupListEnterprise) GetSchemas() []string {
	return s.Schemas
}

// GetTotalResults returns the value of TotalResults.
func (s *ScimGroupListEnterprise) GetTotalResults() float64 {
	return s.TotalResults
}

// GetItemsPerPage returns the value of ItemsPerPage.
func (s *ScimGroupListEnterprise) GetItemsPerPage() float64 {
	return s.ItemsPerPage
}

// GetStartIndex returns the value of StartIndex.
func (s *ScimGroupListEnterprise) GetStartIndex() float64 {
	return s.StartIndex
}

// GetResources returns the value of Resources.
func (s *ScimGroupListEnterprise) GetResources() []ScimGroupListEnterpriseResourcesItem {
	return s.Resources
}

// SetSchemas sets the value of Schemas.
func (s *ScimGroupListEnterprise) SetSchemas(val []string) {
	s.Schemas = val
}

// SetTotalResults sets the value of TotalResults.
func (s *ScimGroupListEnterprise) SetTotalResults(val float64) {
	s.TotalResults = val
}

// SetItemsPerPage sets the value of ItemsPerPage.
func (s *ScimGroupListEnterprise) SetItemsPerPage(val float64) {
	s.ItemsPerPage = val
}

// SetStartIndex sets the value of StartIndex.
func (s *ScimGroupListEnterprise) SetStartIndex(val float64) {
	s.StartIndex = val
}

// SetResources sets the value of Resources.
func (s *ScimGroupListEnterprise) SetResources(val []ScimGroupListEnterpriseResourcesItem) {
	s.Resources = val
}

type ScimGroupListEnterpriseResourcesItem struct {
	Schemas     []string                                          `json:"schemas"`
	ID          string                                            `json:"id"`
	ExternalId  OptNilString                                      `json:"externalId"`
	DisplayName OptString                                         `json:"displayName"`
	Members     []ScimGroupListEnterpriseResourcesItemMembersItem `json:"members"`
	Meta        OptScimGroupListEnterpriseResourcesItemMeta       `json:"meta"`
}

// GetSchemas returns the value of Schemas.
func (s *ScimGroupListEnterpriseResourcesItem) GetSchemas() []string {
	return s.Schemas
}

// GetID returns the value of ID.
func (s *ScimGroupListEnterpriseResourcesItem) GetID() string {
	return s.ID
}

// GetExternalId returns the value of ExternalId.
func (s *ScimGroupListEnterpriseResourcesItem) GetExternalId() OptNilString {
	return s.ExternalId
}

// GetDisplayName returns the value of DisplayName.
func (s *ScimGroupListEnterpriseResourcesItem) GetDisplayName() OptString {
	return s.DisplayName
}

// GetMembers returns the value of Members.
func (s *ScimGroupListEnterpriseResourcesItem) GetMembers() []ScimGroupListEnterpriseResourcesItemMembersItem {
	return s.Members
}

// GetMeta returns the value of Meta.
func (s *ScimGroupListEnterpriseResourcesItem) GetMeta() OptScimGroupListEnterpriseResourcesItemMeta {
	return s.Meta
}

// SetSchemas sets the value of Schemas.
func (s *ScimGroupListEnterpriseResourcesItem) SetSchemas(val []string) {
	s.Schemas = val
}

// SetID sets the value of ID.
func (s *ScimGroupListEnterpriseResourcesItem) SetID(val string) {
	s.ID = val
}

// SetExternalId sets the value of ExternalId.
func (s *ScimGroupListEnterpriseResourcesItem) SetExternalId(val OptNilString) {
	s.ExternalId = val
}

// SetDisplayName sets the value of DisplayName.
func (s *ScimGroupListEnterpriseResourcesItem) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetMembers sets the value of Members.
func (s *ScimGroupListEnterpriseResourcesItem) SetMembers(val []ScimGroupListEnterpriseResourcesItemMembersItem) {
	s.Members = val
}

// SetMeta sets the value of Meta.
func (s *ScimGroupListEnterpriseResourcesItem) SetMeta(val OptScimGroupListEnterpriseResourcesItemMeta) {
	s.Meta = val
}

type ScimGroupListEnterpriseResourcesItemMembersItem struct {
	Value   OptString `json:"value"`
	Ref     OptString `json:"$ref"`
	Display OptString `json:"display"`
}

// GetValue returns the value of Value.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) GetValue() OptString {
	return s.Value
}

// GetRef returns the value of Ref.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) GetRef() OptString {
	return s.Ref
}

// GetDisplay returns the value of Display.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) GetDisplay() OptString {
	return s.Display
}

// SetValue sets the value of Value.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) SetValue(val OptString) {
	s.Value = val
}

// SetRef sets the value of Ref.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) SetRef(val OptString) {
	s.Ref = val
}

// SetDisplay sets the value of Display.
func (s *ScimGroupListEnterpriseResourcesItemMembersItem) SetDisplay(val OptString) {
	s.Display = val
}

type ScimGroupListEnterpriseResourcesItemMeta struct {
	ResourceType OptString `json:"resourceType"`
	Created      OptString `json:"created"`
	LastModified OptString `json:"lastModified"`
	Location     OptString `json:"location"`
}

// GetResourceType returns the value of ResourceType.
func (s *ScimGroupListEnterpriseResourcesItemMeta) GetResourceType() OptString {
	return s.ResourceType
}

// GetCreated returns the value of Created.
func (s *ScimGroupListEnterpriseResourcesItemMeta) GetCreated() OptString {
	return s.Created
}

// GetLastModified returns the value of LastModified.
func (s *ScimGroupListEnterpriseResourcesItemMeta) GetLastModified() OptString {
	return s.LastModified
}

// GetLocation returns the value of Location.
func (s *ScimGroupListEnterpriseResourcesItemMeta) GetLocation() OptString {
	return s.Location
}

// SetResourceType sets the value of ResourceType.
func (s *ScimGroupListEnterpriseResourcesItemMeta) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetCreated sets the value of Created.
func (s *ScimGroupListEnterpriseResourcesItemMeta) SetCreated(val OptString) {
	s.Created = val
}

// SetLastModified sets the value of LastModified.
func (s *ScimGroupListEnterpriseResourcesItemMeta) SetLastModified(val OptString) {
	s.LastModified = val
}

// SetLocation sets the value of Location.
func (s *ScimGroupListEnterpriseResourcesItemMeta) SetLocation(val OptString) {
	s.Location = val
}

// Ref: #/components/schemas/scim-user-list-enterprise
type ScimUserListEnterprise struct {
	Schemas      []string                              `json:"schemas"`
	TotalResults float64                               `json:"totalResults"`
	ItemsPerPage float64                               `json:"itemsPerPage"`
	StartIndex   float64                               `json:"startIndex"`
	Resources    []ScimUserListEnterpriseResourcesItem `json:"Resources"`
}

// GetSchemas returns the value of Schemas.
func (s *ScimUserListEnterprise) GetSchemas() []string {
	return s.Schemas
}

// GetTotalResults returns the value of TotalResults.
func (s *ScimUserListEnterprise) GetTotalResults() float64 {
	return s.TotalResults
}

// GetItemsPerPage returns the value of ItemsPerPage.
func (s *ScimUserListEnterprise) GetItemsPerPage() float64 {
	return s.ItemsPerPage
}

// GetStartIndex returns the value of StartIndex.
func (s *ScimUserListEnterprise) GetStartIndex() float64 {
	return s.StartIndex
}

// GetResources returns the value of Resources.
func (s *ScimUserListEnterprise) GetResources() []ScimUserListEnterpriseResourcesItem {
	return s.Resources
}

// SetSchemas sets the value of Schemas.
func (s *ScimUserListEnterprise) SetSchemas(val []string) {
	s.Schemas = val
}

// SetTotalResults sets the value of TotalResults.
func (s *ScimUserListEnterprise) SetTotalResults(val float64) {
	s.TotalResults = val
}

// SetItemsPerPage sets the value of ItemsPerPage.
func (s *ScimUserListEnterprise) SetItemsPerPage(val float64) {
	s.ItemsPerPage = val
}

// SetStartIndex sets the value of StartIndex.
func (s *ScimUserListEnterprise) SetStartIndex(val float64) {
	s.StartIndex = val
}

// SetResources sets the value of Resources.
func (s *ScimUserListEnterprise) SetResources(val []ScimUserListEnterpriseResourcesItem) {
	s.Resources = val
}

type ScimUserListEnterpriseResourcesItem struct {
	Schemas    []string                                        `json:"schemas"`
	ID         string                                          `json:"id"`
	ExternalId OptString                                       `json:"externalId"`
	UserName   OptString                                       `json:"userName"`
	Name       OptScimUserListEnterpriseResourcesItemName      `json:"name"`
	Emails     []ScimUserListEnterpriseResourcesItemEmailsItem `json:"emails"`
	Groups     []ScimUserListEnterpriseResourcesItemGroupsItem `json:"groups"`
	Active     OptBool                                         `json:"active"`
	Meta       OptScimUserListEnterpriseResourcesItemMeta      `json:"meta"`
}

// GetSchemas returns the value of Schemas.
func (s *ScimUserListEnterpriseResourcesItem) GetSchemas() []string {
	return s.Schemas
}

// GetID returns the value of ID.
func (s *ScimUserListEnterpriseResourcesItem) GetID() string {
	return s.ID
}

// GetExternalId returns the value of ExternalId.
func (s *ScimUserListEnterpriseResourcesItem) GetExternalId() OptString {
	return s.ExternalId
}

// GetUserName returns the value of UserName.
func (s *ScimUserListEnterpriseResourcesItem) GetUserName() OptString {
	return s.UserName
}

// GetName returns the value of Name.
func (s *ScimUserListEnterpriseResourcesItem) GetName() OptScimUserListEnterpriseResourcesItemName {
	return s.Name
}

// GetEmails returns the value of Emails.
func (s *ScimUserListEnterpriseResourcesItem) GetEmails() []ScimUserListEnterpriseResourcesItemEmailsItem {
	return s.Emails
}

// GetGroups returns the value of Groups.
func (s *ScimUserListEnterpriseResourcesItem) GetGroups() []ScimUserListEnterpriseResourcesItemGroupsItem {
	return s.Groups
}

// GetActive returns the value of Active.
func (s *ScimUserListEnterpriseResourcesItem) GetActive() OptBool {
	return s.Active
}

// GetMeta returns the value of Meta.
func (s *ScimUserListEnterpriseResourcesItem) GetMeta() OptScimUserListEnterpriseResourcesItemMeta {
	return s.Meta
}

// SetSchemas sets the value of Schemas.
func (s *ScimUserListEnterpriseResourcesItem) SetSchemas(val []string) {
	s.Schemas = val
}

// SetID sets the value of ID.
func (s *ScimUserListEnterpriseResourcesItem) SetID(val string) {
	s.ID = val
}

// SetExternalId sets the value of ExternalId.
func (s *ScimUserListEnterpriseResourcesItem) SetExternalId(val OptString) {
	s.ExternalId = val
}

// SetUserName sets the value of UserName.
func (s *ScimUserListEnterpriseResourcesItem) SetUserName(val OptString) {
	s.UserName = val
}

// SetName sets the value of Name.
func (s *ScimUserListEnterpriseResourcesItem) SetName(val OptScimUserListEnterpriseResourcesItemName) {
	s.Name = val
}

// SetEmails sets the value of Emails.
func (s *ScimUserListEnterpriseResourcesItem) SetEmails(val []ScimUserListEnterpriseResourcesItemEmailsItem) {
	s.Emails = val
}

// SetGroups sets the value of Groups.
func (s *ScimUserListEnterpriseResourcesItem) SetGroups(val []ScimUserListEnterpriseResourcesItemGroupsItem) {
	s.Groups = val
}

// SetActive sets the value of Active.
func (s *ScimUserListEnterpriseResourcesItem) SetActive(val OptBool) {
	s.Active = val
}

// SetMeta sets the value of Meta.
func (s *ScimUserListEnterpriseResourcesItem) SetMeta(val OptScimUserListEnterpriseResourcesItemMeta) {
	s.Meta = val
}

type ScimUserListEnterpriseResourcesItemEmailsItem struct {
	Value   OptString `json:"value"`
	Primary OptBool   `json:"primary"`
	Type    OptString `json:"type"`
}

// GetValue returns the value of Value.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) GetValue() OptString {
	return s.Value
}

// GetPrimary returns the value of Primary.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) GetPrimary() OptBool {
	return s.Primary
}

// GetType returns the value of Type.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) GetType() OptString {
	return s.Type
}

// SetValue sets the value of Value.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) SetValue(val OptString) {
	s.Value = val
}

// SetPrimary sets the value of Primary.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) SetPrimary(val OptBool) {
	s.Primary = val
}

// SetType sets the value of Type.
func (s *ScimUserListEnterpriseResourcesItemEmailsItem) SetType(val OptString) {
	s.Type = val
}

type ScimUserListEnterpriseResourcesItemGroupsItem struct {
	Value OptString `json:"value"`
}

// GetValue returns the value of Value.
func (s *ScimUserListEnterpriseResourcesItemGroupsItem) GetValue() OptString {
	return s.Value
}

// SetValue sets the value of Value.
func (s *ScimUserListEnterpriseResourcesItemGroupsItem) SetValue(val OptString) {
	s.Value = val
}

type ScimUserListEnterpriseResourcesItemMeta struct {
	ResourceType OptString `json:"resourceType"`
	Created      OptString `json:"created"`
	LastModified OptString `json:"lastModified"`
	Location     OptString `json:"location"`
}

// GetResourceType returns the value of ResourceType.
func (s *ScimUserListEnterpriseResourcesItemMeta) GetResourceType() OptString {
	return s.ResourceType
}

// GetCreated returns the value of Created.
func (s *ScimUserListEnterpriseResourcesItemMeta) GetCreated() OptString {
	return s.Created
}

// GetLastModified returns the value of LastModified.
func (s *ScimUserListEnterpriseResourcesItemMeta) GetLastModified() OptString {
	return s.LastModified
}

// GetLocation returns the value of Location.
func (s *ScimUserListEnterpriseResourcesItemMeta) GetLocation() OptString {
	return s.Location
}

// SetResourceType sets the value of ResourceType.
func (s *ScimUserListEnterpriseResourcesItemMeta) SetResourceType(val OptString) {
	s.ResourceType = val
}

// SetCreated sets the value of Created.
func (s *ScimUserListEnterpriseResourcesItemMeta) SetCreated(val OptString) {
	s.Created = val
}

// SetLastModified sets the value of LastModified.
func (s *ScimUserListEnterpriseResourcesItemMeta) SetLastModified(val OptString) {
	s.LastModified = val
}

// SetLocation sets the value of Location.
func (s *ScimUserListEnterpriseResourcesItemMeta) SetLocation(val OptString) {
	s.Location = val
}

type ScimUserListEnterpriseResourcesItemName struct {
	GivenName  OptString `json:"givenName"`
	FamilyName OptString `json:"familyName"`
}

// GetGivenName returns the value of GivenName.
func (s *ScimUserListEnterpriseResourcesItemName) GetGivenName() OptString {
	return s.GivenName
}

// GetFamilyName returns the value of FamilyName.
func (s *ScimUserListEnterpriseResourcesItemName) GetFamilyName() OptString {
	return s.FamilyName
}

// SetGivenName sets the value of GivenName.
func (s *ScimUserListEnterpriseResourcesItemName) SetGivenName(val OptString) {
	s.GivenName = val
}

// SetFamilyName sets the value of FamilyName.
func (s *ScimUserListEnterpriseResourcesItemName) SetFamilyName(val OptString) {
	s.FamilyName = val
}

type SearchCodeOK struct {
	TotalCount        int                    `json:"total_count"`
	IncompleteResults bool                   `json:"incomplete_results"`
	Items             []CodeSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchCodeOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchCodeOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchCodeOK) GetItems() []CodeSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchCodeOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchCodeOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchCodeOK) SetItems(val []CodeSearchResultItem) {
	s.Items = val
}

func (*SearchCodeOK) searchCodeRes() {}

type SearchCodeOrder string

const (
	SearchCodeOrderDesc SearchCodeOrder = "desc"
	SearchCodeOrderAsc  SearchCodeOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchCodeOrder) MarshalText() ([]byte, error) {
	switch s {
	case SearchCodeOrderDesc:
		return []byte(s), nil
	case SearchCodeOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchCodeOrder) UnmarshalText(data []byte) error {
	switch SearchCodeOrder(data) {
	case SearchCodeOrderDesc:
		*s = SearchCodeOrderDesc
		return nil
	case SearchCodeOrderAsc:
		*s = SearchCodeOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchCodeSort string

const (
	SearchCodeSortIndexed SearchCodeSort = "indexed"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchCodeSort) MarshalText() ([]byte, error) {
	switch s {
	case SearchCodeSortIndexed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchCodeSort) UnmarshalText(data []byte) error {
	switch SearchCodeSort(data) {
	case SearchCodeSortIndexed:
		*s = SearchCodeSortIndexed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchCommitsOK struct {
	TotalCount        int                      `json:"total_count"`
	IncompleteResults bool                     `json:"incomplete_results"`
	Items             []CommitSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchCommitsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchCommitsOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchCommitsOK) GetItems() []CommitSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchCommitsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchCommitsOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchCommitsOK) SetItems(val []CommitSearchResultItem) {
	s.Items = val
}

func (*SearchCommitsOK) searchCommitsRes() {}

type SearchCommitsOrder string

const (
	SearchCommitsOrderDesc SearchCommitsOrder = "desc"
	SearchCommitsOrderAsc  SearchCommitsOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchCommitsOrder) MarshalText() ([]byte, error) {
	switch s {
	case SearchCommitsOrderDesc:
		return []byte(s), nil
	case SearchCommitsOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchCommitsOrder) UnmarshalText(data []byte) error {
	switch SearchCommitsOrder(data) {
	case SearchCommitsOrderDesc:
		*s = SearchCommitsOrderDesc
		return nil
	case SearchCommitsOrderAsc:
		*s = SearchCommitsOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchCommitsSort string

const (
	SearchCommitsSortAuthorDate    SearchCommitsSort = "author-date"
	SearchCommitsSortCommitterDate SearchCommitsSort = "committer-date"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchCommitsSort) MarshalText() ([]byte, error) {
	switch s {
	case SearchCommitsSortAuthorDate:
		return []byte(s), nil
	case SearchCommitsSortCommitterDate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchCommitsSort) UnmarshalText(data []byte) error {
	switch SearchCommitsSort(data) {
	case SearchCommitsSortAuthorDate:
		*s = SearchCommitsSortAuthorDate
		return nil
	case SearchCommitsSortCommitterDate:
		*s = SearchCommitsSortCommitterDate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchIssuesAndPullRequestsOK struct {
	TotalCount        int                     `json:"total_count"`
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []IssueSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchIssuesAndPullRequestsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchIssuesAndPullRequestsOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchIssuesAndPullRequestsOK) GetItems() []IssueSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchIssuesAndPullRequestsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchIssuesAndPullRequestsOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchIssuesAndPullRequestsOK) SetItems(val []IssueSearchResultItem) {
	s.Items = val
}

func (*SearchIssuesAndPullRequestsOK) searchIssuesAndPullRequestsRes() {}

type SearchIssuesAndPullRequestsOrder string

const (
	SearchIssuesAndPullRequestsOrderDesc SearchIssuesAndPullRequestsOrder = "desc"
	SearchIssuesAndPullRequestsOrderAsc  SearchIssuesAndPullRequestsOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchIssuesAndPullRequestsOrder) MarshalText() ([]byte, error) {
	switch s {
	case SearchIssuesAndPullRequestsOrderDesc:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchIssuesAndPullRequestsOrder) UnmarshalText(data []byte) error {
	switch SearchIssuesAndPullRequestsOrder(data) {
	case SearchIssuesAndPullRequestsOrderDesc:
		*s = SearchIssuesAndPullRequestsOrderDesc
		return nil
	case SearchIssuesAndPullRequestsOrderAsc:
		*s = SearchIssuesAndPullRequestsOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchIssuesAndPullRequestsSort string

const (
	SearchIssuesAndPullRequestsSortComments                   SearchIssuesAndPullRequestsSort = "comments"
	SearchIssuesAndPullRequestsSortReactions                  SearchIssuesAndPullRequestsSort = "reactions"
	SearchIssuesAndPullRequestsSortReactionsMinusPlus1        SearchIssuesAndPullRequestsSort = "reactions-+1"
	SearchIssuesAndPullRequestsSortReactionsMinusMinus1       SearchIssuesAndPullRequestsSort = "reactions--1"
	SearchIssuesAndPullRequestsSortReactionsMinusSmile        SearchIssuesAndPullRequestsSort = "reactions-smile"
	SearchIssuesAndPullRequestsSortReactionsMinusThinkingFace SearchIssuesAndPullRequestsSort = "reactions-thinking_face"
	SearchIssuesAndPullRequestsSortReactionsMinusHeart        SearchIssuesAndPullRequestsSort = "reactions-heart"
	SearchIssuesAndPullRequestsSortReactionsMinusTada         SearchIssuesAndPullRequestsSort = "reactions-tada"
	SearchIssuesAndPullRequestsSortInteractions               SearchIssuesAndPullRequestsSort = "interactions"
	SearchIssuesAndPullRequestsSortCreated                    SearchIssuesAndPullRequestsSort = "created"
	SearchIssuesAndPullRequestsSortUpdated                    SearchIssuesAndPullRequestsSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchIssuesAndPullRequestsSort) MarshalText() ([]byte, error) {
	switch s {
	case SearchIssuesAndPullRequestsSortComments:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactions:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactionsMinusPlus1:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactionsMinusMinus1:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactionsMinusSmile:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactionsMinusThinkingFace:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactionsMinusHeart:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortReactionsMinusTada:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortInteractions:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortCreated:
		return []byte(s), nil
	case SearchIssuesAndPullRequestsSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchIssuesAndPullRequestsSort) UnmarshalText(data []byte) error {
	switch SearchIssuesAndPullRequestsSort(data) {
	case SearchIssuesAndPullRequestsSortComments:
		*s = SearchIssuesAndPullRequestsSortComments
		return nil
	case SearchIssuesAndPullRequestsSortReactions:
		*s = SearchIssuesAndPullRequestsSortReactions
		return nil
	case SearchIssuesAndPullRequestsSortReactionsMinusPlus1:
		*s = SearchIssuesAndPullRequestsSortReactionsMinusPlus1
		return nil
	case SearchIssuesAndPullRequestsSortReactionsMinusMinus1:
		*s = SearchIssuesAndPullRequestsSortReactionsMinusMinus1
		return nil
	case SearchIssuesAndPullRequestsSortReactionsMinusSmile:
		*s = SearchIssuesAndPullRequestsSortReactionsMinusSmile
		return nil
	case SearchIssuesAndPullRequestsSortReactionsMinusThinkingFace:
		*s = SearchIssuesAndPullRequestsSortReactionsMinusThinkingFace
		return nil
	case SearchIssuesAndPullRequestsSortReactionsMinusHeart:
		*s = SearchIssuesAndPullRequestsSortReactionsMinusHeart
		return nil
	case SearchIssuesAndPullRequestsSortReactionsMinusTada:
		*s = SearchIssuesAndPullRequestsSortReactionsMinusTada
		return nil
	case SearchIssuesAndPullRequestsSortInteractions:
		*s = SearchIssuesAndPullRequestsSortInteractions
		return nil
	case SearchIssuesAndPullRequestsSortCreated:
		*s = SearchIssuesAndPullRequestsSortCreated
		return nil
	case SearchIssuesAndPullRequestsSortUpdated:
		*s = SearchIssuesAndPullRequestsSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchLabelsForbidden BasicError

func (*SearchLabelsForbidden) searchLabelsRes() {}

type SearchLabelsNotFound BasicError

func (*SearchLabelsNotFound) searchLabelsRes() {}

type SearchLabelsOK struct {
	TotalCount        int                     `json:"total_count"`
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []LabelSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchLabelsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchLabelsOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchLabelsOK) GetItems() []LabelSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchLabelsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchLabelsOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchLabelsOK) SetItems(val []LabelSearchResultItem) {
	s.Items = val
}

func (*SearchLabelsOK) searchLabelsRes() {}

type SearchLabelsOrder string

const (
	SearchLabelsOrderDesc SearchLabelsOrder = "desc"
	SearchLabelsOrderAsc  SearchLabelsOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchLabelsOrder) MarshalText() ([]byte, error) {
	switch s {
	case SearchLabelsOrderDesc:
		return []byte(s), nil
	case SearchLabelsOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchLabelsOrder) UnmarshalText(data []byte) error {
	switch SearchLabelsOrder(data) {
	case SearchLabelsOrderDesc:
		*s = SearchLabelsOrderDesc
		return nil
	case SearchLabelsOrderAsc:
		*s = SearchLabelsOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchLabelsSort string

const (
	SearchLabelsSortCreated SearchLabelsSort = "created"
	SearchLabelsSortUpdated SearchLabelsSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchLabelsSort) MarshalText() ([]byte, error) {
	switch s {
	case SearchLabelsSortCreated:
		return []byte(s), nil
	case SearchLabelsSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchLabelsSort) UnmarshalText(data []byte) error {
	switch SearchLabelsSort(data) {
	case SearchLabelsSortCreated:
		*s = SearchLabelsSortCreated
		return nil
	case SearchLabelsSortUpdated:
		*s = SearchLabelsSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchReposOK struct {
	TotalCount        int                    `json:"total_count"`
	IncompleteResults bool                   `json:"incomplete_results"`
	Items             []RepoSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchReposOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchReposOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchReposOK) GetItems() []RepoSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchReposOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchReposOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchReposOK) SetItems(val []RepoSearchResultItem) {
	s.Items = val
}

func (*SearchReposOK) searchReposRes() {}

type SearchReposOrder string

const (
	SearchReposOrderDesc SearchReposOrder = "desc"
	SearchReposOrderAsc  SearchReposOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchReposOrder) MarshalText() ([]byte, error) {
	switch s {
	case SearchReposOrderDesc:
		return []byte(s), nil
	case SearchReposOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchReposOrder) UnmarshalText(data []byte) error {
	switch SearchReposOrder(data) {
	case SearchReposOrderDesc:
		*s = SearchReposOrderDesc
		return nil
	case SearchReposOrderAsc:
		*s = SearchReposOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchReposSort string

const (
	SearchReposSortStars            SearchReposSort = "stars"
	SearchReposSortForks            SearchReposSort = "forks"
	SearchReposSortHelpWantedIssues SearchReposSort = "help-wanted-issues"
	SearchReposSortUpdated          SearchReposSort = "updated"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchReposSort) MarshalText() ([]byte, error) {
	switch s {
	case SearchReposSortStars:
		return []byte(s), nil
	case SearchReposSortForks:
		return []byte(s), nil
	case SearchReposSortHelpWantedIssues:
		return []byte(s), nil
	case SearchReposSortUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchReposSort) UnmarshalText(data []byte) error {
	switch SearchReposSort(data) {
	case SearchReposSortStars:
		*s = SearchReposSortStars
		return nil
	case SearchReposSortForks:
		*s = SearchReposSortForks
		return nil
	case SearchReposSortHelpWantedIssues:
		*s = SearchReposSortHelpWantedIssues
		return nil
	case SearchReposSortUpdated:
		*s = SearchReposSortUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchResultTextMatches []SearchResultTextMatchesItem

type SearchResultTextMatchesItem struct {
	ObjectURL  OptString                                `json:"object_url"`
	ObjectType OptNilString                             `json:"object_type"`
	Property   OptString                                `json:"property"`
	Fragment   OptString                                `json:"fragment"`
	Matches    []SearchResultTextMatchesItemMatchesItem `json:"matches"`
}

// GetObjectURL returns the value of ObjectURL.
func (s *SearchResultTextMatchesItem) GetObjectURL() OptString {
	return s.ObjectURL
}

// GetObjectType returns the value of ObjectType.
func (s *SearchResultTextMatchesItem) GetObjectType() OptNilString {
	return s.ObjectType
}

// GetProperty returns the value of Property.
func (s *SearchResultTextMatchesItem) GetProperty() OptString {
	return s.Property
}

// GetFragment returns the value of Fragment.
func (s *SearchResultTextMatchesItem) GetFragment() OptString {
	return s.Fragment
}

// GetMatches returns the value of Matches.
func (s *SearchResultTextMatchesItem) GetMatches() []SearchResultTextMatchesItemMatchesItem {
	return s.Matches
}

// SetObjectURL sets the value of ObjectURL.
func (s *SearchResultTextMatchesItem) SetObjectURL(val OptString) {
	s.ObjectURL = val
}

// SetObjectType sets the value of ObjectType.
func (s *SearchResultTextMatchesItem) SetObjectType(val OptNilString) {
	s.ObjectType = val
}

// SetProperty sets the value of Property.
func (s *SearchResultTextMatchesItem) SetProperty(val OptString) {
	s.Property = val
}

// SetFragment sets the value of Fragment.
func (s *SearchResultTextMatchesItem) SetFragment(val OptString) {
	s.Fragment = val
}

// SetMatches sets the value of Matches.
func (s *SearchResultTextMatchesItem) SetMatches(val []SearchResultTextMatchesItemMatchesItem) {
	s.Matches = val
}

type SearchResultTextMatchesItemMatchesItem struct {
	Text    OptString `json:"text"`
	Indices []int     `json:"indices"`
}

// GetText returns the value of Text.
func (s *SearchResultTextMatchesItemMatchesItem) GetText() OptString {
	return s.Text
}

// GetIndices returns the value of Indices.
func (s *SearchResultTextMatchesItemMatchesItem) GetIndices() []int {
	return s.Indices
}

// SetText sets the value of Text.
func (s *SearchResultTextMatchesItemMatchesItem) SetText(val OptString) {
	s.Text = val
}

// SetIndices sets the value of Indices.
func (s *SearchResultTextMatchesItemMatchesItem) SetIndices(val []int) {
	s.Indices = val
}

type SearchTopicsOK struct {
	TotalCount        int                     `json:"total_count"`
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []TopicSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchTopicsOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchTopicsOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchTopicsOK) GetItems() []TopicSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchTopicsOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchTopicsOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchTopicsOK) SetItems(val []TopicSearchResultItem) {
	s.Items = val
}

func (*SearchTopicsOK) searchTopicsRes() {}

type SearchUsersOK struct {
	TotalCount        int                    `json:"total_count"`
	IncompleteResults bool                   `json:"incomplete_results"`
	Items             []UserSearchResultItem `json:"items"`
}

// GetTotalCount returns the value of TotalCount.
func (s *SearchUsersOK) GetTotalCount() int {
	return s.TotalCount
}

// GetIncompleteResults returns the value of IncompleteResults.
func (s *SearchUsersOK) GetIncompleteResults() bool {
	return s.IncompleteResults
}

// GetItems returns the value of Items.
func (s *SearchUsersOK) GetItems() []UserSearchResultItem {
	return s.Items
}

// SetTotalCount sets the value of TotalCount.
func (s *SearchUsersOK) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetIncompleteResults sets the value of IncompleteResults.
func (s *SearchUsersOK) SetIncompleteResults(val bool) {
	s.IncompleteResults = val
}

// SetItems sets the value of Items.
func (s *SearchUsersOK) SetItems(val []UserSearchResultItem) {
	s.Items = val
}

func (*SearchUsersOK) searchUsersRes() {}

type SearchUsersOrder string

const (
	SearchUsersOrderDesc SearchUsersOrder = "desc"
	SearchUsersOrderAsc  SearchUsersOrder = "asc"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchUsersOrder) MarshalText() ([]byte, error) {
	switch s {
	case SearchUsersOrderDesc:
		return []byte(s), nil
	case SearchUsersOrderAsc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchUsersOrder) UnmarshalText(data []byte) error {
	switch SearchUsersOrder(data) {
	case SearchUsersOrderDesc:
		*s = SearchUsersOrderDesc
		return nil
	case SearchUsersOrderAsc:
		*s = SearchUsersOrderAsc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchUsersSort string

const (
	SearchUsersSortFollowers    SearchUsersSort = "followers"
	SearchUsersSortRepositories SearchUsersSort = "repositories"
	SearchUsersSortJoined       SearchUsersSort = "joined"
)

// MarshalText implements encoding.TextMarshaler.
func (s SearchUsersSort) MarshalText() ([]byte, error) {
	switch s {
	case SearchUsersSortFollowers:
		return []byte(s), nil
	case SearchUsersSortRepositories:
		return []byte(s), nil
	case SearchUsersSortJoined:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchUsersSort) UnmarshalText(data []byte) error {
	switch SearchUsersSort(data) {
	case SearchUsersSortFollowers:
		*s = SearchUsersSortFollowers
		return nil
	case SearchUsersSortRepositories:
		*s = SearchUsersSortRepositories
		return nil
	case SearchUsersSortJoined:
		*s = SearchUsersSortJoined
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/secret-scanning-alert
type SecretScanningAlert struct {
	Number    OptAlertNumber    `json:"number"`
	CreatedAt OptAlertCreatedAt `json:"created_at"`
	URL       OptAlertURL       `json:"url"`
	HTMLURL   OptAlertHTMLURL   `json:"html_url"`
	// The REST API URL of the code locations for this alert.
	LocationsURL OptURI                              `json:"locations_url"`
	State        OptSecretScanningAlertState         `json:"state"`
	Resolution   OptNilSecretScanningAlertResolution `json:"resolution"`
	// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	ResolvedAt OptNilDateTime           `json:"resolved_at"`
	ResolvedBy OptNilNullableSimpleUser `json:"resolved_by"`
	// The type of secret that secret scanning detected.
	SecretType OptString `json:"secret_type"`
	// The secret that was detected.
	Secret OptString `json:"secret"`
}

// GetNumber returns the value of Number.
func (s *SecretScanningAlert) GetNumber() OptAlertNumber {
	return s.Number
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SecretScanningAlert) GetCreatedAt() OptAlertCreatedAt {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *SecretScanningAlert) GetURL() OptAlertURL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *SecretScanningAlert) GetHTMLURL() OptAlertHTMLURL {
	return s.HTMLURL
}

// GetLocationsURL returns the value of LocationsURL.
func (s *SecretScanningAlert) GetLocationsURL() OptURI {
	return s.LocationsURL
}

// GetState returns the value of State.
func (s *SecretScanningAlert) GetState() OptSecretScanningAlertState {
	return s.State
}

// GetResolution returns the value of Resolution.
func (s *SecretScanningAlert) GetResolution() OptNilSecretScanningAlertResolution {
	return s.Resolution
}

// GetResolvedAt returns the value of ResolvedAt.
func (s *SecretScanningAlert) GetResolvedAt() OptNilDateTime {
	return s.ResolvedAt
}

// GetResolvedBy returns the value of ResolvedBy.
func (s *SecretScanningAlert) GetResolvedBy() OptNilNullableSimpleUser {
	return s.ResolvedBy
}

// GetSecretType returns the value of SecretType.
func (s *SecretScanningAlert) GetSecretType() OptString {
	return s.SecretType
}

// GetSecret returns the value of Secret.
func (s *SecretScanningAlert) GetSecret() OptString {
	return s.Secret
}

// SetNumber sets the value of Number.
func (s *SecretScanningAlert) SetNumber(val OptAlertNumber) {
	s.Number = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SecretScanningAlert) SetCreatedAt(val OptAlertCreatedAt) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *SecretScanningAlert) SetURL(val OptAlertURL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *SecretScanningAlert) SetHTMLURL(val OptAlertHTMLURL) {
	s.HTMLURL = val
}

// SetLocationsURL sets the value of LocationsURL.
func (s *SecretScanningAlert) SetLocationsURL(val OptURI) {
	s.LocationsURL = val
}

// SetState sets the value of State.
func (s *SecretScanningAlert) SetState(val OptSecretScanningAlertState) {
	s.State = val
}

// SetResolution sets the value of Resolution.
func (s *SecretScanningAlert) SetResolution(val OptNilSecretScanningAlertResolution) {
	s.Resolution = val
}

// SetResolvedAt sets the value of ResolvedAt.
func (s *SecretScanningAlert) SetResolvedAt(val OptNilDateTime) {
	s.ResolvedAt = val
}

// SetResolvedBy sets the value of ResolvedBy.
func (s *SecretScanningAlert) SetResolvedBy(val OptNilNullableSimpleUser) {
	s.ResolvedBy = val
}

// SetSecretType sets the value of SecretType.
func (s *SecretScanningAlert) SetSecretType(val OptString) {
	s.SecretType = val
}

// SetSecret sets the value of Secret.
func (s *SecretScanningAlert) SetSecret(val OptString) {
	s.Secret = val
}

func (*SecretScanningAlert) secretScanningGetAlertRes()    {}
func (*SecretScanningAlert) secretScanningUpdateAlertRes() {}

// **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of
// `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
// Ref: #/components/schemas/secret-scanning-alert-resolution
type SecretScanningAlertResolution string

const (
	SecretScanningAlertResolutionFalsePositive SecretScanningAlertResolution = "false_positive"
	SecretScanningAlertResolutionWontFix       SecretScanningAlertResolution = "wont_fix"
	SecretScanningAlertResolutionRevoked       SecretScanningAlertResolution = "revoked"
	SecretScanningAlertResolutionUsedInTests   SecretScanningAlertResolution = "used_in_tests"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecretScanningAlertResolution) MarshalText() ([]byte, error) {
	switch s {
	case SecretScanningAlertResolutionFalsePositive:
		return []byte(s), nil
	case SecretScanningAlertResolutionWontFix:
		return []byte(s), nil
	case SecretScanningAlertResolutionRevoked:
		return []byte(s), nil
	case SecretScanningAlertResolutionUsedInTests:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecretScanningAlertResolution) UnmarshalText(data []byte) error {
	switch SecretScanningAlertResolution(data) {
	case SecretScanningAlertResolutionFalsePositive:
		*s = SecretScanningAlertResolutionFalsePositive
		return nil
	case SecretScanningAlertResolutionWontFix:
		*s = SecretScanningAlertResolutionWontFix
		return nil
	case SecretScanningAlertResolutionRevoked:
		*s = SecretScanningAlertResolutionRevoked
		return nil
	case SecretScanningAlertResolutionUsedInTests:
		*s = SecretScanningAlertResolutionUsedInTests
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide
// `resolution` when you set the state to `resolved`.
// Ref: #/components/schemas/secret-scanning-alert-state
type SecretScanningAlertState string

const (
	SecretScanningAlertStateOpen     SecretScanningAlertState = "open"
	SecretScanningAlertStateResolved SecretScanningAlertState = "resolved"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecretScanningAlertState) MarshalText() ([]byte, error) {
	switch s {
	case SecretScanningAlertStateOpen:
		return []byte(s), nil
	case SecretScanningAlertStateResolved:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecretScanningAlertState) UnmarshalText(data []byte) error {
	switch SecretScanningAlertState(data) {
	case SecretScanningAlertStateOpen:
		*s = SecretScanningAlertStateOpen
		return nil
	case SecretScanningAlertStateResolved:
		*s = SecretScanningAlertStateResolved
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SecretScanningGetAlertNotFound is response for SecretScanningGetAlert operation.
type SecretScanningGetAlertNotFound struct{}

func (*SecretScanningGetAlertNotFound) secretScanningGetAlertRes() {}

// SecretScanningListAlertsForOrgOKHeaders wraps []OrganizationSecretScanningAlert with response headers.
type SecretScanningListAlertsForOrgOKHeaders struct {
	Link     OptString
	Response []OrganizationSecretScanningAlert
}

// GetLink returns the value of Link.
func (s *SecretScanningListAlertsForOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *SecretScanningListAlertsForOrgOKHeaders) GetResponse() []OrganizationSecretScanningAlert {
	return s.Response
}

// SetLink sets the value of Link.
func (s *SecretScanningListAlertsForOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *SecretScanningListAlertsForOrgOKHeaders) SetResponse(val []OrganizationSecretScanningAlert) {
	s.Response = val
}

func (*SecretScanningListAlertsForOrgOKHeaders) secretScanningListAlertsForOrgRes() {}

type SecretScanningListAlertsForOrgState string

const (
	SecretScanningListAlertsForOrgStateOpen     SecretScanningListAlertsForOrgState = "open"
	SecretScanningListAlertsForOrgStateResolved SecretScanningListAlertsForOrgState = "resolved"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecretScanningListAlertsForOrgState) MarshalText() ([]byte, error) {
	switch s {
	case SecretScanningListAlertsForOrgStateOpen:
		return []byte(s), nil
	case SecretScanningListAlertsForOrgStateResolved:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecretScanningListAlertsForOrgState) UnmarshalText(data []byte) error {
	switch SecretScanningListAlertsForOrgState(data) {
	case SecretScanningListAlertsForOrgStateOpen:
		*s = SecretScanningListAlertsForOrgStateOpen
		return nil
	case SecretScanningListAlertsForOrgStateResolved:
		*s = SecretScanningListAlertsForOrgStateResolved
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SecretScanningListAlertsForRepoNotFound is response for SecretScanningListAlertsForRepo operation.
type SecretScanningListAlertsForRepoNotFound struct{}

func (*SecretScanningListAlertsForRepoNotFound) secretScanningListAlertsForRepoRes() {}

type SecretScanningListAlertsForRepoOKApplicationJSON []SecretScanningAlert

func (*SecretScanningListAlertsForRepoOKApplicationJSON) secretScanningListAlertsForRepoRes() {}

type SecretScanningListAlertsForRepoState string

const (
	SecretScanningListAlertsForRepoStateOpen     SecretScanningListAlertsForRepoState = "open"
	SecretScanningListAlertsForRepoStateResolved SecretScanningListAlertsForRepoState = "resolved"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecretScanningListAlertsForRepoState) MarshalText() ([]byte, error) {
	switch s {
	case SecretScanningListAlertsForRepoStateOpen:
		return []byte(s), nil
	case SecretScanningListAlertsForRepoStateResolved:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecretScanningListAlertsForRepoState) UnmarshalText(data []byte) error {
	switch SecretScanningListAlertsForRepoState(data) {
	case SecretScanningListAlertsForRepoStateOpen:
		*s = SecretScanningListAlertsForRepoStateOpen
		return nil
	case SecretScanningListAlertsForRepoStateResolved:
		*s = SecretScanningListAlertsForRepoStateResolved
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SecretScanningUpdateAlertNotFound is response for SecretScanningUpdateAlert operation.
type SecretScanningUpdateAlertNotFound struct{}

func (*SecretScanningUpdateAlertNotFound) secretScanningUpdateAlertRes() {}

type SecretScanningUpdateAlertReq struct {
	State      SecretScanningAlertState            `json:"state"`
	Resolution OptNilSecretScanningAlertResolution `json:"resolution"`
}

// GetState returns the value of State.
func (s *SecretScanningUpdateAlertReq) GetState() SecretScanningAlertState {
	return s.State
}

// GetResolution returns the value of Resolution.
func (s *SecretScanningUpdateAlertReq) GetResolution() OptNilSecretScanningAlertResolution {
	return s.Resolution
}

// SetState sets the value of State.
func (s *SecretScanningUpdateAlertReq) SetState(val SecretScanningAlertState) {
	s.State = val
}

// SetResolution sets the value of Resolution.
func (s *SecretScanningUpdateAlertReq) SetResolution(val OptNilSecretScanningAlertResolution) {
	s.Resolution = val
}

// SecretScanningUpdateAlertUnprocessableEntity is response for SecretScanningUpdateAlert operation.
type SecretScanningUpdateAlertUnprocessableEntity struct{}

func (*SecretScanningUpdateAlertUnprocessableEntity) secretScanningUpdateAlertRes() {}

// Ref: #/components/schemas/selected-actions
type SelectedActions struct {
	// Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions`
	// organization.
	GithubOwnedAllowed OptBool `json:"github_owned_allowed"`
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow
	// all GitHub Marketplace actions by verified creators.
	VerifiedAllowed OptBool `json:"verified_allowed"`
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and
	// SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.".
	PatternsAllowed []string `json:"patterns_allowed"`
}

// GetGithubOwnedAllowed returns the value of GithubOwnedAllowed.
func (s *SelectedActions) GetGithubOwnedAllowed() OptBool {
	return s.GithubOwnedAllowed
}

// GetVerifiedAllowed returns the value of VerifiedAllowed.
func (s *SelectedActions) GetVerifiedAllowed() OptBool {
	return s.VerifiedAllowed
}

// GetPatternsAllowed returns the value of PatternsAllowed.
func (s *SelectedActions) GetPatternsAllowed() []string {
	return s.PatternsAllowed
}

// SetGithubOwnedAllowed sets the value of GithubOwnedAllowed.
func (s *SelectedActions) SetGithubOwnedAllowed(val OptBool) {
	s.GithubOwnedAllowed = val
}

// SetVerifiedAllowed sets the value of VerifiedAllowed.
func (s *SelectedActions) SetVerifiedAllowed(val OptBool) {
	s.VerifiedAllowed = val
}

// SetPatternsAllowed sets the value of PatternsAllowed.
func (s *SelectedActions) SetPatternsAllowed(val []string) {
	s.PatternsAllowed = val
}

type SelectedActionsURL string

type ServiceUnavailable struct {
	Code             OptString `json:"code"`
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetCode returns the value of Code.
func (s *ServiceUnavailable) GetCode() OptString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ServiceUnavailable) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ServiceUnavailable) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetCode sets the value of Code.
func (s *ServiceUnavailable) SetCode(val OptString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ServiceUnavailable) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ServiceUnavailable) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*ServiceUnavailable) activityListPublicEventsRes()        {}
func (*ServiceUnavailable) codeScanningDeleteAnalysisRes()      {}
func (*ServiceUnavailable) codeScanningGetAlertRes()            {}
func (*ServiceUnavailable) codeScanningGetAnalysisRes()         {}
func (*ServiceUnavailable) codeScanningGetSarifRes()            {}
func (*ServiceUnavailable) codeScanningListAlertInstancesRes()  {}
func (*ServiceUnavailable) codeScanningListAlertsForRepoRes()   {}
func (*ServiceUnavailable) codeScanningListRecentAnalysesRes()  {}
func (*ServiceUnavailable) codeScanningUpdateAlertRes()         {}
func (*ServiceUnavailable) codeScanningUploadSarifRes()         {}
func (*ServiceUnavailable) issuesCreateRes()                    {}
func (*ServiceUnavailable) issuesUpdateRes()                    {}
func (*ServiceUnavailable) reposDeleteFileRes()                 {}
func (*ServiceUnavailable) searchCodeRes()                      {}
func (*ServiceUnavailable) searchIssuesAndPullRequestsRes()     {}
func (*ServiceUnavailable) searchReposRes()                     {}
func (*ServiceUnavailable) searchUsersRes()                     {}
func (*ServiceUnavailable) secretScanningGetAlertRes()          {}
func (*ServiceUnavailable) secretScanningListAlertsForOrgRes()  {}
func (*ServiceUnavailable) secretScanningListAlertsForRepoRes() {}
func (*ServiceUnavailable) secretScanningUpdateAlertRes()       {}

// Short Blob.
// Ref: #/components/schemas/short-blob
type ShortBlob struct {
	URL string `json:"url"`
	Sha string `json:"sha"`
}

// GetURL returns the value of URL.
func (s *ShortBlob) GetURL() string {
	return s.URL
}

// GetSha returns the value of Sha.
func (s *ShortBlob) GetSha() string {
	return s.Sha
}

// SetURL sets the value of URL.
func (s *ShortBlob) SetURL(val string) {
	s.URL = val
}

// SetSha sets the value of Sha.
func (s *ShortBlob) SetSha(val string) {
	s.Sha = val
}

// ShortBlobHeaders wraps ShortBlob with response headers.
type ShortBlobHeaders struct {
	Location OptString
	Response ShortBlob
}

// GetLocation returns the value of Location.
func (s *ShortBlobHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *ShortBlobHeaders) GetResponse() ShortBlob {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *ShortBlobHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *ShortBlobHeaders) SetResponse(val ShortBlob) {
	s.Response = val
}

func (*ShortBlobHeaders) gitCreateBlobRes() {}

// Short Branch.
// Ref: #/components/schemas/short-branch
type ShortBranch struct {
	Name          string              `json:"name"`
	Commit        ShortBranchCommit   `json:"commit"`
	Protected     bool                `json:"protected"`
	Protection    OptBranchProtection `json:"protection"`
	ProtectionURL OptURI              `json:"protection_url"`
}

// GetName returns the value of Name.
func (s *ShortBranch) GetName() string {
	return s.Name
}

// GetCommit returns the value of Commit.
func (s *ShortBranch) GetCommit() ShortBranchCommit {
	return s.Commit
}

// GetProtected returns the value of Protected.
func (s *ShortBranch) GetProtected() bool {
	return s.Protected
}

// GetProtection returns the value of Protection.
func (s *ShortBranch) GetProtection() OptBranchProtection {
	return s.Protection
}

// GetProtectionURL returns the value of ProtectionURL.
func (s *ShortBranch) GetProtectionURL() OptURI {
	return s.ProtectionURL
}

// SetName sets the value of Name.
func (s *ShortBranch) SetName(val string) {
	s.Name = val
}

// SetCommit sets the value of Commit.
func (s *ShortBranch) SetCommit(val ShortBranchCommit) {
	s.Commit = val
}

// SetProtected sets the value of Protected.
func (s *ShortBranch) SetProtected(val bool) {
	s.Protected = val
}

// SetProtection sets the value of Protection.
func (s *ShortBranch) SetProtection(val OptBranchProtection) {
	s.Protection = val
}

// SetProtectionURL sets the value of ProtectionURL.
func (s *ShortBranch) SetProtectionURL(val OptURI) {
	s.ProtectionURL = val
}

type ShortBranchCommit struct {
	Sha string  `json:"sha"`
	URL url.URL `json:"url"`
}

// GetSha returns the value of Sha.
func (s *ShortBranchCommit) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *ShortBranchCommit) GetURL() url.URL {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *ShortBranchCommit) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *ShortBranchCommit) SetURL(val url.URL) {
	s.URL = val
}

// Simple Commit.
// Ref: #/components/schemas/simple-commit
type SimpleCommit struct {
	ID        string                   `json:"id"`
	TreeID    string                   `json:"tree_id"`
	Message   string                   `json:"message"`
	Timestamp time.Time                `json:"timestamp"`
	Author    NilSimpleCommitAuthor    `json:"author"`
	Committer NilSimpleCommitCommitter `json:"committer"`
}

// GetID returns the value of ID.
func (s *SimpleCommit) GetID() string {
	return s.ID
}

// GetTreeID returns the value of TreeID.
func (s *SimpleCommit) GetTreeID() string {
	return s.TreeID
}

// GetMessage returns the value of Message.
func (s *SimpleCommit) GetMessage() string {
	return s.Message
}

// GetTimestamp returns the value of Timestamp.
func (s *SimpleCommit) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetAuthor returns the value of Author.
func (s *SimpleCommit) GetAuthor() NilSimpleCommitAuthor {
	return s.Author
}

// GetCommitter returns the value of Committer.
func (s *SimpleCommit) GetCommitter() NilSimpleCommitCommitter {
	return s.Committer
}

// SetID sets the value of ID.
func (s *SimpleCommit) SetID(val string) {
	s.ID = val
}

// SetTreeID sets the value of TreeID.
func (s *SimpleCommit) SetTreeID(val string) {
	s.TreeID = val
}

// SetMessage sets the value of Message.
func (s *SimpleCommit) SetMessage(val string) {
	s.Message = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SimpleCommit) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetAuthor sets the value of Author.
func (s *SimpleCommit) SetAuthor(val NilSimpleCommitAuthor) {
	s.Author = val
}

// SetCommitter sets the value of Committer.
func (s *SimpleCommit) SetCommitter(val NilSimpleCommitCommitter) {
	s.Committer = val
}

type SimpleCommitAuthor struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetName returns the value of Name.
func (s *SimpleCommitAuthor) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *SimpleCommitAuthor) GetEmail() string {
	return s.Email
}

// SetName sets the value of Name.
func (s *SimpleCommitAuthor) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *SimpleCommitAuthor) SetEmail(val string) {
	s.Email = val
}

type SimpleCommitCommitter struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetName returns the value of Name.
func (s *SimpleCommitCommitter) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *SimpleCommitCommitter) GetEmail() string {
	return s.Email
}

// SetName sets the value of Name.
func (s *SimpleCommitCommitter) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *SimpleCommitCommitter) SetEmail(val string) {
	s.Email = val
}

// Ref: #/components/schemas/simple-commit-status
type SimpleCommitStatus struct {
	Description NilString  `json:"description"`
	ID          int        `json:"id"`
	NodeID      string     `json:"node_id"`
	State       string     `json:"state"`
	Context     string     `json:"context"`
	TargetURL   url.URL    `json:"target_url"`
	Required    OptNilBool `json:"required"`
	AvatarURL   NilURI     `json:"avatar_url"`
	URL         url.URL    `json:"url"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
}

// GetDescription returns the value of Description.
func (s *SimpleCommitStatus) GetDescription() NilString {
	return s.Description
}

// GetID returns the value of ID.
func (s *SimpleCommitStatus) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *SimpleCommitStatus) GetNodeID() string {
	return s.NodeID
}

// GetState returns the value of State.
func (s *SimpleCommitStatus) GetState() string {
	return s.State
}

// GetContext returns the value of Context.
func (s *SimpleCommitStatus) GetContext() string {
	return s.Context
}

// GetTargetURL returns the value of TargetURL.
func (s *SimpleCommitStatus) GetTargetURL() url.URL {
	return s.TargetURL
}

// GetRequired returns the value of Required.
func (s *SimpleCommitStatus) GetRequired() OptNilBool {
	return s.Required
}

// GetAvatarURL returns the value of AvatarURL.
func (s *SimpleCommitStatus) GetAvatarURL() NilURI {
	return s.AvatarURL
}

// GetURL returns the value of URL.
func (s *SimpleCommitStatus) GetURL() url.URL {
	return s.URL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SimpleCommitStatus) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SimpleCommitStatus) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetDescription sets the value of Description.
func (s *SimpleCommitStatus) SetDescription(val NilString) {
	s.Description = val
}

// SetID sets the value of ID.
func (s *SimpleCommitStatus) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *SimpleCommitStatus) SetNodeID(val string) {
	s.NodeID = val
}

// SetState sets the value of State.
func (s *SimpleCommitStatus) SetState(val string) {
	s.State = val
}

// SetContext sets the value of Context.
func (s *SimpleCommitStatus) SetContext(val string) {
	s.Context = val
}

// SetTargetURL sets the value of TargetURL.
func (s *SimpleCommitStatus) SetTargetURL(val url.URL) {
	s.TargetURL = val
}

// SetRequired sets the value of Required.
func (s *SimpleCommitStatus) SetRequired(val OptNilBool) {
	s.Required = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *SimpleCommitStatus) SetAvatarURL(val NilURI) {
	s.AvatarURL = val
}

// SetURL sets the value of URL.
func (s *SimpleCommitStatus) SetURL(val url.URL) {
	s.URL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SimpleCommitStatus) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SimpleCommitStatus) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Simple User.
// Ref: #/components/schemas/simple-user
type SimpleUser struct {
	Name              OptNilString `json:"name"`
	Email             OptNilString `json:"email"`
	Login             string       `json:"login"`
	ID                int          `json:"id"`
	NodeID            string       `json:"node_id"`
	AvatarURL         url.URL      `json:"avatar_url"`
	GravatarID        NilString    `json:"gravatar_id"`
	URL               url.URL      `json:"url"`
	HTMLURL           url.URL      `json:"html_url"`
	FollowersURL      url.URL      `json:"followers_url"`
	FollowingURL      string       `json:"following_url"`
	GistsURL          string       `json:"gists_url"`
	StarredURL        string       `json:"starred_url"`
	SubscriptionsURL  url.URL      `json:"subscriptions_url"`
	OrganizationsURL  url.URL      `json:"organizations_url"`
	ReposURL          url.URL      `json:"repos_url"`
	EventsURL         string       `json:"events_url"`
	ReceivedEventsURL url.URL      `json:"received_events_url"`
	Type              string       `json:"type"`
	SiteAdmin         bool         `json:"site_admin"`
	StarredAt         OptString    `json:"starred_at"`
}

// GetName returns the value of Name.
func (s *SimpleUser) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *SimpleUser) GetEmail() OptNilString {
	return s.Email
}

// GetLogin returns the value of Login.
func (s *SimpleUser) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *SimpleUser) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *SimpleUser) GetNodeID() string {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *SimpleUser) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *SimpleUser) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *SimpleUser) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *SimpleUser) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *SimpleUser) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetFollowingURL returns the value of FollowingURL.
func (s *SimpleUser) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *SimpleUser) GetGistsURL() string {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *SimpleUser) GetStarredURL() string {
	return s.StarredURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *SimpleUser) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *SimpleUser) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *SimpleUser) GetReposURL() url.URL {
	return s.ReposURL
}

// GetEventsURL returns the value of EventsURL.
func (s *SimpleUser) GetEventsURL() string {
	return s.EventsURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *SimpleUser) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *SimpleUser) GetType() string {
	return s.Type
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *SimpleUser) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetStarredAt returns the value of StarredAt.
func (s *SimpleUser) GetStarredAt() OptString {
	return s.StarredAt
}

// SetName sets the value of Name.
func (s *SimpleUser) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *SimpleUser) SetEmail(val OptNilString) {
	s.Email = val
}

// SetLogin sets the value of Login.
func (s *SimpleUser) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *SimpleUser) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *SimpleUser) SetNodeID(val string) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *SimpleUser) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *SimpleUser) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *SimpleUser) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *SimpleUser) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *SimpleUser) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *SimpleUser) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *SimpleUser) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *SimpleUser) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *SimpleUser) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *SimpleUser) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *SimpleUser) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *SimpleUser) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *SimpleUser) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *SimpleUser) SetType(val string) {
	s.Type = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *SimpleUser) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetStarredAt sets the value of StarredAt.
func (s *SimpleUser) SetStarredAt(val OptString) {
	s.StarredAt = val
}

// The status of a commit.
// Ref: #/components/schemas/status
type Status struct {
	URL         string                `json:"url"`
	AvatarURL   NilString             `json:"avatar_url"`
	ID          int                   `json:"id"`
	NodeID      string                `json:"node_id"`
	State       string                `json:"state"`
	Description string                `json:"description"`
	TargetURL   string                `json:"target_url"`
	Context     string                `json:"context"`
	CreatedAt   string                `json:"created_at"`
	UpdatedAt   string                `json:"updated_at"`
	Creator     NilNullableSimpleUser `json:"creator"`
}

// GetURL returns the value of URL.
func (s *Status) GetURL() string {
	return s.URL
}

// GetAvatarURL returns the value of AvatarURL.
func (s *Status) GetAvatarURL() NilString {
	return s.AvatarURL
}

// GetID returns the value of ID.
func (s *Status) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Status) GetNodeID() string {
	return s.NodeID
}

// GetState returns the value of State.
func (s *Status) GetState() string {
	return s.State
}

// GetDescription returns the value of Description.
func (s *Status) GetDescription() string {
	return s.Description
}

// GetTargetURL returns the value of TargetURL.
func (s *Status) GetTargetURL() string {
	return s.TargetURL
}

// GetContext returns the value of Context.
func (s *Status) GetContext() string {
	return s.Context
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Status) GetCreatedAt() string {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Status) GetUpdatedAt() string {
	return s.UpdatedAt
}

// GetCreator returns the value of Creator.
func (s *Status) GetCreator() NilNullableSimpleUser {
	return s.Creator
}

// SetURL sets the value of URL.
func (s *Status) SetURL(val string) {
	s.URL = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *Status) SetAvatarURL(val NilString) {
	s.AvatarURL = val
}

// SetID sets the value of ID.
func (s *Status) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Status) SetNodeID(val string) {
	s.NodeID = val
}

// SetState sets the value of State.
func (s *Status) SetState(val string) {
	s.State = val
}

// SetDescription sets the value of Description.
func (s *Status) SetDescription(val string) {
	s.Description = val
}

// SetTargetURL sets the value of TargetURL.
func (s *Status) SetTargetURL(val string) {
	s.TargetURL = val
}

// SetContext sets the value of Context.
func (s *Status) SetContext(val string) {
	s.Context = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Status) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Status) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// SetCreator sets the value of Creator.
func (s *Status) SetCreator(val NilNullableSimpleUser) {
	s.Creator = val
}

// Status Check Policy.
// Ref: #/components/schemas/status-check-policy
type StatusCheckPolicy struct {
	URL         url.URL  `json:"url"`
	Strict      bool     `json:"strict"`
	Contexts    []string `json:"contexts"`
	ContextsURL url.URL  `json:"contexts_url"`
}

// GetURL returns the value of URL.
func (s *StatusCheckPolicy) GetURL() url.URL {
	return s.URL
}

// GetStrict returns the value of Strict.
func (s *StatusCheckPolicy) GetStrict() bool {
	return s.Strict
}

// GetContexts returns the value of Contexts.
func (s *StatusCheckPolicy) GetContexts() []string {
	return s.Contexts
}

// GetContextsURL returns the value of ContextsURL.
func (s *StatusCheckPolicy) GetContextsURL() url.URL {
	return s.ContextsURL
}

// SetURL sets the value of URL.
func (s *StatusCheckPolicy) SetURL(val url.URL) {
	s.URL = val
}

// SetStrict sets the value of Strict.
func (s *StatusCheckPolicy) SetStrict(val bool) {
	s.Strict = val
}

// SetContexts sets the value of Contexts.
func (s *StatusCheckPolicy) SetContexts(val []string) {
	s.Contexts = val
}

// SetContextsURL sets the value of ContextsURL.
func (s *StatusCheckPolicy) SetContextsURL(val url.URL) {
	s.ContextsURL = val
}

func (*StatusCheckPolicy) reposGetStatusChecksProtectionRes()   {}
func (*StatusCheckPolicy) reposUpdateStatusCheckProtectionRes() {}

// StatusHeaders wraps Status with response headers.
type StatusHeaders struct {
	Location OptString
	Response Status
}

// GetLocation returns the value of Location.
func (s *StatusHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *StatusHeaders) GetResponse() Status {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *StatusHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *StatusHeaders) SetResponse(val Status) {
	s.Response = val
}

// Tag.
// Ref: #/components/schemas/tag
type Tag struct {
	Name       string    `json:"name"`
	Commit     TagCommit `json:"commit"`
	ZipballURL url.URL   `json:"zipball_url"`
	TarballURL url.URL   `json:"tarball_url"`
	NodeID     string    `json:"node_id"`
}

// GetName returns the value of Name.
func (s *Tag) GetName() string {
	return s.Name
}

// GetCommit returns the value of Commit.
func (s *Tag) GetCommit() TagCommit {
	return s.Commit
}

// GetZipballURL returns the value of ZipballURL.
func (s *Tag) GetZipballURL() url.URL {
	return s.ZipballURL
}

// GetTarballURL returns the value of TarballURL.
func (s *Tag) GetTarballURL() url.URL {
	return s.TarballURL
}

// GetNodeID returns the value of NodeID.
func (s *Tag) GetNodeID() string {
	return s.NodeID
}

// SetName sets the value of Name.
func (s *Tag) SetName(val string) {
	s.Name = val
}

// SetCommit sets the value of Commit.
func (s *Tag) SetCommit(val TagCommit) {
	s.Commit = val
}

// SetZipballURL sets the value of ZipballURL.
func (s *Tag) SetZipballURL(val url.URL) {
	s.ZipballURL = val
}

// SetTarballURL sets the value of TarballURL.
func (s *Tag) SetTarballURL(val url.URL) {
	s.TarballURL = val
}

// SetNodeID sets the value of NodeID.
func (s *Tag) SetNodeID(val string) {
	s.NodeID = val
}

type TagCommit struct {
	Sha string  `json:"sha"`
	URL url.URL `json:"url"`
}

// GetSha returns the value of Sha.
func (s *TagCommit) GetSha() string {
	return s.Sha
}

// GetURL returns the value of URL.
func (s *TagCommit) GetURL() url.URL {
	return s.URL
}

// SetSha sets the value of Sha.
func (s *TagCommit) SetSha(val string) {
	s.Sha = val
}

// SetURL sets the value of URL.
func (s *TagCommit) SetURL(val url.URL) {
	s.URL = val
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/team
type Team struct {
	ID              int                   `json:"id"`
	NodeID          string                `json:"node_id"`
	Name            string                `json:"name"`
	Slug            string                `json:"slug"`
	Description     NilString             `json:"description"`
	Privacy         OptString             `json:"privacy"`
	Permission      string                `json:"permission"`
	Permissions     OptTeamPermissions    `json:"permissions"`
	URL             url.URL               `json:"url"`
	HTMLURL         url.URL               `json:"html_url"`
	MembersURL      string                `json:"members_url"`
	RepositoriesURL url.URL               `json:"repositories_url"`
	Parent          NilNullableTeamSimple `json:"parent"`
}

// GetID returns the value of ID.
func (s *Team) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Team) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *Team) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *Team) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *Team) GetDescription() NilString {
	return s.Description
}

// GetPrivacy returns the value of Privacy.
func (s *Team) GetPrivacy() OptString {
	return s.Privacy
}

// GetPermission returns the value of Permission.
func (s *Team) GetPermission() string {
	return s.Permission
}

// GetPermissions returns the value of Permissions.
func (s *Team) GetPermissions() OptTeamPermissions {
	return s.Permissions
}

// GetURL returns the value of URL.
func (s *Team) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Team) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetMembersURL returns the value of MembersURL.
func (s *Team) GetMembersURL() string {
	return s.MembersURL
}

// GetRepositoriesURL returns the value of RepositoriesURL.
func (s *Team) GetRepositoriesURL() url.URL {
	return s.RepositoriesURL
}

// GetParent returns the value of Parent.
func (s *Team) GetParent() NilNullableTeamSimple {
	return s.Parent
}

// SetID sets the value of ID.
func (s *Team) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Team) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *Team) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *Team) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *Team) SetDescription(val NilString) {
	s.Description = val
}

// SetPrivacy sets the value of Privacy.
func (s *Team) SetPrivacy(val OptString) {
	s.Privacy = val
}

// SetPermission sets the value of Permission.
func (s *Team) SetPermission(val string) {
	s.Permission = val
}

// SetPermissions sets the value of Permissions.
func (s *Team) SetPermissions(val OptTeamPermissions) {
	s.Permissions = val
}

// SetURL sets the value of URL.
func (s *Team) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Team) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetMembersURL sets the value of MembersURL.
func (s *Team) SetMembersURL(val string) {
	s.MembersURL = val
}

// SetRepositoriesURL sets the value of RepositoriesURL.
func (s *Team) SetRepositoriesURL(val url.URL) {
	s.RepositoriesURL = val
}

// SetParent sets the value of Parent.
func (s *Team) SetParent(val NilNullableTeamSimple) {
	s.Parent = val
}

// A team discussion is a persistent record of a free-form conversation within a team.
// Ref: #/components/schemas/team-discussion
type TeamDiscussion struct {
	Author NilNullableSimpleUser `json:"author"`
	// The main text of the discussion.
	Body     string `json:"body"`
	BodyHTML string `json:"body_html"`
	// The current version of the body content. If provided, this update operation will be rejected if
	// the given version does not match the latest version on the server.
	BodyVersion   string      `json:"body_version"`
	CommentsCount int         `json:"comments_count"`
	CommentsURL   url.URL     `json:"comments_url"`
	CreatedAt     time.Time   `json:"created_at"`
	LastEditedAt  NilDateTime `json:"last_edited_at"`
	HTMLURL       url.URL     `json:"html_url"`
	NodeID        string      `json:"node_id"`
	// The unique sequence number of a team discussion.
	Number int `json:"number"`
	// Whether or not this discussion should be pinned for easy retrieval.
	Pinned bool `json:"pinned"`
	// Whether or not this discussion should be restricted to team members and organization
	// administrators.
	Private bool    `json:"private"`
	TeamURL url.URL `json:"team_url"`
	// The title of the discussion.
	Title     string            `json:"title"`
	UpdatedAt time.Time         `json:"updated_at"`
	URL       url.URL           `json:"url"`
	Reactions OptReactionRollup `json:"reactions"`
}

// GetAuthor returns the value of Author.
func (s *TeamDiscussion) GetAuthor() NilNullableSimpleUser {
	return s.Author
}

// GetBody returns the value of Body.
func (s *TeamDiscussion) GetBody() string {
	return s.Body
}

// GetBodyHTML returns the value of BodyHTML.
func (s *TeamDiscussion) GetBodyHTML() string {
	return s.BodyHTML
}

// GetBodyVersion returns the value of BodyVersion.
func (s *TeamDiscussion) GetBodyVersion() string {
	return s.BodyVersion
}

// GetCommentsCount returns the value of CommentsCount.
func (s *TeamDiscussion) GetCommentsCount() int {
	return s.CommentsCount
}

// GetCommentsURL returns the value of CommentsURL.
func (s *TeamDiscussion) GetCommentsURL() url.URL {
	return s.CommentsURL
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamDiscussion) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetLastEditedAt returns the value of LastEditedAt.
func (s *TeamDiscussion) GetLastEditedAt() NilDateTime {
	return s.LastEditedAt
}

// GetHTMLURL returns the value of HTMLURL.
func (s *TeamDiscussion) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetNodeID returns the value of NodeID.
func (s *TeamDiscussion) GetNodeID() string {
	return s.NodeID
}

// GetNumber returns the value of Number.
func (s *TeamDiscussion) GetNumber() int {
	return s.Number
}

// GetPinned returns the value of Pinned.
func (s *TeamDiscussion) GetPinned() bool {
	return s.Pinned
}

// GetPrivate returns the value of Private.
func (s *TeamDiscussion) GetPrivate() bool {
	return s.Private
}

// GetTeamURL returns the value of TeamURL.
func (s *TeamDiscussion) GetTeamURL() url.URL {
	return s.TeamURL
}

// GetTitle returns the value of Title.
func (s *TeamDiscussion) GetTitle() string {
	return s.Title
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TeamDiscussion) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetURL returns the value of URL.
func (s *TeamDiscussion) GetURL() url.URL {
	return s.URL
}

// GetReactions returns the value of Reactions.
func (s *TeamDiscussion) GetReactions() OptReactionRollup {
	return s.Reactions
}

// SetAuthor sets the value of Author.
func (s *TeamDiscussion) SetAuthor(val NilNullableSimpleUser) {
	s.Author = val
}

// SetBody sets the value of Body.
func (s *TeamDiscussion) SetBody(val string) {
	s.Body = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *TeamDiscussion) SetBodyHTML(val string) {
	s.BodyHTML = val
}

// SetBodyVersion sets the value of BodyVersion.
func (s *TeamDiscussion) SetBodyVersion(val string) {
	s.BodyVersion = val
}

// SetCommentsCount sets the value of CommentsCount.
func (s *TeamDiscussion) SetCommentsCount(val int) {
	s.CommentsCount = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *TeamDiscussion) SetCommentsURL(val url.URL) {
	s.CommentsURL = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamDiscussion) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetLastEditedAt sets the value of LastEditedAt.
func (s *TeamDiscussion) SetLastEditedAt(val NilDateTime) {
	s.LastEditedAt = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *TeamDiscussion) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetNodeID sets the value of NodeID.
func (s *TeamDiscussion) SetNodeID(val string) {
	s.NodeID = val
}

// SetNumber sets the value of Number.
func (s *TeamDiscussion) SetNumber(val int) {
	s.Number = val
}

// SetPinned sets the value of Pinned.
func (s *TeamDiscussion) SetPinned(val bool) {
	s.Pinned = val
}

// SetPrivate sets the value of Private.
func (s *TeamDiscussion) SetPrivate(val bool) {
	s.Private = val
}

// SetTeamURL sets the value of TeamURL.
func (s *TeamDiscussion) SetTeamURL(val url.URL) {
	s.TeamURL = val
}

// SetTitle sets the value of Title.
func (s *TeamDiscussion) SetTitle(val string) {
	s.Title = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TeamDiscussion) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetURL sets the value of URL.
func (s *TeamDiscussion) SetURL(val url.URL) {
	s.URL = val
}

// SetReactions sets the value of Reactions.
func (s *TeamDiscussion) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

// A reply to a discussion within a team.
// Ref: #/components/schemas/team-discussion-comment
type TeamDiscussionComment struct {
	Author NilNullableSimpleUser `json:"author"`
	// The main text of the comment.
	Body     string `json:"body"`
	BodyHTML string `json:"body_html"`
	// The current version of the body content. If provided, this update operation will be rejected if
	// the given version does not match the latest version on the server.
	BodyVersion   string      `json:"body_version"`
	CreatedAt     time.Time   `json:"created_at"`
	LastEditedAt  NilDateTime `json:"last_edited_at"`
	DiscussionURL url.URL     `json:"discussion_url"`
	HTMLURL       url.URL     `json:"html_url"`
	NodeID        string      `json:"node_id"`
	// The unique sequence number of a team discussion comment.
	Number    int               `json:"number"`
	UpdatedAt time.Time         `json:"updated_at"`
	URL       url.URL           `json:"url"`
	Reactions OptReactionRollup `json:"reactions"`
}

// GetAuthor returns the value of Author.
func (s *TeamDiscussionComment) GetAuthor() NilNullableSimpleUser {
	return s.Author
}

// GetBody returns the value of Body.
func (s *TeamDiscussionComment) GetBody() string {
	return s.Body
}

// GetBodyHTML returns the value of BodyHTML.
func (s *TeamDiscussionComment) GetBodyHTML() string {
	return s.BodyHTML
}

// GetBodyVersion returns the value of BodyVersion.
func (s *TeamDiscussionComment) GetBodyVersion() string {
	return s.BodyVersion
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamDiscussionComment) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetLastEditedAt returns the value of LastEditedAt.
func (s *TeamDiscussionComment) GetLastEditedAt() NilDateTime {
	return s.LastEditedAt
}

// GetDiscussionURL returns the value of DiscussionURL.
func (s *TeamDiscussionComment) GetDiscussionURL() url.URL {
	return s.DiscussionURL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *TeamDiscussionComment) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetNodeID returns the value of NodeID.
func (s *TeamDiscussionComment) GetNodeID() string {
	return s.NodeID
}

// GetNumber returns the value of Number.
func (s *TeamDiscussionComment) GetNumber() int {
	return s.Number
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TeamDiscussionComment) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetURL returns the value of URL.
func (s *TeamDiscussionComment) GetURL() url.URL {
	return s.URL
}

// GetReactions returns the value of Reactions.
func (s *TeamDiscussionComment) GetReactions() OptReactionRollup {
	return s.Reactions
}

// SetAuthor sets the value of Author.
func (s *TeamDiscussionComment) SetAuthor(val NilNullableSimpleUser) {
	s.Author = val
}

// SetBody sets the value of Body.
func (s *TeamDiscussionComment) SetBody(val string) {
	s.Body = val
}

// SetBodyHTML sets the value of BodyHTML.
func (s *TeamDiscussionComment) SetBodyHTML(val string) {
	s.BodyHTML = val
}

// SetBodyVersion sets the value of BodyVersion.
func (s *TeamDiscussionComment) SetBodyVersion(val string) {
	s.BodyVersion = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamDiscussionComment) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetLastEditedAt sets the value of LastEditedAt.
func (s *TeamDiscussionComment) SetLastEditedAt(val NilDateTime) {
	s.LastEditedAt = val
}

// SetDiscussionURL sets the value of DiscussionURL.
func (s *TeamDiscussionComment) SetDiscussionURL(val url.URL) {
	s.DiscussionURL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *TeamDiscussionComment) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetNodeID sets the value of NodeID.
func (s *TeamDiscussionComment) SetNodeID(val string) {
	s.NodeID = val
}

// SetNumber sets the value of Number.
func (s *TeamDiscussionComment) SetNumber(val int) {
	s.Number = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TeamDiscussionComment) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetURL sets the value of URL.
func (s *TeamDiscussionComment) SetURL(val url.URL) {
	s.URL = val
}

// SetReactions sets the value of Reactions.
func (s *TeamDiscussionComment) SetReactions(val OptReactionRollup) {
	s.Reactions = val
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/team-full
type TeamFull struct {
	// Unique identifier of the team.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// URL for the team.
	URL     url.URL `json:"url"`
	HTMLURL url.URL `json:"html_url"`
	// Name of the team.
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	Description NilString `json:"description"`
	// The level of privacy this team should have.
	Privacy OptTeamFullPrivacy `json:"privacy"`
	// Permission that the team will have for its repositories.
	Permission      string                   `json:"permission"`
	MembersURL      string                   `json:"members_url"`
	RepositoriesURL url.URL                  `json:"repositories_url"`
	Parent          OptNilNullableTeamSimple `json:"parent"`
	MembersCount    int                      `json:"members_count"`
	ReposCount      int                      `json:"repos_count"`
	CreatedAt       time.Time                `json:"created_at"`
	UpdatedAt       time.Time                `json:"updated_at"`
	Organization    OrganizationFull         `json:"organization"`
	// Distinguished Name (DN) that team maps to within LDAP environment.
	LdapDn OptString `json:"ldap_dn"`
}

// GetID returns the value of ID.
func (s *TeamFull) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *TeamFull) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *TeamFull) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *TeamFull) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetName returns the value of Name.
func (s *TeamFull) GetName() string {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *TeamFull) GetSlug() string {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *TeamFull) GetDescription() NilString {
	return s.Description
}

// GetPrivacy returns the value of Privacy.
func (s *TeamFull) GetPrivacy() OptTeamFullPrivacy {
	return s.Privacy
}

// GetPermission returns the value of Permission.
func (s *TeamFull) GetPermission() string {
	return s.Permission
}

// GetMembersURL returns the value of MembersURL.
func (s *TeamFull) GetMembersURL() string {
	return s.MembersURL
}

// GetRepositoriesURL returns the value of RepositoriesURL.
func (s *TeamFull) GetRepositoriesURL() url.URL {
	return s.RepositoriesURL
}

// GetParent returns the value of Parent.
func (s *TeamFull) GetParent() OptNilNullableTeamSimple {
	return s.Parent
}

// GetMembersCount returns the value of MembersCount.
func (s *TeamFull) GetMembersCount() int {
	return s.MembersCount
}

// GetReposCount returns the value of ReposCount.
func (s *TeamFull) GetReposCount() int {
	return s.ReposCount
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamFull) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TeamFull) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetOrganization returns the value of Organization.
func (s *TeamFull) GetOrganization() OrganizationFull {
	return s.Organization
}

// GetLdapDn returns the value of LdapDn.
func (s *TeamFull) GetLdapDn() OptString {
	return s.LdapDn
}

// SetID sets the value of ID.
func (s *TeamFull) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *TeamFull) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *TeamFull) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *TeamFull) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetName sets the value of Name.
func (s *TeamFull) SetName(val string) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *TeamFull) SetSlug(val string) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *TeamFull) SetDescription(val NilString) {
	s.Description = val
}

// SetPrivacy sets the value of Privacy.
func (s *TeamFull) SetPrivacy(val OptTeamFullPrivacy) {
	s.Privacy = val
}

// SetPermission sets the value of Permission.
func (s *TeamFull) SetPermission(val string) {
	s.Permission = val
}

// SetMembersURL sets the value of MembersURL.
func (s *TeamFull) SetMembersURL(val string) {
	s.MembersURL = val
}

// SetRepositoriesURL sets the value of RepositoriesURL.
func (s *TeamFull) SetRepositoriesURL(val url.URL) {
	s.RepositoriesURL = val
}

// SetParent sets the value of Parent.
func (s *TeamFull) SetParent(val OptNilNullableTeamSimple) {
	s.Parent = val
}

// SetMembersCount sets the value of MembersCount.
func (s *TeamFull) SetMembersCount(val int) {
	s.MembersCount = val
}

// SetReposCount sets the value of ReposCount.
func (s *TeamFull) SetReposCount(val int) {
	s.ReposCount = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamFull) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TeamFull) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetOrganization sets the value of Organization.
func (s *TeamFull) SetOrganization(val OrganizationFull) {
	s.Organization = val
}

// SetLdapDn sets the value of LdapDn.
func (s *TeamFull) SetLdapDn(val OptString) {
	s.LdapDn = val
}

func (*TeamFull) teamsCreateRes()    {}
func (*TeamFull) teamsGetByNameRes() {}
func (*TeamFull) teamsGetLegacyRes() {}

// The level of privacy this team should have.
type TeamFullPrivacy string

const (
	TeamFullPrivacyClosed TeamFullPrivacy = "closed"
	TeamFullPrivacySecret TeamFullPrivacy = "secret"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamFullPrivacy) MarshalText() ([]byte, error) {
	switch s {
	case TeamFullPrivacyClosed:
		return []byte(s), nil
	case TeamFullPrivacySecret:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamFullPrivacy) UnmarshalText(data []byte) error {
	switch TeamFullPrivacy(data) {
	case TeamFullPrivacyClosed:
		*s = TeamFullPrivacyClosed
		return nil
	case TeamFullPrivacySecret:
		*s = TeamFullPrivacySecret
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Team Membership.
// Ref: #/components/schemas/team-membership
type TeamMembership struct {
	URL url.URL `json:"url"`
	// The role of the user in the team.
	Role TeamMembershipRole `json:"role"`
	// The state of the user's membership in the team.
	State TeamMembershipState `json:"state"`
}

// GetURL returns the value of URL.
func (s *TeamMembership) GetURL() url.URL {
	return s.URL
}

// GetRole returns the value of Role.
func (s *TeamMembership) GetRole() TeamMembershipRole {
	return s.Role
}

// GetState returns the value of State.
func (s *TeamMembership) GetState() TeamMembershipState {
	return s.State
}

// SetURL sets the value of URL.
func (s *TeamMembership) SetURL(val url.URL) {
	s.URL = val
}

// SetRole sets the value of Role.
func (s *TeamMembership) SetRole(val TeamMembershipRole) {
	s.Role = val
}

// SetState sets the value of State.
func (s *TeamMembership) SetState(val TeamMembershipState) {
	s.State = val
}

func (*TeamMembership) teamsAddOrUpdateMembershipForUserInOrgRes()  {}
func (*TeamMembership) teamsAddOrUpdateMembershipForUserLegacyRes() {}
func (*TeamMembership) teamsGetMembershipForUserInOrgRes()          {}
func (*TeamMembership) teamsGetMembershipForUserLegacyRes()         {}

// The role of the user in the team.
type TeamMembershipRole string

const (
	TeamMembershipRoleMember     TeamMembershipRole = "member"
	TeamMembershipRoleMaintainer TeamMembershipRole = "maintainer"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamMembershipRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamMembershipRoleMember:
		return []byte(s), nil
	case TeamMembershipRoleMaintainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamMembershipRole) UnmarshalText(data []byte) error {
	switch TeamMembershipRole(data) {
	case TeamMembershipRoleMember:
		*s = TeamMembershipRoleMember
		return nil
	case TeamMembershipRoleMaintainer:
		*s = TeamMembershipRoleMaintainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The state of the user's membership in the team.
type TeamMembershipState string

const (
	TeamMembershipStateActive  TeamMembershipState = "active"
	TeamMembershipStatePending TeamMembershipState = "pending"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamMembershipState) MarshalText() ([]byte, error) {
	switch s {
	case TeamMembershipStateActive:
		return []byte(s), nil
	case TeamMembershipStatePending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamMembershipState) UnmarshalText(data []byte) error {
	switch TeamMembershipState(data) {
	case TeamMembershipStateActive:
		*s = TeamMembershipStateActive
		return nil
	case TeamMembershipStatePending:
		*s = TeamMembershipStatePending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TeamPermissions struct {
	Pull     bool `json:"pull"`
	Triage   bool `json:"triage"`
	Push     bool `json:"push"`
	Maintain bool `json:"maintain"`
	Admin    bool `json:"admin"`
}

// GetPull returns the value of Pull.
func (s *TeamPermissions) GetPull() bool {
	return s.Pull
}

// GetTriage returns the value of Triage.
func (s *TeamPermissions) GetTriage() bool {
	return s.Triage
}

// GetPush returns the value of Push.
func (s *TeamPermissions) GetPush() bool {
	return s.Push
}

// GetMaintain returns the value of Maintain.
func (s *TeamPermissions) GetMaintain() bool {
	return s.Maintain
}

// GetAdmin returns the value of Admin.
func (s *TeamPermissions) GetAdmin() bool {
	return s.Admin
}

// SetPull sets the value of Pull.
func (s *TeamPermissions) SetPull(val bool) {
	s.Pull = val
}

// SetTriage sets the value of Triage.
func (s *TeamPermissions) SetTriage(val bool) {
	s.Triage = val
}

// SetPush sets the value of Push.
func (s *TeamPermissions) SetPush(val bool) {
	s.Push = val
}

// SetMaintain sets the value of Maintain.
func (s *TeamPermissions) SetMaintain(val bool) {
	s.Maintain = val
}

// SetAdmin sets the value of Admin.
func (s *TeamPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// A team's access to a project.
// Ref: #/components/schemas/team-project
type TeamProject struct {
	OwnerURL   string     `json:"owner_url"`
	URL        string     `json:"url"`
	HTMLURL    string     `json:"html_url"`
	ColumnsURL string     `json:"columns_url"`
	ID         int        `json:"id"`
	NodeID     string     `json:"node_id"`
	Name       string     `json:"name"`
	Body       NilString  `json:"body"`
	Number     int        `json:"number"`
	State      string     `json:"state"`
	Creator    SimpleUser `json:"creator"`
	CreatedAt  string     `json:"created_at"`
	UpdatedAt  string     `json:"updated_at"`
	// The organization permission for this project. Only present when owner is an organization.
	OrganizationPermission OptString `json:"organization_permission"`
	// Whether the project is private or not. Only present when owner is an organization.
	Private     OptBool                `json:"private"`
	Permissions TeamProjectPermissions `json:"permissions"`
}

// GetOwnerURL returns the value of OwnerURL.
func (s *TeamProject) GetOwnerURL() string {
	return s.OwnerURL
}

// GetURL returns the value of URL.
func (s *TeamProject) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *TeamProject) GetHTMLURL() string {
	return s.HTMLURL
}

// GetColumnsURL returns the value of ColumnsURL.
func (s *TeamProject) GetColumnsURL() string {
	return s.ColumnsURL
}

// GetID returns the value of ID.
func (s *TeamProject) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *TeamProject) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *TeamProject) GetName() string {
	return s.Name
}

// GetBody returns the value of Body.
func (s *TeamProject) GetBody() NilString {
	return s.Body
}

// GetNumber returns the value of Number.
func (s *TeamProject) GetNumber() int {
	return s.Number
}

// GetState returns the value of State.
func (s *TeamProject) GetState() string {
	return s.State
}

// GetCreator returns the value of Creator.
func (s *TeamProject) GetCreator() SimpleUser {
	return s.Creator
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamProject) GetCreatedAt() string {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TeamProject) GetUpdatedAt() string {
	return s.UpdatedAt
}

// GetOrganizationPermission returns the value of OrganizationPermission.
func (s *TeamProject) GetOrganizationPermission() OptString {
	return s.OrganizationPermission
}

// GetPrivate returns the value of Private.
func (s *TeamProject) GetPrivate() OptBool {
	return s.Private
}

// GetPermissions returns the value of Permissions.
func (s *TeamProject) GetPermissions() TeamProjectPermissions {
	return s.Permissions
}

// SetOwnerURL sets the value of OwnerURL.
func (s *TeamProject) SetOwnerURL(val string) {
	s.OwnerURL = val
}

// SetURL sets the value of URL.
func (s *TeamProject) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *TeamProject) SetHTMLURL(val string) {
	s.HTMLURL = val
}

// SetColumnsURL sets the value of ColumnsURL.
func (s *TeamProject) SetColumnsURL(val string) {
	s.ColumnsURL = val
}

// SetID sets the value of ID.
func (s *TeamProject) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *TeamProject) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *TeamProject) SetName(val string) {
	s.Name = val
}

// SetBody sets the value of Body.
func (s *TeamProject) SetBody(val NilString) {
	s.Body = val
}

// SetNumber sets the value of Number.
func (s *TeamProject) SetNumber(val int) {
	s.Number = val
}

// SetState sets the value of State.
func (s *TeamProject) SetState(val string) {
	s.State = val
}

// SetCreator sets the value of Creator.
func (s *TeamProject) SetCreator(val SimpleUser) {
	s.Creator = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamProject) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TeamProject) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// SetOrganizationPermission sets the value of OrganizationPermission.
func (s *TeamProject) SetOrganizationPermission(val OptString) {
	s.OrganizationPermission = val
}

// SetPrivate sets the value of Private.
func (s *TeamProject) SetPrivate(val OptBool) {
	s.Private = val
}

// SetPermissions sets the value of Permissions.
func (s *TeamProject) SetPermissions(val TeamProjectPermissions) {
	s.Permissions = val
}

func (*TeamProject) teamsCheckPermissionsForProjectInOrgRes()  {}
func (*TeamProject) teamsCheckPermissionsForProjectLegacyRes() {}

type TeamProjectPermissions struct {
	Read  bool `json:"read"`
	Write bool `json:"write"`
	Admin bool `json:"admin"`
}

// GetRead returns the value of Read.
func (s *TeamProjectPermissions) GetRead() bool {
	return s.Read
}

// GetWrite returns the value of Write.
func (s *TeamProjectPermissions) GetWrite() bool {
	return s.Write
}

// GetAdmin returns the value of Admin.
func (s *TeamProjectPermissions) GetAdmin() bool {
	return s.Admin
}

// SetRead sets the value of Read.
func (s *TeamProjectPermissions) SetRead(val bool) {
	s.Read = val
}

// SetWrite sets the value of Write.
func (s *TeamProjectPermissions) SetWrite(val bool) {
	s.Write = val
}

// SetAdmin sets the value of Admin.
func (s *TeamProjectPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// A team's access to a repository.
// Ref: #/components/schemas/team-repository
type TeamRepository struct {
	// Unique identifier of the repository.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// The name of the repository.
	Name        string                       `json:"name"`
	FullName    string                       `json:"full_name"`
	License     NilNullableLicenseSimple     `json:"license"`
	Forks       int                          `json:"forks"`
	Permissions OptTeamRepositoryPermissions `json:"permissions"`
	Owner       NilNullableSimpleUser        `json:"owner"`
	// Whether the repository is private or public.
	Private          bool      `json:"private"`
	HTMLURL          url.URL   `json:"html_url"`
	Description      NilString `json:"description"`
	Fork             bool      `json:"fork"`
	URL              url.URL   `json:"url"`
	ArchiveURL       string    `json:"archive_url"`
	AssigneesURL     string    `json:"assignees_url"`
	BlobsURL         string    `json:"blobs_url"`
	BranchesURL      string    `json:"branches_url"`
	CollaboratorsURL string    `json:"collaborators_url"`
	CommentsURL      string    `json:"comments_url"`
	CommitsURL       string    `json:"commits_url"`
	CompareURL       string    `json:"compare_url"`
	ContentsURL      string    `json:"contents_url"`
	ContributorsURL  url.URL   `json:"contributors_url"`
	DeploymentsURL   url.URL   `json:"deployments_url"`
	DownloadsURL     url.URL   `json:"downloads_url"`
	EventsURL        url.URL   `json:"events_url"`
	ForksURL         url.URL   `json:"forks_url"`
	GitCommitsURL    string    `json:"git_commits_url"`
	GitRefsURL       string    `json:"git_refs_url"`
	GitTagsURL       string    `json:"git_tags_url"`
	GitURL           string    `json:"git_url"`
	IssueCommentURL  string    `json:"issue_comment_url"`
	IssueEventsURL   string    `json:"issue_events_url"`
	IssuesURL        string    `json:"issues_url"`
	KeysURL          string    `json:"keys_url"`
	LabelsURL        string    `json:"labels_url"`
	LanguagesURL     url.URL   `json:"languages_url"`
	MergesURL        url.URL   `json:"merges_url"`
	MilestonesURL    string    `json:"milestones_url"`
	NotificationsURL string    `json:"notifications_url"`
	PullsURL         string    `json:"pulls_url"`
	ReleasesURL      string    `json:"releases_url"`
	SSHURL           string    `json:"ssh_url"`
	StargazersURL    url.URL   `json:"stargazers_url"`
	StatusesURL      string    `json:"statuses_url"`
	SubscribersURL   url.URL   `json:"subscribers_url"`
	SubscriptionURL  url.URL   `json:"subscription_url"`
	TagsURL          url.URL   `json:"tags_url"`
	TeamsURL         url.URL   `json:"teams_url"`
	TreesURL         string    `json:"trees_url"`
	CloneURL         string    `json:"clone_url"`
	MirrorURL        NilURI    `json:"mirror_url"`
	HooksURL         url.URL   `json:"hooks_url"`
	SvnURL           url.URL   `json:"svn_url"`
	Homepage         NilURI    `json:"homepage"`
	Language         NilString `json:"language"`
	ForksCount       int       `json:"forks_count"`
	StargazersCount  int       `json:"stargazers_count"`
	WatchersCount    int       `json:"watchers_count"`
	Size             int       `json:"size"`
	// The default branch of the repository.
	DefaultBranch   string `json:"default_branch"`
	OpenIssuesCount int    `json:"open_issues_count"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate OptBool  `json:"is_template"`
	Topics     []string `json:"topics"`
	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`
	// Whether the wiki is enabled.
	HasWiki  bool `json:"has_wiki"`
	HasPages bool `json:"has_pages"`
	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`
	// Whether the repository is archived.
	Archived bool `json:"archived"`
	// Returns whether or not this repository disabled.
	Disabled bool `json:"disabled"`
	// The repository visibility: public, private, or internal.
	Visibility OptString   `json:"visibility"`
	PushedAt   NilDateTime `json:"pushed_at"`
	CreatedAt  NilDateTime `json:"created_at"`
	UpdatedAt  NilDateTime `json:"updated_at"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge   OptBool                  `json:"allow_rebase_merge"`
	TemplateRepository OptNilNullableRepository `json:"template_repository"`
	TempCloneToken     OptString                `json:"temp_clone_token"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge OptBool `json:"allow_squash_merge"`
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge OptBool `json:"allow_auto_merge"`
	// Whether to delete head branches when pull requests are merged.
	DeleteBranchOnMerge OptBool `json:"delete_branch_on_merge"`
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit OptBool `json:"allow_merge_commit"`
	// Whether to allow forking this repo.
	AllowForking     OptBool   `json:"allow_forking"`
	SubscribersCount OptInt    `json:"subscribers_count"`
	NetworkCount     OptInt    `json:"network_count"`
	OpenIssues       int       `json:"open_issues"`
	Watchers         int       `json:"watchers"`
	MasterBranch     OptString `json:"master_branch"`
}

// GetID returns the value of ID.
func (s *TeamRepository) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *TeamRepository) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *TeamRepository) GetName() string {
	return s.Name
}

// GetFullName returns the value of FullName.
func (s *TeamRepository) GetFullName() string {
	return s.FullName
}

// GetLicense returns the value of License.
func (s *TeamRepository) GetLicense() NilNullableLicenseSimple {
	return s.License
}

// GetForks returns the value of Forks.
func (s *TeamRepository) GetForks() int {
	return s.Forks
}

// GetPermissions returns the value of Permissions.
func (s *TeamRepository) GetPermissions() OptTeamRepositoryPermissions {
	return s.Permissions
}

// GetOwner returns the value of Owner.
func (s *TeamRepository) GetOwner() NilNullableSimpleUser {
	return s.Owner
}

// GetPrivate returns the value of Private.
func (s *TeamRepository) GetPrivate() bool {
	return s.Private
}

// GetHTMLURL returns the value of HTMLURL.
func (s *TeamRepository) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetDescription returns the value of Description.
func (s *TeamRepository) GetDescription() NilString {
	return s.Description
}

// GetFork returns the value of Fork.
func (s *TeamRepository) GetFork() bool {
	return s.Fork
}

// GetURL returns the value of URL.
func (s *TeamRepository) GetURL() url.URL {
	return s.URL
}

// GetArchiveURL returns the value of ArchiveURL.
func (s *TeamRepository) GetArchiveURL() string {
	return s.ArchiveURL
}

// GetAssigneesURL returns the value of AssigneesURL.
func (s *TeamRepository) GetAssigneesURL() string {
	return s.AssigneesURL
}

// GetBlobsURL returns the value of BlobsURL.
func (s *TeamRepository) GetBlobsURL() string {
	return s.BlobsURL
}

// GetBranchesURL returns the value of BranchesURL.
func (s *TeamRepository) GetBranchesURL() string {
	return s.BranchesURL
}

// GetCollaboratorsURL returns the value of CollaboratorsURL.
func (s *TeamRepository) GetCollaboratorsURL() string {
	return s.CollaboratorsURL
}

// GetCommentsURL returns the value of CommentsURL.
func (s *TeamRepository) GetCommentsURL() string {
	return s.CommentsURL
}

// GetCommitsURL returns the value of CommitsURL.
func (s *TeamRepository) GetCommitsURL() string {
	return s.CommitsURL
}

// GetCompareURL returns the value of CompareURL.
func (s *TeamRepository) GetCompareURL() string {
	return s.CompareURL
}

// GetContentsURL returns the value of ContentsURL.
func (s *TeamRepository) GetContentsURL() string {
	return s.ContentsURL
}

// GetContributorsURL returns the value of ContributorsURL.
func (s *TeamRepository) GetContributorsURL() url.URL {
	return s.ContributorsURL
}

// GetDeploymentsURL returns the value of DeploymentsURL.
func (s *TeamRepository) GetDeploymentsURL() url.URL {
	return s.DeploymentsURL
}

// GetDownloadsURL returns the value of DownloadsURL.
func (s *TeamRepository) GetDownloadsURL() url.URL {
	return s.DownloadsURL
}

// GetEventsURL returns the value of EventsURL.
func (s *TeamRepository) GetEventsURL() url.URL {
	return s.EventsURL
}

// GetForksURL returns the value of ForksURL.
func (s *TeamRepository) GetForksURL() url.URL {
	return s.ForksURL
}

// GetGitCommitsURL returns the value of GitCommitsURL.
func (s *TeamRepository) GetGitCommitsURL() string {
	return s.GitCommitsURL
}

// GetGitRefsURL returns the value of GitRefsURL.
func (s *TeamRepository) GetGitRefsURL() string {
	return s.GitRefsURL
}

// GetGitTagsURL returns the value of GitTagsURL.
func (s *TeamRepository) GetGitTagsURL() string {
	return s.GitTagsURL
}

// GetGitURL returns the value of GitURL.
func (s *TeamRepository) GetGitURL() string {
	return s.GitURL
}

// GetIssueCommentURL returns the value of IssueCommentURL.
func (s *TeamRepository) GetIssueCommentURL() string {
	return s.IssueCommentURL
}

// GetIssueEventsURL returns the value of IssueEventsURL.
func (s *TeamRepository) GetIssueEventsURL() string {
	return s.IssueEventsURL
}

// GetIssuesURL returns the value of IssuesURL.
func (s *TeamRepository) GetIssuesURL() string {
	return s.IssuesURL
}

// GetKeysURL returns the value of KeysURL.
func (s *TeamRepository) GetKeysURL() string {
	return s.KeysURL
}

// GetLabelsURL returns the value of LabelsURL.
func (s *TeamRepository) GetLabelsURL() string {
	return s.LabelsURL
}

// GetLanguagesURL returns the value of LanguagesURL.
func (s *TeamRepository) GetLanguagesURL() url.URL {
	return s.LanguagesURL
}

// GetMergesURL returns the value of MergesURL.
func (s *TeamRepository) GetMergesURL() url.URL {
	return s.MergesURL
}

// GetMilestonesURL returns the value of MilestonesURL.
func (s *TeamRepository) GetMilestonesURL() string {
	return s.MilestonesURL
}

// GetNotificationsURL returns the value of NotificationsURL.
func (s *TeamRepository) GetNotificationsURL() string {
	return s.NotificationsURL
}

// GetPullsURL returns the value of PullsURL.
func (s *TeamRepository) GetPullsURL() string {
	return s.PullsURL
}

// GetReleasesURL returns the value of ReleasesURL.
func (s *TeamRepository) GetReleasesURL() string {
	return s.ReleasesURL
}

// GetSSHURL returns the value of SSHURL.
func (s *TeamRepository) GetSSHURL() string {
	return s.SSHURL
}

// GetStargazersURL returns the value of StargazersURL.
func (s *TeamRepository) GetStargazersURL() url.URL {
	return s.StargazersURL
}

// GetStatusesURL returns the value of StatusesURL.
func (s *TeamRepository) GetStatusesURL() string {
	return s.StatusesURL
}

// GetSubscribersURL returns the value of SubscribersURL.
func (s *TeamRepository) GetSubscribersURL() url.URL {
	return s.SubscribersURL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *TeamRepository) GetSubscriptionURL() url.URL {
	return s.SubscriptionURL
}

// GetTagsURL returns the value of TagsURL.
func (s *TeamRepository) GetTagsURL() url.URL {
	return s.TagsURL
}

// GetTeamsURL returns the value of TeamsURL.
func (s *TeamRepository) GetTeamsURL() url.URL {
	return s.TeamsURL
}

// GetTreesURL returns the value of TreesURL.
func (s *TeamRepository) GetTreesURL() string {
	return s.TreesURL
}

// GetCloneURL returns the value of CloneURL.
func (s *TeamRepository) GetCloneURL() string {
	return s.CloneURL
}

// GetMirrorURL returns the value of MirrorURL.
func (s *TeamRepository) GetMirrorURL() NilURI {
	return s.MirrorURL
}

// GetHooksURL returns the value of HooksURL.
func (s *TeamRepository) GetHooksURL() url.URL {
	return s.HooksURL
}

// GetSvnURL returns the value of SvnURL.
func (s *TeamRepository) GetSvnURL() url.URL {
	return s.SvnURL
}

// GetHomepage returns the value of Homepage.
func (s *TeamRepository) GetHomepage() NilURI {
	return s.Homepage
}

// GetLanguage returns the value of Language.
func (s *TeamRepository) GetLanguage() NilString {
	return s.Language
}

// GetForksCount returns the value of ForksCount.
func (s *TeamRepository) GetForksCount() int {
	return s.ForksCount
}

// GetStargazersCount returns the value of StargazersCount.
func (s *TeamRepository) GetStargazersCount() int {
	return s.StargazersCount
}

// GetWatchersCount returns the value of WatchersCount.
func (s *TeamRepository) GetWatchersCount() int {
	return s.WatchersCount
}

// GetSize returns the value of Size.
func (s *TeamRepository) GetSize() int {
	return s.Size
}

// GetDefaultBranch returns the value of DefaultBranch.
func (s *TeamRepository) GetDefaultBranch() string {
	return s.DefaultBranch
}

// GetOpenIssuesCount returns the value of OpenIssuesCount.
func (s *TeamRepository) GetOpenIssuesCount() int {
	return s.OpenIssuesCount
}

// GetIsTemplate returns the value of IsTemplate.
func (s *TeamRepository) GetIsTemplate() OptBool {
	return s.IsTemplate
}

// GetTopics returns the value of Topics.
func (s *TeamRepository) GetTopics() []string {
	return s.Topics
}

// GetHasIssues returns the value of HasIssues.
func (s *TeamRepository) GetHasIssues() bool {
	return s.HasIssues
}

// GetHasProjects returns the value of HasProjects.
func (s *TeamRepository) GetHasProjects() bool {
	return s.HasProjects
}

// GetHasWiki returns the value of HasWiki.
func (s *TeamRepository) GetHasWiki() bool {
	return s.HasWiki
}

// GetHasPages returns the value of HasPages.
func (s *TeamRepository) GetHasPages() bool {
	return s.HasPages
}

// GetHasDownloads returns the value of HasDownloads.
func (s *TeamRepository) GetHasDownloads() bool {
	return s.HasDownloads
}

// GetArchived returns the value of Archived.
func (s *TeamRepository) GetArchived() bool {
	return s.Archived
}

// GetDisabled returns the value of Disabled.
func (s *TeamRepository) GetDisabled() bool {
	return s.Disabled
}

// GetVisibility returns the value of Visibility.
func (s *TeamRepository) GetVisibility() OptString {
	return s.Visibility
}

// GetPushedAt returns the value of PushedAt.
func (s *TeamRepository) GetPushedAt() NilDateTime {
	return s.PushedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TeamRepository) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TeamRepository) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// GetAllowRebaseMerge returns the value of AllowRebaseMerge.
func (s *TeamRepository) GetAllowRebaseMerge() OptBool {
	return s.AllowRebaseMerge
}

// GetTemplateRepository returns the value of TemplateRepository.
func (s *TeamRepository) GetTemplateRepository() OptNilNullableRepository {
	return s.TemplateRepository
}

// GetTempCloneToken returns the value of TempCloneToken.
func (s *TeamRepository) GetTempCloneToken() OptString {
	return s.TempCloneToken
}

// GetAllowSquashMerge returns the value of AllowSquashMerge.
func (s *TeamRepository) GetAllowSquashMerge() OptBool {
	return s.AllowSquashMerge
}

// GetAllowAutoMerge returns the value of AllowAutoMerge.
func (s *TeamRepository) GetAllowAutoMerge() OptBool {
	return s.AllowAutoMerge
}

// GetDeleteBranchOnMerge returns the value of DeleteBranchOnMerge.
func (s *TeamRepository) GetDeleteBranchOnMerge() OptBool {
	return s.DeleteBranchOnMerge
}

// GetAllowMergeCommit returns the value of AllowMergeCommit.
func (s *TeamRepository) GetAllowMergeCommit() OptBool {
	return s.AllowMergeCommit
}

// GetAllowForking returns the value of AllowForking.
func (s *TeamRepository) GetAllowForking() OptBool {
	return s.AllowForking
}

// GetSubscribersCount returns the value of SubscribersCount.
func (s *TeamRepository) GetSubscribersCount() OptInt {
	return s.SubscribersCount
}

// GetNetworkCount returns the value of NetworkCount.
func (s *TeamRepository) GetNetworkCount() OptInt {
	return s.NetworkCount
}

// GetOpenIssues returns the value of OpenIssues.
func (s *TeamRepository) GetOpenIssues() int {
	return s.OpenIssues
}

// GetWatchers returns the value of Watchers.
func (s *TeamRepository) GetWatchers() int {
	return s.Watchers
}

// GetMasterBranch returns the value of MasterBranch.
func (s *TeamRepository) GetMasterBranch() OptString {
	return s.MasterBranch
}

// SetID sets the value of ID.
func (s *TeamRepository) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *TeamRepository) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *TeamRepository) SetName(val string) {
	s.Name = val
}

// SetFullName sets the value of FullName.
func (s *TeamRepository) SetFullName(val string) {
	s.FullName = val
}

// SetLicense sets the value of License.
func (s *TeamRepository) SetLicense(val NilNullableLicenseSimple) {
	s.License = val
}

// SetForks sets the value of Forks.
func (s *TeamRepository) SetForks(val int) {
	s.Forks = val
}

// SetPermissions sets the value of Permissions.
func (s *TeamRepository) SetPermissions(val OptTeamRepositoryPermissions) {
	s.Permissions = val
}

// SetOwner sets the value of Owner.
func (s *TeamRepository) SetOwner(val NilNullableSimpleUser) {
	s.Owner = val
}

// SetPrivate sets the value of Private.
func (s *TeamRepository) SetPrivate(val bool) {
	s.Private = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *TeamRepository) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetDescription sets the value of Description.
func (s *TeamRepository) SetDescription(val NilString) {
	s.Description = val
}

// SetFork sets the value of Fork.
func (s *TeamRepository) SetFork(val bool) {
	s.Fork = val
}

// SetURL sets the value of URL.
func (s *TeamRepository) SetURL(val url.URL) {
	s.URL = val
}

// SetArchiveURL sets the value of ArchiveURL.
func (s *TeamRepository) SetArchiveURL(val string) {
	s.ArchiveURL = val
}

// SetAssigneesURL sets the value of AssigneesURL.
func (s *TeamRepository) SetAssigneesURL(val string) {
	s.AssigneesURL = val
}

// SetBlobsURL sets the value of BlobsURL.
func (s *TeamRepository) SetBlobsURL(val string) {
	s.BlobsURL = val
}

// SetBranchesURL sets the value of BranchesURL.
func (s *TeamRepository) SetBranchesURL(val string) {
	s.BranchesURL = val
}

// SetCollaboratorsURL sets the value of CollaboratorsURL.
func (s *TeamRepository) SetCollaboratorsURL(val string) {
	s.CollaboratorsURL = val
}

// SetCommentsURL sets the value of CommentsURL.
func (s *TeamRepository) SetCommentsURL(val string) {
	s.CommentsURL = val
}

// SetCommitsURL sets the value of CommitsURL.
func (s *TeamRepository) SetCommitsURL(val string) {
	s.CommitsURL = val
}

// SetCompareURL sets the value of CompareURL.
func (s *TeamRepository) SetCompareURL(val string) {
	s.CompareURL = val
}

// SetContentsURL sets the value of ContentsURL.
func (s *TeamRepository) SetContentsURL(val string) {
	s.ContentsURL = val
}

// SetContributorsURL sets the value of ContributorsURL.
func (s *TeamRepository) SetContributorsURL(val url.URL) {
	s.ContributorsURL = val
}

// SetDeploymentsURL sets the value of DeploymentsURL.
func (s *TeamRepository) SetDeploymentsURL(val url.URL) {
	s.DeploymentsURL = val
}

// SetDownloadsURL sets the value of DownloadsURL.
func (s *TeamRepository) SetDownloadsURL(val url.URL) {
	s.DownloadsURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *TeamRepository) SetEventsURL(val url.URL) {
	s.EventsURL = val
}

// SetForksURL sets the value of ForksURL.
func (s *TeamRepository) SetForksURL(val url.URL) {
	s.ForksURL = val
}

// SetGitCommitsURL sets the value of GitCommitsURL.
func (s *TeamRepository) SetGitCommitsURL(val string) {
	s.GitCommitsURL = val
}

// SetGitRefsURL sets the value of GitRefsURL.
func (s *TeamRepository) SetGitRefsURL(val string) {
	s.GitRefsURL = val
}

// SetGitTagsURL sets the value of GitTagsURL.
func (s *TeamRepository) SetGitTagsURL(val string) {
	s.GitTagsURL = val
}

// SetGitURL sets the value of GitURL.
func (s *TeamRepository) SetGitURL(val string) {
	s.GitURL = val
}

// SetIssueCommentURL sets the value of IssueCommentURL.
func (s *TeamRepository) SetIssueCommentURL(val string) {
	s.IssueCommentURL = val
}

// SetIssueEventsURL sets the value of IssueEventsURL.
func (s *TeamRepository) SetIssueEventsURL(val string) {
	s.IssueEventsURL = val
}

// SetIssuesURL sets the value of IssuesURL.
func (s *TeamRepository) SetIssuesURL(val string) {
	s.IssuesURL = val
}

// SetKeysURL sets the value of KeysURL.
func (s *TeamRepository) SetKeysURL(val string) {
	s.KeysURL = val
}

// SetLabelsURL sets the value of LabelsURL.
func (s *TeamRepository) SetLabelsURL(val string) {
	s.LabelsURL = val
}

// SetLanguagesURL sets the value of LanguagesURL.
func (s *TeamRepository) SetLanguagesURL(val url.URL) {
	s.LanguagesURL = val
}

// SetMergesURL sets the value of MergesURL.
func (s *TeamRepository) SetMergesURL(val url.URL) {
	s.MergesURL = val
}

// SetMilestonesURL sets the value of MilestonesURL.
func (s *TeamRepository) SetMilestonesURL(val string) {
	s.MilestonesURL = val
}

// SetNotificationsURL sets the value of NotificationsURL.
func (s *TeamRepository) SetNotificationsURL(val string) {
	s.NotificationsURL = val
}

// SetPullsURL sets the value of PullsURL.
func (s *TeamRepository) SetPullsURL(val string) {
	s.PullsURL = val
}

// SetReleasesURL sets the value of ReleasesURL.
func (s *TeamRepository) SetReleasesURL(val string) {
	s.ReleasesURL = val
}

// SetSSHURL sets the value of SSHURL.
func (s *TeamRepository) SetSSHURL(val string) {
	s.SSHURL = val
}

// SetStargazersURL sets the value of StargazersURL.
func (s *TeamRepository) SetStargazersURL(val url.URL) {
	s.StargazersURL = val
}

// SetStatusesURL sets the value of StatusesURL.
func (s *TeamRepository) SetStatusesURL(val string) {
	s.StatusesURL = val
}

// SetSubscribersURL sets the value of SubscribersURL.
func (s *TeamRepository) SetSubscribersURL(val url.URL) {
	s.SubscribersURL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *TeamRepository) SetSubscriptionURL(val url.URL) {
	s.SubscriptionURL = val
}

// SetTagsURL sets the value of TagsURL.
func (s *TeamRepository) SetTagsURL(val url.URL) {
	s.TagsURL = val
}

// SetTeamsURL sets the value of TeamsURL.
func (s *TeamRepository) SetTeamsURL(val url.URL) {
	s.TeamsURL = val
}

// SetTreesURL sets the value of TreesURL.
func (s *TeamRepository) SetTreesURL(val string) {
	s.TreesURL = val
}

// SetCloneURL sets the value of CloneURL.
func (s *TeamRepository) SetCloneURL(val string) {
	s.CloneURL = val
}

// SetMirrorURL sets the value of MirrorURL.
func (s *TeamRepository) SetMirrorURL(val NilURI) {
	s.MirrorURL = val
}

// SetHooksURL sets the value of HooksURL.
func (s *TeamRepository) SetHooksURL(val url.URL) {
	s.HooksURL = val
}

// SetSvnURL sets the value of SvnURL.
func (s *TeamRepository) SetSvnURL(val url.URL) {
	s.SvnURL = val
}

// SetHomepage sets the value of Homepage.
func (s *TeamRepository) SetHomepage(val NilURI) {
	s.Homepage = val
}

// SetLanguage sets the value of Language.
func (s *TeamRepository) SetLanguage(val NilString) {
	s.Language = val
}

// SetForksCount sets the value of ForksCount.
func (s *TeamRepository) SetForksCount(val int) {
	s.ForksCount = val
}

// SetStargazersCount sets the value of StargazersCount.
func (s *TeamRepository) SetStargazersCount(val int) {
	s.StargazersCount = val
}

// SetWatchersCount sets the value of WatchersCount.
func (s *TeamRepository) SetWatchersCount(val int) {
	s.WatchersCount = val
}

// SetSize sets the value of Size.
func (s *TeamRepository) SetSize(val int) {
	s.Size = val
}

// SetDefaultBranch sets the value of DefaultBranch.
func (s *TeamRepository) SetDefaultBranch(val string) {
	s.DefaultBranch = val
}

// SetOpenIssuesCount sets the value of OpenIssuesCount.
func (s *TeamRepository) SetOpenIssuesCount(val int) {
	s.OpenIssuesCount = val
}

// SetIsTemplate sets the value of IsTemplate.
func (s *TeamRepository) SetIsTemplate(val OptBool) {
	s.IsTemplate = val
}

// SetTopics sets the value of Topics.
func (s *TeamRepository) SetTopics(val []string) {
	s.Topics = val
}

// SetHasIssues sets the value of HasIssues.
func (s *TeamRepository) SetHasIssues(val bool) {
	s.HasIssues = val
}

// SetHasProjects sets the value of HasProjects.
func (s *TeamRepository) SetHasProjects(val bool) {
	s.HasProjects = val
}

// SetHasWiki sets the value of HasWiki.
func (s *TeamRepository) SetHasWiki(val bool) {
	s.HasWiki = val
}

// SetHasPages sets the value of HasPages.
func (s *TeamRepository) SetHasPages(val bool) {
	s.HasPages = val
}

// SetHasDownloads sets the value of HasDownloads.
func (s *TeamRepository) SetHasDownloads(val bool) {
	s.HasDownloads = val
}

// SetArchived sets the value of Archived.
func (s *TeamRepository) SetArchived(val bool) {
	s.Archived = val
}

// SetDisabled sets the value of Disabled.
func (s *TeamRepository) SetDisabled(val bool) {
	s.Disabled = val
}

// SetVisibility sets the value of Visibility.
func (s *TeamRepository) SetVisibility(val OptString) {
	s.Visibility = val
}

// SetPushedAt sets the value of PushedAt.
func (s *TeamRepository) SetPushedAt(val NilDateTime) {
	s.PushedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TeamRepository) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TeamRepository) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// SetAllowRebaseMerge sets the value of AllowRebaseMerge.
func (s *TeamRepository) SetAllowRebaseMerge(val OptBool) {
	s.AllowRebaseMerge = val
}

// SetTemplateRepository sets the value of TemplateRepository.
func (s *TeamRepository) SetTemplateRepository(val OptNilNullableRepository) {
	s.TemplateRepository = val
}

// SetTempCloneToken sets the value of TempCloneToken.
func (s *TeamRepository) SetTempCloneToken(val OptString) {
	s.TempCloneToken = val
}

// SetAllowSquashMerge sets the value of AllowSquashMerge.
func (s *TeamRepository) SetAllowSquashMerge(val OptBool) {
	s.AllowSquashMerge = val
}

// SetAllowAutoMerge sets the value of AllowAutoMerge.
func (s *TeamRepository) SetAllowAutoMerge(val OptBool) {
	s.AllowAutoMerge = val
}

// SetDeleteBranchOnMerge sets the value of DeleteBranchOnMerge.
func (s *TeamRepository) SetDeleteBranchOnMerge(val OptBool) {
	s.DeleteBranchOnMerge = val
}

// SetAllowMergeCommit sets the value of AllowMergeCommit.
func (s *TeamRepository) SetAllowMergeCommit(val OptBool) {
	s.AllowMergeCommit = val
}

// SetAllowForking sets the value of AllowForking.
func (s *TeamRepository) SetAllowForking(val OptBool) {
	s.AllowForking = val
}

// SetSubscribersCount sets the value of SubscribersCount.
func (s *TeamRepository) SetSubscribersCount(val OptInt) {
	s.SubscribersCount = val
}

// SetNetworkCount sets the value of NetworkCount.
func (s *TeamRepository) SetNetworkCount(val OptInt) {
	s.NetworkCount = val
}

// SetOpenIssues sets the value of OpenIssues.
func (s *TeamRepository) SetOpenIssues(val int) {
	s.OpenIssues = val
}

// SetWatchers sets the value of Watchers.
func (s *TeamRepository) SetWatchers(val int) {
	s.Watchers = val
}

// SetMasterBranch sets the value of MasterBranch.
func (s *TeamRepository) SetMasterBranch(val OptString) {
	s.MasterBranch = val
}

func (*TeamRepository) teamsCheckPermissionsForRepoInOrgRes()  {}
func (*TeamRepository) teamsCheckPermissionsForRepoLegacyRes() {}

type TeamRepositoryPermissions struct {
	Admin    bool    `json:"admin"`
	Pull     bool    `json:"pull"`
	Triage   OptBool `json:"triage"`
	Push     bool    `json:"push"`
	Maintain OptBool `json:"maintain"`
}

// GetAdmin returns the value of Admin.
func (s *TeamRepositoryPermissions) GetAdmin() bool {
	return s.Admin
}

// GetPull returns the value of Pull.
func (s *TeamRepositoryPermissions) GetPull() bool {
	return s.Pull
}

// GetTriage returns the value of Triage.
func (s *TeamRepositoryPermissions) GetTriage() OptBool {
	return s.Triage
}

// GetPush returns the value of Push.
func (s *TeamRepositoryPermissions) GetPush() bool {
	return s.Push
}

// GetMaintain returns the value of Maintain.
func (s *TeamRepositoryPermissions) GetMaintain() OptBool {
	return s.Maintain
}

// SetAdmin sets the value of Admin.
func (s *TeamRepositoryPermissions) SetAdmin(val bool) {
	s.Admin = val
}

// SetPull sets the value of Pull.
func (s *TeamRepositoryPermissions) SetPull(val bool) {
	s.Pull = val
}

// SetTriage sets the value of Triage.
func (s *TeamRepositoryPermissions) SetTriage(val OptBool) {
	s.Triage = val
}

// SetPush sets the value of Push.
func (s *TeamRepositoryPermissions) SetPush(val bool) {
	s.Push = val
}

// SetMaintain sets the value of Maintain.
func (s *TeamRepositoryPermissions) SetMaintain(val OptBool) {
	s.Maintain = val
}

// Groups of organization members that gives permissions on specified repositories.
// Ref: #/components/schemas/team-simple
type TeamSimple struct {
	// Unique identifier of the team.
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	// URL for the team.
	URL        url.URL `json:"url"`
	MembersURL string  `json:"members_url"`
	// Name of the team.
	Name string `json:"name"`
	// Description of the team.
	Description NilString `json:"description"`
	// Permission that the team will have for its repositories.
	Permission string `json:"permission"`
	// The level of privacy this team should have.
	Privacy         OptString `json:"privacy"`
	HTMLURL         url.URL   `json:"html_url"`
	RepositoriesURL url.URL   `json:"repositories_url"`
	Slug            string    `json:"slug"`
	// Distinguished Name (DN) that team maps to within LDAP environment.
	LdapDn OptString `json:"ldap_dn"`
}

// GetID returns the value of ID.
func (s *TeamSimple) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *TeamSimple) GetNodeID() string {
	return s.NodeID
}

// GetURL returns the value of URL.
func (s *TeamSimple) GetURL() url.URL {
	return s.URL
}

// GetMembersURL returns the value of MembersURL.
func (s *TeamSimple) GetMembersURL() string {
	return s.MembersURL
}

// GetName returns the value of Name.
func (s *TeamSimple) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *TeamSimple) GetDescription() NilString {
	return s.Description
}

// GetPermission returns the value of Permission.
func (s *TeamSimple) GetPermission() string {
	return s.Permission
}

// GetPrivacy returns the value of Privacy.
func (s *TeamSimple) GetPrivacy() OptString {
	return s.Privacy
}

// GetHTMLURL returns the value of HTMLURL.
func (s *TeamSimple) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetRepositoriesURL returns the value of RepositoriesURL.
func (s *TeamSimple) GetRepositoriesURL() url.URL {
	return s.RepositoriesURL
}

// GetSlug returns the value of Slug.
func (s *TeamSimple) GetSlug() string {
	return s.Slug
}

// GetLdapDn returns the value of LdapDn.
func (s *TeamSimple) GetLdapDn() OptString {
	return s.LdapDn
}

// SetID sets the value of ID.
func (s *TeamSimple) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *TeamSimple) SetNodeID(val string) {
	s.NodeID = val
}

// SetURL sets the value of URL.
func (s *TeamSimple) SetURL(val url.URL) {
	s.URL = val
}

// SetMembersURL sets the value of MembersURL.
func (s *TeamSimple) SetMembersURL(val string) {
	s.MembersURL = val
}

// SetName sets the value of Name.
func (s *TeamSimple) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *TeamSimple) SetDescription(val NilString) {
	s.Description = val
}

// SetPermission sets the value of Permission.
func (s *TeamSimple) SetPermission(val string) {
	s.Permission = val
}

// SetPrivacy sets the value of Privacy.
func (s *TeamSimple) SetPrivacy(val OptString) {
	s.Privacy = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *TeamSimple) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetRepositoriesURL sets the value of RepositoriesURL.
func (s *TeamSimple) SetRepositoriesURL(val url.URL) {
	s.RepositoriesURL = val
}

// SetSlug sets the value of Slug.
func (s *TeamSimple) SetSlug(val string) {
	s.Slug = val
}

// SetLdapDn sets the value of LdapDn.
func (s *TeamSimple) SetLdapDn(val OptString) {
	s.LdapDn = val
}

// TeamsAddMemberLegacyNoContent is response for TeamsAddMemberLegacy operation.
type TeamsAddMemberLegacyNoContent struct{}

func (*TeamsAddMemberLegacyNoContent) teamsAddMemberLegacyRes() {}

// TeamsAddMemberLegacyNotFound is response for TeamsAddMemberLegacy operation.
type TeamsAddMemberLegacyNotFound struct{}

func (*TeamsAddMemberLegacyNotFound) teamsAddMemberLegacyRes() {}

// TeamsAddMemberLegacyUnprocessableEntity is response for TeamsAddMemberLegacy operation.
type TeamsAddMemberLegacyUnprocessableEntity struct{}

func (*TeamsAddMemberLegacyUnprocessableEntity) teamsAddMemberLegacyRes() {}

// TeamsAddOrUpdateMembershipForUserInOrgForbidden is response for TeamsAddOrUpdateMembershipForUserInOrg operation.
type TeamsAddOrUpdateMembershipForUserInOrgForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgForbidden) teamsAddOrUpdateMembershipForUserInOrgRes() {}

type TeamsAddOrUpdateMembershipForUserInOrgReq struct {
	// The role that this user should have in the team. Can be one of:
	// \* `member` - a normal member of the team.
	// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
	// members to team maintainer, and edit the team's name and description.
	Role OptTeamsAddOrUpdateMembershipForUserInOrgReqRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReq) GetRole() OptTeamsAddOrUpdateMembershipForUserInOrgReqRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReq) SetRole(val OptTeamsAddOrUpdateMembershipForUserInOrgReqRole) {
	s.Role = val
}

// The role that this user should have in the team. Can be one of:
// \* `member` - a normal member of the team.
// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
// members to team maintainer, and edit the team's name and description.
type TeamsAddOrUpdateMembershipForUserInOrgReqRole string

const (
	TeamsAddOrUpdateMembershipForUserInOrgReqRoleMember     TeamsAddOrUpdateMembershipForUserInOrgReqRole = "member"
	TeamsAddOrUpdateMembershipForUserInOrgReqRoleMaintainer TeamsAddOrUpdateMembershipForUserInOrgReqRole = "maintainer"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsAddOrUpdateMembershipForUserInOrgReqRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamsAddOrUpdateMembershipForUserInOrgReqRoleMember:
		return []byte(s), nil
	case TeamsAddOrUpdateMembershipForUserInOrgReqRoleMaintainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsAddOrUpdateMembershipForUserInOrgReqRole) UnmarshalText(data []byte) error {
	switch TeamsAddOrUpdateMembershipForUserInOrgReqRole(data) {
	case TeamsAddOrUpdateMembershipForUserInOrgReqRoleMember:
		*s = TeamsAddOrUpdateMembershipForUserInOrgReqRoleMember
		return nil
	case TeamsAddOrUpdateMembershipForUserInOrgReqRoleMaintainer:
		*s = TeamsAddOrUpdateMembershipForUserInOrgReqRoleMaintainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity is response for TeamsAddOrUpdateMembershipForUserInOrg operation.
type TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity) teamsAddOrUpdateMembershipForUserInOrgRes() {
}

// TeamsAddOrUpdateMembershipForUserLegacyForbidden is response for TeamsAddOrUpdateMembershipForUserLegacy operation.
type TeamsAddOrUpdateMembershipForUserLegacyForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyForbidden) teamsAddOrUpdateMembershipForUserLegacyRes() {
}

type TeamsAddOrUpdateMembershipForUserLegacyReq struct {
	// The role that this user should have in the team. Can be one of:
	// \* `member` - a normal member of the team.
	// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
	// members to team maintainer, and edit the team's name and description.
	Role OptTeamsAddOrUpdateMembershipForUserLegacyReqRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReq) GetRole() OptTeamsAddOrUpdateMembershipForUserLegacyReqRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReq) SetRole(val OptTeamsAddOrUpdateMembershipForUserLegacyReqRole) {
	s.Role = val
}

// The role that this user should have in the team. Can be one of:
// \* `member` - a normal member of the team.
// \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team
// members to team maintainer, and edit the team's name and description.
type TeamsAddOrUpdateMembershipForUserLegacyReqRole string

const (
	TeamsAddOrUpdateMembershipForUserLegacyReqRoleMember     TeamsAddOrUpdateMembershipForUserLegacyReqRole = "member"
	TeamsAddOrUpdateMembershipForUserLegacyReqRoleMaintainer TeamsAddOrUpdateMembershipForUserLegacyReqRole = "maintainer"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsAddOrUpdateMembershipForUserLegacyReqRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamsAddOrUpdateMembershipForUserLegacyReqRoleMember:
		return []byte(s), nil
	case TeamsAddOrUpdateMembershipForUserLegacyReqRoleMaintainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsAddOrUpdateMembershipForUserLegacyReqRole) UnmarshalText(data []byte) error {
	switch TeamsAddOrUpdateMembershipForUserLegacyReqRole(data) {
	case TeamsAddOrUpdateMembershipForUserLegacyReqRoleMember:
		*s = TeamsAddOrUpdateMembershipForUserLegacyReqRoleMember
		return nil
	case TeamsAddOrUpdateMembershipForUserLegacyReqRoleMaintainer:
		*s = TeamsAddOrUpdateMembershipForUserLegacyReqRoleMaintainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity is response for TeamsAddOrUpdateMembershipForUserLegacy operation.
type TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity) teamsAddOrUpdateMembershipForUserLegacyRes() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgForbidden struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*TeamsAddOrUpdateProjectPermissionsInOrgForbidden) teamsAddOrUpdateProjectPermissionsInOrgRes() {
}

// TeamsAddOrUpdateProjectPermissionsInOrgNoContent is response for TeamsAddOrUpdateProjectPermissionsInOrg operation.
type TeamsAddOrUpdateProjectPermissionsInOrgNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsInOrgNoContent) teamsAddOrUpdateProjectPermissionsInOrgRes() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgReq struct {
	// The permission to grant to the team for this project. Can be one of:
	// \* `read` - team members can read, but not write to or administer this project.
	// \* `write` - team members can read and write, but not administer this project.
	// \* `admin` - team members can read, write and administer this project.
	// Default: the team's `permission` attribute will be used to determine what permission to grant the
	// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
	// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
	// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
	Permission OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission `json:"permission"`
}

// GetPermission returns the value of Permission.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReq) GetPermission() OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission {
	return s.Permission
}

// SetPermission sets the value of Permission.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReq) SetPermission(val OptTeamsAddOrUpdateProjectPermissionsInOrgReqPermission) {
	s.Permission = val
}

// The permission to grant to the team for this project. Can be one of:
// \* `read` - team members can read, but not write to or administer this project.
// \* `write` - team members can read and write, but not administer this project.
// \* `admin` - team members can read, write and administer this project.
// Default: the team's `permission` attribute will be used to determine what permission to grant the
// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
type TeamsAddOrUpdateProjectPermissionsInOrgReqPermission string

const (
	TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionRead  TeamsAddOrUpdateProjectPermissionsInOrgReqPermission = "read"
	TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionWrite TeamsAddOrUpdateProjectPermissionsInOrgReqPermission = "write"
	TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionAdmin TeamsAddOrUpdateProjectPermissionsInOrgReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionRead:
		return []byte(s), nil
	case TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionWrite:
		return []byte(s), nil
	case TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) UnmarshalText(data []byte) error {
	switch TeamsAddOrUpdateProjectPermissionsInOrgReqPermission(data) {
	case TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionRead:
		*s = TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionRead
		return nil
	case TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionWrite:
		*s = TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionWrite
		return nil
	case TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionAdmin:
		*s = TeamsAddOrUpdateProjectPermissionsInOrgReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TeamsAddOrUpdateProjectPermissionsLegacyForbidden struct {
	Message          OptString `json:"message"`
	DocumentationURL OptString `json:"documentation_url"`
}

// GetMessage returns the value of Message.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) GetMessage() OptString {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) GetDocumentationURL() OptString {
	return s.DocumentationURL
}

// SetMessage sets the value of Message.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) SetMessage(val OptString) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyForbidden) SetDocumentationURL(val OptString) {
	s.DocumentationURL = val
}

func (*TeamsAddOrUpdateProjectPermissionsLegacyForbidden) teamsAddOrUpdateProjectPermissionsLegacyRes() {
}

// TeamsAddOrUpdateProjectPermissionsLegacyNoContent is response for TeamsAddOrUpdateProjectPermissionsLegacy operation.
type TeamsAddOrUpdateProjectPermissionsLegacyNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsLegacyNoContent) teamsAddOrUpdateProjectPermissionsLegacyRes() {
}

type TeamsAddOrUpdateProjectPermissionsLegacyReq struct {
	// The permission to grant to the team for this project. Can be one of:
	// \* `read` - team members can read, but not write to or administer this project.
	// \* `write` - team members can read and write, but not administer this project.
	// \* `admin` - team members can read, write and administer this project.
	// Default: the team's `permission` attribute will be used to determine what permission to grant the
	// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
	// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
	// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
	Permission OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission `json:"permission"`
}

// GetPermission returns the value of Permission.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReq) GetPermission() OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission {
	return s.Permission
}

// SetPermission sets the value of Permission.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReq) SetPermission(val OptTeamsAddOrUpdateProjectPermissionsLegacyReqPermission) {
	s.Permission = val
}

// The permission to grant to the team for this project. Can be one of:
// \* `read` - team members can read, but not write to or administer this project.
// \* `write` - team members can read and write, but not administer this project.
// \* `admin` - team members can read, write and administer this project.
// Default: the team's `permission` attribute will be used to determine what permission to grant the
// team on this project. Note that, if you choose not to pass any parameters, you'll need to set
// `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
// verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).".
type TeamsAddOrUpdateProjectPermissionsLegacyReqPermission string

const (
	TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionRead  TeamsAddOrUpdateProjectPermissionsLegacyReqPermission = "read"
	TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionWrite TeamsAddOrUpdateProjectPermissionsLegacyReqPermission = "write"
	TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionAdmin TeamsAddOrUpdateProjectPermissionsLegacyReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionRead:
		return []byte(s), nil
	case TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionWrite:
		return []byte(s), nil
	case TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) UnmarshalText(data []byte) error {
	switch TeamsAddOrUpdateProjectPermissionsLegacyReqPermission(data) {
	case TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionRead:
		*s = TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionRead
		return nil
	case TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionWrite:
		*s = TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionWrite
		return nil
	case TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionAdmin:
		*s = TeamsAddOrUpdateProjectPermissionsLegacyReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsAddOrUpdateRepoPermissionsInOrgNoContent is response for TeamsAddOrUpdateRepoPermissionsInOrg operation.
type TeamsAddOrUpdateRepoPermissionsInOrgNoContent struct{}

type TeamsAddOrUpdateRepoPermissionsInOrgReq struct {
	// The permission to grant the team on this repository. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer this repository.
	// \* `push` - team members can pull and push, but not administer this repository.
	// \* `admin` - team members can pull, push and administer this repository.
	// \* `maintain` - team members can manage the repository without access to sensitive or destructive
	// actions. Recommended for project managers. Only applies to repositories owned by organizations.
	// \* `triage` - team members can proactively manage issues and pull requests without write access.
	// Recommended for contributors who triage a repository. Only applies to repositories owned by
	// organizations.
	// If no permission is specified, the team's `permission` attribute will be used to determine what
	// permission to grant the team on this repository.
	Permission OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission `json:"permission"`
}

// GetPermission returns the value of Permission.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReq) GetPermission() OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission {
	return s.Permission
}

// SetPermission sets the value of Permission.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReq) SetPermission(val OptTeamsAddOrUpdateRepoPermissionsInOrgReqPermission) {
	s.Permission = val
}

// The permission to grant the team on this repository. Can be one of:
// \* `pull` - team members can pull, but not push to or administer this repository.
// \* `push` - team members can pull and push, but not administer this repository.
// \* `admin` - team members can pull, push and administer this repository.
// \* `maintain` - team members can manage the repository without access to sensitive or destructive
// actions. Recommended for project managers. Only applies to repositories owned by organizations.
// \* `triage` - team members can proactively manage issues and pull requests without write access.
// Recommended for contributors who triage a repository. Only applies to repositories owned by
// organizations.
// If no permission is specified, the team's `permission` attribute will be used to determine what
// permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsInOrgReqPermission string

const (
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPull     TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "pull"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPush     TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "push"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionAdmin    TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "admin"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionMaintain TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "maintain"
	TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionTriage   TeamsAddOrUpdateRepoPermissionsInOrgReqPermission = "triage"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPull:
		return []byte(s), nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPush:
		return []byte(s), nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionAdmin:
		return []byte(s), nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionMaintain:
		return []byte(s), nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionTriage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) UnmarshalText(data []byte) error {
	switch TeamsAddOrUpdateRepoPermissionsInOrgReqPermission(data) {
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPull:
		*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPull
		return nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPush:
		*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionPush
		return nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionAdmin:
		*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionAdmin
		return nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionMaintain:
		*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionMaintain
		return nil
	case TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionTriage:
		*s = TeamsAddOrUpdateRepoPermissionsInOrgReqPermissionTriage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsAddOrUpdateRepoPermissionsLegacyNoContent is response for TeamsAddOrUpdateRepoPermissionsLegacy operation.
type TeamsAddOrUpdateRepoPermissionsLegacyNoContent struct{}

func (*TeamsAddOrUpdateRepoPermissionsLegacyNoContent) teamsAddOrUpdateRepoPermissionsLegacyRes() {}

type TeamsAddOrUpdateRepoPermissionsLegacyReq struct {
	// The permission to grant the team on this repository. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer this repository.
	// \* `push` - team members can pull and push, but not administer this repository.
	// \* `admin` - team members can pull, push and administer this repository.
	// If no permission is specified, the team's `permission` attribute will be used to determine what
	// permission to grant the team on this repository.
	Permission OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission `json:"permission"`
}

// GetPermission returns the value of Permission.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReq) GetPermission() OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission {
	return s.Permission
}

// SetPermission sets the value of Permission.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReq) SetPermission(val OptTeamsAddOrUpdateRepoPermissionsLegacyReqPermission) {
	s.Permission = val
}

// The permission to grant the team on this repository. Can be one of:
// \* `pull` - team members can pull, but not push to or administer this repository.
// \* `push` - team members can pull and push, but not administer this repository.
// \* `admin` - team members can pull, push and administer this repository.
// If no permission is specified, the team's `permission` attribute will be used to determine what
// permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsLegacyReqPermission string

const (
	TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPull  TeamsAddOrUpdateRepoPermissionsLegacyReqPermission = "pull"
	TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPush  TeamsAddOrUpdateRepoPermissionsLegacyReqPermission = "push"
	TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionAdmin TeamsAddOrUpdateRepoPermissionsLegacyReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPull:
		return []byte(s), nil
	case TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPush:
		return []byte(s), nil
	case TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) UnmarshalText(data []byte) error {
	switch TeamsAddOrUpdateRepoPermissionsLegacyReqPermission(data) {
	case TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPull:
		*s = TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPull
		return nil
	case TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPush:
		*s = TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionPush
		return nil
	case TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionAdmin:
		*s = TeamsAddOrUpdateRepoPermissionsLegacyReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsCheckPermissionsForProjectInOrgNotFound is response for TeamsCheckPermissionsForProjectInOrg operation.
type TeamsCheckPermissionsForProjectInOrgNotFound struct{}

func (*TeamsCheckPermissionsForProjectInOrgNotFound) teamsCheckPermissionsForProjectInOrgRes() {}

// TeamsCheckPermissionsForProjectLegacyNotFound is response for TeamsCheckPermissionsForProjectLegacy operation.
type TeamsCheckPermissionsForProjectLegacyNotFound struct{}

func (*TeamsCheckPermissionsForProjectLegacyNotFound) teamsCheckPermissionsForProjectLegacyRes() {}

// TeamsCheckPermissionsForRepoInOrgNoContent is response for TeamsCheckPermissionsForRepoInOrg operation.
type TeamsCheckPermissionsForRepoInOrgNoContent struct{}

func (*TeamsCheckPermissionsForRepoInOrgNoContent) teamsCheckPermissionsForRepoInOrgRes() {}

// TeamsCheckPermissionsForRepoInOrgNotFound is response for TeamsCheckPermissionsForRepoInOrg operation.
type TeamsCheckPermissionsForRepoInOrgNotFound struct{}

func (*TeamsCheckPermissionsForRepoInOrgNotFound) teamsCheckPermissionsForRepoInOrgRes() {}

// TeamsCheckPermissionsForRepoLegacyNoContent is response for TeamsCheckPermissionsForRepoLegacy operation.
type TeamsCheckPermissionsForRepoLegacyNoContent struct{}

func (*TeamsCheckPermissionsForRepoLegacyNoContent) teamsCheckPermissionsForRepoLegacyRes() {}

// TeamsCheckPermissionsForRepoLegacyNotFound is response for TeamsCheckPermissionsForRepoLegacy operation.
type TeamsCheckPermissionsForRepoLegacyNotFound struct{}

func (*TeamsCheckPermissionsForRepoLegacyNotFound) teamsCheckPermissionsForRepoLegacyRes() {}

type TeamsCreateDiscussionCommentInOrgReq struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *TeamsCreateDiscussionCommentInOrgReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *TeamsCreateDiscussionCommentInOrgReq) SetBody(val string) {
	s.Body = val
}

type TeamsCreateDiscussionCommentLegacyReq struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *TeamsCreateDiscussionCommentLegacyReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *TeamsCreateDiscussionCommentLegacyReq) SetBody(val string) {
	s.Body = val
}

type TeamsCreateDiscussionInOrgReq struct {
	// The discussion post's title.
	Title string `json:"title"`
	// The discussion post's body text.
	Body string `json:"body"`
	// Private posts are only visible to team members, organization owners, and team maintainers. Public
	// posts are visible to all members of the organization. Set to `true` to create a private post.
	Private OptBool `json:"private"`
}

// GetTitle returns the value of Title.
func (s *TeamsCreateDiscussionInOrgReq) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *TeamsCreateDiscussionInOrgReq) GetBody() string {
	return s.Body
}

// GetPrivate returns the value of Private.
func (s *TeamsCreateDiscussionInOrgReq) GetPrivate() OptBool {
	return s.Private
}

// SetTitle sets the value of Title.
func (s *TeamsCreateDiscussionInOrgReq) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *TeamsCreateDiscussionInOrgReq) SetBody(val string) {
	s.Body = val
}

// SetPrivate sets the value of Private.
func (s *TeamsCreateDiscussionInOrgReq) SetPrivate(val OptBool) {
	s.Private = val
}

type TeamsCreateDiscussionLegacyReq struct {
	// The discussion post's title.
	Title string `json:"title"`
	// The discussion post's body text.
	Body string `json:"body"`
	// Private posts are only visible to team members, organization owners, and team maintainers. Public
	// posts are visible to all members of the organization. Set to `true` to create a private post.
	Private OptBool `json:"private"`
}

// GetTitle returns the value of Title.
func (s *TeamsCreateDiscussionLegacyReq) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *TeamsCreateDiscussionLegacyReq) GetBody() string {
	return s.Body
}

// GetPrivate returns the value of Private.
func (s *TeamsCreateDiscussionLegacyReq) GetPrivate() OptBool {
	return s.Private
}

// SetTitle sets the value of Title.
func (s *TeamsCreateDiscussionLegacyReq) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *TeamsCreateDiscussionLegacyReq) SetBody(val string) {
	s.Body = val
}

// SetPrivate sets the value of Private.
func (s *TeamsCreateDiscussionLegacyReq) SetPrivate(val OptBool) {
	s.Private = val
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq struct {
	// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will
	// replace the original one. You must include any existing groups that you don't want to remove.
	Groups []TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem `json:"groups"`
}

// GetGroups returns the value of Groups.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq) GetGroups() []TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem {
	return s.Groups
}

// SetGroups sets the value of Groups.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq) SetGroups(val []TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) {
	s.Groups = val
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem struct {
	// ID of the IdP group.
	GroupID string `json:"group_id"`
	// Name of the IdP group.
	GroupName string `json:"group_name"`
	// Description of the IdP group.
	GroupDescription string `json:"group_description"`
}

// GetGroupID returns the value of GroupID.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) GetGroupID() string {
	return s.GroupID
}

// GetGroupName returns the value of GroupName.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) GetGroupName() string {
	return s.GroupName
}

// GetGroupDescription returns the value of GroupDescription.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) GetGroupDescription() string {
	return s.GroupDescription
}

// SetGroupID sets the value of GroupID.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) SetGroupID(val string) {
	s.GroupID = val
}

// SetGroupName sets the value of GroupName.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) SetGroupName(val string) {
	s.GroupName = val
}

// SetGroupDescription sets the value of GroupDescription.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsInOrgReqGroupsItem) SetGroupDescription(val string) {
	s.GroupDescription = val
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq struct {
	// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will
	// replace the original one. You must include any existing groups that you don't want to remove.
	Groups   []TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem `json:"groups"`
	SyncedAt OptString                                                   `json:"synced_at"`
}

// GetGroups returns the value of Groups.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) GetGroups() []TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem {
	return s.Groups
}

// GetSyncedAt returns the value of SyncedAt.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) GetSyncedAt() OptString {
	return s.SyncedAt
}

// SetGroups sets the value of Groups.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) SetGroups(val []TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) {
	s.Groups = val
}

// SetSyncedAt sets the value of SyncedAt.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) SetSyncedAt(val OptString) {
	s.SyncedAt = val
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem struct {
	// ID of the IdP group.
	GroupID string `json:"group_id"`
	// Name of the IdP group.
	GroupName string `json:"group_name"`
	// Description of the IdP group.
	GroupDescription string    `json:"group_description"`
	ID               OptString `json:"id"`
	Name             OptString `json:"name"`
	Description      OptString `json:"description"`
}

// GetGroupID returns the value of GroupID.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) GetGroupID() string {
	return s.GroupID
}

// GetGroupName returns the value of GroupName.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) GetGroupName() string {
	return s.GroupName
}

// GetGroupDescription returns the value of GroupDescription.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) GetGroupDescription() string {
	return s.GroupDescription
}

// GetID returns the value of ID.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) GetDescription() OptString {
	return s.Description
}

// SetGroupID sets the value of GroupID.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetGroupID(val string) {
	s.GroupID = val
}

// SetGroupName sets the value of GroupName.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetGroupName(val string) {
	s.GroupName = val
}

// SetGroupDescription sets the value of GroupDescription.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetGroupDescription(val string) {
	s.GroupDescription = val
}

// SetID sets the value of ID.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyReqGroupsItem) SetDescription(val OptString) {
	s.Description = val
}

type TeamsCreateReq struct {
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description OptString `json:"description"`
	// List GitHub IDs for organization members who will become team maintainers.
	Maintainers []string `json:"maintainers"`
	// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
	RepoNames []string `json:"repo_names"`
	// The level of privacy this team should have. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// Default: `secret`
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	// Default for child team: `closed`.
	Privacy OptTeamsCreateReqPrivacy `json:"privacy"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is
	// specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission OptTeamsCreateReqPermission `json:"permission"`
	// The ID of a team to set as the parent team.
	ParentTeamID OptInt `json:"parent_team_id"`
}

// GetName returns the value of Name.
func (s *TeamsCreateReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *TeamsCreateReq) GetDescription() OptString {
	return s.Description
}

// GetMaintainers returns the value of Maintainers.
func (s *TeamsCreateReq) GetMaintainers() []string {
	return s.Maintainers
}

// GetRepoNames returns the value of RepoNames.
func (s *TeamsCreateReq) GetRepoNames() []string {
	return s.RepoNames
}

// GetPrivacy returns the value of Privacy.
func (s *TeamsCreateReq) GetPrivacy() OptTeamsCreateReqPrivacy {
	return s.Privacy
}

// GetPermission returns the value of Permission.
func (s *TeamsCreateReq) GetPermission() OptTeamsCreateReqPermission {
	return s.Permission
}

// GetParentTeamID returns the value of ParentTeamID.
func (s *TeamsCreateReq) GetParentTeamID() OptInt {
	return s.ParentTeamID
}

// SetName sets the value of Name.
func (s *TeamsCreateReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *TeamsCreateReq) SetDescription(val OptString) {
	s.Description = val
}

// SetMaintainers sets the value of Maintainers.
func (s *TeamsCreateReq) SetMaintainers(val []string) {
	s.Maintainers = val
}

// SetRepoNames sets the value of RepoNames.
func (s *TeamsCreateReq) SetRepoNames(val []string) {
	s.RepoNames = val
}

// SetPrivacy sets the value of Privacy.
func (s *TeamsCreateReq) SetPrivacy(val OptTeamsCreateReqPrivacy) {
	s.Privacy = val
}

// SetPermission sets the value of Permission.
func (s *TeamsCreateReq) SetPermission(val OptTeamsCreateReqPermission) {
	s.Permission = val
}

// SetParentTeamID sets the value of ParentTeamID.
func (s *TeamsCreateReq) SetParentTeamID(val OptInt) {
	s.ParentTeamID = val
}

// **Deprecated**. The permission that new repositories will be added to the team with when none is
// specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsCreateReqPermission string

const (
	TeamsCreateReqPermissionPull  TeamsCreateReqPermission = "pull"
	TeamsCreateReqPermissionPush  TeamsCreateReqPermission = "push"
	TeamsCreateReqPermissionAdmin TeamsCreateReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsCreateReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsCreateReqPermissionPull:
		return []byte(s), nil
	case TeamsCreateReqPermissionPush:
		return []byte(s), nil
	case TeamsCreateReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsCreateReqPermission) UnmarshalText(data []byte) error {
	switch TeamsCreateReqPermission(data) {
	case TeamsCreateReqPermissionPull:
		*s = TeamsCreateReqPermissionPull
		return nil
	case TeamsCreateReqPermissionPush:
		*s = TeamsCreateReqPermissionPush
		return nil
	case TeamsCreateReqPermissionAdmin:
		*s = TeamsCreateReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of privacy this team should have. The options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// Default: `secret`
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
// Default for child team: `closed`.
type TeamsCreateReqPrivacy string

const (
	TeamsCreateReqPrivacySecret TeamsCreateReqPrivacy = "secret"
	TeamsCreateReqPrivacyClosed TeamsCreateReqPrivacy = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsCreateReqPrivacy) MarshalText() ([]byte, error) {
	switch s {
	case TeamsCreateReqPrivacySecret:
		return []byte(s), nil
	case TeamsCreateReqPrivacyClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsCreateReqPrivacy) UnmarshalText(data []byte) error {
	switch TeamsCreateReqPrivacy(data) {
	case TeamsCreateReqPrivacySecret:
		*s = TeamsCreateReqPrivacySecret
		return nil
	case TeamsCreateReqPrivacyClosed:
		*s = TeamsCreateReqPrivacyClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsDeleteDiscussionCommentInOrgNoContent is response for TeamsDeleteDiscussionCommentInOrg operation.
type TeamsDeleteDiscussionCommentInOrgNoContent struct{}

// TeamsDeleteDiscussionCommentLegacyNoContent is response for TeamsDeleteDiscussionCommentLegacy operation.
type TeamsDeleteDiscussionCommentLegacyNoContent struct{}

// TeamsDeleteDiscussionInOrgNoContent is response for TeamsDeleteDiscussionInOrg operation.
type TeamsDeleteDiscussionInOrgNoContent struct{}

// TeamsDeleteDiscussionLegacyNoContent is response for TeamsDeleteDiscussionLegacy operation.
type TeamsDeleteDiscussionLegacyNoContent struct{}

// TeamsDeleteInOrgNoContent is response for TeamsDeleteInOrg operation.
type TeamsDeleteInOrgNoContent struct{}

// TeamsDeleteLegacyNoContent is response for TeamsDeleteLegacy operation.
type TeamsDeleteLegacyNoContent struct{}

func (*TeamsDeleteLegacyNoContent) teamsDeleteLegacyRes() {}

// TeamsGetMemberLegacyNoContent is response for TeamsGetMemberLegacy operation.
type TeamsGetMemberLegacyNoContent struct{}

func (*TeamsGetMemberLegacyNoContent) teamsGetMemberLegacyRes() {}

// TeamsGetMemberLegacyNotFound is response for TeamsGetMemberLegacy operation.
type TeamsGetMemberLegacyNotFound struct{}

func (*TeamsGetMemberLegacyNotFound) teamsGetMemberLegacyRes() {}

// TeamsGetMembershipForUserInOrgNotFound is response for TeamsGetMembershipForUserInOrg operation.
type TeamsGetMembershipForUserInOrgNotFound struct{}

func (*TeamsGetMembershipForUserInOrgNotFound) teamsGetMembershipForUserInOrgRes() {}

// TeamsListChildInOrgOKHeaders wraps []Team with response headers.
type TeamsListChildInOrgOKHeaders struct {
	Link     OptString
	Response []Team
}

// GetLink returns the value of Link.
func (s *TeamsListChildInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListChildInOrgOKHeaders) GetResponse() []Team {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListChildInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListChildInOrgOKHeaders) SetResponse(val []Team) {
	s.Response = val
}

type TeamsListChildLegacyForbidden BasicError

func (*TeamsListChildLegacyForbidden) teamsListChildLegacyRes() {}

type TeamsListChildLegacyNotFound BasicError

func (*TeamsListChildLegacyNotFound) teamsListChildLegacyRes() {}

// TeamsListChildLegacyOKHeaders wraps []Team with response headers.
type TeamsListChildLegacyOKHeaders struct {
	Link     OptString
	Response []Team
}

// GetLink returns the value of Link.
func (s *TeamsListChildLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListChildLegacyOKHeaders) GetResponse() []Team {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListChildLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListChildLegacyOKHeaders) SetResponse(val []Team) {
	s.Response = val
}

func (*TeamsListChildLegacyOKHeaders) teamsListChildLegacyRes() {}

type TeamsListDiscussionCommentsInOrgDirection string

const (
	TeamsListDiscussionCommentsInOrgDirectionAsc  TeamsListDiscussionCommentsInOrgDirection = "asc"
	TeamsListDiscussionCommentsInOrgDirectionDesc TeamsListDiscussionCommentsInOrgDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsListDiscussionCommentsInOrgDirection) MarshalText() ([]byte, error) {
	switch s {
	case TeamsListDiscussionCommentsInOrgDirectionAsc:
		return []byte(s), nil
	case TeamsListDiscussionCommentsInOrgDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsListDiscussionCommentsInOrgDirection) UnmarshalText(data []byte) error {
	switch TeamsListDiscussionCommentsInOrgDirection(data) {
	case TeamsListDiscussionCommentsInOrgDirectionAsc:
		*s = TeamsListDiscussionCommentsInOrgDirectionAsc
		return nil
	case TeamsListDiscussionCommentsInOrgDirectionDesc:
		*s = TeamsListDiscussionCommentsInOrgDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsListDiscussionCommentsInOrgOKHeaders wraps []TeamDiscussionComment with response headers.
type TeamsListDiscussionCommentsInOrgOKHeaders struct {
	Link     OptString
	Response []TeamDiscussionComment
}

// GetLink returns the value of Link.
func (s *TeamsListDiscussionCommentsInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListDiscussionCommentsInOrgOKHeaders) GetResponse() []TeamDiscussionComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListDiscussionCommentsInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListDiscussionCommentsInOrgOKHeaders) SetResponse(val []TeamDiscussionComment) {
	s.Response = val
}

type TeamsListDiscussionCommentsLegacyDirection string

const (
	TeamsListDiscussionCommentsLegacyDirectionAsc  TeamsListDiscussionCommentsLegacyDirection = "asc"
	TeamsListDiscussionCommentsLegacyDirectionDesc TeamsListDiscussionCommentsLegacyDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsListDiscussionCommentsLegacyDirection) MarshalText() ([]byte, error) {
	switch s {
	case TeamsListDiscussionCommentsLegacyDirectionAsc:
		return []byte(s), nil
	case TeamsListDiscussionCommentsLegacyDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsListDiscussionCommentsLegacyDirection) UnmarshalText(data []byte) error {
	switch TeamsListDiscussionCommentsLegacyDirection(data) {
	case TeamsListDiscussionCommentsLegacyDirectionAsc:
		*s = TeamsListDiscussionCommentsLegacyDirectionAsc
		return nil
	case TeamsListDiscussionCommentsLegacyDirectionDesc:
		*s = TeamsListDiscussionCommentsLegacyDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsListDiscussionCommentsLegacyOKHeaders wraps []TeamDiscussionComment with response headers.
type TeamsListDiscussionCommentsLegacyOKHeaders struct {
	Link     OptString
	Response []TeamDiscussionComment
}

// GetLink returns the value of Link.
func (s *TeamsListDiscussionCommentsLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListDiscussionCommentsLegacyOKHeaders) GetResponse() []TeamDiscussionComment {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListDiscussionCommentsLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListDiscussionCommentsLegacyOKHeaders) SetResponse(val []TeamDiscussionComment) {
	s.Response = val
}

type TeamsListDiscussionsInOrgDirection string

const (
	TeamsListDiscussionsInOrgDirectionAsc  TeamsListDiscussionsInOrgDirection = "asc"
	TeamsListDiscussionsInOrgDirectionDesc TeamsListDiscussionsInOrgDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsListDiscussionsInOrgDirection) MarshalText() ([]byte, error) {
	switch s {
	case TeamsListDiscussionsInOrgDirectionAsc:
		return []byte(s), nil
	case TeamsListDiscussionsInOrgDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsListDiscussionsInOrgDirection) UnmarshalText(data []byte) error {
	switch TeamsListDiscussionsInOrgDirection(data) {
	case TeamsListDiscussionsInOrgDirectionAsc:
		*s = TeamsListDiscussionsInOrgDirectionAsc
		return nil
	case TeamsListDiscussionsInOrgDirectionDesc:
		*s = TeamsListDiscussionsInOrgDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsListDiscussionsInOrgOKHeaders wraps []TeamDiscussion with response headers.
type TeamsListDiscussionsInOrgOKHeaders struct {
	Link     OptString
	Response []TeamDiscussion
}

// GetLink returns the value of Link.
func (s *TeamsListDiscussionsInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListDiscussionsInOrgOKHeaders) GetResponse() []TeamDiscussion {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListDiscussionsInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListDiscussionsInOrgOKHeaders) SetResponse(val []TeamDiscussion) {
	s.Response = val
}

type TeamsListDiscussionsLegacyDirection string

const (
	TeamsListDiscussionsLegacyDirectionAsc  TeamsListDiscussionsLegacyDirection = "asc"
	TeamsListDiscussionsLegacyDirectionDesc TeamsListDiscussionsLegacyDirection = "desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsListDiscussionsLegacyDirection) MarshalText() ([]byte, error) {
	switch s {
	case TeamsListDiscussionsLegacyDirectionAsc:
		return []byte(s), nil
	case TeamsListDiscussionsLegacyDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsListDiscussionsLegacyDirection) UnmarshalText(data []byte) error {
	switch TeamsListDiscussionsLegacyDirection(data) {
	case TeamsListDiscussionsLegacyDirectionAsc:
		*s = TeamsListDiscussionsLegacyDirectionAsc
		return nil
	case TeamsListDiscussionsLegacyDirectionDesc:
		*s = TeamsListDiscussionsLegacyDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsListDiscussionsLegacyOKHeaders wraps []TeamDiscussion with response headers.
type TeamsListDiscussionsLegacyOKHeaders struct {
	Link     OptString
	Response []TeamDiscussion
}

// GetLink returns the value of Link.
func (s *TeamsListDiscussionsLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListDiscussionsLegacyOKHeaders) GetResponse() []TeamDiscussion {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListDiscussionsLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListDiscussionsLegacyOKHeaders) SetResponse(val []TeamDiscussion) {
	s.Response = val
}

type TeamsListForAuthenticatedUserForbidden BasicError

func (*TeamsListForAuthenticatedUserForbidden) teamsListForAuthenticatedUserRes() {}

type TeamsListForAuthenticatedUserNotFound BasicError

func (*TeamsListForAuthenticatedUserNotFound) teamsListForAuthenticatedUserRes() {}

// TeamsListForAuthenticatedUserOKHeaders wraps []TeamFull with response headers.
type TeamsListForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []TeamFull
}

// GetLink returns the value of Link.
func (s *TeamsListForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListForAuthenticatedUserOKHeaders) GetResponse() []TeamFull {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListForAuthenticatedUserOKHeaders) SetResponse(val []TeamFull) {
	s.Response = val
}

func (*TeamsListForAuthenticatedUserOKHeaders) teamsListForAuthenticatedUserRes() {}

type TeamsListIdpGroupsForLegacyForbidden BasicError

func (*TeamsListIdpGroupsForLegacyForbidden) teamsListIdpGroupsForLegacyRes() {}

type TeamsListIdpGroupsForLegacyNotFound BasicError

func (*TeamsListIdpGroupsForLegacyNotFound) teamsListIdpGroupsForLegacyRes() {}

// TeamsListMembersInOrgOKHeaders wraps []SimpleUser with response headers.
type TeamsListMembersInOrgOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *TeamsListMembersInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListMembersInOrgOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListMembersInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListMembersInOrgOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

type TeamsListMembersInOrgRole string

const (
	TeamsListMembersInOrgRoleMember     TeamsListMembersInOrgRole = "member"
	TeamsListMembersInOrgRoleMaintainer TeamsListMembersInOrgRole = "maintainer"
	TeamsListMembersInOrgRoleAll        TeamsListMembersInOrgRole = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsListMembersInOrgRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamsListMembersInOrgRoleMember:
		return []byte(s), nil
	case TeamsListMembersInOrgRoleMaintainer:
		return []byte(s), nil
	case TeamsListMembersInOrgRoleAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsListMembersInOrgRole) UnmarshalText(data []byte) error {
	switch TeamsListMembersInOrgRole(data) {
	case TeamsListMembersInOrgRoleMember:
		*s = TeamsListMembersInOrgRoleMember
		return nil
	case TeamsListMembersInOrgRoleMaintainer:
		*s = TeamsListMembersInOrgRoleMaintainer
		return nil
	case TeamsListMembersInOrgRoleAll:
		*s = TeamsListMembersInOrgRoleAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsListMembersLegacyOKHeaders wraps []SimpleUser with response headers.
type TeamsListMembersLegacyOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *TeamsListMembersLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListMembersLegacyOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListMembersLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListMembersLegacyOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*TeamsListMembersLegacyOKHeaders) teamsListMembersLegacyRes() {}

type TeamsListMembersLegacyRole string

const (
	TeamsListMembersLegacyRoleMember     TeamsListMembersLegacyRole = "member"
	TeamsListMembersLegacyRoleMaintainer TeamsListMembersLegacyRole = "maintainer"
	TeamsListMembersLegacyRoleAll        TeamsListMembersLegacyRole = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsListMembersLegacyRole) MarshalText() ([]byte, error) {
	switch s {
	case TeamsListMembersLegacyRoleMember:
		return []byte(s), nil
	case TeamsListMembersLegacyRoleMaintainer:
		return []byte(s), nil
	case TeamsListMembersLegacyRoleAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsListMembersLegacyRole) UnmarshalText(data []byte) error {
	switch TeamsListMembersLegacyRole(data) {
	case TeamsListMembersLegacyRoleMember:
		*s = TeamsListMembersLegacyRoleMember
		return nil
	case TeamsListMembersLegacyRoleMaintainer:
		*s = TeamsListMembersLegacyRoleMaintainer
		return nil
	case TeamsListMembersLegacyRoleAll:
		*s = TeamsListMembersLegacyRoleAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TeamsListOKHeaders wraps []Team with response headers.
type TeamsListOKHeaders struct {
	Link     OptString
	Response []Team
}

// GetLink returns the value of Link.
func (s *TeamsListOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListOKHeaders) GetResponse() []Team {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListOKHeaders) SetResponse(val []Team) {
	s.Response = val
}

func (*TeamsListOKHeaders) teamsListRes() {}

// TeamsListPendingInvitationsInOrgOKHeaders wraps []OrganizationInvitation with response headers.
type TeamsListPendingInvitationsInOrgOKHeaders struct {
	Link     OptString
	Response []OrganizationInvitation
}

// GetLink returns the value of Link.
func (s *TeamsListPendingInvitationsInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListPendingInvitationsInOrgOKHeaders) GetResponse() []OrganizationInvitation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListPendingInvitationsInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListPendingInvitationsInOrgOKHeaders) SetResponse(val []OrganizationInvitation) {
	s.Response = val
}

// TeamsListPendingInvitationsLegacyOKHeaders wraps []OrganizationInvitation with response headers.
type TeamsListPendingInvitationsLegacyOKHeaders struct {
	Link     OptString
	Response []OrganizationInvitation
}

// GetLink returns the value of Link.
func (s *TeamsListPendingInvitationsLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListPendingInvitationsLegacyOKHeaders) GetResponse() []OrganizationInvitation {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListPendingInvitationsLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListPendingInvitationsLegacyOKHeaders) SetResponse(val []OrganizationInvitation) {
	s.Response = val
}

// TeamsListProjectsInOrgOKHeaders wraps []TeamProject with response headers.
type TeamsListProjectsInOrgOKHeaders struct {
	Link     OptString
	Response []TeamProject
}

// GetLink returns the value of Link.
func (s *TeamsListProjectsInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListProjectsInOrgOKHeaders) GetResponse() []TeamProject {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListProjectsInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListProjectsInOrgOKHeaders) SetResponse(val []TeamProject) {
	s.Response = val
}

// TeamsListProjectsLegacyOKHeaders wraps []TeamProject with response headers.
type TeamsListProjectsLegacyOKHeaders struct {
	Link     OptString
	Response []TeamProject
}

// GetLink returns the value of Link.
func (s *TeamsListProjectsLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListProjectsLegacyOKHeaders) GetResponse() []TeamProject {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListProjectsLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListProjectsLegacyOKHeaders) SetResponse(val []TeamProject) {
	s.Response = val
}

func (*TeamsListProjectsLegacyOKHeaders) teamsListProjectsLegacyRes() {}

// TeamsListReposInOrgOKHeaders wraps []MinimalRepository with response headers.
type TeamsListReposInOrgOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *TeamsListReposInOrgOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListReposInOrgOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListReposInOrgOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListReposInOrgOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

// TeamsListReposLegacyOKHeaders wraps []MinimalRepository with response headers.
type TeamsListReposLegacyOKHeaders struct {
	Link     OptString
	Response []MinimalRepository
}

// GetLink returns the value of Link.
func (s *TeamsListReposLegacyOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *TeamsListReposLegacyOKHeaders) GetResponse() []MinimalRepository {
	return s.Response
}

// SetLink sets the value of Link.
func (s *TeamsListReposLegacyOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *TeamsListReposLegacyOKHeaders) SetResponse(val []MinimalRepository) {
	s.Response = val
}

func (*TeamsListReposLegacyOKHeaders) teamsListReposLegacyRes() {}

// TeamsRemoveMemberLegacyNoContent is response for TeamsRemoveMemberLegacy operation.
type TeamsRemoveMemberLegacyNoContent struct{}

func (*TeamsRemoveMemberLegacyNoContent) teamsRemoveMemberLegacyRes() {}

// TeamsRemoveMemberLegacyNotFound is response for TeamsRemoveMemberLegacy operation.
type TeamsRemoveMemberLegacyNotFound struct{}

func (*TeamsRemoveMemberLegacyNotFound) teamsRemoveMemberLegacyRes() {}

// TeamsRemoveMembershipForUserInOrgForbidden is response for TeamsRemoveMembershipForUserInOrg operation.
type TeamsRemoveMembershipForUserInOrgForbidden struct{}

func (*TeamsRemoveMembershipForUserInOrgForbidden) teamsRemoveMembershipForUserInOrgRes() {}

// TeamsRemoveMembershipForUserInOrgNoContent is response for TeamsRemoveMembershipForUserInOrg operation.
type TeamsRemoveMembershipForUserInOrgNoContent struct{}

func (*TeamsRemoveMembershipForUserInOrgNoContent) teamsRemoveMembershipForUserInOrgRes() {}

// TeamsRemoveMembershipForUserLegacyForbidden is response for TeamsRemoveMembershipForUserLegacy operation.
type TeamsRemoveMembershipForUserLegacyForbidden struct{}

func (*TeamsRemoveMembershipForUserLegacyForbidden) teamsRemoveMembershipForUserLegacyRes() {}

// TeamsRemoveMembershipForUserLegacyNoContent is response for TeamsRemoveMembershipForUserLegacy operation.
type TeamsRemoveMembershipForUserLegacyNoContent struct{}

func (*TeamsRemoveMembershipForUserLegacyNoContent) teamsRemoveMembershipForUserLegacyRes() {}

// TeamsRemoveProjectInOrgNoContent is response for TeamsRemoveProjectInOrg operation.
type TeamsRemoveProjectInOrgNoContent struct{}

// TeamsRemoveProjectLegacyNoContent is response for TeamsRemoveProjectLegacy operation.
type TeamsRemoveProjectLegacyNoContent struct{}

func (*TeamsRemoveProjectLegacyNoContent) teamsRemoveProjectLegacyRes() {}

// TeamsRemoveRepoInOrgNoContent is response for TeamsRemoveRepoInOrg operation.
type TeamsRemoveRepoInOrgNoContent struct{}

// TeamsRemoveRepoLegacyNoContent is response for TeamsRemoveRepoLegacy operation.
type TeamsRemoveRepoLegacyNoContent struct{}

type TeamsUpdateDiscussionCommentInOrgReq struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *TeamsUpdateDiscussionCommentInOrgReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *TeamsUpdateDiscussionCommentInOrgReq) SetBody(val string) {
	s.Body = val
}

type TeamsUpdateDiscussionCommentLegacyReq struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// GetBody returns the value of Body.
func (s *TeamsUpdateDiscussionCommentLegacyReq) GetBody() string {
	return s.Body
}

// SetBody sets the value of Body.
func (s *TeamsUpdateDiscussionCommentLegacyReq) SetBody(val string) {
	s.Body = val
}

type TeamsUpdateDiscussionInOrgReq struct {
	// The discussion post's title.
	Title OptString `json:"title"`
	// The discussion post's body text.
	Body OptString `json:"body"`
}

// GetTitle returns the value of Title.
func (s *TeamsUpdateDiscussionInOrgReq) GetTitle() OptString {
	return s.Title
}

// GetBody returns the value of Body.
func (s *TeamsUpdateDiscussionInOrgReq) GetBody() OptString {
	return s.Body
}

// SetTitle sets the value of Title.
func (s *TeamsUpdateDiscussionInOrgReq) SetTitle(val OptString) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *TeamsUpdateDiscussionInOrgReq) SetBody(val OptString) {
	s.Body = val
}

type TeamsUpdateDiscussionLegacyReq struct {
	// The discussion post's title.
	Title OptString `json:"title"`
	// The discussion post's body text.
	Body OptString `json:"body"`
}

// GetTitle returns the value of Title.
func (s *TeamsUpdateDiscussionLegacyReq) GetTitle() OptString {
	return s.Title
}

// GetBody returns the value of Body.
func (s *TeamsUpdateDiscussionLegacyReq) GetBody() OptString {
	return s.Body
}

// SetTitle sets the value of Title.
func (s *TeamsUpdateDiscussionLegacyReq) SetTitle(val OptString) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *TeamsUpdateDiscussionLegacyReq) SetBody(val OptString) {
	s.Body = val
}

type TeamsUpdateInOrgReq struct {
	// The name of the team.
	Name OptString `json:"name"`
	// The description of the team.
	Description OptString `json:"description"`
	// The level of privacy this team should have. Editing teams without specifying this parameter leaves
	// `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The
	// options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	Privacy OptTeamsUpdateInOrgReqPrivacy `json:"privacy"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is
	// specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission OptTeamsUpdateInOrgReqPermission `json:"permission"`
	// The ID of a team to set as the parent team.
	ParentTeamID OptNilInt `json:"parent_team_id"`
}

// GetName returns the value of Name.
func (s *TeamsUpdateInOrgReq) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *TeamsUpdateInOrgReq) GetDescription() OptString {
	return s.Description
}

// GetPrivacy returns the value of Privacy.
func (s *TeamsUpdateInOrgReq) GetPrivacy() OptTeamsUpdateInOrgReqPrivacy {
	return s.Privacy
}

// GetPermission returns the value of Permission.
func (s *TeamsUpdateInOrgReq) GetPermission() OptTeamsUpdateInOrgReqPermission {
	return s.Permission
}

// GetParentTeamID returns the value of ParentTeamID.
func (s *TeamsUpdateInOrgReq) GetParentTeamID() OptNilInt {
	return s.ParentTeamID
}

// SetName sets the value of Name.
func (s *TeamsUpdateInOrgReq) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *TeamsUpdateInOrgReq) SetDescription(val OptString) {
	s.Description = val
}

// SetPrivacy sets the value of Privacy.
func (s *TeamsUpdateInOrgReq) SetPrivacy(val OptTeamsUpdateInOrgReqPrivacy) {
	s.Privacy = val
}

// SetPermission sets the value of Permission.
func (s *TeamsUpdateInOrgReq) SetPermission(val OptTeamsUpdateInOrgReqPermission) {
	s.Permission = val
}

// SetParentTeamID sets the value of ParentTeamID.
func (s *TeamsUpdateInOrgReq) SetParentTeamID(val OptNilInt) {
	s.ParentTeamID = val
}

// **Deprecated**. The permission that new repositories will be added to the team with when none is
// specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsUpdateInOrgReqPermission string

const (
	TeamsUpdateInOrgReqPermissionPull  TeamsUpdateInOrgReqPermission = "pull"
	TeamsUpdateInOrgReqPermissionPush  TeamsUpdateInOrgReqPermission = "push"
	TeamsUpdateInOrgReqPermissionAdmin TeamsUpdateInOrgReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsUpdateInOrgReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsUpdateInOrgReqPermissionPull:
		return []byte(s), nil
	case TeamsUpdateInOrgReqPermissionPush:
		return []byte(s), nil
	case TeamsUpdateInOrgReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsUpdateInOrgReqPermission) UnmarshalText(data []byte) error {
	switch TeamsUpdateInOrgReqPermission(data) {
	case TeamsUpdateInOrgReqPermissionPull:
		*s = TeamsUpdateInOrgReqPermissionPull
		return nil
	case TeamsUpdateInOrgReqPermissionPush:
		*s = TeamsUpdateInOrgReqPermissionPush
		return nil
	case TeamsUpdateInOrgReqPermissionAdmin:
		*s = TeamsUpdateInOrgReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of privacy this team should have. Editing teams without specifying this parameter leaves
// `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The
// options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
type TeamsUpdateInOrgReqPrivacy string

const (
	TeamsUpdateInOrgReqPrivacySecret TeamsUpdateInOrgReqPrivacy = "secret"
	TeamsUpdateInOrgReqPrivacyClosed TeamsUpdateInOrgReqPrivacy = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsUpdateInOrgReqPrivacy) MarshalText() ([]byte, error) {
	switch s {
	case TeamsUpdateInOrgReqPrivacySecret:
		return []byte(s), nil
	case TeamsUpdateInOrgReqPrivacyClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsUpdateInOrgReqPrivacy) UnmarshalText(data []byte) error {
	switch TeamsUpdateInOrgReqPrivacy(data) {
	case TeamsUpdateInOrgReqPrivacySecret:
		*s = TeamsUpdateInOrgReqPrivacySecret
		return nil
	case TeamsUpdateInOrgReqPrivacyClosed:
		*s = TeamsUpdateInOrgReqPrivacyClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TeamsUpdateLegacyCreated TeamFull

func (*TeamsUpdateLegacyCreated) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyForbidden BasicError

func (*TeamsUpdateLegacyForbidden) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyNotFound BasicError

func (*TeamsUpdateLegacyNotFound) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyOK TeamFull

func (*TeamsUpdateLegacyOK) teamsUpdateLegacyRes() {}

type TeamsUpdateLegacyReq struct {
	// The name of the team.
	Name string `json:"name"`
	// The description of the team.
	Description OptString `json:"description"`
	// The level of privacy this team should have. Editing teams without specifying this parameter leaves
	// `privacy` intact. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	Privacy OptTeamsUpdateLegacyReqPrivacy `json:"privacy"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is
	// specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission OptTeamsUpdateLegacyReqPermission `json:"permission"`
	// The ID of a team to set as the parent team.
	ParentTeamID OptNilInt `json:"parent_team_id"`
}

// GetName returns the value of Name.
func (s *TeamsUpdateLegacyReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *TeamsUpdateLegacyReq) GetDescription() OptString {
	return s.Description
}

// GetPrivacy returns the value of Privacy.
func (s *TeamsUpdateLegacyReq) GetPrivacy() OptTeamsUpdateLegacyReqPrivacy {
	return s.Privacy
}

// GetPermission returns the value of Permission.
func (s *TeamsUpdateLegacyReq) GetPermission() OptTeamsUpdateLegacyReqPermission {
	return s.Permission
}

// GetParentTeamID returns the value of ParentTeamID.
func (s *TeamsUpdateLegacyReq) GetParentTeamID() OptNilInt {
	return s.ParentTeamID
}

// SetName sets the value of Name.
func (s *TeamsUpdateLegacyReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *TeamsUpdateLegacyReq) SetDescription(val OptString) {
	s.Description = val
}

// SetPrivacy sets the value of Privacy.
func (s *TeamsUpdateLegacyReq) SetPrivacy(val OptTeamsUpdateLegacyReqPrivacy) {
	s.Privacy = val
}

// SetPermission sets the value of Permission.
func (s *TeamsUpdateLegacyReq) SetPermission(val OptTeamsUpdateLegacyReqPermission) {
	s.Permission = val
}

// SetParentTeamID sets the value of ParentTeamID.
func (s *TeamsUpdateLegacyReq) SetParentTeamID(val OptNilInt) {
	s.ParentTeamID = val
}

// **Deprecated**. The permission that new repositories will be added to the team with when none is
// specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsUpdateLegacyReqPermission string

const (
	TeamsUpdateLegacyReqPermissionPull  TeamsUpdateLegacyReqPermission = "pull"
	TeamsUpdateLegacyReqPermissionPush  TeamsUpdateLegacyReqPermission = "push"
	TeamsUpdateLegacyReqPermissionAdmin TeamsUpdateLegacyReqPermission = "admin"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsUpdateLegacyReqPermission) MarshalText() ([]byte, error) {
	switch s {
	case TeamsUpdateLegacyReqPermissionPull:
		return []byte(s), nil
	case TeamsUpdateLegacyReqPermissionPush:
		return []byte(s), nil
	case TeamsUpdateLegacyReqPermissionAdmin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsUpdateLegacyReqPermission) UnmarshalText(data []byte) error {
	switch TeamsUpdateLegacyReqPermission(data) {
	case TeamsUpdateLegacyReqPermissionPull:
		*s = TeamsUpdateLegacyReqPermissionPull
		return nil
	case TeamsUpdateLegacyReqPermissionPush:
		*s = TeamsUpdateLegacyReqPermissionPush
		return nil
	case TeamsUpdateLegacyReqPermissionAdmin:
		*s = TeamsUpdateLegacyReqPermissionAdmin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The level of privacy this team should have. Editing teams without specifying this parameter leaves
// `privacy` intact. The options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
type TeamsUpdateLegacyReqPrivacy string

const (
	TeamsUpdateLegacyReqPrivacySecret TeamsUpdateLegacyReqPrivacy = "secret"
	TeamsUpdateLegacyReqPrivacyClosed TeamsUpdateLegacyReqPrivacy = "closed"
)

// MarshalText implements encoding.TextMarshaler.
func (s TeamsUpdateLegacyReqPrivacy) MarshalText() ([]byte, error) {
	switch s {
	case TeamsUpdateLegacyReqPrivacySecret:
		return []byte(s), nil
	case TeamsUpdateLegacyReqPrivacyClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TeamsUpdateLegacyReqPrivacy) UnmarshalText(data []byte) error {
	switch TeamsUpdateLegacyReqPrivacy(data) {
	case TeamsUpdateLegacyReqPrivacySecret:
		*s = TeamsUpdateLegacyReqPrivacySecret
		return nil
	case TeamsUpdateLegacyReqPrivacyClosed:
		*s = TeamsUpdateLegacyReqPrivacyClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Thread.
// Ref: #/components/schemas/thread
type Thread struct {
	ID              string            `json:"id"`
	Repository      MinimalRepository `json:"repository"`
	Subject         ThreadSubject     `json:"subject"`
	Reason          string            `json:"reason"`
	Unread          bool              `json:"unread"`
	UpdatedAt       string            `json:"updated_at"`
	LastReadAt      NilString         `json:"last_read_at"`
	URL             string            `json:"url"`
	SubscriptionURL string            `json:"subscription_url"`
}

// GetID returns the value of ID.
func (s *Thread) GetID() string {
	return s.ID
}

// GetRepository returns the value of Repository.
func (s *Thread) GetRepository() MinimalRepository {
	return s.Repository
}

// GetSubject returns the value of Subject.
func (s *Thread) GetSubject() ThreadSubject {
	return s.Subject
}

// GetReason returns the value of Reason.
func (s *Thread) GetReason() string {
	return s.Reason
}

// GetUnread returns the value of Unread.
func (s *Thread) GetUnread() bool {
	return s.Unread
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Thread) GetUpdatedAt() string {
	return s.UpdatedAt
}

// GetLastReadAt returns the value of LastReadAt.
func (s *Thread) GetLastReadAt() NilString {
	return s.LastReadAt
}

// GetURL returns the value of URL.
func (s *Thread) GetURL() string {
	return s.URL
}

// GetSubscriptionURL returns the value of SubscriptionURL.
func (s *Thread) GetSubscriptionURL() string {
	return s.SubscriptionURL
}

// SetID sets the value of ID.
func (s *Thread) SetID(val string) {
	s.ID = val
}

// SetRepository sets the value of Repository.
func (s *Thread) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetSubject sets the value of Subject.
func (s *Thread) SetSubject(val ThreadSubject) {
	s.Subject = val
}

// SetReason sets the value of Reason.
func (s *Thread) SetReason(val string) {
	s.Reason = val
}

// SetUnread sets the value of Unread.
func (s *Thread) SetUnread(val bool) {
	s.Unread = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Thread) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// SetLastReadAt sets the value of LastReadAt.
func (s *Thread) SetLastReadAt(val NilString) {
	s.LastReadAt = val
}

// SetURL sets the value of URL.
func (s *Thread) SetURL(val string) {
	s.URL = val
}

// SetSubscriptionURL sets the value of SubscriptionURL.
func (s *Thread) SetSubscriptionURL(val string) {
	s.SubscriptionURL = val
}

func (*Thread) activityGetThreadRes() {}

type ThreadSubject struct {
	Title            string `json:"title"`
	URL              string `json:"url"`
	LatestCommentURL string `json:"latest_comment_url"`
	Type             string `json:"type"`
}

// GetTitle returns the value of Title.
func (s *ThreadSubject) GetTitle() string {
	return s.Title
}

// GetURL returns the value of URL.
func (s *ThreadSubject) GetURL() string {
	return s.URL
}

// GetLatestCommentURL returns the value of LatestCommentURL.
func (s *ThreadSubject) GetLatestCommentURL() string {
	return s.LatestCommentURL
}

// GetType returns the value of Type.
func (s *ThreadSubject) GetType() string {
	return s.Type
}

// SetTitle sets the value of Title.
func (s *ThreadSubject) SetTitle(val string) {
	s.Title = val
}

// SetURL sets the value of URL.
func (s *ThreadSubject) SetURL(val string) {
	s.URL = val
}

// SetLatestCommentURL sets the value of LatestCommentURL.
func (s *ThreadSubject) SetLatestCommentURL(val string) {
	s.LatestCommentURL = val
}

// SetType sets the value of Type.
func (s *ThreadSubject) SetType(val string) {
	s.Type = val
}

// Thread Subscription.
// Ref: #/components/schemas/thread-subscription
type ThreadSubscription struct {
	Subscribed    bool        `json:"subscribed"`
	Ignored       bool        `json:"ignored"`
	Reason        NilString   `json:"reason"`
	CreatedAt     NilDateTime `json:"created_at"`
	URL           url.URL     `json:"url"`
	ThreadURL     OptURI      `json:"thread_url"`
	RepositoryURL OptURI      `json:"repository_url"`
}

// GetSubscribed returns the value of Subscribed.
func (s *ThreadSubscription) GetSubscribed() bool {
	return s.Subscribed
}

// GetIgnored returns the value of Ignored.
func (s *ThreadSubscription) GetIgnored() bool {
	return s.Ignored
}

// GetReason returns the value of Reason.
func (s *ThreadSubscription) GetReason() NilString {
	return s.Reason
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ThreadSubscription) GetCreatedAt() NilDateTime {
	return s.CreatedAt
}

// GetURL returns the value of URL.
func (s *ThreadSubscription) GetURL() url.URL {
	return s.URL
}

// GetThreadURL returns the value of ThreadURL.
func (s *ThreadSubscription) GetThreadURL() OptURI {
	return s.ThreadURL
}

// GetRepositoryURL returns the value of RepositoryURL.
func (s *ThreadSubscription) GetRepositoryURL() OptURI {
	return s.RepositoryURL
}

// SetSubscribed sets the value of Subscribed.
func (s *ThreadSubscription) SetSubscribed(val bool) {
	s.Subscribed = val
}

// SetIgnored sets the value of Ignored.
func (s *ThreadSubscription) SetIgnored(val bool) {
	s.Ignored = val
}

// SetReason sets the value of Reason.
func (s *ThreadSubscription) SetReason(val NilString) {
	s.Reason = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ThreadSubscription) SetCreatedAt(val NilDateTime) {
	s.CreatedAt = val
}

// SetURL sets the value of URL.
func (s *ThreadSubscription) SetURL(val url.URL) {
	s.URL = val
}

// SetThreadURL sets the value of ThreadURL.
func (s *ThreadSubscription) SetThreadURL(val OptURI) {
	s.ThreadURL = val
}

// SetRepositoryURL sets the value of RepositoryURL.
func (s *ThreadSubscription) SetRepositoryURL(val OptURI) {
	s.RepositoryURL = val
}

func (*ThreadSubscription) activityGetThreadSubscriptionForAuthenticatedUserRes() {}
func (*ThreadSubscription) activitySetThreadSubscriptionRes()                     {}

// A topic aggregates entities that are related to a subject.
// Ref: #/components/schemas/topic
type Topic struct {
	Names []string `json:"names"`
}

// GetNames returns the value of Names.
func (s *Topic) GetNames() []string {
	return s.Names
}

// SetNames sets the value of Names.
func (s *Topic) SetNames(val []string) {
	s.Names = val
}

func (*Topic) reposGetAllTopicsRes()     {}
func (*Topic) reposReplaceAllTopicsRes() {}

// Topic Search Result Item.
// Ref: #/components/schemas/topic-search-result-item
type TopicSearchResultItem struct {
	Name             string                                      `json:"name"`
	DisplayName      NilString                                   `json:"display_name"`
	ShortDescription NilString                                   `json:"short_description"`
	Description      NilString                                   `json:"description"`
	CreatedBy        NilString                                   `json:"created_by"`
	Released         NilString                                   `json:"released"`
	CreatedAt        time.Time                                   `json:"created_at"`
	UpdatedAt        time.Time                                   `json:"updated_at"`
	Featured         bool                                        `json:"featured"`
	Curated          bool                                        `json:"curated"`
	Score            float64                                     `json:"score"`
	RepositoryCount  OptNilInt                                   `json:"repository_count"`
	LogoURL          OptNilURI                                   `json:"logo_url"`
	TextMatches      *SearchResultTextMatches                    `json:"text_matches"`
	Related          OptNilTopicSearchResultItemRelatedItemArray `json:"related"`
	Aliases          OptNilTopicSearchResultItemAliasesItemArray `json:"aliases"`
}

// GetName returns the value of Name.
func (s *TopicSearchResultItem) GetName() string {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *TopicSearchResultItem) GetDisplayName() NilString {
	return s.DisplayName
}

// GetShortDescription returns the value of ShortDescription.
func (s *TopicSearchResultItem) GetShortDescription() NilString {
	return s.ShortDescription
}

// GetDescription returns the value of Description.
func (s *TopicSearchResultItem) GetDescription() NilString {
	return s.Description
}

// GetCreatedBy returns the value of CreatedBy.
func (s *TopicSearchResultItem) GetCreatedBy() NilString {
	return s.CreatedBy
}

// GetReleased returns the value of Released.
func (s *TopicSearchResultItem) GetReleased() NilString {
	return s.Released
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TopicSearchResultItem) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TopicSearchResultItem) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetFeatured returns the value of Featured.
func (s *TopicSearchResultItem) GetFeatured() bool {
	return s.Featured
}

// GetCurated returns the value of Curated.
func (s *TopicSearchResultItem) GetCurated() bool {
	return s.Curated
}

// GetScore returns the value of Score.
func (s *TopicSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetRepositoryCount returns the value of RepositoryCount.
func (s *TopicSearchResultItem) GetRepositoryCount() OptNilInt {
	return s.RepositoryCount
}

// GetLogoURL returns the value of LogoURL.
func (s *TopicSearchResultItem) GetLogoURL() OptNilURI {
	return s.LogoURL
}

// GetTextMatches returns the value of TextMatches.
func (s *TopicSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// GetRelated returns the value of Related.
func (s *TopicSearchResultItem) GetRelated() OptNilTopicSearchResultItemRelatedItemArray {
	return s.Related
}

// GetAliases returns the value of Aliases.
func (s *TopicSearchResultItem) GetAliases() OptNilTopicSearchResultItemAliasesItemArray {
	return s.Aliases
}

// SetName sets the value of Name.
func (s *TopicSearchResultItem) SetName(val string) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *TopicSearchResultItem) SetDisplayName(val NilString) {
	s.DisplayName = val
}

// SetShortDescription sets the value of ShortDescription.
func (s *TopicSearchResultItem) SetShortDescription(val NilString) {
	s.ShortDescription = val
}

// SetDescription sets the value of Description.
func (s *TopicSearchResultItem) SetDescription(val NilString) {
	s.Description = val
}

// SetCreatedBy sets the value of CreatedBy.
func (s *TopicSearchResultItem) SetCreatedBy(val NilString) {
	s.CreatedBy = val
}

// SetReleased sets the value of Released.
func (s *TopicSearchResultItem) SetReleased(val NilString) {
	s.Released = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TopicSearchResultItem) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TopicSearchResultItem) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetFeatured sets the value of Featured.
func (s *TopicSearchResultItem) SetFeatured(val bool) {
	s.Featured = val
}

// SetCurated sets the value of Curated.
func (s *TopicSearchResultItem) SetCurated(val bool) {
	s.Curated = val
}

// SetScore sets the value of Score.
func (s *TopicSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetRepositoryCount sets the value of RepositoryCount.
func (s *TopicSearchResultItem) SetRepositoryCount(val OptNilInt) {
	s.RepositoryCount = val
}

// SetLogoURL sets the value of LogoURL.
func (s *TopicSearchResultItem) SetLogoURL(val OptNilURI) {
	s.LogoURL = val
}

// SetTextMatches sets the value of TextMatches.
func (s *TopicSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

// SetRelated sets the value of Related.
func (s *TopicSearchResultItem) SetRelated(val OptNilTopicSearchResultItemRelatedItemArray) {
	s.Related = val
}

// SetAliases sets the value of Aliases.
func (s *TopicSearchResultItem) SetAliases(val OptNilTopicSearchResultItemAliasesItemArray) {
	s.Aliases = val
}

type TopicSearchResultItemAliasesItem struct {
	TopicRelation OptTopicSearchResultItemAliasesItemTopicRelation `json:"topic_relation"`
}

// GetTopicRelation returns the value of TopicRelation.
func (s *TopicSearchResultItemAliasesItem) GetTopicRelation() OptTopicSearchResultItemAliasesItemTopicRelation {
	return s.TopicRelation
}

// SetTopicRelation sets the value of TopicRelation.
func (s *TopicSearchResultItemAliasesItem) SetTopicRelation(val OptTopicSearchResultItemAliasesItemTopicRelation) {
	s.TopicRelation = val
}

type TopicSearchResultItemAliasesItemTopicRelation struct {
	ID           OptInt    `json:"id"`
	Name         OptString `json:"name"`
	TopicID      OptInt    `json:"topic_id"`
	RelationType OptString `json:"relation_type"`
}

// GetID returns the value of ID.
func (s *TopicSearchResultItemAliasesItemTopicRelation) GetID() OptInt {
	return s.ID
}

// GetName returns the value of Name.
func (s *TopicSearchResultItemAliasesItemTopicRelation) GetName() OptString {
	return s.Name
}

// GetTopicID returns the value of TopicID.
func (s *TopicSearchResultItemAliasesItemTopicRelation) GetTopicID() OptInt {
	return s.TopicID
}

// GetRelationType returns the value of RelationType.
func (s *TopicSearchResultItemAliasesItemTopicRelation) GetRelationType() OptString {
	return s.RelationType
}

// SetID sets the value of ID.
func (s *TopicSearchResultItemAliasesItemTopicRelation) SetID(val OptInt) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TopicSearchResultItemAliasesItemTopicRelation) SetName(val OptString) {
	s.Name = val
}

// SetTopicID sets the value of TopicID.
func (s *TopicSearchResultItemAliasesItemTopicRelation) SetTopicID(val OptInt) {
	s.TopicID = val
}

// SetRelationType sets the value of RelationType.
func (s *TopicSearchResultItemAliasesItemTopicRelation) SetRelationType(val OptString) {
	s.RelationType = val
}

type TopicSearchResultItemRelatedItem struct {
	TopicRelation OptTopicSearchResultItemRelatedItemTopicRelation `json:"topic_relation"`
}

// GetTopicRelation returns the value of TopicRelation.
func (s *TopicSearchResultItemRelatedItem) GetTopicRelation() OptTopicSearchResultItemRelatedItemTopicRelation {
	return s.TopicRelation
}

// SetTopicRelation sets the value of TopicRelation.
func (s *TopicSearchResultItemRelatedItem) SetTopicRelation(val OptTopicSearchResultItemRelatedItemTopicRelation) {
	s.TopicRelation = val
}

type TopicSearchResultItemRelatedItemTopicRelation struct {
	ID           OptInt    `json:"id"`
	Name         OptString `json:"name"`
	TopicID      OptInt    `json:"topic_id"`
	RelationType OptString `json:"relation_type"`
}

// GetID returns the value of ID.
func (s *TopicSearchResultItemRelatedItemTopicRelation) GetID() OptInt {
	return s.ID
}

// GetName returns the value of Name.
func (s *TopicSearchResultItemRelatedItemTopicRelation) GetName() OptString {
	return s.Name
}

// GetTopicID returns the value of TopicID.
func (s *TopicSearchResultItemRelatedItemTopicRelation) GetTopicID() OptInt {
	return s.TopicID
}

// GetRelationType returns the value of RelationType.
func (s *TopicSearchResultItemRelatedItemTopicRelation) GetRelationType() OptString {
	return s.RelationType
}

// SetID sets the value of ID.
func (s *TopicSearchResultItemRelatedItemTopicRelation) SetID(val OptInt) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TopicSearchResultItemRelatedItemTopicRelation) SetName(val OptString) {
	s.Name = val
}

// SetTopicID sets the value of TopicID.
func (s *TopicSearchResultItemRelatedItemTopicRelation) SetTopicID(val OptInt) {
	s.TopicID = val
}

// SetRelationType sets the value of RelationType.
func (s *TopicSearchResultItemRelatedItemTopicRelation) SetRelationType(val OptString) {
	s.RelationType = val
}

// Ref: #/components/schemas/traffic
type Traffic struct {
	Timestamp time.Time `json:"timestamp"`
	Uniques   int       `json:"uniques"`
	Count     int       `json:"count"`
}

// GetTimestamp returns the value of Timestamp.
func (s *Traffic) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetUniques returns the value of Uniques.
func (s *Traffic) GetUniques() int {
	return s.Uniques
}

// GetCount returns the value of Count.
func (s *Traffic) GetCount() int {
	return s.Count
}

// SetTimestamp sets the value of Timestamp.
func (s *Traffic) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetUniques sets the value of Uniques.
func (s *Traffic) SetUniques(val int) {
	s.Uniques = val
}

// SetCount sets the value of Count.
func (s *Traffic) SetCount(val int) {
	s.Count = val
}

// User Marketplace Purchase.
// Ref: #/components/schemas/user-marketplace-purchase
type UserMarketplacePurchase struct {
	BillingCycle    string                 `json:"billing_cycle"`
	NextBillingDate NilDateTime            `json:"next_billing_date"`
	UnitCount       NilInt                 `json:"unit_count"`
	OnFreeTrial     bool                   `json:"on_free_trial"`
	FreeTrialEndsOn NilDateTime            `json:"free_trial_ends_on"`
	UpdatedAt       NilDateTime            `json:"updated_at"`
	Account         MarketplaceAccount     `json:"account"`
	Plan            MarketplaceListingPlan `json:"plan"`
}

// GetBillingCycle returns the value of BillingCycle.
func (s *UserMarketplacePurchase) GetBillingCycle() string {
	return s.BillingCycle
}

// GetNextBillingDate returns the value of NextBillingDate.
func (s *UserMarketplacePurchase) GetNextBillingDate() NilDateTime {
	return s.NextBillingDate
}

// GetUnitCount returns the value of UnitCount.
func (s *UserMarketplacePurchase) GetUnitCount() NilInt {
	return s.UnitCount
}

// GetOnFreeTrial returns the value of OnFreeTrial.
func (s *UserMarketplacePurchase) GetOnFreeTrial() bool {
	return s.OnFreeTrial
}

// GetFreeTrialEndsOn returns the value of FreeTrialEndsOn.
func (s *UserMarketplacePurchase) GetFreeTrialEndsOn() NilDateTime {
	return s.FreeTrialEndsOn
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserMarketplacePurchase) GetUpdatedAt() NilDateTime {
	return s.UpdatedAt
}

// GetAccount returns the value of Account.
func (s *UserMarketplacePurchase) GetAccount() MarketplaceAccount {
	return s.Account
}

// GetPlan returns the value of Plan.
func (s *UserMarketplacePurchase) GetPlan() MarketplaceListingPlan {
	return s.Plan
}

// SetBillingCycle sets the value of BillingCycle.
func (s *UserMarketplacePurchase) SetBillingCycle(val string) {
	s.BillingCycle = val
}

// SetNextBillingDate sets the value of NextBillingDate.
func (s *UserMarketplacePurchase) SetNextBillingDate(val NilDateTime) {
	s.NextBillingDate = val
}

// SetUnitCount sets the value of UnitCount.
func (s *UserMarketplacePurchase) SetUnitCount(val NilInt) {
	s.UnitCount = val
}

// SetOnFreeTrial sets the value of OnFreeTrial.
func (s *UserMarketplacePurchase) SetOnFreeTrial(val bool) {
	s.OnFreeTrial = val
}

// SetFreeTrialEndsOn sets the value of FreeTrialEndsOn.
func (s *UserMarketplacePurchase) SetFreeTrialEndsOn(val NilDateTime) {
	s.FreeTrialEndsOn = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserMarketplacePurchase) SetUpdatedAt(val NilDateTime) {
	s.UpdatedAt = val
}

// SetAccount sets the value of Account.
func (s *UserMarketplacePurchase) SetAccount(val MarketplaceAccount) {
	s.Account = val
}

// SetPlan sets the value of Plan.
func (s *UserMarketplacePurchase) SetPlan(val MarketplaceListingPlan) {
	s.Plan = val
}

// User Search Result Item.
// Ref: #/components/schemas/user-search-result-item
type UserSearchResultItem struct {
	Login             string                   `json:"login"`
	ID                int                      `json:"id"`
	NodeID            string                   `json:"node_id"`
	AvatarURL         url.URL                  `json:"avatar_url"`
	GravatarID        NilString                `json:"gravatar_id"`
	URL               url.URL                  `json:"url"`
	HTMLURL           url.URL                  `json:"html_url"`
	FollowersURL      url.URL                  `json:"followers_url"`
	SubscriptionsURL  url.URL                  `json:"subscriptions_url"`
	OrganizationsURL  url.URL                  `json:"organizations_url"`
	ReposURL          url.URL                  `json:"repos_url"`
	ReceivedEventsURL url.URL                  `json:"received_events_url"`
	Type              string                   `json:"type"`
	Score             float64                  `json:"score"`
	FollowingURL      string                   `json:"following_url"`
	GistsURL          string                   `json:"gists_url"`
	StarredURL        string                   `json:"starred_url"`
	EventsURL         string                   `json:"events_url"`
	PublicRepos       OptInt                   `json:"public_repos"`
	PublicGists       OptInt                   `json:"public_gists"`
	Followers         OptInt                   `json:"followers"`
	Following         OptInt                   `json:"following"`
	CreatedAt         OptDateTime              `json:"created_at"`
	UpdatedAt         OptDateTime              `json:"updated_at"`
	Name              OptNilString             `json:"name"`
	Bio               OptNilString             `json:"bio"`
	Email             OptNilString             `json:"email"`
	Location          OptNilString             `json:"location"`
	SiteAdmin         bool                     `json:"site_admin"`
	Hireable          OptNilBool               `json:"hireable"`
	TextMatches       *SearchResultTextMatches `json:"text_matches"`
	Blog              OptNilString             `json:"blog"`
	Company           OptNilString             `json:"company"`
	SuspendedAt       OptNilDateTime           `json:"suspended_at"`
}

// GetLogin returns the value of Login.
func (s *UserSearchResultItem) GetLogin() string {
	return s.Login
}

// GetID returns the value of ID.
func (s *UserSearchResultItem) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *UserSearchResultItem) GetNodeID() string {
	return s.NodeID
}

// GetAvatarURL returns the value of AvatarURL.
func (s *UserSearchResultItem) GetAvatarURL() url.URL {
	return s.AvatarURL
}

// GetGravatarID returns the value of GravatarID.
func (s *UserSearchResultItem) GetGravatarID() NilString {
	return s.GravatarID
}

// GetURL returns the value of URL.
func (s *UserSearchResultItem) GetURL() url.URL {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *UserSearchResultItem) GetHTMLURL() url.URL {
	return s.HTMLURL
}

// GetFollowersURL returns the value of FollowersURL.
func (s *UserSearchResultItem) GetFollowersURL() url.URL {
	return s.FollowersURL
}

// GetSubscriptionsURL returns the value of SubscriptionsURL.
func (s *UserSearchResultItem) GetSubscriptionsURL() url.URL {
	return s.SubscriptionsURL
}

// GetOrganizationsURL returns the value of OrganizationsURL.
func (s *UserSearchResultItem) GetOrganizationsURL() url.URL {
	return s.OrganizationsURL
}

// GetReposURL returns the value of ReposURL.
func (s *UserSearchResultItem) GetReposURL() url.URL {
	return s.ReposURL
}

// GetReceivedEventsURL returns the value of ReceivedEventsURL.
func (s *UserSearchResultItem) GetReceivedEventsURL() url.URL {
	return s.ReceivedEventsURL
}

// GetType returns the value of Type.
func (s *UserSearchResultItem) GetType() string {
	return s.Type
}

// GetScore returns the value of Score.
func (s *UserSearchResultItem) GetScore() float64 {
	return s.Score
}

// GetFollowingURL returns the value of FollowingURL.
func (s *UserSearchResultItem) GetFollowingURL() string {
	return s.FollowingURL
}

// GetGistsURL returns the value of GistsURL.
func (s *UserSearchResultItem) GetGistsURL() string {
	return s.GistsURL
}

// GetStarredURL returns the value of StarredURL.
func (s *UserSearchResultItem) GetStarredURL() string {
	return s.StarredURL
}

// GetEventsURL returns the value of EventsURL.
func (s *UserSearchResultItem) GetEventsURL() string {
	return s.EventsURL
}

// GetPublicRepos returns the value of PublicRepos.
func (s *UserSearchResultItem) GetPublicRepos() OptInt {
	return s.PublicRepos
}

// GetPublicGists returns the value of PublicGists.
func (s *UserSearchResultItem) GetPublicGists() OptInt {
	return s.PublicGists
}

// GetFollowers returns the value of Followers.
func (s *UserSearchResultItem) GetFollowers() OptInt {
	return s.Followers
}

// GetFollowing returns the value of Following.
func (s *UserSearchResultItem) GetFollowing() OptInt {
	return s.Following
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserSearchResultItem) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserSearchResultItem) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *UserSearchResultItem) GetName() OptNilString {
	return s.Name
}

// GetBio returns the value of Bio.
func (s *UserSearchResultItem) GetBio() OptNilString {
	return s.Bio
}

// GetEmail returns the value of Email.
func (s *UserSearchResultItem) GetEmail() OptNilString {
	return s.Email
}

// GetLocation returns the value of Location.
func (s *UserSearchResultItem) GetLocation() OptNilString {
	return s.Location
}

// GetSiteAdmin returns the value of SiteAdmin.
func (s *UserSearchResultItem) GetSiteAdmin() bool {
	return s.SiteAdmin
}

// GetHireable returns the value of Hireable.
func (s *UserSearchResultItem) GetHireable() OptNilBool {
	return s.Hireable
}

// GetTextMatches returns the value of TextMatches.
func (s *UserSearchResultItem) GetTextMatches() *SearchResultTextMatches {
	return s.TextMatches
}

// GetBlog returns the value of Blog.
func (s *UserSearchResultItem) GetBlog() OptNilString {
	return s.Blog
}

// GetCompany returns the value of Company.
func (s *UserSearchResultItem) GetCompany() OptNilString {
	return s.Company
}

// GetSuspendedAt returns the value of SuspendedAt.
func (s *UserSearchResultItem) GetSuspendedAt() OptNilDateTime {
	return s.SuspendedAt
}

// SetLogin sets the value of Login.
func (s *UserSearchResultItem) SetLogin(val string) {
	s.Login = val
}

// SetID sets the value of ID.
func (s *UserSearchResultItem) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *UserSearchResultItem) SetNodeID(val string) {
	s.NodeID = val
}

// SetAvatarURL sets the value of AvatarURL.
func (s *UserSearchResultItem) SetAvatarURL(val url.URL) {
	s.AvatarURL = val
}

// SetGravatarID sets the value of GravatarID.
func (s *UserSearchResultItem) SetGravatarID(val NilString) {
	s.GravatarID = val
}

// SetURL sets the value of URL.
func (s *UserSearchResultItem) SetURL(val url.URL) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *UserSearchResultItem) SetHTMLURL(val url.URL) {
	s.HTMLURL = val
}

// SetFollowersURL sets the value of FollowersURL.
func (s *UserSearchResultItem) SetFollowersURL(val url.URL) {
	s.FollowersURL = val
}

// SetSubscriptionsURL sets the value of SubscriptionsURL.
func (s *UserSearchResultItem) SetSubscriptionsURL(val url.URL) {
	s.SubscriptionsURL = val
}

// SetOrganizationsURL sets the value of OrganizationsURL.
func (s *UserSearchResultItem) SetOrganizationsURL(val url.URL) {
	s.OrganizationsURL = val
}

// SetReposURL sets the value of ReposURL.
func (s *UserSearchResultItem) SetReposURL(val url.URL) {
	s.ReposURL = val
}

// SetReceivedEventsURL sets the value of ReceivedEventsURL.
func (s *UserSearchResultItem) SetReceivedEventsURL(val url.URL) {
	s.ReceivedEventsURL = val
}

// SetType sets the value of Type.
func (s *UserSearchResultItem) SetType(val string) {
	s.Type = val
}

// SetScore sets the value of Score.
func (s *UserSearchResultItem) SetScore(val float64) {
	s.Score = val
}

// SetFollowingURL sets the value of FollowingURL.
func (s *UserSearchResultItem) SetFollowingURL(val string) {
	s.FollowingURL = val
}

// SetGistsURL sets the value of GistsURL.
func (s *UserSearchResultItem) SetGistsURL(val string) {
	s.GistsURL = val
}

// SetStarredURL sets the value of StarredURL.
func (s *UserSearchResultItem) SetStarredURL(val string) {
	s.StarredURL = val
}

// SetEventsURL sets the value of EventsURL.
func (s *UserSearchResultItem) SetEventsURL(val string) {
	s.EventsURL = val
}

// SetPublicRepos sets the value of PublicRepos.
func (s *UserSearchResultItem) SetPublicRepos(val OptInt) {
	s.PublicRepos = val
}

// SetPublicGists sets the value of PublicGists.
func (s *UserSearchResultItem) SetPublicGists(val OptInt) {
	s.PublicGists = val
}

// SetFollowers sets the value of Followers.
func (s *UserSearchResultItem) SetFollowers(val OptInt) {
	s.Followers = val
}

// SetFollowing sets the value of Following.
func (s *UserSearchResultItem) SetFollowing(val OptInt) {
	s.Following = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserSearchResultItem) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserSearchResultItem) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *UserSearchResultItem) SetName(val OptNilString) {
	s.Name = val
}

// SetBio sets the value of Bio.
func (s *UserSearchResultItem) SetBio(val OptNilString) {
	s.Bio = val
}

// SetEmail sets the value of Email.
func (s *UserSearchResultItem) SetEmail(val OptNilString) {
	s.Email = val
}

// SetLocation sets the value of Location.
func (s *UserSearchResultItem) SetLocation(val OptNilString) {
	s.Location = val
}

// SetSiteAdmin sets the value of SiteAdmin.
func (s *UserSearchResultItem) SetSiteAdmin(val bool) {
	s.SiteAdmin = val
}

// SetHireable sets the value of Hireable.
func (s *UserSearchResultItem) SetHireable(val OptNilBool) {
	s.Hireable = val
}

// SetTextMatches sets the value of TextMatches.
func (s *UserSearchResultItem) SetTextMatches(val *SearchResultTextMatches) {
	s.TextMatches = val
}

// SetBlog sets the value of Blog.
func (s *UserSearchResultItem) SetBlog(val OptNilString) {
	s.Blog = val
}

// SetCompany sets the value of Company.
func (s *UserSearchResultItem) SetCompany(val OptNilString) {
	s.Company = val
}

// SetSuspendedAt sets the value of SuspendedAt.
func (s *UserSearchResultItem) SetSuspendedAt(val OptNilDateTime) {
	s.SuspendedAt = val
}

type UsersAddEmailForAuthenticatedCreatedApplicationJSON []Email

func (*UsersAddEmailForAuthenticatedCreatedApplicationJSON) usersAddEmailForAuthenticatedRes() {}

type UsersAddEmailForAuthenticatedForbidden BasicError

func (*UsersAddEmailForAuthenticatedForbidden) usersAddEmailForAuthenticatedRes() {}

type UsersAddEmailForAuthenticatedNotFound BasicError

func (*UsersAddEmailForAuthenticatedNotFound) usersAddEmailForAuthenticatedRes() {}

// UsersAddEmailForAuthenticatedReq represents sum type.
type UsersAddEmailForAuthenticatedReq struct {
	Type                              UsersAddEmailForAuthenticatedReqType // switch on this field
	UsersAddEmailForAuthenticatedReq0 UsersAddEmailForAuthenticatedReq0
	StringArray                       []string
	String                            string
}

// UsersAddEmailForAuthenticatedReqType is oneOf type of UsersAddEmailForAuthenticatedReq.
type UsersAddEmailForAuthenticatedReqType string

// Possible values for UsersAddEmailForAuthenticatedReqType.
const (
	UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq UsersAddEmailForAuthenticatedReqType = "UsersAddEmailForAuthenticatedReq0"
	StringArrayUsersAddEmailForAuthenticatedReq                       UsersAddEmailForAuthenticatedReqType = "[]string"
	StringUsersAddEmailForAuthenticatedReq                            UsersAddEmailForAuthenticatedReqType = "string"
)

// IsUsersAddEmailForAuthenticatedReq0 reports whether UsersAddEmailForAuthenticatedReq is UsersAddEmailForAuthenticatedReq0.
func (s UsersAddEmailForAuthenticatedReq) IsUsersAddEmailForAuthenticatedReq0() bool {
	return s.Type == UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq
}

// IsStringArray reports whether UsersAddEmailForAuthenticatedReq is []string.
func (s UsersAddEmailForAuthenticatedReq) IsStringArray() bool {
	return s.Type == StringArrayUsersAddEmailForAuthenticatedReq
}

// IsString reports whether UsersAddEmailForAuthenticatedReq is string.
func (s UsersAddEmailForAuthenticatedReq) IsString() bool {
	return s.Type == StringUsersAddEmailForAuthenticatedReq
}

// SetUsersAddEmailForAuthenticatedReq0 sets UsersAddEmailForAuthenticatedReq to UsersAddEmailForAuthenticatedReq0.
func (s *UsersAddEmailForAuthenticatedReq) SetUsersAddEmailForAuthenticatedReq0(v UsersAddEmailForAuthenticatedReq0) {
	s.Type = UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq
	s.UsersAddEmailForAuthenticatedReq0 = v
}

// GetUsersAddEmailForAuthenticatedReq0 returns UsersAddEmailForAuthenticatedReq0 and true boolean if UsersAddEmailForAuthenticatedReq is UsersAddEmailForAuthenticatedReq0.
func (s UsersAddEmailForAuthenticatedReq) GetUsersAddEmailForAuthenticatedReq0() (v UsersAddEmailForAuthenticatedReq0, ok bool) {
	if !s.IsUsersAddEmailForAuthenticatedReq0() {
		return v, false
	}
	return s.UsersAddEmailForAuthenticatedReq0, true
}

// NewUsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq returns new UsersAddEmailForAuthenticatedReq from UsersAddEmailForAuthenticatedReq0.
func NewUsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq(v UsersAddEmailForAuthenticatedReq0) UsersAddEmailForAuthenticatedReq {
	var s UsersAddEmailForAuthenticatedReq
	s.SetUsersAddEmailForAuthenticatedReq0(v)
	return s
}

// SetStringArray sets UsersAddEmailForAuthenticatedReq to []string.
func (s *UsersAddEmailForAuthenticatedReq) SetStringArray(v []string) {
	s.Type = StringArrayUsersAddEmailForAuthenticatedReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UsersAddEmailForAuthenticatedReq is []string.
func (s UsersAddEmailForAuthenticatedReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUsersAddEmailForAuthenticatedReq returns new UsersAddEmailForAuthenticatedReq from []string.
func NewStringArrayUsersAddEmailForAuthenticatedReq(v []string) UsersAddEmailForAuthenticatedReq {
	var s UsersAddEmailForAuthenticatedReq
	s.SetStringArray(v)
	return s
}

// SetString sets UsersAddEmailForAuthenticatedReq to string.
func (s *UsersAddEmailForAuthenticatedReq) SetString(v string) {
	s.Type = StringUsersAddEmailForAuthenticatedReq
	s.String = v
}

// GetString returns string and true boolean if UsersAddEmailForAuthenticatedReq is string.
func (s UsersAddEmailForAuthenticatedReq) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUsersAddEmailForAuthenticatedReq returns new UsersAddEmailForAuthenticatedReq from string.
func NewStringUsersAddEmailForAuthenticatedReq(v string) UsersAddEmailForAuthenticatedReq {
	var s UsersAddEmailForAuthenticatedReq
	s.SetString(v)
	return s
}

type UsersAddEmailForAuthenticatedReq0 struct {
	// Adds one or more email addresses to your GitHub account. Must contain at least one email address.
	// **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses
	// directly, but we recommend that you pass an object using the `emails` key.
	Emails []string `json:"emails"`
}

// GetEmails returns the value of Emails.
func (s *UsersAddEmailForAuthenticatedReq0) GetEmails() []string {
	return s.Emails
}

// SetEmails sets the value of Emails.
func (s *UsersAddEmailForAuthenticatedReq0) SetEmails(val []string) {
	s.Emails = val
}

type UsersAddEmailForAuthenticatedUnauthorized BasicError

func (*UsersAddEmailForAuthenticatedUnauthorized) usersAddEmailForAuthenticatedRes() {}

type UsersBlockForbidden BasicError

func (*UsersBlockForbidden) usersBlockRes() {}

// UsersBlockNoContent is response for UsersBlock operation.
type UsersBlockNoContent struct{}

func (*UsersBlockNoContent) usersBlockRes() {}

type UsersBlockNotFound BasicError

func (*UsersBlockNotFound) usersBlockRes() {}

type UsersBlockUnauthorized BasicError

func (*UsersBlockUnauthorized) usersBlockRes() {}

type UsersCheckBlockedForbidden BasicError

func (*UsersCheckBlockedForbidden) usersCheckBlockedRes() {}

// UsersCheckBlockedNoContent is response for UsersCheckBlocked operation.
type UsersCheckBlockedNoContent struct{}

func (*UsersCheckBlockedNoContent) usersCheckBlockedRes() {}

type UsersCheckBlockedNotFound BasicError

func (*UsersCheckBlockedNotFound) usersCheckBlockedRes() {}

type UsersCheckBlockedUnauthorized BasicError

func (*UsersCheckBlockedUnauthorized) usersCheckBlockedRes() {}

// UsersCheckFollowingForUserNoContent is response for UsersCheckFollowingForUser operation.
type UsersCheckFollowingForUserNoContent struct{}

func (*UsersCheckFollowingForUserNoContent) usersCheckFollowingForUserRes() {}

// UsersCheckFollowingForUserNotFound is response for UsersCheckFollowingForUser operation.
type UsersCheckFollowingForUserNotFound struct{}

func (*UsersCheckFollowingForUserNotFound) usersCheckFollowingForUserRes() {}

type UsersCheckPersonIsFollowedByAuthenticatedForbidden BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedForbidden) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

// UsersCheckPersonIsFollowedByAuthenticatedNoContent is response for UsersCheckPersonIsFollowedByAuthenticated operation.
type UsersCheckPersonIsFollowedByAuthenticatedNoContent struct{}

func (*UsersCheckPersonIsFollowedByAuthenticatedNoContent) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

type UsersCheckPersonIsFollowedByAuthenticatedNotFound BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedNotFound) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

type UsersCheckPersonIsFollowedByAuthenticatedUnauthorized BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedUnauthorized) usersCheckPersonIsFollowedByAuthenticatedRes() {
}

type UsersCreateGpgKeyForAuthenticatedForbidden BasicError

func (*UsersCreateGpgKeyForAuthenticatedForbidden) usersCreateGpgKeyForAuthenticatedRes() {}

type UsersCreateGpgKeyForAuthenticatedNotFound BasicError

func (*UsersCreateGpgKeyForAuthenticatedNotFound) usersCreateGpgKeyForAuthenticatedRes() {}

type UsersCreateGpgKeyForAuthenticatedReq struct {
	// A GPG key in ASCII-armored format.
	ArmoredPublicKey string `json:"armored_public_key"`
}

// GetArmoredPublicKey returns the value of ArmoredPublicKey.
func (s *UsersCreateGpgKeyForAuthenticatedReq) GetArmoredPublicKey() string {
	return s.ArmoredPublicKey
}

// SetArmoredPublicKey sets the value of ArmoredPublicKey.
func (s *UsersCreateGpgKeyForAuthenticatedReq) SetArmoredPublicKey(val string) {
	s.ArmoredPublicKey = val
}

type UsersCreateGpgKeyForAuthenticatedUnauthorized BasicError

func (*UsersCreateGpgKeyForAuthenticatedUnauthorized) usersCreateGpgKeyForAuthenticatedRes() {}

type UsersCreatePublicSSHKeyForAuthenticatedForbidden BasicError

func (*UsersCreatePublicSSHKeyForAuthenticatedForbidden) usersCreatePublicSSHKeyForAuthenticatedRes() {
}

type UsersCreatePublicSSHKeyForAuthenticatedNotFound BasicError

func (*UsersCreatePublicSSHKeyForAuthenticatedNotFound) usersCreatePublicSSHKeyForAuthenticatedRes() {
}

type UsersCreatePublicSSHKeyForAuthenticatedReq struct {
	// A descriptive name for the new key.
	Title OptString `json:"title"`
	// The public SSH key to add to your GitHub account.
	Key string `json:"key"`
}

// GetTitle returns the value of Title.
func (s *UsersCreatePublicSSHKeyForAuthenticatedReq) GetTitle() OptString {
	return s.Title
}

// GetKey returns the value of Key.
func (s *UsersCreatePublicSSHKeyForAuthenticatedReq) GetKey() string {
	return s.Key
}

// SetTitle sets the value of Title.
func (s *UsersCreatePublicSSHKeyForAuthenticatedReq) SetTitle(val OptString) {
	s.Title = val
}

// SetKey sets the value of Key.
func (s *UsersCreatePublicSSHKeyForAuthenticatedReq) SetKey(val string) {
	s.Key = val
}

type UsersCreatePublicSSHKeyForAuthenticatedUnauthorized BasicError

func (*UsersCreatePublicSSHKeyForAuthenticatedUnauthorized) usersCreatePublicSSHKeyForAuthenticatedRes() {
}

type UsersDeleteEmailForAuthenticatedForbidden BasicError

func (*UsersDeleteEmailForAuthenticatedForbidden) usersDeleteEmailForAuthenticatedRes() {}

// UsersDeleteEmailForAuthenticatedNoContent is response for UsersDeleteEmailForAuthenticated operation.
type UsersDeleteEmailForAuthenticatedNoContent struct{}

func (*UsersDeleteEmailForAuthenticatedNoContent) usersDeleteEmailForAuthenticatedRes() {}

type UsersDeleteEmailForAuthenticatedNotFound BasicError

func (*UsersDeleteEmailForAuthenticatedNotFound) usersDeleteEmailForAuthenticatedRes() {}

// UsersDeleteEmailForAuthenticatedReq represents sum type.
type UsersDeleteEmailForAuthenticatedReq struct {
	Type                                 UsersDeleteEmailForAuthenticatedReqType // switch on this field
	UsersDeleteEmailForAuthenticatedReq0 UsersDeleteEmailForAuthenticatedReq0
	StringArray                          []string
	String                               string
}

// UsersDeleteEmailForAuthenticatedReqType is oneOf type of UsersDeleteEmailForAuthenticatedReq.
type UsersDeleteEmailForAuthenticatedReqType string

// Possible values for UsersDeleteEmailForAuthenticatedReqType.
const (
	UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq UsersDeleteEmailForAuthenticatedReqType = "UsersDeleteEmailForAuthenticatedReq0"
	StringArrayUsersDeleteEmailForAuthenticatedReq                          UsersDeleteEmailForAuthenticatedReqType = "[]string"
	StringUsersDeleteEmailForAuthenticatedReq                               UsersDeleteEmailForAuthenticatedReqType = "string"
)

// IsUsersDeleteEmailForAuthenticatedReq0 reports whether UsersDeleteEmailForAuthenticatedReq is UsersDeleteEmailForAuthenticatedReq0.
func (s UsersDeleteEmailForAuthenticatedReq) IsUsersDeleteEmailForAuthenticatedReq0() bool {
	return s.Type == UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq
}

// IsStringArray reports whether UsersDeleteEmailForAuthenticatedReq is []string.
func (s UsersDeleteEmailForAuthenticatedReq) IsStringArray() bool {
	return s.Type == StringArrayUsersDeleteEmailForAuthenticatedReq
}

// IsString reports whether UsersDeleteEmailForAuthenticatedReq is string.
func (s UsersDeleteEmailForAuthenticatedReq) IsString() bool {
	return s.Type == StringUsersDeleteEmailForAuthenticatedReq
}

// SetUsersDeleteEmailForAuthenticatedReq0 sets UsersDeleteEmailForAuthenticatedReq to UsersDeleteEmailForAuthenticatedReq0.
func (s *UsersDeleteEmailForAuthenticatedReq) SetUsersDeleteEmailForAuthenticatedReq0(v UsersDeleteEmailForAuthenticatedReq0) {
	s.Type = UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq
	s.UsersDeleteEmailForAuthenticatedReq0 = v
}

// GetUsersDeleteEmailForAuthenticatedReq0 returns UsersDeleteEmailForAuthenticatedReq0 and true boolean if UsersDeleteEmailForAuthenticatedReq is UsersDeleteEmailForAuthenticatedReq0.
func (s UsersDeleteEmailForAuthenticatedReq) GetUsersDeleteEmailForAuthenticatedReq0() (v UsersDeleteEmailForAuthenticatedReq0, ok bool) {
	if !s.IsUsersDeleteEmailForAuthenticatedReq0() {
		return v, false
	}
	return s.UsersDeleteEmailForAuthenticatedReq0, true
}

// NewUsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq returns new UsersDeleteEmailForAuthenticatedReq from UsersDeleteEmailForAuthenticatedReq0.
func NewUsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq(v UsersDeleteEmailForAuthenticatedReq0) UsersDeleteEmailForAuthenticatedReq {
	var s UsersDeleteEmailForAuthenticatedReq
	s.SetUsersDeleteEmailForAuthenticatedReq0(v)
	return s
}

// SetStringArray sets UsersDeleteEmailForAuthenticatedReq to []string.
func (s *UsersDeleteEmailForAuthenticatedReq) SetStringArray(v []string) {
	s.Type = StringArrayUsersDeleteEmailForAuthenticatedReq
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if UsersDeleteEmailForAuthenticatedReq is []string.
func (s UsersDeleteEmailForAuthenticatedReq) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayUsersDeleteEmailForAuthenticatedReq returns new UsersDeleteEmailForAuthenticatedReq from []string.
func NewStringArrayUsersDeleteEmailForAuthenticatedReq(v []string) UsersDeleteEmailForAuthenticatedReq {
	var s UsersDeleteEmailForAuthenticatedReq
	s.SetStringArray(v)
	return s
}

// SetString sets UsersDeleteEmailForAuthenticatedReq to string.
func (s *UsersDeleteEmailForAuthenticatedReq) SetString(v string) {
	s.Type = StringUsersDeleteEmailForAuthenticatedReq
	s.String = v
}

// GetString returns string and true boolean if UsersDeleteEmailForAuthenticatedReq is string.
func (s UsersDeleteEmailForAuthenticatedReq) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringUsersDeleteEmailForAuthenticatedReq returns new UsersDeleteEmailForAuthenticatedReq from string.
func NewStringUsersDeleteEmailForAuthenticatedReq(v string) UsersDeleteEmailForAuthenticatedReq {
	var s UsersDeleteEmailForAuthenticatedReq
	s.SetString(v)
	return s
}

// Deletes one or more email addresses from your GitHub account. Must contain at least one email
// address. **Note:** Alternatively, you can pass a single email address or an `array` of emails
// addresses directly, but we recommend that you pass an object using the `emails` key.
type UsersDeleteEmailForAuthenticatedReq0 struct {
	// Email addresses associated with the GitHub user account.
	Emails []string `json:"emails"`
}

// GetEmails returns the value of Emails.
func (s *UsersDeleteEmailForAuthenticatedReq0) GetEmails() []string {
	return s.Emails
}

// SetEmails sets the value of Emails.
func (s *UsersDeleteEmailForAuthenticatedReq0) SetEmails(val []string) {
	s.Emails = val
}

type UsersDeleteEmailForAuthenticatedUnauthorized BasicError

func (*UsersDeleteEmailForAuthenticatedUnauthorized) usersDeleteEmailForAuthenticatedRes() {}

type UsersDeleteGpgKeyForAuthenticatedForbidden BasicError

func (*UsersDeleteGpgKeyForAuthenticatedForbidden) usersDeleteGpgKeyForAuthenticatedRes() {}

// UsersDeleteGpgKeyForAuthenticatedNoContent is response for UsersDeleteGpgKeyForAuthenticated operation.
type UsersDeleteGpgKeyForAuthenticatedNoContent struct{}

func (*UsersDeleteGpgKeyForAuthenticatedNoContent) usersDeleteGpgKeyForAuthenticatedRes() {}

type UsersDeleteGpgKeyForAuthenticatedNotFound BasicError

func (*UsersDeleteGpgKeyForAuthenticatedNotFound) usersDeleteGpgKeyForAuthenticatedRes() {}

type UsersDeleteGpgKeyForAuthenticatedUnauthorized BasicError

func (*UsersDeleteGpgKeyForAuthenticatedUnauthorized) usersDeleteGpgKeyForAuthenticatedRes() {}

type UsersDeletePublicSSHKeyForAuthenticatedForbidden BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedForbidden) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

// UsersDeletePublicSSHKeyForAuthenticatedNoContent is response for UsersDeletePublicSSHKeyForAuthenticated operation.
type UsersDeletePublicSSHKeyForAuthenticatedNoContent struct{}

func (*UsersDeletePublicSSHKeyForAuthenticatedNoContent) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

type UsersDeletePublicSSHKeyForAuthenticatedNotFound BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedNotFound) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

type UsersDeletePublicSSHKeyForAuthenticatedUnauthorized BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedUnauthorized) usersDeletePublicSSHKeyForAuthenticatedRes() {
}

type UsersFollowForbidden BasicError

func (*UsersFollowForbidden) usersFollowRes() {}

// UsersFollowNoContent is response for UsersFollow operation.
type UsersFollowNoContent struct{}

func (*UsersFollowNoContent) usersFollowRes() {}

type UsersFollowNotFound BasicError

func (*UsersFollowNotFound) usersFollowRes() {}

type UsersFollowUnauthorized BasicError

func (*UsersFollowUnauthorized) usersFollowRes() {}

type UsersGetAuthenticatedForbidden BasicError

func (*UsersGetAuthenticatedForbidden) usersGetAuthenticatedRes() {}

// UsersGetAuthenticatedOK represents sum type.
type UsersGetAuthenticatedOK struct {
	Type        UsersGetAuthenticatedOKType // switch on this field
	PrivateUser PrivateUser
	PublicUser  PublicUser
}

// UsersGetAuthenticatedOKType is oneOf type of UsersGetAuthenticatedOK.
type UsersGetAuthenticatedOKType string

// Possible values for UsersGetAuthenticatedOKType.
const (
	PrivateUserUsersGetAuthenticatedOK UsersGetAuthenticatedOKType = "PrivateUser"
	PublicUserUsersGetAuthenticatedOK  UsersGetAuthenticatedOKType = "PublicUser"
)

// IsPrivateUser reports whether UsersGetAuthenticatedOK is PrivateUser.
func (s UsersGetAuthenticatedOK) IsPrivateUser() bool {
	return s.Type == PrivateUserUsersGetAuthenticatedOK
}

// IsPublicUser reports whether UsersGetAuthenticatedOK is PublicUser.
func (s UsersGetAuthenticatedOK) IsPublicUser() bool {
	return s.Type == PublicUserUsersGetAuthenticatedOK
}

// SetPrivateUser sets UsersGetAuthenticatedOK to PrivateUser.
func (s *UsersGetAuthenticatedOK) SetPrivateUser(v PrivateUser) {
	s.Type = PrivateUserUsersGetAuthenticatedOK
	s.PrivateUser = v
}

// GetPrivateUser returns PrivateUser and true boolean if UsersGetAuthenticatedOK is PrivateUser.
func (s UsersGetAuthenticatedOK) GetPrivateUser() (v PrivateUser, ok bool) {
	if !s.IsPrivateUser() {
		return v, false
	}
	return s.PrivateUser, true
}

// NewPrivateUserUsersGetAuthenticatedOK returns new UsersGetAuthenticatedOK from PrivateUser.
func NewPrivateUserUsersGetAuthenticatedOK(v PrivateUser) UsersGetAuthenticatedOK {
	var s UsersGetAuthenticatedOK
	s.SetPrivateUser(v)
	return s
}

// SetPublicUser sets UsersGetAuthenticatedOK to PublicUser.
func (s *UsersGetAuthenticatedOK) SetPublicUser(v PublicUser) {
	s.Type = PublicUserUsersGetAuthenticatedOK
	s.PublicUser = v
}

// GetPublicUser returns PublicUser and true boolean if UsersGetAuthenticatedOK is PublicUser.
func (s UsersGetAuthenticatedOK) GetPublicUser() (v PublicUser, ok bool) {
	if !s.IsPublicUser() {
		return v, false
	}
	return s.PublicUser, true
}

// NewPublicUserUsersGetAuthenticatedOK returns new UsersGetAuthenticatedOK from PublicUser.
func NewPublicUserUsersGetAuthenticatedOK(v PublicUser) UsersGetAuthenticatedOK {
	var s UsersGetAuthenticatedOK
	s.SetPublicUser(v)
	return s
}

func (*UsersGetAuthenticatedOK) usersGetAuthenticatedRes() {}

type UsersGetAuthenticatedUnauthorized BasicError

func (*UsersGetAuthenticatedUnauthorized) usersGetAuthenticatedRes() {}

// UsersGetByUsernameOK represents sum type.
type UsersGetByUsernameOK struct {
	Type        UsersGetByUsernameOKType // switch on this field
	PrivateUser PrivateUser
	PublicUser  PublicUser
}

// UsersGetByUsernameOKType is oneOf type of UsersGetByUsernameOK.
type UsersGetByUsernameOKType string

// Possible values for UsersGetByUsernameOKType.
const (
	PrivateUserUsersGetByUsernameOK UsersGetByUsernameOKType = "PrivateUser"
	PublicUserUsersGetByUsernameOK  UsersGetByUsernameOKType = "PublicUser"
)

// IsPrivateUser reports whether UsersGetByUsernameOK is PrivateUser.
func (s UsersGetByUsernameOK) IsPrivateUser() bool { return s.Type == PrivateUserUsersGetByUsernameOK }

// IsPublicUser reports whether UsersGetByUsernameOK is PublicUser.
func (s UsersGetByUsernameOK) IsPublicUser() bool { return s.Type == PublicUserUsersGetByUsernameOK }

// SetPrivateUser sets UsersGetByUsernameOK to PrivateUser.
func (s *UsersGetByUsernameOK) SetPrivateUser(v PrivateUser) {
	s.Type = PrivateUserUsersGetByUsernameOK
	s.PrivateUser = v
}

// GetPrivateUser returns PrivateUser and true boolean if UsersGetByUsernameOK is PrivateUser.
func (s UsersGetByUsernameOK) GetPrivateUser() (v PrivateUser, ok bool) {
	if !s.IsPrivateUser() {
		return v, false
	}
	return s.PrivateUser, true
}

// NewPrivateUserUsersGetByUsernameOK returns new UsersGetByUsernameOK from PrivateUser.
func NewPrivateUserUsersGetByUsernameOK(v PrivateUser) UsersGetByUsernameOK {
	var s UsersGetByUsernameOK
	s.SetPrivateUser(v)
	return s
}

// SetPublicUser sets UsersGetByUsernameOK to PublicUser.
func (s *UsersGetByUsernameOK) SetPublicUser(v PublicUser) {
	s.Type = PublicUserUsersGetByUsernameOK
	s.PublicUser = v
}

// GetPublicUser returns PublicUser and true boolean if UsersGetByUsernameOK is PublicUser.
func (s UsersGetByUsernameOK) GetPublicUser() (v PublicUser, ok bool) {
	if !s.IsPublicUser() {
		return v, false
	}
	return s.PublicUser, true
}

// NewPublicUserUsersGetByUsernameOK returns new UsersGetByUsernameOK from PublicUser.
func NewPublicUserUsersGetByUsernameOK(v PublicUser) UsersGetByUsernameOK {
	var s UsersGetByUsernameOK
	s.SetPublicUser(v)
	return s
}

func (*UsersGetByUsernameOK) usersGetByUsernameRes() {}

type UsersGetContextForUserSubjectType string

const (
	UsersGetContextForUserSubjectTypeOrganization UsersGetContextForUserSubjectType = "organization"
	UsersGetContextForUserSubjectTypeRepository   UsersGetContextForUserSubjectType = "repository"
	UsersGetContextForUserSubjectTypeIssue        UsersGetContextForUserSubjectType = "issue"
	UsersGetContextForUserSubjectTypePullRequest  UsersGetContextForUserSubjectType = "pull_request"
)

// MarshalText implements encoding.TextMarshaler.
func (s UsersGetContextForUserSubjectType) MarshalText() ([]byte, error) {
	switch s {
	case UsersGetContextForUserSubjectTypeOrganization:
		return []byte(s), nil
	case UsersGetContextForUserSubjectTypeRepository:
		return []byte(s), nil
	case UsersGetContextForUserSubjectTypeIssue:
		return []byte(s), nil
	case UsersGetContextForUserSubjectTypePullRequest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UsersGetContextForUserSubjectType) UnmarshalText(data []byte) error {
	switch UsersGetContextForUserSubjectType(data) {
	case UsersGetContextForUserSubjectTypeOrganization:
		*s = UsersGetContextForUserSubjectTypeOrganization
		return nil
	case UsersGetContextForUserSubjectTypeRepository:
		*s = UsersGetContextForUserSubjectTypeRepository
		return nil
	case UsersGetContextForUserSubjectTypeIssue:
		*s = UsersGetContextForUserSubjectTypeIssue
		return nil
	case UsersGetContextForUserSubjectTypePullRequest:
		*s = UsersGetContextForUserSubjectTypePullRequest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UsersGetGpgKeyForAuthenticatedForbidden BasicError

func (*UsersGetGpgKeyForAuthenticatedForbidden) usersGetGpgKeyForAuthenticatedRes() {}

type UsersGetGpgKeyForAuthenticatedNotFound BasicError

func (*UsersGetGpgKeyForAuthenticatedNotFound) usersGetGpgKeyForAuthenticatedRes() {}

type UsersGetGpgKeyForAuthenticatedUnauthorized BasicError

func (*UsersGetGpgKeyForAuthenticatedUnauthorized) usersGetGpgKeyForAuthenticatedRes() {}

type UsersGetPublicSSHKeyForAuthenticatedForbidden BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedForbidden) usersGetPublicSSHKeyForAuthenticatedRes() {}

type UsersGetPublicSSHKeyForAuthenticatedNotFound BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedNotFound) usersGetPublicSSHKeyForAuthenticatedRes() {}

type UsersGetPublicSSHKeyForAuthenticatedUnauthorized BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedUnauthorized) usersGetPublicSSHKeyForAuthenticatedRes() {}

type UsersListBlockedByAuthenticatedForbidden BasicError

func (*UsersListBlockedByAuthenticatedForbidden) usersListBlockedByAuthenticatedRes() {}

type UsersListBlockedByAuthenticatedNotFound BasicError

func (*UsersListBlockedByAuthenticatedNotFound) usersListBlockedByAuthenticatedRes() {}

type UsersListBlockedByAuthenticatedOKApplicationJSON []SimpleUser

func (*UsersListBlockedByAuthenticatedOKApplicationJSON) usersListBlockedByAuthenticatedRes() {}

type UsersListBlockedByAuthenticatedUnauthorized BasicError

func (*UsersListBlockedByAuthenticatedUnauthorized) usersListBlockedByAuthenticatedRes() {}

type UsersListEmailsForAuthenticatedForbidden BasicError

func (*UsersListEmailsForAuthenticatedForbidden) usersListEmailsForAuthenticatedRes() {}

type UsersListEmailsForAuthenticatedNotFound BasicError

func (*UsersListEmailsForAuthenticatedNotFound) usersListEmailsForAuthenticatedRes() {}

// UsersListEmailsForAuthenticatedOKHeaders wraps []Email with response headers.
type UsersListEmailsForAuthenticatedOKHeaders struct {
	Link     OptString
	Response []Email
}

// GetLink returns the value of Link.
func (s *UsersListEmailsForAuthenticatedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListEmailsForAuthenticatedOKHeaders) GetResponse() []Email {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListEmailsForAuthenticatedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListEmailsForAuthenticatedOKHeaders) SetResponse(val []Email) {
	s.Response = val
}

func (*UsersListEmailsForAuthenticatedOKHeaders) usersListEmailsForAuthenticatedRes() {}

type UsersListEmailsForAuthenticatedUnauthorized BasicError

func (*UsersListEmailsForAuthenticatedUnauthorized) usersListEmailsForAuthenticatedRes() {}

type UsersListFollowedByAuthenticatedForbidden BasicError

func (*UsersListFollowedByAuthenticatedForbidden) usersListFollowedByAuthenticatedRes() {}

// UsersListFollowedByAuthenticatedOKHeaders wraps []SimpleUser with response headers.
type UsersListFollowedByAuthenticatedOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *UsersListFollowedByAuthenticatedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListFollowedByAuthenticatedOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListFollowedByAuthenticatedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListFollowedByAuthenticatedOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*UsersListFollowedByAuthenticatedOKHeaders) usersListFollowedByAuthenticatedRes() {}

type UsersListFollowedByAuthenticatedUnauthorized BasicError

func (*UsersListFollowedByAuthenticatedUnauthorized) usersListFollowedByAuthenticatedRes() {}

type UsersListFollowersForAuthenticatedUserForbidden BasicError

func (*UsersListFollowersForAuthenticatedUserForbidden) usersListFollowersForAuthenticatedUserRes() {}

// UsersListFollowersForAuthenticatedUserOKHeaders wraps []SimpleUser with response headers.
type UsersListFollowersForAuthenticatedUserOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *UsersListFollowersForAuthenticatedUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListFollowersForAuthenticatedUserOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListFollowersForAuthenticatedUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListFollowersForAuthenticatedUserOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*UsersListFollowersForAuthenticatedUserOKHeaders) usersListFollowersForAuthenticatedUserRes() {}

type UsersListFollowersForAuthenticatedUserUnauthorized BasicError

func (*UsersListFollowersForAuthenticatedUserUnauthorized) usersListFollowersForAuthenticatedUserRes() {
}

// UsersListFollowersForUserOKHeaders wraps []SimpleUser with response headers.
type UsersListFollowersForUserOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *UsersListFollowersForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListFollowersForUserOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListFollowersForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListFollowersForUserOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

// UsersListFollowingForUserOKHeaders wraps []SimpleUser with response headers.
type UsersListFollowingForUserOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *UsersListFollowingForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListFollowingForUserOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListFollowingForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListFollowingForUserOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

type UsersListGpgKeysForAuthenticatedForbidden BasicError

func (*UsersListGpgKeysForAuthenticatedForbidden) usersListGpgKeysForAuthenticatedRes() {}

type UsersListGpgKeysForAuthenticatedNotFound BasicError

func (*UsersListGpgKeysForAuthenticatedNotFound) usersListGpgKeysForAuthenticatedRes() {}

// UsersListGpgKeysForAuthenticatedOKHeaders wraps []GpgKey with response headers.
type UsersListGpgKeysForAuthenticatedOKHeaders struct {
	Link     OptString
	Response []GpgKey
}

// GetLink returns the value of Link.
func (s *UsersListGpgKeysForAuthenticatedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListGpgKeysForAuthenticatedOKHeaders) GetResponse() []GpgKey {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListGpgKeysForAuthenticatedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListGpgKeysForAuthenticatedOKHeaders) SetResponse(val []GpgKey) {
	s.Response = val
}

func (*UsersListGpgKeysForAuthenticatedOKHeaders) usersListGpgKeysForAuthenticatedRes() {}

type UsersListGpgKeysForAuthenticatedUnauthorized BasicError

func (*UsersListGpgKeysForAuthenticatedUnauthorized) usersListGpgKeysForAuthenticatedRes() {}

// UsersListGpgKeysForUserOKHeaders wraps []GpgKey with response headers.
type UsersListGpgKeysForUserOKHeaders struct {
	Link     OptString
	Response []GpgKey
}

// GetLink returns the value of Link.
func (s *UsersListGpgKeysForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListGpgKeysForUserOKHeaders) GetResponse() []GpgKey {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListGpgKeysForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListGpgKeysForUserOKHeaders) SetResponse(val []GpgKey) {
	s.Response = val
}

// UsersListOKHeaders wraps []SimpleUser with response headers.
type UsersListOKHeaders struct {
	Link     OptString
	Response []SimpleUser
}

// GetLink returns the value of Link.
func (s *UsersListOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListOKHeaders) GetResponse() []SimpleUser {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListOKHeaders) SetResponse(val []SimpleUser) {
	s.Response = val
}

func (*UsersListOKHeaders) usersListRes() {}

type UsersListPublicEmailsForAuthenticatedForbidden BasicError

func (*UsersListPublicEmailsForAuthenticatedForbidden) usersListPublicEmailsForAuthenticatedRes() {}

type UsersListPublicEmailsForAuthenticatedNotFound BasicError

func (*UsersListPublicEmailsForAuthenticatedNotFound) usersListPublicEmailsForAuthenticatedRes() {}

// UsersListPublicEmailsForAuthenticatedOKHeaders wraps []Email with response headers.
type UsersListPublicEmailsForAuthenticatedOKHeaders struct {
	Link     OptString
	Response []Email
}

// GetLink returns the value of Link.
func (s *UsersListPublicEmailsForAuthenticatedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListPublicEmailsForAuthenticatedOKHeaders) GetResponse() []Email {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListPublicEmailsForAuthenticatedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListPublicEmailsForAuthenticatedOKHeaders) SetResponse(val []Email) {
	s.Response = val
}

func (*UsersListPublicEmailsForAuthenticatedOKHeaders) usersListPublicEmailsForAuthenticatedRes() {}

type UsersListPublicEmailsForAuthenticatedUnauthorized BasicError

func (*UsersListPublicEmailsForAuthenticatedUnauthorized) usersListPublicEmailsForAuthenticatedRes() {
}

// UsersListPublicKeysForUserOKHeaders wraps []KeySimple with response headers.
type UsersListPublicKeysForUserOKHeaders struct {
	Link     OptString
	Response []KeySimple
}

// GetLink returns the value of Link.
func (s *UsersListPublicKeysForUserOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListPublicKeysForUserOKHeaders) GetResponse() []KeySimple {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListPublicKeysForUserOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListPublicKeysForUserOKHeaders) SetResponse(val []KeySimple) {
	s.Response = val
}

type UsersListPublicSSHKeysForAuthenticatedForbidden BasicError

func (*UsersListPublicSSHKeysForAuthenticatedForbidden) usersListPublicSSHKeysForAuthenticatedRes() {}

type UsersListPublicSSHKeysForAuthenticatedNotFound BasicError

func (*UsersListPublicSSHKeysForAuthenticatedNotFound) usersListPublicSSHKeysForAuthenticatedRes() {}

// UsersListPublicSSHKeysForAuthenticatedOKHeaders wraps []Key with response headers.
type UsersListPublicSSHKeysForAuthenticatedOKHeaders struct {
	Link     OptString
	Response []Key
}

// GetLink returns the value of Link.
func (s *UsersListPublicSSHKeysForAuthenticatedOKHeaders) GetLink() OptString {
	return s.Link
}

// GetResponse returns the value of Response.
func (s *UsersListPublicSSHKeysForAuthenticatedOKHeaders) GetResponse() []Key {
	return s.Response
}

// SetLink sets the value of Link.
func (s *UsersListPublicSSHKeysForAuthenticatedOKHeaders) SetLink(val OptString) {
	s.Link = val
}

// SetResponse sets the value of Response.
func (s *UsersListPublicSSHKeysForAuthenticatedOKHeaders) SetResponse(val []Key) {
	s.Response = val
}

func (*UsersListPublicSSHKeysForAuthenticatedOKHeaders) usersListPublicSSHKeysForAuthenticatedRes() {}

type UsersListPublicSSHKeysForAuthenticatedUnauthorized BasicError

func (*UsersListPublicSSHKeysForAuthenticatedUnauthorized) usersListPublicSSHKeysForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedForbidden BasicError

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedForbidden) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedNotFound BasicError

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedNotFound) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON []Email

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedReq struct {
	// Denotes whether an email is publicly visible.
	Visibility UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility `json:"visibility"`
}

// GetVisibility returns the value of Visibility.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReq) GetVisibility() UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility {
	return s.Visibility
}

// SetVisibility sets the value of Visibility.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReq) SetVisibility(val UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) {
	s.Visibility = val
}

// Denotes whether an email is publicly visible.
type UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility string

const (
	UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPublic  UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility = "public"
	UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPrivate UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility = "private"
)

// MarshalText implements encoding.TextMarshaler.
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPublic:
		return []byte(s), nil
	case UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPrivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) UnmarshalText(data []byte) error {
	switch UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility(data) {
	case UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPublic:
		*s = UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPublic
		return nil
	case UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPrivate:
		*s = UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibilityPrivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedUnauthorized BasicError

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedUnauthorized) usersSetPrimaryEmailVisibilityForAuthenticatedRes() {
}

type UsersUnblockForbidden BasicError

func (*UsersUnblockForbidden) usersUnblockRes() {}

// UsersUnblockNoContent is response for UsersUnblock operation.
type UsersUnblockNoContent struct{}

func (*UsersUnblockNoContent) usersUnblockRes() {}

type UsersUnblockNotFound BasicError

func (*UsersUnblockNotFound) usersUnblockRes() {}

type UsersUnblockUnauthorized BasicError

func (*UsersUnblockUnauthorized) usersUnblockRes() {}

type UsersUnfollowForbidden BasicError

func (*UsersUnfollowForbidden) usersUnfollowRes() {}

// UsersUnfollowNoContent is response for UsersUnfollow operation.
type UsersUnfollowNoContent struct{}

func (*UsersUnfollowNoContent) usersUnfollowRes() {}

type UsersUnfollowNotFound BasicError

func (*UsersUnfollowNotFound) usersUnfollowRes() {}

type UsersUnfollowUnauthorized BasicError

func (*UsersUnfollowUnauthorized) usersUnfollowRes() {}

type UsersUpdateAuthenticatedForbidden BasicError

func (*UsersUpdateAuthenticatedForbidden) usersUpdateAuthenticatedRes() {}

type UsersUpdateAuthenticatedNotFound BasicError

func (*UsersUpdateAuthenticatedNotFound) usersUpdateAuthenticatedRes() {}

type UsersUpdateAuthenticatedReq struct {
	// The new name of the user.
	Name OptString `json:"name"`
	// The publicly visible email address of the user.
	Email OptString `json:"email"`
	// The new blog URL of the user.
	Blog OptString `json:"blog"`
	// The new Twitter username of the user.
	TwitterUsername OptNilString `json:"twitter_username"`
	// The new company of the user.
	Company OptString `json:"company"`
	// The new location of the user.
	Location OptString `json:"location"`
	// The new hiring availability of the user.
	Hireable OptBool `json:"hireable"`
	// The new short biography of the user.
	Bio OptString `json:"bio"`
}

// GetName returns the value of Name.
func (s *UsersUpdateAuthenticatedReq) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UsersUpdateAuthenticatedReq) GetEmail() OptString {
	return s.Email
}

// GetBlog returns the value of Blog.
func (s *UsersUpdateAuthenticatedReq) GetBlog() OptString {
	return s.Blog
}

// GetTwitterUsername returns the value of TwitterUsername.
func (s *UsersUpdateAuthenticatedReq) GetTwitterUsername() OptNilString {
	return s.TwitterUsername
}

// GetCompany returns the value of Company.
func (s *UsersUpdateAuthenticatedReq) GetCompany() OptString {
	return s.Company
}

// GetLocation returns the value of Location.
func (s *UsersUpdateAuthenticatedReq) GetLocation() OptString {
	return s.Location
}

// GetHireable returns the value of Hireable.
func (s *UsersUpdateAuthenticatedReq) GetHireable() OptBool {
	return s.Hireable
}

// GetBio returns the value of Bio.
func (s *UsersUpdateAuthenticatedReq) GetBio() OptString {
	return s.Bio
}

// SetName sets the value of Name.
func (s *UsersUpdateAuthenticatedReq) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UsersUpdateAuthenticatedReq) SetEmail(val OptString) {
	s.Email = val
}

// SetBlog sets the value of Blog.
func (s *UsersUpdateAuthenticatedReq) SetBlog(val OptString) {
	s.Blog = val
}

// SetTwitterUsername sets the value of TwitterUsername.
func (s *UsersUpdateAuthenticatedReq) SetTwitterUsername(val OptNilString) {
	s.TwitterUsername = val
}

// SetCompany sets the value of Company.
func (s *UsersUpdateAuthenticatedReq) SetCompany(val OptString) {
	s.Company = val
}

// SetLocation sets the value of Location.
func (s *UsersUpdateAuthenticatedReq) SetLocation(val OptString) {
	s.Location = val
}

// SetHireable sets the value of Hireable.
func (s *UsersUpdateAuthenticatedReq) SetHireable(val OptBool) {
	s.Hireable = val
}

// SetBio sets the value of Bio.
func (s *UsersUpdateAuthenticatedReq) SetBio(val OptString) {
	s.Bio = val
}

type UsersUpdateAuthenticatedUnauthorized BasicError

func (*UsersUpdateAuthenticatedUnauthorized) usersUpdateAuthenticatedRes() {}

// Validation Error.
// Ref: #/components/schemas/validation-error
type ValidationError struct {
	Message          string                      `json:"message"`
	DocumentationURL string                      `json:"documentation_url"`
	Errors           []ValidationErrorErrorsItem `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ValidationError) GetMessage() string {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ValidationError) GetDocumentationURL() string {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ValidationError) GetErrors() []ValidationErrorErrorsItem {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ValidationError) SetMessage(val string) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ValidationError) SetDocumentationURL(val string) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ValidationError) SetErrors(val []ValidationErrorErrorsItem) {
	s.Errors = val
}

func (*ValidationError) activityListNotificationsForAuthenticatedUserRes()                   {}
func (*ValidationError) appsCheckTokenRes()                                                  {}
func (*ValidationError) appsCreateContentAttachmentRes()                                     {}
func (*ValidationError) appsCreateInstallationAccessTokenRes()                               {}
func (*ValidationError) appsDeleteAuthorizationRes()                                         {}
func (*ValidationError) appsDeleteTokenRes()                                                 {}
func (*ValidationError) appsGetWebhookDeliveryRes()                                          {}
func (*ValidationError) appsListAccountsForPlanRes()                                         {}
func (*ValidationError) appsListWebhookDeliveriesRes()                                       {}
func (*ValidationError) appsRedeliverWebhookDeliveryRes()                                    {}
func (*ValidationError) appsResetTokenRes()                                                  {}
func (*ValidationError) appsScopeTokenRes()                                                  {}
func (*ValidationError) gistsCreateRes()                                                     {}
func (*ValidationError) gistsForkRes()                                                       {}
func (*ValidationError) gistsGetRevisionRes()                                                {}
func (*ValidationError) gistsListForUserRes()                                                {}
func (*ValidationError) gistsListPublicRes()                                                 {}
func (*ValidationError) gitCreateBlobRes()                                                   {}
func (*ValidationError) gitCreateCommitRes()                                                 {}
func (*ValidationError) gitCreateRefRes()                                                    {}
func (*ValidationError) gitCreateTagRes()                                                    {}
func (*ValidationError) gitCreateTreeRes()                                                   {}
func (*ValidationError) gitDeleteRefRes()                                                    {}
func (*ValidationError) gitGetBlobRes()                                                      {}
func (*ValidationError) gitGetTreeRes()                                                      {}
func (*ValidationError) gitUpdateRefRes()                                                    {}
func (*ValidationError) interactionsSetRestrictionsForAuthenticatedUserRes()                 {}
func (*ValidationError) interactionsSetRestrictionsForOrgRes()                               {}
func (*ValidationError) issuesCreateCommentRes()                                             {}
func (*ValidationError) issuesCreateLabelRes()                                               {}
func (*ValidationError) issuesCreateMilestoneRes()                                           {}
func (*ValidationError) issuesCreateRes()                                                    {}
func (*ValidationError) issuesListCommentsForRepoRes()                                       {}
func (*ValidationError) issuesListEventsForRepoRes()                                         {}
func (*ValidationError) issuesListForRepoRes()                                               {}
func (*ValidationError) issuesListRes()                                                      {}
func (*ValidationError) issuesLockRes()                                                      {}
func (*ValidationError) issuesUpdateCommentRes()                                             {}
func (*ValidationError) issuesUpdateRes()                                                    {}
func (*ValidationError) migrationsMapCommitAuthorRes()                                       {}
func (*ValidationError) migrationsSetLfsPreferenceRes()                                      {}
func (*ValidationError) migrationsStartForAuthenticatedUserRes()                             {}
func (*ValidationError) migrationsStartForOrgRes()                                           {}
func (*ValidationError) migrationsStartImportRes()                                           {}
func (*ValidationError) oAuthAuthorizationsCreateAuthorizationRes()                          {}
func (*ValidationError) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRes() {}
func (*ValidationError) oAuthAuthorizationsGetOrCreateAuthorizationForAppRes()               {}
func (*ValidationError) oAuthAuthorizationsUpdateAuthorizationRes()                          {}
func (*ValidationError) orgsBlockUserRes()                                                   {}
func (*ValidationError) orgsCancelInvitationRes()                                            {}
func (*ValidationError) orgsCreateInvitationRes()                                            {}
func (*ValidationError) orgsCreateWebhookRes()                                               {}
func (*ValidationError) orgsGetWebhookDeliveryRes()                                          {}
func (*ValidationError) orgsListMembersRes()                                                 {}
func (*ValidationError) orgsListMembershipsForAuthenticatedUserRes()                         {}
func (*ValidationError) orgsListWebhookDeliveriesRes()                                       {}
func (*ValidationError) orgsRedeliverWebhookDeliveryRes()                                    {}
func (*ValidationError) orgsSetMembershipForUserRes()                                        {}
func (*ValidationError) orgsUpdateMembershipForAuthenticatedUserRes()                        {}
func (*ValidationError) orgsUpdateWebhookRes()                                               {}
func (*ValidationError) projectsAddCollaboratorRes()                                         {}
func (*ValidationError) projectsGetPermissionForUserRes()                                    {}
func (*ValidationError) projectsListCollaboratorsRes()                                       {}
func (*ValidationError) projectsListForUserRes()                                             {}
func (*ValidationError) projectsMoveCardRes()                                                {}
func (*ValidationError) projectsRemoveCollaboratorRes()                                      {}
func (*ValidationError) pullsCreateRes()                                                     {}
func (*ValidationError) pullsCreateReviewCommentRes()                                        {}
func (*ValidationError) pullsListFilesRes()                                                  {}
func (*ValidationError) pullsListRes()                                                       {}
func (*ValidationError) pullsMergeRes()                                                      {}
func (*ValidationError) pullsRemoveRequestedReviewersRes()                                   {}
func (*ValidationError) pullsUpdateBranchRes()                                               {}
func (*ValidationError) pullsUpdateRes()                                                     {}
func (*ValidationError) reactionsCreateForCommitCommentRes()                                 {}
func (*ValidationError) reactionsCreateForIssueCommentRes()                                  {}
func (*ValidationError) reactionsCreateForIssueRes()                                         {}
func (*ValidationError) reactionsCreateForPullRequestReviewCommentRes()                      {}
func (*ValidationError) reactionsCreateForReleaseRes()                                       {}
func (*ValidationError) reposAddAppAccessRestrictionsRes()                                   {}
func (*ValidationError) reposAddCollaboratorRes()                                            {}
func (*ValidationError) reposAddStatusCheckContextsRes()                                     {}
func (*ValidationError) reposAddTeamAccessRestrictionsRes()                                  {}
func (*ValidationError) reposAddUserAccessRestrictionsRes()                                  {}
func (*ValidationError) reposCreateAutolinkRes()                                             {}
func (*ValidationError) reposCreateCommitCommentRes()                                        {}
func (*ValidationError) reposCreateDeployKeyRes()                                            {}
func (*ValidationError) reposCreateDeploymentRes()                                           {}
func (*ValidationError) reposCreateDeploymentStatusRes()                                     {}
func (*ValidationError) reposCreateDispatchEventRes()                                        {}
func (*ValidationError) reposCreateForAuthenticatedUserRes()                                 {}
func (*ValidationError) reposCreateForkRes()                                                 {}
func (*ValidationError) reposCreateInOrgRes()                                                {}
func (*ValidationError) reposCreateOrUpdateFileContentsRes()                                 {}
func (*ValidationError) reposCreatePagesSiteRes()                                            {}
func (*ValidationError) reposCreateReleaseRes()                                              {}
func (*ValidationError) reposCreateWebhookRes()                                              {}
func (*ValidationError) reposDeleteFileRes()                                                 {}
func (*ValidationError) reposDeletePagesSiteRes()                                            {}
func (*ValidationError) reposGetCommitRes()                                                  {}
func (*ValidationError) reposGetReadmeInDirectoryRes()                                       {}
func (*ValidationError) reposGetReadmeRes()                                                  {}
func (*ValidationError) reposGetWebhookDeliveryRes()                                         {}
func (*ValidationError) reposListBranchesForHeadCommitRes()                                  {}
func (*ValidationError) reposListForAuthenticatedUserRes()                                   {}
func (*ValidationError) reposListPublicRes()                                                 {}
func (*ValidationError) reposListWebhookDeliveriesRes()                                      {}
func (*ValidationError) reposMergeRes()                                                      {}
func (*ValidationError) reposRedeliverWebhookDeliveryRes()                                   {}
func (*ValidationError) reposRemoveAppAccessRestrictionsRes()                                {}
func (*ValidationError) reposRemoveStatusCheckContextsRes()                                  {}
func (*ValidationError) reposRemoveTeamAccessRestrictionsRes()                               {}
func (*ValidationError) reposRemoveUserAccessRestrictionsRes()                               {}
func (*ValidationError) reposRenameBranchRes()                                               {}
func (*ValidationError) reposSetAppAccessRestrictionsRes()                                   {}
func (*ValidationError) reposSetStatusCheckContextsRes()                                     {}
func (*ValidationError) reposSetTeamAccessRestrictionsRes()                                  {}
func (*ValidationError) reposSetUserAccessRestrictionsRes()                                  {}
func (*ValidationError) reposUpdatePullRequestReviewProtectionRes()                          {}
func (*ValidationError) reposUpdateRes()                                                     {}
func (*ValidationError) reposUpdateStatusCheckProtectionRes()                                {}
func (*ValidationError) reposUpdateWebhookRes()                                              {}
func (*ValidationError) searchCodeRes()                                                      {}
func (*ValidationError) searchIssuesAndPullRequestsRes()                                     {}
func (*ValidationError) searchLabelsRes()                                                    {}
func (*ValidationError) searchReposRes()                                                     {}
func (*ValidationError) searchUsersRes()                                                     {}
func (*ValidationError) teamsAddOrUpdateProjectPermissionsLegacyRes()                        {}
func (*ValidationError) teamsAddOrUpdateRepoPermissionsLegacyRes()                           {}
func (*ValidationError) teamsCreateOrUpdateIdpGroupConnectionsLegacyRes()                    {}
func (*ValidationError) teamsCreateRes()                                                     {}
func (*ValidationError) teamsDeleteLegacyRes()                                               {}
func (*ValidationError) teamsListChildLegacyRes()                                            {}
func (*ValidationError) teamsRemoveProjectLegacyRes()                                        {}
func (*ValidationError) teamsUpdateLegacyRes()                                               {}
func (*ValidationError) usersAddEmailForAuthenticatedRes()                                   {}
func (*ValidationError) usersBlockRes()                                                      {}
func (*ValidationError) usersCreateGpgKeyForAuthenticatedRes()                               {}
func (*ValidationError) usersCreatePublicSSHKeyForAuthenticatedRes()                         {}
func (*ValidationError) usersDeleteEmailForAuthenticatedRes()                                {}
func (*ValidationError) usersDeleteGpgKeyForAuthenticatedRes()                               {}
func (*ValidationError) usersGetContextForUserRes()                                          {}
func (*ValidationError) usersSetPrimaryEmailVisibilityForAuthenticatedRes()                  {}
func (*ValidationError) usersUpdateAuthenticatedRes()                                        {}

type ValidationErrorErrorsItem struct {
	Resource OptString                         `json:"resource"`
	Field    OptString                         `json:"field"`
	Message  OptString                         `json:"message"`
	Code     string                            `json:"code"`
	Index    OptInt                            `json:"index"`
	Value    OptValidationErrorErrorsItemValue `json:"value"`
}

// GetResource returns the value of Resource.
func (s *ValidationErrorErrorsItem) GetResource() OptString {
	return s.Resource
}

// GetField returns the value of Field.
func (s *ValidationErrorErrorsItem) GetField() OptString {
	return s.Field
}

// GetMessage returns the value of Message.
func (s *ValidationErrorErrorsItem) GetMessage() OptString {
	return s.Message
}

// GetCode returns the value of Code.
func (s *ValidationErrorErrorsItem) GetCode() string {
	return s.Code
}

// GetIndex returns the value of Index.
func (s *ValidationErrorErrorsItem) GetIndex() OptInt {
	return s.Index
}

// GetValue returns the value of Value.
func (s *ValidationErrorErrorsItem) GetValue() OptValidationErrorErrorsItemValue {
	return s.Value
}

// SetResource sets the value of Resource.
func (s *ValidationErrorErrorsItem) SetResource(val OptString) {
	s.Resource = val
}

// SetField sets the value of Field.
func (s *ValidationErrorErrorsItem) SetField(val OptString) {
	s.Field = val
}

// SetMessage sets the value of Message.
func (s *ValidationErrorErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ValidationErrorErrorsItem) SetCode(val string) {
	s.Code = val
}

// SetIndex sets the value of Index.
func (s *ValidationErrorErrorsItem) SetIndex(val OptInt) {
	s.Index = val
}

// SetValue sets the value of Value.
func (s *ValidationErrorErrorsItem) SetValue(val OptValidationErrorErrorsItemValue) {
	s.Value = val
}

// ValidationErrorErrorsItemValue represents sum type.
type ValidationErrorErrorsItemValue struct {
	Type        ValidationErrorErrorsItemValueType // switch on this field
	Null        struct{}
	String      string
	Int         int
	StringArray []string
}

// ValidationErrorErrorsItemValueType is oneOf type of ValidationErrorErrorsItemValue.
type ValidationErrorErrorsItemValueType string

// Possible values for ValidationErrorErrorsItemValueType.
const (
	NullValidationErrorErrorsItemValue        ValidationErrorErrorsItemValueType = "struct{}"
	StringValidationErrorErrorsItemValue      ValidationErrorErrorsItemValueType = "string"
	IntValidationErrorErrorsItemValue         ValidationErrorErrorsItemValueType = "int"
	StringArrayValidationErrorErrorsItemValue ValidationErrorErrorsItemValueType = "[]string"
)

// IsNull reports whether ValidationErrorErrorsItemValue is struct{}.
func (s ValidationErrorErrorsItemValue) IsNull() bool {
	return s.Type == NullValidationErrorErrorsItemValue
}

// IsString reports whether ValidationErrorErrorsItemValue is string.
func (s ValidationErrorErrorsItemValue) IsString() bool {
	return s.Type == StringValidationErrorErrorsItemValue
}

// IsInt reports whether ValidationErrorErrorsItemValue is int.
func (s ValidationErrorErrorsItemValue) IsInt() bool {
	return s.Type == IntValidationErrorErrorsItemValue
}

// IsStringArray reports whether ValidationErrorErrorsItemValue is []string.
func (s ValidationErrorErrorsItemValue) IsStringArray() bool {
	return s.Type == StringArrayValidationErrorErrorsItemValue
}

// SetNull sets ValidationErrorErrorsItemValue to struct{}.
func (s *ValidationErrorErrorsItemValue) SetNull(v struct{}) {
	s.Type = NullValidationErrorErrorsItemValue
	s.Null = v
}

// GetNull returns struct{} and true boolean if ValidationErrorErrorsItemValue is struct{}.
func (s ValidationErrorErrorsItemValue) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from struct{}.
func NewNullValidationErrorErrorsItemValue(v struct{}) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetNull(v)
	return s
}

// SetString sets ValidationErrorErrorsItemValue to string.
func (s *ValidationErrorErrorsItemValue) SetString(v string) {
	s.Type = StringValidationErrorErrorsItemValue
	s.String = v
}

// GetString returns string and true boolean if ValidationErrorErrorsItemValue is string.
func (s ValidationErrorErrorsItemValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from string.
func NewStringValidationErrorErrorsItemValue(v string) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetString(v)
	return s
}

// SetInt sets ValidationErrorErrorsItemValue to int.
func (s *ValidationErrorErrorsItemValue) SetInt(v int) {
	s.Type = IntValidationErrorErrorsItemValue
	s.Int = v
}

// GetInt returns int and true boolean if ValidationErrorErrorsItemValue is int.
func (s ValidationErrorErrorsItemValue) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from int.
func NewIntValidationErrorErrorsItemValue(v int) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetInt(v)
	return s
}

// SetStringArray sets ValidationErrorErrorsItemValue to []string.
func (s *ValidationErrorErrorsItemValue) SetStringArray(v []string) {
	s.Type = StringArrayValidationErrorErrorsItemValue
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ValidationErrorErrorsItemValue is []string.
func (s ValidationErrorErrorsItemValue) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayValidationErrorErrorsItemValue returns new ValidationErrorErrorsItemValue from []string.
func NewStringArrayValidationErrorErrorsItemValue(v []string) ValidationErrorErrorsItemValue {
	var s ValidationErrorErrorsItemValue
	s.SetStringArray(v)
	return s
}

// Validation Error Simple.
// Ref: #/components/schemas/validation-error-simple
type ValidationErrorSimple struct {
	Message          string   `json:"message"`
	DocumentationURL string   `json:"documentation_url"`
	Errors           []string `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ValidationErrorSimple) GetMessage() string {
	return s.Message
}

// GetDocumentationURL returns the value of DocumentationURL.
func (s *ValidationErrorSimple) GetDocumentationURL() string {
	return s.DocumentationURL
}

// GetErrors returns the value of Errors.
func (s *ValidationErrorSimple) GetErrors() []string {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ValidationErrorSimple) SetMessage(val string) {
	s.Message = val
}

// SetDocumentationURL sets the value of DocumentationURL.
func (s *ValidationErrorSimple) SetDocumentationURL(val string) {
	s.DocumentationURL = val
}

// SetErrors sets the value of Errors.
func (s *ValidationErrorSimple) SetErrors(val []string) {
	s.Errors = val
}

func (*ValidationErrorSimple) appsCreateFromManifestRes()             {}
func (*ValidationErrorSimple) projectsCreateColumnRes()               {}
func (*ValidationErrorSimple) projectsCreateForAuthenticatedUserRes() {}
func (*ValidationErrorSimple) projectsCreateForOrgRes()               {}
func (*ValidationErrorSimple) projectsCreateForRepoRes()              {}
func (*ValidationErrorSimple) projectsListForOrgRes()                 {}
func (*ValidationErrorSimple) projectsListForRepoRes()                {}
func (*ValidationErrorSimple) projectsMoveColumnRes()                 {}
func (*ValidationErrorSimple) projectsUpdateCardRes()                 {}
func (*ValidationErrorSimple) projectsUpdateRes()                     {}
func (*ValidationErrorSimple) pullsCreateReviewRes()                  {}
func (*ValidationErrorSimple) pullsDeletePendingReviewRes()           {}
func (*ValidationErrorSimple) pullsDismissReviewRes()                 {}
func (*ValidationErrorSimple) pullsSubmitReviewRes()                  {}
func (*ValidationErrorSimple) pullsUpdateReviewRes()                  {}
func (*ValidationErrorSimple) reposDeleteDeploymentRes()              {}
func (*ValidationErrorSimple) reposReplaceAllTopicsRes()              {}
func (*ValidationErrorSimple) reposUpdateBranchProtectionRes()        {}

// Ref: #/components/schemas/verification
type Verification struct {
	Verified  bool      `json:"verified"`
	Reason    string    `json:"reason"`
	Payload   NilString `json:"payload"`
	Signature NilString `json:"signature"`
}

// GetVerified returns the value of Verified.
func (s *Verification) GetVerified() bool {
	return s.Verified
}

// GetReason returns the value of Reason.
func (s *Verification) GetReason() string {
	return s.Reason
}

// GetPayload returns the value of Payload.
func (s *Verification) GetPayload() NilString {
	return s.Payload
}

// GetSignature returns the value of Signature.
func (s *Verification) GetSignature() NilString {
	return s.Signature
}

// SetVerified sets the value of Verified.
func (s *Verification) SetVerified(val bool) {
	s.Verified = val
}

// SetReason sets the value of Reason.
func (s *Verification) SetReason(val string) {
	s.Reason = val
}

// SetPayload sets the value of Payload.
func (s *Verification) SetPayload(val NilString) {
	s.Payload = val
}

// SetSignature sets the value of Signature.
func (s *Verification) SetSignature(val NilString) {
	s.Signature = val
}

// View Traffic.
// Ref: #/components/schemas/view-traffic
type ViewTraffic struct {
	Count   int       `json:"count"`
	Uniques int       `json:"uniques"`
	Views   []Traffic `json:"views"`
}

// GetCount returns the value of Count.
func (s *ViewTraffic) GetCount() int {
	return s.Count
}

// GetUniques returns the value of Uniques.
func (s *ViewTraffic) GetUniques() int {
	return s.Uniques
}

// GetViews returns the value of Views.
func (s *ViewTraffic) GetViews() []Traffic {
	return s.Views
}

// SetCount sets the value of Count.
func (s *ViewTraffic) SetCount(val int) {
	s.Count = val
}

// SetUniques sets the value of Uniques.
func (s *ViewTraffic) SetUniques(val int) {
	s.Uniques = val
}

// SetViews sets the value of Views.
func (s *ViewTraffic) SetViews(val []Traffic) {
	s.Views = val
}

func (*ViewTraffic) reposGetViewsRes() {}

// Configuration object of the webhook.
// Ref: #/components/schemas/webhook-config
type WebhookConfig struct {
	URL         OptWebhookConfigURL         `json:"url"`
	ContentType OptWebhookConfigContentType `json:"content_type"`
	Secret      OptWebhookConfigSecret      `json:"secret"`
	InsecureSsl OptWebhookConfigInsecureSsl `json:"insecure_ssl"`
}

// GetURL returns the value of URL.
func (s *WebhookConfig) GetURL() OptWebhookConfigURL {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *WebhookConfig) GetContentType() OptWebhookConfigContentType {
	return s.ContentType
}

// GetSecret returns the value of Secret.
func (s *WebhookConfig) GetSecret() OptWebhookConfigSecret {
	return s.Secret
}

// GetInsecureSsl returns the value of InsecureSsl.
func (s *WebhookConfig) GetInsecureSsl() OptWebhookConfigInsecureSsl {
	return s.InsecureSsl
}

// SetURL sets the value of URL.
func (s *WebhookConfig) SetURL(val OptWebhookConfigURL) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *WebhookConfig) SetContentType(val OptWebhookConfigContentType) {
	s.ContentType = val
}

// SetSecret sets the value of Secret.
func (s *WebhookConfig) SetSecret(val OptWebhookConfigSecret) {
	s.Secret = val
}

// SetInsecureSsl sets the value of InsecureSsl.
func (s *WebhookConfig) SetInsecureSsl(val OptWebhookConfigInsecureSsl) {
	s.InsecureSsl = val
}

type WebhookConfigContentType string

// Ref: #/components/schemas/webhook-config-insecure-ssl
// WebhookConfigInsecureSsl represents sum type.
type WebhookConfigInsecureSsl struct {
	Type    WebhookConfigInsecureSslType // switch on this field
	String  string
	Float64 float64
}

// WebhookConfigInsecureSslType is oneOf type of WebhookConfigInsecureSsl.
type WebhookConfigInsecureSslType string

// Possible values for WebhookConfigInsecureSslType.
const (
	StringWebhookConfigInsecureSsl  WebhookConfigInsecureSslType = "string"
	Float64WebhookConfigInsecureSsl WebhookConfigInsecureSslType = "float64"
)

// IsString reports whether WebhookConfigInsecureSsl is string.
func (s WebhookConfigInsecureSsl) IsString() bool { return s.Type == StringWebhookConfigInsecureSsl }

// IsFloat64 reports whether WebhookConfigInsecureSsl is float64.
func (s WebhookConfigInsecureSsl) IsFloat64() bool { return s.Type == Float64WebhookConfigInsecureSsl }

// SetString sets WebhookConfigInsecureSsl to string.
func (s *WebhookConfigInsecureSsl) SetString(v string) {
	s.Type = StringWebhookConfigInsecureSsl
	s.String = v
}

// GetString returns string and true boolean if WebhookConfigInsecureSsl is string.
func (s WebhookConfigInsecureSsl) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringWebhookConfigInsecureSsl returns new WebhookConfigInsecureSsl from string.
func NewStringWebhookConfigInsecureSsl(v string) WebhookConfigInsecureSsl {
	var s WebhookConfigInsecureSsl
	s.SetString(v)
	return s
}

// SetFloat64 sets WebhookConfigInsecureSsl to float64.
func (s *WebhookConfigInsecureSsl) SetFloat64(v float64) {
	s.Type = Float64WebhookConfigInsecureSsl
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if WebhookConfigInsecureSsl is float64.
func (s WebhookConfigInsecureSsl) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64WebhookConfigInsecureSsl returns new WebhookConfigInsecureSsl from float64.
func NewFloat64WebhookConfigInsecureSsl(v float64) WebhookConfigInsecureSsl {
	var s WebhookConfigInsecureSsl
	s.SetFloat64(v)
	return s
}

type WebhookConfigSecret string

type WebhookConfigURL url.URL

// A GitHub Actions workflow.
// Ref: #/components/schemas/workflow
type Workflow struct {
	ID        int           `json:"id"`
	NodeID    string        `json:"node_id"`
	Name      string        `json:"name"`
	Path      string        `json:"path"`
	State     WorkflowState `json:"state"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
	URL       string        `json:"url"`
	HTMLURL   string        `json:"html_url"`
	BadgeURL  string        `json:"badge_url"`
	DeletedAt OptDateTime   `json:"deleted_at"`
}

// GetID returns the value of ID.
func (s *Workflow) GetID() int {
	return s.ID
}

// GetNodeID returns the value of NodeID.
func (s *Workflow) GetNodeID() string {
	return s.NodeID
}

// GetName returns the value of Name.
func (s *Workflow) GetName() string {
	return s.Name
}

// GetPath returns the value of Path.
func (s *Workflow) GetPath() string {
	return s.Path
}

// GetState returns the value of State.
func (s *Workflow) GetState() WorkflowState {
	return s.State
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Workflow) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Workflow) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetURL returns the value of URL.
func (s *Workflow) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *Workflow) GetHTMLURL() string {
	return s.HTMLURL
}

// GetBadgeURL returns the value of BadgeURL.
func (s *Workflow) GetBadgeURL() string {
	return s.BadgeURL
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Workflow) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// SetID sets the value of ID.
func (s *Workflow) SetID(val int) {
	s.ID = val
}

// SetNodeID sets the value of NodeID.
func (s *Workflow) SetNodeID(val string) {
	s.NodeID = val
}

// SetName sets the value of Name.
func (s *Workflow) SetName(val string) {
	s.Name = val
}

// SetPath sets the value of Path.
func (s *Workflow) SetPath(val string) {
	s.Path = val
}

// SetState sets the value of State.
func (s *Workflow) SetState(val WorkflowState) {
	s.State = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Workflow) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Workflow) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetURL sets the value of URL.
func (s *Workflow) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *Workflow) SetHTMLURL(val string) {
	s.HTMLURL = val
}

// SetBadgeURL sets the value of BadgeURL.
func (s *Workflow) SetBadgeURL(val string) {
	s.BadgeURL = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Workflow) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// An invocation of a workflow.
// Ref: #/components/schemas/workflow-run
type WorkflowRun struct {
	// The ID of the workflow run.
	ID int `json:"id"`
	// The name of the workflow run.
	Name   OptNilString `json:"name"`
	NodeID string       `json:"node_id"`
	// The ID of the associated check suite.
	CheckSuiteID OptInt `json:"check_suite_id"`
	// The node ID of the associated check suite.
	CheckSuiteNodeID OptString `json:"check_suite_node_id"`
	HeadBranch       NilString `json:"head_branch"`
	// The SHA of the head commit that points to the version of the worflow being run.
	HeadSha string `json:"head_sha"`
	// The auto incrementing run number for the workflow run.
	RunNumber int `json:"run_number"`
	// Attempt number of the run, 1 for first attempt and higher if the workflow was retried.
	RunAttempt OptInt    `json:"run_attempt"`
	Event      string    `json:"event"`
	Status     NilString `json:"status"`
	Conclusion NilString `json:"conclusion"`
	// The ID of the parent workflow.
	WorkflowID int `json:"workflow_id"`
	// The URL to the workflow run.
	URL          string               `json:"url"`
	HTMLURL      string               `json:"html_url"`
	PullRequests []PullRequestMinimal `json:"pull_requests"`
	CreatedAt    time.Time            `json:"created_at"`
	UpdatedAt    time.Time            `json:"updated_at"`
	// The URL to the jobs for the workflow run.
	JobsURL string `json:"jobs_url"`
	// The URL to download the logs for the workflow run.
	LogsURL string `json:"logs_url"`
	// The URL to the associated check suite.
	CheckSuiteURL string `json:"check_suite_url"`
	// The URL to the artifacts for the workflow run.
	ArtifactsURL string `json:"artifacts_url"`
	// The URL to cancel the workflow run.
	CancelURL string `json:"cancel_url"`
	// The URL to rerun the workflow run.
	RerunURL string `json:"rerun_url"`
	// The URL to the previous attempted run of this workflow, if one exists.
	PreviousAttemptURL OptNilString `json:"previous_attempt_url"`
	// The URL to the workflow.
	WorkflowURL      string                  `json:"workflow_url"`
	HeadCommit       NilNullableSimpleCommit `json:"head_commit"`
	Repository       MinimalRepository       `json:"repository"`
	HeadRepository   MinimalRepository       `json:"head_repository"`
	HeadRepositoryID OptInt                  `json:"head_repository_id"`
}

// GetID returns the value of ID.
func (s *WorkflowRun) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *WorkflowRun) GetName() OptNilString {
	return s.Name
}

// GetNodeID returns the value of NodeID.
func (s *WorkflowRun) GetNodeID() string {
	return s.NodeID
}

// GetCheckSuiteID returns the value of CheckSuiteID.
func (s *WorkflowRun) GetCheckSuiteID() OptInt {
	return s.CheckSuiteID
}

// GetCheckSuiteNodeID returns the value of CheckSuiteNodeID.
func (s *WorkflowRun) GetCheckSuiteNodeID() OptString {
	return s.CheckSuiteNodeID
}

// GetHeadBranch returns the value of HeadBranch.
func (s *WorkflowRun) GetHeadBranch() NilString {
	return s.HeadBranch
}

// GetHeadSha returns the value of HeadSha.
func (s *WorkflowRun) GetHeadSha() string {
	return s.HeadSha
}

// GetRunNumber returns the value of RunNumber.
func (s *WorkflowRun) GetRunNumber() int {
	return s.RunNumber
}

// GetRunAttempt returns the value of RunAttempt.
func (s *WorkflowRun) GetRunAttempt() OptInt {
	return s.RunAttempt
}

// GetEvent returns the value of Event.
func (s *WorkflowRun) GetEvent() string {
	return s.Event
}

// GetStatus returns the value of Status.
func (s *WorkflowRun) GetStatus() NilString {
	return s.Status
}

// GetConclusion returns the value of Conclusion.
func (s *WorkflowRun) GetConclusion() NilString {
	return s.Conclusion
}

// GetWorkflowID returns the value of WorkflowID.
func (s *WorkflowRun) GetWorkflowID() int {
	return s.WorkflowID
}

// GetURL returns the value of URL.
func (s *WorkflowRun) GetURL() string {
	return s.URL
}

// GetHTMLURL returns the value of HTMLURL.
func (s *WorkflowRun) GetHTMLURL() string {
	return s.HTMLURL
}

// GetPullRequests returns the value of PullRequests.
func (s *WorkflowRun) GetPullRequests() []PullRequestMinimal {
	return s.PullRequests
}

// GetCreatedAt returns the value of CreatedAt.
func (s *WorkflowRun) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *WorkflowRun) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetJobsURL returns the value of JobsURL.
func (s *WorkflowRun) GetJobsURL() string {
	return s.JobsURL
}

// GetLogsURL returns the value of LogsURL.
func (s *WorkflowRun) GetLogsURL() string {
	return s.LogsURL
}

// GetCheckSuiteURL returns the value of CheckSuiteURL.
func (s *WorkflowRun) GetCheckSuiteURL() string {
	return s.CheckSuiteURL
}

// GetArtifactsURL returns the value of ArtifactsURL.
func (s *WorkflowRun) GetArtifactsURL() string {
	return s.ArtifactsURL
}

// GetCancelURL returns the value of CancelURL.
func (s *WorkflowRun) GetCancelURL() string {
	return s.CancelURL
}

// GetRerunURL returns the value of RerunURL.
func (s *WorkflowRun) GetRerunURL() string {
	return s.RerunURL
}

// GetPreviousAttemptURL returns the value of PreviousAttemptURL.
func (s *WorkflowRun) GetPreviousAttemptURL() OptNilString {
	return s.PreviousAttemptURL
}

// GetWorkflowURL returns the value of WorkflowURL.
func (s *WorkflowRun) GetWorkflowURL() string {
	return s.WorkflowURL
}

// GetHeadCommit returns the value of HeadCommit.
func (s *WorkflowRun) GetHeadCommit() NilNullableSimpleCommit {
	return s.HeadCommit
}

// GetRepository returns the value of Repository.
func (s *WorkflowRun) GetRepository() MinimalRepository {
	return s.Repository
}

// GetHeadRepository returns the value of HeadRepository.
func (s *WorkflowRun) GetHeadRepository() MinimalRepository {
	return s.HeadRepository
}

// GetHeadRepositoryID returns the value of HeadRepositoryID.
func (s *WorkflowRun) GetHeadRepositoryID() OptInt {
	return s.HeadRepositoryID
}

// SetID sets the value of ID.
func (s *WorkflowRun) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *WorkflowRun) SetName(val OptNilString) {
	s.Name = val
}

// SetNodeID sets the value of NodeID.
func (s *WorkflowRun) SetNodeID(val string) {
	s.NodeID = val
}

// SetCheckSuiteID sets the value of CheckSuiteID.
func (s *WorkflowRun) SetCheckSuiteID(val OptInt) {
	s.CheckSuiteID = val
}

// SetCheckSuiteNodeID sets the value of CheckSuiteNodeID.
func (s *WorkflowRun) SetCheckSuiteNodeID(val OptString) {
	s.CheckSuiteNodeID = val
}

// SetHeadBranch sets the value of HeadBranch.
func (s *WorkflowRun) SetHeadBranch(val NilString) {
	s.HeadBranch = val
}

// SetHeadSha sets the value of HeadSha.
func (s *WorkflowRun) SetHeadSha(val string) {
	s.HeadSha = val
}

// SetRunNumber sets the value of RunNumber.
func (s *WorkflowRun) SetRunNumber(val int) {
	s.RunNumber = val
}

// SetRunAttempt sets the value of RunAttempt.
func (s *WorkflowRun) SetRunAttempt(val OptInt) {
	s.RunAttempt = val
}

// SetEvent sets the value of Event.
func (s *WorkflowRun) SetEvent(val string) {
	s.Event = val
}

// SetStatus sets the value of Status.
func (s *WorkflowRun) SetStatus(val NilString) {
	s.Status = val
}

// SetConclusion sets the value of Conclusion.
func (s *WorkflowRun) SetConclusion(val NilString) {
	s.Conclusion = val
}

// SetWorkflowID sets the value of WorkflowID.
func (s *WorkflowRun) SetWorkflowID(val int) {
	s.WorkflowID = val
}

// SetURL sets the value of URL.
func (s *WorkflowRun) SetURL(val string) {
	s.URL = val
}

// SetHTMLURL sets the value of HTMLURL.
func (s *WorkflowRun) SetHTMLURL(val string) {
	s.HTMLURL = val
}

// SetPullRequests sets the value of PullRequests.
func (s *WorkflowRun) SetPullRequests(val []PullRequestMinimal) {
	s.PullRequests = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *WorkflowRun) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *WorkflowRun) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetJobsURL sets the value of JobsURL.
func (s *WorkflowRun) SetJobsURL(val string) {
	s.JobsURL = val
}

// SetLogsURL sets the value of LogsURL.
func (s *WorkflowRun) SetLogsURL(val string) {
	s.LogsURL = val
}

// SetCheckSuiteURL sets the value of CheckSuiteURL.
func (s *WorkflowRun) SetCheckSuiteURL(val string) {
	s.CheckSuiteURL = val
}

// SetArtifactsURL sets the value of ArtifactsURL.
func (s *WorkflowRun) SetArtifactsURL(val string) {
	s.ArtifactsURL = val
}

// SetCancelURL sets the value of CancelURL.
func (s *WorkflowRun) SetCancelURL(val string) {
	s.CancelURL = val
}

// SetRerunURL sets the value of RerunURL.
func (s *WorkflowRun) SetRerunURL(val string) {
	s.RerunURL = val
}

// SetPreviousAttemptURL sets the value of PreviousAttemptURL.
func (s *WorkflowRun) SetPreviousAttemptURL(val OptNilString) {
	s.PreviousAttemptURL = val
}

// SetWorkflowURL sets the value of WorkflowURL.
func (s *WorkflowRun) SetWorkflowURL(val string) {
	s.WorkflowURL = val
}

// SetHeadCommit sets the value of HeadCommit.
func (s *WorkflowRun) SetHeadCommit(val NilNullableSimpleCommit) {
	s.HeadCommit = val
}

// SetRepository sets the value of Repository.
func (s *WorkflowRun) SetRepository(val MinimalRepository) {
	s.Repository = val
}

// SetHeadRepository sets the value of HeadRepository.
func (s *WorkflowRun) SetHeadRepository(val MinimalRepository) {
	s.HeadRepository = val
}

// SetHeadRepositoryID sets the value of HeadRepositoryID.
func (s *WorkflowRun) SetHeadRepositoryID(val OptInt) {
	s.HeadRepositoryID = val
}

// Workflow Run Usage.
// Ref: #/components/schemas/workflow-run-usage
type WorkflowRunUsage struct {
	Billable      WorkflowRunUsageBillable `json:"billable"`
	RunDurationMs OptInt                   `json:"run_duration_ms"`
}

// GetBillable returns the value of Billable.
func (s *WorkflowRunUsage) GetBillable() WorkflowRunUsageBillable {
	return s.Billable
}

// GetRunDurationMs returns the value of RunDurationMs.
func (s *WorkflowRunUsage) GetRunDurationMs() OptInt {
	return s.RunDurationMs
}

// SetBillable sets the value of Billable.
func (s *WorkflowRunUsage) SetBillable(val WorkflowRunUsageBillable) {
	s.Billable = val
}

// SetRunDurationMs sets the value of RunDurationMs.
func (s *WorkflowRunUsage) SetRunDurationMs(val OptInt) {
	s.RunDurationMs = val
}

type WorkflowRunUsageBillable struct {
	UBUNTU  OptWorkflowRunUsageBillableUBUNTU  `json:"UBUNTU"`
	MACOS   OptWorkflowRunUsageBillableMACOS   `json:"MACOS"`
	WINDOWS OptWorkflowRunUsageBillableWINDOWS `json:"WINDOWS"`
}

// GetUBUNTU returns the value of UBUNTU.
func (s *WorkflowRunUsageBillable) GetUBUNTU() OptWorkflowRunUsageBillableUBUNTU {
	return s.UBUNTU
}

// GetMACOS returns the value of MACOS.
func (s *WorkflowRunUsageBillable) GetMACOS() OptWorkflowRunUsageBillableMACOS {
	return s.MACOS
}

// GetWINDOWS returns the value of WINDOWS.
func (s *WorkflowRunUsageBillable) GetWINDOWS() OptWorkflowRunUsageBillableWINDOWS {
	return s.WINDOWS
}

// SetUBUNTU sets the value of UBUNTU.
func (s *WorkflowRunUsageBillable) SetUBUNTU(val OptWorkflowRunUsageBillableUBUNTU) {
	s.UBUNTU = val
}

// SetMACOS sets the value of MACOS.
func (s *WorkflowRunUsageBillable) SetMACOS(val OptWorkflowRunUsageBillableMACOS) {
	s.MACOS = val
}

// SetWINDOWS sets the value of WINDOWS.
func (s *WorkflowRunUsageBillable) SetWINDOWS(val OptWorkflowRunUsageBillableWINDOWS) {
	s.WINDOWS = val
}

type WorkflowRunUsageBillableMACOS struct {
	TotalMs int `json:"total_ms"`
	Jobs    int `json:"jobs"`
}

// GetTotalMs returns the value of TotalMs.
func (s *WorkflowRunUsageBillableMACOS) GetTotalMs() int {
	return s.TotalMs
}

// GetJobs returns the value of Jobs.
func (s *WorkflowRunUsageBillableMACOS) GetJobs() int {
	return s.Jobs
}

// SetTotalMs sets the value of TotalMs.
func (s *WorkflowRunUsageBillableMACOS) SetTotalMs(val int) {
	s.TotalMs = val
}

// SetJobs sets the value of Jobs.
func (s *WorkflowRunUsageBillableMACOS) SetJobs(val int) {
	s.Jobs = val
}

type WorkflowRunUsageBillableUBUNTU struct {
	TotalMs int `json:"total_ms"`
	Jobs    int `json:"jobs"`
}

// GetTotalMs returns the value of TotalMs.
func (s *WorkflowRunUsageBillableUBUNTU) GetTotalMs() int {
	return s.TotalMs
}

// GetJobs returns the value of Jobs.
func (s *WorkflowRunUsageBillableUBUNTU) GetJobs() int {
	return s.Jobs
}

// SetTotalMs sets the value of TotalMs.
func (s *WorkflowRunUsageBillableUBUNTU) SetTotalMs(val int) {
	s.TotalMs = val
}

// SetJobs sets the value of Jobs.
func (s *WorkflowRunUsageBillableUBUNTU) SetJobs(val int) {
	s.Jobs = val
}

type WorkflowRunUsageBillableWINDOWS struct {
	TotalMs int `json:"total_ms"`
	Jobs    int `json:"jobs"`
}

// GetTotalMs returns the value of TotalMs.
func (s *WorkflowRunUsageBillableWINDOWS) GetTotalMs() int {
	return s.TotalMs
}

// GetJobs returns the value of Jobs.
func (s *WorkflowRunUsageBillableWINDOWS) GetJobs() int {
	return s.Jobs
}

// SetTotalMs sets the value of TotalMs.
func (s *WorkflowRunUsageBillableWINDOWS) SetTotalMs(val int) {
	s.TotalMs = val
}

// SetJobs sets the value of Jobs.
func (s *WorkflowRunUsageBillableWINDOWS) SetJobs(val int) {
	s.Jobs = val
}

type WorkflowState string

const (
	WorkflowStateActive             WorkflowState = "active"
	WorkflowStateDeleted            WorkflowState = "deleted"
	WorkflowStateDisabledFork       WorkflowState = "disabled_fork"
	WorkflowStateDisabledInactivity WorkflowState = "disabled_inactivity"
	WorkflowStateDisabledManually   WorkflowState = "disabled_manually"
)

// MarshalText implements encoding.TextMarshaler.
func (s WorkflowState) MarshalText() ([]byte, error) {
	switch s {
	case WorkflowStateActive:
		return []byte(s), nil
	case WorkflowStateDeleted:
		return []byte(s), nil
	case WorkflowStateDisabledFork:
		return []byte(s), nil
	case WorkflowStateDisabledInactivity:
		return []byte(s), nil
	case WorkflowStateDisabledManually:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WorkflowState) UnmarshalText(data []byte) error {
	switch WorkflowState(data) {
	case WorkflowStateActive:
		*s = WorkflowStateActive
		return nil
	case WorkflowStateDeleted:
		*s = WorkflowStateDeleted
		return nil
	case WorkflowStateDisabledFork:
		*s = WorkflowStateDisabledFork
		return nil
	case WorkflowStateDisabledInactivity:
		*s = WorkflowStateDisabledInactivity
		return nil
	case WorkflowStateDisabledManually:
		*s = WorkflowStateDisabledManually
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s ActionsCreateOrUpdateEnvironmentSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"],
		}).Validate(string(s.EncryptedValue)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "encrypted_value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateOrUpdateOrgSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EncryptedValue.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"],
				}).Validate(string(s.EncryptedValue.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "encrypted_value",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateOrUpdateOrgSecretReqVisibility) Validate() error {
	switch s {
	case "all":
		return nil
	case "private":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActionsCreateOrUpdateRepoSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EncryptedValue.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"],
				}).Validate(string(s.EncryptedValue.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "encrypted_value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateSelfHostedRunnerGroupForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Visibility.Set {
			if err := func() error {
				if err := s.Visibility.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateSelfHostedRunnerGroupForOrgReqVisibility) Validate() error {
	switch s {
	case "selected":
		return nil
	case "all":
		return nil
	case "private":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActionsEnterprisePermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.EnabledOrganizations.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_organizations",
			Error: err,
		})
	}
	if err := func() error {
		if s.AllowedActions.Set {
			if err := func() error {
				if err := s.AllowedActions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListArtifactsForRepoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Artifacts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "artifacts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListEnvironmentSecretsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Secrets == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListJobsForWorkflowRunFilter) Validate() error {
	switch s {
	case "latest":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActionsListJobsForWorkflowRunOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Jobs == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Jobs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jobs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListOrgSecretsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Secrets == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Secrets {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListRepoSecretsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Secrets == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListRepoWorkflowsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Workflows == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Workflows {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "workflows",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelectedReposForOrgSecretOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnerGroupsForOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.RunnerGroups == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RunnerGroups {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runner_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnersForOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnersForRepoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnersInGroupForOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Runners == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListWorkflowRunArtifactsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Artifacts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "artifacts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListWorkflowRunsForRepoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.WorkflowRuns == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "workflow_runs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListWorkflowRunsForRepoStatus) Validate() error {
	switch s {
	case "completed":
		return nil
	case "action_required":
		return nil
	case "cancelled":
		return nil
	case "failure":
		return nil
	case "neutral":
		return nil
	case "skipped":
		return nil
	case "stale":
		return nil
	case "success":
		return nil
	case "timed_out":
		return nil
	case "in_progress":
		return nil
	case "queued":
		return nil
	case "requested":
		return nil
	case "waiting":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActionsOrganizationPermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.EnabledRepositories.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_repositories",
			Error: err,
		})
	}
	if err := func() error {
		if s.AllowedActions.Set {
			if err := func() error {
				if err := s.AllowedActions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsRepositoryPermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AllowedActions.Set {
			if err := func() error {
				if err := s.AllowedActions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsReviewPendingDeploymentsForRunReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EnvironmentIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environment_ids",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsReviewPendingDeploymentsForRunReqState) Validate() error {
	switch s {
	case "approved":
		return nil
	case "rejected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActionsSetGithubActionsPermissionsOrganizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.EnabledRepositories.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_repositories",
			Error: err,
		})
	}
	if err := func() error {
		if s.AllowedActions.Set {
			if err := func() error {
				if err := s.AllowedActions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetGithubActionsPermissionsRepositoryReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AllowedActions.Set {
			if err := func() error {
				if err := s.AllowedActions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedRepositoryIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_repository_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetSelectedReposForOrgSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedRepositoryIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_repository_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedRepositoryIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_repository_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetSelfHostedRunnersInGroupForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsUpdateSelfHostedRunnerGroupForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Visibility.Set {
			if err := func() error {
				if err := s.Visibility.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsUpdateSelfHostedRunnerGroupForOrgReqVisibility) Validate() error {
	switch s {
	case "selected":
		return nil
	case "all":
		return nil
	case "private":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActivityListNotificationsForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ActivityListPublicEventsForRepoNetworkOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ActivityListPublicEventsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ActivityListReposStarredByAuthenticatedUserDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ActivityListReposStarredByAuthenticatedUserSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s AllowedActions) Validate() error {
	switch s {
	case "all":
		return nil
	case "local_only":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Actions.Set {
			if err := func() error {
				if err := s.Actions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "actions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Administration.Set {
			if err := func() error {
				if err := s.Administration.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "administration",
			Error: err,
		})
	}
	if err := func() error {
		if s.Checks.Set {
			if err := func() error {
				if err := s.Checks.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "checks",
			Error: err,
		})
	}
	if err := func() error {
		if s.ContentReferences.Set {
			if err := func() error {
				if err := s.ContentReferences.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_references",
			Error: err,
		})
	}
	if err := func() error {
		if s.Contents.Set {
			if err := func() error {
				if err := s.Contents.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contents",
			Error: err,
		})
	}
	if err := func() error {
		if s.Deployments.Set {
			if err := func() error {
				if err := s.Deployments.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deployments",
			Error: err,
		})
	}
	if err := func() error {
		if s.Environments.Set {
			if err := func() error {
				if err := s.Environments.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environments",
			Error: err,
		})
	}
	if err := func() error {
		if s.Issues.Set {
			if err := func() error {
				if err := s.Issues.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issues",
			Error: err,
		})
	}
	if err := func() error {
		if s.Metadata.Set {
			if err := func() error {
				if err := s.Metadata.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if err := func() error {
		if s.Packages.Set {
			if err := func() error {
				if err := s.Packages.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "packages",
			Error: err,
		})
	}
	if err := func() error {
		if s.Pages.Set {
			if err := func() error {
				if err := s.Pages.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pages",
			Error: err,
		})
	}
	if err := func() error {
		if s.PullRequests.Set {
			if err := func() error {
				if err := s.PullRequests.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pull_requests",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepositoryHooks.Set {
			if err := func() error {
				if err := s.RepositoryHooks.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_hooks",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepositoryProjects.Set {
			if err := func() error {
				if err := s.RepositoryProjects.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_projects",
			Error: err,
		})
	}
	if err := func() error {
		if s.SecretScanningAlerts.Set {
			if err := func() error {
				if err := s.SecretScanningAlerts.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secret_scanning_alerts",
			Error: err,
		})
	}
	if err := func() error {
		if s.Secrets.Set {
			if err := func() error {
				if err := s.Secrets.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if err := func() error {
		if s.SecurityEvents.Set {
			if err := func() error {
				if err := s.SecurityEvents.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security_events",
			Error: err,
		})
	}
	if err := func() error {
		if s.SingleFile.Set {
			if err := func() error {
				if err := s.SingleFile.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "single_file",
			Error: err,
		})
	}
	if err := func() error {
		if s.Statuses.Set {
			if err := func() error {
				if err := s.Statuses.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statuses",
			Error: err,
		})
	}
	if err := func() error {
		if s.VulnerabilityAlerts.Set {
			if err := func() error {
				if err := s.VulnerabilityAlerts.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vulnerability_alerts",
			Error: err,
		})
	}
	if err := func() error {
		if s.Workflows.Set {
			if err := func() error {
				if err := s.Workflows.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "workflows",
			Error: err,
		})
	}
	if err := func() error {
		if s.Members.Set {
			if err := func() error {
				if err := s.Members.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationAdministration.Set {
			if err := func() error {
				if err := s.OrganizationAdministration.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_administration",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationHooks.Set {
			if err := func() error {
				if err := s.OrganizationHooks.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_hooks",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationPlan.Set {
			if err := func() error {
				if err := s.OrganizationPlan.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_plan",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationProjects.Set {
			if err := func() error {
				if err := s.OrganizationProjects.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_projects",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationPackages.Set {
			if err := func() error {
				if err := s.OrganizationPackages.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_packages",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationSecrets.Set {
			if err := func() error {
				if err := s.OrganizationSecrets.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_secrets",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationSelfHostedRunners.Set {
			if err := func() error {
				if err := s.OrganizationSelfHostedRunners.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_self_hosted_runners",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationUserBlocking.Set {
			if err := func() error {
				if err := s.OrganizationUserBlocking.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_user_blocking",
			Error: err,
		})
	}
	if err := func() error {
		if s.TeamDiscussions.Set {
			if err := func() error {
				if err := s.TeamDiscussions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "team_discussions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppPermissionsActions) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsAdministration) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsChecks) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsContentReferences) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsContents) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsDeployments) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsEnvironments) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsIssues) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsMembers) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsMetadata) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationAdministration) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationHooks) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationPackages) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationPlan) Validate() error {
	switch s {
	case "read":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationProjects) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationSecrets) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationSelfHostedRunners) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsOrganizationUserBlocking) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsPackages) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsPages) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsPullRequests) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsRepositoryHooks) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsRepositoryProjects) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsSecretScanningAlerts) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsSecrets) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsSecurityEvents) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsSingleFile) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsStatuses) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsTeamDiscussions) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsVulnerabilityAlerts) Validate() error {
	switch s {
	case "read":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppPermissionsWorkflows) Validate() error {
	switch s {
	case "write":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ApplicationGrant) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsCreateContentAttachmentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Title)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "title",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsCreateInstallationAccessTokenReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permissions.Set {
			if err := func() error {
				if err := s.Permissions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsListAccountsForPlanDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppsListAccountsForPlanOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsListAccountsForPlanSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppsListAccountsForPlanStubbedDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppsListAccountsForPlanStubbedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsListAccountsForPlanStubbedSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AppsListInstallationReposForAuthenticatedUserOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsListPlansOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsListPlansStubbedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsListReposAccessibleToInstallationOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsListWebhookDeliveriesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s AppsScopeTokenReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permissions.Set {
			if err := func() error {
				if err := s.Permissions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsUpdateWebhookConfigForAppReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AuthenticationToken) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RepositorySelection.Set {
			if err := func() error {
				if err := s.RepositorySelection.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_selection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AuthenticationTokenRepositorySelection) Validate() error {
	switch s {
	case "all":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s AuthorAssociation) Validate() error {
	switch s {
	case "COLLABORATOR":
		return nil
	case "CONTRIBUTOR":
		return nil
	case "FIRST_TIMER":
		return nil
	case "FIRST_TIME_CONTRIBUTOR":
		return nil
	case "MANNEQUIN":
		return nil
	case "MEMBER":
		return nil
	case "NONE":
		return nil
	case "OWNER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Authorization) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Installation.Set {
			if err := func() error {
				if err := s.Installation.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "installation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AutoMerge) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.MergeMethod.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_method",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AutoMergeMergeMethod) Validate() error {
	switch s {
	case "merge":
		return nil
	case "squash":
		return nil
	case "rebase":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s BranchProtection) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredStatusChecks.Set {
			if err := func() error {
				if err := s.RequiredStatusChecks.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_status_checks",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredPullRequestReviews.Set {
			if err := func() error {
				if err := s.RequiredPullRequestReviews.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_pull_request_reviews",
			Error: err,
		})
	}
	if err := func() error {
		if s.Restrictions.Set {
			if err := func() error {
				if err := s.Restrictions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchProtectionRequiredStatusChecks) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchRestrictionPolicy) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if err := func() error {
		if s.Apps == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchWithProtection) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Commit.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Protection.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "protection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CheckRun) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Conclusion.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conclusion",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.App.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "app",
			Error: err,
		})
	}
	if err := func() error {
		if s.PullRequests == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pull_requests",
			Error: err,
		})
	}
	if err := func() error {
		if s.Deployment.Set {
			if err := func() error {
				if err := s.Deployment.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deployment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CheckRunConclusion) Validate() error {
	switch s {
	case "success":
		return nil
	case "failure":
		return nil
	case "neutral":
		return nil
	case "cancelled":
		return nil
	case "skipped":
		return nil
	case "timed_out":
		return nil
	case "action_required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CheckRunStatus) Validate() error {
	switch s {
	case "queued":
		return nil
	case "in_progress":
		return nil
	case "completed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CheckSuite) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Conclusion.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conclusion",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.App.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CheckSuiteConclusion) Validate() error {
	switch s {
	case "success":
		return nil
	case "failure":
		return nil
	case "neutral":
		return nil
	case "cancelled":
		return nil
	case "skipped":
		return nil
	case "timed_out":
		return nil
	case "action_required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CheckSuiteStatus) Validate() error {
	switch s {
	case "queued":
		return nil
	case "in_progress":
		return nil
	case "completed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ChecksCreateSuiteApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ChecksCreateSuiteApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ChecksListForRefFilter) Validate() error {
	switch s {
	case "latest":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ChecksListForRefOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CheckRuns == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.CheckRuns {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_runs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ChecksListForRefStatus) Validate() error {
	switch s {
	case "queued":
		return nil
	case "in_progress":
		return nil
	case "completed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ChecksListForSuiteFilter) Validate() error {
	switch s {
	case "latest":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ChecksListForSuiteOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CheckRuns == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.CheckRuns {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_runs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ChecksListForSuiteStatus) Validate() error {
	switch s {
	case "queued":
		return nil
	case "in_progress":
		return nil
	case "completed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ChecksListSuitesForRefOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CheckSuites == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.CheckSuites {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_suites",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CloneTraffic) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Clones == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clones",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeFrequencyStat) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s CodeScanningAlert) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.DismissedReason.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissed_reason",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Rule.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MostRecentInstance.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "most_recent_instance",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertClassification) Validate() error {
	switch s {
	case "source":
		return nil
	case "generated":
		return nil
	case "test":
		return nil
	case "library":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAlertDismissedReason) Validate() error {
	switch s {
	case "false positive":
		return nil
	case "won't fix":
		return nil
	case "used in tests":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAlertInstance) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Classifications {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "classifications",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertItems) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.DismissedReason.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissed_reason",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Rule.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MostRecentInstance.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "most_recent_instance",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Severity.Set {
			if err := func() error {
				if err := s.Severity.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "severity",
			Error: err,
		})
	}
	if err := func() error {
		if s.SecuritySeverityLevel.Set {
			if err := func() error {
				if err := s.SecuritySeverityLevel.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security_severity_level",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tags.Set {
			if err := func() error {
				if s.Tags.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertRuleSecuritySeverityLevel) Validate() error {
	switch s {
	case "low":
		return nil
	case "medium":
		return nil
	case "high":
		return nil
	case "critical":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAlertRuleSeverity) Validate() error {
	switch s {
	case "none":
		return nil
	case "note":
		return nil
	case "warning":
		return nil
	case "error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAlertRuleSummary) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Severity.Set {
			if err := func() error {
				if err := s.Severity.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "severity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertRuleSummarySeverity) Validate() error {
	switch s {
	case "none":
		return nil
	case "note":
		return nil
	case "warning":
		return nil
	case "error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAlertSetState) Validate() error {
	switch s {
	case "open":
		return nil
	case "dismissed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAlertState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "dismissed":
		return nil
	case "fixed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningAnalysis) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.CommitSha.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commit_sha",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAnalysisCommitSha) Validate() error {
	if err := (validate.String{
		MinLength:    40,
		MinLengthSet: true,
		MaxLength:    40,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        regexMap["^[0-9a-fA-F]+$"],
	}).Validate(string(s)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil // return 1
}
func (s CodeScanningListAlertInstancesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s CodeScanningListAlertsForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s CodeScanningListRecentAnalysesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s CodeScanningSarifsStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.ProcessingStatus.Set {
			if err := func() error {
				if err := s.ProcessingStatus.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "processing_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningSarifsStatusProcessingStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "complete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CodeScanningUpdateAlertReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.DismissedReason.Set {
			if err := func() error {
				if err := s.DismissedReason.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissed_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningUploadSarifReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.CommitSha.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commit_sha",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodesOfConductGetAllCodesOfConductOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s CombinedCommitStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Statuses == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statuses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Commit) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Parents == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "parents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitActivity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Days == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "days",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitComparison) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.BaseCommit.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "base_commit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MergeBaseCommit.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_base_commit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.Commits == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Commits {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commits",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Files {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "files",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitComparisonStatus) Validate() error {
	switch s {
	case "diverged":
		return nil
	case "ahead":
		return nil
	case "behind":
		return nil
	case "identical":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CommitSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Parents == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "parents",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ContentReferenceAttachment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Title)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "title",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ContributorActivity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Weeks == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weeks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Deployment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeploymentSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeploymentStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    140,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Description)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeploymentStatusState) Validate() error {
	switch s {
	case "error":
		return nil
	case "failure":
		return nil
	case "inactive":
		return nil
	case "pending":
		return nil
	case "success":
		return nil
	case "queued":
		return nil
	case "in_progress":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s DiffEntry) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DiffEntryStatus) Validate() error {
	switch s {
	case "added":
		return nil
	case "removed":
		return nil
	case "modified":
		return nil
	case "renamed":
		return nil
	case "copied":
		return nil
	case "changed":
		return nil
	case "unchanged":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Email) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnabledOrganizations) Validate() error {
	switch s {
	case "all":
		return nil
	case "none":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnabledRepositories) Validate() error {
	switch s {
	case "all":
		return nil
	case "none":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Visibility.Set {
			if err := func() error {
				if err := s.Visibility.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReqVisibility) Validate() error {
	switch s {
	case "selected":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnterpriseAdminGetAuditLogInclude) Validate() error {
	switch s {
	case "web":
		return nil
	case "git":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnterpriseAdminGetAuditLogOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Organizations == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organizations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Organizations == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organizations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.RunnerGroups == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RunnerGroups {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runner_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.TotalCount.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.TotalCount.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalCount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Runners == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Emails == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.EnabledOrganizations.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_organizations",
			Error: err,
		})
	}
	if err := func() error {
		if s.AllowedActions.Set {
			if err := func() error {
				if err := s.AllowedActions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Emails == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedOrganizationIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_organization_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedOrganizationIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_organization_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Operations == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.Operations)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Operations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Operations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Op.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "op",
			Error: err,
		})
	}
	if err := func() error {
		if s.Value.Set {
			if err := func() error {
				if err := s.Value.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemOp) Validate() error {
	switch s {
	case "add":
		return nil
	case "Add":
		return nil
	case "remove":
		return nil
	case "Remove":
		return nil
	case "replace":
		return nil
	case "Replace":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue) Validate() error {
	switch s.Type {
	case StringEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue:
		return nil // no validation needed
	case EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue1EnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue:
		return nil // no validation needed
	case AnyArrayEnterpriseAdminUpdateAttributeForEnterpriseGroupReqOperationsItemValue:
		if s.AnyArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s EnterpriseAdminUpdateAttributeForEnterpriseUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Operations == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Operations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Visibility.Set {
			if err := func() error {
				if err := s.Visibility.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReqVisibility) Validate() error {
	switch s {
	case "selected":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EnvironmentApprovals) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Environments == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environments",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnvironmentApprovalsState) Validate() error {
	switch s {
	case "approved":
		return nil
	case "rejected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Event) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Payload.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payload",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EventPayload) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Issue.Set {
			if err := func() error {
				if err := s.Issue.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issue",
			Error: err,
		})
	}
	if err := func() error {
		if s.Comment.Set {
			if err := func() error {
				if err := s.Comment.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepository) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SecurityAndAnalysis.Set {
			if err := func() error {
				if err := s.SecurityAndAnalysis.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security_and_analysis",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysis) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.AdvancedSecurity.Set {
			if err := func() error {
				if err := s.AdvancedSecurity.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "advanced_security",
			Error: err,
		})
	}
	if err := func() error {
		if s.SecretScanning.Set {
			if err := func() error {
				if err := s.SecretScanning.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secret_scanning",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysisAdvancedSecurity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Status.Set {
			if err := func() error {
				if err := s.Status.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysisAdvancedSecurityStatus) Validate() error {
	switch s {
	case "enabled":
		return nil
	case "disabled":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s FullRepositorySecurityAndAnalysisSecretScanning) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Status.Set {
			if err := func() error {
				if err := s.Status.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysisSecretScanningStatus) Validate() error {
	switch s {
	case "enabled":
		return nil
	case "disabled":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GistComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Forks.Set {
			if err := func() error {
				if s.Forks.Value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range s.Forks.Value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forks",
			Error: err,
		})
	}
	if err := func() error {
		if s.History.Set {
			if err := func() error {
				if s.History.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "history",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistSimpleForksItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.User.Set {
			if err := func() error {
				if err := s.User.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistsCreateCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistsCreateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Public.Set {
			if err := func() error {
				if err := s.Public.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "public",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistsCreateReqPublic) Validate() error {
	switch s.Type {
	case BoolGistsCreateReqPublic:
		return nil // no validation needed
	case GistsCreateReqPublic1GistsCreateReqPublic:
		if err := s.GistsCreateReqPublic1.Validate(); err != nil {
			return err
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s GistsCreateReqPublic1) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GistsListCommentsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s GistsListCommitsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s GistsListForUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s GistsListForksOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s GistsListOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s GistsListPublicOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s GistsListStarredOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s GistsUpdateCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCommit) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Parents == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "parents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTagReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTagReqType) Validate() error {
	switch s {
	case "commit":
		return nil
	case "tree":
		return nil
	case "blob":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GitCreateTreeReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tree == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Tree {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tree",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTreeReqTreeItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Mode.Set {
			if err := func() error {
				if err := s.Mode.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mode",
			Error: err,
		})
	}
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTreeReqTreeItemMode) Validate() error {
	switch s {
	case "100644":
		return nil
	case "100755":
		return nil
	case "040000":
		return nil
	case "160000":
		return nil
	case "120000":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GitCreateTreeReqTreeItemType) Validate() error {
	switch s {
	case "blob":
		return nil
	case "tree":
		return nil
	case "commit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GitRef) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Object.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "object",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitRefObject) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    40,
			MinLengthSet: true,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Sha)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sha",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitTree) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tree == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tree",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitignoreGetAllTemplatesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s GpgKey) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Emails == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if err := func() error {
		if s.Subkeys == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subkeys",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Hook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s HookConfig) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s HookDelivery) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Duration)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "duration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s HookDeliveryItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Duration)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "duration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Hovercard) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Import) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ImportStatus) Validate() error {
	switch s {
	case "auth":
		return nil
	case "error":
		return nil
	case "none":
		return nil
	case "detecting":
		return nil
	case "choose":
		return nil
	case "auth_failed":
		return nil
	case "importing":
		return nil
	case "mapping":
		return nil
	case "waiting_to_push":
		return nil
	case "pushing":
		return nil
	case "complete":
		return nil
	case "setup":
		return nil
	case "unknown":
		return nil
	case "detection_found_multiple":
		return nil
	case "detection_found_nothing":
		return nil
	case "detection_needs_auth":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s InstallationToken) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permissions.Set {
			if err := func() error {
				if err := s.Permissions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepositorySelection.Set {
			if err := func() error {
				if err := s.RepositorySelection.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_selection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s InstallationTokenRepositorySelection) Validate() error {
	switch s {
	case "all":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Integration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s InteractionExpiry) Validate() error {
	switch s {
	case "one_day":
		return nil
	case "three_days":
		return nil
	case "one_week":
		return nil
	case "one_month":
		return nil
	case "six_months":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s InteractionGroup) Validate() error {
	switch s {
	case "existing_users":
		return nil
	case "contributors_only":
		return nil
	case "collaborators_only":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s InteractionLimit) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Limit.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if s.Expiry.Set {
			if err := func() error {
				if err := s.Expiry.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiry",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s InteractionLimitResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Limit.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Issue) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		if s.Assignees.Set {
			if err := func() error {
				if s.Assignees.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Milestone.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueEvent) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Issue.Set {
			if err := func() error {
				if err := s.Issue.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issue",
			Error: err,
		})
	}
	if err := func() error {
		if s.AuthorAssociation.Set {
			if err := func() error {
				if err := s.AuthorAssociation.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Assignees.Set {
			if err := func() error {
				if s.Assignees.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if s.Labels == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Milestone.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		if s.Assignees.Set {
			if err := func() error {
				if s.Assignees.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Milestone.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if s.PerformedViaGithubApp.Set {
			if err := func() error {
				if err := s.PerformedViaGithubApp.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesCreateMilestoneReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesCreateMilestoneReqState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListAssigneesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s IssuesListCommentsForRepoDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListCommentsForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListCommentsForRepoSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListCommentsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListEventsForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListFilter) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "created":
		return nil
	case "mentioned":
		return nil
	case "subscribed":
		return nil
	case "repos":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForAuthenticatedUserDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForAuthenticatedUserFilter) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "created":
		return nil
	case "mentioned":
		return nil
	case "subscribed":
		return nil
	case "repos":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListForAuthenticatedUserSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "comments":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForAuthenticatedUserState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForOrgDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForOrgFilter) Validate() error {
	switch s {
	case "assigned":
		return nil
	case "created":
		return nil
	case "mentioned":
		return nil
	case "subscribed":
		return nil
	case "repos":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForOrgOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListForOrgSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "comments":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForOrgState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForRepoDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListForRepoSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "comments":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListForRepoState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListLabelsForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s IssuesListLabelsOnIssueOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s IssuesListMilestonesDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListMilestonesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListMilestonesSort) Validate() error {
	switch s {
	case "due_on":
		return nil
	case "completeness":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListMilestonesState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s IssuesListSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "comments":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesListState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesLockReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.LockReason.Set {
			if err := func() error {
				if err := s.LockReason.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lock_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesLockReqLockReason) Validate() error {
	switch s {
	case "off-topic":
		return nil
	case "too heated":
		return nil
	case "resolved":
		return nil
	case "spam":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesRemoveLabelOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s IssuesUpdateMilestoneReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesUpdateMilestoneReqState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s IssuesUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesUpdateReqState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Job) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Steps {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "steps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JobStatus) Validate() error {
	switch s {
	case "queued":
		return nil
	case "in_progress":
		return nil
	case "completed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s JobStepsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JobStepsItemStatus) Validate() error {
	switch s {
	case "queued":
		return nil
	case "in_progress":
		return nil
	case "completed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s LabelSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s License) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permissions == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Conditions == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conditions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Limitations == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limitations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LicensesGetAllCommonlyUsedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s MarketplaceAccount) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Email.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.Email.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrganizationBillingEmail.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.OrganizationBillingEmail.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_billing_email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplaceListingPlan) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Bullets == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bullets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.MarketplacePendingChange.Set {
			if err := func() error {
				if err := s.MarketplacePendingChange.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "marketplace_pending_change",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MarketplacePurchase.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "marketplace_purchase",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplacePurchaseMarketplacePendingChange) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Plan.Set {
			if err := func() error {
				if err := s.Plan.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplacePurchaseMarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Plan.Set {
			if err := func() error {
				if err := s.Plan.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MergedUpstream) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.MergeType.Set {
			if err := func() error {
				if err := s.MergeType.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MergedUpstreamMergeType) Validate() error {
	switch s {
	case "merge":
		return nil
	case "fast-forward":
		return nil
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Migration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsGetCommitAuthorsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s MigrationsGetStatusForOrgExcludeItem) Validate() error {
	switch s {
	case "repositories":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s MigrationsListForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s MigrationsListForOrgExcludeItem) Validate() error {
	switch s {
	case "repositories":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s MigrationsListReposForOrgOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s MigrationsListReposForUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s MigrationsSetLfsPreferenceReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.UseLfs.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "use_lfs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsSetLfsPreferenceReqUseLfs) Validate() error {
	switch s {
	case "opt_in":
		return nil
	case "opt_out":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s MigrationsStartForAuthenticatedUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Exclude {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exclude",
			Error: err,
		})
	}
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsStartForAuthenticatedUserReqExcludeItem) Validate() error {
	switch s {
	case "repositories":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s MigrationsStartForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Exclude {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exclude",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsStartForOrgReqExcludeItem) Validate() error {
	switch s {
	case "repositories":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s MigrationsStartImportReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Vcs.Set {
			if err := func() error {
				if err := s.Vcs.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vcs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsStartImportReqVcs) Validate() error {
	switch s {
	case "subversion":
		return nil
	case "git":
		return nil
	case "mercurial":
		return nil
	case "tfvc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Milestone) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MilestoneState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s NullableIntegration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NullableMilestone) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NullableMilestoneState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s NullableScopedInstallation) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Permissions.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.RepositorySelection.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_selection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NullableScopedInstallationRepositorySelection) Validate() error {
	switch s {
	case "all":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OAuthAuthorizationsCreateAuthorizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes.Set {
			if err := func() error {
				if s.Scopes.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientID.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.ClientID.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientSecret.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.ClientSecret.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_secret",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ClientSecret)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_secret",
			Error: err,
		})
	}
	if err := func() error {
		if s.Scopes.Set {
			if err := func() error {
				if s.Scopes.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ClientSecret)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_secret",
			Error: err,
		})
	}
	if err := func() error {
		if s.Scopes.Set {
			if err := func() error {
				if s.Scopes.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsListAuthorizationsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s OAuthAuthorizationsListGrantsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s OAuthAuthorizationsUpdateAuthorizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes.Set {
			if err := func() error {
				if s.Scopes.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s OrgHook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgMembership) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgMembershipRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "member":
		return nil
	case "billing_manager":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgMembershipState) Validate() error {
	switch s {
	case "active":
		return nil
	case "pending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrganizationActionsSecret) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrganizationActionsSecretVisibility) Validate() error {
	switch s {
	case "all":
		return nil
	case "private":
		return nil
	case "selected":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrganizationFull) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Email.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.Email.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if s.BillingEmail.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.BillingEmail.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "billing_email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrganizationSecretScanningAlert) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resolution.Set {
			if err := func() error {
				if err := s.Resolution.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resolution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsCreateInvitationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Role.Set {
			if err := func() error {
				if err := s.Role.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsCreateInvitationReqRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "direct_member":
		return nil
	case "billing_manager":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsCreateWebhookReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Config.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsCreateWebhookReqConfig) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsGetAuditLogInclude) Validate() error {
	switch s {
	case "web":
		return nil
	case "git":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsGetAuditLogOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsListBlockedUsersOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListFailedInvitationsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListInvitationTeamsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListMembersFilter) Validate() error {
	switch s {
	case "2fa_disabled":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsListMembersOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListMembersRole) Validate() error {
	switch s {
	case "all":
		return nil
	case "admin":
		return nil
	case "member":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsListMembershipsForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s OrgsListMembershipsForAuthenticatedUserState) Validate() error {
	switch s {
	case "active":
		return nil
	case "pending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsListOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListOutsideCollaboratorsFilter) Validate() error {
	switch s {
	case "2fa_disabled":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsListPendingInvitationsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s OrgsListWebhookDeliveriesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s OrgsListWebhooksOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s OrgsSetMembershipForUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Role.Set {
			if err := func() error {
				if err := s.Role.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsSetMembershipForUserReqRole) Validate() error {
	switch s {
	case "admin":
		return nil
	case "member":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsUpdateMembershipForAuthenticatedUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsUpdateMembershipForAuthenticatedUserReqState) Validate() error {
	switch s {
	case "active":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OrgsUpdateWebhookConfigForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsUpdateWebhookReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Config.Set {
			if err := func() error {
				if err := s.Config.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsUpdateWebhookReqConfig) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Package) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.PackageType.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "package_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackagePackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackageVersion) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Metadata.Set {
			if err := func() error {
				if err := s.Metadata.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackageVersionMetadata) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.PackageType.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "package_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Container.Set {
			if err := func() error {
				if err := s.Container.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "container",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackageVersionMetadataContainer) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tags == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackageVersionMetadataPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackageVisibility) Validate() error {
	switch s {
	case "private":
		return nil
	case "public":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesDeletePackageForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesDeletePackageForOrgPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesDeletePackageForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesDeletePackageVersionForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesDeletePackageVersionForOrgPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesDeletePackageVersionForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState) Validate() error {
	switch s {
	case "active":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgState) Validate() error {
	switch s {
	case "active":
		return nil
	case "deleted":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetPackageForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetPackageForOrganizationPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetPackageForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetPackageVersionForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetPackageVersionForOrganizationPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesGetPackageVersionForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesListPackagesForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesListPackagesForAuthenticatedUserVisibility) Validate() error {
	switch s {
	case "public":
		return nil
	case "private":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesListPackagesForOrganizationOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PackagesListPackagesForOrganizationPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesListPackagesForOrganizationVisibility) Validate() error {
	switch s {
	case "public":
		return nil
	case "private":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesListPackagesForUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PackagesListPackagesForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesListPackagesForUserVisibility) Validate() error {
	switch s {
	case "public":
		return nil
	case "private":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesRestorePackageForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesRestorePackageForOrgPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesRestorePackageForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesRestorePackageVersionForAuthenticatedUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesRestorePackageVersionForOrgPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PackagesRestorePackageVersionForUserPackageType) Validate() error {
	switch s {
	case "npm":
		return nil
	case "maven":
		return nil
	case "rubygems":
		return nil
	case "docker":
		return nil
	case "nuget":
		return nil
	case "container":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Page) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.ProtectedDomainState.Set {
			if err := func() error {
				if err := s.ProtectedDomainState.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "protected_domain_state",
			Error: err,
		})
	}
	if err := func() error {
		if s.HTTPSCertificate.Set {
			if err := func() error {
				if err := s.HTTPSCertificate.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "https_certificate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PageProtectedDomainState) Validate() error {
	switch s {
	case "pending":
		return nil
	case "verified":
		return nil
	case "unverified":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PageStatus) Validate() error {
	switch s {
	case "built":
		return nil
	case "building":
		return nil
	case "errored":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PagesHTTPSCertificate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Domains == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "domains",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PagesHTTPSCertificateState) Validate() error {
	switch s {
	case "new":
		return nil
	case "authorization_created":
		return nil
	case "authorization_pending":
		return nil
	case "authorized":
		return nil
	case "authorization_revoked":
		return nil
	case "issued":
		return nil
	case "uploaded":
		return nil
	case "approved":
		return nil
	case "errored":
		return nil
	case "bad_authz":
		return nil
	case "destroy_pending":
		return nil
	case "dns_changed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ParticipationStats) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.All == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "all",
			Error: err,
		})
	}
	if err := func() error {
		if s.Owner == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PrivateUser) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email.Value)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Project) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.OrganizationPermission.Set {
			if err := func() error {
				if err := s.OrganizationPermission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectOrganizationPermission) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsAddCollaboratorReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsAddCollaboratorReqPermission) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsListCardsArchivedState) Validate() error {
	switch s {
	case "all":
		return nil
	case "archived":
		return nil
	case "not_archived":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsListCardsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ProjectsListCollaboratorsAffiliation) Validate() error {
	switch s {
	case "outside":
		return nil
	case "direct":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsListCollaboratorsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ProjectsListColumnsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ProjectsListForOrgOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ProjectsListForOrgState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsListForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ProjectsListForRepoState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsListForUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ProjectsListForUserState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProjectsMoveCardReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(?:top|bottom|after:\\d+)$"],
		}).Validate(string(s.Position)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "position",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsMoveColumnReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^(?:first|last|after:\\d+)$"],
		}).Validate(string(s.Position)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "position",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.OrganizationPermission.Set {
			if err := func() error {
				if err := s.OrganizationPermission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsUpdateReqOrganizationPermission) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ProtectedBranch) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredStatusChecks.Set {
			if err := func() error {
				if err := s.RequiredStatusChecks.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_status_checks",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredPullRequestReviews.Set {
			if err := func() error {
				if err := s.RequiredPullRequestReviews.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_pull_request_reviews",
			Error: err,
		})
	}
	if err := func() error {
		if s.Restrictions.Set {
			if err := func() error {
				if err := s.Restrictions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranchPullRequestReview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredApprovingReviewCount.Set {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           6,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(s.RequiredApprovingReviewCount.Value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_approving_review_count",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranchRequiredPullRequestReviews) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.DismissalRestrictions.Set {
			if err := func() error {
				if err := s.DismissalRestrictions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissal_restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PublicUser) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email.Value)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Labels == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Milestone.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		if s.Assignees.Set {
			if err := func() error {
				if s.Assignees.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequestedReviewers.Set {
			if err := func() error {
				if s.RequestedReviewers.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_reviewers",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequestedTeams.Set {
			if err := func() error {
				if s.RequestedTeams.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_teams",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AutoMerge.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_merge",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestReview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestReviewComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if s.StartSide.Set {
			if err := func() error {
				if err := s.StartSide.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_side",
			Error: err,
		})
	}
	if err := func() error {
		if s.Side.Set {
			if err := func() error {
				if err := s.Side.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "side",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestReviewCommentSide) Validate() error {
	switch s {
	case "LEFT":
		return nil
	case "RIGHT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullRequestReviewCommentStartSide) Validate() error {
	switch s {
	case "LEFT":
		return nil
	case "RIGHT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullRequestReviewRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Milestone.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		if s.Assignees.Set {
			if err := func() error {
				if s.Assignees.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequestedReviewers.Set {
			if err := func() error {
				if s.RequestedReviewers.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_reviewers",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequestedTeams.Set {
			if err := func() error {
				if s.RequestedTeams.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_teams",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AutoMerge.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_merge",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsCreateReviewCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Side.Set {
			if err := func() error {
				if err := s.Side.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "side",
			Error: err,
		})
	}
	if err := func() error {
		if s.StartSide.Set {
			if err := func() error {
				if err := s.StartSide.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_side",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsCreateReviewCommentReqSide) Validate() error {
	switch s {
	case "LEFT":
		return nil
	case "RIGHT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsCreateReviewCommentReqStartSide) Validate() error {
	switch s {
	case "LEFT":
		return nil
	case "RIGHT":
		return nil
	case "side":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsCreateReviewReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Event.Set {
			if err := func() error {
				if err := s.Event.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsCreateReviewReqEvent) Validate() error {
	switch s {
	case "APPROVE":
		return nil
	case "REQUEST_CHANGES":
		return nil
	case "COMMENT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListCommentsForReviewOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PullsListDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListFilesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PullsListOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s PullsListReviewCommentsDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListReviewCommentsForRepoDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListReviewCommentsForRepoSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "created_at":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListReviewCommentsSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "popularity":
		return nil
	case "long-running":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsListState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsMergeReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.MergeMethod.Set {
			if err := func() error {
				if err := s.MergeMethod.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_method",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsMergeReqMergeMethod) Validate() error {
	switch s {
	case "merge":
		return nil
	case "squash":
		return nil
	case "rebase":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsRemoveRequestedReviewersReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Reviewers == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reviewers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsSubmitReviewReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Event.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsSubmitReviewReqEvent) Validate() error {
	switch s {
	case "APPROVE":
		return nil
	case "REQUEST_CHANGES":
		return nil
	case "COMMENT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s PullsUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsUpdateReqState) Validate() error {
	switch s {
	case "open":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Reaction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForCommitCommentApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForCommitCommentApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForCommitCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForCommitCommentReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForIssueApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForIssueApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForIssueCommentApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForIssueCommentApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForIssueCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForIssueCommentReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForIssueReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForIssueReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForPullRequestReviewCommentApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForPullRequestReviewCommentApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForPullRequestReviewCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForPullRequestReviewCommentReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForReleaseApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForReleaseApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForReleaseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForReleaseReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "laugh":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForTeamDiscussionCommentLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionCommentLegacyReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s ReactionsCreateForTeamDiscussionInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionInOrgReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsCreateForTeamDiscussionLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Content.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionLegacyReqContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForCommitCommentContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForCommitCommentOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReactionsListForIssueCommentContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForIssueCommentOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReactionsListForIssueContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForIssueOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReactionsListForPullRequestReviewCommentContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForPullRequestReviewCommentOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReactionsListForTeamDiscussionCommentInOrgContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForTeamDiscussionCommentLegacyContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForTeamDiscussionInOrgContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReactionsListForTeamDiscussionLegacyContent) Validate() error {
	switch s {
	case "+1":
		return nil
	case "-1":
		return nil
	case "laugh":
		return nil
	case "confused":
		return nil
	case "heart":
		return nil
	case "hooray":
		return nil
	case "rocket":
		return nil
	case "eyes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Release) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Assets == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Assets {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReleaseAsset) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReleaseAssetState) Validate() error {
	switch s {
	case "uploaded":
		return nil
	case "open":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s RepoSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposAddAppAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposAddAppAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposAddAppAccessRestrictionsReq0ReposAddAppAccessRestrictionsReq:
		if err := s.ReposAddAppAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposAddAppAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposAddAppAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Apps == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposAddCollaboratorReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposAddCollaboratorReqPermission) Validate() error {
	switch s {
	case "pull":
		return nil
	case "push":
		return nil
	case "admin":
		return nil
	case "maintain":
		return nil
	case "triage":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposAddStatusCheckContextsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposAddStatusCheckContextsReq) Validate() error {
	switch s.Type {
	case ReposAddStatusCheckContextsReq0ReposAddStatusCheckContextsReq:
		if err := s.ReposAddStatusCheckContextsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposAddStatusCheckContextsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposAddStatusCheckContextsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposAddTeamAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposAddTeamAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposAddTeamAccessRestrictionsReq0ReposAddTeamAccessRestrictionsReq:
		if err := s.ReposAddTeamAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposAddTeamAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposAddTeamAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposAddUserAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposAddUserAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposAddUserAccessRestrictionsReq0ReposAddUserAccessRestrictionsReq:
		if err := s.ReposAddUserAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposAddUserAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposAddUserAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateCommitStatusReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateCommitStatusReqState) Validate() error {
	switch s {
	case "error":
		return nil
	case "failure":
		return nil
	case "pending":
		return nil
	case "success":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposCreateDeploymentStatusReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Environment.Set {
			if err := func() error {
				if err := s.Environment.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateDeploymentStatusReqEnvironment) Validate() error {
	switch s {
	case "production":
		return nil
	case "staging":
		return nil
	case "qa":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposCreateDeploymentStatusReqState) Validate() error {
	switch s {
	case "error":
		return nil
	case "failure":
		return nil
	case "inactive":
		return nil
	case "in_progress":
		return nil
	case "queued":
		return nil
	case "pending":
		return nil
	case "success":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposCreateDispatchEventReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.EventType)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientPayload.Set {
			if err := func() error {
				if err := s.ClientPayload.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_payload",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateDispatchEventReqClientPayload) Validate() error {
	var failures []validate.FieldError

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Visibility.Set {
			if err := func() error {
				if err := s.Visibility.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateInOrgReqVisibility) Validate() error {
	switch s {
	case "public":
		return nil
	case "private":
		return nil
	case "visibility":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposCreatePagesSiteReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Source.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreatePagesSiteReqSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Path.Set {
			if err := func() error {
				if err := s.Path.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "path",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreatePagesSiteReqSourcePath) Validate() error {
	switch s {
	case "/":
		return nil
	case "/docs":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposCreateWebhookReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Config.Set {
			if err := func() error {
				if err := s.Config.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateWebhookReqConfig) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposGetAllStatusCheckContextsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposGetClonesPer) Validate() error {
	switch s {
	case "":
		return nil
	case "day":
		return nil
	case "week":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposGetCodeFrequencyStatsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposGetCommitActivityStatsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposGetContributorsStatsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposGetPunchCardStatsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposGetTopPathsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposGetTopReferrersOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposGetViewsPer) Validate() error {
	switch s {
	case "":
		return nil
	case "day":
		return nil
	case "week":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListBranchesForHeadCommitOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListBranchesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposListCollaboratorsAffiliation) Validate() error {
	switch s {
	case "outside":
		return nil
	case "direct":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListCollaboratorsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListCommitStatusesForRefOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListCommitsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposListContributorsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListDeploymentStatusesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposListForAuthenticatedUserDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListForAuthenticatedUserSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "pushed":
		return nil
	case "full_name":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForAuthenticatedUserType) Validate() error {
	switch s {
	case "all":
		return nil
	case "owner":
		return nil
	case "public":
		return nil
	case "private":
		return nil
	case "member":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForAuthenticatedUserVisibility) Validate() error {
	switch s {
	case "all":
		return nil
	case "public":
		return nil
	case "private":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForOrgDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForOrgSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "pushed":
		return nil
	case "full_name":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForOrgType) Validate() error {
	switch s {
	case "all":
		return nil
	case "public":
		return nil
	case "private":
		return nil
	case "forks":
		return nil
	case "sources":
		return nil
	case "member":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForUserDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForUserSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	case "pushed":
		return nil
	case "full_name":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForUserType) Validate() error {
	switch s {
	case "all":
		return nil
	case "owner":
		return nil
	case "member":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListForksOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListForksSort) Validate() error {
	switch s {
	case "newest":
		return nil
	case "oldest":
		return nil
	case "stargazers":
		return nil
	case "watchers":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposListInvitationsForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposListPublicOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposListReleasesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposListWebhookDeliveriesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposListWebhooksOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposRemoveAppAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposRemoveAppAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposRemoveAppAccessRestrictionsReq0ReposRemoveAppAccessRestrictionsReq:
		if err := s.ReposRemoveAppAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposRemoveAppAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposRemoveAppAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Apps == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposRemoveStatusCheckContextsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposRemoveStatusCheckContextsReq) Validate() error {
	switch s.Type {
	case ReposRemoveStatusCheckContextsReq0ReposRemoveStatusCheckContextsReq:
		if err := s.ReposRemoveStatusCheckContextsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposRemoveStatusCheckContextsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposRemoveStatusCheckContextsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposRemoveTeamAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposRemoveTeamAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposRemoveTeamAccessRestrictionsReq0ReposRemoveTeamAccessRestrictionsReq:
		if err := s.ReposRemoveTeamAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposRemoveTeamAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposRemoveTeamAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposRemoveUserAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposRemoveUserAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposRemoveUserAccessRestrictionsReq0ReposRemoveUserAccessRestrictionsReq:
		if err := s.ReposRemoveUserAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposRemoveUserAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposRemoveUserAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposReplaceAllTopicsReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Names == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "names",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposSetAppAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s ReposSetAppAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposSetAppAccessRestrictionsReq0ReposSetAppAccessRestrictionsReq:
		if err := s.ReposSetAppAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposSetAppAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposSetAppAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Apps == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposSetStatusCheckContextsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposSetStatusCheckContextsReq) Validate() error {
	switch s.Type {
	case ReposSetStatusCheckContextsReq0ReposSetStatusCheckContextsReq:
		if err := s.ReposSetStatusCheckContextsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposSetStatusCheckContextsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposSetStatusCheckContextsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposSetTeamAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposSetTeamAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposSetTeamAccessRestrictionsReq0ReposSetTeamAccessRestrictionsReq:
		if err := s.ReposSetTeamAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposSetTeamAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposSetTeamAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposSetUserAccessRestrictionsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s ReposSetUserAccessRestrictionsReq) Validate() error {
	switch s.Type {
	case ReposSetUserAccessRestrictionsReq0ReposSetUserAccessRestrictionsReq:
		if err := s.ReposSetUserAccessRestrictionsReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayReposSetUserAccessRestrictionsReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ReposSetUserAccessRestrictionsReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateBranchProtectionReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.RequiredStatusChecks.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_status_checks",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Restrictions.Value.Validate(); err != nil {
			return err
		}
		return nil // return 1
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateBranchProtectionReqRequiredStatusChecks) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateBranchProtectionReqRestrictions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateInvitationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permissions.Set {
			if err := func() error {
				if err := s.Permissions.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateInvitationReqPermissions) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "maintain":
		return nil
	case "triage":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Visibility.Set {
			if err := func() error {
				if err := s.Visibility.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateReqVisibility) Validate() error {
	switch s {
	case "public":
		return nil
	case "private":
		return nil
	case "visibility":
		return nil
	case "internal":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReposUpdateWebhookConfigForRepoReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateWebhookReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Config.Set {
			if err := func() error {
				if err := s.Config.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "config",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateWebhookReqConfig) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RepositoryInvitation) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Permissions.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RepositoryInvitationPermissions) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	case "triage":
		return nil
	case "maintain":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReviewComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.AuthorAssociation.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		if s.Side.Set {
			if err := func() error {
				if err := s.Side.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "side",
			Error: err,
		})
	}
	if err := func() error {
		if s.StartSide.Set {
			if err := func() error {
				if err := s.StartSide.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_side",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReviewCommentSide) Validate() error {
	switch s {
	case "LEFT":
		return nil
	case "RIGHT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ReviewCommentStartSide) Validate() error {
	switch s {
	case "LEFT":
		return nil
	case "RIGHT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Runner) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Labels {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RunnerGroupsEnterprise) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ID)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RunnerGroupsOrg) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ID)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RunnerLabelsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RunnerLabelsItemType) Validate() error {
	switch s {
	case "read-only":
		return nil
	case "custom":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ScimEnterpriseGroup) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimEnterpriseUser) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimGroupListEnterprise) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalResults)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "totalResults",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ItemsPerPage)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "itemsPerPage",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.StartIndex)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "startIndex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimGroupListEnterpriseResourcesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimUserListEnterprise) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.TotalResults)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "totalResults",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ItemsPerPage)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "itemsPerPage",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.StartIndex)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "startIndex",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimUserListEnterpriseResourcesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchCodeOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchCodeOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchCodeSort) Validate() error {
	switch s {
	case "indexed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchCommitsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchCommitsOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchCommitsSort) Validate() error {
	switch s {
	case "author-date":
		return nil
	case "committer-date":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchIssuesAndPullRequestsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchIssuesAndPullRequestsOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchIssuesAndPullRequestsSort) Validate() error {
	switch s {
	case "comments":
		return nil
	case "reactions":
		return nil
	case "reactions-+1":
		return nil
	case "reactions--1":
		return nil
	case "reactions-smile":
		return nil
	case "reactions-thinking_face":
		return nil
	case "reactions-heart":
		return nil
	case "reactions-tada":
		return nil
	case "interactions":
		return nil
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchLabelsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchLabelsOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchLabelsSort) Validate() error {
	switch s {
	case "created":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchReposOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchReposOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchReposSort) Validate() error {
	switch s {
	case "stars":
		return nil
	case "forks":
		return nil
	case "help-wanted-issues":
		return nil
	case "updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchResultTextMatches) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s SearchTopicsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchUsersOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchUsersOrder) Validate() error {
	switch s {
	case "desc":
		return nil
	case "asc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SearchUsersSort) Validate() error {
	switch s {
	case "followers":
		return nil
	case "repositories":
		return nil
	case "joined":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SecretScanningAlert) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.State.Set {
			if err := func() error {
				if err := s.State.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resolution.Set {
			if err := func() error {
				if err := s.Resolution.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resolution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SecretScanningAlertResolution) Validate() error {
	switch s {
	case "false_positive":
		return nil
	case "wont_fix":
		return nil
	case "revoked":
		return nil
	case "used_in_tests":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SecretScanningAlertState) Validate() error {
	switch s {
	case "open":
		return nil
	case "resolved":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SecretScanningListAlertsForOrgOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s SecretScanningListAlertsForOrgState) Validate() error {
	switch s {
	case "open":
		return nil
	case "resolved":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SecretScanningListAlertsForRepoOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s SecretScanningListAlertsForRepoState) Validate() error {
	switch s {
	case "open":
		return nil
	case "resolved":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s SecretScanningUpdateAlertReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resolution.Set {
			if err := func() error {
				if err := s.Resolution.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resolution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ShortBranch) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Protection.Set {
			if err := func() error {
				if err := s.Protection.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "protection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s StatusCheckPolicy) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamFull) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Privacy.Set {
			if err := func() error {
				if err := s.Privacy.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Organization.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamFullPrivacy) Validate() error {
	switch s {
	case "closed":
		return nil
	case "secret":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamMembership) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Role.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamMembershipRole) Validate() error {
	switch s {
	case "member":
		return nil
	case "maintainer":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamMembershipState) Validate() error {
	switch s {
	case "active":
		return nil
	case "pending":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsAddOrUpdateMembershipForUserInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Role.Set {
			if err := func() error {
				if err := s.Role.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateMembershipForUserInOrgReqRole) Validate() error {
	switch s {
	case "member":
		return nil
	case "maintainer":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsAddOrUpdateMembershipForUserLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Role.Set {
			if err := func() error {
				if err := s.Role.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateMembershipForUserLegacyReqRole) Validate() error {
	switch s {
	case "member":
		return nil
	case "maintainer":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsAddOrUpdateProjectPermissionsInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateProjectPermissionsInOrgReqPermission) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsAddOrUpdateProjectPermissionsLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateProjectPermissionsLegacyReqPermission) Validate() error {
	switch s {
	case "read":
		return nil
	case "write":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsAddOrUpdateRepoPermissionsInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateRepoPermissionsInOrgReqPermission) Validate() error {
	switch s {
	case "pull":
		return nil
	case "push":
		return nil
	case "admin":
		return nil
	case "maintain":
		return nil
	case "triage":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsAddOrUpdateRepoPermissionsLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateRepoPermissionsLegacyReqPermission) Validate() error {
	switch s {
	case "pull":
		return nil
	case "push":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Groups == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsCreateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Privacy.Set {
			if err := func() error {
				if err := s.Privacy.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsCreateReqPermission) Validate() error {
	switch s {
	case "pull":
		return nil
	case "push":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsCreateReqPrivacy) Validate() error {
	switch s {
	case "secret":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListChildLegacyOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s TeamsListDiscussionCommentsInOrgDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListDiscussionCommentsLegacyDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListDiscussionsInOrgDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListDiscussionsLegacyDirection) Validate() error {
	switch s {
	case "asc":
		return nil
	case "desc":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s TeamsListMembersInOrgRole) Validate() error {
	switch s {
	case "member":
		return nil
	case "maintainer":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListMembersLegacyOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s TeamsListMembersLegacyRole) Validate() error {
	switch s {
	case "member":
		return nil
	case "maintainer":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsListOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s TeamsListProjectsLegacyOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s TeamsListReposLegacyOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s TeamsUpdateInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Privacy.Set {
			if err := func() error {
				if err := s.Privacy.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsUpdateInOrgReqPermission) Validate() error {
	switch s {
	case "pull":
		return nil
	case "push":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsUpdateInOrgReqPrivacy) Validate() error {
	switch s {
	case "secret":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsUpdateLegacyApplicationJSONCreated) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s TeamsUpdateLegacyApplicationJSONOK) Validate() error {
	if err := s.Validate(); err != nil {
		return err
	}
	return nil // return 1
}
func (s TeamsUpdateLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Privacy.Set {
			if err := func() error {
				if err := s.Privacy.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		if s.Permission.Set {
			if err := func() error {
				if err := s.Permission.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsUpdateLegacyReqPermission) Validate() error {
	switch s {
	case "pull":
		return nil
	case "push":
		return nil
	case "admin":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s TeamsUpdateLegacyReqPrivacy) Validate() error {
	switch s {
	case "secret":
		return nil
	case "closed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Topic) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Names == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "names",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TopicSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if err := func() error {
		if s.Related.Set {
			if err := func() error {
				if s.Related.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "related",
			Error: err,
		})
	}
	if err := func() error {
		if s.Aliases.Set {
			if err := func() error {
				if s.Aliases.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aliases",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserMarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Account.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Plan.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Score)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "score",
			Error: err,
		})
	}
	if err := func() error {
		if s.Email.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.Email.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if s.TextMatches == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.TextMatches.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersAddEmailForAuthenticatedCreatedApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s UsersAddEmailForAuthenticatedReq) Validate() error {
	switch s.Type {
	case UsersAddEmailForAuthenticatedReq0UsersAddEmailForAuthenticatedReq:
		if err := s.UsersAddEmailForAuthenticatedReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayUsersAddEmailForAuthenticatedReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	case StringUsersAddEmailForAuthenticatedReq:
		return nil // no validation needed
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s UsersAddEmailForAuthenticatedReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Emails == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersCreatePublicSSHKeyForAuthenticatedReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) "],
		}).Validate(string(s.Key)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "key",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersDeleteEmailForAuthenticatedReq) Validate() error {
	switch s.Type {
	case UsersDeleteEmailForAuthenticatedReq0UsersDeleteEmailForAuthenticatedReq:
		if err := s.UsersDeleteEmailForAuthenticatedReq0.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case StringArrayUsersDeleteEmailForAuthenticatedReq:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	case StringUsersDeleteEmailForAuthenticatedReq:
		return nil // no validation needed
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s UsersDeleteEmailForAuthenticatedReq0) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Emails == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersGetAuthenticatedOK) Validate() error {
	switch s.Type {
	case PrivateUserUsersGetAuthenticatedOK:
		if err := s.PrivateUser.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case PublicUserUsersGetAuthenticatedOK:
		if err := s.PublicUser.Validate(); err != nil {
			return err
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s UsersGetByUsernameOK) Validate() error {
	switch s.Type {
	case PrivateUserUsersGetByUsernameOK:
		if err := s.PrivateUser.Validate(); err != nil {
			return err
		}
		return nil // return 1
	case PublicUserUsersGetByUsernameOK:
		if err := s.PublicUser.Validate(); err != nil {
			return err
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s UsersGetContextForUserSubjectType) Validate() error {
	switch s {
	case "organization":
		return nil
	case "repository":
		return nil
	case "issue":
		return nil
	case "pull_request":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UsersListBlockedByAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s UsersListEmailsForAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s UsersListFollowedByAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s UsersListFollowersForAuthenticatedUserOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s UsersListGpgKeysForAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s UsersListOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s UsersListPublicEmailsForAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil // return 1
}
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil // return 1
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil // return 1
}
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedReqVisibility) Validate() error {
	switch s {
	case "public":
		return nil
	case "private":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ValidationError) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Errors {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "errors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ValidationErrorErrorsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Value.Set {
			if err := func() error {
				if err := s.Value.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ValidationErrorErrorsItemValue) Validate() error {
	switch s.Type {
	case StringValidationErrorErrorsItemValue:
		return nil // no validation needed
	case IntValidationErrorErrorsItemValue:
		return nil // no validation needed
	case StringArrayValidationErrorErrorsItemValue:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s ViewTraffic) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Views == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "views",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s WebhookConfig) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.InsecureSsl.Set {
			if err := func() error {
				if err := s.InsecureSsl.Value.Validate(); err != nil {
					return err
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "insecure_ssl",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s WebhookConfigInsecureSsl) Validate() error {
	switch s.Type {
	case StringWebhookConfigInsecureSsl:
		return nil // no validation needed
	case Float64WebhookConfigInsecureSsl:
		if err := (validate.Float{}).Validate(float64(s.Float64)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s Workflow) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.State.Validate(); err != nil {
			return err
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s WorkflowState) Validate() error {
	switch s {
	case "active":
		return nil
	case "deleted":
		return nil
	case "disabled_fork":
		return nil
	case "disabled_inactivity":
		return nil
	case "disabled_manually":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

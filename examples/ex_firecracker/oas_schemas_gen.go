// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Balloon device descriptor.
// Ref: #/components/schemas/Balloon
type Balloon struct {
	// Target balloon size in MiB.
	AmountMib int `json:"amount_mib"`
	// Whether the balloon should deflate when the guest has memory pressure.
	DeflateOnOom bool `json:"deflate_on_oom"`
	// Interval in seconds between refreshing statistics. A non-zero value will enable the statistics.
	// Defaults to 0.
	StatsPollingIntervalS OptInt `json:"stats_polling_interval_s"`
}

// GetAmountMib returns the value of AmountMib.
func (s *Balloon) GetAmountMib() int {
	return s.AmountMib
}

// GetDeflateOnOom returns the value of DeflateOnOom.
func (s *Balloon) GetDeflateOnOom() bool {
	return s.DeflateOnOom
}

// GetStatsPollingIntervalS returns the value of StatsPollingIntervalS.
func (s *Balloon) GetStatsPollingIntervalS() OptInt {
	return s.StatsPollingIntervalS
}

// SetAmountMib sets the value of AmountMib.
func (s *Balloon) SetAmountMib(val int) {
	s.AmountMib = val
}

// SetDeflateOnOom sets the value of DeflateOnOom.
func (s *Balloon) SetDeflateOnOom(val bool) {
	s.DeflateOnOom = val
}

// SetStatsPollingIntervalS sets the value of StatsPollingIntervalS.
func (s *Balloon) SetStatsPollingIntervalS(val OptInt) {
	s.StatsPollingIntervalS = val
}

func (*Balloon) describeBalloonConfigRes() {}

// Describes the balloon device statistics.
// Ref: #/components/schemas/BalloonStats
type BalloonStats struct {
	// Target number of pages the device aims to hold.
	TargetPages int `json:"target_pages"`
	// Actual number of pages the device is holding.
	ActualPages int `json:"actual_pages"`
	// Target amount of memory (in MiB) the device aims to hold.
	TargetMib int `json:"target_mib"`
	// Actual amount of memory (in MiB) the device is holding.
	ActualMib int `json:"actual_mib"`
	// The amount of memory that has been swapped in (in bytes).
	SwapIn OptInt64 `json:"swap_in"`
	// The amount of memory that has been swapped out to disk (in bytes).
	SwapOut OptInt64 `json:"swap_out"`
	// The number of major page faults that have occurred.
	MajorFaults OptInt64 `json:"major_faults"`
	// The number of minor page faults that have occurred.
	MinorFaults OptInt64 `json:"minor_faults"`
	// The amount of memory not being used for any purpose (in bytes).
	FreeMemory OptInt64 `json:"free_memory"`
	// The total amount of memory available (in bytes).
	TotalMemory OptInt64 `json:"total_memory"`
	// An estimate of how much memory is available (in bytes) for starting new applications, without
	// pushing the system to swap.
	AvailableMemory OptInt64 `json:"available_memory"`
	// The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically
	// these pages are used for caching files from disk.
	DiskCaches OptInt64 `json:"disk_caches"`
	// The number of successful hugetlb page allocations in the guest.
	HugetlbAllocations OptInt64 `json:"hugetlb_allocations"`
	// The number of failed hugetlb page allocations in the guest.
	HugetlbFailures OptInt64 `json:"hugetlb_failures"`
}

// GetTargetPages returns the value of TargetPages.
func (s *BalloonStats) GetTargetPages() int {
	return s.TargetPages
}

// GetActualPages returns the value of ActualPages.
func (s *BalloonStats) GetActualPages() int {
	return s.ActualPages
}

// GetTargetMib returns the value of TargetMib.
func (s *BalloonStats) GetTargetMib() int {
	return s.TargetMib
}

// GetActualMib returns the value of ActualMib.
func (s *BalloonStats) GetActualMib() int {
	return s.ActualMib
}

// GetSwapIn returns the value of SwapIn.
func (s *BalloonStats) GetSwapIn() OptInt64 {
	return s.SwapIn
}

// GetSwapOut returns the value of SwapOut.
func (s *BalloonStats) GetSwapOut() OptInt64 {
	return s.SwapOut
}

// GetMajorFaults returns the value of MajorFaults.
func (s *BalloonStats) GetMajorFaults() OptInt64 {
	return s.MajorFaults
}

// GetMinorFaults returns the value of MinorFaults.
func (s *BalloonStats) GetMinorFaults() OptInt64 {
	return s.MinorFaults
}

// GetFreeMemory returns the value of FreeMemory.
func (s *BalloonStats) GetFreeMemory() OptInt64 {
	return s.FreeMemory
}

// GetTotalMemory returns the value of TotalMemory.
func (s *BalloonStats) GetTotalMemory() OptInt64 {
	return s.TotalMemory
}

// GetAvailableMemory returns the value of AvailableMemory.
func (s *BalloonStats) GetAvailableMemory() OptInt64 {
	return s.AvailableMemory
}

// GetDiskCaches returns the value of DiskCaches.
func (s *BalloonStats) GetDiskCaches() OptInt64 {
	return s.DiskCaches
}

// GetHugetlbAllocations returns the value of HugetlbAllocations.
func (s *BalloonStats) GetHugetlbAllocations() OptInt64 {
	return s.HugetlbAllocations
}

// GetHugetlbFailures returns the value of HugetlbFailures.
func (s *BalloonStats) GetHugetlbFailures() OptInt64 {
	return s.HugetlbFailures
}

// SetTargetPages sets the value of TargetPages.
func (s *BalloonStats) SetTargetPages(val int) {
	s.TargetPages = val
}

// SetActualPages sets the value of ActualPages.
func (s *BalloonStats) SetActualPages(val int) {
	s.ActualPages = val
}

// SetTargetMib sets the value of TargetMib.
func (s *BalloonStats) SetTargetMib(val int) {
	s.TargetMib = val
}

// SetActualMib sets the value of ActualMib.
func (s *BalloonStats) SetActualMib(val int) {
	s.ActualMib = val
}

// SetSwapIn sets the value of SwapIn.
func (s *BalloonStats) SetSwapIn(val OptInt64) {
	s.SwapIn = val
}

// SetSwapOut sets the value of SwapOut.
func (s *BalloonStats) SetSwapOut(val OptInt64) {
	s.SwapOut = val
}

// SetMajorFaults sets the value of MajorFaults.
func (s *BalloonStats) SetMajorFaults(val OptInt64) {
	s.MajorFaults = val
}

// SetMinorFaults sets the value of MinorFaults.
func (s *BalloonStats) SetMinorFaults(val OptInt64) {
	s.MinorFaults = val
}

// SetFreeMemory sets the value of FreeMemory.
func (s *BalloonStats) SetFreeMemory(val OptInt64) {
	s.FreeMemory = val
}

// SetTotalMemory sets the value of TotalMemory.
func (s *BalloonStats) SetTotalMemory(val OptInt64) {
	s.TotalMemory = val
}

// SetAvailableMemory sets the value of AvailableMemory.
func (s *BalloonStats) SetAvailableMemory(val OptInt64) {
	s.AvailableMemory = val
}

// SetDiskCaches sets the value of DiskCaches.
func (s *BalloonStats) SetDiskCaches(val OptInt64) {
	s.DiskCaches = val
}

// SetHugetlbAllocations sets the value of HugetlbAllocations.
func (s *BalloonStats) SetHugetlbAllocations(val OptInt64) {
	s.HugetlbAllocations = val
}

// SetHugetlbFailures sets the value of HugetlbFailures.
func (s *BalloonStats) SetHugetlbFailures(val OptInt64) {
	s.HugetlbFailures = val
}

func (*BalloonStats) describeBalloonStatsRes() {}

// Update the statistics polling interval, with the first statistics update scheduled immediately.
// Statistics cannot be turned on/off after boot.
// Ref: #/components/schemas/BalloonStatsUpdate
type BalloonStatsUpdate struct {
	// Interval in seconds between refreshing statistics.
	StatsPollingIntervalS int `json:"stats_polling_interval_s"`
}

// GetStatsPollingIntervalS returns the value of StatsPollingIntervalS.
func (s *BalloonStatsUpdate) GetStatsPollingIntervalS() int {
	return s.StatsPollingIntervalS
}

// SetStatsPollingIntervalS sets the value of StatsPollingIntervalS.
func (s *BalloonStatsUpdate) SetStatsPollingIntervalS(val int) {
	s.StatsPollingIntervalS = val
}

// Balloon device descriptor.
// Ref: #/components/schemas/BalloonUpdate
type BalloonUpdate struct {
	// Target balloon size in MiB.
	AmountMib int `json:"amount_mib"`
}

// GetAmountMib returns the value of AmountMib.
func (s *BalloonUpdate) GetAmountMib() int {
	return s.AmountMib
}

// SetAmountMib sets the value of AmountMib.
func (s *BalloonUpdate) SetAmountMib(val int) {
	s.AmountMib = val
}

// Boot source descriptor.
// Ref: #/components/schemas/BootSource
type BootSource struct {
	// Kernel boot arguments.
	BootArgs OptString `json:"boot_args"`
	// Host level path to the initrd image used to boot the guest.
	InitrdPath OptString `json:"initrd_path"`
	// Host level path to the kernel image used to boot the guest.
	KernelImagePath string `json:"kernel_image_path"`
}

// GetBootArgs returns the value of BootArgs.
func (s *BootSource) GetBootArgs() OptString {
	return s.BootArgs
}

// GetInitrdPath returns the value of InitrdPath.
func (s *BootSource) GetInitrdPath() OptString {
	return s.InitrdPath
}

// GetKernelImagePath returns the value of KernelImagePath.
func (s *BootSource) GetKernelImagePath() string {
	return s.KernelImagePath
}

// SetBootArgs sets the value of BootArgs.
func (s *BootSource) SetBootArgs(val OptString) {
	s.BootArgs = val
}

// SetInitrdPath sets the value of InitrdPath.
func (s *BootSource) SetInitrdPath(val OptString) {
	s.InitrdPath = val
}

// SetKernelImagePath sets the value of KernelImagePath.
func (s *BootSource) SetKernelImagePath(val string) {
	s.KernelImagePath = val
}

// The CPU Template defines a set of flags to be disabled from the microvm so that the features
// exposed to the guest are the same as in the selected instance type.
// Ref: #/components/schemas/CpuTemplate
type CpuTemplate string

const (
	CpuTemplateC3 CpuTemplate = "C3"
	CpuTemplateT2 CpuTemplate = "T2"
)

// AllValues returns all CpuTemplate values.
func (CpuTemplate) AllValues() []CpuTemplate {
	return []CpuTemplate{
		CpuTemplateC3,
		CpuTemplateT2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CpuTemplate) MarshalText() ([]byte, error) {
	switch s {
	case CpuTemplateC3:
		return []byte(s), nil
	case CpuTemplateT2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CpuTemplate) UnmarshalText(data []byte) error {
	switch CpuTemplate(data) {
	case CpuTemplateC3:
		*s = CpuTemplateC3
		return nil
	case CpuTemplateT2:
		*s = CpuTemplateT2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreateSnapshotNoContent is response for CreateSnapshot operation.
type CreateSnapshotNoContent struct{}

func (*CreateSnapshotNoContent) createSnapshotRes() {}

// CreateSyncActionNoContent is response for CreateSyncAction operation.
type CreateSyncActionNoContent struct{}

func (*CreateSyncActionNoContent) createSyncActionRes() {}

// Ref: #/components/schemas/Drive
type Drive struct {
	DriveID string `json:"drive_id"`
	// Represents the caching strategy for the block device.
	CacheType    OptString `json:"cache_type"`
	IsReadOnly   bool      `json:"is_read_only"`
	IsRootDevice bool      `json:"is_root_device"`
	// Represents the unique id of the boot partition of this device. It is optional and it will be taken
	// into account only if the is_root_device field is true.
	Partuuid OptString `json:"partuuid"`
	// Host level path for the guest drive.
	PathOnHost  string         `json:"path_on_host"`
	RateLimiter OptRateLimiter `json:"rate_limiter"`
}

// GetDriveID returns the value of DriveID.
func (s *Drive) GetDriveID() string {
	return s.DriveID
}

// GetCacheType returns the value of CacheType.
func (s *Drive) GetCacheType() OptString {
	return s.CacheType
}

// GetIsReadOnly returns the value of IsReadOnly.
func (s *Drive) GetIsReadOnly() bool {
	return s.IsReadOnly
}

// GetIsRootDevice returns the value of IsRootDevice.
func (s *Drive) GetIsRootDevice() bool {
	return s.IsRootDevice
}

// GetPartuuid returns the value of Partuuid.
func (s *Drive) GetPartuuid() OptString {
	return s.Partuuid
}

// GetPathOnHost returns the value of PathOnHost.
func (s *Drive) GetPathOnHost() string {
	return s.PathOnHost
}

// GetRateLimiter returns the value of RateLimiter.
func (s *Drive) GetRateLimiter() OptRateLimiter {
	return s.RateLimiter
}

// SetDriveID sets the value of DriveID.
func (s *Drive) SetDriveID(val string) {
	s.DriveID = val
}

// SetCacheType sets the value of CacheType.
func (s *Drive) SetCacheType(val OptString) {
	s.CacheType = val
}

// SetIsReadOnly sets the value of IsReadOnly.
func (s *Drive) SetIsReadOnly(val bool) {
	s.IsReadOnly = val
}

// SetIsRootDevice sets the value of IsRootDevice.
func (s *Drive) SetIsRootDevice(val bool) {
	s.IsRootDevice = val
}

// SetPartuuid sets the value of Partuuid.
func (s *Drive) SetPartuuid(val OptString) {
	s.Partuuid = val
}

// SetPathOnHost sets the value of PathOnHost.
func (s *Drive) SetPathOnHost(val string) {
	s.PathOnHost = val
}

// SetRateLimiter sets the value of RateLimiter.
func (s *Drive) SetRateLimiter(val OptRateLimiter) {
	s.RateLimiter = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// A description of the error condition.
	FaultMessage OptString `json:"fault_message"`
}

// GetFaultMessage returns the value of FaultMessage.
func (s *Error) GetFaultMessage() OptString {
	return s.FaultMessage
}

// SetFaultMessage sets the value of FaultMessage.
func (s *Error) SetFaultMessage(val OptString) {
	s.FaultMessage = val
}

func (*Error) createSnapshotRes() {}

func (*Error) createSyncActionRes() {}

func (*Error) describeBalloonConfigRes() {}

func (*Error) describeBalloonStatsRes() {}

func (*Error) loadSnapshotRes() {}

func (*Error) mmdsConfigPutRes() {}

func (*Error) mmdsGetRes() {}

func (*Error) mmdsPatchRes() {}

func (*Error) mmdsPutRes() {}

func (*Error) patchBalloonRes() {}

func (*Error) patchBalloonStatsIntervalRes() {}

func (*Error) patchGuestDriveByIDRes() {}

func (*Error) patchGuestNetworkInterfaceByIDRes() {}

func (*Error) patchMachineConfigurationRes() {}

func (*Error) patchVmRes() {}

func (*Error) putBalloonRes() {}

func (*Error) putGuestBootSourceRes() {}

func (*Error) putGuestDriveByIDRes() {}

func (*Error) putGuestNetworkInterfaceByIDRes() {}

func (*Error) putGuestVsockRes() {}

func (*Error) putLoggerRes() {}

func (*Error) putMachineConfigurationRes() {}

func (*Error) putMetricsRes() {}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/FullVmConfiguration
type FullVmConfiguration struct {
	BalloonDevice OptBalloon `json:"balloon_device"`
	// Configurations for all block devices.
	BlockDevices  []Drive                 `json:"block_devices"`
	BootSource    OptBootSource           `json:"boot_source"`
	Logger        OptLogger               `json:"logger"`
	MachineConfig OptMachineConfiguration `json:"machine_config"`
	Metrics       OptMetrics              `json:"metrics"`
	MmdsConfig    OptMmdsConfig           `json:"mmds_config"`
	// Configurations for all net devices.
	NetDevices  []NetworkInterface `json:"net_devices"`
	VsockDevice OptVsock           `json:"vsock_device"`
}

// GetBalloonDevice returns the value of BalloonDevice.
func (s *FullVmConfiguration) GetBalloonDevice() OptBalloon {
	return s.BalloonDevice
}

// GetBlockDevices returns the value of BlockDevices.
func (s *FullVmConfiguration) GetBlockDevices() []Drive {
	return s.BlockDevices
}

// GetBootSource returns the value of BootSource.
func (s *FullVmConfiguration) GetBootSource() OptBootSource {
	return s.BootSource
}

// GetLogger returns the value of Logger.
func (s *FullVmConfiguration) GetLogger() OptLogger {
	return s.Logger
}

// GetMachineConfig returns the value of MachineConfig.
func (s *FullVmConfiguration) GetMachineConfig() OptMachineConfiguration {
	return s.MachineConfig
}

// GetMetrics returns the value of Metrics.
func (s *FullVmConfiguration) GetMetrics() OptMetrics {
	return s.Metrics
}

// GetMmdsConfig returns the value of MmdsConfig.
func (s *FullVmConfiguration) GetMmdsConfig() OptMmdsConfig {
	return s.MmdsConfig
}

// GetNetDevices returns the value of NetDevices.
func (s *FullVmConfiguration) GetNetDevices() []NetworkInterface {
	return s.NetDevices
}

// GetVsockDevice returns the value of VsockDevice.
func (s *FullVmConfiguration) GetVsockDevice() OptVsock {
	return s.VsockDevice
}

// SetBalloonDevice sets the value of BalloonDevice.
func (s *FullVmConfiguration) SetBalloonDevice(val OptBalloon) {
	s.BalloonDevice = val
}

// SetBlockDevices sets the value of BlockDevices.
func (s *FullVmConfiguration) SetBlockDevices(val []Drive) {
	s.BlockDevices = val
}

// SetBootSource sets the value of BootSource.
func (s *FullVmConfiguration) SetBootSource(val OptBootSource) {
	s.BootSource = val
}

// SetLogger sets the value of Logger.
func (s *FullVmConfiguration) SetLogger(val OptLogger) {
	s.Logger = val
}

// SetMachineConfig sets the value of MachineConfig.
func (s *FullVmConfiguration) SetMachineConfig(val OptMachineConfiguration) {
	s.MachineConfig = val
}

// SetMetrics sets the value of Metrics.
func (s *FullVmConfiguration) SetMetrics(val OptMetrics) {
	s.Metrics = val
}

// SetMmdsConfig sets the value of MmdsConfig.
func (s *FullVmConfiguration) SetMmdsConfig(val OptMmdsConfig) {
	s.MmdsConfig = val
}

// SetNetDevices sets the value of NetDevices.
func (s *FullVmConfiguration) SetNetDevices(val []NetworkInterface) {
	s.NetDevices = val
}

// SetVsockDevice sets the value of VsockDevice.
func (s *FullVmConfiguration) SetVsockDevice(val OptVsock) {
	s.VsockDevice = val
}

// Variant wrapper containing the real action.
// Ref: #/components/schemas/InstanceActionInfo
type InstanceActionInfo struct {
	// Enumeration indicating what type of action is contained in the payload.
	ActionType InstanceActionInfoActionType `json:"action_type"`
}

// GetActionType returns the value of ActionType.
func (s *InstanceActionInfo) GetActionType() InstanceActionInfoActionType {
	return s.ActionType
}

// SetActionType sets the value of ActionType.
func (s *InstanceActionInfo) SetActionType(val InstanceActionInfoActionType) {
	s.ActionType = val
}

// Enumeration indicating what type of action is contained in the payload.
type InstanceActionInfoActionType string

const (
	InstanceActionInfoActionTypeFlushMetrics   InstanceActionInfoActionType = "FlushMetrics"
	InstanceActionInfoActionTypeInstanceStart  InstanceActionInfoActionType = "InstanceStart"
	InstanceActionInfoActionTypeSendCtrlAltDel InstanceActionInfoActionType = "SendCtrlAltDel"
)

// AllValues returns all InstanceActionInfoActionType values.
func (InstanceActionInfoActionType) AllValues() []InstanceActionInfoActionType {
	return []InstanceActionInfoActionType{
		InstanceActionInfoActionTypeFlushMetrics,
		InstanceActionInfoActionTypeInstanceStart,
		InstanceActionInfoActionTypeSendCtrlAltDel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceActionInfoActionType) MarshalText() ([]byte, error) {
	switch s {
	case InstanceActionInfoActionTypeFlushMetrics:
		return []byte(s), nil
	case InstanceActionInfoActionTypeInstanceStart:
		return []byte(s), nil
	case InstanceActionInfoActionTypeSendCtrlAltDel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceActionInfoActionType) UnmarshalText(data []byte) error {
	switch InstanceActionInfoActionType(data) {
	case InstanceActionInfoActionTypeFlushMetrics:
		*s = InstanceActionInfoActionTypeFlushMetrics
		return nil
	case InstanceActionInfoActionTypeInstanceStart:
		*s = InstanceActionInfoActionTypeInstanceStart
		return nil
	case InstanceActionInfoActionTypeSendCtrlAltDel:
		*s = InstanceActionInfoActionTypeSendCtrlAltDel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes MicroVM instance information.
// Ref: #/components/schemas/InstanceInfo
type InstanceInfo struct {
	// Application name.
	AppName string `json:"app_name"`
	// MicroVM / instance ID.
	ID string `json:"id"`
	// The current detailed state (Not started, Running, Paused) of the Firecracker instance. This value
	// is read-only for the control-plane.
	State InstanceInfoState `json:"state"`
	// MicroVM hypervisor build version.
	VmmVersion string `json:"vmm_version"`
}

// GetAppName returns the value of AppName.
func (s *InstanceInfo) GetAppName() string {
	return s.AppName
}

// GetID returns the value of ID.
func (s *InstanceInfo) GetID() string {
	return s.ID
}

// GetState returns the value of State.
func (s *InstanceInfo) GetState() InstanceInfoState {
	return s.State
}

// GetVmmVersion returns the value of VmmVersion.
func (s *InstanceInfo) GetVmmVersion() string {
	return s.VmmVersion
}

// SetAppName sets the value of AppName.
func (s *InstanceInfo) SetAppName(val string) {
	s.AppName = val
}

// SetID sets the value of ID.
func (s *InstanceInfo) SetID(val string) {
	s.ID = val
}

// SetState sets the value of State.
func (s *InstanceInfo) SetState(val InstanceInfoState) {
	s.State = val
}

// SetVmmVersion sets the value of VmmVersion.
func (s *InstanceInfo) SetVmmVersion(val string) {
	s.VmmVersion = val
}

// The current detailed state (Not started, Running, Paused) of the Firecracker instance. This value
// is read-only for the control-plane.
type InstanceInfoState string

const (
	InstanceInfoStateNotStarted InstanceInfoState = "Not started"
	InstanceInfoStateRunning    InstanceInfoState = "Running"
	InstanceInfoStatePaused     InstanceInfoState = "Paused"
)

// AllValues returns all InstanceInfoState values.
func (InstanceInfoState) AllValues() []InstanceInfoState {
	return []InstanceInfoState{
		InstanceInfoStateNotStarted,
		InstanceInfoStateRunning,
		InstanceInfoStatePaused,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceInfoState) MarshalText() ([]byte, error) {
	switch s {
	case InstanceInfoStateNotStarted:
		return []byte(s), nil
	case InstanceInfoStateRunning:
		return []byte(s), nil
	case InstanceInfoStatePaused:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceInfoState) UnmarshalText(data []byte) error {
	switch InstanceInfoState(data) {
	case InstanceInfoStateNotStarted:
		*s = InstanceInfoStateNotStarted
		return nil
	case InstanceInfoStateRunning:
		*s = InstanceInfoStateRunning
		return nil
	case InstanceInfoStatePaused:
		*s = InstanceInfoStatePaused
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// LoadSnapshotNoContent is response for LoadSnapshot operation.
type LoadSnapshotNoContent struct{}

func (*LoadSnapshotNoContent) loadSnapshotRes() {}

// Describes the configuration option for the logging capability.
// Ref: #/components/schemas/Logger
type Logger struct {
	// Set the level. The possible values are case-insensitive.
	Level OptLoggerLevel `json:"level"`
	// Path to the named pipe or file for the human readable log output.
	LogPath string `json:"log_path"`
	// Whether or not to output the level in the logs.
	ShowLevel OptBool `json:"show_level"`
	// Whether or not to include the file path and line number of the log's origin.
	ShowLogOrigin OptBool `json:"show_log_origin"`
}

// GetLevel returns the value of Level.
func (s *Logger) GetLevel() OptLoggerLevel {
	return s.Level
}

// GetLogPath returns the value of LogPath.
func (s *Logger) GetLogPath() string {
	return s.LogPath
}

// GetShowLevel returns the value of ShowLevel.
func (s *Logger) GetShowLevel() OptBool {
	return s.ShowLevel
}

// GetShowLogOrigin returns the value of ShowLogOrigin.
func (s *Logger) GetShowLogOrigin() OptBool {
	return s.ShowLogOrigin
}

// SetLevel sets the value of Level.
func (s *Logger) SetLevel(val OptLoggerLevel) {
	s.Level = val
}

// SetLogPath sets the value of LogPath.
func (s *Logger) SetLogPath(val string) {
	s.LogPath = val
}

// SetShowLevel sets the value of ShowLevel.
func (s *Logger) SetShowLevel(val OptBool) {
	s.ShowLevel = val
}

// SetShowLogOrigin sets the value of ShowLogOrigin.
func (s *Logger) SetShowLogOrigin(val OptBool) {
	s.ShowLogOrigin = val
}

// Set the level. The possible values are case-insensitive.
type LoggerLevel string

const (
	LoggerLevelError   LoggerLevel = "Error"
	LoggerLevelWarning LoggerLevel = "Warning"
	LoggerLevelInfo    LoggerLevel = "Info"
	LoggerLevelDebug   LoggerLevel = "Debug"
)

// AllValues returns all LoggerLevel values.
func (LoggerLevel) AllValues() []LoggerLevel {
	return []LoggerLevel{
		LoggerLevelError,
		LoggerLevelWarning,
		LoggerLevelInfo,
		LoggerLevelDebug,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LoggerLevel) MarshalText() ([]byte, error) {
	switch s {
	case LoggerLevelError:
		return []byte(s), nil
	case LoggerLevelWarning:
		return []byte(s), nil
	case LoggerLevelInfo:
		return []byte(s), nil
	case LoggerLevelDebug:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LoggerLevel) UnmarshalText(data []byte) error {
	switch LoggerLevel(data) {
	case LoggerLevelError:
		*s = LoggerLevelError
		return nil
	case LoggerLevelWarning:
		*s = LoggerLevelWarning
		return nil
	case LoggerLevelInfo:
		*s = LoggerLevelInfo
		return nil
	case LoggerLevelDebug:
		*s = LoggerLevelDebug
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the number of vCPUs, memory size, Hyperthreading capabilities and the CPU template.
// Ref: #/components/schemas/MachineConfiguration
type MachineConfiguration struct {
	CPUTemplate OptCpuTemplate `json:"cpu_template"`
	// Flag for enabling/disabling Hyperthreading.
	HtEnabled bool `json:"ht_enabled"`
	// Memory size of VM.
	MemSizeMib int `json:"mem_size_mib"`
	// Enable dirty page tracking. If this is enabled, then incremental guest memory snapshots can be
	// created. These belong to diff snapshots, which contain, besides the microVM state, only the memory
	// dirtied since a previous snapshot. Full snapshots each contain a full copy of the guest memory.
	TrackDirtyPages OptBool `json:"track_dirty_pages"`
	// Number of vCPUs (either 1 or an even number).
	VcpuCount int `json:"vcpu_count"`
}

// GetCPUTemplate returns the value of CPUTemplate.
func (s *MachineConfiguration) GetCPUTemplate() OptCpuTemplate {
	return s.CPUTemplate
}

// GetHtEnabled returns the value of HtEnabled.
func (s *MachineConfiguration) GetHtEnabled() bool {
	return s.HtEnabled
}

// GetMemSizeMib returns the value of MemSizeMib.
func (s *MachineConfiguration) GetMemSizeMib() int {
	return s.MemSizeMib
}

// GetTrackDirtyPages returns the value of TrackDirtyPages.
func (s *MachineConfiguration) GetTrackDirtyPages() OptBool {
	return s.TrackDirtyPages
}

// GetVcpuCount returns the value of VcpuCount.
func (s *MachineConfiguration) GetVcpuCount() int {
	return s.VcpuCount
}

// SetCPUTemplate sets the value of CPUTemplate.
func (s *MachineConfiguration) SetCPUTemplate(val OptCpuTemplate) {
	s.CPUTemplate = val
}

// SetHtEnabled sets the value of HtEnabled.
func (s *MachineConfiguration) SetHtEnabled(val bool) {
	s.HtEnabled = val
}

// SetMemSizeMib sets the value of MemSizeMib.
func (s *MachineConfiguration) SetMemSizeMib(val int) {
	s.MemSizeMib = val
}

// SetTrackDirtyPages sets the value of TrackDirtyPages.
func (s *MachineConfiguration) SetTrackDirtyPages(val OptBool) {
	s.TrackDirtyPages = val
}

// SetVcpuCount sets the value of VcpuCount.
func (s *MachineConfiguration) SetVcpuCount(val int) {
	s.VcpuCount = val
}

// Describes the configuration option for the metrics capability.
// Ref: #/components/schemas/Metrics
type Metrics struct {
	// Path to the named pipe or file where the JSON-formatted metrics are flushed.
	MetricsPath string `json:"metrics_path"`
}

// GetMetricsPath returns the value of MetricsPath.
func (s *Metrics) GetMetricsPath() string {
	return s.MetricsPath
}

// SetMetricsPath sets the value of MetricsPath.
func (s *Metrics) SetMetricsPath(val string) {
	s.MetricsPath = val
}

// Defines the MMDS configuration.
// Ref: #/components/schemas/MmdsConfig
type MmdsConfig struct {
	// A valid IPv4 link-local address.
	Ipv4Address OptString `json:"ipv4_address"`
}

// GetIpv4Address returns the value of Ipv4Address.
func (s *MmdsConfig) GetIpv4Address() OptString {
	return s.Ipv4Address
}

// SetIpv4Address sets the value of Ipv4Address.
func (s *MmdsConfig) SetIpv4Address(val OptString) {
	s.Ipv4Address = val
}

// MmdsConfigPutNoContent is response for MmdsConfigPut operation.
type MmdsConfigPutNoContent struct{}

func (*MmdsConfigPutNoContent) mmdsConfigPutRes() {}

type MmdsGetOK struct{}

func (*MmdsGetOK) mmdsGetRes() {}

// MmdsPatchNoContent is response for MmdsPatch operation.
type MmdsPatchNoContent struct{}

func (*MmdsPatchNoContent) mmdsPatchRes() {}

type MmdsPatchReq struct{}

// MmdsPutNoContent is response for MmdsPut operation.
type MmdsPutNoContent struct{}

func (*MmdsPutNoContent) mmdsPutRes() {}

type MmdsPutReq struct{}

// Defines a network interface.
// Ref: #/components/schemas/NetworkInterface
type NetworkInterface struct {
	// If this field is set, the device model will reply to HTTP GET requests sent to the MMDS address
	// via this interface. In this case, both ARP requests for 169.254.169.254 and TCP segments heading
	// to the same address are intercepted by the device model, and do not reach the associated TAP
	// device.
	AllowMmdsRequests OptBool   `json:"allow_mmds_requests"`
	GuestMAC          OptString `json:"guest_mac"`
	// Host level path for the guest network interface.
	HostDevName   string         `json:"host_dev_name"`
	IfaceID       string         `json:"iface_id"`
	RxRateLimiter OptRateLimiter `json:"rx_rate_limiter"`
	TxRateLimiter OptRateLimiter `json:"tx_rate_limiter"`
}

// GetAllowMmdsRequests returns the value of AllowMmdsRequests.
func (s *NetworkInterface) GetAllowMmdsRequests() OptBool {
	return s.AllowMmdsRequests
}

// GetGuestMAC returns the value of GuestMAC.
func (s *NetworkInterface) GetGuestMAC() OptString {
	return s.GuestMAC
}

// GetHostDevName returns the value of HostDevName.
func (s *NetworkInterface) GetHostDevName() string {
	return s.HostDevName
}

// GetIfaceID returns the value of IfaceID.
func (s *NetworkInterface) GetIfaceID() string {
	return s.IfaceID
}

// GetRxRateLimiter returns the value of RxRateLimiter.
func (s *NetworkInterface) GetRxRateLimiter() OptRateLimiter {
	return s.RxRateLimiter
}

// GetTxRateLimiter returns the value of TxRateLimiter.
func (s *NetworkInterface) GetTxRateLimiter() OptRateLimiter {
	return s.TxRateLimiter
}

// SetAllowMmdsRequests sets the value of AllowMmdsRequests.
func (s *NetworkInterface) SetAllowMmdsRequests(val OptBool) {
	s.AllowMmdsRequests = val
}

// SetGuestMAC sets the value of GuestMAC.
func (s *NetworkInterface) SetGuestMAC(val OptString) {
	s.GuestMAC = val
}

// SetHostDevName sets the value of HostDevName.
func (s *NetworkInterface) SetHostDevName(val string) {
	s.HostDevName = val
}

// SetIfaceID sets the value of IfaceID.
func (s *NetworkInterface) SetIfaceID(val string) {
	s.IfaceID = val
}

// SetRxRateLimiter sets the value of RxRateLimiter.
func (s *NetworkInterface) SetRxRateLimiter(val OptRateLimiter) {
	s.RxRateLimiter = val
}

// SetTxRateLimiter sets the value of TxRateLimiter.
func (s *NetworkInterface) SetTxRateLimiter(val OptRateLimiter) {
	s.TxRateLimiter = val
}

// NewOptBalloon returns new OptBalloon with value set to v.
func NewOptBalloon(v Balloon) OptBalloon {
	return OptBalloon{
		Value: v,
		Set:   true,
	}
}

// OptBalloon is optional Balloon.
type OptBalloon struct {
	Value Balloon
	Set   bool
}

// IsSet returns true if OptBalloon was set.
func (o OptBalloon) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBalloon) Reset() {
	var v Balloon
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBalloon) SetTo(v Balloon) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBalloon) Get() (v Balloon, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBalloon) Or(d Balloon) Balloon {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBootSource returns new OptBootSource with value set to v.
func NewOptBootSource(v BootSource) OptBootSource {
	return OptBootSource{
		Value: v,
		Set:   true,
	}
}

// OptBootSource is optional BootSource.
type OptBootSource struct {
	Value BootSource
	Set   bool
}

// IsSet returns true if OptBootSource was set.
func (o OptBootSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBootSource) Reset() {
	var v BootSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBootSource) SetTo(v BootSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBootSource) Get() (v BootSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBootSource) Or(d BootSource) BootSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCpuTemplate returns new OptCpuTemplate with value set to v.
func NewOptCpuTemplate(v CpuTemplate) OptCpuTemplate {
	return OptCpuTemplate{
		Value: v,
		Set:   true,
	}
}

// OptCpuTemplate is optional CpuTemplate.
type OptCpuTemplate struct {
	Value CpuTemplate
	Set   bool
}

// IsSet returns true if OptCpuTemplate was set.
func (o OptCpuTemplate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCpuTemplate) Reset() {
	var v CpuTemplate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCpuTemplate) SetTo(v CpuTemplate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCpuTemplate) Get() (v CpuTemplate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCpuTemplate) Or(d CpuTemplate) CpuTemplate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogger returns new OptLogger with value set to v.
func NewOptLogger(v Logger) OptLogger {
	return OptLogger{
		Value: v,
		Set:   true,
	}
}

// OptLogger is optional Logger.
type OptLogger struct {
	Value Logger
	Set   bool
}

// IsSet returns true if OptLogger was set.
func (o OptLogger) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogger) Reset() {
	var v Logger
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogger) SetTo(v Logger) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogger) Get() (v Logger, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogger) Or(d Logger) Logger {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoggerLevel returns new OptLoggerLevel with value set to v.
func NewOptLoggerLevel(v LoggerLevel) OptLoggerLevel {
	return OptLoggerLevel{
		Value: v,
		Set:   true,
	}
}

// OptLoggerLevel is optional LoggerLevel.
type OptLoggerLevel struct {
	Value LoggerLevel
	Set   bool
}

// IsSet returns true if OptLoggerLevel was set.
func (o OptLoggerLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoggerLevel) Reset() {
	var v LoggerLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoggerLevel) SetTo(v LoggerLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoggerLevel) Get() (v LoggerLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoggerLevel) Or(d LoggerLevel) LoggerLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMachineConfiguration returns new OptMachineConfiguration with value set to v.
func NewOptMachineConfiguration(v MachineConfiguration) OptMachineConfiguration {
	return OptMachineConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptMachineConfiguration is optional MachineConfiguration.
type OptMachineConfiguration struct {
	Value MachineConfiguration
	Set   bool
}

// IsSet returns true if OptMachineConfiguration was set.
func (o OptMachineConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMachineConfiguration) Reset() {
	var v MachineConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMachineConfiguration) SetTo(v MachineConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMachineConfiguration) Get() (v MachineConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMachineConfiguration) Or(d MachineConfiguration) MachineConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetrics returns new OptMetrics with value set to v.
func NewOptMetrics(v Metrics) OptMetrics {
	return OptMetrics{
		Value: v,
		Set:   true,
	}
}

// OptMetrics is optional Metrics.
type OptMetrics struct {
	Value Metrics
	Set   bool
}

// IsSet returns true if OptMetrics was set.
func (o OptMetrics) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetrics) Reset() {
	var v Metrics
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetrics) SetTo(v Metrics) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetrics) Get() (v Metrics, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetrics) Or(d Metrics) Metrics {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMmdsConfig returns new OptMmdsConfig with value set to v.
func NewOptMmdsConfig(v MmdsConfig) OptMmdsConfig {
	return OptMmdsConfig{
		Value: v,
		Set:   true,
	}
}

// OptMmdsConfig is optional MmdsConfig.
type OptMmdsConfig struct {
	Value MmdsConfig
	Set   bool
}

// IsSet returns true if OptMmdsConfig was set.
func (o OptMmdsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMmdsConfig) Reset() {
	var v MmdsConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMmdsConfig) SetTo(v MmdsConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMmdsConfig) Get() (v MmdsConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMmdsConfig) Or(d MmdsConfig) MmdsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRateLimiter returns new OptRateLimiter with value set to v.
func NewOptRateLimiter(v RateLimiter) OptRateLimiter {
	return OptRateLimiter{
		Value: v,
		Set:   true,
	}
}

// OptRateLimiter is optional RateLimiter.
type OptRateLimiter struct {
	Value RateLimiter
	Set   bool
}

// IsSet returns true if OptRateLimiter was set.
func (o OptRateLimiter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRateLimiter) Reset() {
	var v RateLimiter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRateLimiter) SetTo(v RateLimiter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRateLimiter) Get() (v RateLimiter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRateLimiter) Or(d RateLimiter) RateLimiter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSnapshotCreateParamsSnapshotType returns new OptSnapshotCreateParamsSnapshotType with value set to v.
func NewOptSnapshotCreateParamsSnapshotType(v SnapshotCreateParamsSnapshotType) OptSnapshotCreateParamsSnapshotType {
	return OptSnapshotCreateParamsSnapshotType{
		Value: v,
		Set:   true,
	}
}

// OptSnapshotCreateParamsSnapshotType is optional SnapshotCreateParamsSnapshotType.
type OptSnapshotCreateParamsSnapshotType struct {
	Value SnapshotCreateParamsSnapshotType
	Set   bool
}

// IsSet returns true if OptSnapshotCreateParamsSnapshotType was set.
func (o OptSnapshotCreateParamsSnapshotType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSnapshotCreateParamsSnapshotType) Reset() {
	var v SnapshotCreateParamsSnapshotType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSnapshotCreateParamsSnapshotType) SetTo(v SnapshotCreateParamsSnapshotType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSnapshotCreateParamsSnapshotType) Get() (v SnapshotCreateParamsSnapshotType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSnapshotCreateParamsSnapshotType) Or(d SnapshotCreateParamsSnapshotType) SnapshotCreateParamsSnapshotType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenBucket returns new OptTokenBucket with value set to v.
func NewOptTokenBucket(v TokenBucket) OptTokenBucket {
	return OptTokenBucket{
		Value: v,
		Set:   true,
	}
}

// OptTokenBucket is optional TokenBucket.
type OptTokenBucket struct {
	Value TokenBucket
	Set   bool
}

// IsSet returns true if OptTokenBucket was set.
func (o OptTokenBucket) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenBucket) Reset() {
	var v TokenBucket
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenBucket) SetTo(v TokenBucket) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenBucket) Get() (v TokenBucket, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenBucket) Or(d TokenBucket) TokenBucket {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVsock returns new OptVsock with value set to v.
func NewOptVsock(v Vsock) OptVsock {
	return OptVsock{
		Value: v,
		Set:   true,
	}
}

// OptVsock is optional Vsock.
type OptVsock struct {
	Value Vsock
	Set   bool
}

// IsSet returns true if OptVsock was set.
func (o OptVsock) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVsock) Reset() {
	var v Vsock
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVsock) SetTo(v Vsock) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVsock) Get() (v Vsock, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVsock) Or(d Vsock) Vsock {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PartialDrive
type PartialDrive struct {
	DriveID string `json:"drive_id"`
	// Host level path for the guest drive.
	PathOnHost  OptString      `json:"path_on_host"`
	RateLimiter OptRateLimiter `json:"rate_limiter"`
}

// GetDriveID returns the value of DriveID.
func (s *PartialDrive) GetDriveID() string {
	return s.DriveID
}

// GetPathOnHost returns the value of PathOnHost.
func (s *PartialDrive) GetPathOnHost() OptString {
	return s.PathOnHost
}

// GetRateLimiter returns the value of RateLimiter.
func (s *PartialDrive) GetRateLimiter() OptRateLimiter {
	return s.RateLimiter
}

// SetDriveID sets the value of DriveID.
func (s *PartialDrive) SetDriveID(val string) {
	s.DriveID = val
}

// SetPathOnHost sets the value of PathOnHost.
func (s *PartialDrive) SetPathOnHost(val OptString) {
	s.PathOnHost = val
}

// SetRateLimiter sets the value of RateLimiter.
func (s *PartialDrive) SetRateLimiter(val OptRateLimiter) {
	s.RateLimiter = val
}

// Defines a partial network interface structure, used to update the rate limiters for that interface,
//
//	after microvm start.
//
// Ref: #/components/schemas/PartialNetworkInterface
type PartialNetworkInterface struct {
	IfaceID       string         `json:"iface_id"`
	RxRateLimiter OptRateLimiter `json:"rx_rate_limiter"`
	TxRateLimiter OptRateLimiter `json:"tx_rate_limiter"`
}

// GetIfaceID returns the value of IfaceID.
func (s *PartialNetworkInterface) GetIfaceID() string {
	return s.IfaceID
}

// GetRxRateLimiter returns the value of RxRateLimiter.
func (s *PartialNetworkInterface) GetRxRateLimiter() OptRateLimiter {
	return s.RxRateLimiter
}

// GetTxRateLimiter returns the value of TxRateLimiter.
func (s *PartialNetworkInterface) GetTxRateLimiter() OptRateLimiter {
	return s.TxRateLimiter
}

// SetIfaceID sets the value of IfaceID.
func (s *PartialNetworkInterface) SetIfaceID(val string) {
	s.IfaceID = val
}

// SetRxRateLimiter sets the value of RxRateLimiter.
func (s *PartialNetworkInterface) SetRxRateLimiter(val OptRateLimiter) {
	s.RxRateLimiter = val
}

// SetTxRateLimiter sets the value of TxRateLimiter.
func (s *PartialNetworkInterface) SetTxRateLimiter(val OptRateLimiter) {
	s.TxRateLimiter = val
}

// PatchBalloonNoContent is response for PatchBalloon operation.
type PatchBalloonNoContent struct{}

func (*PatchBalloonNoContent) patchBalloonRes() {}

// PatchBalloonStatsIntervalNoContent is response for PatchBalloonStatsInterval operation.
type PatchBalloonStatsIntervalNoContent struct{}

func (*PatchBalloonStatsIntervalNoContent) patchBalloonStatsIntervalRes() {}

// PatchGuestDriveByIDNoContent is response for PatchGuestDriveByID operation.
type PatchGuestDriveByIDNoContent struct{}

func (*PatchGuestDriveByIDNoContent) patchGuestDriveByIDRes() {}

// PatchGuestNetworkInterfaceByIDNoContent is response for PatchGuestNetworkInterfaceByID operation.
type PatchGuestNetworkInterfaceByIDNoContent struct{}

func (*PatchGuestNetworkInterfaceByIDNoContent) patchGuestNetworkInterfaceByIDRes() {}

// PatchMachineConfigurationNoContent is response for PatchMachineConfiguration operation.
type PatchMachineConfigurationNoContent struct{}

func (*PatchMachineConfigurationNoContent) patchMachineConfigurationRes() {}

// PatchVmNoContent is response for PatchVm operation.
type PatchVmNoContent struct{}

func (*PatchVmNoContent) patchVmRes() {}

// PutBalloonNoContent is response for PutBalloon operation.
type PutBalloonNoContent struct{}

func (*PutBalloonNoContent) putBalloonRes() {}

// PutGuestBootSourceNoContent is response for PutGuestBootSource operation.
type PutGuestBootSourceNoContent struct{}

func (*PutGuestBootSourceNoContent) putGuestBootSourceRes() {}

// PutGuestDriveByIDNoContent is response for PutGuestDriveByID operation.
type PutGuestDriveByIDNoContent struct{}

func (*PutGuestDriveByIDNoContent) putGuestDriveByIDRes() {}

// PutGuestNetworkInterfaceByIDNoContent is response for PutGuestNetworkInterfaceByID operation.
type PutGuestNetworkInterfaceByIDNoContent struct{}

func (*PutGuestNetworkInterfaceByIDNoContent) putGuestNetworkInterfaceByIDRes() {}

// PutGuestVsockNoContent is response for PutGuestVsock operation.
type PutGuestVsockNoContent struct{}

func (*PutGuestVsockNoContent) putGuestVsockRes() {}

// PutLoggerNoContent is response for PutLogger operation.
type PutLoggerNoContent struct{}

func (*PutLoggerNoContent) putLoggerRes() {}

// PutMachineConfigurationNoContent is response for PutMachineConfiguration operation.
type PutMachineConfigurationNoContent struct{}

func (*PutMachineConfigurationNoContent) putMachineConfigurationRes() {}

// PutMetricsNoContent is response for PutMetrics operation.
type PutMetricsNoContent struct{}

func (*PutMetricsNoContent) putMetricsRes() {}

// Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by
// configuring each of the _bandwidth_ and _ops_ token buckets.
// Ref: #/components/schemas/RateLimiter
type RateLimiter struct {
	Bandwidth OptTokenBucket `json:"bandwidth"`
	Ops       OptTokenBucket `json:"ops"`
}

// GetBandwidth returns the value of Bandwidth.
func (s *RateLimiter) GetBandwidth() OptTokenBucket {
	return s.Bandwidth
}

// GetOps returns the value of Ops.
func (s *RateLimiter) GetOps() OptTokenBucket {
	return s.Ops
}

// SetBandwidth sets the value of Bandwidth.
func (s *RateLimiter) SetBandwidth(val OptTokenBucket) {
	s.Bandwidth = val
}

// SetOps sets the value of Ops.
func (s *RateLimiter) SetOps(val OptTokenBucket) {
	s.Ops = val
}

// Ref: #/components/schemas/SnapshotCreateParams
type SnapshotCreateParams struct {
	// Path to the file that will contain the guest memory.
	MemFilePath string `json:"mem_file_path"`
	// Path to the file that will contain the microVM state.
	SnapshotPath string `json:"snapshot_path"`
	// Type of snapshot to create. It is optional and by default, a full snapshot is created.
	SnapshotType OptSnapshotCreateParamsSnapshotType `json:"snapshot_type"`
	// The microVM version for which we want to create the snapshot. It is optional and it defaults to
	// the current version.
	Version OptString `json:"version"`
}

// GetMemFilePath returns the value of MemFilePath.
func (s *SnapshotCreateParams) GetMemFilePath() string {
	return s.MemFilePath
}

// GetSnapshotPath returns the value of SnapshotPath.
func (s *SnapshotCreateParams) GetSnapshotPath() string {
	return s.SnapshotPath
}

// GetSnapshotType returns the value of SnapshotType.
func (s *SnapshotCreateParams) GetSnapshotType() OptSnapshotCreateParamsSnapshotType {
	return s.SnapshotType
}

// GetVersion returns the value of Version.
func (s *SnapshotCreateParams) GetVersion() OptString {
	return s.Version
}

// SetMemFilePath sets the value of MemFilePath.
func (s *SnapshotCreateParams) SetMemFilePath(val string) {
	s.MemFilePath = val
}

// SetSnapshotPath sets the value of SnapshotPath.
func (s *SnapshotCreateParams) SetSnapshotPath(val string) {
	s.SnapshotPath = val
}

// SetSnapshotType sets the value of SnapshotType.
func (s *SnapshotCreateParams) SetSnapshotType(val OptSnapshotCreateParamsSnapshotType) {
	s.SnapshotType = val
}

// SetVersion sets the value of Version.
func (s *SnapshotCreateParams) SetVersion(val OptString) {
	s.Version = val
}

// Type of snapshot to create. It is optional and by default, a full snapshot is created.
type SnapshotCreateParamsSnapshotType string

const (
	SnapshotCreateParamsSnapshotTypeFull SnapshotCreateParamsSnapshotType = "Full"
	SnapshotCreateParamsSnapshotTypeDiff SnapshotCreateParamsSnapshotType = "Diff"
)

// AllValues returns all SnapshotCreateParamsSnapshotType values.
func (SnapshotCreateParamsSnapshotType) AllValues() []SnapshotCreateParamsSnapshotType {
	return []SnapshotCreateParamsSnapshotType{
		SnapshotCreateParamsSnapshotTypeFull,
		SnapshotCreateParamsSnapshotTypeDiff,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SnapshotCreateParamsSnapshotType) MarshalText() ([]byte, error) {
	switch s {
	case SnapshotCreateParamsSnapshotTypeFull:
		return []byte(s), nil
	case SnapshotCreateParamsSnapshotTypeDiff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SnapshotCreateParamsSnapshotType) UnmarshalText(data []byte) error {
	switch SnapshotCreateParamsSnapshotType(data) {
	case SnapshotCreateParamsSnapshotTypeFull:
		*s = SnapshotCreateParamsSnapshotTypeFull
		return nil
	case SnapshotCreateParamsSnapshotTypeDiff:
		*s = SnapshotCreateParamsSnapshotTypeDiff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SnapshotLoadParams
type SnapshotLoadParams struct {
	// Enable support for incremental (diff) snapshots by tracking dirty guest pages.
	EnableDiffSnapshots OptBool `json:"enable_diff_snapshots"`
	// Path to the file that contains the guest memory to be loaded.
	MemFilePath string `json:"mem_file_path"`
	// Path to the file that contains the microVM state to be loaded.
	SnapshotPath string `json:"snapshot_path"`
	// When set to true, the vm is also resumed if the snapshot load is successful.
	ResumeVM OptBool `json:"resume_vm"`
}

// GetEnableDiffSnapshots returns the value of EnableDiffSnapshots.
func (s *SnapshotLoadParams) GetEnableDiffSnapshots() OptBool {
	return s.EnableDiffSnapshots
}

// GetMemFilePath returns the value of MemFilePath.
func (s *SnapshotLoadParams) GetMemFilePath() string {
	return s.MemFilePath
}

// GetSnapshotPath returns the value of SnapshotPath.
func (s *SnapshotLoadParams) GetSnapshotPath() string {
	return s.SnapshotPath
}

// GetResumeVM returns the value of ResumeVM.
func (s *SnapshotLoadParams) GetResumeVM() OptBool {
	return s.ResumeVM
}

// SetEnableDiffSnapshots sets the value of EnableDiffSnapshots.
func (s *SnapshotLoadParams) SetEnableDiffSnapshots(val OptBool) {
	s.EnableDiffSnapshots = val
}

// SetMemFilePath sets the value of MemFilePath.
func (s *SnapshotLoadParams) SetMemFilePath(val string) {
	s.MemFilePath = val
}

// SetSnapshotPath sets the value of SnapshotPath.
func (s *SnapshotLoadParams) SetSnapshotPath(val string) {
	s.SnapshotPath = val
}

// SetResumeVM sets the value of ResumeVM.
func (s *SnapshotLoadParams) SetResumeVM(val OptBool) {
	s.ResumeVM = val
}

// Defines a token bucket with a maximum capacity (size), an initial burst size (one_time_burst) and
// an interval for refilling purposes (refill_time). The refill-rate is derived from size and
// refill_time, and it is the constant rate at which the tokens replenish. The refill process only
// starts happening after the initial burst budget is consumed. Consumption from the token bucket is
// unbounded in speed which allows for bursts bound in size by the amount of tokens available. Once
// the token bucket is empty, consumption speed is bound by the refill_rate.
// Ref: #/components/schemas/TokenBucket
type TokenBucket struct {
	// The initial size of a token bucket.
	OneTimeBurst OptInt64 `json:"one_time_burst"`
	// The amount of milliseconds it takes for the bucket to refill.
	RefillTime int64 `json:"refill_time"`
	// The total number of tokens this bucket can hold.
	Size int64 `json:"size"`
}

// GetOneTimeBurst returns the value of OneTimeBurst.
func (s *TokenBucket) GetOneTimeBurst() OptInt64 {
	return s.OneTimeBurst
}

// GetRefillTime returns the value of RefillTime.
func (s *TokenBucket) GetRefillTime() int64 {
	return s.RefillTime
}

// GetSize returns the value of Size.
func (s *TokenBucket) GetSize() int64 {
	return s.Size
}

// SetOneTimeBurst sets the value of OneTimeBurst.
func (s *TokenBucket) SetOneTimeBurst(val OptInt64) {
	s.OneTimeBurst = val
}

// SetRefillTime sets the value of RefillTime.
func (s *TokenBucket) SetRefillTime(val int64) {
	s.RefillTime = val
}

// SetSize sets the value of Size.
func (s *TokenBucket) SetSize(val int64) {
	s.Size = val
}

// Defines the microVM running state. It is especially useful in the snapshotting context.
// Ref: #/components/schemas/Vm
type VM struct {
	State VMState `json:"state"`
}

// GetState returns the value of State.
func (s *VM) GetState() VMState {
	return s.State
}

// SetState sets the value of State.
func (s *VM) SetState(val VMState) {
	s.State = val
}

type VMState string

const (
	VMStatePaused  VMState = "Paused"
	VMStateResumed VMState = "Resumed"
)

// AllValues returns all VMState values.
func (VMState) AllValues() []VMState {
	return []VMState{
		VMStatePaused,
		VMStateResumed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VMState) MarshalText() ([]byte, error) {
	switch s {
	case VMStatePaused:
		return []byte(s), nil
	case VMStateResumed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VMState) UnmarshalText(data []byte) error {
	switch VMState(data) {
	case VMStatePaused:
		*s = VMStatePaused
		return nil
	case VMStateResumed:
		*s = VMStateResumed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines a vsock device, backed by a set of Unix Domain Sockets, on the host side. For
// host-initiated connections, Firecracker will be listening on the Unix socket identified by the
// path `uds_path`. Firecracker will create this socket, bind and listen on it. Host-initiated
// connections will be performed by connection to this socket and issuing a connection forwarding
// request to the desired guest-side vsock port (i.e. `CONNECT 52\n`, to connect to port 52). For
// guest-initiated connections, Firecracker will expect host software to be bound and listening on
// Unix sockets at `uds_path_<PORT>`. E.g. "/path/to/host_vsock.sock_52" for port number 52.
// Ref: #/components/schemas/Vsock
type Vsock struct {
	// Guest Vsock CID.
	GuestCid int `json:"guest_cid"`
	// Path to UNIX domain socket, used to proxy vsock connections.
	UdsPath string `json:"uds_path"`
	VsockID string `json:"vsock_id"`
}

// GetGuestCid returns the value of GuestCid.
func (s *Vsock) GetGuestCid() int {
	return s.GuestCid
}

// GetUdsPath returns the value of UdsPath.
func (s *Vsock) GetUdsPath() string {
	return s.UdsPath
}

// GetVsockID returns the value of VsockID.
func (s *Vsock) GetVsockID() string {
	return s.VsockID
}

// SetGuestCid sets the value of GuestCid.
func (s *Vsock) SetGuestCid(val int) {
	s.GuestCid = val
}

// SetUdsPath sets the value of UdsPath.
func (s *Vsock) SetUdsPath(val string) {
	s.UdsPath = val
}

// SetVsockID sets the value of VsockID.
func (s *Vsock) SetVsockID(val string) {
	s.VsockID = val
}

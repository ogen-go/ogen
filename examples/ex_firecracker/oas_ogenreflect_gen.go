// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		CreateSnapshot: ogenreflect.RuntimeOperation{
			Name: "CreateSnapshot",
			ID:   "createSnapshot",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SnapshotCreateParams)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreateSnapshotRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CreateSnapshotNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		CreateSyncAction: ogenreflect.RuntimeOperation{
			Name: "CreateSyncAction",
			ID:   "createSyncAction",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(InstanceActionInfo)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreateSyncActionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CreateSyncActionNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		DescribeBalloonConfig: ogenreflect.RuntimeOperation{
			Name: "DescribeBalloonConfig",
			ID:   "describeBalloonConfig",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(DescribeBalloonConfigRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Balloon)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Balloon)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		DescribeBalloonStats: ogenreflect.RuntimeOperation{
			Name: "DescribeBalloonStats",
			ID:   "describeBalloonStats",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(DescribeBalloonStatsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*BalloonStats)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(BalloonStats)).Elem(),
							},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		DescribeInstance: ogenreflect.RuntimeOperation{
			Name: "DescribeInstance",
			ID:   "describeInstance",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(DescribeInstanceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*InstanceInfo)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(InstanceInfo)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		GetExportVmConfig: ogenreflect.RuntimeOperation{
			Name: "GetExportVmConfig",
			ID:   "getExportVmConfig",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetExportVmConfigRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*FullVmConfiguration)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(FullVmConfiguration)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		GetMachineConfiguration: ogenreflect.RuntimeOperation{
			Name: "GetMachineConfiguration",
			ID:   "getMachineConfiguration",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetMachineConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MachineConfiguration)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MachineConfiguration)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		LoadSnapshot: ogenreflect.RuntimeOperation{
			Name: "LoadSnapshot",
			ID:   "loadSnapshot",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SnapshotLoadParams)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(LoadSnapshotRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*LoadSnapshotNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		MmdsConfigPut: ogenreflect.RuntimeOperation{
			Name: "MmdsConfigPut",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MmdsConfig)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MmdsConfigPutRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MmdsConfigPutNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		MmdsGet: ogenreflect.RuntimeOperation{
			Name: "MmdsGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MmdsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MmdsGetOK)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MmdsGetOK)).Elem(),
							},
						},
						"404": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		MmdsPatch: ogenreflect.RuntimeOperation{
			Name: "MmdsPatch",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(*MmdsPatchReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MmdsPatchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MmdsPatchNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		MmdsPut: ogenreflect.RuntimeOperation{
			Name: "MmdsPut",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(*MmdsPutReq)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MmdsPutRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MmdsPutNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PatchBalloon: ogenreflect.RuntimeOperation{
			Name: "PatchBalloon",
			ID:   "patchBalloon",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(BalloonUpdate)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PatchBalloonRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PatchBalloonNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PatchBalloonStatsInterval: ogenreflect.RuntimeOperation{
			Name: "PatchBalloonStatsInterval",
			ID:   "patchBalloonStatsInterval",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(BalloonStatsUpdate)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PatchBalloonStatsIntervalRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PatchBalloonStatsIntervalNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PatchGuestDriveByID: ogenreflect.RuntimeOperation{
			Name: "PatchGuestDriveByID",
			ID:   "patchGuestDriveByID",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PartialDrive)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PatchGuestDriveByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "drive_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "drive_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PatchGuestDriveByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PatchGuestDriveByIDNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PatchGuestNetworkInterfaceByID: ogenreflect.RuntimeOperation{
			Name: "PatchGuestNetworkInterfaceByID",
			ID:   "patchGuestNetworkInterfaceByID",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(PartialNetworkInterface)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PatchGuestNetworkInterfaceByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "iface_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "iface_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PatchGuestNetworkInterfaceByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PatchGuestNetworkInterfaceByIDNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PatchMachineConfiguration: ogenreflect.RuntimeOperation{
			Name: "PatchMachineConfiguration",
			ID:   "patchMachineConfiguration",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptMachineConfiguration)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PatchMachineConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PatchMachineConfigurationNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PatchVm: ogenreflect.RuntimeOperation{
			Name: "PatchVm",
			ID:   "patchVm",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(VM)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PatchVmRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PatchVmNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutBalloon: ogenreflect.RuntimeOperation{
			Name: "PutBalloon",
			ID:   "putBalloon",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(Balloon)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutBalloonRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutBalloonNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutGuestBootSource: ogenreflect.RuntimeOperation{
			Name: "PutGuestBootSource",
			ID:   "putGuestBootSource",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(BootSource)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutGuestBootSourceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutGuestBootSourceNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutGuestDriveByID: ogenreflect.RuntimeOperation{
			Name: "PutGuestDriveByID",
			ID:   "putGuestDriveByID",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(Drive)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PutGuestDriveByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "drive_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "drive_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutGuestDriveByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutGuestDriveByIDNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutGuestNetworkInterfaceByID: ogenreflect.RuntimeOperation{
			Name: "PutGuestNetworkInterfaceByID",
			ID:   "putGuestNetworkInterfaceByID",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(NetworkInterface)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PutGuestNetworkInterfaceByIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "iface_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "iface_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutGuestNetworkInterfaceByIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutGuestNetworkInterfaceByIDNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutGuestVsock: ogenreflect.RuntimeOperation{
			Name: "PutGuestVsock",
			ID:   "putGuestVsock",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(Vsock)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutGuestVsockRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutGuestVsockNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutLogger: ogenreflect.RuntimeOperation{
			Name: "PutLogger",
			ID:   "putLogger",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(Logger)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutLoggerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutLoggerNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutMachineConfiguration: ogenreflect.RuntimeOperation{
			Name: "PutMachineConfiguration",
			ID:   "putMachineConfiguration",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptMachineConfiguration)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutMachineConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutMachineConfigurationNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		PutMetrics: ogenreflect.RuntimeOperation{
			Name: "PutMetrics",
			ID:   "putMetrics",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(Metrics)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PutMetricsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PutMetricsNoContent)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"204": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"400": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	CreateSnapshot                 ogenreflect.RuntimeOperation
	CreateSyncAction               ogenreflect.RuntimeOperation
	DescribeBalloonConfig          ogenreflect.RuntimeOperation
	DescribeBalloonStats           ogenreflect.RuntimeOperation
	DescribeInstance               ogenreflect.RuntimeOperation
	GetExportVmConfig              ogenreflect.RuntimeOperation
	GetMachineConfiguration        ogenreflect.RuntimeOperation
	LoadSnapshot                   ogenreflect.RuntimeOperation
	MmdsConfigPut                  ogenreflect.RuntimeOperation
	MmdsGet                        ogenreflect.RuntimeOperation
	MmdsPatch                      ogenreflect.RuntimeOperation
	MmdsPut                        ogenreflect.RuntimeOperation
	PatchBalloon                   ogenreflect.RuntimeOperation
	PatchBalloonStatsInterval      ogenreflect.RuntimeOperation
	PatchGuestDriveByID            ogenreflect.RuntimeOperation
	PatchGuestNetworkInterfaceByID ogenreflect.RuntimeOperation
	PatchMachineConfiguration      ogenreflect.RuntimeOperation
	PatchVm                        ogenreflect.RuntimeOperation
	PutBalloon                     ogenreflect.RuntimeOperation
	PutGuestBootSource             ogenreflect.RuntimeOperation
	PutGuestDriveByID              ogenreflect.RuntimeOperation
	PutGuestNetworkInterfaceByID   ogenreflect.RuntimeOperation
	PutGuestVsock                  ogenreflect.RuntimeOperation
	PutLogger                      ogenreflect.RuntimeOperation
	PutMachineConfiguration        ogenreflect.RuntimeOperation
	PutMetrics                     ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "CreateSnapshot":
		return p.CreateSnapshot, true
	case "CreateSyncAction":
		return p.CreateSyncAction, true
	case "DescribeBalloonConfig":
		return p.DescribeBalloonConfig, true
	case "DescribeBalloonStats":
		return p.DescribeBalloonStats, true
	case "DescribeInstance":
		return p.DescribeInstance, true
	case "GetExportVmConfig":
		return p.GetExportVmConfig, true
	case "GetMachineConfiguration":
		return p.GetMachineConfiguration, true
	case "LoadSnapshot":
		return p.LoadSnapshot, true
	case "MmdsConfigPut":
		return p.MmdsConfigPut, true
	case "MmdsGet":
		return p.MmdsGet, true
	case "MmdsPatch":
		return p.MmdsPatch, true
	case "MmdsPut":
		return p.MmdsPut, true
	case "PatchBalloon":
		return p.PatchBalloon, true
	case "PatchBalloonStatsInterval":
		return p.PatchBalloonStatsInterval, true
	case "PatchGuestDriveByID":
		return p.PatchGuestDriveByID, true
	case "PatchGuestNetworkInterfaceByID":
		return p.PatchGuestNetworkInterfaceByID, true
	case "PatchMachineConfiguration":
		return p.PatchMachineConfiguration, true
	case "PatchVm":
		return p.PatchVm, true
	case "PutBalloon":
		return p.PutBalloon, true
	case "PutGuestBootSource":
		return p.PutGuestBootSource, true
	case "PutGuestDriveByID":
		return p.PutGuestDriveByID, true
	case "PutGuestNetworkInterfaceByID":
		return p.PutGuestNetworkInterfaceByID, true
	case "PutGuestVsock":
		return p.PutGuestVsock, true
	case "PutLogger":
		return p.PutLogger, true
	case "PutMachineConfiguration":
		return p.PutMachineConfiguration, true
	case "PutMetrics":
		return p.PutMetrics, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "createSnapshot":
		return p.CreateSnapshot, true
	case "createSyncAction":
		return p.CreateSyncAction, true
	case "describeBalloonConfig":
		return p.DescribeBalloonConfig, true
	case "describeBalloonStats":
		return p.DescribeBalloonStats, true
	case "describeInstance":
		return p.DescribeInstance, true
	case "getExportVmConfig":
		return p.GetExportVmConfig, true
	case "getMachineConfiguration":
		return p.GetMachineConfiguration, true
	case "loadSnapshot":
		return p.LoadSnapshot, true
	case "patchBalloon":
		return p.PatchBalloon, true
	case "patchBalloonStatsInterval":
		return p.PatchBalloonStatsInterval, true
	case "patchGuestDriveByID":
		return p.PatchGuestDriveByID, true
	case "patchGuestNetworkInterfaceByID":
		return p.PatchGuestNetworkInterfaceByID, true
	case "patchMachineConfiguration":
		return p.PatchMachineConfiguration, true
	case "patchVm":
		return p.PatchVm, true
	case "putBalloon":
		return p.PutBalloon, true
	case "putGuestBootSource":
		return p.PutGuestBootSource, true
	case "putGuestDriveByID":
		return p.PutGuestDriveByID, true
	case "putGuestNetworkInterfaceByID":
		return p.PutGuestNetworkInterfaceByID, true
	case "putGuestVsock":
		return p.PutGuestVsock, true
	case "putLogger":
		return p.PutLogger, true
	case "putMachineConfiguration":
		return p.PutMachineConfiguration, true
	case "putMetrics":
		return p.PutMetrics, true
	default:
		return op, false
	}
}

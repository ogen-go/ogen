// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func (s *Server) decodeCreateSnapshotRequest(r *http.Request) (
	req *SnapshotCreateParams,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request SnapshotCreateParams
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeCreateSyncActionRequest(r *http.Request) (
	req *InstanceActionInfo,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request InstanceActionInfo
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeLoadSnapshotRequest(r *http.Request) (
	req *SnapshotLoadParams,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request SnapshotLoadParams
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeMmdsConfigPutRequest(r *http.Request) (
	req *MmdsConfig,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request MmdsConfig
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeMmdsPatchRequest(r *http.Request) (
	req *MmdsPatchReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, nil
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, nil
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request *MmdsPatchReq
		if err := func() error {
			request = nil
			var elem MmdsPatchReq
			if err := elem.Decode(d); err != nil {
				return err
			}
			request = &elem
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeMmdsPutRequest(r *http.Request) (
	req *MmdsPutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, nil
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, nil
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request *MmdsPutReq
		if err := func() error {
			request = nil
			var elem MmdsPutReq
			if err := elem.Decode(d); err != nil {
				return err
			}
			request = &elem
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePatchBalloonRequest(r *http.Request) (
	req *BalloonUpdate,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request BalloonUpdate
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePatchBalloonStatsIntervalRequest(r *http.Request) (
	req *BalloonStatsUpdate,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request BalloonStatsUpdate
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePatchGuestDriveByIDRequest(r *http.Request) (
	req *PartialDrive,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request PartialDrive
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePatchGuestNetworkInterfaceByIDRequest(r *http.Request) (
	req *PartialNetworkInterface,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request PartialNetworkInterface
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePatchMachineConfigurationRequest(r *http.Request) (
	req OptMachineConfiguration,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, nil
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, nil
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request OptMachineConfiguration
		if err := func() error {
			request.Reset()
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if value, ok := request.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePatchVmRequest(r *http.Request) (
	req *VM,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request VM
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutBalloonRequest(r *http.Request) (
	req *Balloon,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request Balloon
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutGuestBootSourceRequest(r *http.Request) (
	req *BootSource,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request BootSource
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutGuestDriveByIDRequest(r *http.Request) (
	req *Drive,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request Drive
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutGuestNetworkInterfaceByIDRequest(r *http.Request) (
	req *NetworkInterface,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request NetworkInterface
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutGuestVsockRequest(r *http.Request) (
	req *Vsock,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request Vsock
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutLoggerRequest(r *http.Request) (
	req *Logger,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request Logger
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutMachineConfigurationRequest(r *http.Request) (
	req OptMachineConfiguration,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, nil
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, nil
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request OptMachineConfiguration
		if err := func() error {
			request.Reset()
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if value, ok := request.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodePutMetricsRequest(r *http.Request) (
	req *Metrics,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request Metrics
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

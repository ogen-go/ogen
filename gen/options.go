package gen

import (
	"regexp"
	"strings"

	"github.com/go-faster/errors"
	"go.uber.org/zap"

	"github.com/ogen-go/ogen/gen/ir"
	"github.com/ogen-go/ogen/openapi"
)

// Options is Generator options.
type Options struct {
	// NoClient disables client generation.
	NoClient bool
	// NoServer disables server generation.
	NoServer bool
	// GenerateExampleTests whether to generate decoding tests using schema examples.
	GenerateExampleTests bool
	// SkipTestRegex is regex to skip generated tests.
	SkipTestRegex *regexp.Regexp
	// SkipUnimplemented disables generation of unimplemented Handler, like UnimplementedServer generated by gRPC.
	SkipUnimplemented bool
	// InferSchemaType enables type inference for schemas. Schema parser will try to detect schema type
	// by its properties.
	InferSchemaType bool

	// AllowRemote enables remote references resolving.
	//
	// See https://github.com/ogen-go/ogen/issues/385.
	AllowRemote bool
	// Remote is remote reference resolver options.
	Remote RemoteOptions

	// Filters contains filters to skip operations.
	Filters Filters
	// IgnoreNotImplemented contains ErrNotImplemented messages to ignore.
	IgnoreNotImplemented []string
	// NotImplementedHook is hook for ErrNotImplemented errors.
	NotImplementedHook func(name string, err error)

	// ContentTypeAliases contains content type aliases.
	ContentTypeAliases ContentTypeAliases

	// Filename is a name of the spec file.
	//
	// Used for error messages.
	Filename string
	// Logger to use.
	Logger *zap.Logger
}

func (o *Options) setDefaults() {
	if o.Logger == nil {
		o.Logger = zap.NewNop()
	}
}

// ContentTypeAliases maps content type to concrete ogen encoding.
type ContentTypeAliases map[string]ir.Encoding

// String implements fmt.Stringer.
func (m ContentTypeAliases) String() string {
	var (
		b     strings.Builder
		first = true
	)
	for k, v := range m {
		if first {
			first = false
		} else {
			b.WriteString(",")
		}
		b.WriteString(k)
		b.WriteByte('=')
		b.WriteString(v.String())
	}
	return b.String()
}

// Set implements flag.Value.
func (m *ContentTypeAliases) Set(value string) error {
	if *m == nil {
		*m = ContentTypeAliases{}
	}
	split := strings.SplitN(value, "=", 2)
	if len(split) != 2 {
		return errors.Errorf("invalid mapping %q", value)
	}
	(*m)[split[0]] = ir.Encoding(split[1])
	return nil
}

// Filters contains filters to skip operations.
type Filters struct {
	PathRegex *regexp.Regexp
	Methods   []string
}

func (f Filters) accept(op *openapi.Operation) bool {
	if f.PathRegex != nil && !f.PathRegex.MatchString(op.Path.String()) {
		return false
	}

	if len(f.Methods) > 0 {
		for _, m := range f.Methods {
			if strings.EqualFold(m, op.HTTPMethod) {
				return true
			}
		}
		return false
	}

	return true
}
